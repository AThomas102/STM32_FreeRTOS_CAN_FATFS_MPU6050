
nucleo_sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  08009fe0  08009fe0  00019fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a900  0800a900  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800a900  0800a900  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a900  0800a900  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a900  0800a900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a904  0800a904  0001a904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000208  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001537b  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cc1  00000000  00000000  00035433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  000380f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001070  00000000  00000000  000392a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022eb7  00000000  00000000  0003a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191b1  00000000  00000000  0005d1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdc2a  00000000  00000000  00076378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143fa2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f34  00000000  00000000  00143ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fc8 	.word	0x08009fc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08009fc8 	.word	0x08009fc8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2140      	movs	r1, #64	; 0x40
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <SELECT+0x18>)
 80008a6:	f001 fd1d 	bl	80022e4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f001 fa8a 	bl	8001dc4 <HAL_Delay>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	48000400 	.word	0x48000400

080008b8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <DESELECT+0x18>)
 80008c2:	f001 fd0f 	bl	80022e4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f001 fa7c 	bl	8001dc4 <HAL_Delay>
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	48000400 	.word	0x48000400

080008d4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008de:	bf00      	nop
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <SPI_TxByte+0x30>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d1f8      	bne.n	80008e0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80008ee:	1df9      	adds	r1, r7, #7
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	2201      	movs	r2, #1
 80008f4:	4803      	ldr	r0, [pc, #12]	; (8000904 <SPI_TxByte+0x30>)
 80008f6:	f003 fa92 	bl	8003e1e <HAL_SPI_Transmit>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000ac 	.word	0x200000ac

08000908 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000914:	bf00      	nop
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <SPI_TxBuffer+0x30>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b02      	cmp	r3, #2
 8000922:	d1f8      	bne.n	8000916 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000924:	887a      	ldrh	r2, [r7, #2]
 8000926:	2364      	movs	r3, #100	; 0x64
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <SPI_TxBuffer+0x30>)
 800092c:	f003 fa77 	bl	8003e1e <HAL_SPI_Transmit>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200000ac 	.word	0x200000ac

0800093c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000942:	23ff      	movs	r3, #255	; 0xff
 8000944:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000946:	bf00      	nop
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <SPI_RxByte+0x34>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	2b02      	cmp	r3, #2
 8000954:	d1f8      	bne.n	8000948 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000956:	1dba      	adds	r2, r7, #6
 8000958:	1df9      	adds	r1, r7, #7
 800095a:	2364      	movs	r3, #100	; 0x64
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <SPI_RxByte+0x34>)
 8000962:	f003 fbca 	bl	80040fa <HAL_SPI_TransmitReceive>

  return data;
 8000966:	79bb      	ldrb	r3, [r7, #6]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000ac 	.word	0x200000ac

08000974 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800097c:	f7ff ffde 	bl	800093c <SPI_RxByte>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	701a      	strb	r2, [r3, #0]
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <SD_ReadyWait+0x30>)
 8000998:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800099c:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800099e:	f7ff ffcd 	bl	800093c <SPI_RxByte>
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2bff      	cmp	r3, #255	; 0xff
 80009aa:	d003      	beq.n	80009b4 <SD_ReadyWait+0x24>
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SD_ReadyWait+0x30>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1f4      	bne.n	800099e <SD_ReadyWait+0xe>

  return res;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000a6 	.word	0x200000a6

080009c4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80009ca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80009ce:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80009d0:	f7ff ff72 	bl	80008b8 <DESELECT>
  for(int i = 0; i < 10; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	e005      	b.n	80009e6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80009da:	20ff      	movs	r0, #255	; 0xff
 80009dc:	f7ff ff7a 	bl	80008d4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b09      	cmp	r3, #9
 80009ea:	ddf6      	ble.n	80009da <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80009ec:	f7ff ff56 	bl	800089c <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000a04:	2395      	movs	r3, #149	; 0x95
 8000a06:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2106      	movs	r1, #6
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff7b 	bl	8000908 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000a12:	e002      	b.n	8000a1a <SD_PowerOn+0x56>
  {
    cnt--;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000a1a:	f7ff ff8f 	bl	800093c <SPI_RxByte>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d002      	beq.n	8000a2a <SD_PowerOn+0x66>
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1f4      	bne.n	8000a14 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000a2a:	f7ff ff45 	bl	80008b8 <DESELECT>
  SPI_TxByte(0XFF);
 8000a2e:	20ff      	movs	r0, #255	; 0xff
 8000a30:	f7ff ff50 	bl	80008d4 <SPI_TxByte>

  PowerFlag = 1;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <SD_PowerOn+0x80>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000a9 	.word	0x200000a9

08000a48 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <SD_PowerOff+0x14>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	200000a9 	.word	0x200000a9

08000a60 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <SD_CheckPower+0x14>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200000a9 	.word	0x200000a9

08000a78 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <SD_RxDataBlock+0x58>)
 8000a84:	22c8      	movs	r2, #200	; 0xc8
 8000a86:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000a88:	f7ff ff58 	bl	800093c <SPI_RxByte>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2bff      	cmp	r3, #255	; 0xff
 8000a94:	d103      	bne.n	8000a9e <SD_RxDataBlock+0x26>
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <SD_RxDataBlock+0x58>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f4      	bne.n	8000a88 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	2bfe      	cmp	r3, #254	; 0xfe
 8000aa2:	d001      	beq.n	8000aa8 <SD_RxDataBlock+0x30>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e00f      	b.n	8000ac8 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff60 	bl	8000974 <SPI_RxBytePtr>
  } while(len--);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	1e5a      	subs	r2, r3, #1
 8000ab8:	603a      	str	r2, [r7, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d1f4      	bne.n	8000aa8 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000abe:	f7ff ff3d 	bl	800093c <SPI_RxByte>
  SPI_RxByte();
 8000ac2:	f7ff ff3b 	bl	800093c <SPI_RxByte>

  return TRUE;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000a4 	.word	0x200000a4

08000ad4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000ae4:	f7ff ff54 	bl	8000990 <SD_ReadyWait>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2bff      	cmp	r3, #255	; 0xff
 8000aec:	d001      	beq.n	8000af2 <SD_TxDataBlock+0x1e>
 8000aee:	2300      	movs	r3, #0
 8000af0:	e02f      	b.n	8000b52 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000af2:	78fb      	ldrb	r3, [r7, #3]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff feed 	bl	80008d4 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000afa:	78fb      	ldrb	r3, [r7, #3]
 8000afc:	2bfd      	cmp	r3, #253	; 0xfd
 8000afe:	d020      	beq.n	8000b42 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff feff 	bl	8000908 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000b0a:	f7ff ff17 	bl	800093c <SPI_RxByte>
    SPI_RxByte();
 8000b0e:	f7ff ff15 	bl	800093c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000b12:	e00b      	b.n	8000b2c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000b14:	f7ff ff12 	bl	800093c <SPI_RxByte>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	f003 031f 	and.w	r3, r3, #31
 8000b22:	2b05      	cmp	r3, #5
 8000b24:	d006      	beq.n	8000b34 <SD_TxDataBlock+0x60>
      i++;
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000b2c:	7bbb      	ldrb	r3, [r7, #14]
 8000b2e:	2b40      	cmp	r3, #64	; 0x40
 8000b30:	d9f0      	bls.n	8000b14 <SD_TxDataBlock+0x40>
 8000b32:	e000      	b.n	8000b36 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000b34:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000b36:	bf00      	nop
 8000b38:	f7ff ff00 	bl	800093c <SPI_RxByte>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0fa      	beq.n	8000b38 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	f003 031f 	and.w	r3, r3, #31
 8000b48:	2b05      	cmp	r3, #5
 8000b4a:	d101      	bne.n	8000b50 <SD_TxDataBlock+0x7c>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	6039      	str	r1, [r7, #0]
 8000b64:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000b66:	f7ff ff13 	bl	8000990 <SD_ReadyWait>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2bff      	cmp	r3, #255	; 0xff
 8000b6e:	d001      	beq.n	8000b74 <SD_SendCmd+0x1a>
 8000b70:	23ff      	movs	r3, #255	; 0xff
 8000b72:	e042      	b.n	8000bfa <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff feac 	bl	80008d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	0e1b      	lsrs	r3, r3, #24
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fea6 	bl	80008d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	0c1b      	lsrs	r3, r3, #16
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fea0 	bl	80008d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fe9a 	bl	80008d4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe95 	bl	80008d4 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b40      	cmp	r3, #64	; 0x40
 8000bae:	d102      	bne.n	8000bb6 <SD_SendCmd+0x5c>
 8000bb0:	2395      	movs	r3, #149	; 0x95
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e007      	b.n	8000bc6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b48      	cmp	r3, #72	; 0x48
 8000bba:	d102      	bne.n	8000bc2 <SD_SendCmd+0x68>
 8000bbc:	2387      	movs	r3, #135	; 0x87
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e001      	b.n	8000bc6 <SD_SendCmd+0x6c>
  else crc = 1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe83 	bl	80008d4 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b4c      	cmp	r3, #76	; 0x4c
 8000bd2:	d101      	bne.n	8000bd8 <SD_SendCmd+0x7e>
 8000bd4:	f7ff feb2 	bl	800093c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000bdc:	f7ff feae 	bl	800093c <SPI_RxByte>
 8000be0:	4603      	mov	r3, r0
 8000be2:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000be4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da05      	bge.n	8000bf8 <SD_SendCmd+0x9e>
 8000bec:	7bbb      	ldrb	r3, [r7, #14]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	73bb      	strb	r3, [r7, #14]
 8000bf2:	7bbb      	ldrb	r3, [r7, #14]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f1      	bne.n	8000bdc <SD_SendCmd+0x82>

  return res;
 8000bf8:	7b7b      	ldrb	r3, [r7, #13]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SD_disk_initialize+0x14>
 8000c14:	2301      	movs	r3, #1
 8000c16:	e0d1      	b.n	8000dbc <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000c18:	4b6a      	ldr	r3, [pc, #424]	; (8000dc4 <SD_disk_initialize+0x1c0>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <SD_disk_initialize+0x2a>
 8000c26:	4b67      	ldr	r3, [pc, #412]	; (8000dc4 <SD_disk_initialize+0x1c0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	e0c6      	b.n	8000dbc <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000c2e:	f7ff fec9 	bl	80009c4 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000c32:	f7ff fe33 	bl	800089c <SELECT>

  /* check disk type */
  type = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2040      	movs	r0, #64	; 0x40
 8000c3e:	f7ff ff8c 	bl	8000b5a <SD_SendCmd>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	f040 80a1 	bne.w	8000d8c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000c4a:	4b5f      	ldr	r3, [pc, #380]	; (8000dc8 <SD_disk_initialize+0x1c4>)
 8000c4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c50:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000c52:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000c56:	2048      	movs	r0, #72	; 0x48
 8000c58:	f7ff ff7f 	bl	8000b5a <SD_SendCmd>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d155      	bne.n	8000d0e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	e00c      	b.n	8000c82 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000c68:	7bfc      	ldrb	r4, [r7, #15]
 8000c6a:	f7ff fe67 	bl	800093c <SPI_RxByte>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	f104 0310 	add.w	r3, r4, #16
 8000c76:	443b      	add	r3, r7
 8000c78:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	d9ef      	bls.n	8000c68 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c88:	7abb      	ldrb	r3, [r7, #10]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d17e      	bne.n	8000d8c <SD_disk_initialize+0x188>
 8000c8e:	7afb      	ldrb	r3, [r7, #11]
 8000c90:	2baa      	cmp	r3, #170	; 0xaa
 8000c92:	d17b      	bne.n	8000d8c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c94:	2100      	movs	r1, #0
 8000c96:	2077      	movs	r0, #119	; 0x77
 8000c98:	f7ff ff5f 	bl	8000b5a <SD_SendCmd>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d807      	bhi.n	8000cb2 <SD_disk_initialize+0xae>
 8000ca2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ca6:	2069      	movs	r0, #105	; 0x69
 8000ca8:	f7ff ff57 	bl	8000b5a <SD_SendCmd>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d004      	beq.n	8000cbc <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000cb2:	4b45      	ldr	r3, [pc, #276]	; (8000dc8 <SD_disk_initialize+0x1c4>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ec      	bne.n	8000c94 <SD_disk_initialize+0x90>
 8000cba:	e000      	b.n	8000cbe <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000cbc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <SD_disk_initialize+0x1c4>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d062      	beq.n	8000d8c <SD_disk_initialize+0x188>
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	207a      	movs	r0, #122	; 0x7a
 8000cca:	f7ff ff46 	bl	8000b5a <SD_SendCmd>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d15b      	bne.n	8000d8c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e00c      	b.n	8000cf4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000cda:	7bfc      	ldrb	r4, [r7, #15]
 8000cdc:	f7ff fe2e 	bl	800093c <SPI_RxByte>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	f104 0310 	add.w	r3, r4, #16
 8000ce8:	443b      	add	r3, r7
 8000cea:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d9ef      	bls.n	8000cda <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000cfa:	7a3b      	ldrb	r3, [r7, #8]
 8000cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SD_disk_initialize+0x104>
 8000d04:	230c      	movs	r3, #12
 8000d06:	e000      	b.n	8000d0a <SD_disk_initialize+0x106>
 8000d08:	2304      	movs	r3, #4
 8000d0a:	73bb      	strb	r3, [r7, #14]
 8000d0c:	e03e      	b.n	8000d8c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2077      	movs	r0, #119	; 0x77
 8000d12:	f7ff ff22 	bl	8000b5a <SD_SendCmd>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d808      	bhi.n	8000d2e <SD_disk_initialize+0x12a>
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2069      	movs	r0, #105	; 0x69
 8000d20:	f7ff ff1b 	bl	8000b5a <SD_SendCmd>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d801      	bhi.n	8000d2e <SD_disk_initialize+0x12a>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e000      	b.n	8000d30 <SD_disk_initialize+0x12c>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d10e      	bne.n	8000d56 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2077      	movs	r0, #119	; 0x77
 8000d3c:	f7ff ff0d 	bl	8000b5a <SD_SendCmd>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d80e      	bhi.n	8000d64 <SD_disk_initialize+0x160>
 8000d46:	2100      	movs	r1, #0
 8000d48:	2069      	movs	r0, #105	; 0x69
 8000d4a:	f7ff ff06 	bl	8000b5a <SD_SendCmd>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d107      	bne.n	8000d64 <SD_disk_initialize+0x160>
 8000d54:	e00c      	b.n	8000d70 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d56:	2100      	movs	r1, #0
 8000d58:	2041      	movs	r0, #65	; 0x41
 8000d5a:	f7ff fefe 	bl	8000b5a <SD_SendCmd>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d004      	beq.n	8000d6e <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <SD_disk_initialize+0x1c4>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1e2      	bne.n	8000d32 <SD_disk_initialize+0x12e>
 8000d6c:	e000      	b.n	8000d70 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d6e:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <SD_disk_initialize+0x1c4>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d007      	beq.n	8000d88 <SD_disk_initialize+0x184>
 8000d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7c:	2050      	movs	r0, #80	; 0x50
 8000d7e:	f7ff feec 	bl	8000b5a <SD_SendCmd>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SD_disk_initialize+0x188>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000d8c:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <SD_disk_initialize+0x1c8>)
 8000d8e:	7bbb      	ldrb	r3, [r7, #14]
 8000d90:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000d92:	f7ff fd91 	bl	80008b8 <DESELECT>
  SPI_RxByte();
 8000d96:	f7ff fdd1 	bl	800093c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d008      	beq.n	8000db2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <SD_disk_initialize+0x1c0>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f023 0301 	bic.w	r3, r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SD_disk_initialize+0x1c0>)
 8000dae:	701a      	strb	r2, [r3, #0]
 8000db0:	e001      	b.n	8000db6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000db2:	f7ff fe49 	bl	8000a48 <SD_PowerOff>
  }

  return Stat;
 8000db6:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <SD_disk_initialize+0x1c0>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	200000a4 	.word	0x200000a4
 8000dcc:	200000a8 	.word	0x200000a8

08000dd0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SD_disk_status+0x14>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e002      	b.n	8000dea <SD_disk_status+0x1a>
  return Stat;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SD_disk_status+0x28>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000000 	.word	0x20000000

08000dfc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d102      	bne.n	8000e18 <SD_disk_read+0x1c>
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <SD_disk_read+0x20>
 8000e18:	2304      	movs	r3, #4
 8000e1a:	e051      	b.n	8000ec0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <SD_disk_read+0xcc>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SD_disk_read+0x32>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e048      	b.n	8000ec0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000e2e:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <SD_disk_read+0xd0>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <SD_disk_read+0x44>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	025b      	lsls	r3, r3, #9
 8000e3e:	607b      	str	r3, [r7, #4]

  SELECT();
 8000e40:	f7ff fd2c 	bl	800089c <SELECT>

  if (count == 1)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d111      	bne.n	8000e6e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	2051      	movs	r0, #81	; 0x51
 8000e4e:	f7ff fe84 	bl	8000b5a <SD_SendCmd>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d129      	bne.n	8000eac <SD_disk_read+0xb0>
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	68b8      	ldr	r0, [r7, #8]
 8000e5e:	f7ff fe0b 	bl	8000a78 <SD_RxDataBlock>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d021      	beq.n	8000eac <SD_disk_read+0xb0>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	e01e      	b.n	8000eac <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2052      	movs	r0, #82	; 0x52
 8000e72:	f7ff fe72 	bl	8000b5a <SD_SendCmd>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d117      	bne.n	8000eac <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e80:	68b8      	ldr	r0, [r7, #8]
 8000e82:	f7ff fdf9 	bl	8000a78 <SD_RxDataBlock>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00a      	beq.n	8000ea2 <SD_disk_read+0xa6>
        buff += 512;
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e92:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1ed      	bne.n	8000e7c <SD_disk_read+0x80>
 8000ea0:	e000      	b.n	8000ea4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000ea2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	204c      	movs	r0, #76	; 0x4c
 8000ea8:	f7ff fe57 	bl	8000b5a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000eac:	f7ff fd04 	bl	80008b8 <DESELECT>
  SPI_RxByte();
 8000eb0:	f7ff fd44 	bl	800093c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bf14      	ite	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	2300      	moveq	r3, #0
 8000ebe:	b2db      	uxtb	r3, r3
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	200000a8 	.word	0x200000a8

08000ed0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	4603      	mov	r3, r0
 8000ede:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <SD_disk_write+0x1c>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <SD_disk_write+0x20>
 8000eec:	2304      	movs	r3, #4
 8000eee:	e06b      	b.n	8000fc8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	; (8000fd0 <SD_disk_write+0x100>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SD_disk_write+0x32>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e062      	b.n	8000fc8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f02:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <SD_disk_write+0x100>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SD_disk_write+0x44>
 8000f10:	2302      	movs	r3, #2
 8000f12:	e059      	b.n	8000fc8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <SD_disk_write+0x104>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <SD_disk_write+0x56>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	025b      	lsls	r3, r3, #9
 8000f24:	607b      	str	r3, [r7, #4]

  SELECT();
 8000f26:	f7ff fcb9 	bl	800089c <SELECT>

  if (count == 1)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d110      	bne.n	8000f52 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	2058      	movs	r0, #88	; 0x58
 8000f34:	f7ff fe11 	bl	8000b5a <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d13a      	bne.n	8000fb4 <SD_disk_write+0xe4>
 8000f3e:	21fe      	movs	r1, #254	; 0xfe
 8000f40:	68b8      	ldr	r0, [r7, #8]
 8000f42:	f7ff fdc7 	bl	8000ad4 <SD_TxDataBlock>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d033      	beq.n	8000fb4 <SD_disk_write+0xe4>
      count = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	e030      	b.n	8000fb4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <SD_disk_write+0x104>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2077      	movs	r0, #119	; 0x77
 8000f62:	f7ff fdfa 	bl	8000b5a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000f66:	6839      	ldr	r1, [r7, #0]
 8000f68:	2057      	movs	r0, #87	; 0x57
 8000f6a:	f7ff fdf6 	bl	8000b5a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	2059      	movs	r0, #89	; 0x59
 8000f72:	f7ff fdf2 	bl	8000b5a <SD_SendCmd>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11b      	bne.n	8000fb4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f7c:	21fc      	movs	r1, #252	; 0xfc
 8000f7e:	68b8      	ldr	r0, [r7, #8]
 8000f80:	f7ff fda8 	bl	8000ad4 <SD_TxDataBlock>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00a      	beq.n	8000fa0 <SD_disk_write+0xd0>
        buff += 512;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f90:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1ee      	bne.n	8000f7c <SD_disk_write+0xac>
 8000f9e:	e000      	b.n	8000fa2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000fa0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000fa2:	21fd      	movs	r1, #253	; 0xfd
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fd95 	bl	8000ad4 <SD_TxDataBlock>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <SD_disk_write+0xe4>
      {
        count = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000fb4:	f7ff fc80 	bl	80008b8 <DESELECT>
  SPI_RxByte();
 8000fb8:	f7ff fcc0 	bl	800093c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	200000a8 	.word	0x200000a8

08000fd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b08b      	sub	sp, #44	; 0x2c
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	603a      	str	r2, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SD_disk_ioctl+0x1e>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e115      	b.n	8001222 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d124      	bne.n	800104c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d012      	beq.n	8001030 <SD_disk_ioctl+0x58>
 800100a:	2b02      	cmp	r3, #2
 800100c:	dc1a      	bgt.n	8001044 <SD_disk_ioctl+0x6c>
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <SD_disk_ioctl+0x40>
 8001012:	2b01      	cmp	r3, #1
 8001014:	d006      	beq.n	8001024 <SD_disk_ioctl+0x4c>
 8001016:	e015      	b.n	8001044 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001018:	f7ff fd16 	bl	8000a48 <SD_PowerOff>
      res = RES_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001022:	e0fc      	b.n	800121e <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001024:	f7ff fcce 	bl	80009c4 <SD_PowerOn>
      res = RES_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800102e:	e0f6      	b.n	800121e <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	1c5c      	adds	r4, r3, #1
 8001034:	f7ff fd14 	bl	8000a60 <SD_CheckPower>
 8001038:	4603      	mov	r3, r0
 800103a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001042:	e0ec      	b.n	800121e <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001044:	2304      	movs	r3, #4
 8001046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800104a:	e0e8      	b.n	800121e <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800104c:	4b77      	ldr	r3, [pc, #476]	; (800122c <SD_disk_ioctl+0x254>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SD_disk_ioctl+0x86>
 800105a:	2303      	movs	r3, #3
 800105c:	e0e1      	b.n	8001222 <SD_disk_ioctl+0x24a>

    SELECT();
 800105e:	f7ff fc1d 	bl	800089c <SELECT>

    switch (ctrl)
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	2b0d      	cmp	r3, #13
 8001066:	f200 80cb 	bhi.w	8001200 <SD_disk_ioctl+0x228>
 800106a:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <SD_disk_ioctl+0x98>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	0800116b 	.word	0x0800116b
 8001074:	080010a9 	.word	0x080010a9
 8001078:	0800115b 	.word	0x0800115b
 800107c:	08001201 	.word	0x08001201
 8001080:	08001201 	.word	0x08001201
 8001084:	08001201 	.word	0x08001201
 8001088:	08001201 	.word	0x08001201
 800108c:	08001201 	.word	0x08001201
 8001090:	08001201 	.word	0x08001201
 8001094:	08001201 	.word	0x08001201
 8001098:	08001201 	.word	0x08001201
 800109c:	0800117d 	.word	0x0800117d
 80010a0:	080011a1 	.word	0x080011a1
 80010a4:	080011c5 	.word	0x080011c5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80010a8:	2100      	movs	r1, #0
 80010aa:	2049      	movs	r0, #73	; 0x49
 80010ac:	f7ff fd55 	bl	8000b5a <SD_SendCmd>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f040 80a8 	bne.w	8001208 <SD_disk_ioctl+0x230>
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2110      	movs	r1, #16
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fcda 	bl	8000a78 <SD_RxDataBlock>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 809e 	beq.w	8001208 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 80010cc:	7b3b      	ldrb	r3, [r7, #12]
 80010ce:	099b      	lsrs	r3, r3, #6
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10e      	bne.n	80010f4 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80010d6:	7d7b      	ldrb	r3, [r7, #21]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	7d3b      	ldrb	r3, [r7, #20]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80010ea:	8bfb      	ldrh	r3, [r7, #30]
 80010ec:	029a      	lsls	r2, r3, #10
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e02e      	b.n	8001152 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80010f4:	7c7b      	ldrb	r3, [r7, #17]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	7dbb      	ldrb	r3, [r7, #22]
 80010fe:	09db      	lsrs	r3, r3, #7
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4413      	add	r3, r2
 8001104:	b2da      	uxtb	r2, r3
 8001106:	7d7b      	ldrb	r3, [r7, #21]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 0306 	and.w	r3, r3, #6
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4413      	add	r3, r2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	3302      	adds	r3, #2
 8001118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800111c:	7d3b      	ldrb	r3, [r7, #20]
 800111e:	099b      	lsrs	r3, r3, #6
 8001120:	b2db      	uxtb	r3, r3
 8001122:	b29a      	uxth	r2, r3
 8001124:	7cfb      	ldrb	r3, [r7, #19]
 8001126:	b29b      	uxth	r3, r3
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	b29b      	uxth	r3, r3
 800112c:	4413      	add	r3, r2
 800112e:	b29a      	uxth	r2, r3
 8001130:	7cbb      	ldrb	r3, [r7, #18]
 8001132:	029b      	lsls	r3, r3, #10
 8001134:	b29b      	uxth	r3, r3
 8001136:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800113a:	b29b      	uxth	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	3301      	adds	r3, #1
 8001142:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001144:	8bfa      	ldrh	r2, [r7, #30]
 8001146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800114a:	3b09      	subs	r3, #9
 800114c:	409a      	lsls	r2, r3
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001158:	e056      	b.n	8001208 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001160:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001168:	e055      	b.n	8001216 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800116a:	f7ff fc11 	bl	8000990 <SD_ReadyWait>
 800116e:	4603      	mov	r3, r0
 8001170:	2bff      	cmp	r3, #255	; 0xff
 8001172:	d14b      	bne.n	800120c <SD_disk_ioctl+0x234>
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800117a:	e047      	b.n	800120c <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800117c:	2100      	movs	r1, #0
 800117e:	2049      	movs	r0, #73	; 0x49
 8001180:	f7ff fceb 	bl	8000b5a <SD_SendCmd>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d142      	bne.n	8001210 <SD_disk_ioctl+0x238>
 800118a:	2110      	movs	r1, #16
 800118c:	6a38      	ldr	r0, [r7, #32]
 800118e:	f7ff fc73 	bl	8000a78 <SD_RxDataBlock>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d03b      	beq.n	8001210 <SD_disk_ioctl+0x238>
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800119e:	e037      	b.n	8001210 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011a0:	2100      	movs	r1, #0
 80011a2:	204a      	movs	r0, #74	; 0x4a
 80011a4:	f7ff fcd9 	bl	8000b5a <SD_SendCmd>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d132      	bne.n	8001214 <SD_disk_ioctl+0x23c>
 80011ae:	2110      	movs	r1, #16
 80011b0:	6a38      	ldr	r0, [r7, #32]
 80011b2:	f7ff fc61 	bl	8000a78 <SD_RxDataBlock>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d02b      	beq.n	8001214 <SD_disk_ioctl+0x23c>
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80011c2:	e027      	b.n	8001214 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80011c4:	2100      	movs	r1, #0
 80011c6:	207a      	movs	r0, #122	; 0x7a
 80011c8:	f7ff fcc7 	bl	8000b5a <SD_SendCmd>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011d8:	e00b      	b.n	80011f2 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 80011da:	6a3c      	ldr	r4, [r7, #32]
 80011dc:	1c63      	adds	r3, r4, #1
 80011de:	623b      	str	r3, [r7, #32]
 80011e0:	f7ff fbac 	bl	800093c <SPI_RxByte>
 80011e4:	4603      	mov	r3, r0
 80011e6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80011e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ec:	3301      	adds	r3, #1
 80011ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80011f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d9ef      	bls.n	80011da <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001200:	2304      	movs	r3, #4
 8001202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001206:	e006      	b.n	8001216 <SD_disk_ioctl+0x23e>
      break;
 8001208:	bf00      	nop
 800120a:	e004      	b.n	8001216 <SD_disk_ioctl+0x23e>
      break;
 800120c:	bf00      	nop
 800120e:	e002      	b.n	8001216 <SD_disk_ioctl+0x23e>
      break;
 8001210:	bf00      	nop
 8001212:	e000      	b.n	8001216 <SD_disk_ioctl+0x23e>
      break;
 8001214:	bf00      	nop
    }

    DESELECT();
 8001216:	f7ff fb4f 	bl	80008b8 <DESELECT>
    SPI_RxByte();
 800121a:	f7ff fb8f 	bl	800093c <SPI_RxByte>
  }

  return res;
 800121e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001222:	4618      	mov	r0, r3
 8001224:	372c      	adds	r7, #44	; 0x2c
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	f5ad 5d0b 	sub.w	sp, sp, #8896	; 0x22c0
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123a:	f000 fd8d 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123e:	f000 f95d 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001242:	f000 fa27 	bl	8001694 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001246:	f000 f9b7 	bl	80015b8 <MX_SPI1_Init>
  MX_FATFS_Init();
 800124a:	f004 fa0b 	bl	8005664 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 800124e:	f000 f9f1 	bl	8001634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n\r\n(Powering up)\r\nMary had a little lamb --\r\nI ate it with mint sauce.\r\n\r\n");
 8001252:	489a      	ldr	r0, [pc, #616]	; (80014bc <main+0x28c>)
 8001254:	f000 fa84 	bl	8001760 <myprintf>
  HAL_Delay(1000);
 8001258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125c:	f000 fdb2 	bl	8001dc4 <HAL_Delay>
  FRESULT fres;

  process_SD_card();
 8001260:	f000 faa4 	bl	80017ac <process_SD_card>

    /* USER CODE BEGIN 3 */
    

    //Mount drive
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001264:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001268:	f103 0310 	add.w	r3, r3, #16
 800126c:	2201      	movs	r2, #1
 800126e:	4994      	ldr	r1, [pc, #592]	; (80014c0 <main+0x290>)
 8001270:	4618      	mov	r0, r3
 8001272:	f006 fed7 	bl	8008024 <f_mount>
 8001276:	4603      	mov	r3, r0
 8001278:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 800127c:	f102 020f 	add.w	r2, r2, #15
 8001280:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8001282:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001286:	f103 030f 	add.w	r3, r3, #15
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d009      	beq.n	80012a4 <main+0x74>
      myprintf("f_mount error (%i)\r\n", fres);
 8001290:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001294:	f103 030f 	add.w	r3, r3, #15
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4619      	mov	r1, r3
 800129c:	4889      	ldr	r0, [pc, #548]	; (80014c4 <main+0x294>)
 800129e:	f000 fa5f 	bl	8001760 <myprintf>

      while(1);
 80012a2:	e7fe      	b.n	80012a2 <main+0x72>

    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 80012a4:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80012a8:	3a34      	subs	r2, #52	; 0x34
 80012aa:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80012ae:	3b30      	subs	r3, #48	; 0x30
 80012b0:	4619      	mov	r1, r3
 80012b2:	4883      	ldr	r0, [pc, #524]	; (80014c0 <main+0x290>)
 80012b4:	f007 ff4b 	bl	800914e <f_getfree>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80012be:	f102 020f 	add.w	r2, r2, #15
 80012c2:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 80012c4:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80012c8:	f103 030f 	add.w	r3, r3, #15
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <main+0xb6>
      myprintf("f_getfree error (%i)\r\n", fres);
 80012d2:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80012d6:	f103 030f 	add.w	r3, r3, #15
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	487a      	ldr	r0, [pc, #488]	; (80014c8 <main+0x298>)
 80012e0:	f000 fa3e 	bl	8001760 <myprintf>
      while(1);
 80012e4:	e7fe      	b.n	80012e4 <main+0xb4>
    }
 
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80012e6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80012ea:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80012ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	3b02      	subs	r3, #2
 80012f6:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80012fa:	f852 2c74 	ldr.w	r2, [r2, #-116]
 80012fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001302:	7892      	ldrb	r2, [r2, #2]
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 800130c:	f102 0208 	add.w	r2, r2, #8
 8001310:	6013      	str	r3, [r2, #0]
    free_sectors = free_clusters * getFreeFs->csize;
 8001312:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001316:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800131a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	461a      	mov	r2, r3
 8001322:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001326:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001332:	f102 0204 	add.w	r2, r2, #4
 8001336:	6013      	str	r3, [r2, #0]

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8001338:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 800133c:	f103 0308 	add.w	r3, r3, #8
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	0859      	lsrs	r1, r3, #1
 8001344:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001348:	f103 0304 	add.w	r3, r3, #4
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	085b      	lsrs	r3, r3, #1
 8001350:	461a      	mov	r2, r3
 8001352:	485e      	ldr	r0, [pc, #376]	; (80014cc <main+0x29c>)
 8001354:	f000 fa04 	bl	8001760 <myprintf>
        
    //Try to open file
    fres = f_open(&fil, "test.txt", FA_READ);
 8001358:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800135c:	3b2c      	subs	r3, #44	; 0x2c
 800135e:	2201      	movs	r2, #1
 8001360:	495b      	ldr	r1, [pc, #364]	; (80014d0 <main+0x2a0>)
 8001362:	4618      	mov	r0, r3
 8001364:	f006 fea8 	bl	80080b8 <f_open>
 8001368:	4603      	mov	r3, r0
 800136a:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 800136e:	f102 020f 	add.w	r2, r2, #15
 8001372:	7013      	strb	r3, [r2, #0]
		if (fres != FR_OK) {
 8001374:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001378:	f103 030f 	add.w	r3, r3, #15
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <main+0x15a>
		  myprintf("f_open error (%i)\r\n");
 8001382:	4854      	ldr	r0, [pc, #336]	; (80014d4 <main+0x2a4>)
 8001384:	f000 f9ec 	bl	8001760 <myprintf>
      while(1);
 8001388:	e7fe      	b.n	8001388 <main+0x158>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 800138a:	4853      	ldr	r0, [pc, #332]	; (80014d8 <main+0x2a8>)
 800138c:	f000 f9e8 	bl	8001760 <myprintf>
    BYTE readBuf[300];
    char buf[300];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8001390:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8001394:	3a2c      	subs	r2, #44	; 0x2c
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	3b10      	subs	r3, #16
 800139c:	211e      	movs	r1, #30
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 ffaf 	bl	8009302 <f_gets>
 80013a4:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80013a8:	6018      	str	r0, [r3, #0]
    if(rres != 0) {
 80013aa:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <main+0x194>
      myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	3b10      	subs	r3, #16
 80013ba:	4619      	mov	r1, r3
 80013bc:	4847      	ldr	r0, [pc, #284]	; (80014dc <main+0x2ac>)
 80013be:	f000 f9cf 	bl	8001760 <myprintf>
 80013c2:	e005      	b.n	80013d0 <main+0x1a0>
    } else {
      myprintf("f_gets error (%i)\r\n", rres);
 80013c4:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	4845      	ldr	r0, [pc, #276]	; (80014e0 <main+0x2b0>)
 80013cc:	f000 f9c8 	bl	8001760 <myprintf>
    }
    
    // read not working
    f_gets(buf, sizeof(buf), &fil);
 80013d0:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80013d4:	3a2c      	subs	r2, #44	; 0x2c
 80013d6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80013da:	3b24      	subs	r3, #36	; 0x24
 80013dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80013e0:	4618      	mov	r0, r3
 80013e2:	f007 ff8e 	bl	8009302 <f_gets>
    myprintf("Read Data : %s\r\n", buf);
 80013e6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80013ea:	3b24      	subs	r3, #36	; 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	483d      	ldr	r0, [pc, #244]	; (80014e4 <main+0x2b4>)
 80013f0:	f000 f9b6 	bl	8001760 <myprintf>

    //Close file, don't forget this!
    f_close(&fil);
 80013f4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80013f8:	3b2c      	subs	r3, #44	; 0x2c
 80013fa:	4618      	mov	r0, r3
 80013fc:	f007 fe7c 	bl	80090f8 <f_close>

    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001400:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001404:	3b2c      	subs	r3, #44	; 0x2c
 8001406:	221a      	movs	r2, #26
 8001408:	4937      	ldr	r1, [pc, #220]	; (80014e8 <main+0x2b8>)
 800140a:	4618      	mov	r0, r3
 800140c:	f006 fe54 	bl	80080b8 <f_open>
 8001410:	4603      	mov	r3, r0
 8001412:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001416:	f102 020f 	add.w	r2, r2, #15
 800141a:	7013      	strb	r3, [r2, #0]
    if(fres == FR_OK) {
 800141c:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001420:	f103 030f 	add.w	r3, r3, #15
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <main+0x202>
      myprintf("I was able to open 'write.txt' for writing\r\n");
 800142a:	4830      	ldr	r0, [pc, #192]	; (80014ec <main+0x2bc>)
 800142c:	f000 f998 	bl	8001760 <myprintf>
 8001430:	e008      	b.n	8001444 <main+0x214>
    } else {
      myprintf("f_open error (%i)\r\n", fres);
 8001432:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001436:	f103 030f 	add.w	r3, r3, #15
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	4825      	ldr	r0, [pc, #148]	; (80014d4 <main+0x2a4>)
 8001440:	f000 f98e 	bl	8001760 <myprintf>
    }

    strncpy((char*)readBuf, "a new file is made!", 20);
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	3b10      	subs	r3, #16
 800144a:	4a29      	ldr	r2, [pc, #164]	; (80014f0 <main+0x2c0>)
 800144c:	461c      	mov	r4, r3
 800144e:	4615      	mov	r5, r2
 8001450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	6023      	str	r3, [r4, #0]
    UINT bytesWrote; 
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8001458:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800145c:	3b38      	subs	r3, #56	; 0x38
 800145e:	f107 0110 	add.w	r1, r7, #16
 8001462:	3910      	subs	r1, #16
 8001464:	f507 7024 	add.w	r0, r7, #656	; 0x290
 8001468:	382c      	subs	r0, #44	; 0x2c
 800146a:	2213      	movs	r2, #19
 800146c:	f007 fb3d 	bl	8008aea <f_write>
 8001470:	4603      	mov	r3, r0
 8001472:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001476:	f102 020f 	add.w	r2, r2, #15
 800147a:	7013      	strb	r3, [r2, #0]
    if(fres == FR_OK) {
 800147c:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001480:	f103 030f 	add.w	r3, r3, #15
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d108      	bne.n	800149c <main+0x26c>
      myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800148a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800148e:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8001492:	4619      	mov	r1, r3
 8001494:	4817      	ldr	r0, [pc, #92]	; (80014f4 <main+0x2c4>)
 8001496:	f000 f963 	bl	8001760 <myprintf>
 800149a:	e002      	b.n	80014a2 <main+0x272>
    } else {
      myprintf("f_write error (%i)\r\n");
 800149c:	4816      	ldr	r0, [pc, #88]	; (80014f8 <main+0x2c8>)
 800149e:	f000 f95f 	bl	8001760 <myprintf>
    }

    //Close file, don't forget this!
    f_close(&fil);
 80014a2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80014a6:	3b2c      	subs	r3, #44	; 0x2c
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 fe25 	bl	80090f8 <f_close>

    //De-mount drive
    f_mount(NULL, "", 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	4903      	ldr	r1, [pc, #12]	; (80014c0 <main+0x290>)
 80014b2:	2000      	movs	r0, #0
 80014b4:	f006 fdb6 	bl	8008024 <f_mount>

    while(1);
 80014b8:	e7fe      	b.n	80014b8 <main+0x288>
 80014ba:	bf00      	nop
 80014bc:	08009fe0 	.word	0x08009fe0
 80014c0:	0800a02c 	.word	0x0800a02c
 80014c4:	0800a030 	.word	0x0800a030
 80014c8:	0800a048 	.word	0x0800a048
 80014cc:	0800a060 	.word	0x0800a060
 80014d0:	0800a0a8 	.word	0x0800a0a8
 80014d4:	0800a0b4 	.word	0x0800a0b4
 80014d8:	0800a0c8 	.word	0x0800a0c8
 80014dc:	0800a0f8 	.word	0x0800a0f8
 80014e0:	0800a124 	.word	0x0800a124
 80014e4:	0800a138 	.word	0x0800a138
 80014e8:	0800a14c 	.word	0x0800a14c
 80014ec:	0800a158 	.word	0x0800a158
 80014f0:	0800a188 	.word	0x0800a188
 80014f4:	0800a19c 	.word	0x0800a19c
 80014f8:	0800a1c0 	.word	0x0800a1c0

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0a6      	sub	sp, #152	; 0x98
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001506:	2228      	movs	r2, #40	; 0x28
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f008 f8be 	bl	800968c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2258      	movs	r2, #88	; 0x58
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f008 f8b0 	bl	800968c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152c:	2302      	movs	r3, #2
 800152e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2310      	movs	r3, #16
 8001536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001548:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800154c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800155a:	4618      	mov	r0, r3
 800155c:	f000 feda 	bl	8002314 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001566:	f000 fa4b 	bl	8001a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2302      	movs	r3, #2
 8001570:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f001 ff18 	bl	80033bc <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001592:	f000 fa35 	bl	8001a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001596:	2302      	movs	r3, #2
 8001598:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 f973 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80015ac:	f000 fa28 	bl	8001a00 <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3798      	adds	r7, #152	; 0x98
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_SPI1_Init+0x74>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <MX_SPI1_Init+0x78>)
 80015c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_SPI1_Init+0x74>)
 80015c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_SPI1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <MX_SPI1_Init+0x74>)
 80015d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_SPI1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_SPI1_Init+0x74>)
 80015e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_SPI1_Init+0x74>)
 80015ee:	2220      	movs	r2, #32
 80015f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_SPI1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_SPI1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_SPI1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_SPI1_Init+0x74>)
 8001606:	2207      	movs	r2, #7
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_SPI1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_SPI1_Init+0x74>)
 8001612:	2208      	movs	r2, #8
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_SPI1_Init+0x74>)
 8001618:	f002 fb56 	bl	8003cc8 <HAL_SPI_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001622:	f000 f9ed 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000ac 	.word	0x200000ac
 8001630:	40013000 	.word	0x40013000

08001634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <MX_USART2_UART_Init+0x58>)
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <MX_USART2_UART_Init+0x5c>)
 800163c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001640:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_USART2_UART_Init+0x58>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_USART2_UART_Init+0x58>)
 800165a:	220c      	movs	r2, #12
 800165c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001666:	2200      	movs	r2, #0
 8001668:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <MX_USART2_UART_Init+0x58>)
 8001678:	f003 fb8c 	bl	8004d94 <HAL_UART_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001682:	f000 f9bd 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000110 	.word	0x20000110
 8001690:	40004400 	.word	0x40004400

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a29      	ldr	r2, [pc, #164]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016b4:	6153      	str	r3, [r2, #20]
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	4a23      	ldr	r2, [pc, #140]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016cc:	6153      	str	r3, [r2, #20]
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6153      	str	r3, [r2, #20]
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <MX_GPIO_Init+0xc0>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_GPIO_Init+0xc0>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4812      	ldr	r0, [pc, #72]	; (8001758 <MX_GPIO_Init+0xc4>)
 8001710:	f000 fde8 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800171a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <MX_GPIO_Init+0xc8>)
 800172c:	f000 fc50 	bl	8001fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_GPIO_Init+0xc4>)
 8001748:	f000 fc42 	bl	8001fd0 <HAL_GPIO_Init>

}
 800174c:	bf00      	nop
 800174e:	3728      	adds	r7, #40	; 0x28
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400
 800175c:	48000800 	.word	0x48000800

08001760 <myprintf>:

/* USER CODE BEGIN 4 */
void myprintf(const char *fmt, ...) {
 8001760:	b40f      	push	{r0, r1, r2, r3}
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	2164      	movs	r1, #100	; 0x64
 8001774:	480b      	ldr	r0, [pc, #44]	; (80017a4 <myprintf+0x44>)
 8001776:	f008 f8ad 	bl	80098d4 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800177a:	480a      	ldr	r0, [pc, #40]	; (80017a4 <myprintf+0x44>)
 800177c:	f7fe fd30 	bl	80001e0 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	b29a      	uxth	r2, r3
 8001788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178c:	4905      	ldr	r1, [pc, #20]	; (80017a4 <myprintf+0x44>)
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <myprintf+0x48>)
 8001790:	f003 fb4e 	bl	8004e30 <HAL_UART_Transmit>

}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800179e:	b004      	add	sp, #16
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000194 	.word	0x20000194
 80017a8:	20000110 	.word	0x20000110

080017ac <process_SD_card>:
/*
 * This function works for read/write of SD card.
 */
void process_SD_card(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
  FRESULT     fres;                 //Result after operations
  char        buf[100];
  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 80017b6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80017ba:	f103 0318 	add.w	r3, r3, #24
 80017be:	3b1c      	subs	r3, #28
 80017c0:	2201      	movs	r2, #1
 80017c2:	4979      	ldr	r1, [pc, #484]	; (80019a8 <process_SD_card+0x1fc>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f006 fc2d 	bl	8008024 <f_mount>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80017d0:	f102 0217 	add.w	r2, r2, #23
 80017d4:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 80017d6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80017da:	f103 0317 	add.w	r3, r3, #23
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <process_SD_card+0x4c>
    {
      myprintf("No SD Card found : (%i)\r\n", fres);
 80017e4:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80017e8:	f103 0317 	add.w	r3, r3, #23
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	486e      	ldr	r0, [pc, #440]	; (80019ac <process_SD_card+0x200>)
 80017f2:	f7ff ffb5 	bl	8001760 <myprintf>
      break;
 80017f6:	e0c8      	b.n	800198a <process_SD_card+0x1de>
    }
    myprintf("SD Card Mounted Successfully!!!\r\n");
 80017f8:	486d      	ldr	r0, [pc, #436]	; (80019b0 <process_SD_card+0x204>)
 80017fa:	f7ff ffb1 	bl	8001760 <myprintf>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;
    f_getfree("", &fre_clust, &pfs);
 80017fe:	f107 0218 	add.w	r2, r7, #24
 8001802:	3a10      	subs	r2, #16
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	3b14      	subs	r3, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4866      	ldr	r0, [pc, #408]	; (80019a8 <process_SD_card+0x1fc>)
 800180e:	f007 fc9e 	bl	800914e <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001812:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001816:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 800181a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	3b02      	subs	r3, #2
 8001822:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001826:	f852 2cd0 	ldr.w	r2, [r2, #-208]
 800182a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800182e:	7892      	ldrb	r2, [r2, #2]
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe ff97 	bl	8000768 <__aeabi_ui2d>
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b5d      	ldr	r3, [pc, #372]	; (80019b4 <process_SD_card+0x208>)
 8001840:	f7fe fd26 	bl	8000290 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff f806 	bl	800085c <__aeabi_d2uiz>
 8001850:	4603      	mov	r3, r0
 8001852:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 8001856:	f102 0210 	add.w	r2, r2, #16
 800185a:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800185c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001860:	f853 3cd0 	ldr.w	r3, [r3, #-208]
 8001864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001868:	789b      	ldrb	r3, [r3, #2]
 800186a:	461a      	mov	r2, r3
 800186c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001870:	f853 3cd4 	ldr.w	r3, [r3, #-212]
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe ff75 	bl	8000768 <__aeabi_ui2d>
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b4c      	ldr	r3, [pc, #304]	; (80019b4 <process_SD_card+0x208>)
 8001884:	f7fe fd04 	bl	8000290 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7fe ffe4 	bl	800085c <__aeabi_d2uiz>
 8001894:	4603      	mov	r3, r0
 8001896:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800189a:	f102 020c 	add.w	r2, r2, #12
 800189e:	6013      	str	r3, [r2, #0]
    myprintf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
 80018a0:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80018a4:	f103 030c 	add.w	r3, r3, #12
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80018ae:	f103 0310 	add.w	r3, r3, #16
 80018b2:	6819      	ldr	r1, [r3, #0]
 80018b4:	4840      	ldr	r0, [pc, #256]	; (80019b8 <process_SD_card+0x20c>)
 80018b6:	f7ff ff53 	bl	8001760 <myprintf>
    //Open the file
    fres = f_open(&fil, "text.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 80018ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018be:	3b28      	subs	r3, #40	; 0x28
 80018c0:	220b      	movs	r2, #11
 80018c2:	493e      	ldr	r1, [pc, #248]	; (80019bc <process_SD_card+0x210>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 fbf7 	bl	80080b8 <f_open>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 80018d0:	f102 0217 	add.w	r2, r2, #23
 80018d4:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80018d6:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80018da:	f103 0317 	add.w	r3, r3, #23
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <process_SD_card+0x14c>
    {
      myprintf("File creation/open Error : (%i)\r\n", fres);
 80018e4:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80018e8:	f103 0317 	add.w	r3, r3, #23
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4833      	ldr	r0, [pc, #204]	; (80019c0 <process_SD_card+0x214>)
 80018f2:	f7ff ff35 	bl	8001760 <myprintf>
      break;
 80018f6:	e048      	b.n	800198a <process_SD_card+0x1de>
    }
    myprintf("Writing data!!!\r\n");
 80018f8:	4832      	ldr	r0, [pc, #200]	; (80019c4 <process_SD_card+0x218>)
 80018fa:	f7ff ff31 	bl	8001760 <myprintf>
    //write the data
    f_puts("Welcome to the best zone", &fil);
 80018fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001902:	3b28      	subs	r3, #40	; 0x28
 8001904:	4619      	mov	r1, r3
 8001906:	4830      	ldr	r0, [pc, #192]	; (80019c8 <process_SD_card+0x21c>)
 8001908:	f007 fd75 	bl	80093f6 <f_puts>
    //close your file
    f_close(&fil);
 800190c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001910:	3b28      	subs	r3, #40	; 0x28
 8001912:	4618      	mov	r0, r3
 8001914:	f007 fbf0 	bl	80090f8 <f_close>
    //Open the file
    fres = f_open(&fil, "text.txt", FA_READ);
 8001918:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800191c:	3b28      	subs	r3, #40	; 0x28
 800191e:	2201      	movs	r2, #1
 8001920:	4926      	ldr	r1, [pc, #152]	; (80019bc <process_SD_card+0x210>)
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fbc8 	bl	80080b8 <f_open>
 8001928:	4603      	mov	r3, r0
 800192a:	f507 5203 	add.w	r2, r7, #8384	; 0x20c0
 800192e:	f102 0217 	add.w	r2, r2, #23
 8001932:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001934:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001938:	f103 0317 	add.w	r3, r3, #23
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <process_SD_card+0x1aa>
    {
      myprintf("File opening Error : (%i)\r\n", fres);
 8001942:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001946:	f103 0317 	add.w	r3, r3, #23
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	481f      	ldr	r0, [pc, #124]	; (80019cc <process_SD_card+0x220>)
 8001950:	f7ff ff06 	bl	8001760 <myprintf>
      break;
 8001954:	e019      	b.n	800198a <process_SD_card+0x1de>
    }
    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8001956:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800195a:	3a28      	subs	r2, #40	; 0x28
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	3b0c      	subs	r3, #12
 8001962:	2164      	movs	r1, #100	; 0x64
 8001964:	4618      	mov	r0, r3
 8001966:	f007 fccc 	bl	8009302 <f_gets>
    myprintf("Read Data : %s\r\n", buf);
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	3b0c      	subs	r3, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4817      	ldr	r0, [pc, #92]	; (80019d0 <process_SD_card+0x224>)
 8001974:	f7ff fef4 	bl	8001760 <myprintf>
    //close your file
    f_close(&fil);
 8001978:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800197c:	3b28      	subs	r3, #40	; 0x28
 800197e:	4618      	mov	r0, r3
 8001980:	f007 fbba 	bl	80090f8 <f_close>
    myprintf("Closing File!!!\r\n");
 8001984:	4813      	ldr	r0, [pc, #76]	; (80019d4 <process_SD_card+0x228>)
 8001986:	f7ff feeb 	bl	8001760 <myprintf>
      myprintf("Cannot able to delete the file\r\n");
    }
#endif
  } while(0);
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800198a:	2200      	movs	r2, #0
 800198c:	4906      	ldr	r1, [pc, #24]	; (80019a8 <process_SD_card+0x1fc>)
 800198e:	2000      	movs	r0, #0
 8001990:	f006 fb48 	bl	8008024 <f_mount>
  myprintf("SD Card Unmounted Successfully!!!\r\n");
 8001994:	4810      	ldr	r0, [pc, #64]	; (80019d8 <process_SD_card+0x22c>)
 8001996:	f7ff fee3 	bl	8001760 <myprintf>
}
 800199a:	bf00      	nop
 800199c:	f507 5703 	add.w	r7, r7, #8384	; 0x20c0
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	0800a02c 	.word	0x0800a02c
 80019ac:	0800a1d8 	.word	0x0800a1d8
 80019b0:	0800a1f4 	.word	0x0800a1f4
 80019b4:	3fe00000 	.word	0x3fe00000
 80019b8:	0800a218 	.word	0x0800a218
 80019bc:	0800a248 	.word	0x0800a248
 80019c0:	0800a254 	.word	0x0800a254
 80019c4:	0800a278 	.word	0x0800a278
 80019c8:	0800a28c 	.word	0x0800a28c
 80019cc:	0800a2a8 	.word	0x0800a2a8
 80019d0:	0800a138 	.word	0x0800a138
 80019d4:	0800a2c4 	.word	0x0800a2c4
 80019d8:	0800a2d8 	.word	0x0800a2d8

080019dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ee:	f000 f9c9 	bl	8001d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40001000 	.word	0x40001000

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8001a04:	e7fe      	b.n	8001a04 <Error_Handler+0x4>
	...

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_MspInit+0x44>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_MspInit+0x44>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6193      	str	r3, [r2, #24]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_MspInit+0x44>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_MspInit+0x44>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_MspInit+0x44>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_MspInit+0x44>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000

08001a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_SPI_MspInit+0x7c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d128      	bne.n	8001ac4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_SPI_MspInit+0x80>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_SPI_MspInit+0x80>)
 8001a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_SPI_MspInit+0x80>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_SPI_MspInit+0x80>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_SPI_MspInit+0x80>)
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	6153      	str	r3, [r2, #20]
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_SPI_MspInit+0x80>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001aa2:	23e0      	movs	r3, #224	; 0xe0
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac0:	f000 fa86 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40013000 	.word	0x40013000
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_UART_MspInit+0x7c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d128      	bne.n	8001b48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_UART_MspInit+0x80>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <HAL_UART_MspInit+0x80>)
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	61d3      	str	r3, [r2, #28]
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_UART_MspInit+0x80>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_UART_MspInit+0x80>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_UART_MspInit+0x80>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	6153      	str	r3, [r2, #20]
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_UART_MspInit+0x80>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b26:	230c      	movs	r3, #12
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b36:	2307      	movs	r3, #7
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f000 fa44 	bl	8001fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40004400 	.word	0x40004400
 8001b54:	40021000 	.word	0x40021000

08001b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08e      	sub	sp, #56	; 0x38
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b68:	4b33      	ldr	r3, [pc, #204]	; (8001c38 <HAL_InitTick+0xe0>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <HAL_InitTick+0xe0>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	61d3      	str	r3, [r2, #28]
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_InitTick+0xe0>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b80:	f107 0210 	add.w	r2, r7, #16
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fe4c 	bl	8003828 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d103      	bne.n	8001ba2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b9a:	f001 fe01 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 8001b9e:	6378      	str	r0, [r7, #52]	; 0x34
 8001ba0:	e004      	b.n	8001bac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ba2:	f001 fdfd 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bae:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <HAL_InitTick+0xe4>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	0c9b      	lsrs	r3, r3, #18
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bbc:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <HAL_InitTick+0xec>)
 8001bbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001be0:	4817      	ldr	r0, [pc, #92]	; (8001c40 <HAL_InitTick+0xe8>)
 8001be2:	f002 fe01 	bl	80047e8 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11b      	bne.n	8001c2c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001bf4:	4812      	ldr	r0, [pc, #72]	; (8001c40 <HAL_InitTick+0xe8>)
 8001bf6:	f002 fe59 	bl	80048ac <HAL_TIM_Base_Start_IT>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d111      	bne.n	8001c2c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c08:	2036      	movs	r0, #54	; 0x36
 8001c0a:	f000 f9d3 	bl	8001fb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d808      	bhi.n	8001c26 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	2036      	movs	r0, #54	; 0x36
 8001c1a:	f000 f9af 	bl	8001f7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_InitTick+0xf0>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	e002      	b.n	8001c2c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3738      	adds	r7, #56	; 0x38
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	431bde83 	.word	0x431bde83
 8001c40:	200001f8 	.word	0x200001f8
 8001c44:	40001000 	.word	0x40001000
 8001c48:	20000008 	.word	0x20000008

08001c4c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM6_DAC_IRQHandler+0x10>)
 8001c62:	f002 fe93 	bl	800498c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200001f8 	.word	0x200001f8

08001c70 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <SystemInit+0x84>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <SystemInit+0x84>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c84:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <SystemInit+0x88>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <SystemInit+0x88>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <SystemInit+0x88>)
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4918      	ldr	r1, [pc, #96]	; (8001cf8 <SystemInit+0x88>)
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <SystemInit+0x8c>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <SystemInit+0x88>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <SystemInit+0x88>)
 8001ca2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <SystemInit+0x88>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <SystemInit+0x88>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <SystemInit+0x88>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <SystemInit+0x88>)
 8001cbe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001cc2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <SystemInit+0x88>)
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <SystemInit+0x88>)
 8001cca:	f023 030f 	bic.w	r3, r3, #15
 8001cce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <SystemInit+0x88>)
 8001cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd4:	4908      	ldr	r1, [pc, #32]	; (8001cf8 <SystemInit+0x88>)
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <SystemInit+0x90>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <SystemInit+0x88>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <SystemInit+0x84>)
 8001ce4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce8:	609a      	str	r2, [r3, #8]
#endif
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	f87fc00c 	.word	0xf87fc00c
 8001d00:	ff00fccc 	.word	0xff00fccc

08001d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480d      	ldr	r0, [pc, #52]	; (8001d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0a:	490e      	ldr	r1, [pc, #56]	; (8001d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <LoopForever+0xe>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d20:	4c0b      	ldr	r4, [pc, #44]	; (8001d50 <LoopForever+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d2e:	f7ff ff9f 	bl	8001c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f007 fc77 	bl	8009624 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d36:	f7ff fa7b 	bl	8001230 <main>

08001d3a <LoopForever>:

LoopForever:
    b LoopForever
 8001d3a:	e7fe      	b.n	8001d3a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d44:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001d48:	0800a908 	.word	0x0800a908
  ldr r2, =_sbss
 8001d4c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001d50:	20000290 	.word	0x20000290

08001d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d54:	e7fe      	b.n	8001d54 <ADC1_2_IRQHandler>
	...

08001d58 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_Init+0x28>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_Init+0x28>)
 8001d62:	f043 0310 	orr.w	r3, r3, #16
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f8fc 	bl	8001f66 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	200f      	movs	r0, #15
 8001d70:	f7ff fef2 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fe48 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40022000 	.word	0x40022000

08001d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x20>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x24>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_IncTick+0x24>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	2000000c 	.word	0x2000000c
 8001da8:	20000244 	.word	0x20000244

08001dac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;  
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_GetTick+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000244 	.word	0x20000244

08001dc4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff ffee 	bl	8001dac <HAL_GetTick>
 8001dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d005      	beq.n	8001dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_Delay+0x44>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001dea:	bf00      	nop
 8001dec:	f7ff ffde 	bl	8001dac <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d8f7      	bhi.n	8001dec <HAL_Delay+0x28>
  {
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000000c 	.word	0x2000000c

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <__NVIC_EnableIRQ+0x38>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db0a      	blt.n	8001ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <__NVIC_SetPriority+0x4c>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed4:	e00a      	b.n	8001eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4908      	ldr	r1, [pc, #32]	; (8001efc <__NVIC_SetPriority+0x50>)
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3b04      	subs	r3, #4
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	761a      	strb	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f1c3 0307 	rsb	r3, r3, #7
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	bf28      	it	cs
 8001f1e:	2304      	movcs	r3, #4
 8001f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d902      	bls.n	8001f30 <NVIC_EncodePriority+0x30>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3b03      	subs	r3, #3
 8001f2e:	e000      	b.n	8001f32 <NVIC_EncodePriority+0x32>
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	401a      	ands	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43d9      	mvns	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	4313      	orrs	r3, r2
         );
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ff4c 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8e:	f7ff ff61 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001f92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	6978      	ldr	r0, [r7, #20]
 8001f9a:	f7ff ffb1 	bl	8001f00 <NVIC_EncodePriority>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ff80 	bl	8001eac <__NVIC_SetPriority>
}
 8001fac:	bf00      	nop
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff54 	bl	8001e70 <__NVIC_EnableIRQ>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fde:	e160      	b.n	80022a2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	4013      	ands	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8152 	beq.w	800229c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d005      	beq.n	8002010 <HAL_GPIO_Init+0x40>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d130      	bne.n	8002072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002046:	2201      	movs	r2, #1
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	091b      	lsrs	r3, r3, #4
 800205c:	f003 0201 	and.w	r2, r3, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b03      	cmp	r3, #3
 800207c:	d017      	beq.n	80020ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d123      	bne.n	8002102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	6939      	ldr	r1, [r7, #16]
 80020fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0203 	and.w	r2, r3, #3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80ac 	beq.w	800229c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a5d      	ldr	r2, [pc, #372]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_GPIO_Init+0x2f0>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800215c:	4a59      	ldr	r2, [pc, #356]	; (80022c4 <HAL_GPIO_Init+0x2f4>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002186:	d025      	beq.n	80021d4 <HAL_GPIO_Init+0x204>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4f      	ldr	r2, [pc, #316]	; (80022c8 <HAL_GPIO_Init+0x2f8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d01f      	beq.n	80021d0 <HAL_GPIO_Init+0x200>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a4e      	ldr	r2, [pc, #312]	; (80022cc <HAL_GPIO_Init+0x2fc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d019      	beq.n	80021cc <HAL_GPIO_Init+0x1fc>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a4d      	ldr	r2, [pc, #308]	; (80022d0 <HAL_GPIO_Init+0x300>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_Init+0x1f8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a4c      	ldr	r2, [pc, #304]	; (80022d4 <HAL_GPIO_Init+0x304>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1f4>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a4b      	ldr	r2, [pc, #300]	; (80022d8 <HAL_GPIO_Init+0x308>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1f0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a4a      	ldr	r2, [pc, #296]	; (80022dc <HAL_GPIO_Init+0x30c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1ec>
 80021b8:	2306      	movs	r3, #6
 80021ba:	e00c      	b.n	80021d6 <HAL_GPIO_Init+0x206>
 80021bc:	2307      	movs	r3, #7
 80021be:	e00a      	b.n	80021d6 <HAL_GPIO_Init+0x206>
 80021c0:	2305      	movs	r3, #5
 80021c2:	e008      	b.n	80021d6 <HAL_GPIO_Init+0x206>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e006      	b.n	80021d6 <HAL_GPIO_Init+0x206>
 80021c8:	2303      	movs	r3, #3
 80021ca:	e004      	b.n	80021d6 <HAL_GPIO_Init+0x206>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e002      	b.n	80021d6 <HAL_GPIO_Init+0x206>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_GPIO_Init+0x206>
 80021d4:	2300      	movs	r3, #0
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	f002 0203 	and.w	r2, r2, #3
 80021dc:	0092      	lsls	r2, r2, #2
 80021de:	4093      	lsls	r3, r2
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021e6:	4937      	ldr	r1, [pc, #220]	; (80022c4 <HAL_GPIO_Init+0x2f4>)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f4:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <HAL_GPIO_Init+0x310>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002218:	4a31      	ldr	r2, [pc, #196]	; (80022e0 <HAL_GPIO_Init+0x310>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_GPIO_Init+0x310>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002242:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <HAL_GPIO_Init+0x310>)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002248:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <HAL_GPIO_Init+0x310>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800226c:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <HAL_GPIO_Init+0x310>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002272:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_GPIO_Init+0x310>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <HAL_GPIO_Init+0x310>)
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f47f ae97 	bne.w	8001fe0 <HAL_GPIO_Init+0x10>
  }
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40010000 	.word	0x40010000
 80022c8:	48000400 	.word	0x48000400
 80022cc:	48000800 	.word	0x48000800
 80022d0:	48000c00 	.word	0x48000c00
 80022d4:	48001000 	.word	0x48001000
 80022d8:	48001400 	.word	0x48001400
 80022dc:	48001800 	.word	0x48001800
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002300:	e002      	b.n	8002308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800231a:	af00      	add	r7, sp, #0
 800231c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002320:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002324:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d102      	bne.n	800233a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	f001 b83a 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 816f 	beq.w	800262e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002350:	4bb5      	ldr	r3, [pc, #724]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b04      	cmp	r3, #4
 800235a:	d00c      	beq.n	8002376 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800235c:	4bb2      	ldr	r3, [pc, #712]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d15c      	bne.n	8002422 <HAL_RCC_OscConfig+0x10e>
 8002368:	4baf      	ldr	r3, [pc, #700]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d155      	bne.n	8002422 <HAL_RCC_OscConfig+0x10e>
 8002376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800237a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800238a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_OscConfig+0x94>
 80023a2:	4ba1      	ldr	r3, [pc, #644]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e015      	b.n	80023d4 <HAL_RCC_OscConfig+0xc0>
 80023a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80023bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023c4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023d0:	4b95      	ldr	r3, [pc, #596]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80023dc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80023e0:	fa92 f2a2 	rbit	r2, r2
 80023e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80023e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023ec:	fab2 f282 	clz	r2, r2
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	f042 0220 	orr.w	r2, r2, #32
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f002 021f 	and.w	r2, r2, #31
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 8111 	beq.w	800262c <HAL_RCC_OscConfig+0x318>
 800240a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 8108 	bne.w	800262c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	f000 bfc6 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002426:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x12e>
 8002434:	4b7c      	ldr	r3, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a7b      	ldr	r2, [pc, #492]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 800243a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e036      	b.n	80024b0 <HAL_RCC_OscConfig+0x19c>
 8002442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002446:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x158>
 8002452:	4b75      	ldr	r3, [pc, #468]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a74      	ldr	r2, [pc, #464]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a71      	ldr	r2, [pc, #452]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e021      	b.n	80024b0 <HAL_RCC_OscConfig+0x19c>
 800246c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002470:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800247c:	d10c      	bne.n	8002498 <HAL_RCC_OscConfig+0x184>
 800247e:	4b6a      	ldr	r3, [pc, #424]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a69      	ldr	r2, [pc, #420]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	4b67      	ldr	r3, [pc, #412]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a66      	ldr	r2, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 8002490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e00b      	b.n	80024b0 <HAL_RCC_OscConfig+0x19c>
 8002498:	4b63      	ldr	r3, [pc, #396]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a62      	ldr	r2, [pc, #392]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 800249e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b60      	ldr	r3, [pc, #384]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a5f      	ldr	r2, [pc, #380]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 80024aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d059      	beq.n	8002574 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fc74 	bl	8001dac <HAL_GetTick>
 80024c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ca:	f7ff fc6f 	bl	8001dac <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d902      	bls.n	80024e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	f000 bf67 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>
 80024e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80024f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d102      	bne.n	8002512 <HAL_RCC_OscConfig+0x1fe>
 800250c:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x22a>
 8002512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002516:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800252e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002542:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002546:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800254a:	fa92 f2a2 	rbit	r2, r2
 800254e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002552:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002556:	fab2 f282 	clz	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f042 0220 	orr.w	r2, r2, #32
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f002 021f 	and.w	r2, r2, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ab      	beq.n	80024ca <HAL_RCC_OscConfig+0x1b6>
 8002572:	e05c      	b.n	800262e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fc1a 	bl	8001dac <HAL_GetTick>
 8002578:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257e:	f7ff fc15 	bl	8001dac <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b64      	cmp	r3, #100	; 0x64
 800258c:	d902      	bls.n	8002594 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	f000 bf0d 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>
 8002594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002598:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80025a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2b2>
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x2de>
 80025c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80025da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025e6:	fa93 f3a3 	rbit	r3, r3
 80025ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_RCC_OscConfig+0x314>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80025fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80025fe:	fa92 f2a2 	rbit	r2, r2
 8002602:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002606:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f042 0220 	orr.w	r2, r2, #32
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f002 021f 	and.w	r2, r2, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ab      	bne.n	800257e <HAL_RCC_OscConfig+0x26a>
 8002626:	e002      	b.n	800262e <HAL_RCC_OscConfig+0x31a>
 8002628:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002632:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 817f 	beq.w	8002942 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002644:	4ba7      	ldr	r3, [pc, #668]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00c      	beq.n	800266a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002650:	4ba4      	ldr	r3, [pc, #656]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d173      	bne.n	8002744 <HAL_RCC_OscConfig+0x430>
 800265c:	4ba1      	ldr	r3, [pc, #644]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002668:	d16c      	bne.n	8002744 <HAL_RCC_OscConfig+0x430>
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002674:	fa93 f3a3 	rbit	r3, r3
 8002678:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800267c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	b2db      	uxtb	r3, r3
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <HAL_RCC_OscConfig+0x386>
 8002694:	4b93      	ldr	r3, [pc, #588]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	e013      	b.n	80026c2 <HAL_RCC_OscConfig+0x3ae>
 800269a:	2302      	movs	r3, #2
 800269c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80026ac:	2302      	movs	r3, #2
 80026ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80026b2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026be:	4b89      	ldr	r3, [pc, #548]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	2202      	movs	r2, #2
 80026c4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80026c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80026cc:	fa92 f2a2 	rbit	r2, r2
 80026d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80026d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCC_OscConfig+0x3f6>
 80026f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d002      	beq.n	800270a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	f000 be52 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270a:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	21f8      	movs	r1, #248	; 0xf8
 8002720:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002728:	fa91 f1a1 	rbit	r1, r1
 800272c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002730:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002734:	fab1 f181 	clz	r1, r1
 8002738:	b2c9      	uxtb	r1, r1
 800273a:	408b      	lsls	r3, r1
 800273c:	4969      	ldr	r1, [pc, #420]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e0fe      	b.n	8002942 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002748:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8088 	beq.w	8002866 <HAL_RCC_OscConfig+0x552>
 8002756:	2301      	movs	r3, #1
 8002758:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002768:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002776:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	461a      	mov	r2, r3
 800277e:	2301      	movs	r3, #1
 8002780:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7ff fb13 	bl	8001dac <HAL_GetTick>
 8002786:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff fb0e 	bl	8001dac <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d902      	bls.n	80027a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	f000 be06 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80027b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d102      	bne.n	80027d2 <HAL_RCC_OscConfig+0x4be>
 80027cc:	4b45      	ldr	r3, [pc, #276]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	e013      	b.n	80027fa <HAL_RCC_OscConfig+0x4e6>
 80027d2:	2302      	movs	r3, #2
 80027d4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027f6:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2202      	movs	r2, #2
 80027fc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002800:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002804:	fa92 f2a2 	rbit	r2, r2
 8002808:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800280c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f002 021f 	and.w	r2, r2, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0af      	beq.n	800278c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	21f8      	movs	r1, #248	; 0xf8
 8002842:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800284a:	fa91 f1a1 	rbit	r1, r1
 800284e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002852:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002856:	fab1 f181 	clz	r1, r1
 800285a:	b2c9      	uxtb	r1, r1
 800285c:	408b      	lsls	r3, r1
 800285e:	4921      	ldr	r1, [pc, #132]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
 8002864:	e06d      	b.n	8002942 <HAL_RCC_OscConfig+0x62e>
 8002866:	2301      	movs	r3, #1
 8002868:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002878:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002886:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	461a      	mov	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff fa8b 	bl	8001dac <HAL_GetTick>
 8002896:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289c:	f7ff fa86 	bl	8001dac <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d902      	bls.n	80028b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	f000 bd7e 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80028c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5d4>
 80028dc:	4b01      	ldr	r3, [pc, #4]	; (80028e4 <HAL_RCC_OscConfig+0x5d0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e016      	b.n	8002910 <HAL_RCC_OscConfig+0x5fc>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	2302      	movs	r3, #2
 80028ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80028fa:	2302      	movs	r3, #2
 80028fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002900:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800290c:	4bbf      	ldr	r3, [pc, #764]	; (8002c0c <HAL_RCC_OscConfig+0x8f8>)
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	2202      	movs	r2, #2
 8002912:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002916:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800291a:	fa92 f2a2 	rbit	r2, r2
 800291e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002922:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f042 0220 	orr.w	r2, r2, #32
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ac      	bne.n	800289c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002946:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8113 	beq.w	8002b7e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d07c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x74e>
 8002968:	2301      	movs	r3, #1
 800296a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800297a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	4ba2      	ldr	r3, [pc, #648]	; (8002c10 <HAL_RCC_OscConfig+0x8fc>)
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	461a      	mov	r2, r3
 800298e:	2301      	movs	r3, #1
 8002990:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002992:	f7ff fa0b 	bl	8001dac <HAL_GetTick>
 8002996:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299c:	f7ff fa06 	bl	8001dac <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d902      	bls.n	80029b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	f000 bcfe 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>
 80029b2:	2302      	movs	r3, #2
 80029b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029d2:	2202      	movs	r2, #2
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f2a3 	rbit	r2, r3
 80029e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029f6:	2202      	movs	r2, #2
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a10:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	4b7e      	ldr	r3, [pc, #504]	; (8002c0c <HAL_RCC_OscConfig+0x8f8>)
 8002a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a1e:	2102      	movs	r1, #2
 8002a20:	6019      	str	r1, [r3, #0]
 8002a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a26:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	fa93 f1a3 	rbit	r1, r3
 8002a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a38:	6019      	str	r1, [r3, #0]
  return result;
 8002a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	2101      	movs	r1, #1
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d09d      	beq.n	800299c <HAL_RCC_OscConfig+0x688>
 8002a60:	e08d      	b.n	8002b7e <HAL_RCC_OscConfig+0x86a>
 8002a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a84:	601a      	str	r2, [r3, #0]
  return result;
 8002a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a8e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b5d      	ldr	r3, [pc, #372]	; (8002c10 <HAL_RCC_OscConfig+0x8fc>)
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa4:	f7ff f982 	bl	8001dac <HAL_GetTick>
 8002aa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aae:	f7ff f97d 	bl	8001dac <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d902      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	f000 bc75 	b.w	80033ae <HAL_RCC_OscConfig+0x109a>
 8002ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002acc:	2202      	movs	r2, #2
 8002ace:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	fa93 f2a3 	rbit	r2, r3
 8002ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002af0:	2202      	movs	r2, #2
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b10:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b14:	2202      	movs	r2, #2
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	fa93 f2a3 	rbit	r2, r3
 8002b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b2a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002b2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_RCC_OscConfig+0x8f8>)
 8002b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	6019      	str	r1, [r3, #0]
 8002b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f1a3 	rbit	r1, r3
 8002b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b52:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b56:	6019      	str	r1, [r3, #0]
  return result;
 8002b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b5c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	fab3 f383 	clz	r3, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d197      	bne.n	8002aae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 81a5 	beq.w	8002ede <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_RCC_OscConfig+0x8f8>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_OscConfig+0x8f8>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_RCC_OscConfig+0x8f8>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	61d3      	str	r3, [r2, #28]
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_RCC_OscConfig+0x8f8>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bcc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	4b0f      	ldr	r3, [pc, #60]	; (8002c14 <HAL_RCC_OscConfig+0x900>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d121      	bne.n	8002c24 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_RCC_OscConfig+0x900>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x900>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bec:	f7ff f8de 	bl	8001dac <HAL_GetTick>
 8002bf0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	e010      	b.n	8002c18 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7ff f8d9 	bl	8001dac <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d908      	bls.n	8002c18 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e3d1      	b.n	80033ae <HAL_RCC_OscConfig+0x109a>
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	10908120 	.word	0x10908120
 8002c14:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c18:	4b8d      	ldr	r3, [pc, #564]	; (8002e50 <HAL_RCC_OscConfig+0xb3c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0e8      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x92e>
 8002c34:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4a86      	ldr	r2, [pc, #536]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6213      	str	r3, [r2, #32]
 8002c40:	e035      	b.n	8002cae <HAL_RCC_OscConfig+0x99a>
 8002c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x958>
 8002c52:	4b80      	ldr	r3, [pc, #512]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	4a7f      	ldr	r2, [pc, #508]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6213      	str	r3, [r2, #32]
 8002c5e:	4b7d      	ldr	r3, [pc, #500]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a7c      	ldr	r2, [pc, #496]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6213      	str	r3, [r2, #32]
 8002c6a:	e020      	b.n	8002cae <HAL_RCC_OscConfig+0x99a>
 8002c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d10c      	bne.n	8002c96 <HAL_RCC_OscConfig+0x982>
 8002c7c:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4a74      	ldr	r2, [pc, #464]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	6213      	str	r3, [r2, #32]
 8002c88:	4b72      	ldr	r3, [pc, #456]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4a71      	ldr	r2, [pc, #452]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6213      	str	r3, [r2, #32]
 8002c94:	e00b      	b.n	8002cae <HAL_RCC_OscConfig+0x99a>
 8002c96:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6213      	str	r3, [r2, #32]
 8002ca2:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	4a6b      	ldr	r2, [pc, #428]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8081 	beq.w	8002dc2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7ff f874 	bl	8001dac <HAL_GetTick>
 8002cc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7ff f86f 	bl	8001dac <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e365      	b.n	80033ae <HAL_RCC_OscConfig+0x109a>
 8002ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cea:	2202      	movs	r2, #2
 8002cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	fa93 f2a3 	rbit	r2, r3
 8002cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d00:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d0a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d0e:	2202      	movs	r2, #2
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d24:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d28:	601a      	str	r2, [r3, #0]
  return result;
 8002d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d2e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_OscConfig+0xa3a>
 8002d48:	4b42      	ldr	r3, [pc, #264]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	e013      	b.n	8002d76 <HAL_RCC_OscConfig+0xa62>
 8002d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d52:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d56:	2202      	movs	r2, #2
 8002d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d7a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d7e:	2102      	movs	r1, #2
 8002d80:	6011      	str	r1, [r2, #0]
 8002d82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	fa92 f1a2 	rbit	r1, r2
 8002d90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d94:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002d98:	6011      	str	r1, [r2, #0]
  return result;
 8002d9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d9e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	fab2 f282 	clz	r2, r2
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	f002 021f 	and.w	r2, r2, #31
 8002db4:	2101      	movs	r1, #1
 8002db6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d084      	beq.n	8002cca <HAL_RCC_OscConfig+0x9b6>
 8002dc0:	e083      	b.n	8002eca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fff3 	bl	8001dac <HAL_GetTick>
 8002dc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fe ffee 	bl	8001dac <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e2e4      	b.n	80033ae <HAL_RCC_OscConfig+0x109a>
 8002de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002dec:	2202      	movs	r2, #2
 8002dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e02:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e0c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e10:	2202      	movs	r2, #2
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e26:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e2a:	601a      	str	r2, [r3, #0]
  return result;
 8002e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e30:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0xb44>
 8002e4a:	4b02      	ldr	r3, [pc, #8]	; (8002e54 <HAL_RCC_OscConfig+0xb40>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	e017      	b.n	8002e80 <HAL_RCC_OscConfig+0xb6c>
 8002e50:	40007000 	.word	0x40007000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e60:	2202      	movs	r2, #2
 8002e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e76:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	4bb3      	ldr	r3, [pc, #716]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e88:	2102      	movs	r1, #2
 8002e8a:	6011      	str	r1, [r2, #0]
 8002e8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	fa92 f1a2 	rbit	r1, r2
 8002e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e9e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002ea2:	6011      	str	r1, [r2, #0]
  return result;
 8002ea4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ea8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	fab2 f282 	clz	r2, r2
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f002 021f 	and.w	r2, r2, #31
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d180      	bne.n	8002dcc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d105      	bne.n	8002ede <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed2:	4b9e      	ldr	r3, [pc, #632]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4a9d      	ldr	r2, [pc, #628]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8002ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002edc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 825e 	beq.w	80033ac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef0:	4b96      	ldr	r3, [pc, #600]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	f000 821f 	beq.w	800333c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	f040 8170 	bne.w	80031f0 <HAL_RCC_OscConfig+0xedc>
 8002f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f30:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f34:	601a      	str	r2, [r3, #0]
  return result;
 8002f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f3e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	461a      	mov	r2, r3
 8002f52:	2300      	movs	r3, #0
 8002f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fe ff29 	bl	8001dac <HAL_GetTick>
 8002f5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	e009      	b.n	8002f74 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe ff24 	bl	8001dac <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e21c      	b.n	80033ae <HAL_RCC_OscConfig+0x109a>
 8002f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f78:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f86:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fa93 f2a3 	rbit	r2, r3
 8002f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f94:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f98:	601a      	str	r2, [r3, #0]
  return result;
 8002f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002fa2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa4:	fab3 f383 	clz	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_OscConfig+0xcaa>
 8002fb8:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e027      	b.n	800300e <HAL_RCC_OscConfig+0xcfa>
 8002fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fde:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003004:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003012:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003016:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800301a:	6011      	str	r1, [r2, #0]
 800301c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003020:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	fa92 f1a2 	rbit	r1, r2
 800302a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800302e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003032:	6011      	str	r1, [r2, #0]
  return result;
 8003034:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003038:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	fab2 f282 	clz	r2, r2
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f042 0220 	orr.w	r2, r2, #32
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	f002 021f 	and.w	r2, r2, #31
 800304e:	2101      	movs	r1, #1
 8003050:	fa01 f202 	lsl.w	r2, r1, r2
 8003054:	4013      	ands	r3, r2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d182      	bne.n	8002f60 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305a:	4b3c      	ldr	r3, [pc, #240]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	f023 020f 	bic.w	r2, r3, #15
 8003062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003066:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	4937      	ldr	r1, [pc, #220]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8003070:	4313      	orrs	r3, r2
 8003072:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003074:	4b35      	ldr	r3, [pc, #212]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800307c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003080:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a19      	ldr	r1, [r3, #32]
 8003088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	430b      	orrs	r3, r1
 8003096:	492d      	ldr	r1, [pc, #180]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
 800309c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	fa93 f2a3 	rbit	r2, r3
 80030b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030bc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030c0:	601a      	str	r2, [r3, #0]
  return result;
 80030c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	461a      	mov	r2, r3
 80030de:	2301      	movs	r3, #1
 80030e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fe fe63 	bl	8001dac <HAL_GetTick>
 80030e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ea:	e009      	b.n	8003100 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fe5e 	bl	8001dac <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e156      	b.n	80033ae <HAL_RCC_OscConfig+0x109a>
 8003100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003104:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800310c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003112:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003120:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003124:	601a      	str	r2, [r3, #0]
  return result;
 8003126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800312a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800312e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCC_OscConfig+0xe3c>
 8003144:	4b01      	ldr	r3, [pc, #4]	; (800314c <HAL_RCC_OscConfig+0xe38>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	e02a      	b.n	80031a0 <HAL_RCC_OscConfig+0xe8c>
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003154:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800315c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003162:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fa93 f2a3 	rbit	r2, r3
 800316c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003170:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800317a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800317e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003188:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f2a3 	rbit	r2, r3
 8003192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003196:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	4b86      	ldr	r3, [pc, #536]	; (80033b8 <HAL_RCC_OscConfig+0x10a4>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031a4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031ac:	6011      	str	r1, [r2, #0]
 80031ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031b2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	fa92 f1a2 	rbit	r1, r2
 80031bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031c0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80031c4:	6011      	str	r1, [r2, #0]
  return result;
 80031c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80031ca:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	fab2 f282 	clz	r2, r2
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f002 021f 	and.w	r2, r2, #31
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f202 	lsl.w	r2, r1, r2
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f43f af7f 	beq.w	80030ec <HAL_RCC_OscConfig+0xdd8>
 80031ee:	e0dd      	b.n	80033ac <HAL_RCC_OscConfig+0x1098>
 80031f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003202:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	fa93 f2a3 	rbit	r2, r3
 800320c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003210:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003214:	601a      	str	r2, [r3, #0]
  return result;
 8003216:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800321e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800322a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	461a      	mov	r2, r3
 8003232:	2300      	movs	r3, #0
 8003234:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe fdb9 	bl	8001dac <HAL_GetTick>
 800323a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800323e:	e009      	b.n	8003254 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fdb4 	bl	8001dac <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0ac      	b.n	80033ae <HAL_RCC_OscConfig+0x109a>
 8003254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003258:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800325c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003266:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003274:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003278:	601a      	str	r2, [r3, #0]
  return result;
 800327a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800327e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003282:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d102      	bne.n	800329e <HAL_RCC_OscConfig+0xf8a>
 8003298:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_RCC_OscConfig+0x10a4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	e027      	b.n	80032ee <HAL_RCC_OscConfig+0xfda>
 800329e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	4b33      	ldr	r3, [pc, #204]	; (80033b8 <HAL_RCC_OscConfig+0x10a4>)
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80032f2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80032fa:	6011      	str	r1, [r2, #0]
 80032fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003300:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	fa92 f1a2 	rbit	r1, r2
 800330a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800330e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003312:	6011      	str	r1, [r2, #0]
  return result;
 8003314:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003318:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f042 0220 	orr.w	r2, r2, #32
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f002 021f 	and.w	r2, r2, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d182      	bne.n	8003240 <HAL_RCC_OscConfig+0xf2c>
 800333a:	e037      	b.n	80033ac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800333c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e02e      	b.n	80033ae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_RCC_OscConfig+0x10a4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003358:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <HAL_RCC_OscConfig+0x10a4>)
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003360:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003364:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003368:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800336c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	429a      	cmp	r2, r3
 8003376:	d117      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800337c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003384:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800338c:	429a      	cmp	r2, r3
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b09e      	sub	sp, #120	; 0x78
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e162      	b.n	800369a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b90      	ldr	r3, [pc, #576]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d910      	bls.n	8003404 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b8d      	ldr	r3, [pc, #564]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 0207 	bic.w	r2, r3, #7
 80033ea:	498b      	ldr	r1, [pc, #556]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f2:	4b89      	ldr	r3, [pc, #548]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e14a      	b.n	800369a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b82      	ldr	r3, [pc, #520]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	497f      	ldr	r1, [pc, #508]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80dc 	beq.w	80035e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d13c      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xf6>
 8003438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800343c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	095b      	lsrs	r3, r3, #5
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d102      	bne.n	8003462 <HAL_RCC_ClockConfig+0xa6>
 800345c:	4b6f      	ldr	r3, [pc, #444]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	e00f      	b.n	8003482 <HAL_RCC_ClockConfig+0xc6>
 8003462:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003466:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	667b      	str	r3, [r7, #100]	; 0x64
 8003470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003474:	663b      	str	r3, [r7, #96]	; 0x60
 8003476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347e:	4b67      	ldr	r3, [pc, #412]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003486:	65ba      	str	r2, [r7, #88]	; 0x58
 8003488:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800348a:	fa92 f2a2 	rbit	r2, r2
 800348e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003490:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f002 021f 	and.w	r2, r2, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d17b      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0f3      	b.n	800369a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d13c      	bne.n	8003534 <HAL_RCC_ClockConfig+0x178>
 80034ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d102      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x128>
 80034de:	4b4f      	ldr	r3, [pc, #316]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	e00f      	b.n	8003504 <HAL_RCC_ClockConfig+0x148>
 80034e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	647b      	str	r3, [r7, #68]	; 0x44
 80034f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f6:	643b      	str	r3, [r7, #64]	; 0x40
 80034f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003500:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003508:	63ba      	str	r2, [r7, #56]	; 0x38
 800350a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800350c:	fa92 f2a2 	rbit	r2, r2
 8003510:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	f042 0220 	orr.w	r2, r2, #32
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	f002 021f 	and.w	r2, r2, #31
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	4013      	ands	r3, r2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d13a      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b2      	b.n	800369a <HAL_RCC_ClockConfig+0x2de>
 8003534:	2302      	movs	r3, #2
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	fa93 f3a3 	rbit	r3, r3
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	b2db      	uxtb	r3, r3
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d102      	bne.n	800355c <HAL_RCC_ClockConfig+0x1a0>
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	e00d      	b.n	8003578 <HAL_RCC_ClockConfig+0x1bc>
 800355c:	2302      	movs	r3, #2
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	2302      	movs	r3, #2
 800356a:	623b      	str	r3, [r7, #32]
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	4b29      	ldr	r3, [pc, #164]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	2202      	movs	r2, #2
 800357a:	61ba      	str	r2, [r7, #24]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	fa92 f2a2 	rbit	r2, r2
 8003582:	617a      	str	r2, [r7, #20]
  return result;
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	fab2 f282 	clz	r2, r2
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	f042 0220 	orr.w	r2, r2, #32
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f002 021f 	and.w	r2, r2, #31
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	4013      	ands	r3, r2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e079      	b.n	800369a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f023 0203 	bic.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	491a      	ldr	r1, [pc, #104]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b8:	f7fe fbf8 	bl	8001dac <HAL_GetTick>
 80035bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7fe fbf4 	bl	8001dac <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e061      	b.n	800369a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_RCC_ClockConfig+0x260>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 020c 	and.w	r2, r3, #12
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1eb      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d214      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 0207 	bic.w	r2, r3, #7
 80035fe:	4906      	ldr	r1, [pc, #24]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b04      	ldr	r3, [pc, #16]	; (8003618 <HAL_RCC_ClockConfig+0x25c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e040      	b.n	800369a <HAL_RCC_ClockConfig+0x2de>
 8003618:	40022000 	.word	0x40022000
 800361c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b1d      	ldr	r3, [pc, #116]	; (80036a4 <HAL_RCC_ClockConfig+0x2e8>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	491a      	ldr	r1, [pc, #104]	; (80036a4 <HAL_RCC_ClockConfig+0x2e8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_RCC_ClockConfig+0x2e8>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4912      	ldr	r1, [pc, #72]	; (80036a4 <HAL_RCC_ClockConfig+0x2e8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800365e:	f000 f829 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8003662:	4601      	mov	r1, r0
 8003664:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_RCC_ClockConfig+0x2e8>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800366c:	22f0      	movs	r2, #240	; 0xf0
 800366e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	fa92 f2a2 	rbit	r2, r2
 8003676:	60fa      	str	r2, [r7, #12]
  return result;
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	fab2 f282 	clz	r2, r2
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	40d3      	lsrs	r3, r2
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x2ec>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	fa21 f303 	lsr.w	r3, r1, r3
 800368a:	4a08      	ldr	r2, [pc, #32]	; (80036ac <HAL_RCC_ClockConfig+0x2f0>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_RCC_ClockConfig+0x2f4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fa60 	bl	8001b58 <HAL_InitTick>
  
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3778      	adds	r7, #120	; 0x78
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	0800a344 	.word	0x0800a344
 80036ac:	20000004 	.word	0x20000004
 80036b0:	20000008 	.word	0x20000008

080036b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b08b      	sub	sp, #44	; 0x2c
 80036b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80036ce:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x30>
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d003      	beq.n	80036ea <HAL_RCC_GetSysClockFreq+0x36>
 80036e2:	e03f      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036e4:	4b25      	ldr	r3, [pc, #148]	; (800377c <HAL_RCC_GetSysClockFreq+0xc8>)
 80036e6:	623b      	str	r3, [r7, #32]
      break;
 80036e8:	e03f      	b.n	800376a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	fa92 f2a2 	rbit	r2, r2
 80036fc:	607a      	str	r2, [r7, #4]
  return result;
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	fab2 f282 	clz	r2, r2
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	40d3      	lsrs	r3, r2
 8003708:	4a1d      	ldr	r2, [pc, #116]	; (8003780 <HAL_RCC_GetSysClockFreq+0xcc>)
 800370a:	5cd3      	ldrb	r3, [r2, r3]
 800370c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	220f      	movs	r2, #15
 8003718:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	fa92 f2a2 	rbit	r2, r2
 8003720:	60fa      	str	r2, [r7, #12]
  return result;
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	fab2 f282 	clz	r2, r2
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	40d3      	lsrs	r3, r2
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <HAL_RCC_GetSysClockFreq+0xd0>)
 800372e:	5cd3      	ldrb	r3, [r2, r3]
 8003730:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800373c:	4a0f      	ldr	r2, [pc, #60]	; (800377c <HAL_RCC_GetSysClockFreq+0xc8>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	fbb2 f2f3 	udiv	r2, r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
 800374c:	e007      	b.n	800375e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	fbb2 f2f3 	udiv	r2, r2, r3
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	623b      	str	r3, [r7, #32]
      break;
 8003762:	e002      	b.n	800376a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003766:	623b      	str	r3, [r7, #32]
      break;
 8003768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376a:	6a3b      	ldr	r3, [r7, #32]
}
 800376c:	4618      	mov	r0, r3
 800376e:	372c      	adds	r7, #44	; 0x2c
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000
 800377c:	007a1200 	.word	0x007a1200
 8003780:	0800a35c 	.word	0x0800a35c
 8003784:	0800a36c 	.word	0x0800a36c

08003788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <HAL_RCC_GetHCLKFreq+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20000004 	.word	0x20000004

080037a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037a6:	f7ff ffef 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 80037aa:	4601      	mov	r1, r0
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	fa92 f2a2 	rbit	r2, r2
 80037c0:	603a      	str	r2, [r7, #0]
  return result;
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	fab2 f282 	clz	r2, r2
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	40d3      	lsrs	r3, r2
 80037cc:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037ce:	5cd3      	ldrb	r3, [r2, r3]
 80037d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	0800a354 	.word	0x0800a354

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80037ea:	f7ff ffcd 	bl	8003788 <HAL_RCC_GetHCLKFreq>
 80037ee:	4601      	mov	r1, r0
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80037f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80037fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	fa92 f2a2 	rbit	r2, r2
 8003804:	603a      	str	r2, [r7, #0]
  return result;
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	fab2 f282 	clz	r2, r2
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	40d3      	lsrs	r3, r2
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003812:	5cd3      	ldrb	r3, [r2, r3]
 8003814:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	0800a354 	.word	0x0800a354

08003828 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	220f      	movs	r2, #15
 8003836:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_RCC_GetClockConfig+0x5c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <HAL_RCC_GetClockConfig+0x5c>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <HAL_RCC_GetClockConfig+0x5c>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <HAL_RCC_GetClockConfig+0x5c>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	08db      	lsrs	r3, r3, #3
 8003862:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800386a:	4b07      	ldr	r3, [pc, #28]	; (8003888 <HAL_RCC_GetClockConfig+0x60>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0207 	and.w	r2, r3, #7
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	40022000 	.word	0x40022000

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b092      	sub	sp, #72	; 0x48
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80d4 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b0:	4b4e      	ldr	r3, [pc, #312]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10e      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	4a4a      	ldr	r2, [pc, #296]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	61d3      	str	r3, [r2, #28]
 80038c8:	4b48      	ldr	r3, [pc, #288]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a41      	ldr	r2, [pc, #260]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fe fa5b 	bl	8001dac <HAL_GetTick>
 80038f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fe fa57 	bl	8001dac <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e1d6      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003920:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8084 	beq.w	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003934:	429a      	cmp	r2, r3
 8003936:	d07c      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003938:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	461a      	mov	r2, r3
 8003962:	2301      	movs	r3, #1
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	461a      	mov	r2, r3
 8003986:	2300      	movs	r3, #0
 8003988:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d04b      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fe fa07 	bl	8001dac <HAL_GetTick>
 800399e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe fa03 	bl	8001dac <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e180      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80039b8:	2302      	movs	r3, #2
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	2302      	movs	r3, #2
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	61fb      	str	r3, [r7, #28]
  return result;
 80039d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d108      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039e6:	4b01      	ldr	r3, [pc, #4]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	e00d      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
 80039f4:	10908100 	.word	0x10908100
 80039f8:	2302      	movs	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	4b9a      	ldr	r3, [pc, #616]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2202      	movs	r2, #2
 8003a0a:	613a      	str	r2, [r7, #16]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	fa92 f2a2 	rbit	r2, r2
 8003a12:	60fa      	str	r2, [r7, #12]
  return result;
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	fab2 f282 	clz	r2, r2
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f002 021f 	and.w	r2, r2, #31
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0b7      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a32:	4b8f      	ldr	r3, [pc, #572]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	498c      	ldr	r1, [pc, #560]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4c:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4a87      	ldr	r2, [pc, #540]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a64:	4b82      	ldr	r3, [pc, #520]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f023 0203 	bic.w	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	497f      	ldr	r1, [pc, #508]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a82:	4b7b      	ldr	r3, [pc, #492]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	4978      	ldr	r1, [pc, #480]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa0:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	4970      	ldr	r1, [pc, #448]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003abe:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f023 0210 	bic.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4969      	ldr	r1, [pc, #420]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003adc:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	4961      	ldr	r1, [pc, #388]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003afa:	4b5d      	ldr	r3, [pc, #372]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f023 0220 	bic.w	r2, r3, #32
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	495a      	ldr	r1, [pc, #360]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b18:	4b55      	ldr	r3, [pc, #340]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	4952      	ldr	r1, [pc, #328]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b36:	4b4e      	ldr	r3, [pc, #312]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	494b      	ldr	r1, [pc, #300]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b54:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	4943      	ldr	r1, [pc, #268]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b72:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	493c      	ldr	r1, [pc, #240]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b90:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	4934      	ldr	r1, [pc, #208]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	492d      	ldr	r1, [pc, #180]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	4925      	ldr	r1, [pc, #148]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	491e      	ldr	r1, [pc, #120]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	4916      	ldr	r1, [pc, #88]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	490f      	ldr	r1, [pc, #60]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	4907      	ldr	r1, [pc, #28]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c62:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	4913      	ldr	r1, [pc, #76]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	490b      	ldr	r1, [pc, #44]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb2:	4904      	ldr	r1, [pc, #16]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3748      	adds	r7, #72	; 0x48
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e09d      	b.n	8003e16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cea:	d009      	beq.n	8003d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
 8003cf2:	e005      	b.n	8003d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fe98 	bl	8001a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d40:	d902      	bls.n	8003d48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e002      	b.n	8003d4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d56:	d007      	beq.n	8003d68 <HAL_SPI_Init+0xa0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	ea42 0103 	orr.w	r1, r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	f003 0204 	and.w	r2, r3, #4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003de4:	ea42 0103 	orr.w	r1, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b088      	sub	sp, #32
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_SPI_Transmit+0x22>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e158      	b.n	80040f2 <HAL_SPI_Transmit+0x2d4>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e48:	f7fd ffb0 	bl	8001dac <HAL_GetTick>
 8003e4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e62:	e13d      	b.n	80040e0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_SPI_Transmit+0x52>
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e74:	e134      	b.n	80040e0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec0:	d10f      	bne.n	8003ee2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d007      	beq.n	8003f00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f08:	d94b      	bls.n	8003fa2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <HAL_SPI_Transmit+0xfa>
 8003f12:	8afb      	ldrh	r3, [r7, #22]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d13e      	bne.n	8003f96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	881a      	ldrh	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	1c9a      	adds	r2, r3, #2
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f3c:	e02b      	b.n	8003f96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d112      	bne.n	8003f72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	881a      	ldrh	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	1c9a      	adds	r2, r3, #2
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f70:	e011      	b.n	8003f96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f72:	f7fd ff1b 	bl	8001dac <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d803      	bhi.n	8003f8a <HAL_SPI_Transmit+0x16c>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d102      	bne.n	8003f90 <HAL_SPI_Transmit+0x172>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d102      	bne.n	8003f96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f94:	e0a4      	b.n	80040e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ce      	bne.n	8003f3e <HAL_SPI_Transmit+0x120>
 8003fa0:	e07c      	b.n	800409c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_Transmit+0x192>
 8003faa:	8afb      	ldrh	r3, [r7, #22]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d170      	bne.n	8004092 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d912      	bls.n	8003fe0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	881a      	ldrh	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	1c9a      	adds	r2, r3, #2
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b02      	subs	r3, #2
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fde:	e058      	b.n	8004092 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004006:	e044      	b.n	8004092 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d12b      	bne.n	800406e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d912      	bls.n	8004046 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	881a      	ldrh	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	1c9a      	adds	r2, r3, #2
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b02      	subs	r3, #2
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004044:	e025      	b.n	8004092 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800406c:	e011      	b.n	8004092 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406e:	f7fd fe9d 	bl	8001dac <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d803      	bhi.n	8004086 <HAL_SPI_Transmit+0x268>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d102      	bne.n	800408c <HAL_SPI_Transmit+0x26e>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004090:	e026      	b.n	80040e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1b5      	bne.n	8004008 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fb5b 	bl	800475c <SPI_EndRxTxTransaction>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e000      	b.n	80040e0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80040de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b08a      	sub	sp, #40	; 0x28
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_SPI_TransmitReceive+0x26>
 800411c:	2302      	movs	r3, #2
 800411e:	e1fb      	b.n	8004518 <HAL_SPI_TransmitReceive+0x41e>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004128:	f7fd fe40 	bl	8001dac <HAL_GetTick>
 800412c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004134:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004140:	887b      	ldrh	r3, [r7, #2]
 8004142:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004144:	7efb      	ldrb	r3, [r7, #27]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d00e      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x6e>
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004150:	d106      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d102      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x66>
 800415a:	7efb      	ldrb	r3, [r7, #27]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d003      	beq.n	8004168 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004160:	2302      	movs	r3, #2
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004166:	e1cd      	b.n	8004504 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_SPI_TransmitReceive+0x80>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_SPI_TransmitReceive+0x80>
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d103      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004180:	e1c0      	b.n	8004504 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b04      	cmp	r3, #4
 800418c:	d003      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2205      	movs	r2, #5
 8004192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	887a      	ldrh	r2, [r7, #2]
 80041a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	887a      	ldrh	r2, [r7, #2]
 80041ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041d8:	d802      	bhi.n	80041e0 <HAL_SPI_TransmitReceive+0xe6>
 80041da:	8a3b      	ldrh	r3, [r7, #16]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d908      	bls.n	80041f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	e007      	b.n	8004202 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d007      	beq.n	8004220 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004228:	d97c      	bls.n	8004324 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x13e>
 8004232:	8a7b      	ldrh	r3, [r7, #18]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d169      	bne.n	800430c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	881a      	ldrh	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	1c9a      	adds	r2, r3, #2
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800425c:	e056      	b.n	800430c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b02      	cmp	r3, #2
 800426a:	d11b      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x1aa>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d016      	beq.n	80042a4 <HAL_SPI_TransmitReceive+0x1aa>
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	2b01      	cmp	r3, #1
 800427a:	d113      	bne.n	80042a4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	1c9a      	adds	r2, r3, #2
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d11c      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x1f2>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	b292      	uxth	r2, r2
 80042ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	1c9a      	adds	r2, r3, #2
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042e8:	2301      	movs	r3, #1
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042ec:	f7fd fd5e 	bl	8001dac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d807      	bhi.n	800430c <HAL_SPI_TransmitReceive+0x212>
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d003      	beq.n	800430c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800430a:	e0fb      	b.n	8004504 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1a3      	bne.n	800425e <HAL_SPI_TransmitReceive+0x164>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d19d      	bne.n	800425e <HAL_SPI_TransmitReceive+0x164>
 8004322:	e0df      	b.n	80044e4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x23a>
 800432c:	8a7b      	ldrh	r3, [r7, #18]
 800432e:	2b01      	cmp	r3, #1
 8004330:	f040 80cb 	bne.w	80044ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d912      	bls.n	8004364 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b02      	subs	r3, #2
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004362:	e0b2      	b.n	80044ca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800438a:	e09e      	b.n	80044ca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	d134      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x30a>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02f      	beq.n	8004404 <HAL_SPI_TransmitReceive+0x30a>
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d12c      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d912      	bls.n	80043da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b02      	subs	r3, #2
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043d8:	e012      	b.n	8004400 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	7812      	ldrb	r2, [r2, #0]
 80043e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d148      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x3aa>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d042      	beq.n	80044a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d923      	bls.n	8004472 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	b292      	uxth	r2, r2
 8004436:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	1c9a      	adds	r2, r3, #2
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b02      	subs	r3, #2
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d81f      	bhi.n	80044a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	e016      	b.n	80044a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f103 020c 	add.w	r2, r3, #12
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	7812      	ldrb	r2, [r2, #0]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a0:	2301      	movs	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044a4:	f7fd fc82 	bl	8001dac <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d803      	bhi.n	80044bc <HAL_SPI_TransmitReceive+0x3c2>
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d102      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x3c8>
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d103      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80044c8:	e01c      	b.n	8004504 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f af5b 	bne.w	800438c <HAL_SPI_TransmitReceive+0x292>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f47f af54 	bne.w	800438c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f937 	bl	800475c <SPI_EndRxTxTransaction>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	661a      	str	r2, [r3, #96]	; 0x60
 8004500:	e000      	b.n	8004504 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004518:	4618      	mov	r0, r3
 800451a:	3728      	adds	r7, #40	; 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004530:	f7fd fc3c 	bl	8001dac <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	4413      	add	r3, r2
 800453e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004540:	f7fd fc34 	bl	8001dac <HAL_GetTick>
 8004544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	015b      	lsls	r3, r3, #5
 800454c:	0d1b      	lsrs	r3, r3, #20
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	fb02 f303 	mul.w	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004556:	e054      	b.n	8004602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d050      	beq.n	8004602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004560:	f7fd fc24 	bl	8001dac <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	429a      	cmp	r2, r3
 800456e:	d902      	bls.n	8004576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d13d      	bne.n	80045f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800458e:	d111      	bne.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004598:	d004      	beq.n	80045a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a2:	d107      	bne.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045bc:	d10f      	bne.n	80045de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e017      	b.n	8004622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	3b01      	subs	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4013      	ands	r3, r2
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	429a      	cmp	r2, r3
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	429a      	cmp	r2, r3
 800461e:	d19b      	bne.n	8004558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000004 	.word	0x20000004

08004630 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004642:	f7fd fbb3 	bl	8001dac <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	4413      	add	r3, r2
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004652:	f7fd fbab 	bl	8001dac <HAL_GetTick>
 8004656:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	330c      	adds	r3, #12
 800465e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004660:	4b3d      	ldr	r3, [pc, #244]	; (8004758 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00da      	lsls	r2, r3, #3
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	0d1b      	lsrs	r3, r3, #20
 8004670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004678:	e060      	b.n	800473c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004680:	d107      	bne.n	8004692 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004690:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d050      	beq.n	800473c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800469a:	f7fd fb87 	bl	8001dac <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d902      	bls.n	80046b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d13d      	bne.n	800472c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c8:	d111      	bne.n	80046ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	d004      	beq.n	80046de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046dc:	d107      	bne.n	80046ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f6:	d10f      	bne.n	8004718 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004716:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e010      	b.n	800474e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	3b01      	subs	r3, #1
 800473a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	429a      	cmp	r2, r3
 800474a:	d196      	bne.n	800467a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3728      	adds	r7, #40	; 0x28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000004 	.word	0x20000004

0800475c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff ff5b 	bl	8004630 <SPI_WaitFifoStateUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e027      	b.n	80047e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2200      	movs	r2, #0
 8004798:	2180      	movs	r1, #128	; 0x80
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff fec0 	bl	8004520 <SPI_WaitFlagStateUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d007      	beq.n	80047b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e014      	b.n	80047e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2200      	movs	r2, #0
 80047be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f7ff ff34 	bl	8004630 <SPI_WaitFifoStateUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e000      	b.n	80047e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e049      	b.n	800488e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f841 	bl	8004896 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f000 f9f8 	bl	8004c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d001      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e04f      	b.n	8004964 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a23      	ldr	r2, [pc, #140]	; (8004970 <HAL_TIM_Base_Start_IT+0xc4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01d      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0x76>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d018      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0x76>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a1f      	ldr	r2, [pc, #124]	; (8004974 <HAL_TIM_Base_Start_IT+0xc8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0x76>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1e      	ldr	r2, [pc, #120]	; (8004978 <HAL_TIM_Base_Start_IT+0xcc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0x76>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1c      	ldr	r2, [pc, #112]	; (800497c <HAL_TIM_Base_Start_IT+0xd0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0x76>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <HAL_TIM_Base_Start_IT+0xd4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_TIM_Base_Start_IT+0x76>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <HAL_TIM_Base_Start_IT+0xd8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d115      	bne.n	800494e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_TIM_Base_Start_IT+0xdc>)
 800492a:	4013      	ands	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b06      	cmp	r3, #6
 8004932:	d015      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0xb4>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493a:	d011      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	e008      	b.n	8004960 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e000      	b.n	8004962 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004960:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800
 800497c:	40013400 	.word	0x40013400
 8004980:	40014000 	.word	0x40014000
 8004984:	40015000 	.word	0x40015000
 8004988:	00010007 	.word	0x00010007

0800498c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0202 	mvn.w	r2, #2
 80049b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f905 	bl	8004bde <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8f7 	bl	8004bca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f908 	bl	8004bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0204 	mvn.w	r2, #4
 8004a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8db 	bl	8004bde <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8cd 	bl	8004bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f8de 	bl	8004bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0208 	mvn.w	r2, #8
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2204      	movs	r2, #4
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8b1 	bl	8004bde <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f8a3 	bl	8004bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f8b4 	bl	8004bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d122      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0310 	and.w	r3, r3, #16
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0210 	mvn.w	r2, #16
 8004ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2208      	movs	r2, #8
 8004aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f887 	bl	8004bde <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f879 	bl	8004bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f88a 	bl	8004bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d10e      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0201 	mvn.w	r2, #1
 8004b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc ff66 	bl	80019dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b80      	cmp	r3, #128	; 0x80
 8004b1c:	d10e      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b28:	2b80      	cmp	r3, #128	; 0x80
 8004b2a:	d107      	bne.n	8004b3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f918 	bl	8004d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4a:	d10e      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b56:	2b80      	cmp	r3, #128	; 0x80
 8004b58:	d107      	bne.n	8004b6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f90b 	bl	8004d80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d10e      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b40      	cmp	r3, #64	; 0x40
 8004b84:	d107      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f838 	bl	8004c06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d10e      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d107      	bne.n	8004bc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f06f 0220 	mvn.w	r2, #32
 8004bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f8cb 	bl	8004d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a42      	ldr	r2, [pc, #264]	; (8004d38 <TIM_Base_SetConfig+0x11c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3a:	d00f      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a3f      	ldr	r2, [pc, #252]	; (8004d3c <TIM_Base_SetConfig+0x120>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a3e      	ldr	r2, [pc, #248]	; (8004d40 <TIM_Base_SetConfig+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a3d      	ldr	r2, [pc, #244]	; (8004d44 <TIM_Base_SetConfig+0x128>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0x40>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a3c      	ldr	r2, [pc, #240]	; (8004d48 <TIM_Base_SetConfig+0x12c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d108      	bne.n	8004c6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a31      	ldr	r2, [pc, #196]	; (8004d38 <TIM_Base_SetConfig+0x11c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7c:	d01b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2e      	ldr	r2, [pc, #184]	; (8004d3c <TIM_Base_SetConfig+0x120>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d017      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2d      	ldr	r2, [pc, #180]	; (8004d40 <TIM_Base_SetConfig+0x124>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <TIM_Base_SetConfig+0x128>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a2c      	ldr	r2, [pc, #176]	; (8004d4c <TIM_Base_SetConfig+0x130>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2b      	ldr	r2, [pc, #172]	; (8004d50 <TIM_Base_SetConfig+0x134>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <TIM_Base_SetConfig+0x138>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0x9a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a25      	ldr	r2, [pc, #148]	; (8004d48 <TIM_Base_SetConfig+0x12c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <TIM_Base_SetConfig+0x11c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <TIM_Base_SetConfig+0x100>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <TIM_Base_SetConfig+0x128>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00f      	beq.n	8004d1c <TIM_Base_SetConfig+0x100>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a13      	ldr	r2, [pc, #76]	; (8004d4c <TIM_Base_SetConfig+0x130>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_Base_SetConfig+0x100>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a12      	ldr	r2, [pc, #72]	; (8004d50 <TIM_Base_SetConfig+0x134>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_Base_SetConfig+0x100>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <TIM_Base_SetConfig+0x138>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_Base_SetConfig+0x100>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <TIM_Base_SetConfig+0x12c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d103      	bne.n	8004d24 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	691a      	ldr	r2, [r3, #16]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	615a      	str	r2, [r3, #20]
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40015000 	.word	0x40015000
 8004d4c:	40014000 	.word	0x40014000
 8004d50:	40014400 	.word	0x40014400
 8004d54:	40014800 	.word	0x40014800

08004d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e040      	b.n	8004e28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fc fe8c 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2224      	movs	r2, #36	; 0x24
 8004dc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f8c0 	bl	8004f58 <UART_SetConfig>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e022      	b.n	8004e28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fa8a 	bl	8005304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fb11 	bl	8005448 <UART_CheckIdleState>
 8004e26:	4603      	mov	r3, r0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	f040 8082 	bne.w	8004f4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_UART_Transmit+0x26>
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e07a      	b.n	8004f50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_UART_Transmit+0x38>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e073      	b.n	8004f50 <HAL_UART_Transmit+0x120>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2221      	movs	r2, #33	; 0x21
 8004e7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e7e:	f7fc ff95 	bl	8001dac <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	88fa      	ldrh	r2, [r7, #6]
 8004e90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9c:	d108      	bne.n	8004eb0 <HAL_UART_Transmit+0x80>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d104      	bne.n	8004eb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	e003      	b.n	8004eb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ec0:	e02d      	b.n	8004f1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fb04 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e039      	b.n	8004f50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	881a      	ldrh	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	e008      	b.n	8004f0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	b292      	uxth	r2, r2
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1cb      	bne.n	8004ec2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2200      	movs	r2, #0
 8004f32:	2140      	movs	r1, #64	; 0x40
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fad0 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e005      	b.n	8004f50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b92      	ldr	r3, [pc, #584]	; (80051cc <UART_SetConfig+0x274>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a80      	ldr	r2, [pc, #512]	; (80051d0 <UART_SetConfig+0x278>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d120      	bne.n	8005016 <UART_SetConfig+0xbe>
 8004fd4:	4b7f      	ldr	r3, [pc, #508]	; (80051d4 <UART_SetConfig+0x27c>)
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d817      	bhi.n	8005010 <UART_SetConfig+0xb8>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <UART_SetConfig+0x90>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	08004ff9 	.word	0x08004ff9
 8004fec:	08005005 	.word	0x08005005
 8004ff0:	0800500b 	.word	0x0800500b
 8004ff4:	08004fff 	.word	0x08004fff
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e0b5      	b.n	800516a <UART_SetConfig+0x212>
 8004ffe:	2302      	movs	r3, #2
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e0b2      	b.n	800516a <UART_SetConfig+0x212>
 8005004:	2304      	movs	r3, #4
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e0af      	b.n	800516a <UART_SetConfig+0x212>
 800500a:	2308      	movs	r3, #8
 800500c:	77fb      	strb	r3, [r7, #31]
 800500e:	e0ac      	b.n	800516a <UART_SetConfig+0x212>
 8005010:	2310      	movs	r3, #16
 8005012:	77fb      	strb	r3, [r7, #31]
 8005014:	e0a9      	b.n	800516a <UART_SetConfig+0x212>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6f      	ldr	r2, [pc, #444]	; (80051d8 <UART_SetConfig+0x280>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d124      	bne.n	800506a <UART_SetConfig+0x112>
 8005020:	4b6c      	ldr	r3, [pc, #432]	; (80051d4 <UART_SetConfig+0x27c>)
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005028:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800502c:	d011      	beq.n	8005052 <UART_SetConfig+0xfa>
 800502e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005032:	d817      	bhi.n	8005064 <UART_SetConfig+0x10c>
 8005034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005038:	d011      	beq.n	800505e <UART_SetConfig+0x106>
 800503a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800503e:	d811      	bhi.n	8005064 <UART_SetConfig+0x10c>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <UART_SetConfig+0xf4>
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005048:	d006      	beq.n	8005058 <UART_SetConfig+0x100>
 800504a:	e00b      	b.n	8005064 <UART_SetConfig+0x10c>
 800504c:	2300      	movs	r3, #0
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e08b      	b.n	800516a <UART_SetConfig+0x212>
 8005052:	2302      	movs	r3, #2
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e088      	b.n	800516a <UART_SetConfig+0x212>
 8005058:	2304      	movs	r3, #4
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e085      	b.n	800516a <UART_SetConfig+0x212>
 800505e:	2308      	movs	r3, #8
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e082      	b.n	800516a <UART_SetConfig+0x212>
 8005064:	2310      	movs	r3, #16
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e07f      	b.n	800516a <UART_SetConfig+0x212>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a5b      	ldr	r2, [pc, #364]	; (80051dc <UART_SetConfig+0x284>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d124      	bne.n	80050be <UART_SetConfig+0x166>
 8005074:	4b57      	ldr	r3, [pc, #348]	; (80051d4 <UART_SetConfig+0x27c>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800507c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005080:	d011      	beq.n	80050a6 <UART_SetConfig+0x14e>
 8005082:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005086:	d817      	bhi.n	80050b8 <UART_SetConfig+0x160>
 8005088:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800508c:	d011      	beq.n	80050b2 <UART_SetConfig+0x15a>
 800508e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005092:	d811      	bhi.n	80050b8 <UART_SetConfig+0x160>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <UART_SetConfig+0x148>
 8005098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800509c:	d006      	beq.n	80050ac <UART_SetConfig+0x154>
 800509e:	e00b      	b.n	80050b8 <UART_SetConfig+0x160>
 80050a0:	2300      	movs	r3, #0
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e061      	b.n	800516a <UART_SetConfig+0x212>
 80050a6:	2302      	movs	r3, #2
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e05e      	b.n	800516a <UART_SetConfig+0x212>
 80050ac:	2304      	movs	r3, #4
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e05b      	b.n	800516a <UART_SetConfig+0x212>
 80050b2:	2308      	movs	r3, #8
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e058      	b.n	800516a <UART_SetConfig+0x212>
 80050b8:	2310      	movs	r3, #16
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e055      	b.n	800516a <UART_SetConfig+0x212>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a47      	ldr	r2, [pc, #284]	; (80051e0 <UART_SetConfig+0x288>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d124      	bne.n	8005112 <UART_SetConfig+0x1ba>
 80050c8:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <UART_SetConfig+0x27c>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80050d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050d4:	d011      	beq.n	80050fa <UART_SetConfig+0x1a2>
 80050d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050da:	d817      	bhi.n	800510c <UART_SetConfig+0x1b4>
 80050dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050e0:	d011      	beq.n	8005106 <UART_SetConfig+0x1ae>
 80050e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050e6:	d811      	bhi.n	800510c <UART_SetConfig+0x1b4>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <UART_SetConfig+0x19c>
 80050ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f0:	d006      	beq.n	8005100 <UART_SetConfig+0x1a8>
 80050f2:	e00b      	b.n	800510c <UART_SetConfig+0x1b4>
 80050f4:	2300      	movs	r3, #0
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e037      	b.n	800516a <UART_SetConfig+0x212>
 80050fa:	2302      	movs	r3, #2
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e034      	b.n	800516a <UART_SetConfig+0x212>
 8005100:	2304      	movs	r3, #4
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e031      	b.n	800516a <UART_SetConfig+0x212>
 8005106:	2308      	movs	r3, #8
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e02e      	b.n	800516a <UART_SetConfig+0x212>
 800510c:	2310      	movs	r3, #16
 800510e:	77fb      	strb	r3, [r7, #31]
 8005110:	e02b      	b.n	800516a <UART_SetConfig+0x212>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a33      	ldr	r2, [pc, #204]	; (80051e4 <UART_SetConfig+0x28c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d124      	bne.n	8005166 <UART_SetConfig+0x20e>
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <UART_SetConfig+0x27c>)
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005124:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005128:	d011      	beq.n	800514e <UART_SetConfig+0x1f6>
 800512a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800512e:	d817      	bhi.n	8005160 <UART_SetConfig+0x208>
 8005130:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005134:	d011      	beq.n	800515a <UART_SetConfig+0x202>
 8005136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800513a:	d811      	bhi.n	8005160 <UART_SetConfig+0x208>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <UART_SetConfig+0x1f0>
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d006      	beq.n	8005154 <UART_SetConfig+0x1fc>
 8005146:	e00b      	b.n	8005160 <UART_SetConfig+0x208>
 8005148:	2300      	movs	r3, #0
 800514a:	77fb      	strb	r3, [r7, #31]
 800514c:	e00d      	b.n	800516a <UART_SetConfig+0x212>
 800514e:	2302      	movs	r3, #2
 8005150:	77fb      	strb	r3, [r7, #31]
 8005152:	e00a      	b.n	800516a <UART_SetConfig+0x212>
 8005154:	2304      	movs	r3, #4
 8005156:	77fb      	strb	r3, [r7, #31]
 8005158:	e007      	b.n	800516a <UART_SetConfig+0x212>
 800515a:	2308      	movs	r3, #8
 800515c:	77fb      	strb	r3, [r7, #31]
 800515e:	e004      	b.n	800516a <UART_SetConfig+0x212>
 8005160:	2310      	movs	r3, #16
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e001      	b.n	800516a <UART_SetConfig+0x212>
 8005166:	2310      	movs	r3, #16
 8005168:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005172:	d16c      	bne.n	800524e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b08      	cmp	r3, #8
 8005178:	d838      	bhi.n	80051ec <UART_SetConfig+0x294>
 800517a:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0x228>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	080051ed 	.word	0x080051ed
 8005190:	080051bb 	.word	0x080051bb
 8005194:	080051ed 	.word	0x080051ed
 8005198:	080051ed 	.word	0x080051ed
 800519c:	080051ed 	.word	0x080051ed
 80051a0:	080051c3 	.word	0x080051c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fe fafc 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 80051a8:	61b8      	str	r0, [r7, #24]
        break;
 80051aa:	e024      	b.n	80051f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fe fb1a 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 80051b0:	61b8      	str	r0, [r7, #24]
        break;
 80051b2:	e020      	b.n	80051f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <UART_SetConfig+0x290>)
 80051b6:	61bb      	str	r3, [r7, #24]
        break;
 80051b8:	e01d      	b.n	80051f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ba:	f7fe fa7b 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 80051be:	61b8      	str	r0, [r7, #24]
        break;
 80051c0:	e019      	b.n	80051f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c6:	61bb      	str	r3, [r7, #24]
        break;
 80051c8:	e015      	b.n	80051f6 <UART_SetConfig+0x29e>
 80051ca:	bf00      	nop
 80051cc:	efff69f3 	.word	0xefff69f3
 80051d0:	40013800 	.word	0x40013800
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40004400 	.word	0x40004400
 80051dc:	40004800 	.word	0x40004800
 80051e0:	40004c00 	.word	0x40004c00
 80051e4:	40005000 	.word	0x40005000
 80051e8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	77bb      	strb	r3, [r7, #30]
        break;
 80051f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d075      	beq.n	80052e8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	005a      	lsls	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	441a      	add	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	b29b      	uxth	r3, r3
 8005212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d916      	bls.n	8005248 <UART_SetConfig+0x2f0>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005220:	d212      	bcs.n	8005248 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	b29b      	uxth	r3, r3
 8005226:	f023 030f 	bic.w	r3, r3, #15
 800522a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	085b      	lsrs	r3, r3, #1
 8005230:	b29b      	uxth	r3, r3
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	b29a      	uxth	r2, r3
 8005238:	89fb      	ldrh	r3, [r7, #14]
 800523a:	4313      	orrs	r3, r2
 800523c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	89fa      	ldrh	r2, [r7, #14]
 8005244:	60da      	str	r2, [r3, #12]
 8005246:	e04f      	b.n	80052e8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	77bb      	strb	r3, [r7, #30]
 800524c:	e04c      	b.n	80052e8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800524e:	7ffb      	ldrb	r3, [r7, #31]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d828      	bhi.n	80052a6 <UART_SetConfig+0x34e>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0x304>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005281 	.word	0x08005281
 8005260:	08005289 	.word	0x08005289
 8005264:	08005291 	.word	0x08005291
 8005268:	080052a7 	.word	0x080052a7
 800526c:	08005297 	.word	0x08005297
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052a7 	.word	0x080052a7
 800527c:	0800529f 	.word	0x0800529f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fe fa8e 	bl	80037a0 <HAL_RCC_GetPCLK1Freq>
 8005284:	61b8      	str	r0, [r7, #24]
        break;
 8005286:	e013      	b.n	80052b0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fe faac 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 800528c:	61b8      	str	r0, [r7, #24]
        break;
 800528e:	e00f      	b.n	80052b0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <UART_SetConfig+0x3a8>)
 8005292:	61bb      	str	r3, [r7, #24]
        break;
 8005294:	e00c      	b.n	80052b0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005296:	f7fe fa0d 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800529a:	61b8      	str	r0, [r7, #24]
        break;
 800529c:	e008      	b.n	80052b0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	61bb      	str	r3, [r7, #24]
        break;
 80052a4:	e004      	b.n	80052b0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	77bb      	strb	r3, [r7, #30]
        break;
 80052ae:	bf00      	nop
    }

    if (pclk != 0U)
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d018      	beq.n	80052e8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	085a      	lsrs	r2, r3, #1
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	441a      	add	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	d908      	bls.n	80052e4 <UART_SetConfig+0x38c>
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d8:	d204      	bcs.n	80052e4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	60da      	str	r2, [r3, #12]
 80052e2:	e001      	b.n	80052e8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	007a1200 	.word	0x007a1200

08005304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d01a      	beq.n	800541a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005402:	d10a      	bne.n	800541a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	605a      	str	r2, [r3, #4]
  }
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af02      	add	r7, sp, #8
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005458:	f7fc fca8 	bl	8001dac <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d10e      	bne.n	800548a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f82d 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e023      	b.n	80054d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b04      	cmp	r3, #4
 8005496:	d10e      	bne.n	80054b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f817 	bl	80054da <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e00d      	b.n	80054d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b09c      	sub	sp, #112	; 0x70
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ea:	e0a5      	b.n	8005638 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	f000 80a1 	beq.w	8005638 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f6:	f7fc fc59 	bl	8001dac <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <UART_WaitOnFlagUntilTimeout+0x32>
 8005506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005508:	2b00      	cmp	r3, #0
 800550a:	d13e      	bne.n	800558a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005520:	667b      	str	r3, [r7, #100]	; 0x64
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800552a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800552c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e6      	bne.n	800550c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	663b      	str	r3, [r7, #96]	; 0x60
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3308      	adds	r3, #8
 800555c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800555e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800556c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e5      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e067      	b.n	800565a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d04f      	beq.n	8005638 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a6:	d147      	bne.n	8005638 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
 80055d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	e853 3f00 	ldrex	r3, [r3]
 80055f2:	613b      	str	r3, [r7, #16]
   return(result);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f023 0301 	bic.w	r3, r3, #1
 80055fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3308      	adds	r3, #8
 8005602:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005604:	623a      	str	r2, [r7, #32]
 8005606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005608:	69f9      	ldr	r1, [r7, #28]
 800560a:	6a3a      	ldr	r2, [r7, #32]
 800560c:	e841 2300 	strex	r3, r2, [r1]
 8005610:	61bb      	str	r3, [r7, #24]
   return(result);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e5      	bne.n	80055e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e010      	b.n	800565a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4013      	ands	r3, r2
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	429a      	cmp	r2, r3
 8005654:	f43f af4a 	beq.w	80054ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3770      	adds	r7, #112	; 0x70
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005668:	4904      	ldr	r1, [pc, #16]	; (800567c <MX_FATFS_Init+0x18>)
 800566a:	4805      	ldr	r0, [pc, #20]	; (8005680 <MX_FATFS_Init+0x1c>)
 800566c:	f003 ff48 	bl	8009500 <FATFS_LinkDriver>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <MX_FATFS_Init+0x20>)
 8005676:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}
 800567c:	2000024c 	.word	0x2000024c
 8005680:	20000010 	.word	0x20000010
 8005684:	20000248 	.word	0x20000248

08005688 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800568c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800568e:	4618      	mov	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fb faad 	bl	8000c04 <SD_disk_initialize>
 80056aa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fb fb85 	bl	8000dd0 <SD_disk_status>
 80056c6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	4603      	mov	r3, r0
 80056de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80056e0:	7bf8      	ldrb	r0, [r7, #15]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	f7fb fb88 	bl	8000dfc <SD_disk_read>
 80056ec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
 8005702:	4603      	mov	r3, r0
 8005704:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005706:	7bf8      	ldrb	r0, [r7, #15]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	f7fb fbdf 	bl	8000ed0 <SD_disk_write>
 8005712:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	603a      	str	r2, [r7, #0]
 8005726:	71fb      	strb	r3, [r7, #7]
 8005728:	460b      	mov	r3, r1
 800572a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800572c:	79b9      	ldrb	r1, [r7, #6]
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7fb fc50 	bl	8000fd8 <SD_disk_ioctl>
 8005738:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <disk_status+0x30>)
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	79fa      	ldrb	r2, [r7, #7]
 800575c:	4905      	ldr	r1, [pc, #20]	; (8005774 <disk_status+0x30>)
 800575e:	440a      	add	r2, r1
 8005760:	7a12      	ldrb	r2, [r2, #8]
 8005762:	4610      	mov	r0, r2
 8005764:	4798      	blx	r3
 8005766:	4603      	mov	r3, r0
 8005768:	73fb      	strb	r3, [r7, #15]
  return stat;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000270 	.word	0x20000270

08005778 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <disk_initialize+0x48>)
 800578a:	5cd3      	ldrb	r3, [r2, r3]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d111      	bne.n	80057b4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	4a0b      	ldr	r2, [pc, #44]	; (80057c0 <disk_initialize+0x48>)
 8005794:	2101      	movs	r1, #1
 8005796:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	4a09      	ldr	r2, [pc, #36]	; (80057c0 <disk_initialize+0x48>)
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	79fa      	ldrb	r2, [r7, #7]
 80057a6:	4906      	ldr	r1, [pc, #24]	; (80057c0 <disk_initialize+0x48>)
 80057a8:	440a      	add	r2, r1
 80057aa:	7a12      	ldrb	r2, [r2, #8]
 80057ac:	4610      	mov	r0, r2
 80057ae:	4798      	blx	r3
 80057b0:	4603      	mov	r3, r0
 80057b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20000270 	.word	0x20000270

080057c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80057c4:	b590      	push	{r4, r7, lr}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <disk_read+0x3c>)
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	689c      	ldr	r4, [r3, #8]
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	4a07      	ldr	r2, [pc, #28]	; (8005800 <disk_read+0x3c>)
 80057e4:	4413      	add	r3, r2
 80057e6:	7a18      	ldrb	r0, [r3, #8]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	47a0      	blx	r4
 80057f0:	4603      	mov	r3, r0
 80057f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80057f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd90      	pop	{r4, r7, pc}
 80057fe:	bf00      	nop
 8005800:	20000270 	.word	0x20000270

08005804 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <disk_write+0x3c>)
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68dc      	ldr	r4, [r3, #12]
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	4a07      	ldr	r2, [pc, #28]	; (8005840 <disk_write+0x3c>)
 8005824:	4413      	add	r3, r2
 8005826:	7a18      	ldrb	r0, [r3, #8]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	47a0      	blx	r4
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]
  return res;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd90      	pop	{r4, r7, pc}
 800583e:	bf00      	nop
 8005840:	20000270 	.word	0x20000270

08005844 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	603a      	str	r2, [r7, #0]
 800584e:	71fb      	strb	r3, [r7, #7]
 8005850:	460b      	mov	r3, r1
 8005852:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	4a09      	ldr	r2, [pc, #36]	; (800587c <disk_ioctl+0x38>)
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	79fa      	ldrb	r2, [r7, #7]
 8005862:	4906      	ldr	r1, [pc, #24]	; (800587c <disk_ioctl+0x38>)
 8005864:	440a      	add	r2, r1
 8005866:	7a10      	ldrb	r0, [r2, #8]
 8005868:	79b9      	ldrb	r1, [r7, #6]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	4798      	blx	r3
 800586e:	4603      	mov	r3, r0
 8005870:	73fb      	strb	r3, [r7, #15]
  return res;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000270 	.word	0x20000270

08005880 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005894:	e007      	b.n	80058a6 <mem_cpy+0x26>
		*d++ = *s++;
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	1c53      	adds	r3, r2, #1
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	6179      	str	r1, [r7, #20]
 80058a2:	7812      	ldrb	r2, [r2, #0]
 80058a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	1e5a      	subs	r2, r3, #1
 80058aa:	607a      	str	r2, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f2      	bne.n	8005896 <mem_cpy+0x16>
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80058be:	b480      	push	{r7}
 80058c0:	b087      	sub	sp, #28
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	60f8      	str	r0, [r7, #12]
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80058ce:	e005      	b.n	80058dc <mem_set+0x1e>
		*d++ = (BYTE)val;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	617a      	str	r2, [r7, #20]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	1e5a      	subs	r2, r3, #1
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f4      	bne.n	80058d0 <mem_set+0x12>
}
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80058f4:	b480      	push	{r7}
 80058f6:	b089      	sub	sp, #36	; 0x24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800590c:	bf00      	nop
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	1e5a      	subs	r2, r3, #1
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <mem_cmp+0x40>
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	61fa      	str	r2, [r7, #28]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	4619      	mov	r1, r3
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	61ba      	str	r2, [r7, #24]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	1acb      	subs	r3, r1, r3
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ec      	beq.n	800590e <mem_cmp+0x1a>
	return r;
 8005934:	697b      	ldr	r3, [r7, #20]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3724      	adds	r7, #36	; 0x24
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800594c:	e002      	b.n	8005954 <chk_chr+0x12>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3301      	adds	r3, #1
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <chk_chr+0x26>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	4293      	cmp	r3, r2
 8005966:	d1f2      	bne.n	800594e <chk_chr+0xc>
	return *str;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	781b      	ldrb	r3, [r3, #0]
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e03b      	b.n	8005a04 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800598c:	4931      	ldr	r1, [pc, #196]	; (8005a54 <chk_lock+0xdc>)
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	4613      	mov	r3, r2
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d02c      	beq.n	80059fa <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80059a0:	492c      	ldr	r1, [pc, #176]	; (8005a54 <chk_lock+0xdc>)
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d120      	bne.n	80059fe <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80059bc:	4925      	ldr	r1, [pc, #148]	; (8005a54 <chk_lock+0xdc>)
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4613      	mov	r3, r2
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	3304      	adds	r3, #4
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d4:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d111      	bne.n	80059fe <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80059da:	491e      	ldr	r1, [pc, #120]	; (8005a54 <chk_lock+0xdc>)
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	3308      	adds	r3, #8
 80059ea:	881a      	ldrh	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f2:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d102      	bne.n	80059fe <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80059f8:	e007      	b.n	8005a0a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80059fa:	2301      	movs	r3, #1
 80059fc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d9c0      	bls.n	800598c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d109      	bne.n	8005a24 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <chk_lock+0xa4>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d101      	bne.n	8005a20 <chk_lock+0xa8>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e013      	b.n	8005a48 <chk_lock+0xd0>
 8005a20:	2312      	movs	r3, #18
 8005a22:	e011      	b.n	8005a48 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <chk_lock+0xca>
 8005a2a:	490a      	ldr	r1, [pc, #40]	; (8005a54 <chk_lock+0xdc>)
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	330a      	adds	r3, #10
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a40:	d101      	bne.n	8005a46 <chk_lock+0xce>
 8005a42:	2310      	movs	r3, #16
 8005a44:	e000      	b.n	8005a48 <chk_lock+0xd0>
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	20000258 	.word	0x20000258

08005a58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	e002      	b.n	8005a6a <enq_lock+0x12>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3301      	adds	r3, #1
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d809      	bhi.n	8005a84 <enq_lock+0x2c>
 8005a70:	490a      	ldr	r1, [pc, #40]	; (8005a9c <enq_lock+0x44>)
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ef      	bne.n	8005a64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	20000258 	.word	0x20000258

08005aa0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e02e      	b.n	8005b0e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8005ab0:	4959      	ldr	r1, [pc, #356]	; (8005c18 <inc_lock+0x178>)
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	005b      	lsls	r3, r3, #1
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d11d      	bne.n	8005b08 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8005acc:	4952      	ldr	r1, [pc, #328]	; (8005c18 <inc_lock+0x178>)
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	440b      	add	r3, r1
 8005ada:	3304      	adds	r3, #4
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d10e      	bne.n	8005b08 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8005aea:	494b      	ldr	r1, [pc, #300]	; (8005c18 <inc_lock+0x178>)
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	3308      	adds	r3, #8
 8005afa:	881a      	ldrh	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b02:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d006      	beq.n	8005b16 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d9cd      	bls.n	8005ab0 <inc_lock+0x10>
 8005b14:	e000      	b.n	8005b18 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005b16:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d148      	bne.n	8005bb0 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	e002      	b.n	8005b2a <inc_lock+0x8a>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d809      	bhi.n	8005b44 <inc_lock+0xa4>
 8005b30:	4939      	ldr	r1, [pc, #228]	; (8005c18 <inc_lock+0x178>)
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4613      	mov	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ef      	bne.n	8005b24 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d101      	bne.n	8005b4e <inc_lock+0xae>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e05d      	b.n	8005c0a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b54:	6819      	ldr	r1, [r3, #0]
 8005b56:	4830      	ldr	r0, [pc, #192]	; (8005c18 <inc_lock+0x178>)
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4403      	add	r3, r0
 8005b64:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6c:	6899      	ldr	r1, [r3, #8]
 8005b6e:	482a      	ldr	r0, [pc, #168]	; (8005c18 <inc_lock+0x178>)
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4613      	mov	r3, r2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4403      	add	r3, r0
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b86:	88d8      	ldrh	r0, [r3, #6]
 8005b88:	4923      	ldr	r1, [pc, #140]	; (8005c18 <inc_lock+0x178>)
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	3308      	adds	r3, #8
 8005b98:	4602      	mov	r2, r0
 8005b9a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005b9c:	491e      	ldr	r1, [pc, #120]	; (8005c18 <inc_lock+0x178>)
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	330a      	adds	r3, #10
 8005bac:	2200      	movs	r2, #0
 8005bae:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00c      	beq.n	8005bd0 <inc_lock+0x130>
 8005bb6:	4918      	ldr	r1, [pc, #96]	; (8005c18 <inc_lock+0x178>)
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	330a      	adds	r3, #10
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <inc_lock+0x130>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e01c      	b.n	8005c0a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10b      	bne.n	8005bee <inc_lock+0x14e>
 8005bd6:	4910      	ldr	r1, [pc, #64]	; (8005c18 <inc_lock+0x178>)
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	330a      	adds	r3, #10
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	b299      	uxth	r1, r3
 8005bec:	e001      	b.n	8005bf2 <inc_lock+0x152>
 8005bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bf2:	4809      	ldr	r0, [pc, #36]	; (8005c18 <inc_lock+0x178>)
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4403      	add	r3, r0
 8005c00:	330a      	adds	r3, #10
 8005c02:	460a      	mov	r2, r1
 8005c04:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000258 	.word	0x20000258

08005c1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d82e      	bhi.n	8005c8e <dec_lock+0x72>
		n = Files[i].ctr;
 8005c30:	491b      	ldr	r1, [pc, #108]	; (8005ca0 <dec_lock+0x84>)
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	330a      	adds	r3, #10
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005c44:	89fb      	ldrh	r3, [r7, #14]
 8005c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c4a:	d101      	bne.n	8005c50 <dec_lock+0x34>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005c50:	89fb      	ldrh	r3, [r7, #14]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <dec_lock+0x40>
 8005c56:	89fb      	ldrh	r3, [r7, #14]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005c5c:	4910      	ldr	r1, [pc, #64]	; (8005ca0 <dec_lock+0x84>)
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4613      	mov	r3, r2
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	330a      	adds	r3, #10
 8005c6c:	89fa      	ldrh	r2, [r7, #14]
 8005c6e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005c70:	89fb      	ldrh	r3, [r7, #14]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d108      	bne.n	8005c88 <dec_lock+0x6c>
 8005c76:	490a      	ldr	r1, [pc, #40]	; (8005ca0 <dec_lock+0x84>)
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	737b      	strb	r3, [r7, #13]
 8005c8c:	e001      	b.n	8005c92 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005c8e:	2302      	movs	r3, #2
 8005c90:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005c92:	7b7b      	ldrb	r3, [r7, #13]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	20000258 	.word	0x20000258

08005ca4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e016      	b.n	8005ce0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005cb2:	4910      	ldr	r1, [pc, #64]	; (8005cf4 <clear_lock+0x50>)
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d108      	bne.n	8005cda <clear_lock+0x36>
 8005cc8:	490a      	ldr	r1, [pc, #40]	; (8005cf4 <clear_lock+0x50>)
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d9e5      	bls.n	8005cb2 <clear_lock+0xe>
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000258 	.word	0x20000258

08005cf8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0a:	791b      	ldrb	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d040      	beq.n	8005d92 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d20:	7858      	ldrb	r0, [r3, #1]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	2301      	movs	r3, #1
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	f7ff fd6c 	bl	8005804 <disk_write>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <sync_window+0x40>
			res = FR_DISK_ERR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	73fb      	strb	r3, [r7, #15]
 8005d36:	e02c      	b.n	8005d92 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3e:	2200      	movs	r2, #0
 8005d40:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	1ad2      	subs	r2, r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d21b      	bcs.n	8005d92 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d60:	78db      	ldrb	r3, [r3, #3]
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	e012      	b.n	8005d8c <sync_window+0x94>
					wsect += fs->fsize;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4413      	add	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7a:	7858      	ldrb	r0, [r3, #1]
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	2301      	movs	r3, #1
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	f7ff fd3f 	bl	8005804 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d8e9      	bhi.n	8005d66 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d01e      	beq.n	8005df6 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff ff9d 	bl	8005cf8 <sync_window>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d116      	bne.n	8005df6 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dce:	7858      	ldrb	r0, [r3, #1]
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	f7ff fcf5 	bl	80057c4 <disk_read>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005de0:	f04f 33ff 	mov.w	r3, #4294967295
 8005de4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	461a      	mov	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ff75 	bl	8005cf8 <sync_window>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e12:	7bfb      	ldrb	r3, [r7, #15]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 80ad 	bne.w	8005f74 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	f040 8098 	bne.w	8005f58 <sync_fs+0x158>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2e:	795b      	ldrb	r3, [r3, #5]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 8091 	bne.w	8005f58 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3e:	895b      	ldrh	r3, [r3, #10]
 8005e40:	461a      	mov	r2, r3
 8005e42:	2100      	movs	r1, #0
 8005e44:	f7ff fd3b 	bl	80058be <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2255      	movs	r2, #85	; 0x55
 8005e4c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	22aa      	movs	r2, #170	; 0xaa
 8005e54:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2252      	movs	r2, #82	; 0x52
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2252      	movs	r2, #82	; 0x52
 8005e62:	705a      	strb	r2, [r3, #1]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2261      	movs	r2, #97	; 0x61
 8005e68:	709a      	strb	r2, [r3, #2]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2241      	movs	r2, #65	; 0x41
 8005e6e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2272      	movs	r2, #114	; 0x72
 8005e74:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2272      	movs	r2, #114	; 0x72
 8005e7c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2241      	movs	r2, #65	; 0x41
 8005e84:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2261      	movs	r2, #97	; 0x61
 8005e8c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	0c1b      	lsrs	r3, r3, #16
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	0e1b      	lsrs	r3, r3, #24
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	0e1b      	lsrs	r3, r3, #24
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f34:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f3c:	7858      	ldrb	r0, [r3, #1]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f7ff fc5b 	bl	8005804 <disk_write>
			fs->fsi_flag = 0;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f54:	2200      	movs	r2, #0
 8005f56:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	2200      	movs	r2, #0
 8005f62:	2100      	movs	r1, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fc6d 	bl	8005844 <disk_ioctl>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	3b02      	subs	r3, #2
 8005f8c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	3b02      	subs	r3, #2
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d301      	bcc.n	8005fa2 <clust2sect+0x24>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e00c      	b.n	8005fbc <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa8:	789b      	ldrb	r3, [r3, #2]
 8005faa:	461a      	mov	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	fb03 f202 	mul.w	r2, r3, r2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	4413      	add	r3, r2
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d906      	bls.n	8005fe6 <get_fat+0x1e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <get_fat+0x24>
		val = 1;	/* Internal error */
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e0e4      	b.n	80061b6 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	f000 8098 	beq.w	8006130 <get_fat+0x168>
 8006000:	2b03      	cmp	r3, #3
 8006002:	f300 80ce 	bgt.w	80061a2 <get_fat+0x1da>
 8006006:	2b01      	cmp	r3, #1
 8006008:	d002      	beq.n	8006010 <get_fat+0x48>
 800600a:	2b02      	cmp	r3, #2
 800600c:	d05f      	beq.n	80060ce <get_fat+0x106>
 800600e:	e0c8      	b.n	80061a2 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006024:	6a1a      	ldr	r2, [r3, #32]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800602c:	895b      	ldrh	r3, [r3, #10]
 800602e:	4619      	mov	r1, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	fbb3 f3f1 	udiv	r3, r3, r1
 8006036:	4413      	add	r3, r2
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff feae 	bl	8005d9c <move_window>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 80b0 	bne.w	80061a8 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	60fa      	str	r2, [r7, #12]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006054:	8952      	ldrh	r2, [r2, #10]
 8006056:	fbb3 f1f2 	udiv	r1, r3, r2
 800605a:	fb01 f202 	mul.w	r2, r1, r2
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	5cd3      	ldrb	r3, [r2, r3]
 8006064:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006074:	895b      	ldrh	r3, [r3, #10]
 8006076:	4619      	mov	r1, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	fbb3 f3f1 	udiv	r3, r3, r1
 800607e:	4413      	add	r3, r2
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fe8a 	bl	8005d9c <move_window>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 808e 	bne.w	80061ac <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006096:	895b      	ldrh	r3, [r3, #10]
 8006098:	461a      	mov	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	fbb3 f1f2 	udiv	r1, r3, r2
 80060a0:	fb01 f202 	mul.w	r2, r1, r2
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	5cd3      	ldrb	r3, [r2, r3]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	461a      	mov	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <get_fat+0xfc>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	091b      	lsrs	r3, r3, #4
 80060c2:	e002      	b.n	80060ca <get_fat+0x102>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ca:	617b      	str	r3, [r7, #20]
			break;
 80060cc:	e073      	b.n	80061b6 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060dc:	895b      	ldrh	r3, [r3, #10]
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	4619      	mov	r1, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ea:	4413      	add	r3, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fe54 	bl	8005d9c <move_window>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d15a      	bne.n	80061b0 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006104:	8952      	ldrh	r2, [r2, #10]
 8006106:	fbb3 f1f2 	udiv	r1, r3, r2
 800610a:	fb01 f202 	mul.w	r2, r1, r2
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	4413      	add	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3301      	adds	r3, #1
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	b21a      	sxth	r2, r3
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	b21b      	sxth	r3, r3
 8006126:	4313      	orrs	r3, r2
 8006128:	b21b      	sxth	r3, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	617b      	str	r3, [r7, #20]
			break;
 800612e:	e042      	b.n	80061b6 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006136:	6a1a      	ldr	r2, [r3, #32]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613e:	895b      	ldrh	r3, [r3, #10]
 8006140:	089b      	lsrs	r3, r3, #2
 8006142:	b29b      	uxth	r3, r3
 8006144:	4619      	mov	r1, r3
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	fbb3 f3f1 	udiv	r3, r3, r1
 800614c:	4413      	add	r3, r2
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fe23 	bl	8005d9c <move_window>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d12b      	bne.n	80061b4 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006166:	8952      	ldrh	r2, [r2, #10]
 8006168:	fbb3 f1f2 	udiv	r1, r3, r2
 800616c:	fb01 f202 	mul.w	r2, r1, r2
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	4413      	add	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	3303      	adds	r3, #3
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	061a      	lsls	r2, r3, #24
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	3302      	adds	r3, #2
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	041b      	lsls	r3, r3, #16
 8006188:	4313      	orrs	r3, r2
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	3201      	adds	r2, #1
 800618e:	7812      	ldrb	r2, [r2, #0]
 8006190:	0212      	lsls	r2, r2, #8
 8006192:	4313      	orrs	r3, r2
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	4313      	orrs	r3, r2
 800619a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800619e:	617b      	str	r3, [r7, #20]
			break;
 80061a0:	e009      	b.n	80061b6 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80061a2:	2301      	movs	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e006      	b.n	80061b6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061a8:	bf00      	nop
 80061aa:	e004      	b.n	80061b6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80061b4:	bf00      	nop
		}
	}

	return val;
 80061b6:	697b      	ldr	r3, [r7, #20]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d906      	bls.n	80061e0 <put_fat+0x20>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <put_fat+0x26>
		res = FR_INT_ERR;
 80061e0:	2302      	movs	r3, #2
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e13a      	b.n	800645c <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	f000 80d0 	beq.w	8006394 <put_fat+0x1d4>
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	f300 8127 	bgt.w	8006448 <put_fat+0x288>
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d003      	beq.n	8006206 <put_fat+0x46>
 80061fe:	2b02      	cmp	r3, #2
 8006200:	f000 808f 	beq.w	8006322 <put_fat+0x162>
 8006204:	e120      	b.n	8006448 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006222:	895b      	ldrh	r3, [r3, #10]
 8006224:	4619      	mov	r1, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	fbb3 f3f1 	udiv	r3, r3, r1
 800622c:	4413      	add	r3, r2
 800622e:	4619      	mov	r1, r3
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff fdb3 	bl	8005d9c <move_window>
 8006236:	4603      	mov	r3, r0
 8006238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800623a:	7ffb      	ldrb	r3, [r7, #31]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f040 8106 	bne.w	800644e <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	617a      	str	r2, [r7, #20]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800624e:	8952      	ldrh	r2, [r2, #10]
 8006250:	fbb3 f1f2 	udiv	r1, r3, r2
 8006254:	fb01 f202 	mul.w	r2, r1, r2
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00d      	beq.n	8006286 <put_fat+0xc6>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	b25b      	sxtb	r3, r3
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	b25a      	sxtb	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	b25b      	sxtb	r3, r3
 800627e:	4313      	orrs	r3, r2
 8006280:	b25b      	sxtb	r3, r3
 8006282:	b2db      	uxtb	r3, r3
 8006284:	e001      	b.n	800628a <put_fat+0xca>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006294:	2201      	movs	r2, #1
 8006296:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062a6:	895b      	ldrh	r3, [r3, #10]
 80062a8:	4619      	mov	r1, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80062b0:	4413      	add	r3, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff fd71 	bl	8005d9c <move_window>
 80062ba:	4603      	mov	r3, r0
 80062bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062be:	7ffb      	ldrb	r3, [r7, #31]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f040 80c6 	bne.w	8006452 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062cc:	895b      	ldrh	r3, [r3, #10]
 80062ce:	461a      	mov	r2, r3
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80062d6:	fb01 f202 	mul.w	r2, r1, r2
 80062da:	1a9b      	subs	r3, r3, r2
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <put_fat+0x134>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	091b      	lsrs	r3, r3, #4
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e00e      	b.n	8006312 <put_fat+0x152>
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	f023 030f 	bic.w	r3, r3, #15
 80062fe:	b25a      	sxtb	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	b25b      	sxtb	r3, r3
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	b25b      	sxtb	r3, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	b25b      	sxtb	r3, r3
 8006310:	b2db      	uxtb	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800631c:	2201      	movs	r2, #1
 800631e:	711a      	strb	r2, [r3, #4]
			break;
 8006320:	e09c      	b.n	800645c <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006328:	6a1a      	ldr	r2, [r3, #32]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006330:	895b      	ldrh	r3, [r3, #10]
 8006332:	085b      	lsrs	r3, r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	4619      	mov	r1, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	fbb3 f3f1 	udiv	r3, r3, r1
 800633e:	4413      	add	r3, r2
 8006340:	4619      	mov	r1, r3
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fd2a 	bl	8005d9c <move_window>
 8006348:	4603      	mov	r3, r0
 800634a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800634c:	7ffb      	ldrb	r3, [r7, #31]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 8081 	bne.w	8006456 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800635e:	8952      	ldrh	r2, [r2, #10]
 8006360:	fbb3 f1f2 	udiv	r1, r3, r2
 8006364:	fb01 f202 	mul.w	r2, r1, r2
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4413      	add	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	b2da      	uxtb	r2, r3
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	b29b      	uxth	r3, r3
 800637c:	0a1b      	lsrs	r3, r3, #8
 800637e:	b29a      	uxth	r2, r3
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	3301      	adds	r3, #1
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800638e:	2201      	movs	r2, #1
 8006390:	711a      	strb	r2, [r3, #4]
			break;
 8006392:	e063      	b.n	800645c <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639a:	6a1a      	ldr	r2, [r3, #32]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063a2:	895b      	ldrh	r3, [r3, #10]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	4619      	mov	r1, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80063b0:	4413      	add	r3, r2
 80063b2:	4619      	mov	r1, r3
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fcf1 	bl	8005d9c <move_window>
 80063ba:	4603      	mov	r3, r0
 80063bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80063be:	7ffb      	ldrb	r3, [r7, #31]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d14a      	bne.n	800645a <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063ce:	8952      	ldrh	r2, [r2, #10]
 80063d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063d4:	fb01 f202 	mul.w	r2, r1, r2
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	3303      	adds	r3, #3
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	061a      	lsls	r2, r3, #24
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	3302      	adds	r3, #2
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	4313      	orrs	r3, r2
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	3201      	adds	r2, #1
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	0212      	lsls	r2, r2, #8
 80063fa:	4313      	orrs	r3, r2
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	4313      	orrs	r3, r2
 8006402:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4313      	orrs	r3, r2
 800640a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	b2da      	uxtb	r2, r3
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	b29b      	uxth	r3, r3
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	b29a      	uxth	r2, r3
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	3301      	adds	r3, #1
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	0c1a      	lsrs	r2, r3, #16
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	3302      	adds	r3, #2
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	0e1a      	lsrs	r2, r3, #24
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	3303      	adds	r3, #3
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	2201      	movs	r2, #1
 8006444:	711a      	strb	r2, [r3, #4]
			break;
 8006446:	e009      	b.n	800645c <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8006448:	2302      	movs	r3, #2
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e006      	b.n	800645c <put_fat+0x29c>
			if (res != FR_OK) break;
 800644e:	bf00      	nop
 8006450:	e004      	b.n	800645c <put_fat+0x29c>
			if (res != FR_OK) break;
 8006452:	bf00      	nop
 8006454:	e002      	b.n	800645c <put_fat+0x29c>
			if (res != FR_OK) break;
 8006456:	bf00      	nop
 8006458:	e000      	b.n	800645c <put_fat+0x29c>
			if (res != FR_OK) break;
 800645a:	bf00      	nop
		}
	}

	return res;
 800645c:	7ffb      	ldrb	r3, [r7, #31]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d906      	bls.n	8006484 <remove_chain+0x1e>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d302      	bcc.n	800648a <remove_chain+0x24>
		res = FR_INT_ERR;
 8006484:	2302      	movs	r3, #2
 8006486:	73fb      	strb	r3, [r7, #15]
 8006488:	e049      	b.n	800651e <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800648e:	e03b      	b.n	8006508 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fd98 	bl	8005fc8 <get_fat>
 8006498:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d03b      	beq.n	8006518 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d102      	bne.n	80064ac <remove_chain+0x46>
 80064a6:	2302      	movs	r3, #2
 80064a8:	73fb      	strb	r3, [r7, #15]
 80064aa:	e038      	b.n	800651e <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d102      	bne.n	80064ba <remove_chain+0x54>
 80064b4:	2301      	movs	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
 80064b8:	e031      	b.n	800651e <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80064ba:	2200      	movs	r2, #0
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff fe7e 	bl	80061c0 <put_fat>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d126      	bne.n	800651c <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d013      	beq.n	8006504 <remove_chain+0x9e>
				fs->free_clust++;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	3301      	adds	r3, #1
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064ec:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f4:	795b      	ldrb	r3, [r3, #5]
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006502:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d3bc      	bcc.n	8006490 <remove_chain+0x2a>
 8006516:	e002      	b.n	800651e <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006518:	bf00      	nop
 800651a:	e000      	b.n	800651e <remove_chain+0xb8>
			if (res != FR_OK) break;
 800651c:	bf00      	nop
		}
	}

	return res;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d111      	bne.n	800655c <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d006      	beq.n	8006556 <create_chain+0x2e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	d31d      	bcc.n	8006592 <create_chain+0x6a>
 8006556:	2301      	movs	r3, #1
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	e01a      	b.n	8006592 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff fd32 	bl	8005fc8 <get_fat>
 8006564:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d801      	bhi.n	8006570 <create_chain+0x48>
 800656c:	2301      	movs	r3, #1
 800656e:	e07f      	b.n	8006670 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d101      	bne.n	800657c <create_chain+0x54>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	e079      	b.n	8006670 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	429a      	cmp	r2, r3
 8006588:	d201      	bcs.n	800658e <create_chain+0x66>
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	e070      	b.n	8006670 <create_chain+0x148>
		scl = clst;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	3301      	adds	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d307      	bcc.n	80065ba <create_chain+0x92>
			ncl = 2;
 80065aa:	2302      	movs	r3, #2
 80065ac:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d901      	bls.n	80065ba <create_chain+0x92>
 80065b6:	2300      	movs	r3, #0
 80065b8:	e05a      	b.n	8006670 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80065ba:	6979      	ldr	r1, [r7, #20]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff fd03 	bl	8005fc8 <get_fat>
 80065c2:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00e      	beq.n	80065e8 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d002      	beq.n	80065d8 <create_chain+0xb0>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <create_chain+0xb4>
			return cs;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	e049      	b.n	8006670 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d1d8      	bne.n	8006596 <create_chain+0x6e>
 80065e4:	2300      	movs	r3, #0
 80065e6:	e043      	b.n	8006670 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80065e8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80065ea:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80065ee:	6979      	ldr	r1, [r7, #20]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fde5 	bl	80061c0 <put_fat>
 80065f6:	4603      	mov	r3, r0
 80065f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <create_chain+0xec>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d006      	beq.n	8006614 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fdd8 	bl	80061c0 <put_fat>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d121      	bne.n	800665e <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006620:	461a      	mov	r2, r3
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d01c      	beq.n	800666e <create_chain+0x146>
			fs->free_clust--;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	3b01      	subs	r3, #1
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006644:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664c:	795b      	ldrb	r3, [r3, #5]
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	b2da      	uxtb	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665a:	715a      	strb	r2, [r3, #5]
 800665c:	e007      	b.n	800666e <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d102      	bne.n	800666a <create_chain+0x142>
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
 8006668:	e000      	b.n	800666c <create_chain+0x144>
 800666a:	2301      	movs	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800666e:	697b      	ldr	r3, [r7, #20]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	3304      	adds	r3, #4
 800668c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800669a:	895b      	ldrh	r3, [r3, #10]
 800669c:	461a      	mov	r2, r3
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066b0:	7892      	ldrb	r2, [r2, #2]
 80066b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	613a      	str	r2, [r7, #16]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d101      	bne.n	80066cc <clmt_clust+0x54>
 80066c8:	2300      	movs	r3, #0
 80066ca:	e010      	b.n	80066ee <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d307      	bcc.n	80066e4 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	3304      	adds	r3, #4
 80066e0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80066e2:	e7e9      	b.n	80066b8 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80066e4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	4413      	add	r3, r2
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d009      	beq.n	8006734 <dir_sdi+0x3a>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	429a      	cmp	r2, r3
 8006732:	d301      	bcc.n	8006738 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8006734:	2302      	movs	r3, #2
 8006736:	e0aa      	b.n	800688e <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d110      	bne.n	8006760 <dir_sdi+0x66>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b03      	cmp	r3, #3
 800674e:	d107      	bne.n	8006760 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d115      	bne.n	8006792 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006772:	891b      	ldrh	r3, [r3, #8]
 8006774:	461a      	mov	r2, r3
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	4293      	cmp	r3, r2
 800677a:	d301      	bcc.n	8006780 <dir_sdi+0x86>
			return FR_INT_ERR;
 800677c:	2302      	movs	r3, #2
 800677e:	e086      	b.n	800688e <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	e043      	b.n	800681a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679e:	895b      	ldrh	r3, [r3, #10]
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b2:	789b      	ldrb	r3, [r3, #2]
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80067ba:	e021      	b.n	8006800 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6979      	ldr	r1, [r7, #20]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff fbfe 	bl	8005fc8 <get_fat>
 80067cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d101      	bne.n	80067da <dir_sdi+0xe0>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e059      	b.n	800688e <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d909      	bls.n	80067f4 <dir_sdi+0xfa>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d301      	bcc.n	80067f8 <dir_sdi+0xfe>
				return FR_INT_ERR;
 80067f4:	2302      	movs	r3, #2
 80067f6:	e04a      	b.n	800688e <dir_sdi+0x194>
			idx -= ic;
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	d2d9      	bcs.n	80067bc <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fbb3 	bl	8005f7e <clust2sect>
 8006818:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006820:	461a      	mov	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <dir_sdi+0x136>
 800682c:	2302      	movs	r3, #2
 800682e:	e02e      	b.n	800688e <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800683c:	895b      	ldrh	r3, [r3, #10]
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	b29b      	uxth	r3, r3
 8006842:	461a      	mov	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	fbb3 f2f2 	udiv	r2, r3, r2
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	4413      	add	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006854:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686c:	895b      	ldrh	r3, [r3, #10]
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	b29b      	uxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	fbb3 f1f2 	udiv	r1, r3, r2
 800687a:	fb01 f202 	mul.w	r2, r1, r2
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	015b      	lsls	r3, r3, #5
 8006882:	4403      	add	r3, r0
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800688a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006896:	b590      	push	{r4, r7, lr}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a6:	88db      	ldrh	r3, [r3, #6]
 80068a8:	3301      	adds	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <dir_next+0x2a>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <dir_next+0x2e>
		return FR_NO_FILE;
 80068c0:	2304      	movs	r3, #4
 80068c2:	e12e      	b.n	8006b22 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d0:	895b      	ldrh	r3, [r3, #10]
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	461a      	mov	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	fbb3 f1f2 	udiv	r1, r3, r2
 80068de:	fb01 f202 	mul.w	r2, r1, r2
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 80fa 	bne.w	8006ade <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	3301      	adds	r3, #1
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068fa:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10d      	bne.n	8006924 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006914:	891b      	ldrh	r3, [r3, #8]
 8006916:	461a      	mov	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4293      	cmp	r3, r2
 800691c:	f0c0 80df 	bcc.w	8006ade <dir_next+0x248>
				return FR_NO_FILE;
 8006920:	2304      	movs	r3, #4
 8006922:	e0fe      	b.n	8006b22 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006930:	895b      	ldrh	r3, [r3, #10]
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	b29b      	uxth	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	fbb3 f3f2 	udiv	r3, r3, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800694a:	7892      	ldrb	r2, [r2, #2]
 800694c:	3a01      	subs	r2, #1
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	f040 80c4 	bne.w	8006ade <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f7ff fb2d 	bl	8005fc8 <get_fat>
 800696e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d801      	bhi.n	800697a <dir_next+0xe4>
 8006976:	2302      	movs	r3, #2
 8006978:	e0d3      	b.n	8006b22 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d101      	bne.n	8006986 <dir_next+0xf0>
 8006982:	2301      	movs	r3, #1
 8006984:	e0cd      	b.n	8006b22 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	429a      	cmp	r2, r3
 8006998:	f0c0 808e 	bcc.w	8006ab8 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <dir_next+0x110>
 80069a2:	2304      	movs	r3, #4
 80069a4:	e0bd      	b.n	8006b22 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f7ff fdb5 	bl	8006528 <create_chain>
 80069be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <dir_next+0x134>
 80069c6:	2307      	movs	r3, #7
 80069c8:	e0ab      	b.n	8006b22 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <dir_next+0x13e>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e0a6      	b.n	8006b22 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d101      	bne.n	80069e0 <dir_next+0x14a>
 80069dc:	2301      	movs	r3, #1
 80069de:	e0a0      	b.n	8006b22 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff f985 	bl	8005cf8 <sync_window>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <dir_next+0x162>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e094      	b.n	8006b22 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0e:	895b      	ldrh	r3, [r3, #10]
 8006a10:	461a      	mov	r2, r3
 8006a12:	2100      	movs	r1, #0
 8006a14:	f7fe ff53 	bl	80058be <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a26:	681c      	ldr	r4, [r3, #0]
 8006a28:	6979      	ldr	r1, [r7, #20]
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	f7ff faa7 	bl	8005f7e <clust2sect>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006a38:	2300      	movs	r3, #0
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	e021      	b.n	8006a82 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff f94e 	bl	8005cf8 <sync_window>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <dir_next+0x1d0>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e05d      	b.n	8006b22 <dir_next+0x28c>
						dp->fs->winsect++;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8006a72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a74:	3201      	adds	r2, #1
 8006a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	613b      	str	r3, [r7, #16]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a8e:	789b      	ldrb	r3, [r3, #2]
 8006a90:	461a      	mov	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d3d2      	bcc.n	8006a3e <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1acb      	subs	r3, r1, r3
 8006ab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006abe:	461a      	mov	r2, r3
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6979      	ldr	r1, [r7, #20]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff fa55 	bl	8005f7e <clust2sect>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006adc:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae8:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b00:	895b      	ldrh	r3, [r3, #10]
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b0e:	fb01 f202 	mul.w	r2, r1, r2
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	015b      	lsls	r3, r3, #5
 8006b16:	4403      	add	r3, r0
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b1e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd90      	pop	{r4, r7, pc}

08006b2a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006b34:	2100      	movs	r1, #0
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fddf 	bl	80066fa <dir_sdi>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d135      	bne.n	8006bb2 <dir_alloc+0x88>
		n = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7ff f91d 	bl	8005d9c <move_window>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d121      	bne.n	8006bb0 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2be5      	cmp	r3, #229	; 0xe5
 8006b78:	d006      	beq.n	8006b88 <dir_alloc+0x5e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d107      	bne.n	8006b98 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d102      	bne.n	8006b9c <dir_alloc+0x72>
 8006b96:	e00c      	b.n	8006bb2 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff fe79 	bl	8006896 <dir_next>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0cd      	beq.n	8006b4a <dir_alloc+0x20>
 8006bae:	e000      	b.n	8006bb2 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8006bb0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d101      	bne.n	8006bbc <dir_alloc+0x92>
 8006bb8:	2307      	movs	r3, #7
 8006bba:	73fb      	strb	r3, [r7, #15]
	return res;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	331b      	adds	r3, #27
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	b21a      	sxth	r2, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	331a      	adds	r3, #26
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	b21b      	sxth	r3, r3
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b21b      	sxth	r3, r3
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d10f      	bne.n	8006c16 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	3315      	adds	r3, #21
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	b21a      	sxth	r2, r3
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	3314      	adds	r3, #20
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b21b      	sxth	r3, r3
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b21b      	sxth	r3, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	041b      	lsls	r3, r3, #16
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

	return cl;
 8006c16:	68fb      	ldr	r3, [r7, #12]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	331a      	adds	r3, #26
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	0a1b      	lsrs	r3, r3, #8
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	331b      	adds	r3, #27
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	0c1a      	lsrs	r2, r3, #16
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3314      	adds	r3, #20
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	0c1b      	lsrs	r3, r3, #16
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3315      	adds	r3, #21
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c86:	1e5a      	subs	r2, r3, #1
 8006c88:	4613      	mov	r3, r2
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006c94:	2300      	movs	r3, #0
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006c9c:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <cmp_lfn+0xd8>)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	4413      	add	r3, r2
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	021b      	lsls	r3, r3, #8
 8006cae:	b21a      	sxth	r2, r3
 8006cb0:	4926      	ldr	r1, [pc, #152]	; (8006d4c <cmp_lfn+0xd8>)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	440b      	add	r3, r1
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	440b      	add	r3, r1
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	b21b      	sxth	r3, r3
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	b21b      	sxth	r3, r3
 8006cc6:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006cc8:	89fb      	ldrh	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d019      	beq.n	8006d02 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006cce:	89bb      	ldrh	r3, [r7, #12]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f002 fc61 	bl	8009598 <ff_wtoupper>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2bfe      	cmp	r3, #254	; 0xfe
 8006cde:	d80e      	bhi.n	8006cfe <cmp_lfn+0x8a>
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	617a      	str	r2, [r7, #20]
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f002 fc52 	bl	8009598 <ff_wtoupper>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	89fb      	ldrh	r3, [r7, #14]
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d008      	beq.n	8006d10 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e01f      	b.n	8006d42 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006d02:	89bb      	ldrh	r3, [r7, #12]
 8006d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d001      	beq.n	8006d10 <cmp_lfn+0x9c>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e018      	b.n	8006d42 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3301      	adds	r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2b0c      	cmp	r3, #12
 8006d1a:	d9bf      	bls.n	8006c9c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <cmp_lfn+0xcc>
 8006d28:	89fb      	ldrh	r3, [r7, #14]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d008      	beq.n	8006d40 <cmp_lfn+0xcc>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4413      	add	r3, r2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <cmp_lfn+0xcc>
		return 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e000      	b.n	8006d42 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006d40:	2301      	movs	r3, #1
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	0800a3fc 	.word	0x0800a3fc

08006d50 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	460b      	mov	r3, r1
 8006d60:	71fb      	strb	r3, [r7, #7]
 8006d62:	4613      	mov	r3, r2
 8006d64:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	330d      	adds	r3, #13
 8006d6a:	79ba      	ldrb	r2, [r7, #6]
 8006d6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	330b      	adds	r3, #11
 8006d72:	220f      	movs	r2, #15
 8006d74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	331a      	adds	r3, #26
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	331b      	adds	r3, #27
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	1e5a      	subs	r2, r3, #1
 8006d92:	4613      	mov	r3, r2
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	82fb      	strh	r3, [r7, #22]
 8006da2:	2300      	movs	r3, #0
 8006da4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006da6:	8afb      	ldrh	r3, [r7, #22]
 8006da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d007      	beq.n	8006dc0 <fit_lfn+0x70>
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	61fa      	str	r2, [r7, #28]
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <fit_lfn+0xe8>)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4413      	add	r3, r2
 8006dce:	8afa      	ldrh	r2, [r7, #22]
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	8afb      	ldrh	r3, [r7, #22]
 8006dd6:	0a1b      	lsrs	r3, r3, #8
 8006dd8:	b299      	uxth	r1, r3
 8006dda:	4a17      	ldr	r2, [pc, #92]	; (8006e38 <fit_lfn+0xe8>)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	4413      	add	r3, r2
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	3301      	adds	r3, #1
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	4413      	add	r3, r2
 8006de8:	b2ca      	uxtb	r2, r1
 8006dea:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006dec:	8afb      	ldrh	r3, [r7, #22]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <fit_lfn+0xa8>
 8006df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006df6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b0c      	cmp	r3, #12
 8006e02:	d9d0      	bls.n	8006da6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006e04:	8afb      	ldrh	r3, [r7, #22]
 8006e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d006      	beq.n	8006e1c <fit_lfn+0xcc>
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d103      	bne.n	8006e24 <fit_lfn+0xd4>
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e22:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	79fa      	ldrb	r2, [r7, #7]
 8006e28:	701a      	strb	r2, [r3, #0]
}
 8006e2a:	bf00      	nop
 8006e2c:	3724      	adds	r7, #36	; 0x24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	0800a3fc 	.word	0x0800a3fc

08006e3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08c      	sub	sp, #48	; 0x30
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006e4a:	220b      	movs	r2, #11
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7fe fd16 	bl	8005880 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b05      	cmp	r3, #5
 8006e58:	d92b      	bls.n	8006eb2 <gen_numname+0x76>
		sr = seq;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006e5e:	e022      	b.n	8006ea6 <gen_numname+0x6a>
			wc = *lfn++;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	1c9a      	adds	r2, r3, #2
 8006e64:	607a      	str	r2, [r7, #4]
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6e:	e017      	b.n	8006ea0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	005a      	lsls	r2, r3, #1
 8006e74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006e7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e80:	085b      	lsrs	r3, r3, #1
 8006e82:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d005      	beq.n	8006e9a <gen_numname+0x5e>
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006e94:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006e98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d9e4      	bls.n	8006e70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1d8      	bne.n	8006e60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006eb2:	2307      	movs	r3, #7
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	3330      	adds	r3, #48	; 0x30
 8006ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006eca:	2b39      	cmp	r3, #57	; 0x39
 8006ecc:	d904      	bls.n	8006ed8 <gen_numname+0x9c>
 8006ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ed2:	3307      	adds	r3, #7
 8006ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eda:	1e5a      	subs	r2, r3, #1
 8006edc:	62ba      	str	r2, [r7, #40]	; 0x28
 8006ede:	3330      	adds	r3, #48	; 0x30
 8006ee0:	443b      	add	r3, r7
 8006ee2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006ee6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	091b      	lsrs	r3, r3, #4
 8006eee:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1df      	bne.n	8006eb6 <gen_numname+0x7a>
	ns[i] = '~';
 8006ef6:	f107 0214 	add.w	r2, r7, #20
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	4413      	add	r3, r2
 8006efe:	227e      	movs	r2, #126	; 0x7e
 8006f00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006f02:	2300      	movs	r3, #0
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	e002      	b.n	8006f0e <gen_numname+0xd2>
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d205      	bcs.n	8006f22 <gen_numname+0xe6>
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	4413      	add	r3, r2
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d1f2      	bne.n	8006f08 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	2b07      	cmp	r3, #7
 8006f26:	d807      	bhi.n	8006f38 <gen_numname+0xfc>
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f2e:	3330      	adds	r3, #48	; 0x30
 8006f30:	443b      	add	r3, r7
 8006f32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006f36:	e000      	b.n	8006f3a <gen_numname+0xfe>
 8006f38:	2120      	movs	r1, #32
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	627a      	str	r2, [r7, #36]	; 0x24
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	460a      	mov	r2, r1
 8006f46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	2b07      	cmp	r3, #7
 8006f4c:	d9e9      	bls.n	8006f22 <gen_numname+0xe6>
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	3730      	adds	r7, #48	; 0x30
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006f64:	230b      	movs	r3, #11
 8006f66:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	0852      	lsrs	r2, r2, #1
 8006f6e:	01db      	lsls	r3, r3, #7
 8006f70:	4313      	orrs	r3, r2
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	1c59      	adds	r1, r3, #1
 8006f78:	6079      	str	r1, [r7, #4]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	73fb      	strb	r3, [r7, #15]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1ed      	bne.n	8006f68 <sum_sfn+0x10>
	return sum;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b086      	sub	sp, #24
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fba8 	bl	80066fa <dir_sdi>
 8006faa:	4603      	mov	r3, r0
 8006fac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <dir_find+0x1e>
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	e0b8      	b.n	800712a <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006fb8:	23ff      	movs	r3, #255	; 0xff
 8006fba:	753b      	strb	r3, [r7, #20]
 8006fbc:	7d3b      	ldrb	r3, [r7, #20]
 8006fbe:	757b      	strb	r3, [r7, #21]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fca:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f7fe fedc 	bl	8005d9c <move_window>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f040 8097 	bne.w	800711e <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007000:	7dbb      	ldrb	r3, [r7, #22]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d102      	bne.n	800700c <dir_find+0x72>
 8007006:	2304      	movs	r3, #4
 8007008:	75fb      	strb	r3, [r7, #23]
 800700a:	e08d      	b.n	8007128 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	330b      	adds	r3, #11
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007016:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007018:	7dbb      	ldrb	r3, [r7, #22]
 800701a:	2be5      	cmp	r3, #229	; 0xe5
 800701c:	d007      	beq.n	800702e <dir_find+0x94>
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00b      	beq.n	8007040 <dir_find+0xa6>
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b0f      	cmp	r3, #15
 800702c:	d008      	beq.n	8007040 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800702e:	23ff      	movs	r3, #255	; 0xff
 8007030:	757b      	strb	r3, [r7, #21]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800703c:	849a      	strh	r2, [r3, #36]	; 0x24
 800703e:	e063      	b.n	8007108 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b0f      	cmp	r3, #15
 8007044:	d137      	bne.n	80070b6 <dir_find+0x11c>
				if (dp->lfn) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d05a      	beq.n	8007108 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007052:	7dbb      	ldrb	r3, [r7, #22]
 8007054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d010      	beq.n	800707e <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	7b5b      	ldrb	r3, [r3, #13]
 8007060:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8007062:	7dbb      	ldrb	r3, [r7, #22]
 8007064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007068:	75bb      	strb	r3, [r7, #22]
 800706a:	7dbb      	ldrb	r3, [r7, #22]
 800706c:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007074:	88da      	ldrh	r2, [r3, #6]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707c:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800707e:	7dba      	ldrb	r2, [r7, #22]
 8007080:	7d7b      	ldrb	r3, [r7, #21]
 8007082:	429a      	cmp	r2, r3
 8007084:	d114      	bne.n	80070b0 <dir_find+0x116>
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	330d      	adds	r3, #13
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	7d3a      	ldrb	r2, [r7, #20]
 800708e:	429a      	cmp	r2, r3
 8007090:	d10e      	bne.n	80070b0 <dir_find+0x116>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	6939      	ldr	r1, [r7, #16]
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff fde9 	bl	8006c74 <cmp_lfn>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <dir_find+0x116>
 80070a8:	7d7b      	ldrb	r3, [r7, #21]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	e000      	b.n	80070b2 <dir_find+0x118>
 80070b0:	23ff      	movs	r3, #255	; 0xff
 80070b2:	757b      	strb	r3, [r7, #21]
 80070b4:	e028      	b.n	8007108 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80070b6:	7d7b      	ldrb	r3, [r7, #21]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d107      	bne.n	80070cc <dir_find+0x132>
 80070bc:	6938      	ldr	r0, [r7, #16]
 80070be:	f7ff ff4b 	bl	8006f58 <sum_sfn>
 80070c2:	4603      	mov	r3, r0
 80070c4:	461a      	mov	r2, r3
 80070c6:	7d3b      	ldrb	r3, [r7, #20]
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d02a      	beq.n	8007122 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	330b      	adds	r3, #11
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10b      	bne.n	80070f8 <dir_find+0x15e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	220b      	movs	r2, #11
 80070ea:	4619      	mov	r1, r3
 80070ec:	6938      	ldr	r0, [r7, #16]
 80070ee:	f7fe fc01 	bl	80058f4 <mem_cmp>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d016      	beq.n	8007126 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80070f8:	23ff      	movs	r3, #255	; 0xff
 80070fa:	757b      	strb	r3, [r7, #21]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007106:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007108:	2100      	movs	r1, #0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7ff fbc3 	bl	8006896 <dir_next>
 8007110:	4603      	mov	r3, r0
 8007112:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f43f af58 	beq.w	8006fcc <dir_find+0x32>
 800711c:	e004      	b.n	8007128 <dir_find+0x18e>
		if (res != FR_OK) break;
 800711e:	bf00      	nop
 8007120:	e002      	b.n	8007128 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007126:	bf00      	nop

	return res;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08c      	sub	sp, #48	; 0x30
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	623b      	str	r3, [r7, #32]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8007150:	f107 030c 	add.w	r3, r7, #12
 8007154:	220c      	movs	r2, #12
 8007156:	6a39      	ldr	r1, [r7, #32]
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fb91 	bl	8005880 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800715e:	7dfb      	ldrb	r3, [r7, #23]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d03b      	beq.n	80071e0 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	330b      	adds	r3, #11
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007176:	461a      	mov	r2, r3
 8007178:	2300      	movs	r3, #0
 800717a:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800717c:	2301      	movs	r3, #1
 800717e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007180:	e013      	b.n	80071aa <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8007182:	f107 010c 	add.w	r1, r7, #12
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	6a38      	ldr	r0, [r7, #32]
 800718c:	f7ff fe56 	bl	8006e3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff ff02 	bl	8006f9a <dir_find>
 8007196:	4603      	mov	r3, r0
 8007198:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800719c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d106      	bne.n	80071b2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	3301      	adds	r3, #1
 80071a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ac:	2b63      	cmp	r3, #99	; 0x63
 80071ae:	d9e8      	bls.n	8007182 <dir_register+0x4e>
 80071b0:	e000      	b.n	80071b4 <dir_register+0x80>
			if (res != FR_OK) break;
 80071b2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	2b64      	cmp	r3, #100	; 0x64
 80071b8:	d101      	bne.n	80071be <dir_register+0x8a>
 80071ba:	2307      	movs	r3, #7
 80071bc:	e0d8      	b.n	8007370 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80071be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d002      	beq.n	80071cc <dir_register+0x98>
 80071c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071ca:	e0d1      	b.n	8007370 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	330b      	adds	r3, #11
 80071d0:	7dfa      	ldrb	r2, [r7, #23]
 80071d2:	701a      	strb	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071da:	461a      	mov	r2, r3
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d014      	beq.n	8007214 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 80071ea:	2300      	movs	r3, #0
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ee:	e002      	b.n	80071f6 <dir_register+0xc2>
 80071f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f2:	3301      	adds	r3, #1
 80071f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1f5      	bne.n	80071f0 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8007204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007206:	3319      	adds	r3, #25
 8007208:	4a5b      	ldr	r2, [pc, #364]	; (8007378 <dir_register+0x244>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	089b      	lsrs	r3, r3, #2
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
 8007212:	e001      	b.n	8007218 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007214:	2301      	movs	r3, #1
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fc85 	bl	8006b2a <dir_alloc>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800722a:	2b00      	cmp	r3, #0
 800722c:	d15b      	bne.n	80072e6 <dir_register+0x1b2>
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	3b01      	subs	r3, #1
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	d055      	beq.n	80072e6 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007240:	88db      	ldrh	r3, [r3, #6]
 8007242:	461a      	mov	r2, r3
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fa55 	bl	80066fa <dir_sdi>
 8007250:	4603      	mov	r3, r0
 8007252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800725a:	2b00      	cmp	r3, #0
 800725c:	d143      	bne.n	80072e6 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	4618      	mov	r0, r3
 8007268:	f7ff fe76 	bl	8006f58 <sum_sfn>
 800726c:	4603      	mov	r3, r0
 800726e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	4619      	mov	r1, r3
 8007282:	4610      	mov	r0, r2
 8007284:	f7fe fd8a 	bl	8005d9c <move_window>
 8007288:	4603      	mov	r3, r0
 800728a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800728e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007292:	2b00      	cmp	r3, #0
 8007294:	d126      	bne.n	80072e4 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729c:	6a18      	ldr	r0, [r3, #32]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a4:	6959      	ldr	r1, [r3, #20]
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	7efb      	ldrb	r3, [r7, #27]
 80072ac:	f7ff fd50 	bl	8006d50 <fit_lfn>
				dp->fs->wflag = 1;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072bc:	2201      	movs	r2, #1
 80072be:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 80072c0:	2100      	movs	r1, #0
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fae7 	bl	8006896 <dir_next>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80072ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d107      	bne.n	80072e6 <dir_register+0x1b2>
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	3b01      	subs	r3, #1
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1c6      	bne.n	8007270 <dir_register+0x13c>
 80072e2:	e000      	b.n	80072e6 <dir_register+0x1b2>
				if (res != FR_OK) break;
 80072e4:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80072e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d13e      	bne.n	800736c <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	4619      	mov	r1, r3
 8007300:	4610      	mov	r0, r2
 8007302:	f7fe fd4b 	bl	8005d9c <move_window>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800730c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007310:	2b00      	cmp	r3, #0
 8007312:	d12b      	bne.n	800736c <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	2220      	movs	r2, #32
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe facc 	bl	80058be <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732c:	6958      	ldr	r0, [r3, #20]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	220b      	movs	r2, #11
 8007338:	4619      	mov	r1, r3
 800733a:	f7fe faa1 	bl	8005880 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	330b      	adds	r3, #11
 8007348:	781a      	ldrb	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	330c      	adds	r3, #12
 8007354:	f002 0218 	and.w	r2, r2, #24
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007368:	2201      	movs	r2, #1
 800736a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800736c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007370:	4618      	mov	r0, r3
 8007372:	3730      	adds	r7, #48	; 0x30
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	4ec4ec4f 	.word	0x4ec4ec4f

0800737c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	e002      	b.n	8007394 <create_name+0x18>
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3301      	adds	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b2f      	cmp	r3, #47	; 0x2f
 800739a:	d0f8      	beq.n	800738e <create_name+0x12>
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b5c      	cmp	r3, #92	; 0x5c
 80073a2:	d0f4      	beq.n	800738e <create_name+0x12>
	lfn = dp->lfn;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	61ba      	str	r2, [r7, #24]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80073c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073c6:	2b1f      	cmp	r3, #31
 80073c8:	d92f      	bls.n	800742a <create_name+0xae>
 80073ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073cc:	2b2f      	cmp	r3, #47	; 0x2f
 80073ce:	d02c      	beq.n	800742a <create_name+0xae>
 80073d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073d2:	2b5c      	cmp	r3, #92	; 0x5c
 80073d4:	d029      	beq.n	800742a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2bfe      	cmp	r3, #254	; 0xfe
 80073da:	d901      	bls.n	80073e0 <create_name+0x64>
			return FR_INVALID_NAME;
 80073dc:	2306      	movs	r3, #6
 80073de:	e186      	b.n	80076ee <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 80073e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80073e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e8:	2101      	movs	r1, #1
 80073ea:	4618      	mov	r0, r3
 80073ec:	f002 f898 	bl	8009520 <ff_convert>
 80073f0:	4603      	mov	r3, r0
 80073f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80073f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <create_name+0x82>
 80073fa:	2306      	movs	r3, #6
 80073fc:	e177      	b.n	80076ee <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80073fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007400:	2b7f      	cmp	r3, #127	; 0x7f
 8007402:	d809      	bhi.n	8007418 <create_name+0x9c>
 8007404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007406:	4619      	mov	r1, r3
 8007408:	488e      	ldr	r0, [pc, #568]	; (8007644 <create_name+0x2c8>)
 800740a:	f7fe fa9a 	bl	8005942 <chk_chr>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <create_name+0x9c>
			return FR_INVALID_NAME;
 8007414:	2306      	movs	r3, #6
 8007416:	e16a      	b.n	80076ee <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	617a      	str	r2, [r7, #20]
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007426:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007428:	e7c5      	b.n	80073b6 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	441a      	add	r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007436:	2b1f      	cmp	r3, #31
 8007438:	d801      	bhi.n	800743e <create_name+0xc2>
 800743a:	2304      	movs	r3, #4
 800743c:	e000      	b.n	8007440 <create_name+0xc4>
 800743e:	2300      	movs	r3, #0
 8007440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8007444:	e011      	b.n	800746a <create_name+0xee>
		w = lfn[di - 1];
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800744c:	3b01      	subs	r3, #1
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800745a:	2b20      	cmp	r3, #32
 800745c:	d002      	beq.n	8007464 <create_name+0xe8>
 800745e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007460:	2b2e      	cmp	r3, #46	; 0x2e
 8007462:	d106      	bne.n	8007472 <create_name+0xf6>
		di--;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	3b01      	subs	r3, #1
 8007468:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1ea      	bne.n	8007446 <create_name+0xca>
 8007470:	e000      	b.n	8007474 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8007472:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <create_name+0x102>
 800747a:	2306      	movs	r3, #6
 800747c:	e137      	b.n	80076ee <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4413      	add	r3, r2
 8007486:	2200      	movs	r2, #0
 8007488:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	220b      	movs	r2, #11
 8007494:	2120      	movs	r1, #32
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fa11 	bl	80058be <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800749c:	2300      	movs	r3, #0
 800749e:	61bb      	str	r3, [r7, #24]
 80074a0:	e002      	b.n	80074a8 <create_name+0x12c>
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	3301      	adds	r3, #1
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	4413      	add	r3, r2
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d0f5      	beq.n	80074a2 <create_name+0x126>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	2b2e      	cmp	r3, #46	; 0x2e
 80074c2:	d0ee      	beq.n	80074a2 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <create_name+0x162>
 80074ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ce:	f043 0303 	orr.w	r3, r3, #3
 80074d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80074d6:	e002      	b.n	80074de <create_name+0x162>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	3b01      	subs	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d009      	beq.n	80074f8 <create_name+0x17c>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80074ea:	3b01      	subs	r3, #1
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	2b2e      	cmp	r3, #46	; 0x2e
 80074f6:	d1ef      	bne.n	80074d8 <create_name+0x15c>

	b = i = 0; ni = 8;
 80074f8:	2300      	movs	r3, #0
 80074fa:	623b      	str	r3, [r7, #32]
 80074fc:	2300      	movs	r3, #0
 80074fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007502:	2308      	movs	r3, #8
 8007504:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	61ba      	str	r2, [r7, #24]
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007516:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 8091 	beq.w	8007640 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800751e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007520:	2b20      	cmp	r3, #32
 8007522:	d006      	beq.n	8007532 <create_name+0x1b6>
 8007524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007526:	2b2e      	cmp	r3, #46	; 0x2e
 8007528:	d10a      	bne.n	8007540 <create_name+0x1c4>
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	429a      	cmp	r2, r3
 8007530:	d006      	beq.n	8007540 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8007532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007536:	f043 0303 	orr.w	r3, r3, #3
 800753a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800753e:	e07e      	b.n	800763e <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	429a      	cmp	r2, r3
 8007546:	d203      	bcs.n	8007550 <create_name+0x1d4>
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	429a      	cmp	r2, r3
 800754e:	d123      	bne.n	8007598 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	2b0b      	cmp	r3, #11
 8007554:	d106      	bne.n	8007564 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8007556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755a:	f043 0303 	orr.w	r3, r3, #3
 800755e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007562:	e076      	b.n	8007652 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	429a      	cmp	r2, r3
 800756a:	d005      	beq.n	8007578 <create_name+0x1fc>
 800756c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007570:	f043 0303 	orr.w	r3, r3, #3
 8007574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	429a      	cmp	r2, r3
 800757e:	d867      	bhi.n	8007650 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	61bb      	str	r3, [r7, #24]
 8007584:	2308      	movs	r3, #8
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	230b      	movs	r3, #11
 800758a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800758c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007596:	e052      	b.n	800763e <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800759a:	2b7f      	cmp	r3, #127	; 0x7f
 800759c:	d914      	bls.n	80075c8 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800759e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 ffbc 	bl	8009520 <ff_convert>
 80075a8:	4603      	mov	r3, r0
 80075aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80075ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <create_name+0x240>
 80075b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b4:	3b80      	subs	r3, #128	; 0x80
 80075b6:	4a24      	ldr	r2, [pc, #144]	; (8007648 <create_name+0x2cc>)
 80075b8:	5cd3      	ldrb	r3, [r2, r3]
 80075ba:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80075bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075c0:	f043 0302 	orr.w	r3, r3, #2
 80075c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80075c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <create_name+0x262>
 80075ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075d0:	4619      	mov	r1, r3
 80075d2:	481e      	ldr	r0, [pc, #120]	; (800764c <create_name+0x2d0>)
 80075d4:	f7fe f9b5 	bl	8005942 <chk_chr>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d008      	beq.n	80075f0 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80075de:	235f      	movs	r3, #95	; 0x5f
 80075e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075e6:	f043 0303 	orr.w	r3, r3, #3
 80075ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075ee:	e01b      	b.n	8007628 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80075f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d909      	bls.n	800760a <create_name+0x28e>
 80075f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f8:	2b5a      	cmp	r3, #90	; 0x5a
 80075fa:	d806      	bhi.n	800760a <create_name+0x28e>
					b |= 2;
 80075fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007600:	f043 0302 	orr.w	r3, r3, #2
 8007604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007608:	e00e      	b.n	8007628 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800760a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800760c:	2b60      	cmp	r3, #96	; 0x60
 800760e:	d90b      	bls.n	8007628 <create_name+0x2ac>
 8007610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007612:	2b7a      	cmp	r3, #122	; 0x7a
 8007614:	d808      	bhi.n	8007628 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8007616:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007624:	3b20      	subs	r3, #32
 8007626:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	1c59      	adds	r1, r3, #1
 8007634:	6239      	str	r1, [r7, #32]
 8007636:	4413      	add	r3, r2
 8007638:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800763e:	e762      	b.n	8007506 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8007640:	bf00      	nop
 8007642:	e006      	b.n	8007652 <create_name+0x2d6>
 8007644:	0800a2fc 	.word	0x0800a2fc
 8007648:	0800a37c 	.word	0x0800a37c
 800764c:	0800a308 	.word	0x0800a308
			if (si > di) break;			/* No extension */
 8007650:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2be5      	cmp	r3, #229	; 0xe5
 800765e:	d105      	bne.n	800766c <create_name+0x2f0>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2205      	movs	r2, #5
 800766a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2b08      	cmp	r3, #8
 8007670:	d104      	bne.n	800767c <create_name+0x300>
 8007672:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800767c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007680:	f003 030c 	and.w	r3, r3, #12
 8007684:	2b0c      	cmp	r3, #12
 8007686:	d005      	beq.n	8007694 <create_name+0x318>
 8007688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800768c:	f003 0303 	and.w	r3, r3, #3
 8007690:	2b03      	cmp	r3, #3
 8007692:	d105      	bne.n	80076a0 <create_name+0x324>
		cf |= NS_LFN;
 8007694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007698:	f043 0302 	orr.w	r3, r3, #2
 800769c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80076a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d117      	bne.n	80076dc <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80076ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d105      	bne.n	80076c4 <create_name+0x348>
 80076b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076bc:	f043 0310 	orr.w	r3, r3, #16
 80076c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80076c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076c8:	f003 030c 	and.w	r3, r3, #12
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d105      	bne.n	80076dc <create_name+0x360>
 80076d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076d4:	f043 0308 	orr.w	r3, r3, #8
 80076d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	330b      	adds	r3, #11
 80076e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80076ea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80076ec:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3728      	adds	r7, #40	; 0x28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop

080076f8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b2f      	cmp	r3, #47	; 0x2f
 8007708:	d003      	beq.n	8007712 <follow_path+0x1a>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b5c      	cmp	r3, #92	; 0x5c
 8007710:	d102      	bne.n	8007718 <follow_path+0x20>
		path++;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	3301      	adds	r3, #1
 8007716:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771e:	461a      	mov	r2, r3
 8007720:	2300      	movs	r3, #0
 8007722:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b1f      	cmp	r3, #31
 800772a:	d80c      	bhi.n	8007746 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800772c:	2100      	movs	r1, #0
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fe ffe3 	bl	80066fa <dir_sdi>
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800773e:	461a      	mov	r2, r3
 8007740:	2300      	movs	r3, #0
 8007742:	6153      	str	r3, [r2, #20]
 8007744:	e049      	b.n	80077da <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007746:	463b      	mov	r3, r7
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff fe16 	bl	800737c <create_name>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d13a      	bne.n	80077d0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff fc1d 	bl	8006f9a <dir_find>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	7adb      	ldrb	r3, [r3, #11]
 800776e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	2b04      	cmp	r3, #4
 800777a:	d12b      	bne.n	80077d4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d126      	bne.n	80077d4 <follow_path+0xdc>
 8007786:	2305      	movs	r3, #5
 8007788:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800778a:	e023      	b.n	80077d4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d120      	bne.n	80077d8 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	330b      	adds	r3, #11
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80077ae:	2305      	movs	r3, #5
 80077b0:	73fb      	strb	r3, [r7, #15]
 80077b2:	e012      	b.n	80077da <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7ff fa01 	bl	8006bc6 <ld_clust>
 80077c4:	4602      	mov	r2, r0
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077cc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077ce:	e7ba      	b.n	8007746 <follow_path+0x4e>
			if (res != FR_OK) break;
 80077d0:	bf00      	nop
 80077d2:	e002      	b.n	80077da <follow_path+0xe2>
				break;
 80077d4:	bf00      	nop
 80077d6:	e000      	b.n	80077da <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077d8:	bf00      	nop
		}
	}

	return res;
 80077da:	7bfb      	ldrb	r3, [r7, #15]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80077ec:	f04f 33ff 	mov.w	r3, #4294967295
 80077f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d031      	beq.n	800785e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e002      	b.n	8007808 <get_ldnumber+0x24>
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	3301      	adds	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b1f      	cmp	r3, #31
 800780e:	d903      	bls.n	8007818 <get_ldnumber+0x34>
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b3a      	cmp	r3, #58	; 0x3a
 8007816:	d1f4      	bne.n	8007802 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b3a      	cmp	r3, #58	; 0x3a
 800781e:	d11c      	bne.n	800785a <get_ldnumber+0x76>
			tp = *path;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	60fa      	str	r2, [r7, #12]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	3b30      	subs	r3, #48	; 0x30
 8007830:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b09      	cmp	r3, #9
 8007836:	d80e      	bhi.n	8007856 <get_ldnumber+0x72>
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	429a      	cmp	r2, r3
 800783e:	d10a      	bne.n	8007856 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d107      	bne.n	8007856 <get_ldnumber+0x72>
					vol = (int)i;
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	3301      	adds	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	e002      	b.n	8007860 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800785e:	693b      	ldr	r3, [r7, #16]
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787c:	2200      	movs	r2, #0
 800787e:	711a      	strb	r2, [r3, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007886:	461a      	mov	r2, r3
 8007888:	f04f 33ff 	mov.w	r3, #4294967295
 800788c:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7fe fa83 	bl	8005d9c <move_window>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <check_fs+0x34>
		return 3;
 800789c:	2303      	movs	r3, #3
 800789e:	e04a      	b.n	8007936 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078a6:	3301      	adds	r3, #1
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	b21a      	sxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80078b4:	b21b      	sxth	r3, r3
 80078b6:	4313      	orrs	r3, r2
 80078b8:	b21b      	sxth	r3, r3
 80078ba:	4a21      	ldr	r2, [pc, #132]	; (8007940 <check_fs+0xd4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d001      	beq.n	80078c4 <check_fs+0x58>
		return 2;
 80078c0:	2302      	movs	r3, #2
 80078c2:	e038      	b.n	8007936 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3336      	adds	r3, #54	; 0x36
 80078c8:	3303      	adds	r3, #3
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	061a      	lsls	r2, r3, #24
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3336      	adds	r3, #54	; 0x36
 80078d2:	3302      	adds	r3, #2
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	4313      	orrs	r3, r2
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	3236      	adds	r2, #54	; 0x36
 80078de:	3201      	adds	r2, #1
 80078e0:	7812      	ldrb	r2, [r2, #0]
 80078e2:	0212      	lsls	r2, r2, #8
 80078e4:	4313      	orrs	r3, r2
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078f2:	4a14      	ldr	r2, [pc, #80]	; (8007944 <check_fs+0xd8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d101      	bne.n	80078fc <check_fs+0x90>
		return 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e01c      	b.n	8007936 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3352      	adds	r3, #82	; 0x52
 8007900:	3303      	adds	r3, #3
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	061a      	lsls	r2, r3, #24
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3352      	adds	r3, #82	; 0x52
 800790a:	3302      	adds	r3, #2
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	4313      	orrs	r3, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	3252      	adds	r2, #82	; 0x52
 8007916:	3201      	adds	r2, #1
 8007918:	7812      	ldrb	r2, [r2, #0]
 800791a:	0212      	lsls	r2, r2, #8
 800791c:	4313      	orrs	r3, r2
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007924:	4313      	orrs	r3, r2
 8007926:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800792a:	4a06      	ldr	r2, [pc, #24]	; (8007944 <check_fs+0xd8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d101      	bne.n	8007934 <check_fs+0xc8>
		return 0;
 8007930:	2300      	movs	r3, #0
 8007932:	e000      	b.n	8007936 <check_fs+0xca>

	return 1;
 8007934:	2301      	movs	r3, #1
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	ffffaa55 	.word	0xffffaa55
 8007944:	00544146 	.word	0x00544146

08007948 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b096      	sub	sp, #88	; 0x58
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	4613      	mov	r3, r2
 8007954:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800795c:	68b8      	ldr	r0, [r7, #8]
 800795e:	f7ff ff41 	bl	80077e4 <get_ldnumber>
 8007962:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007966:	2b00      	cmp	r3, #0
 8007968:	da01      	bge.n	800796e <find_volume+0x26>
 800796a:	230b      	movs	r3, #11
 800796c:	e311      	b.n	8007f92 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800796e:	4a98      	ldr	r2, [pc, #608]	; (8007bd0 <find_volume+0x288>)
 8007970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007976:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <find_volume+0x3a>
 800797e:	230c      	movs	r3, #12
 8007980:	e307      	b.n	8007f92 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007986:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01c      	beq.n	80079ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	4618      	mov	r0, r3
 800799e:	f7fd fed1 	bl	8005744 <disk_status>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80079a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10c      	bne.n	80079ce <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <find_volume+0x82>
 80079ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80079c6:	230a      	movs	r3, #10
 80079c8:	e2e3      	b.n	8007f92 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 80079ca:	2300      	movs	r3, #0
 80079cc:	e2e1      	b.n	8007f92 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d4:	2200      	movs	r2, #0
 80079d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80079d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fd fec3 	bl	8005778 <disk_initialize>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80079f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a04:	2303      	movs	r3, #3
 8007a06:	e2c4      	b.n	8007f92 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <find_volume+0xd6>
 8007a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a12:	f003 0304 	and.w	r3, r3, #4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	e2b9      	b.n	8007f92 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a24:	7858      	ldrb	r0, [r3, #1]
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2c:	330a      	adds	r3, #10
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2102      	movs	r1, #2
 8007a32:	f7fd ff07 	bl	8005844 <disk_ioctl>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10d      	bne.n	8007a58 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a42:	895b      	ldrh	r3, [r3, #10]
 8007a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a48:	d306      	bcc.n	8007a58 <find_volume+0x110>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a50:	895b      	ldrh	r3, [r3, #10]
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a56:	d901      	bls.n	8007a5c <find_volume+0x114>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e29a      	b.n	8007f92 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8007a60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a64:	f7ff ff02 	bl	800786c <check_fs>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8007a6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d153      	bne.n	8007b1e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007a76:	2300      	movs	r3, #0
 8007a78:	643b      	str	r3, [r7, #64]	; 0x40
 8007a7a:	e028      	b.n	8007ace <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8007a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a80:	011b      	lsls	r3, r3, #4
 8007a82:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a86:	4413      	add	r3, r2
 8007a88:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d012      	beq.n	8007aba <find_volume+0x172>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	330b      	adds	r3, #11
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	061a      	lsls	r2, r3, #24
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	330a      	adds	r3, #10
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa8:	3209      	adds	r2, #9
 8007aaa:	7812      	ldrb	r2, [r2, #0]
 8007aac:	0212      	lsls	r2, r2, #8
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab2:	3208      	adds	r2, #8
 8007ab4:	7812      	ldrb	r2, [r2, #0]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	e000      	b.n	8007abc <find_volume+0x174>
 8007aba:	2200      	movs	r2, #0
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	3358      	adds	r3, #88	; 0x58
 8007ac2:	443b      	add	r3, r7
 8007ac4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aca:	3301      	adds	r3, #1
 8007acc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d9d3      	bls.n	8007a7c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <find_volume+0x19c>
 8007ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	3358      	adds	r3, #88	; 0x58
 8007aea:	443b      	add	r3, r7
 8007aec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007af0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <find_volume+0x1bc>
 8007af8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007afa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007afc:	f7ff feb6 	bl	800786c <check_fs>
 8007b00:	4603      	mov	r3, r0
 8007b02:	e000      	b.n	8007b06 <find_volume+0x1be>
 8007b04:	2302      	movs	r3, #2
 8007b06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8007b0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <find_volume+0x1d6>
 8007b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b14:	3301      	adds	r3, #1
 8007b16:	643b      	str	r3, [r7, #64]	; 0x40
 8007b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d9e2      	bls.n	8007ae4 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d101      	bne.n	8007b2a <find_volume+0x1e2>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e233      	b.n	8007f92 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8007b2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <find_volume+0x1ee>
 8007b32:	230d      	movs	r3, #13
 8007b34:	e22d      	b.n	8007f92 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	7b1b      	ldrb	r3, [r3, #12]
 8007b3a:	021b      	lsls	r3, r3, #8
 8007b3c:	b21a      	sxth	r2, r3
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	7adb      	ldrb	r3, [r3, #11]
 8007b42:	b21b      	sxth	r3, r3
 8007b44:	4313      	orrs	r3, r2
 8007b46:	b21a      	sxth	r2, r3
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4e:	895b      	ldrh	r3, [r3, #10]
 8007b50:	b21b      	sxth	r3, r3
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d001      	beq.n	8007b5a <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8007b56:	230d      	movs	r3, #13
 8007b58:	e21b      	b.n	8007f92 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	7ddb      	ldrb	r3, [r3, #23]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b21a      	sxth	r2, r3
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	7d9b      	ldrb	r3, [r3, #22]
 8007b66:	b21b      	sxth	r3, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	b21b      	sxth	r3, r3
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8007b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d112      	bne.n	8007b9c <find_volume+0x254>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007b7c:	061a      	lsls	r2, r3, #24
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	4313      	orrs	r3, r2
 8007b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b8a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8007b8e:	0212      	lsls	r2, r2, #8
 8007b90:	4313      	orrs	r3, r2
 8007b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b94:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ba6:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	7c1a      	ldrb	r2, [r3, #16]
 8007bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb2:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bba:	78db      	ldrb	r3, [r3, #3]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d009      	beq.n	8007bd4 <find_volume+0x28c>
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d003      	beq.n	8007bd4 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8007bcc:	230d      	movs	r3, #13
 8007bce:	e1e0      	b.n	8007f92 <find_volume+0x64a>
 8007bd0:	20000250 	.word	0x20000250
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bda:	78db      	ldrb	r3, [r3, #3]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be0:	fb02 f303 	mul.w	r3, r2, r3
 8007be4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	7b5a      	ldrb	r2, [r3, #13]
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf0:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf8:	789b      	ldrb	r3, [r3, #2]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00c      	beq.n	8007c18 <find_volume+0x2d0>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c04:	789b      	ldrb	r3, [r3, #2]
 8007c06:	461a      	mov	r2, r3
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c0e:	789b      	ldrb	r3, [r3, #2]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8007c18:	230d      	movs	r3, #13
 8007c1a:	e1ba      	b.n	8007f92 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	7c9b      	ldrb	r3, [r3, #18]
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	b21a      	sxth	r2, r3
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	7c5b      	ldrb	r3, [r3, #17]
 8007c28:	b21b      	sxth	r3, r3
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	b21b      	sxth	r3, r3
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c36:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3e:	891b      	ldrh	r3, [r3, #8]
 8007c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c46:	8952      	ldrh	r2, [r2, #10]
 8007c48:	0952      	lsrs	r2, r2, #5
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c50:	fb01 f202 	mul.w	r2, r1, r2
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8007c5c:	230d      	movs	r3, #13
 8007c5e:	e198      	b.n	8007f92 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	7d1b      	ldrb	r3, [r3, #20]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	b21a      	sxth	r2, r3
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	7cdb      	ldrb	r3, [r3, #19]
 8007c6c:	b21b      	sxth	r3, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	b21b      	sxth	r3, r3
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d112      	bne.n	8007ca2 <find_volume+0x35a>
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007c82:	061a      	lsls	r2, r3, #24
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c90:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8007c94:	0212      	lsls	r2, r2, #8
 8007c96:	4313      	orrs	r3, r2
 8007c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c9a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	7bdb      	ldrb	r3, [r3, #15]
 8007ca6:	021b      	lsls	r3, r3, #8
 8007ca8:	b21a      	sxth	r2, r3
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	7b9b      	ldrb	r3, [r3, #14]
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007cb6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <find_volume+0x378>
 8007cbc:	230d      	movs	r3, #13
 8007cbe:	e168      	b.n	8007f92 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007cc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc4:	4413      	add	r3, r2
 8007cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cc8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ccc:	8911      	ldrh	r1, [r2, #8]
 8007cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cd4:	8952      	ldrh	r2, [r2, #10]
 8007cd6:	0952      	lsrs	r2, r2, #5
 8007cd8:	b292      	uxth	r2, r2
 8007cda:	fbb1 f2f2 	udiv	r2, r1, r2
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d201      	bcs.n	8007cf0 <find_volume+0x3a8>
 8007cec:	230d      	movs	r3, #13
 8007cee:	e150      	b.n	8007f92 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007cfc:	7892      	ldrb	r2, [r2, #2]
 8007cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <find_volume+0x3c6>
 8007d0a:	230d      	movs	r3, #13
 8007d0c:	e141      	b.n	8007f92 <find_volume+0x64a>
	fmt = FS_FAT12;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d902      	bls.n	8007d24 <find_volume+0x3dc>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d902      	bls.n	8007d34 <find_volume+0x3ec>
 8007d2e:	2303      	movs	r3, #3
 8007d30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	3302      	adds	r3, #2
 8007d38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d3e:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d46:	461a      	mov	r2, r3
 8007d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d4a:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007d4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d50:	4413      	add	r3, r2
 8007d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d58:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8007d5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	4413      	add	r3, r2
 8007d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d66:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8007d68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d124      	bne.n	8007dba <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d76:	891b      	ldrh	r3, [r3, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <find_volume+0x438>
 8007d7c:	230d      	movs	r3, #13
 8007d7e:	e108      	b.n	8007f92 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d86:	061a      	lsls	r2, r3, #24
 8007d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	4313      	orrs	r3, r2
 8007d92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d94:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8007d98:	0212      	lsls	r2, r2, #8
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d9e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007da2:	4313      	orrs	r3, r2
 8007da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007da6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007daa:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	647b      	str	r3, [r7, #68]	; 0x44
 8007db8:	e02b      	b.n	8007e12 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc0:	891b      	ldrh	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <find_volume+0x482>
 8007dc6:	230d      	movs	r3, #13
 8007dc8:	e0e3      	b.n	8007f92 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd4:	4413      	add	r3, r2
 8007dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ddc:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d105      	bne.n	8007df2 <find_volume+0x4aa>
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	e00e      	b.n	8007e10 <find_volume+0x4c8>
 8007df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df8:	695a      	ldr	r2, [r3, #20]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	4413      	add	r3, r2
 8007e00:	085a      	lsrs	r2, r3, #1
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007e10:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e18:	699a      	ldr	r2, [r3, #24]
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e20:	895b      	ldrh	r3, [r3, #10]
 8007e22:	4619      	mov	r1, r3
 8007e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e26:	440b      	add	r3, r1
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e2c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007e30:	8949      	ldrh	r1, [r1, #10]
 8007e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d201      	bcs.n	8007e3e <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8007e3a:	230d      	movs	r3, #13
 8007e3c:	e0a9      	b.n	8007f92 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e44:	461a      	mov	r2, r3
 8007e46:	f04f 33ff 	mov.w	r3, #4294967295
 8007e4a:	6113      	str	r3, [r2, #16]
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e5a:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e62:	2280      	movs	r2, #128	; 0x80
 8007e64:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007e66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d17a      	bne.n	8007f64 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	b21a      	sxth	r2, r3
 8007e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e7e:	b21b      	sxth	r3, r3
 8007e80:	4313      	orrs	r3, r2
 8007e82:	b21b      	sxth	r3, r3
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d16d      	bne.n	8007f64 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e90:	f7fd ff84 	bl	8005d9c <move_window>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d164      	bne.n	8007f64 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	b21a      	sxth	r2, r3
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007eb4:	b21b      	sxth	r3, r3
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	b21b      	sxth	r3, r3
 8007eba:	4a38      	ldr	r2, [pc, #224]	; (8007f9c <find_volume+0x654>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d151      	bne.n	8007f64 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec2:	78db      	ldrb	r3, [r3, #3]
 8007ec4:	061a      	lsls	r2, r3, #24
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	789b      	ldrb	r3, [r3, #2]
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed0:	7852      	ldrb	r2, [r2, #1]
 8007ed2:	0212      	lsls	r2, r2, #8
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed8:	7812      	ldrb	r2, [r2, #0]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	4a30      	ldr	r2, [pc, #192]	; (8007fa0 <find_volume+0x658>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d140      	bne.n	8007f64 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007ee8:	061a      	lsls	r2, r3, #24
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007ef0:	041b      	lsls	r3, r3, #16
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007efa:	0212      	lsls	r2, r2, #8
 8007efc:	4313      	orrs	r3, r2
 8007efe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f00:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007f04:	4313      	orrs	r3, r2
 8007f06:	4a27      	ldr	r2, [pc, #156]	; (8007fa4 <find_volume+0x65c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d12b      	bne.n	8007f64 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007f12:	061a      	lsls	r2, r3, #24
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007f1a:	041b      	lsls	r3, r3, #16
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f20:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007f24:	0212      	lsls	r2, r2, #8
 8007f26:	4313      	orrs	r3, r2
 8007f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f2a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f36:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007f3e:	061a      	lsls	r2, r3, #24
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007f46:	041b      	lsls	r3, r3, #16
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f4c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007f50:	0212      	lsls	r2, r2, #8
 8007f52:	4313      	orrs	r3, r2
 8007f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f56:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f62:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f70:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007f72:	4b0d      	ldr	r3, [pc, #52]	; (8007fa8 <find_volume+0x660>)
 8007f74:	881b      	ldrh	r3, [r3, #0]
 8007f76:	3301      	adds	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <find_volume+0x660>)
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <find_volume+0x660>)
 8007f80:	881a      	ldrh	r2, [r3, #0]
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f88:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f8c:	f7fd fe8a 	bl	8005ca4 <clear_lock>
#endif

	return FR_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3758      	adds	r7, #88	; 0x58
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	ffffaa55 	.word	0xffffaa55
 8007fa0:	41615252 	.word	0x41615252
 8007fa4:	61417272 	.word	0x61417272
 8007fa8:	20000254 	.word	0x20000254

08007fac <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d02a      	beq.n	8008014 <validate+0x68>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d024      	beq.n	8008014 <validate+0x68>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01b      	beq.n	8008014 <validate+0x68>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe8:	88da      	ldrh	r2, [r3, #6]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff0:	889b      	ldrh	r3, [r3, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d10e      	bne.n	8008014 <validate+0x68>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	4618      	mov	r0, r3
 8008006:	f7fd fb9d 	bl	8005744 <disk_status>
 800800a:	4603      	mov	r3, r0
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8008014:	2309      	movs	r3, #9
 8008016:	e000      	b.n	800801a <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3710      	adds	r7, #16
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008036:	f107 0310 	add.w	r3, r7, #16
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fbd2 	bl	80077e4 <get_ldnumber>
 8008040:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	da01      	bge.n	800804c <f_mount+0x28>
 8008048:	230b      	movs	r3, #11
 800804a:	e02f      	b.n	80080ac <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800804c:	4a19      	ldr	r2, [pc, #100]	; (80080b4 <f_mount+0x90>)
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008054:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d007      	beq.n	800806c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800805c:	69b8      	ldr	r0, [r7, #24]
 800805e:	f7fd fe21 	bl	8005ca4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	490d      	ldr	r1, [pc, #52]	; (80080b4 <f_mount+0x90>)
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <f_mount+0x6e>
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d001      	beq.n	8008096 <f_mount+0x72>
 8008092:	2300      	movs	r3, #0
 8008094:	e00a      	b.n	80080ac <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008096:	f107 0108 	add.w	r1, r7, #8
 800809a:	f107 030c 	add.w	r3, r7, #12
 800809e:	2200      	movs	r2, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff fc51 	bl	8007948 <find_volume>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000250 	.word	0x20000250

080080b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080c6:	f843 0c4c 	str.w	r0, [r3, #-76]
 80080ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080ce:	f843 1c50 	str.w	r1, [r3, #-80]
 80080d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080d6:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80080da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080de:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <f_open+0x32>
 80080e6:	2309      	movs	r3, #9
 80080e8:	e311      	b.n	800870e <f_open+0x656>
	fp->fs = 0;			/* Clear file object */
 80080ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080ee:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80080f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f6:	461a      	mov	r2, r3
 80080f8:	2300      	movs	r3, #0
 80080fa:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80080fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008100:	461a      	mov	r2, r3
 8008102:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008106:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008112:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008116:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800811a:	f023 0301 	bic.w	r3, r3, #1
 800811e:	b2da      	uxtb	r2, r3
 8008120:	f107 0118 	add.w	r1, r7, #24
 8008124:	3910      	subs	r1, #16
 8008126:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800812a:	3b1c      	subs	r3, #28
 800812c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fc09 	bl	8007948 <find_volume>
 8008136:	4603      	mov	r3, r0
 8008138:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800813c:	f102 0217 	add.w	r2, r2, #23
 8008140:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008142:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008146:	f103 0317 	add.w	r3, r3, #23
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 82d9 	bne.w	8008704 <f_open+0x64c>
		INIT_BUF(dj);
 8008152:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008156:	f001 fa4d 	bl	80095f4 <ff_memalloc>
 800815a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800815e:	f103 030c 	add.w	r3, r3, #12
 8008162:	6018      	str	r0, [r3, #0]
 8008164:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008168:	f103 030c 	add.w	r3, r3, #12
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d101      	bne.n	8008176 <f_open+0xbe>
 8008172:	2311      	movs	r3, #17
 8008174:	e2cb      	b.n	800870e <f_open+0x656>
 8008176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800817a:	461a      	mov	r2, r3
 800817c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008180:	f103 030c 	add.w	r3, r3, #12
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8c2 3fe4 	str.w	r3, [r2, #4068]	; 0xfe4
 800818a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800818e:	461a      	mov	r2, r3
 8008190:	f107 0318 	add.w	r3, r7, #24
 8008194:	3b08      	subs	r3, #8
 8008196:	f8c2 3fdc 	str.w	r3, [r2, #4060]	; 0xfdc
		res = follow_path(&dj, path);	/* Follow the file path */
 800819a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800819e:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80081a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80081a6:	3b1c      	subs	r3, #28
 80081a8:	4611      	mov	r1, r2
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff faa4 	bl	80076f8 <follow_path>
 80081b0:	4603      	mov	r3, r0
 80081b2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081b6:	f102 0217 	add.w	r2, r2, #23
 80081ba:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80081bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081c0:	f8d3 3fd8 	ldr.w	r3, [r3, #4056]	; 0xfd8
 80081c4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081c8:	f102 0210 	add.w	r2, r2, #16
 80081cc:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80081ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081d2:	f103 0317 	add.w	r3, r3, #23
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d126      	bne.n	800822a <f_open+0x172>
			if (!dir)	/* Default directory itself */
 80081dc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081e0:	f103 0310 	add.w	r3, r3, #16
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <f_open+0x140>
				res = FR_INVALID_NAME;
 80081ea:	2306      	movs	r3, #6
 80081ec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081f0:	f102 0217 	add.w	r2, r2, #23
 80081f4:	7013      	strb	r3, [r2, #0]
 80081f6:	e018      	b.n	800822a <f_open+0x172>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081fc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	461a      	mov	r2, r3
 8008210:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008214:	3b1c      	subs	r3, #28
 8008216:	4611      	mov	r1, r2
 8008218:	4618      	mov	r0, r3
 800821a:	f7fd fbad 	bl	8005978 <chk_lock>
 800821e:	4603      	mov	r3, r0
 8008220:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008224:	f102 0217 	add.w	r2, r2, #23
 8008228:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800822a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800822e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008232:	f003 031c 	and.w	r3, r3, #28
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 813c 	beq.w	80084b4 <f_open+0x3fc>
			if (res != FR_OK) {					/* No file, create new */
 800823c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008240:	f103 0317 	add.w	r3, r3, #23
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d02e      	beq.n	80082a8 <f_open+0x1f0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800824a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800824e:	f103 0317 	add.w	r3, r3, #23
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b04      	cmp	r3, #4
 8008256:	d112      	bne.n	800827e <f_open+0x1c6>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008258:	f7fd fbfe 	bl	8005a58 <enq_lock>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <f_open+0x1ba>
 8008262:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008266:	3b1c      	subs	r3, #28
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe ff63 	bl	8007134 <dir_register>
 800826e:	4603      	mov	r3, r0
 8008270:	e000      	b.n	8008274 <f_open+0x1bc>
 8008272:	2312      	movs	r3, #18
 8008274:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008278:	f102 0217 	add.w	r2, r2, #23
 800827c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800827e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008282:	461a      	mov	r2, r3
 8008284:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008288:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800828c:	f043 0308 	orr.w	r3, r3, #8
 8008290:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8008294:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008298:	f8d3 3fd8 	ldr.w	r3, [r3, #4056]	; 0xfd8
 800829c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082a0:	f102 0210 	add.w	r2, r2, #16
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	e01f      	b.n	80082e8 <f_open+0x230>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80082a8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082ac:	f103 0310 	add.w	r3, r3, #16
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	330b      	adds	r3, #11
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 0311 	and.w	r3, r3, #17
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d006      	beq.n	80082cc <f_open+0x214>
					res = FR_DENIED;
 80082be:	2307      	movs	r3, #7
 80082c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082c4:	f102 0217 	add.w	r2, r2, #23
 80082c8:	7013      	strb	r3, [r2, #0]
 80082ca:	e00d      	b.n	80082e8 <f_open+0x230>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80082cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082d0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <f_open+0x230>
						res = FR_EXIST;
 80082dc:	2308      	movs	r3, #8
 80082de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082e2:	f102 0217 	add.w	r2, r2, #23
 80082e6:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80082e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082ec:	f103 0317 	add.w	r3, r3, #23
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 8110 	bne.w	8008518 <f_open+0x460>
 80082f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082fc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008300:	f003 0308 	and.w	r3, r3, #8
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 8107 	beq.w	8008518 <f_open+0x460>
				dw = GET_FATTIME();				/* Created time */
 800830a:	f7fd f9bd 	bl	8005688 <get_fattime>
 800830e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008312:	f103 0308 	add.w	r3, r3, #8
 8008316:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008318:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800831c:	f103 0310 	add.w	r3, r3, #16
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	330e      	adds	r3, #14
 8008324:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008328:	f102 0208 	add.w	r2, r2, #8
 800832c:	6812      	ldr	r2, [r2, #0]
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008336:	f103 0308 	add.w	r3, r3, #8
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	b29b      	uxth	r3, r3
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	b29a      	uxth	r2, r3
 8008342:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008346:	f103 0310 	add.w	r3, r3, #16
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	330f      	adds	r3, #15
 800834e:	b2d2      	uxtb	r2, r2
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008356:	f103 0308 	add.w	r3, r3, #8
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	0c1a      	lsrs	r2, r3, #16
 800835e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008362:	f103 0310 	add.w	r3, r3, #16
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3310      	adds	r3, #16
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008372:	f103 0308 	add.w	r3, r3, #8
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	0e1a      	lsrs	r2, r3, #24
 800837a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800837e:	f103 0310 	add.w	r3, r3, #16
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3311      	adds	r3, #17
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800838a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800838e:	f103 0310 	add.w	r3, r3, #16
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	330b      	adds	r3, #11
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800839a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800839e:	f103 0310 	add.w	r3, r3, #16
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	331c      	adds	r3, #28
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083ae:	f103 0310 	add.w	r3, r3, #16
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	331d      	adds	r3, #29
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083be:	f103 0310 	add.w	r3, r3, #16
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	331e      	adds	r3, #30
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083ce:	f103 0310 	add.w	r3, r3, #16
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	331f      	adds	r3, #31
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80083da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083de:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 80083e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083e6:	f102 0210 	add.w	r2, r2, #16
 80083ea:	6811      	ldr	r1, [r2, #0]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe fbea 	bl	8006bc6 <ld_clust>
 80083f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083f6:	f103 0304 	add.w	r3, r3, #4
 80083fa:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80083fc:	2100      	movs	r1, #0
 80083fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008402:	f103 0310 	add.w	r3, r3, #16
 8008406:	6818      	ldr	r0, [r3, #0]
 8008408:	f7fe fc0c 	bl	8006c24 <st_clust>
				dj.fs->wflag = 1;
 800840c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008410:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008418:	2201      	movs	r2, #1
 800841a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800841c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008420:	f103 0304 	add.w	r3, r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d076      	beq.n	8008518 <f_open+0x460>
					dw = dj.fs->winsect;
 800842a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800842e:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800843c:	f102 0208 	add.w	r2, r2, #8
 8008440:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008442:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008446:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 800844a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800844e:	f102 0204 	add.w	r2, r2, #4
 8008452:	6811      	ldr	r1, [r2, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe f806 	bl	8006466 <remove_chain>
 800845a:	4603      	mov	r3, r0
 800845c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008460:	f102 0217 	add.w	r2, r2, #23
 8008464:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8008466:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800846a:	f103 0317 	add.w	r3, r3, #23
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d151      	bne.n	8008518 <f_open+0x460>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008474:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008478:	f8d3 2fc4 	ldr.w	r2, [r3, #4036]	; 0xfc4
 800847c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008480:	f103 0304 	add.w	r3, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3b01      	subs	r3, #1
 8008488:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800848c:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800848e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008492:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008496:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800849a:	f102 0208 	add.w	r2, r2, #8
 800849e:	6811      	ldr	r1, [r2, #0]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fd fc7b 	bl	8005d9c <move_window>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084ac:	f102 0217 	add.w	r2, r2, #23
 80084b0:	7013      	strb	r3, [r2, #0]
 80084b2:	e031      	b.n	8008518 <f_open+0x460>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80084b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084b8:	f103 0317 	add.w	r3, r3, #23
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d12a      	bne.n	8008518 <f_open+0x460>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80084c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084c6:	f103 0310 	add.w	r3, r3, #16
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330b      	adds	r3, #11
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 0310 	and.w	r3, r3, #16
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d006      	beq.n	80084e6 <f_open+0x42e>
					res = FR_NO_FILE;
 80084d8:	2304      	movs	r3, #4
 80084da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80084de:	f102 0217 	add.w	r2, r2, #23
 80084e2:	7013      	strb	r3, [r2, #0]
 80084e4:	e018      	b.n	8008518 <f_open+0x460>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80084e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084ea:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d010      	beq.n	8008518 <f_open+0x460>
 80084f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80084fa:	f103 0310 	add.w	r3, r3, #16
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	330b      	adds	r3, #11
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <f_open+0x460>
						res = FR_DENIED;
 800850c:	2307      	movs	r3, #7
 800850e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008512:	f102 0217 	add.w	r2, r2, #23
 8008516:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008518:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800851c:	f103 0317 	add.w	r3, r3, #23
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d157      	bne.n	80085d6 <f_open+0x51e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008526:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800852a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <f_open+0x494>
				mode |= FA__WRITTEN;
 8008536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800853a:	461a      	mov	r2, r3
 800853c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008540:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008544:	f043 0320 	orr.w	r3, r3, #32
 8008548:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800854c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008550:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800855e:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008566:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008568:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800856c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008574:	461a      	mov	r2, r3
 8008576:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800857a:	f103 0310 	add.w	r3, r3, #16
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008586:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800858a:	f023 0301 	bic.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	bf14      	ite	ne
 8008592:	2301      	movne	r3, #1
 8008594:	2300      	moveq	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	461a      	mov	r2, r3
 800859a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800859e:	3b1c      	subs	r3, #28
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fd fa7c 	bl	8005aa0 <inc_lock>
 80085a8:	4602      	mov	r2, r0
 80085aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085ae:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80085b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b6:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80085b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085bc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80085c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <f_open+0x51e>
 80085ca:	2302      	movs	r3, #2
 80085cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80085d0:	f102 0217 	add.w	r2, r2, #23
 80085d4:	7013      	strb	r3, [r2, #0]
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 80085d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085da:	f103 030c 	add.w	r3, r3, #12
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	f001 f814 	bl	800960c <ff_memfree>

		if (res == FR_OK) {
 80085e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80085e8:	f103 0317 	add.w	r3, r3, #23
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f040 8088 	bne.w	8008704 <f_open+0x64c>
			fp->flag = mode;					/* File access mode */
 80085f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80085f8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80085fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008600:	461a      	mov	r2, r3
 8008602:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008606:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800860a:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800860c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008610:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008618:	2200      	movs	r2, #0
 800861a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800861c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008620:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008624:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008628:	f102 0210 	add.w	r2, r2, #16
 800862c:	6811      	ldr	r1, [r2, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe fac9 	bl	8006bc6 <ld_clust>
 8008634:	4602      	mov	r2, r0
 8008636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800863a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800863e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008642:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008644:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008648:	f103 0310 	add.w	r3, r3, #16
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	331f      	adds	r3, #31
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	061a      	lsls	r2, r3, #24
 8008654:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008658:	f103 0310 	add.w	r3, r3, #16
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	331e      	adds	r3, #30
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	041b      	lsls	r3, r3, #16
 8008664:	4313      	orrs	r3, r2
 8008666:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800866a:	f102 0210 	add.w	r2, r2, #16
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	321d      	adds	r2, #29
 8008672:	7812      	ldrb	r2, [r2, #0]
 8008674:	0212      	lsls	r2, r2, #8
 8008676:	4313      	orrs	r3, r2
 8008678:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800867c:	f102 0210 	add.w	r2, r2, #16
 8008680:	6812      	ldr	r2, [r2, #0]
 8008682:	321c      	adds	r2, #28
 8008684:	7812      	ldrb	r2, [r2, #0]
 8008686:	4313      	orrs	r3, r2
 8008688:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800868c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008690:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008694:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8008696:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800869a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800869e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a2:	461a      	mov	r2, r3
 80086a4:	2300      	movs	r3, #0
 80086a6:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80086a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086ac:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80086b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b4:	461a      	mov	r2, r3
 80086b6:	2300      	movs	r3, #0
 80086b8:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80086ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086be:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80086c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c6:	461a      	mov	r2, r3
 80086c8:	2300      	movs	r3, #0
 80086ca:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80086cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086d0:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 80086d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80086d8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80086dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086e0:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 80086e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086e6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80086ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f4:	88da      	ldrh	r2, [r3, #6]
 80086f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086fa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80086fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008702:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008704:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008708:	f103 0317 	add.w	r3, r3, #23
 800870c:	781b      	ldrb	r3, [r3, #0]
}
 800870e:	4618      	mov	r0, r3
 8008710:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b08c      	sub	sp, #48	; 0x30
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
 8008726:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f7ff fc3a 	bl	8007fac <validate>
 8008738:	4603      	mov	r3, r0
 800873a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800873c:	7ffb      	ldrb	r3, [r7, #31]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <f_read+0x2c>
 8008742:	7ffb      	ldrb	r3, [r7, #31]
 8008744:	e1cd      	b.n	8008ae2 <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874c:	79db      	ldrb	r3, [r3, #7]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008758:	79db      	ldrb	r3, [r3, #7]
 800875a:	e1c2      	b.n	8008ae2 <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008762:	799b      	ldrb	r3, [r3, #6]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800876c:	2307      	movs	r3, #7
 800876e:	e1b8      	b.n	8008ae2 <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	429a      	cmp	r2, r3
 800878a:	f240 81a5 	bls.w	8008ad8 <f_read+0x3be>
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008792:	e1a1      	b.n	8008ad8 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087a2:	6812      	ldr	r2, [r2, #0]
 80087a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087a8:	8952      	ldrh	r2, [r2, #10]
 80087aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80087ae:	fb01 f202 	mul.w	r2, r1, r2
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f040 8140 	bne.w	8008a3a <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087ce:	8952      	ldrh	r2, [r2, #10]
 80087d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e2:	789b      	ldrb	r3, [r3, #2]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	4013      	ands	r3, r2
 80087ea:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d143      	bne.n	800887a <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008808:	e01c      	b.n	8008844 <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2b00      	cmp	r3, #0
 8008814:	d009      	beq.n	800882a <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	4619      	mov	r1, r3
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7fd ff29 	bl	8006678 <clmt_clust>
 8008826:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008828:	e00c      	b.n	8008844 <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	4619      	mov	r1, r3
 800883c:	4610      	mov	r0, r2
 800883e:	f7fd fbc3 	bl	8005fc8 <get_fat>
 8008842:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	2b01      	cmp	r3, #1
 8008848:	d806      	bhi.n	8008858 <f_read+0x13e>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008850:	2202      	movs	r2, #2
 8008852:	71da      	strb	r2, [r3, #7]
 8008854:	2302      	movs	r3, #2
 8008856:	e144      	b.n	8008ae2 <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885e:	d106      	bne.n	800886e <f_read+0x154>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008866:	2201      	movs	r2, #1
 8008868:	71da      	strb	r2, [r3, #7]
 800886a:	2301      	movs	r3, #1
 800886c:	e139      	b.n	8008ae2 <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008874:	461a      	mov	r2, r3
 8008876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008878:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	4619      	mov	r1, r3
 800888c:	4610      	mov	r0, r2
 800888e:	f7fd fb76 	bl	8005f7e <clust2sect>
 8008892:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <f_read+0x18e>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a0:	2202      	movs	r2, #2
 80088a2:	71da      	strb	r2, [r3, #7]
 80088a4:	2302      	movs	r3, #2
 80088a6:	e11c      	b.n	8008ae2 <f_read+0x3c8>
			sect += csect;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4413      	add	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088bc:	895b      	ldrh	r3, [r3, #10]
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d066      	beq.n	800899c <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80088ce:	7dfa      	ldrb	r2, [r7, #23]
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	4413      	add	r3, r2
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088e0:	7892      	ldrb	r2, [r2, #2]
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d90a      	bls.n	80088fc <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f2:	789b      	ldrb	r3, [r3, #2]
 80088f4:	461a      	mov	r2, r3
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008908:	7858      	ldrb	r0, [r3, #1]
 800890a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	6a39      	ldr	r1, [r7, #32]
 8008910:	f7fc ff58 	bl	80057c4 <disk_read>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d006      	beq.n	8008928 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008920:	2201      	movs	r2, #1
 8008922:	71da      	strb	r2, [r3, #7]
 8008924:	2301      	movs	r3, #1
 8008926:	e0dc      	b.n	8008ae2 <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800892e:	799b      	ldrb	r3, [r3, #6]
 8008930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008934:	2b00      	cmp	r3, #0
 8008936:	d024      	beq.n	8008982 <f_read+0x268>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008946:	429a      	cmp	r2, r3
 8008948:	d91b      	bls.n	8008982 <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008962:	8952      	ldrh	r2, [r2, #10]
 8008964:	fb02 f303 	mul.w	r3, r2, r3
 8008968:	6a3a      	ldr	r2, [r7, #32]
 800896a:	18d0      	adds	r0, r2, r3
 800896c:	68f9      	ldr	r1, [r7, #12]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897a:	895b      	ldrh	r3, [r3, #10]
 800897c:	461a      	mov	r2, r3
 800897e:	f7fc ff7f 	bl	8005880 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898e:	895b      	ldrh	r3, [r3, #10]
 8008990:	461a      	mov	r2, r3
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	fb02 f303 	mul.w	r3, r2, r3
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800899a:	e085      	b.n	8008aa8 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d041      	beq.n	8008a2e <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b0:	799b      	ldrb	r3, [r3, #6]
 80089b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d023      	beq.n	8008a02 <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089c6:	7858      	ldrb	r0, [r3, #1]
 80089c8:	68f9      	ldr	r1, [r7, #12]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	2301      	movs	r3, #1
 80089d4:	f7fc ff16 	bl	8005804 <disk_write>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d006      	beq.n	80089ec <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089e4:	2201      	movs	r2, #1
 80089e6:	71da      	strb	r2, [r3, #7]
 80089e8:	2301      	movs	r3, #1
 80089ea:	e07a      	b.n	8008ae2 <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f2:	799b      	ldrb	r3, [r3, #6]
 80089f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a00:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a0e:	7858      	ldrb	r0, [r3, #1]
 8008a10:	68f9      	ldr	r1, [r7, #12]
 8008a12:	2301      	movs	r3, #1
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	f7fc fed5 	bl	80057c4 <disk_read>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d006      	beq.n	8008a2e <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a26:	2201      	movs	r2, #1
 8008a28:	71da      	strb	r2, [r3, #7]
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e059      	b.n	8008ae2 <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a34:	461a      	mov	r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a46:	895b      	ldrh	r3, [r3, #10]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a5e:	8952      	ldrh	r2, [r2, #10]
 8008a60:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a64:	fb01 f202 	mul.w	r2, r1, r2
 8008a68:	1a9b      	subs	r3, r3, r2
 8008a6a:	1ac3      	subs	r3, r0, r3
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8008a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d901      	bls.n	8008a7a <f_read+0x360>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a8e:	8952      	ldrh	r2, [r2, #10]
 8008a90:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a94:	fb01 f202 	mul.w	r2, r1, r2
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6a38      	ldr	r0, [r7, #32]
 8008aa4:	f7fc feec 	bl	8005880 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008aa8:	6a3a      	ldr	r2, [r7, #32]
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	4413      	add	r3, r2
 8008aae:	623b      	str	r3, [r7, #32]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	4413      	add	r3, r2
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ac2:	6093      	str	r3, [r2, #8]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	441a      	add	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f47f ae5a 	bne.w	8008794 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3730      	adds	r7, #48	; 0x30
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b08a      	sub	sp, #40	; 0x28
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	607a      	str	r2, [r7, #4]
 8008af6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff fa52 	bl	8007fac <validate>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <f_write+0x2c>
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	e21e      	b.n	8008f54 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b1c:	79db      	ldrb	r3, [r3, #7]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d004      	beq.n	8008b2c <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b28:	79db      	ldrb	r3, [r3, #7]
 8008b2a:	e213      	b.n	8008f54 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b32:	799b      	ldrb	r3, [r3, #6]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008b3c:	2307      	movs	r3, #7
 8008b3e:	e209      	b.n	8008f54 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	441a      	add	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	f080 81d9 	bcs.w	8008f0c <f_write+0x422>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008b5e:	e1d5      	b.n	8008f0c <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b74:	8952      	ldrh	r2, [r2, #10]
 8008b76:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b7a:	fb01 f202 	mul.w	r2, r1, r2
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f040 8169 	bne.w	8008e58 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b94:	6812      	ldr	r2, [r2, #0]
 8008b96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b9a:	8952      	ldrh	r2, [r2, #10]
 8008b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bae:	789b      	ldrb	r3, [r3, #2]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008bb8:	7dbb      	ldrb	r3, [r7, #22]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d15f      	bne.n	8008c7e <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d111      	bne.n	8008bee <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d126      	bne.n	8008c28 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2100      	movs	r1, #0
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fd fc9f 	bl	8006528 <create_chain>
 8008bea:	6278      	str	r0, [r7, #36]	; 0x24
 8008bec:	e01c      	b.n	8008c28 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	4619      	mov	r1, r3
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7fd fd37 	bl	8006678 <clmt_clust>
 8008c0a:	6278      	str	r0, [r7, #36]	; 0x24
 8008c0c:	e00c      	b.n	8008c28 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f7fd fc81 	bl	8006528 <create_chain>
 8008c26:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 8173 	beq.w	8008f16 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d106      	bne.n	8008c44 <f_write+0x15a>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	71da      	strb	r2, [r3, #7]
 8008c40:	2302      	movs	r3, #2
 8008c42:	e187      	b.n	8008f54 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4a:	d106      	bne.n	8008c5a <f_write+0x170>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c52:	2201      	movs	r2, #1
 8008c54:	71da      	strb	r2, [r3, #7]
 8008c56:	2301      	movs	r3, #1
 8008c58:	e17c      	b.n	8008f54 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c60:	461a      	mov	r2, r3
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d105      	bne.n	8008c7e <f_write+0x194>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c78:	461a      	mov	r2, r3
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c84:	799b      	ldrb	r3, [r3, #6]
 8008c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d023      	beq.n	8008cd6 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9a:	7858      	ldrb	r0, [r3, #1]
 8008c9c:	68f9      	ldr	r1, [r7, #12]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca4:	699a      	ldr	r2, [r3, #24]
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f7fc fdac 	bl	8005804 <disk_write>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d006      	beq.n	8008cc0 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb8:	2201      	movs	r2, #1
 8008cba:	71da      	strb	r2, [r3, #7]
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e149      	b.n	8008f54 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc6:	799b      	ldrb	r3, [r3, #6]
 8008cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd4:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4610      	mov	r0, r2
 8008cea:	f7fd f948 	bl	8005f7e <clust2sect>
 8008cee:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d106      	bne.n	8008d04 <f_write+0x21a>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	71da      	strb	r2, [r3, #7]
 8008d00:	2302      	movs	r3, #2
 8008d02:	e127      	b.n	8008f54 <f_write+0x46a>
			sect += csect;
 8008d04:	7dbb      	ldrb	r3, [r7, #22]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	4413      	add	r3, r2
 8008d0a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d18:	895b      	ldrh	r3, [r3, #10]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d22:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d069      	beq.n	8008dfe <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008d2a:	7dba      	ldrb	r2, [r7, #22]
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	4413      	add	r3, r2
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d36:	6812      	ldr	r2, [r2, #0]
 8008d38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d3c:	7892      	ldrb	r2, [r2, #2]
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d90a      	bls.n	8008d58 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4e:	789b      	ldrb	r3, [r3, #2]
 8008d50:	461a      	mov	r2, r3
 8008d52:	7dbb      	ldrb	r3, [r7, #22]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d64:	7858      	ldrb	r0, [r3, #1]
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	69b9      	ldr	r1, [r7, #24]
 8008d6c:	f7fc fd4a 	bl	8005804 <disk_write>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d006      	beq.n	8008d84 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	71da      	strb	r2, [r3, #7]
 8008d80:	2301      	movs	r3, #1
 8008d82:	e0e7      	b.n	8008f54 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d8a:	699a      	ldr	r2, [r3, #24]
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	69fa      	ldr	r2, [r7, #28]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d926      	bls.n	8008de4 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d9e:	699a      	ldr	r2, [r3, #24]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008daa:	6812      	ldr	r2, [r2, #0]
 8008dac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008db0:	8952      	ldrh	r2, [r2, #10]
 8008db2:	fb02 f303 	mul.w	r3, r2, r3
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	18d1      	adds	r1, r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc6:	895b      	ldrh	r3, [r3, #10]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f7fc fd59 	bl	8005880 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd4:	799b      	ldrb	r3, [r3, #6]
 8008dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de2:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df0:	895b      	ldrh	r3, [r3, #10]
 8008df2:	461a      	mov	r2, r3
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	fb02 f303 	mul.w	r3, r2, r3
 8008dfa:	623b      	str	r3, [r7, #32]
				continue;
 8008dfc:	e06e      	b.n	8008edc <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d01f      	beq.n	8008e4c <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d215      	bcs.n	8008e4c <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2c:	7858      	ldrb	r0, [r3, #1]
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	2301      	movs	r3, #1
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	f7fc fcc6 	bl	80057c4 <disk_read>
 8008e38:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d006      	beq.n	8008e4c <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e44:	2201      	movs	r2, #1
 8008e46:	71da      	strb	r2, [r3, #7]
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e083      	b.n	8008f54 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e52:	461a      	mov	r2, r3
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e64:	895b      	ldrh	r3, [r3, #10]
 8008e66:	4618      	mov	r0, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008e7c:	8952      	ldrh	r2, [r2, #10]
 8008e7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e82:	fb01 f202 	mul.w	r2, r1, r2
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	1ac3      	subs	r3, r0, r3
 8008e8a:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008e8c:	6a3a      	ldr	r2, [r7, #32]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d901      	bls.n	8008e98 <f_write+0x3ae>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ea6:	6812      	ldr	r2, [r2, #0]
 8008ea8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008eac:	8952      	ldrh	r2, [r2, #10]
 8008eae:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eb2:	fb01 f202 	mul.w	r2, r1, r2
 8008eb6:	1a9b      	subs	r3, r3, r2
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	6a3a      	ldr	r2, [r7, #32]
 8008ebe:	69b9      	ldr	r1, [r7, #24]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fc fcdd 	bl	8005880 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ecc:	799b      	ldrb	r3, [r3, #6]
 8008ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eda:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	4413      	add	r3, r2
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ef6:	6093      	str	r3, [r2, #8]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	441a      	add	r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f47f ae26 	bne.w	8008b60 <f_write+0x76>
 8008f14:	e000      	b.n	8008f18 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f16:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d907      	bls.n	8008f3c <f_write+0x452>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f3a:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f42:	799b      	ldrb	r3, [r3, #6]
 8008f44:	f043 0320 	orr.w	r3, r3, #32
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f50:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3728      	adds	r7, #40	; 0x28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff f821 	bl	8007fac <validate>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f040 80bc 	bne.w	80090ee <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f7c:	799b      	ldrb	r3, [r3, #6]
 8008f7e:	f003 0320 	and.w	r3, r3, #32
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 80b3 	beq.w	80090ee <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f8e:	799b      	ldrb	r3, [r3, #6]
 8008f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01e      	beq.n	8008fd6 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa4:	7858      	ldrb	r0, [r3, #1]
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fae:	699a      	ldr	r2, [r3, #24]
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f7fc fc27 	bl	8005804 <disk_write>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e097      	b.n	80090f0 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc6:	799b      	ldrb	r3, [r3, #6]
 8008fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd4:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4610      	mov	r0, r2
 8008fea:	f7fc fed7 	bl	8005d9c <move_window>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d17a      	bne.n	80090ee <f_sync+0x192>
				dir = fp->dir_ptr;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	330b      	adds	r3, #11
 8009006:	781a      	ldrb	r2, [r3, #0]
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	330b      	adds	r3, #11
 800900c:	f042 0220 	orr.w	r2, r2, #32
 8009010:	b2d2      	uxtb	r2, r2
 8009012:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	331c      	adds	r3, #28
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	701a      	strb	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	b29b      	uxth	r3, r3
 800902e:	0a1b      	lsrs	r3, r3, #8
 8009030:	b29a      	uxth	r2, r3
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	331d      	adds	r3, #29
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	701a      	strb	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	0c1a      	lsrs	r2, r3, #16
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	331e      	adds	r3, #30
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	0e1a      	lsrs	r2, r3, #24
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	331f      	adds	r3, #31
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	4619      	mov	r1, r3
 8009068:	6938      	ldr	r0, [r7, #16]
 800906a:	f7fd fddb 	bl	8006c24 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800906e:	f7fc fb0b 	bl	8005688 <get_fattime>
 8009072:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	3316      	adds	r3, #22
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	b2d2      	uxtb	r2, r2
 800907c:	701a      	strb	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	b29b      	uxth	r3, r3
 8009082:	0a1b      	lsrs	r3, r3, #8
 8009084:	b29a      	uxth	r2, r3
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	3317      	adds	r3, #23
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	0c1a      	lsrs	r2, r3, #16
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	3318      	adds	r3, #24
 8009096:	b2d2      	uxtb	r2, r2
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	0e1a      	lsrs	r2, r3, #24
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	3319      	adds	r3, #25
 80090a2:	b2d2      	uxtb	r2, r2
 80090a4:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3312      	adds	r3, #18
 80090aa:	2200      	movs	r2, #0
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	3313      	adds	r3, #19
 80090b2:	2200      	movs	r2, #0
 80090b4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090bc:	799b      	ldrb	r3, [r3, #6]
 80090be:	f023 0320 	bic.w	r3, r3, #32
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ca:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d8:	2201      	movs	r2, #1
 80090da:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fc fe8b 	bl	8005e00 <sync_fs>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff ff2b 	bl	8008f5c <f_sync>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d119      	bne.n	8009144 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7fe ff4b 	bl	8007fac <validate>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d111      	bne.n	8009144 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	4618      	mov	r0, r3
 800912a:	f7fc fd77 	bl	8005c1c <dec_lock>
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d105      	bne.n	8009144 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913e:	461a      	mov	r2, r3
 8009140:	2300      	movs	r3, #0
 8009142:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009144:	7bfb      	ldrb	r3, [r7, #15]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800914e:	b580      	push	{r7, lr}
 8009150:	b08e      	sub	sp, #56	; 0x38
 8009152:	af00      	add	r7, sp, #0
 8009154:	60f8      	str	r0, [r7, #12]
 8009156:	60b9      	str	r1, [r7, #8]
 8009158:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800915a:	f107 030c 	add.w	r3, r7, #12
 800915e:	2200      	movs	r2, #0
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7fe fbf0 	bl	8007948 <find_volume>
 8009168:	4603      	mov	r3, r0
 800916a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8009174:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009178:	2b00      	cmp	r3, #0
 800917a:	f040 80bc 	bne.w	80092f6 <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009184:	691a      	ldr	r2, [r3, #16]
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	3b02      	subs	r3, #2
 8009190:	429a      	cmp	r2, r3
 8009192:	d806      	bhi.n	80091a2 <f_getfree+0x54>
			*nclst = fs->free_clust;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800919a:	691a      	ldr	r2, [r3, #16]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	e0a9      	b.n	80092f6 <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80091b0:	7efb      	ldrb	r3, [r7, #27]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d126      	bne.n	8009204 <f_getfree+0xb6>
				clst = 2;
 80091b6:	2302      	movs	r3, #2
 80091b8:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80091ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091bc:	69f8      	ldr	r0, [r7, #28]
 80091be:	f7fc ff03 	bl	8005fc8 <get_fat>
 80091c2:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ca:	d103      	bne.n	80091d4 <f_getfree+0x86>
 80091cc:	2301      	movs	r3, #1
 80091ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091d2:	e07c      	b.n	80092ce <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d103      	bne.n	80091e2 <f_getfree+0x94>
 80091da:	2302      	movs	r3, #2
 80091dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091e0:	e075      	b.n	80092ce <f_getfree+0x180>
					if (stat == 0) n++;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <f_getfree+0xa0>
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	3301      	adds	r3, #1
 80091ec:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f0:	3301      	adds	r3, #1
 80091f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091fe:	429a      	cmp	r2, r3
 8009200:	d3db      	bcc.n	80091ba <f_getfree+0x6c>
 8009202:	e064      	b.n	80092ce <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	627b      	str	r3, [r7, #36]	; 0x24
 800921c:	2300      	movs	r3, #0
 800921e:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8009220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009222:	2b00      	cmp	r3, #0
 8009224:	d114      	bne.n	8009250 <f_getfree+0x102>
						res = move_window(fs, sect++);
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	62ba      	str	r2, [r7, #40]	; 0x28
 800922c:	4619      	mov	r1, r3
 800922e:	69f8      	ldr	r0, [r7, #28]
 8009230:	f7fc fdb4 	bl	8005d9c <move_window>
 8009234:	4603      	mov	r3, r0
 8009236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800923a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800923e:	2b00      	cmp	r3, #0
 8009240:	d144      	bne.n	80092cc <f_getfree+0x17e>
						p = fs->win.d8;
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924c:	895b      	ldrh	r3, [r3, #10]
 800924e:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8009250:	7efb      	ldrb	r3, [r7, #27]
 8009252:	2b02      	cmp	r3, #2
 8009254:	d115      	bne.n	8009282 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	3301      	adds	r3, #1
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	021b      	lsls	r3, r3, #8
 800925e:	b21a      	sxth	r2, r3
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	b21b      	sxth	r3, r3
 8009266:	4313      	orrs	r3, r2
 8009268:	b21b      	sxth	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <f_getfree+0x126>
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	3301      	adds	r3, #1
 8009272:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	3302      	adds	r3, #2
 8009278:	623b      	str	r3, [r7, #32]
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	3b02      	subs	r3, #2
 800927e:	627b      	str	r3, [r7, #36]	; 0x24
 8009280:	e01d      	b.n	80092be <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	3303      	adds	r3, #3
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	061a      	lsls	r2, r3, #24
 800928a:	6a3b      	ldr	r3, [r7, #32]
 800928c:	3302      	adds	r3, #2
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	041b      	lsls	r3, r3, #16
 8009292:	4313      	orrs	r3, r2
 8009294:	6a3a      	ldr	r2, [r7, #32]
 8009296:	3201      	adds	r2, #1
 8009298:	7812      	ldrb	r2, [r2, #0]
 800929a:	0212      	lsls	r2, r2, #8
 800929c:	4313      	orrs	r3, r2
 800929e:	6a3a      	ldr	r2, [r7, #32]
 80092a0:	7812      	ldrb	r2, [r2, #0]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <f_getfree+0x164>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	3301      	adds	r3, #1
 80092b0:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	3304      	adds	r3, #4
 80092b6:	623b      	str	r3, [r7, #32]
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	3b04      	subs	r3, #4
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	3b01      	subs	r3, #1
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1aa      	bne.n	8009220 <f_getfree+0xd2>
 80092ca:	e000      	b.n	80092ce <f_getfree+0x180>
						if (res != FR_OK) break;
 80092cc:	bf00      	nop
			}
			fs->free_clust = n;
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d4:	461a      	mov	r2, r3
 80092d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d8:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e0:	795b      	ldrb	r3, [r3, #5]
 80092e2:	f043 0301 	orr.w	r3, r3, #1
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ee:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f4:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80092f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3738      	adds	r7, #56	; 0x38
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b088      	sub	sp, #32
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009316:	e01b      	b.n	8009350 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009318:	f107 0310 	add.w	r3, r7, #16
 800931c:	f107 0114 	add.w	r1, r7, #20
 8009320:	2201      	movs	r2, #1
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff f9f9 	bl	800871a <f_read>
		if (rc != 1) break;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d116      	bne.n	800935c <f_gets+0x5a>
		c = s[0];
 800932e:	7d3b      	ldrb	r3, [r7, #20]
 8009330:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	2b0d      	cmp	r3, #13
 8009336:	d100      	bne.n	800933a <f_gets+0x38>
 8009338:	e00a      	b.n	8009350 <f_gets+0x4e>
		*p++ = c;
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	61ba      	str	r2, [r7, #24]
 8009340:	7dfa      	ldrb	r2, [r7, #23]
 8009342:	701a      	strb	r2, [r3, #0]
		n++;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3301      	adds	r3, #1
 8009348:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800934a:	7dfb      	ldrb	r3, [r7, #23]
 800934c:	2b0a      	cmp	r3, #10
 800934e:	d007      	beq.n	8009360 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	3b01      	subs	r3, #1
 8009354:	69fa      	ldr	r2, [r7, #28]
 8009356:	429a      	cmp	r2, r3
 8009358:	dbde      	blt.n	8009318 <f_gets+0x16>
 800935a:	e002      	b.n	8009362 <f_gets+0x60>
		if (rc != 1) break;
 800935c:	bf00      	nop
 800935e:	e000      	b.n	8009362 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009360:	bf00      	nop
	}
	*p = 0;
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	2200      	movs	r2, #0
 8009366:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <f_gets+0x70>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	e000      	b.n	8009374 <f_gets+0x72>
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3720      	adds	r7, #32
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	2b0a      	cmp	r3, #10
 800938c:	d103      	bne.n	8009396 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800938e:	210d      	movs	r1, #13
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff fff3 	bl	800937c <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	db25      	blt.n	80093ee <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	60fa      	str	r2, [r7, #12]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	4413      	add	r3, r2
 80093ac:	78fa      	ldrb	r2, [r7, #3]
 80093ae:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b3c      	cmp	r3, #60	; 0x3c
 80093b4:	dd12      	ble.n	80093dc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f103 010c 	add.w	r1, r3, #12
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	f7ff fb90 	bl	8008aea <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d101      	bne.n	80093d6 <putc_bfd+0x5a>
 80093d2:	2300      	movs	r3, #0
 80093d4:	e001      	b.n	80093da <putc_bfd+0x5e>
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	609a      	str	r2, [r3, #8]
 80093ec:	e000      	b.n	80093f0 <putc_bfd+0x74>
	if (i < 0) return;
 80093ee:	bf00      	nop
}
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80093f6:	b590      	push	{r4, r7, lr}
 80093f8:	b097      	sub	sp, #92	; 0x5c
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800940c:	e009      	b.n	8009422 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	781a      	ldrb	r2, [r3, #0]
 8009416:	f107 030c 	add.w	r3, r7, #12
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff ffad 	bl	800937c <putc_bfd>
	while (*str)			/* Put the string */
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f1      	bne.n	800940e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	db15      	blt.n	800945c <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	461c      	mov	r4, r3
 8009436:	f107 0208 	add.w	r2, r7, #8
 800943a:	f107 030c 	add.w	r3, r7, #12
 800943e:	f103 010c 	add.w	r1, r3, #12
 8009442:	4613      	mov	r3, r2
 8009444:	4622      	mov	r2, r4
 8009446:	f7ff fb50 	bl	8008aea <f_write>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d105      	bne.n	800945c <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	4293      	cmp	r3, r2
 8009456:	d101      	bne.n	800945c <f_puts+0x66>
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	e001      	b.n	8009460 <f_puts+0x6a>
	return EOF;
 800945c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009460:	4618      	mov	r0, r3
 8009462:	375c      	adds	r7, #92	; 0x5c
 8009464:	46bd      	mov	sp, r7
 8009466:	bd90      	pop	{r4, r7, pc}

08009468 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009476:	2301      	movs	r3, #1
 8009478:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800947e:	4b1f      	ldr	r3, [pc, #124]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 8009480:	7a5b      	ldrb	r3, [r3, #9]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b01      	cmp	r3, #1
 8009486:	d831      	bhi.n	80094ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009488:	4b1c      	ldr	r3, [pc, #112]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 800948a:	7a5b      	ldrb	r3, [r3, #9]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	461a      	mov	r2, r3
 8009490:	4b1a      	ldr	r3, [pc, #104]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 8009492:	2100      	movs	r1, #0
 8009494:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009496:	4b19      	ldr	r3, [pc, #100]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 8009498:	7a5b      	ldrb	r3, [r3, #9]
 800949a:	b2db      	uxtb	r3, r3
 800949c:	4a17      	ldr	r2, [pc, #92]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80094a6:	4b15      	ldr	r3, [pc, #84]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 80094a8:	7a5b      	ldrb	r3, [r3, #9]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 80094b0:	4413      	add	r3, r2
 80094b2:	79fa      	ldrb	r2, [r7, #7]
 80094b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80094b6:	4b11      	ldr	r3, [pc, #68]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 80094b8:	7a5b      	ldrb	r3, [r3, #9]
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	b2d1      	uxtb	r1, r2
 80094c0:	4a0e      	ldr	r2, [pc, #56]	; (80094fc <FATFS_LinkDriverEx+0x94>)
 80094c2:	7251      	strb	r1, [r2, #9]
 80094c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80094c6:	7dbb      	ldrb	r3, [r7, #22]
 80094c8:	3330      	adds	r3, #48	; 0x30
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	3301      	adds	r3, #1
 80094d4:	223a      	movs	r2, #58	; 0x3a
 80094d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	3302      	adds	r3, #2
 80094dc:	222f      	movs	r2, #47	; 0x2f
 80094de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	3303      	adds	r3, #3
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	20000270 	.word	0x20000270

08009500 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800950a:	2200      	movs	r2, #0
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff ffaa 	bl	8009468 <FATFS_LinkDriverEx>
 8009514:	4603      	mov	r3, r0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	6039      	str	r1, [r7, #0]
 800952a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800952c:	88fb      	ldrh	r3, [r7, #6]
 800952e:	2b7f      	cmp	r3, #127	; 0x7f
 8009530:	d802      	bhi.n	8009538 <ff_convert+0x18>
		c = chr;
 8009532:	88fb      	ldrh	r3, [r7, #6]
 8009534:	81fb      	strh	r3, [r7, #14]
 8009536:	e025      	b.n	8009584 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	2bff      	cmp	r3, #255	; 0xff
 8009542:	d805      	bhi.n	8009550 <ff_convert+0x30>
 8009544:	88fb      	ldrh	r3, [r7, #6]
 8009546:	3b80      	subs	r3, #128	; 0x80
 8009548:	4a12      	ldr	r2, [pc, #72]	; (8009594 <ff_convert+0x74>)
 800954a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800954e:	e000      	b.n	8009552 <ff_convert+0x32>
 8009550:	2300      	movs	r3, #0
 8009552:	81fb      	strh	r3, [r7, #14]
 8009554:	e016      	b.n	8009584 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8009556:	2300      	movs	r3, #0
 8009558:	81fb      	strh	r3, [r7, #14]
 800955a:	e009      	b.n	8009570 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800955c:	89fb      	ldrh	r3, [r7, #14]
 800955e:	4a0d      	ldr	r2, [pc, #52]	; (8009594 <ff_convert+0x74>)
 8009560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	429a      	cmp	r2, r3
 8009568:	d006      	beq.n	8009578 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800956a:	89fb      	ldrh	r3, [r7, #14]
 800956c:	3301      	adds	r3, #1
 800956e:	81fb      	strh	r3, [r7, #14]
 8009570:	89fb      	ldrh	r3, [r7, #14]
 8009572:	2b7f      	cmp	r3, #127	; 0x7f
 8009574:	d9f2      	bls.n	800955c <ff_convert+0x3c>
 8009576:	e000      	b.n	800957a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009578:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800957a:	89fb      	ldrh	r3, [r7, #14]
 800957c:	3380      	adds	r3, #128	; 0x80
 800957e:	b29b      	uxth	r3, r3
 8009580:	b2db      	uxtb	r3, r3
 8009582:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009584:	89fb      	ldrh	r3, [r7, #14]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	0800a40c 	.word	0x0800a40c

08009598 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	e002      	b.n	80095ae <ff_wtoupper+0x16>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3301      	adds	r3, #1
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	4a0f      	ldr	r2, [pc, #60]	; (80095ec <ff_wtoupper+0x54>)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d006      	beq.n	80095c8 <ff_wtoupper+0x30>
 80095ba:	4a0c      	ldr	r2, [pc, #48]	; (80095ec <ff_wtoupper+0x54>)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d1ef      	bne.n	80095a8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80095c8:	4a08      	ldr	r2, [pc, #32]	; (80095ec <ff_wtoupper+0x54>)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d004      	beq.n	80095de <ff_wtoupper+0x46>
 80095d4:	4a06      	ldr	r2, [pc, #24]	; (80095f0 <ff_wtoupper+0x58>)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095dc:	e000      	b.n	80095e0 <ff_wtoupper+0x48>
 80095de:	88fb      	ldrh	r3, [r7, #6]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	0800a50c 	.word	0x0800a50c
 80095f0:	0800a6ec 	.word	0x0800a6ec

080095f4 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f835 	bl	800966c <malloc>
 8009602:	4603      	mov	r3, r0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f831 	bl	800967c <free>
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <__libc_init_array>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	4d0d      	ldr	r5, [pc, #52]	; (800965c <__libc_init_array+0x38>)
 8009628:	4c0d      	ldr	r4, [pc, #52]	; (8009660 <__libc_init_array+0x3c>)
 800962a:	1b64      	subs	r4, r4, r5
 800962c:	10a4      	asrs	r4, r4, #2
 800962e:	2600      	movs	r6, #0
 8009630:	42a6      	cmp	r6, r4
 8009632:	d109      	bne.n	8009648 <__libc_init_array+0x24>
 8009634:	4d0b      	ldr	r5, [pc, #44]	; (8009664 <__libc_init_array+0x40>)
 8009636:	4c0c      	ldr	r4, [pc, #48]	; (8009668 <__libc_init_array+0x44>)
 8009638:	f000 fcc6 	bl	8009fc8 <_init>
 800963c:	1b64      	subs	r4, r4, r5
 800963e:	10a4      	asrs	r4, r4, #2
 8009640:	2600      	movs	r6, #0
 8009642:	42a6      	cmp	r6, r4
 8009644:	d105      	bne.n	8009652 <__libc_init_array+0x2e>
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	f855 3b04 	ldr.w	r3, [r5], #4
 800964c:	4798      	blx	r3
 800964e:	3601      	adds	r6, #1
 8009650:	e7ee      	b.n	8009630 <__libc_init_array+0xc>
 8009652:	f855 3b04 	ldr.w	r3, [r5], #4
 8009656:	4798      	blx	r3
 8009658:	3601      	adds	r6, #1
 800965a:	e7f2      	b.n	8009642 <__libc_init_array+0x1e>
 800965c:	0800a900 	.word	0x0800a900
 8009660:	0800a900 	.word	0x0800a900
 8009664:	0800a900 	.word	0x0800a900
 8009668:	0800a904 	.word	0x0800a904

0800966c <malloc>:
 800966c:	4b02      	ldr	r3, [pc, #8]	; (8009678 <malloc+0xc>)
 800966e:	4601      	mov	r1, r0
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	f000 b87f 	b.w	8009774 <_malloc_r>
 8009676:	bf00      	nop
 8009678:	20000024 	.word	0x20000024

0800967c <free>:
 800967c:	4b02      	ldr	r3, [pc, #8]	; (8009688 <free+0xc>)
 800967e:	4601      	mov	r1, r0
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	f000 b80b 	b.w	800969c <_free_r>
 8009686:	bf00      	nop
 8009688:	20000024 	.word	0x20000024

0800968c <memset>:
 800968c:	4402      	add	r2, r0
 800968e:	4603      	mov	r3, r0
 8009690:	4293      	cmp	r3, r2
 8009692:	d100      	bne.n	8009696 <memset+0xa>
 8009694:	4770      	bx	lr
 8009696:	f803 1b01 	strb.w	r1, [r3], #1
 800969a:	e7f9      	b.n	8009690 <memset+0x4>

0800969c <_free_r>:
 800969c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800969e:	2900      	cmp	r1, #0
 80096a0:	d044      	beq.n	800972c <_free_r+0x90>
 80096a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a6:	9001      	str	r0, [sp, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f1a1 0404 	sub.w	r4, r1, #4
 80096ae:	bfb8      	it	lt
 80096b0:	18e4      	addlt	r4, r4, r3
 80096b2:	f000 f91d 	bl	80098f0 <__malloc_lock>
 80096b6:	4a1e      	ldr	r2, [pc, #120]	; (8009730 <_free_r+0x94>)
 80096b8:	9801      	ldr	r0, [sp, #4]
 80096ba:	6813      	ldr	r3, [r2, #0]
 80096bc:	b933      	cbnz	r3, 80096cc <_free_r+0x30>
 80096be:	6063      	str	r3, [r4, #4]
 80096c0:	6014      	str	r4, [r2, #0]
 80096c2:	b003      	add	sp, #12
 80096c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096c8:	f000 b918 	b.w	80098fc <__malloc_unlock>
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	d908      	bls.n	80096e2 <_free_r+0x46>
 80096d0:	6825      	ldr	r5, [r4, #0]
 80096d2:	1961      	adds	r1, r4, r5
 80096d4:	428b      	cmp	r3, r1
 80096d6:	bf01      	itttt	eq
 80096d8:	6819      	ldreq	r1, [r3, #0]
 80096da:	685b      	ldreq	r3, [r3, #4]
 80096dc:	1949      	addeq	r1, r1, r5
 80096de:	6021      	streq	r1, [r4, #0]
 80096e0:	e7ed      	b.n	80096be <_free_r+0x22>
 80096e2:	461a      	mov	r2, r3
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	b10b      	cbz	r3, 80096ec <_free_r+0x50>
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d9fa      	bls.n	80096e2 <_free_r+0x46>
 80096ec:	6811      	ldr	r1, [r2, #0]
 80096ee:	1855      	adds	r5, r2, r1
 80096f0:	42a5      	cmp	r5, r4
 80096f2:	d10b      	bne.n	800970c <_free_r+0x70>
 80096f4:	6824      	ldr	r4, [r4, #0]
 80096f6:	4421      	add	r1, r4
 80096f8:	1854      	adds	r4, r2, r1
 80096fa:	42a3      	cmp	r3, r4
 80096fc:	6011      	str	r1, [r2, #0]
 80096fe:	d1e0      	bne.n	80096c2 <_free_r+0x26>
 8009700:	681c      	ldr	r4, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	6053      	str	r3, [r2, #4]
 8009706:	4421      	add	r1, r4
 8009708:	6011      	str	r1, [r2, #0]
 800970a:	e7da      	b.n	80096c2 <_free_r+0x26>
 800970c:	d902      	bls.n	8009714 <_free_r+0x78>
 800970e:	230c      	movs	r3, #12
 8009710:	6003      	str	r3, [r0, #0]
 8009712:	e7d6      	b.n	80096c2 <_free_r+0x26>
 8009714:	6825      	ldr	r5, [r4, #0]
 8009716:	1961      	adds	r1, r4, r5
 8009718:	428b      	cmp	r3, r1
 800971a:	bf04      	itt	eq
 800971c:	6819      	ldreq	r1, [r3, #0]
 800971e:	685b      	ldreq	r3, [r3, #4]
 8009720:	6063      	str	r3, [r4, #4]
 8009722:	bf04      	itt	eq
 8009724:	1949      	addeq	r1, r1, r5
 8009726:	6021      	streq	r1, [r4, #0]
 8009728:	6054      	str	r4, [r2, #4]
 800972a:	e7ca      	b.n	80096c2 <_free_r+0x26>
 800972c:	b003      	add	sp, #12
 800972e:	bd30      	pop	{r4, r5, pc}
 8009730:	2000027c 	.word	0x2000027c

08009734 <sbrk_aligned>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	4e0e      	ldr	r6, [pc, #56]	; (8009770 <sbrk_aligned+0x3c>)
 8009738:	460c      	mov	r4, r1
 800973a:	6831      	ldr	r1, [r6, #0]
 800973c:	4605      	mov	r5, r0
 800973e:	b911      	cbnz	r1, 8009746 <sbrk_aligned+0x12>
 8009740:	f000 f88c 	bl	800985c <_sbrk_r>
 8009744:	6030      	str	r0, [r6, #0]
 8009746:	4621      	mov	r1, r4
 8009748:	4628      	mov	r0, r5
 800974a:	f000 f887 	bl	800985c <_sbrk_r>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d00a      	beq.n	8009768 <sbrk_aligned+0x34>
 8009752:	1cc4      	adds	r4, r0, #3
 8009754:	f024 0403 	bic.w	r4, r4, #3
 8009758:	42a0      	cmp	r0, r4
 800975a:	d007      	beq.n	800976c <sbrk_aligned+0x38>
 800975c:	1a21      	subs	r1, r4, r0
 800975e:	4628      	mov	r0, r5
 8009760:	f000 f87c 	bl	800985c <_sbrk_r>
 8009764:	3001      	adds	r0, #1
 8009766:	d101      	bne.n	800976c <sbrk_aligned+0x38>
 8009768:	f04f 34ff 	mov.w	r4, #4294967295
 800976c:	4620      	mov	r0, r4
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	20000280 	.word	0x20000280

08009774 <_malloc_r>:
 8009774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009778:	1ccd      	adds	r5, r1, #3
 800977a:	f025 0503 	bic.w	r5, r5, #3
 800977e:	3508      	adds	r5, #8
 8009780:	2d0c      	cmp	r5, #12
 8009782:	bf38      	it	cc
 8009784:	250c      	movcc	r5, #12
 8009786:	2d00      	cmp	r5, #0
 8009788:	4607      	mov	r7, r0
 800978a:	db01      	blt.n	8009790 <_malloc_r+0x1c>
 800978c:	42a9      	cmp	r1, r5
 800978e:	d905      	bls.n	800979c <_malloc_r+0x28>
 8009790:	230c      	movs	r3, #12
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	2600      	movs	r6, #0
 8009796:	4630      	mov	r0, r6
 8009798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800979c:	4e2e      	ldr	r6, [pc, #184]	; (8009858 <_malloc_r+0xe4>)
 800979e:	f000 f8a7 	bl	80098f0 <__malloc_lock>
 80097a2:	6833      	ldr	r3, [r6, #0]
 80097a4:	461c      	mov	r4, r3
 80097a6:	bb34      	cbnz	r4, 80097f6 <_malloc_r+0x82>
 80097a8:	4629      	mov	r1, r5
 80097aa:	4638      	mov	r0, r7
 80097ac:	f7ff ffc2 	bl	8009734 <sbrk_aligned>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	4604      	mov	r4, r0
 80097b4:	d14d      	bne.n	8009852 <_malloc_r+0xde>
 80097b6:	6834      	ldr	r4, [r6, #0]
 80097b8:	4626      	mov	r6, r4
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	d140      	bne.n	8009840 <_malloc_r+0xcc>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	4631      	mov	r1, r6
 80097c2:	4638      	mov	r0, r7
 80097c4:	eb04 0803 	add.w	r8, r4, r3
 80097c8:	f000 f848 	bl	800985c <_sbrk_r>
 80097cc:	4580      	cmp	r8, r0
 80097ce:	d13a      	bne.n	8009846 <_malloc_r+0xd2>
 80097d0:	6821      	ldr	r1, [r4, #0]
 80097d2:	3503      	adds	r5, #3
 80097d4:	1a6d      	subs	r5, r5, r1
 80097d6:	f025 0503 	bic.w	r5, r5, #3
 80097da:	3508      	adds	r5, #8
 80097dc:	2d0c      	cmp	r5, #12
 80097de:	bf38      	it	cc
 80097e0:	250c      	movcc	r5, #12
 80097e2:	4629      	mov	r1, r5
 80097e4:	4638      	mov	r0, r7
 80097e6:	f7ff ffa5 	bl	8009734 <sbrk_aligned>
 80097ea:	3001      	adds	r0, #1
 80097ec:	d02b      	beq.n	8009846 <_malloc_r+0xd2>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	442b      	add	r3, r5
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	e00e      	b.n	8009814 <_malloc_r+0xa0>
 80097f6:	6822      	ldr	r2, [r4, #0]
 80097f8:	1b52      	subs	r2, r2, r5
 80097fa:	d41e      	bmi.n	800983a <_malloc_r+0xc6>
 80097fc:	2a0b      	cmp	r2, #11
 80097fe:	d916      	bls.n	800982e <_malloc_r+0xba>
 8009800:	1961      	adds	r1, r4, r5
 8009802:	42a3      	cmp	r3, r4
 8009804:	6025      	str	r5, [r4, #0]
 8009806:	bf18      	it	ne
 8009808:	6059      	strne	r1, [r3, #4]
 800980a:	6863      	ldr	r3, [r4, #4]
 800980c:	bf08      	it	eq
 800980e:	6031      	streq	r1, [r6, #0]
 8009810:	5162      	str	r2, [r4, r5]
 8009812:	604b      	str	r3, [r1, #4]
 8009814:	4638      	mov	r0, r7
 8009816:	f104 060b 	add.w	r6, r4, #11
 800981a:	f000 f86f 	bl	80098fc <__malloc_unlock>
 800981e:	f026 0607 	bic.w	r6, r6, #7
 8009822:	1d23      	adds	r3, r4, #4
 8009824:	1af2      	subs	r2, r6, r3
 8009826:	d0b6      	beq.n	8009796 <_malloc_r+0x22>
 8009828:	1b9b      	subs	r3, r3, r6
 800982a:	50a3      	str	r3, [r4, r2]
 800982c:	e7b3      	b.n	8009796 <_malloc_r+0x22>
 800982e:	6862      	ldr	r2, [r4, #4]
 8009830:	42a3      	cmp	r3, r4
 8009832:	bf0c      	ite	eq
 8009834:	6032      	streq	r2, [r6, #0]
 8009836:	605a      	strne	r2, [r3, #4]
 8009838:	e7ec      	b.n	8009814 <_malloc_r+0xa0>
 800983a:	4623      	mov	r3, r4
 800983c:	6864      	ldr	r4, [r4, #4]
 800983e:	e7b2      	b.n	80097a6 <_malloc_r+0x32>
 8009840:	4634      	mov	r4, r6
 8009842:	6876      	ldr	r6, [r6, #4]
 8009844:	e7b9      	b.n	80097ba <_malloc_r+0x46>
 8009846:	230c      	movs	r3, #12
 8009848:	603b      	str	r3, [r7, #0]
 800984a:	4638      	mov	r0, r7
 800984c:	f000 f856 	bl	80098fc <__malloc_unlock>
 8009850:	e7a1      	b.n	8009796 <_malloc_r+0x22>
 8009852:	6025      	str	r5, [r4, #0]
 8009854:	e7de      	b.n	8009814 <_malloc_r+0xa0>
 8009856:	bf00      	nop
 8009858:	2000027c 	.word	0x2000027c

0800985c <_sbrk_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4d06      	ldr	r5, [pc, #24]	; (8009878 <_sbrk_r+0x1c>)
 8009860:	2300      	movs	r3, #0
 8009862:	4604      	mov	r4, r0
 8009864:	4608      	mov	r0, r1
 8009866:	602b      	str	r3, [r5, #0]
 8009868:	f000 fba0 	bl	8009fac <_sbrk>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d102      	bne.n	8009876 <_sbrk_r+0x1a>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	b103      	cbz	r3, 8009876 <_sbrk_r+0x1a>
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	bd38      	pop	{r3, r4, r5, pc}
 8009878:	20000284 	.word	0x20000284

0800987c <_vsniprintf_r>:
 800987c:	b530      	push	{r4, r5, lr}
 800987e:	4614      	mov	r4, r2
 8009880:	2c00      	cmp	r4, #0
 8009882:	b09b      	sub	sp, #108	; 0x6c
 8009884:	4605      	mov	r5, r0
 8009886:	461a      	mov	r2, r3
 8009888:	da05      	bge.n	8009896 <_vsniprintf_r+0x1a>
 800988a:	238b      	movs	r3, #139	; 0x8b
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	f04f 30ff 	mov.w	r0, #4294967295
 8009892:	b01b      	add	sp, #108	; 0x6c
 8009894:	bd30      	pop	{r4, r5, pc}
 8009896:	f44f 7302 	mov.w	r3, #520	; 0x208
 800989a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800989e:	bf14      	ite	ne
 80098a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80098a4:	4623      	moveq	r3, r4
 80098a6:	9302      	str	r3, [sp, #8]
 80098a8:	9305      	str	r3, [sp, #20]
 80098aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098ae:	9100      	str	r1, [sp, #0]
 80098b0:	9104      	str	r1, [sp, #16]
 80098b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80098b6:	4669      	mov	r1, sp
 80098b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80098ba:	f000 f881 	bl	80099c0 <_svfiprintf_r>
 80098be:	1c43      	adds	r3, r0, #1
 80098c0:	bfbc      	itt	lt
 80098c2:	238b      	movlt	r3, #139	; 0x8b
 80098c4:	602b      	strlt	r3, [r5, #0]
 80098c6:	2c00      	cmp	r4, #0
 80098c8:	d0e3      	beq.n	8009892 <_vsniprintf_r+0x16>
 80098ca:	9b00      	ldr	r3, [sp, #0]
 80098cc:	2200      	movs	r2, #0
 80098ce:	701a      	strb	r2, [r3, #0]
 80098d0:	e7df      	b.n	8009892 <_vsniprintf_r+0x16>
	...

080098d4 <vsniprintf>:
 80098d4:	b507      	push	{r0, r1, r2, lr}
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	4613      	mov	r3, r2
 80098da:	460a      	mov	r2, r1
 80098dc:	4601      	mov	r1, r0
 80098de:	4803      	ldr	r0, [pc, #12]	; (80098ec <vsniprintf+0x18>)
 80098e0:	6800      	ldr	r0, [r0, #0]
 80098e2:	f7ff ffcb 	bl	800987c <_vsniprintf_r>
 80098e6:	b003      	add	sp, #12
 80098e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80098ec:	20000024 	.word	0x20000024

080098f0 <__malloc_lock>:
 80098f0:	4801      	ldr	r0, [pc, #4]	; (80098f8 <__malloc_lock+0x8>)
 80098f2:	f000 baf9 	b.w	8009ee8 <__retarget_lock_acquire_recursive>
 80098f6:	bf00      	nop
 80098f8:	20000288 	.word	0x20000288

080098fc <__malloc_unlock>:
 80098fc:	4801      	ldr	r0, [pc, #4]	; (8009904 <__malloc_unlock+0x8>)
 80098fe:	f000 baf4 	b.w	8009eea <__retarget_lock_release_recursive>
 8009902:	bf00      	nop
 8009904:	20000288 	.word	0x20000288

08009908 <__ssputs_r>:
 8009908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	688e      	ldr	r6, [r1, #8]
 800990e:	429e      	cmp	r6, r3
 8009910:	4682      	mov	sl, r0
 8009912:	460c      	mov	r4, r1
 8009914:	4690      	mov	r8, r2
 8009916:	461f      	mov	r7, r3
 8009918:	d838      	bhi.n	800998c <__ssputs_r+0x84>
 800991a:	898a      	ldrh	r2, [r1, #12]
 800991c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009920:	d032      	beq.n	8009988 <__ssputs_r+0x80>
 8009922:	6825      	ldr	r5, [r4, #0]
 8009924:	6909      	ldr	r1, [r1, #16]
 8009926:	eba5 0901 	sub.w	r9, r5, r1
 800992a:	6965      	ldr	r5, [r4, #20]
 800992c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009934:	3301      	adds	r3, #1
 8009936:	444b      	add	r3, r9
 8009938:	106d      	asrs	r5, r5, #1
 800993a:	429d      	cmp	r5, r3
 800993c:	bf38      	it	cc
 800993e:	461d      	movcc	r5, r3
 8009940:	0553      	lsls	r3, r2, #21
 8009942:	d531      	bpl.n	80099a8 <__ssputs_r+0xa0>
 8009944:	4629      	mov	r1, r5
 8009946:	f7ff ff15 	bl	8009774 <_malloc_r>
 800994a:	4606      	mov	r6, r0
 800994c:	b950      	cbnz	r0, 8009964 <__ssputs_r+0x5c>
 800994e:	230c      	movs	r3, #12
 8009950:	f8ca 3000 	str.w	r3, [sl]
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	f04f 30ff 	mov.w	r0, #4294967295
 8009960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009964:	6921      	ldr	r1, [r4, #16]
 8009966:	464a      	mov	r2, r9
 8009968:	f000 fac0 	bl	8009eec <memcpy>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	6126      	str	r6, [r4, #16]
 800997a:	6165      	str	r5, [r4, #20]
 800997c:	444e      	add	r6, r9
 800997e:	eba5 0509 	sub.w	r5, r5, r9
 8009982:	6026      	str	r6, [r4, #0]
 8009984:	60a5      	str	r5, [r4, #8]
 8009986:	463e      	mov	r6, r7
 8009988:	42be      	cmp	r6, r7
 800998a:	d900      	bls.n	800998e <__ssputs_r+0x86>
 800998c:	463e      	mov	r6, r7
 800998e:	6820      	ldr	r0, [r4, #0]
 8009990:	4632      	mov	r2, r6
 8009992:	4641      	mov	r1, r8
 8009994:	f000 fab8 	bl	8009f08 <memmove>
 8009998:	68a3      	ldr	r3, [r4, #8]
 800999a:	1b9b      	subs	r3, r3, r6
 800999c:	60a3      	str	r3, [r4, #8]
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	4433      	add	r3, r6
 80099a2:	6023      	str	r3, [r4, #0]
 80099a4:	2000      	movs	r0, #0
 80099a6:	e7db      	b.n	8009960 <__ssputs_r+0x58>
 80099a8:	462a      	mov	r2, r5
 80099aa:	f000 fac7 	bl	8009f3c <_realloc_r>
 80099ae:	4606      	mov	r6, r0
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d1e1      	bne.n	8009978 <__ssputs_r+0x70>
 80099b4:	6921      	ldr	r1, [r4, #16]
 80099b6:	4650      	mov	r0, sl
 80099b8:	f7ff fe70 	bl	800969c <_free_r>
 80099bc:	e7c7      	b.n	800994e <__ssputs_r+0x46>
	...

080099c0 <_svfiprintf_r>:
 80099c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	4698      	mov	r8, r3
 80099c6:	898b      	ldrh	r3, [r1, #12]
 80099c8:	061b      	lsls	r3, r3, #24
 80099ca:	b09d      	sub	sp, #116	; 0x74
 80099cc:	4607      	mov	r7, r0
 80099ce:	460d      	mov	r5, r1
 80099d0:	4614      	mov	r4, r2
 80099d2:	d50e      	bpl.n	80099f2 <_svfiprintf_r+0x32>
 80099d4:	690b      	ldr	r3, [r1, #16]
 80099d6:	b963      	cbnz	r3, 80099f2 <_svfiprintf_r+0x32>
 80099d8:	2140      	movs	r1, #64	; 0x40
 80099da:	f7ff fecb 	bl	8009774 <_malloc_r>
 80099de:	6028      	str	r0, [r5, #0]
 80099e0:	6128      	str	r0, [r5, #16]
 80099e2:	b920      	cbnz	r0, 80099ee <_svfiprintf_r+0x2e>
 80099e4:	230c      	movs	r3, #12
 80099e6:	603b      	str	r3, [r7, #0]
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ec:	e0d1      	b.n	8009b92 <_svfiprintf_r+0x1d2>
 80099ee:	2340      	movs	r3, #64	; 0x40
 80099f0:	616b      	str	r3, [r5, #20]
 80099f2:	2300      	movs	r3, #0
 80099f4:	9309      	str	r3, [sp, #36]	; 0x24
 80099f6:	2320      	movs	r3, #32
 80099f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a00:	2330      	movs	r3, #48	; 0x30
 8009a02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009bac <_svfiprintf_r+0x1ec>
 8009a06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a0a:	f04f 0901 	mov.w	r9, #1
 8009a0e:	4623      	mov	r3, r4
 8009a10:	469a      	mov	sl, r3
 8009a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a16:	b10a      	cbz	r2, 8009a1c <_svfiprintf_r+0x5c>
 8009a18:	2a25      	cmp	r2, #37	; 0x25
 8009a1a:	d1f9      	bne.n	8009a10 <_svfiprintf_r+0x50>
 8009a1c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a20:	d00b      	beq.n	8009a3a <_svfiprintf_r+0x7a>
 8009a22:	465b      	mov	r3, fp
 8009a24:	4622      	mov	r2, r4
 8009a26:	4629      	mov	r1, r5
 8009a28:	4638      	mov	r0, r7
 8009a2a:	f7ff ff6d 	bl	8009908 <__ssputs_r>
 8009a2e:	3001      	adds	r0, #1
 8009a30:	f000 80aa 	beq.w	8009b88 <_svfiprintf_r+0x1c8>
 8009a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a36:	445a      	add	r2, fp
 8009a38:	9209      	str	r2, [sp, #36]	; 0x24
 8009a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 80a2 	beq.w	8009b88 <_svfiprintf_r+0x1c8>
 8009a44:	2300      	movs	r3, #0
 8009a46:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a4e:	f10a 0a01 	add.w	sl, sl, #1
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	9307      	str	r3, [sp, #28]
 8009a56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a5a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a5c:	4654      	mov	r4, sl
 8009a5e:	2205      	movs	r2, #5
 8009a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a64:	4851      	ldr	r0, [pc, #324]	; (8009bac <_svfiprintf_r+0x1ec>)
 8009a66:	f7f6 fbc3 	bl	80001f0 <memchr>
 8009a6a:	9a04      	ldr	r2, [sp, #16]
 8009a6c:	b9d8      	cbnz	r0, 8009aa6 <_svfiprintf_r+0xe6>
 8009a6e:	06d0      	lsls	r0, r2, #27
 8009a70:	bf44      	itt	mi
 8009a72:	2320      	movmi	r3, #32
 8009a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a78:	0711      	lsls	r1, r2, #28
 8009a7a:	bf44      	itt	mi
 8009a7c:	232b      	movmi	r3, #43	; 0x2b
 8009a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a82:	f89a 3000 	ldrb.w	r3, [sl]
 8009a86:	2b2a      	cmp	r3, #42	; 0x2a
 8009a88:	d015      	beq.n	8009ab6 <_svfiprintf_r+0xf6>
 8009a8a:	9a07      	ldr	r2, [sp, #28]
 8009a8c:	4654      	mov	r4, sl
 8009a8e:	2000      	movs	r0, #0
 8009a90:	f04f 0c0a 	mov.w	ip, #10
 8009a94:	4621      	mov	r1, r4
 8009a96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a9a:	3b30      	subs	r3, #48	; 0x30
 8009a9c:	2b09      	cmp	r3, #9
 8009a9e:	d94e      	bls.n	8009b3e <_svfiprintf_r+0x17e>
 8009aa0:	b1b0      	cbz	r0, 8009ad0 <_svfiprintf_r+0x110>
 8009aa2:	9207      	str	r2, [sp, #28]
 8009aa4:	e014      	b.n	8009ad0 <_svfiprintf_r+0x110>
 8009aa6:	eba0 0308 	sub.w	r3, r0, r8
 8009aaa:	fa09 f303 	lsl.w	r3, r9, r3
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	9304      	str	r3, [sp, #16]
 8009ab2:	46a2      	mov	sl, r4
 8009ab4:	e7d2      	b.n	8009a5c <_svfiprintf_r+0x9c>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	1d19      	adds	r1, r3, #4
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	9103      	str	r1, [sp, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfbb      	ittet	lt
 8009ac2:	425b      	neglt	r3, r3
 8009ac4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ac8:	9307      	strge	r3, [sp, #28]
 8009aca:	9307      	strlt	r3, [sp, #28]
 8009acc:	bfb8      	it	lt
 8009ace:	9204      	strlt	r2, [sp, #16]
 8009ad0:	7823      	ldrb	r3, [r4, #0]
 8009ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ad4:	d10c      	bne.n	8009af0 <_svfiprintf_r+0x130>
 8009ad6:	7863      	ldrb	r3, [r4, #1]
 8009ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8009ada:	d135      	bne.n	8009b48 <_svfiprintf_r+0x188>
 8009adc:	9b03      	ldr	r3, [sp, #12]
 8009ade:	1d1a      	adds	r2, r3, #4
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	9203      	str	r2, [sp, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	bfb8      	it	lt
 8009ae8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009aec:	3402      	adds	r4, #2
 8009aee:	9305      	str	r3, [sp, #20]
 8009af0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bbc <_svfiprintf_r+0x1fc>
 8009af4:	7821      	ldrb	r1, [r4, #0]
 8009af6:	2203      	movs	r2, #3
 8009af8:	4650      	mov	r0, sl
 8009afa:	f7f6 fb79 	bl	80001f0 <memchr>
 8009afe:	b140      	cbz	r0, 8009b12 <_svfiprintf_r+0x152>
 8009b00:	2340      	movs	r3, #64	; 0x40
 8009b02:	eba0 000a 	sub.w	r0, r0, sl
 8009b06:	fa03 f000 	lsl.w	r0, r3, r0
 8009b0a:	9b04      	ldr	r3, [sp, #16]
 8009b0c:	4303      	orrs	r3, r0
 8009b0e:	3401      	adds	r4, #1
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b16:	4826      	ldr	r0, [pc, #152]	; (8009bb0 <_svfiprintf_r+0x1f0>)
 8009b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b1c:	2206      	movs	r2, #6
 8009b1e:	f7f6 fb67 	bl	80001f0 <memchr>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d038      	beq.n	8009b98 <_svfiprintf_r+0x1d8>
 8009b26:	4b23      	ldr	r3, [pc, #140]	; (8009bb4 <_svfiprintf_r+0x1f4>)
 8009b28:	bb1b      	cbnz	r3, 8009b72 <_svfiprintf_r+0x1b2>
 8009b2a:	9b03      	ldr	r3, [sp, #12]
 8009b2c:	3307      	adds	r3, #7
 8009b2e:	f023 0307 	bic.w	r3, r3, #7
 8009b32:	3308      	adds	r3, #8
 8009b34:	9303      	str	r3, [sp, #12]
 8009b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b38:	4433      	add	r3, r6
 8009b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3c:	e767      	b.n	8009a0e <_svfiprintf_r+0x4e>
 8009b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b42:	460c      	mov	r4, r1
 8009b44:	2001      	movs	r0, #1
 8009b46:	e7a5      	b.n	8009a94 <_svfiprintf_r+0xd4>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	3401      	adds	r4, #1
 8009b4c:	9305      	str	r3, [sp, #20]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	f04f 0c0a 	mov.w	ip, #10
 8009b54:	4620      	mov	r0, r4
 8009b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b5a:	3a30      	subs	r2, #48	; 0x30
 8009b5c:	2a09      	cmp	r2, #9
 8009b5e:	d903      	bls.n	8009b68 <_svfiprintf_r+0x1a8>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0c5      	beq.n	8009af0 <_svfiprintf_r+0x130>
 8009b64:	9105      	str	r1, [sp, #20]
 8009b66:	e7c3      	b.n	8009af0 <_svfiprintf_r+0x130>
 8009b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e7f0      	b.n	8009b54 <_svfiprintf_r+0x194>
 8009b72:	ab03      	add	r3, sp, #12
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	462a      	mov	r2, r5
 8009b78:	4b0f      	ldr	r3, [pc, #60]	; (8009bb8 <_svfiprintf_r+0x1f8>)
 8009b7a:	a904      	add	r1, sp, #16
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	f3af 8000 	nop.w
 8009b82:	1c42      	adds	r2, r0, #1
 8009b84:	4606      	mov	r6, r0
 8009b86:	d1d6      	bne.n	8009b36 <_svfiprintf_r+0x176>
 8009b88:	89ab      	ldrh	r3, [r5, #12]
 8009b8a:	065b      	lsls	r3, r3, #25
 8009b8c:	f53f af2c 	bmi.w	80099e8 <_svfiprintf_r+0x28>
 8009b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b92:	b01d      	add	sp, #116	; 0x74
 8009b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b98:	ab03      	add	r3, sp, #12
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	462a      	mov	r2, r5
 8009b9e:	4b06      	ldr	r3, [pc, #24]	; (8009bb8 <_svfiprintf_r+0x1f8>)
 8009ba0:	a904      	add	r1, sp, #16
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	f000 f87a 	bl	8009c9c <_printf_i>
 8009ba8:	e7eb      	b.n	8009b82 <_svfiprintf_r+0x1c2>
 8009baa:	bf00      	nop
 8009bac:	0800a8cc 	.word	0x0800a8cc
 8009bb0:	0800a8d6 	.word	0x0800a8d6
 8009bb4:	00000000 	.word	0x00000000
 8009bb8:	08009909 	.word	0x08009909
 8009bbc:	0800a8d2 	.word	0x0800a8d2

08009bc0 <_printf_common>:
 8009bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc4:	4616      	mov	r6, r2
 8009bc6:	4699      	mov	r9, r3
 8009bc8:	688a      	ldr	r2, [r1, #8]
 8009bca:	690b      	ldr	r3, [r1, #16]
 8009bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	bfb8      	it	lt
 8009bd4:	4613      	movlt	r3, r2
 8009bd6:	6033      	str	r3, [r6, #0]
 8009bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bdc:	4607      	mov	r7, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	b10a      	cbz	r2, 8009be6 <_printf_common+0x26>
 8009be2:	3301      	adds	r3, #1
 8009be4:	6033      	str	r3, [r6, #0]
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	0699      	lsls	r1, r3, #26
 8009bea:	bf42      	ittt	mi
 8009bec:	6833      	ldrmi	r3, [r6, #0]
 8009bee:	3302      	addmi	r3, #2
 8009bf0:	6033      	strmi	r3, [r6, #0]
 8009bf2:	6825      	ldr	r5, [r4, #0]
 8009bf4:	f015 0506 	ands.w	r5, r5, #6
 8009bf8:	d106      	bne.n	8009c08 <_printf_common+0x48>
 8009bfa:	f104 0a19 	add.w	sl, r4, #25
 8009bfe:	68e3      	ldr	r3, [r4, #12]
 8009c00:	6832      	ldr	r2, [r6, #0]
 8009c02:	1a9b      	subs	r3, r3, r2
 8009c04:	42ab      	cmp	r3, r5
 8009c06:	dc26      	bgt.n	8009c56 <_printf_common+0x96>
 8009c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c0c:	1e13      	subs	r3, r2, #0
 8009c0e:	6822      	ldr	r2, [r4, #0]
 8009c10:	bf18      	it	ne
 8009c12:	2301      	movne	r3, #1
 8009c14:	0692      	lsls	r2, r2, #26
 8009c16:	d42b      	bmi.n	8009c70 <_printf_common+0xb0>
 8009c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	4638      	mov	r0, r7
 8009c20:	47c0      	blx	r8
 8009c22:	3001      	adds	r0, #1
 8009c24:	d01e      	beq.n	8009c64 <_printf_common+0xa4>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	68e5      	ldr	r5, [r4, #12]
 8009c2a:	6832      	ldr	r2, [r6, #0]
 8009c2c:	f003 0306 	and.w	r3, r3, #6
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	bf08      	it	eq
 8009c34:	1aad      	subeq	r5, r5, r2
 8009c36:	68a3      	ldr	r3, [r4, #8]
 8009c38:	6922      	ldr	r2, [r4, #16]
 8009c3a:	bf0c      	ite	eq
 8009c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c40:	2500      	movne	r5, #0
 8009c42:	4293      	cmp	r3, r2
 8009c44:	bfc4      	itt	gt
 8009c46:	1a9b      	subgt	r3, r3, r2
 8009c48:	18ed      	addgt	r5, r5, r3
 8009c4a:	2600      	movs	r6, #0
 8009c4c:	341a      	adds	r4, #26
 8009c4e:	42b5      	cmp	r5, r6
 8009c50:	d11a      	bne.n	8009c88 <_printf_common+0xc8>
 8009c52:	2000      	movs	r0, #0
 8009c54:	e008      	b.n	8009c68 <_printf_common+0xa8>
 8009c56:	2301      	movs	r3, #1
 8009c58:	4652      	mov	r2, sl
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	47c0      	blx	r8
 8009c60:	3001      	adds	r0, #1
 8009c62:	d103      	bne.n	8009c6c <_printf_common+0xac>
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295
 8009c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	e7c6      	b.n	8009bfe <_printf_common+0x3e>
 8009c70:	18e1      	adds	r1, r4, r3
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	2030      	movs	r0, #48	; 0x30
 8009c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c7a:	4422      	add	r2, r4
 8009c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c84:	3302      	adds	r3, #2
 8009c86:	e7c7      	b.n	8009c18 <_printf_common+0x58>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	4638      	mov	r0, r7
 8009c90:	47c0      	blx	r8
 8009c92:	3001      	adds	r0, #1
 8009c94:	d0e6      	beq.n	8009c64 <_printf_common+0xa4>
 8009c96:	3601      	adds	r6, #1
 8009c98:	e7d9      	b.n	8009c4e <_printf_common+0x8e>
	...

08009c9c <_printf_i>:
 8009c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	7e0f      	ldrb	r7, [r1, #24]
 8009ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ca4:	2f78      	cmp	r7, #120	; 0x78
 8009ca6:	4691      	mov	r9, r2
 8009ca8:	4680      	mov	r8, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	469a      	mov	sl, r3
 8009cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cb2:	d807      	bhi.n	8009cc4 <_printf_i+0x28>
 8009cb4:	2f62      	cmp	r7, #98	; 0x62
 8009cb6:	d80a      	bhi.n	8009cce <_printf_i+0x32>
 8009cb8:	2f00      	cmp	r7, #0
 8009cba:	f000 80d8 	beq.w	8009e6e <_printf_i+0x1d2>
 8009cbe:	2f58      	cmp	r7, #88	; 0x58
 8009cc0:	f000 80a3 	beq.w	8009e0a <_printf_i+0x16e>
 8009cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ccc:	e03a      	b.n	8009d44 <_printf_i+0xa8>
 8009cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cd2:	2b15      	cmp	r3, #21
 8009cd4:	d8f6      	bhi.n	8009cc4 <_printf_i+0x28>
 8009cd6:	a101      	add	r1, pc, #4	; (adr r1, 8009cdc <_printf_i+0x40>)
 8009cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cdc:	08009d35 	.word	0x08009d35
 8009ce0:	08009d49 	.word	0x08009d49
 8009ce4:	08009cc5 	.word	0x08009cc5
 8009ce8:	08009cc5 	.word	0x08009cc5
 8009cec:	08009cc5 	.word	0x08009cc5
 8009cf0:	08009cc5 	.word	0x08009cc5
 8009cf4:	08009d49 	.word	0x08009d49
 8009cf8:	08009cc5 	.word	0x08009cc5
 8009cfc:	08009cc5 	.word	0x08009cc5
 8009d00:	08009cc5 	.word	0x08009cc5
 8009d04:	08009cc5 	.word	0x08009cc5
 8009d08:	08009e55 	.word	0x08009e55
 8009d0c:	08009d79 	.word	0x08009d79
 8009d10:	08009e37 	.word	0x08009e37
 8009d14:	08009cc5 	.word	0x08009cc5
 8009d18:	08009cc5 	.word	0x08009cc5
 8009d1c:	08009e77 	.word	0x08009e77
 8009d20:	08009cc5 	.word	0x08009cc5
 8009d24:	08009d79 	.word	0x08009d79
 8009d28:	08009cc5 	.word	0x08009cc5
 8009d2c:	08009cc5 	.word	0x08009cc5
 8009d30:	08009e3f 	.word	0x08009e3f
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	1d1a      	adds	r2, r3, #4
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	602a      	str	r2, [r5, #0]
 8009d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d44:	2301      	movs	r3, #1
 8009d46:	e0a3      	b.n	8009e90 <_printf_i+0x1f4>
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	6829      	ldr	r1, [r5, #0]
 8009d4c:	0606      	lsls	r6, r0, #24
 8009d4e:	f101 0304 	add.w	r3, r1, #4
 8009d52:	d50a      	bpl.n	8009d6a <_printf_i+0xce>
 8009d54:	680e      	ldr	r6, [r1, #0]
 8009d56:	602b      	str	r3, [r5, #0]
 8009d58:	2e00      	cmp	r6, #0
 8009d5a:	da03      	bge.n	8009d64 <_printf_i+0xc8>
 8009d5c:	232d      	movs	r3, #45	; 0x2d
 8009d5e:	4276      	negs	r6, r6
 8009d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d64:	485e      	ldr	r0, [pc, #376]	; (8009ee0 <_printf_i+0x244>)
 8009d66:	230a      	movs	r3, #10
 8009d68:	e019      	b.n	8009d9e <_printf_i+0x102>
 8009d6a:	680e      	ldr	r6, [r1, #0]
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d72:	bf18      	it	ne
 8009d74:	b236      	sxthne	r6, r6
 8009d76:	e7ef      	b.n	8009d58 <_printf_i+0xbc>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	6820      	ldr	r0, [r4, #0]
 8009d7c:	1d19      	adds	r1, r3, #4
 8009d7e:	6029      	str	r1, [r5, #0]
 8009d80:	0601      	lsls	r1, r0, #24
 8009d82:	d501      	bpl.n	8009d88 <_printf_i+0xec>
 8009d84:	681e      	ldr	r6, [r3, #0]
 8009d86:	e002      	b.n	8009d8e <_printf_i+0xf2>
 8009d88:	0646      	lsls	r6, r0, #25
 8009d8a:	d5fb      	bpl.n	8009d84 <_printf_i+0xe8>
 8009d8c:	881e      	ldrh	r6, [r3, #0]
 8009d8e:	4854      	ldr	r0, [pc, #336]	; (8009ee0 <_printf_i+0x244>)
 8009d90:	2f6f      	cmp	r7, #111	; 0x6f
 8009d92:	bf0c      	ite	eq
 8009d94:	2308      	moveq	r3, #8
 8009d96:	230a      	movne	r3, #10
 8009d98:	2100      	movs	r1, #0
 8009d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d9e:	6865      	ldr	r5, [r4, #4]
 8009da0:	60a5      	str	r5, [r4, #8]
 8009da2:	2d00      	cmp	r5, #0
 8009da4:	bfa2      	ittt	ge
 8009da6:	6821      	ldrge	r1, [r4, #0]
 8009da8:	f021 0104 	bicge.w	r1, r1, #4
 8009dac:	6021      	strge	r1, [r4, #0]
 8009dae:	b90e      	cbnz	r6, 8009db4 <_printf_i+0x118>
 8009db0:	2d00      	cmp	r5, #0
 8009db2:	d04d      	beq.n	8009e50 <_printf_i+0x1b4>
 8009db4:	4615      	mov	r5, r2
 8009db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009dba:	fb03 6711 	mls	r7, r3, r1, r6
 8009dbe:	5dc7      	ldrb	r7, [r0, r7]
 8009dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009dc4:	4637      	mov	r7, r6
 8009dc6:	42bb      	cmp	r3, r7
 8009dc8:	460e      	mov	r6, r1
 8009dca:	d9f4      	bls.n	8009db6 <_printf_i+0x11a>
 8009dcc:	2b08      	cmp	r3, #8
 8009dce:	d10b      	bne.n	8009de8 <_printf_i+0x14c>
 8009dd0:	6823      	ldr	r3, [r4, #0]
 8009dd2:	07de      	lsls	r6, r3, #31
 8009dd4:	d508      	bpl.n	8009de8 <_printf_i+0x14c>
 8009dd6:	6923      	ldr	r3, [r4, #16]
 8009dd8:	6861      	ldr	r1, [r4, #4]
 8009dda:	4299      	cmp	r1, r3
 8009ddc:	bfde      	ittt	le
 8009dde:	2330      	movle	r3, #48	; 0x30
 8009de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009de8:	1b52      	subs	r2, r2, r5
 8009dea:	6122      	str	r2, [r4, #16]
 8009dec:	f8cd a000 	str.w	sl, [sp]
 8009df0:	464b      	mov	r3, r9
 8009df2:	aa03      	add	r2, sp, #12
 8009df4:	4621      	mov	r1, r4
 8009df6:	4640      	mov	r0, r8
 8009df8:	f7ff fee2 	bl	8009bc0 <_printf_common>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d14c      	bne.n	8009e9a <_printf_i+0x1fe>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	b004      	add	sp, #16
 8009e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e0a:	4835      	ldr	r0, [pc, #212]	; (8009ee0 <_printf_i+0x244>)
 8009e0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009e10:	6829      	ldr	r1, [r5, #0]
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e18:	6029      	str	r1, [r5, #0]
 8009e1a:	061d      	lsls	r5, r3, #24
 8009e1c:	d514      	bpl.n	8009e48 <_printf_i+0x1ac>
 8009e1e:	07df      	lsls	r7, r3, #31
 8009e20:	bf44      	itt	mi
 8009e22:	f043 0320 	orrmi.w	r3, r3, #32
 8009e26:	6023      	strmi	r3, [r4, #0]
 8009e28:	b91e      	cbnz	r6, 8009e32 <_printf_i+0x196>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	f023 0320 	bic.w	r3, r3, #32
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	2310      	movs	r3, #16
 8009e34:	e7b0      	b.n	8009d98 <_printf_i+0xfc>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	f043 0320 	orr.w	r3, r3, #32
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	2378      	movs	r3, #120	; 0x78
 8009e40:	4828      	ldr	r0, [pc, #160]	; (8009ee4 <_printf_i+0x248>)
 8009e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e46:	e7e3      	b.n	8009e10 <_printf_i+0x174>
 8009e48:	0659      	lsls	r1, r3, #25
 8009e4a:	bf48      	it	mi
 8009e4c:	b2b6      	uxthmi	r6, r6
 8009e4e:	e7e6      	b.n	8009e1e <_printf_i+0x182>
 8009e50:	4615      	mov	r5, r2
 8009e52:	e7bb      	b.n	8009dcc <_printf_i+0x130>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	6826      	ldr	r6, [r4, #0]
 8009e58:	6961      	ldr	r1, [r4, #20]
 8009e5a:	1d18      	adds	r0, r3, #4
 8009e5c:	6028      	str	r0, [r5, #0]
 8009e5e:	0635      	lsls	r5, r6, #24
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	d501      	bpl.n	8009e68 <_printf_i+0x1cc>
 8009e64:	6019      	str	r1, [r3, #0]
 8009e66:	e002      	b.n	8009e6e <_printf_i+0x1d2>
 8009e68:	0670      	lsls	r0, r6, #25
 8009e6a:	d5fb      	bpl.n	8009e64 <_printf_i+0x1c8>
 8009e6c:	8019      	strh	r1, [r3, #0]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6123      	str	r3, [r4, #16]
 8009e72:	4615      	mov	r5, r2
 8009e74:	e7ba      	b.n	8009dec <_printf_i+0x150>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	1d1a      	adds	r2, r3, #4
 8009e7a:	602a      	str	r2, [r5, #0]
 8009e7c:	681d      	ldr	r5, [r3, #0]
 8009e7e:	6862      	ldr	r2, [r4, #4]
 8009e80:	2100      	movs	r1, #0
 8009e82:	4628      	mov	r0, r5
 8009e84:	f7f6 f9b4 	bl	80001f0 <memchr>
 8009e88:	b108      	cbz	r0, 8009e8e <_printf_i+0x1f2>
 8009e8a:	1b40      	subs	r0, r0, r5
 8009e8c:	6060      	str	r0, [r4, #4]
 8009e8e:	6863      	ldr	r3, [r4, #4]
 8009e90:	6123      	str	r3, [r4, #16]
 8009e92:	2300      	movs	r3, #0
 8009e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e98:	e7a8      	b.n	8009dec <_printf_i+0x150>
 8009e9a:	6923      	ldr	r3, [r4, #16]
 8009e9c:	462a      	mov	r2, r5
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	47d0      	blx	sl
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d0ab      	beq.n	8009e00 <_printf_i+0x164>
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	079b      	lsls	r3, r3, #30
 8009eac:	d413      	bmi.n	8009ed6 <_printf_i+0x23a>
 8009eae:	68e0      	ldr	r0, [r4, #12]
 8009eb0:	9b03      	ldr	r3, [sp, #12]
 8009eb2:	4298      	cmp	r0, r3
 8009eb4:	bfb8      	it	lt
 8009eb6:	4618      	movlt	r0, r3
 8009eb8:	e7a4      	b.n	8009e04 <_printf_i+0x168>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	47d0      	blx	sl
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d09b      	beq.n	8009e00 <_printf_i+0x164>
 8009ec8:	3501      	adds	r5, #1
 8009eca:	68e3      	ldr	r3, [r4, #12]
 8009ecc:	9903      	ldr	r1, [sp, #12]
 8009ece:	1a5b      	subs	r3, r3, r1
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	dcf2      	bgt.n	8009eba <_printf_i+0x21e>
 8009ed4:	e7eb      	b.n	8009eae <_printf_i+0x212>
 8009ed6:	2500      	movs	r5, #0
 8009ed8:	f104 0619 	add.w	r6, r4, #25
 8009edc:	e7f5      	b.n	8009eca <_printf_i+0x22e>
 8009ede:	bf00      	nop
 8009ee0:	0800a8dd 	.word	0x0800a8dd
 8009ee4:	0800a8ee 	.word	0x0800a8ee

08009ee8 <__retarget_lock_acquire_recursive>:
 8009ee8:	4770      	bx	lr

08009eea <__retarget_lock_release_recursive>:
 8009eea:	4770      	bx	lr

08009eec <memcpy>:
 8009eec:	440a      	add	r2, r1
 8009eee:	4291      	cmp	r1, r2
 8009ef0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ef4:	d100      	bne.n	8009ef8 <memcpy+0xc>
 8009ef6:	4770      	bx	lr
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f02:	4291      	cmp	r1, r2
 8009f04:	d1f9      	bne.n	8009efa <memcpy+0xe>
 8009f06:	bd10      	pop	{r4, pc}

08009f08 <memmove>:
 8009f08:	4288      	cmp	r0, r1
 8009f0a:	b510      	push	{r4, lr}
 8009f0c:	eb01 0402 	add.w	r4, r1, r2
 8009f10:	d902      	bls.n	8009f18 <memmove+0x10>
 8009f12:	4284      	cmp	r4, r0
 8009f14:	4623      	mov	r3, r4
 8009f16:	d807      	bhi.n	8009f28 <memmove+0x20>
 8009f18:	1e43      	subs	r3, r0, #1
 8009f1a:	42a1      	cmp	r1, r4
 8009f1c:	d008      	beq.n	8009f30 <memmove+0x28>
 8009f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f26:	e7f8      	b.n	8009f1a <memmove+0x12>
 8009f28:	4402      	add	r2, r0
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	428a      	cmp	r2, r1
 8009f2e:	d100      	bne.n	8009f32 <memmove+0x2a>
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f3a:	e7f7      	b.n	8009f2c <memmove+0x24>

08009f3c <_realloc_r>:
 8009f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f40:	4680      	mov	r8, r0
 8009f42:	4614      	mov	r4, r2
 8009f44:	460e      	mov	r6, r1
 8009f46:	b921      	cbnz	r1, 8009f52 <_realloc_r+0x16>
 8009f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	f7ff bc11 	b.w	8009774 <_malloc_r>
 8009f52:	b92a      	cbnz	r2, 8009f60 <_realloc_r+0x24>
 8009f54:	f7ff fba2 	bl	800969c <_free_r>
 8009f58:	4625      	mov	r5, r4
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f60:	f000 f81b 	bl	8009f9a <_malloc_usable_size_r>
 8009f64:	4284      	cmp	r4, r0
 8009f66:	4607      	mov	r7, r0
 8009f68:	d802      	bhi.n	8009f70 <_realloc_r+0x34>
 8009f6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f6e:	d812      	bhi.n	8009f96 <_realloc_r+0x5a>
 8009f70:	4621      	mov	r1, r4
 8009f72:	4640      	mov	r0, r8
 8009f74:	f7ff fbfe 	bl	8009774 <_malloc_r>
 8009f78:	4605      	mov	r5, r0
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d0ed      	beq.n	8009f5a <_realloc_r+0x1e>
 8009f7e:	42bc      	cmp	r4, r7
 8009f80:	4622      	mov	r2, r4
 8009f82:	4631      	mov	r1, r6
 8009f84:	bf28      	it	cs
 8009f86:	463a      	movcs	r2, r7
 8009f88:	f7ff ffb0 	bl	8009eec <memcpy>
 8009f8c:	4631      	mov	r1, r6
 8009f8e:	4640      	mov	r0, r8
 8009f90:	f7ff fb84 	bl	800969c <_free_r>
 8009f94:	e7e1      	b.n	8009f5a <_realloc_r+0x1e>
 8009f96:	4635      	mov	r5, r6
 8009f98:	e7df      	b.n	8009f5a <_realloc_r+0x1e>

08009f9a <_malloc_usable_size_r>:
 8009f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f9e:	1f18      	subs	r0, r3, #4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	bfbc      	itt	lt
 8009fa4:	580b      	ldrlt	r3, [r1, r0]
 8009fa6:	18c0      	addlt	r0, r0, r3
 8009fa8:	4770      	bx	lr
	...

08009fac <_sbrk>:
 8009fac:	4a04      	ldr	r2, [pc, #16]	; (8009fc0 <_sbrk+0x14>)
 8009fae:	6811      	ldr	r1, [r2, #0]
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	b909      	cbnz	r1, 8009fb8 <_sbrk+0xc>
 8009fb4:	4903      	ldr	r1, [pc, #12]	; (8009fc4 <_sbrk+0x18>)
 8009fb6:	6011      	str	r1, [r2, #0]
 8009fb8:	6810      	ldr	r0, [r2, #0]
 8009fba:	4403      	add	r3, r0
 8009fbc:	6013      	str	r3, [r2, #0]
 8009fbe:	4770      	bx	lr
 8009fc0:	2000028c 	.word	0x2000028c
 8009fc4:	20000290 	.word	0x20000290

08009fc8 <_init>:
 8009fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fca:	bf00      	nop
 8009fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fce:	bc08      	pop	{r3}
 8009fd0:	469e      	mov	lr, r3
 8009fd2:	4770      	bx	lr

08009fd4 <_fini>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	bf00      	nop
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr
