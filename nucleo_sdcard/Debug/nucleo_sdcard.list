
nucleo_sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dabc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800dc5c  0800dc5c  0001dc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e058  0800e058  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e058  0800e058  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e058  0800e058  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e058  0800e058  0001e058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e05c  0800e05c  0001e05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800e060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000043ec  20000090  20000090  00020090  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000447c  2000447c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ebdf  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ac3  00000000  00000000  0003ec9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac0  00000000  00000000  00043760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018c8  00000000  00000000  00045220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026133  00000000  00000000  00046ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000242da  00000000  00000000  0006cc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7099  00000000  00000000  00090ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00167f8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007550  00000000  00000000  00167fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stabstr      000000df  00000000  00000000  0016f530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc44 	.word	0x0800dc44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800dc44 	.word	0x0800dc44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <add_char>:
 * Returns:
 * 0: success
 * 1: realloc failure
 */
static int add_char(char **string, int *c, char ch)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71fb      	strb	r3, [r7, #7]
    char *tmp = NULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
    (*c)++;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	601a      	str	r2, [r3, #0]
    tmp = realloc(*string, (*c)+1);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4619      	mov	r1, r3
 80008c4:	4610      	mov	r0, r2
 80008c6:	f00c fd93 	bl	800d3f0 <realloc>
 80008ca:	6178      	str	r0, [r7, #20]
    if (tmp == NULL)
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <add_char+0x3a>
        return 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e012      	b.n	80008fc <add_char+0x60>
    *string = tmp;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	601a      	str	r2, [r3, #0]
    (*string)[(*c)-1] = ch;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4413      	add	r3, r2
 80008e8:	79fa      	ldrb	r2, [r7, #7]
 80008ea:	701a      	strb	r2, [r3, #0]
    (*string)[*c] = '\0';
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]

    return 0;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <create_field>:
 * memory for the field. Length is set to 0 and text to NULL
 *
 * Returns NULL on error via malloc.
 */
static CSV_FIELD *create_field()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    CSV_FIELD *field = malloc(sizeof(CSV_FIELD));
 800090a:	2008      	movs	r0, #8
 800090c:	f00c fc6a 	bl	800d1e4 <malloc>
 8000910:	4603      	mov	r3, r0
 8000912:	607b      	str	r3, [r7, #4]
    field->length = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
    field->text = NULL;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
    set_field(field, "\0");
 8000920:	4904      	ldr	r1, [pc, #16]	; (8000934 <create_field+0x30>)
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f821 	bl	800096a <set_field>
    return field;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	0800dc5c 	.word	0x0800dc5c

08000938 <destroy_field>:
 * Returns:
 * 0: success
 * 1: error realloc'ing field's char array
 */
static void destroy_field(CSV_FIELD *field)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
    if (field->text != NULL)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <destroy_field+0x20>
	{
		free(field->text);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f00c fc51 	bl	800d1f4 <free>
		field->text = NULL;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
    }
    free(field);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f00c fc4b 	bl	800d1f4 <free>
    field = NULL;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <set_field>:
 * Returns:
 *  0: success
 *  1: error allocating space to the string
 */
static int set_field(CSV_FIELD *field, char *text)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
    char *tmp;

    field->length = strlen(text) + 1;
 8000974:	6838      	ldr	r0, [r7, #0]
 8000976:	f7ff fc33 	bl	80001e0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	1c5a      	adds	r2, r3, #1
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	605a      	str	r2, [r3, #4]
    tmp = realloc(field->text, field->length);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4619      	mov	r1, r3
 800098c:	4610      	mov	r0, r2
 800098e:	f00c fd2f 	bl	800d3f0 <realloc>
 8000992:	60f8      	str	r0, [r7, #12]
    if (tmp == NULL)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d101      	bne.n	800099e <set_field+0x34>
        return 1;
 800099a:	2301      	movs	r3, #1
 800099c:	e009      	b.n	80009b2 <set_field+0x48>
    field->text = tmp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	601a      	str	r2, [r3, #0]
    strcpy(field->text, text);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00c fdaf 	bl	800d50e <strcpy>

    return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <read_next_field>:
 *  0: Moved successfully to the next entry in this row
 *  1: The next entry is on a new row
 *  2: There is no next entry (EOF)
 */
static int read_next_field(FIL *csv_fp, char field_delim, char text_delim, CSV_FIELD *field)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b08c      	sub	sp, #48	; 0x30
 80009be:	af00      	add	r7, sp, #0
 80009c0:	60f8      	str	r0, [r7, #12]
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	72fb      	strb	r3, [r7, #11]
 80009c8:	4613      	mov	r3, r2
 80009ca:	72bb      	strb	r3, [r7, #10]
	char ch = 'a';
 80009cc:	2361      	movs	r3, #97	; 0x61
 80009ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    bool done = false;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool in_text = false;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool esc = false;
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	UINT n;
    int c = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
    char *tmp = malloc(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f00c fbfb 	bl	800d1e4 <malloc>
 80009ee:	4603      	mov	r3, r0
 80009f0:	617b      	str	r3, [r7, #20]
    tmp[0] = '\0';
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

	while (!done)
 80009f8:	e086      	b.n	8000b08 <read_next_field+0x14e>
	{
		f_read(csv_fp, &ch, 1, &n);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000a02:	2201      	movs	r2, #1
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f008 fca6 	bl	8009356 <f_read>

		if (f_eof(csv_fp))
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d105      	bne.n	8000a2a <read_next_field+0x70>
		{
			c = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
			done = true;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a28:	e06e      	b.n	8000b08 <read_next_field+0x14e>
		}
		else if (!in_text)
 8000a2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d029      	beq.n	8000a8c <read_next_field+0xd2>
		{
			if (ch == text_delim)
 8000a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a3c:	7aba      	ldrb	r2, [r7, #10]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d105      	bne.n	8000a4e <read_next_field+0x94>
			{
				in_text = true;
 8000a42:	2301      	movs	r3, #1
 8000a44:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				c = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	e05c      	b.n	8000b08 <read_next_field+0x14e>
			}
			else if (ch == field_delim)
 8000a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a52:	7afa      	ldrb	r2, [r7, #11]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d103      	bne.n	8000a60 <read_next_field+0xa6>
			{
				done = true;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a5e:	e053      	b.n	8000b08 <read_next_field+0x14e>
			}
			else if (ch == '\n')
 8000a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a64:	2b0a      	cmp	r3, #10
 8000a66:	d103      	bne.n	8000a70 <read_next_field+0xb6>
			{
				done = true;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000a6e:	e04b      	b.n	8000b08 <read_next_field+0x14e>
			}
			else if (ch != '\r')
 8000a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a74:	2b0d      	cmp	r3, #13
 8000a76:	d047      	beq.n	8000b08 <read_next_field+0x14e>
			{
				add_char(&tmp, &c, ch);
 8000a78:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a7c:	f107 0118 	add.w	r1, r7, #24
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff09 	bl	800089c <add_char>
 8000a8a:	e03d      	b.n	8000b08 <read_next_field+0x14e>
			}
		}
		else
		{ /* in_text == true */
			if (esc)
 8000a8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d018      	beq.n	8000ac6 <read_next_field+0x10c>
			{
				if (ch == text_delim)
 8000a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a98:	7aba      	ldrb	r2, [r7, #10]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d10c      	bne.n	8000ab8 <read_next_field+0xfe>
				{
					add_char(&tmp, &c, ch);
 8000a9e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000aa2:	f107 0118 	add.w	r1, r7, #24
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fef6 	bl	800089c <add_char>
					esc = false;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000ab6:	e027      	b.n	8000b08 <read_next_field+0x14e>
				}
				else
				{
					esc = false;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					done = true;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ac4:	e020      	b.n	8000b08 <read_next_field+0x14e>
				}
			}
			else
			{ /* !esc */
				if (ch == text_delim)
 8000ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000aca:	7aba      	ldrb	r2, [r7, #10]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d103      	bne.n	8000ad8 <read_next_field+0x11e>
				{
					esc = true;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000ad6:	e017      	b.n	8000b08 <read_next_field+0x14e>
				} else if (ch == field_delim)
 8000ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000adc:	7afa      	ldrb	r2, [r7, #11]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d109      	bne.n	8000af6 <read_next_field+0x13c>
				{
					add_char(&tmp, &c, ch);
 8000ae2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ae6:	f107 0118 	add.w	r1, r7, #24
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fed4 	bl	800089c <add_char>
 8000af4:	e008      	b.n	8000b08 <read_next_field+0x14e>
				}
				else
				{
					add_char(&tmp, &c, ch);
 8000af6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000afa:	f107 0118 	add.w	r1, r7, #24
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff feca 	bl	800089c <add_char>
	while (!done)
 8000b08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b0c:	f083 0301 	eor.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f47f af71 	bne.w	80009fa <read_next_field+0x40>
				}
			}
		}
    }

    if (field != NULL)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d004      	beq.n	8000b28 <read_next_field+0x16e>
	{
        set_field(field, tmp);
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	4619      	mov	r1, r3
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ff21 	bl	800096a <set_field>
    }

    if (tmp != NULL)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <read_next_field+0x17c>
        free(tmp);
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00c fb5f 	bl	800d1f4 <free>
    tmp = NULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
    /* Moving the fp to the beginning of the next field and peeking
        * to see if it is a new line or if there is in fact no next field.
        */
    int pos;
    int retval;
    done = false;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (!done)
 8000b40:	e04b      	b.n	8000bda <read_next_field+0x220>
	{
		if (ch == field_delim)
 8000b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b46:	7afa      	ldrb	r2, [r7, #11]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d105      	bne.n	8000b58 <read_next_field+0x19e>
		{
			retval = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b56:	e040      	b.n	8000bda <read_next_field+0x220>
		}
		else if (ch == '\n')
 8000b58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b5c:	2b0a      	cmp	r3, #10
 8000b5e:	d124      	bne.n	8000baa <read_next_field+0x1f0>
		{
			/* Checking to see if this \n is the one that UNIX
				* sometimes includes before the EOF */
			pos = csv_fp->fptr;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
			f_read(csv_fp, &ch, 1, &n);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000b72:	2201      	movs	r2, #1
 8000b74:	68f8      	ldr	r0, [r7, #12]
 8000b76:	f008 fbee 	bl	8009356 <f_read>

			if (f_eof(csv_fp))
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d102      	bne.n	8000b94 <read_next_field+0x1da>
				retval = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b92:	e001      	b.n	8000b98 <read_next_field+0x1de>
			else
				retval = 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28

			f_lseek(csv_fp, pos);
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f009 f9b8 	bl	8009f12 <f_lseek>
			done = true;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ba8:	e017      	b.n	8000bda <read_next_field+0x220>
		}
		else if (f_eof(csv_fp))
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d105      	bne.n	8000bca <read_next_field+0x210>
		{
			retval = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bc8:	e007      	b.n	8000bda <read_next_field+0x220>
		}
		else
		{
			f_read(csv_fp, &ch, 1, &n);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f008 fbbe 	bl	8009356 <f_read>
    while (!done)
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bde:	f083 0301 	eor.w	r3, r3, #1
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1ac      	bne.n	8000b42 <read_next_field+0x188>
		}
    }

    return retval;
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3730      	adds	r7, #48	; 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <append_field>:
 * 0: success
 * 1: the given row does not exist
 * 2: memory allocation error
 */
static int append_field(CSV_BUFFER *buffer, size_t row)
{
 8000bf2:	b590      	push	{r4, r7, lr}
 8000bf4:	b085      	sub	sp, #20
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]

	CSV_FIELD **temp_field;

	if (buffer->rows < row + 1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d201      	bcs.n	8000c0c <append_field+0x1a>
		return 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e036      	b.n	8000c7a <append_field+0x88>

	/* Set col equal to the index of the new field */
	int col = buffer->width[row];
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]

	temp_field = realloc(buffer->field[row], (col + 1) * sizeof(CSV_FIELD*));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4610      	mov	r0, r2
 8000c30:	f00c fbde 	bl	800d3f0 <realloc>
 8000c34:	60b8      	str	r0, [r7, #8]
	if (temp_field == NULL)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <append_field+0x4e>
	{
		return 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e01c      	b.n	8000c7a <append_field+0x88>
	}
	else
	{
		buffer->field[row] = temp_field;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	601a      	str	r2, [r3, #0]
		buffer->field[row][col] = create_field();
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	18d4      	adds	r4, r2, r3
 8000c60:	f7ff fe50 	bl	8000904 <create_field>
 8000c64:	4603      	mov	r3, r0
 8000c66:	6023      	str	r3, [r4, #0]
		buffer->width[row]++;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	4413      	add	r3, r2
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	3201      	adds	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}

08000c82 <append_row>:
 * 0: success
 * 1: error allocating width memory
 * 2: error allocating field memory
 */
static int append_row(CSV_BUFFER *buffer)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
    size_t *temp_width;
    CSV_FIELD ***temp_field;

    size_t row  = buffer->rows;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	617b      	str	r3, [r7, #20]

    temp_width = realloc(buffer->width, (buffer->rows + 1) * sizeof(size_t));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4610      	mov	r0, r2
 8000ca0:	f00c fba6 	bl	800d3f0 <realloc>
 8000ca4:	6138      	str	r0, [r7, #16]
    if (temp_width != NULL)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d018      	beq.n	8000cde <append_row+0x5c>
	{
        buffer->width = temp_width;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	609a      	str	r2, [r3, #8]
        buffer->width[row] = 0;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
	else
	{
        return 1;
    }

    temp_field = realloc(buffer->field, (buffer->rows + 1) * sizeof(CSV_FIELD**));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4610      	mov	r0, r2
 8000cd0:	f00c fb8e 	bl	800d3f0 <realloc>
 8000cd4:	60f8      	str	r0, [r7, #12]
    if (temp_field != NULL)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d017      	beq.n	8000d0c <append_row+0x8a>
 8000cdc:	e001      	b.n	8000ce2 <append_row+0x60>
        return 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e018      	b.n	8000d14 <append_row+0x92>
	{
        buffer->field = temp_field;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	601a      	str	r2, [r3, #0]
        buffer->field[row] = NULL;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
	{
        free(temp_width);
        return 2;
    }

    buffer->rows++;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	605a      	str	r2, [r3, #4]
    append_field(buffer, row);
 8000d00:	6979      	ldr	r1, [r7, #20]
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff75 	bl	8000bf2 <append_field>
    return 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e003      	b.n	8000d14 <append_row+0x92>
        free(temp_width);
 8000d0c:	6938      	ldr	r0, [r7, #16]
 8000d0e:	f00c fa71 	bl	800d1f4 <free>
        return 2;
 8000d12:	2302      	movs	r3, #2
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <csv_create_buffer>:

    return 0;
}

CSV_BUFFER *csv_create_buffer()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
    CSV_BUFFER *buffer = malloc(sizeof(CSV_BUFFER));
 8000d22:	2010      	movs	r0, #16
 8000d24:	f00c fa5e 	bl	800d1e4 <malloc>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	607b      	str	r3, [r7, #4]

    if (buffer != NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d00e      	beq.n	8000d50 <csv_create_buffer+0x34>
	{
	    buffer->field = NULL;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
	    buffer->rows = 0;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	605a      	str	r2, [r3, #4]
	    buffer->width = NULL;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
	    buffer->field_delim = ',';
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	222c      	movs	r2, #44	; 0x2c
 8000d48:	731a      	strb	r2, [r3, #12]
	    buffer->text_delim = '"';
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2222      	movs	r2, #34	; 0x22
 8000d4e:	735a      	strb	r2, [r3, #13]
    }

    return buffer;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <csv_destroy_buffer>:

void csv_destroy_buffer(CSV_BUFFER *buffer)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
    int i, j;

    for (i = 0; i < buffer->rows; i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e02e      	b.n	8000dc6 <csv_destroy_buffer+0x6c>
	{
        for (j = 0; j < buffer->width[i]; j++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	e00f      	b.n	8000d8e <csv_destroy_buffer+0x34>
		{
            destroy_field(buffer->field[i][j]);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fdd8 	bl	8000938 <destroy_field>
        for (j = 0; j < buffer->width[i]; j++)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8e6      	bhi.n	8000d6e <csv_destroy_buffer+0x14>
        }
        free(buffer->field[i]);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00c fa21 	bl	800d1f4 <free>
        buffer->field[i] = NULL;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->rows; i++)
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8cb      	bhi.n	8000d68 <csv_destroy_buffer+0xe>
    }

    if (buffer->field != NULL)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d004      	beq.n	8000de2 <csv_destroy_buffer+0x88>
        free(buffer->field);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f00c fa09 	bl	800d1f4 <free>

    if (buffer->width != NULL)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d004      	beq.n	8000df4 <csv_destroy_buffer+0x9a>
        free(buffer->width);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f00c fa00 	bl	800d1f4 <free>

    free(buffer);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f00c f9fd 	bl	800d1f4 <free>
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <csv_load>:

int csv_load(CSV_BUFFER *buffer, FIL *csv_fp)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b088      	sub	sp, #32
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	6838      	ldr	r0, [r7, #0]
 8000e10:	f009 f87f 	bl	8009f12 <f_lseek>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK)
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <csv_load+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e059      	b.n	8000ed6 <csv_load+0xd4>
	}

	int next = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61fb      	str	r3, [r7, #28]
	bool end = false;
 8000e26:	2300      	movs	r3, #0
 8000e28:	76fb      	strb	r3, [r7, #27]
	bool first = true;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	76bb      	strb	r3, [r7, #26]
	int i = -1, j = -1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
 8000e38:	613b      	str	r3, [r7, #16]

	while (!end)
 8000e3a:	e045      	b.n	8000ec8 <csv_load+0xc6>
	{
		if (!first)
 8000e3c:	7ebb      	ldrb	r3, [r7, #26]
 8000e3e:	f083 0301 	eor.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d015      	beq.n	8000e74 <csv_load+0x72>
		{
			next = read_next_field(csv_fp, buffer->field_delim, buffer->text_delim, buffer->field[i][j-1]);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7b19      	ldrb	r1, [r3, #12]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7b58      	ldrb	r0, [r3, #13]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e62:	3b01      	subs	r3, #1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f7ff fda4 	bl	80009ba <read_next_field>
 8000e72:	61f8      	str	r0, [r7, #28]
		}

		if (next == 2)
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d101      	bne.n	8000e7e <csv_load+0x7c>
			end = true;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	76fb      	strb	r3, [r7, #27]

		if (next == 1)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10c      	bne.n	8000e9e <csv_load+0x9c>
		{
			if (append_row(buffer) != 0)
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fefc 	bl	8000c82 <append_row>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <csv_load+0x92>
				return 2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	e020      	b.n	8000ed6 <csv_load+0xd4>
			j = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	613b      	str	r3, [r7, #16]
			i++;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	617b      	str	r3, [r7, #20]
		}

		if (next == 0)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <csv_load+0xbc>
		{
			if (append_field(buffer, i) != 0)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fea2 	bl	8000bf2 <append_field>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <csv_load+0xb6>
				return 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e00e      	b.n	8000ed6 <csv_load+0xd4>
			j++;
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
		}

		if (first) first = false;
 8000ebe:	7ebb      	ldrb	r3, [r7, #26]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <csv_load+0xc6>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	76bb      	strb	r3, [r7, #26]
	while (!end)
 8000ec8:	7efb      	ldrb	r3, [r7, #27]
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1b3      	bne.n	8000e3c <csv_load+0x3a>
	}

	return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3720      	adds	r7, #32
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <csv_save>:

int csv_save(FIL *csv_fp, CSV_BUFFER *buffer)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b088      	sub	sp, #32
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]

	UINT n;
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f009 f811 	bl	8009f12 <f_lseek>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 8000ef4:	7cfb      	ldrb	r3, [r7, #19]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <csv_save+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e0d8      	b.n	80010b0 <csv_save+0x1d2>
	}

    char text_delim = buffer->text_delim;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	7b5b      	ldrb	r3, [r3, #13]
 8000f02:	72fb      	strb	r3, [r7, #11]
    char field_delim = buffer->field_delim;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	7b1b      	ldrb	r3, [r3, #12]
 8000f08:	72bb      	strb	r3, [r7, #10]
	char new_line = '\n';
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	727b      	strb	r3, [r7, #9]
    for(i = 0; i < buffer->rows; i++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e0b9      	b.n	8001088 <csv_save+0x1aa>
	{
        for(j = 0; j < buffer->width[i]; j++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	e0a9      	b.n	800106e <csv_save+0x190>
		{
            chloc = strchr(buffer->field[i][j]->text, text_delim);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	7afa      	ldrb	r2, [r7, #11]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f00c fadd 	bl	800d4f4 <strchr>
 8000f3a:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d110      	bne.n	8000f64 <csv_save+0x86>
                chloc = strchr(buffer->field[i][j]->text, field_delim);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	7aba      	ldrb	r2, [r7, #10]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00c fac9 	bl	800d4f4 <strchr>
 8000f62:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10f      	bne.n	8000f8a <csv_save+0xac>
                chloc = strchr(buffer->field[i][j]->text, '\n');
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	210a      	movs	r1, #10
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00c fab6 	bl	800d4f4 <strchr>
 8000f88:	6178      	str	r0, [r7, #20]
            // if any of the above characters are found, chloc will be set
            // and we must use text delimiters.
            if(chloc != NULL)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d02e      	beq.n	8000fee <csv_save+0x110>
			{
				f_write(csv_fp, &text_delim, 1, &n);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	f107 010b 	add.w	r1, r7, #11
 8000f98:	2201      	movs	r2, #1
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f008 fc18 	bl	80097d0 <f_write>
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6819      	ldr	r1, [r3, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	1e5a      	subs	r2, r3, #1
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f008 fbfc 	bl	80097d0 <f_write>
				f_write(csv_fp, &text_delim, 1, &n);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	f107 010b 	add.w	r1, r7, #11
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f008 fbf4 	bl	80097d0 <f_write>
                chloc = NULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e01b      	b.n	8001026 <csv_save+0x148>
            }
			else
			{
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	1e5a      	subs	r2, r3, #1
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f008 fbd5 	bl	80097d0 <f_write>
            }
            if(j < buffer->width[i] - 1)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	429a      	cmp	r2, r3
 8001038:	d908      	bls.n	800104c <csv_save+0x16e>
				f_write(csv_fp, &field_delim, 1, &n);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	f107 010a 	add.w	r1, r7, #10
 8001042:	2201      	movs	r2, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f008 fbc3 	bl	80097d0 <f_write>
 800104a:	e00d      	b.n	8001068 <csv_save+0x18a>
            else if (i < buffer->rows - 1)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	429a      	cmp	r2, r3
 8001056:	d907      	bls.n	8001068 <csv_save+0x18a>
				f_write(csv_fp, &new_line, 1, &n);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	f107 0109 	add.w	r1, r7, #9
 8001060:	2201      	movs	r2, #1
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f008 fbb4 	bl	80097d0 <f_write>
        for(j = 0; j < buffer->width[i]; j++)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	3301      	adds	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	429a      	cmp	r2, r3
 800107e:	f63f af4c 	bhi.w	8000f1a <csv_save+0x3c>
    for(i = 0; i < buffer->rows; i++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	429a      	cmp	r2, r3
 8001090:	f63f af40 	bhi.w	8000f14 <csv_save+0x36>
        }
    }
	f_truncate(csv_fp);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f009 fb8d 	bl	800a7b4 <f_truncate>

	// Sync (just in case)
	res = f_sync(csv_fp);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f008 fe26 	bl	8009cec <f_sync>
 80010a0:	4603      	mov	r3, r0
 80010a2:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <csv_save+0x1d0>
	{
		//log_error("f_sync pb: %d", res);
		return 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <csv_save+0x1d2>
	}

    return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <csv_set_field>:
    else
        return buffer->field[row][entry]->length - 1;
}

int csv_set_field(CSV_BUFFER *buffer, size_t row, size_t entry, char *field)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
    while (row >= buffer->rows)
 80010c6:	e002      	b.n	80010ce <csv_set_field+0x16>
	{
        append_row(buffer);
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f7ff fdda 	bl	8000c82 <append_row>
    while (row >= buffer->rows)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d2f7      	bcs.n	80010c8 <csv_set_field+0x10>
    }
    while (entry >= buffer->width[row])
 80010d8:	e003      	b.n	80010e2 <csv_set_field+0x2a>
        append_field(buffer, row);
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff fd88 	bl	8000bf2 <append_field>
    while (entry >= buffer->width[row])
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d2f2      	bcs.n	80010da <csv_set_field+0x22>

    if (set_field(buffer->field[row][entry], field) == 0)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6839      	ldr	r1, [r7, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fc2d 	bl	800096a <set_field>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <csv_set_field+0x62>
        return 0;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <csv_set_field+0x64>
    else
        return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <SELECT+0x14>)
 800112e:	f001 feb5 	bl	8002e9c <HAL_GPIO_WritePin>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	48000400 	.word	0x48000400

0800113c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <DESELECT+0x14>)
 8001146:	f001 fea9 	bl	8002e9c <HAL_GPIO_WritePin>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	48000400 	.word	0x48000400

08001154 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800115e:	bf00      	nop
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <SPI_TxByte+0x30>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b02      	cmp	r3, #2
 800116c:	d1f8      	bne.n	8001160 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800116e:	1df9      	adds	r1, r7, #7
 8001170:	2364      	movs	r3, #100	; 0x64
 8001172:	2201      	movs	r2, #1
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <SPI_TxByte+0x30>)
 8001176:	f003 fc6c 	bl	8004a52 <HAL_SPI_Transmit>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000b4 	.word	0x200000b4

08001188 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001194:	bf00      	nop
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <SPI_TxBuffer+0x30>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d1f8      	bne.n	8001196 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	2364      	movs	r3, #100	; 0x64
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4803      	ldr	r0, [pc, #12]	; (80011b8 <SPI_TxBuffer+0x30>)
 80011ac:	f003 fc51 	bl	8004a52 <HAL_SPI_Transmit>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200000b4 	.word	0x200000b4

080011bc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80011c2:	23ff      	movs	r3, #255	; 0xff
 80011c4:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011c6:	bf00      	nop
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <SPI_RxByte+0x34>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d1f8      	bne.n	80011c8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80011d6:	1dba      	adds	r2, r7, #6
 80011d8:	1df9      	adds	r1, r7, #7
 80011da:	2364      	movs	r3, #100	; 0x64
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <SPI_RxByte+0x34>)
 80011e2:	f003 fda4 	bl	8004d2e <HAL_SPI_TransmitReceive>

  return data;
 80011e6:	79bb      	ldrb	r3, [r7, #6]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000b4 	.word	0x200000b4

080011f4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80011fc:	f7ff ffde 	bl	80011bc <SPI_RxByte>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	701a      	strb	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
  uint8_t res = 0x00;
 8001216:	2300      	movs	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]

  /* timeout 500ms */
  Timer2 = 500;
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <SD_ReadyWait+0x34>)
 800121c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001220:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8001222:	f7ff ffcb 	bl	80011bc <SPI_RxByte>
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2bff      	cmp	r3, #255	; 0xff
 800122e:	d003      	beq.n	8001238 <SD_ReadyWait+0x28>
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SD_ReadyWait+0x34>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f4      	bne.n	8001222 <SD_ReadyWait+0x12>

  return res;
 8001238:	79fb      	ldrb	r3, [r7, #7]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000ae 	.word	0x200000ae

08001248 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800124e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001252:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001254:	f7ff ff72 	bl	800113c <DESELECT>
  for(int i = 0; i < 10; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	e005      	b.n	800126a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800125e:	20ff      	movs	r0, #255	; 0xff
 8001260:	f7ff ff78 	bl	8001154 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3301      	adds	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b09      	cmp	r3, #9
 800126e:	ddf6      	ble.n	800125e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001270:	f7ff ff58 	bl	8001124 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001274:	2340      	movs	r3, #64	; 0x40
 8001276:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8001288:	2395      	movs	r3, #149	; 0x95
 800128a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 800128c:	463b      	mov	r3, r7
 800128e:	2106      	movs	r1, #6
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff79 	bl	8001188 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8001296:	e002      	b.n	800129e <SD_PowerOn+0x56>
  {
    cnt--;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3b01      	subs	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800129e:	f7ff ff8d 	bl	80011bc <SPI_RxByte>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d002      	beq.n	80012ae <SD_PowerOn+0x66>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f4      	bne.n	8001298 <SD_PowerOn+0x50>
  }

  DESELECT();
 80012ae:	f7ff ff45 	bl	800113c <DESELECT>
  SPI_TxByte(0XFF);
 80012b2:	20ff      	movs	r0, #255	; 0xff
 80012b4:	f7ff ff4e 	bl	8001154 <SPI_TxByte>

  PowerFlag = 1;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <SD_PowerOn+0x80>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000b1 	.word	0x200000b1

080012cc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <SD_PowerOff+0x14>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200000b1 	.word	0x200000b1

080012e4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return PowerFlag;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <SD_CheckPower+0x14>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200000b1 	.word	0x200000b1

080012fc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <SD_RxDataBlock+0x58>)
 8001308:	22c8      	movs	r2, #200	; 0xc8
 800130a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800130c:	f7ff ff56 	bl	80011bc <SPI_RxByte>
 8001310:	4603      	mov	r3, r0
 8001312:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	2bff      	cmp	r3, #255	; 0xff
 8001318:	d103      	bne.n	8001322 <SD_RxDataBlock+0x26>
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <SD_RxDataBlock+0x58>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f4      	bne.n	800130c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2bfe      	cmp	r3, #254	; 0xfe
 8001326:	d001      	beq.n	800132c <SD_RxDataBlock+0x30>
 8001328:	2300      	movs	r3, #0
 800132a:	e00f      	b.n	800134c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff5e 	bl	80011f4 <SPI_RxBytePtr>
  } while(len--);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f4      	bne.n	800132c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8001342:	f7ff ff3b 	bl	80011bc <SPI_RxByte>
  SPI_RxByte();
 8001346:	f7ff ff39 	bl	80011bc <SPI_RxByte>

  return TRUE;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000ac 	.word	0x200000ac

08001358 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001368:	f7ff ff52 	bl	8001210 <SD_ReadyWait>
 800136c:	4603      	mov	r3, r0
 800136e:	2bff      	cmp	r3, #255	; 0xff
 8001370:	d001      	beq.n	8001376 <SD_TxDataBlock+0x1e>
 8001372:	2300      	movs	r3, #0
 8001374:	e02f      	b.n	80013d6 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff feeb 	bl	8001154 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	2bfd      	cmp	r3, #253	; 0xfd
 8001382:	d020      	beq.n	80013c6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fefd 	bl	8001188 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800138e:	f7ff ff15 	bl	80011bc <SPI_RxByte>
    SPI_RxByte();
 8001392:	f7ff ff13 	bl	80011bc <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001396:	e00b      	b.n	80013b0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001398:	f7ff ff10 	bl	80011bc <SPI_RxByte>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	f003 031f 	and.w	r3, r3, #31
 80013a6:	2b05      	cmp	r3, #5
 80013a8:	d006      	beq.n	80013b8 <SD_TxDataBlock+0x60>
      i++;
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	3301      	adds	r3, #1
 80013ae:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	2b40      	cmp	r3, #64	; 0x40
 80013b4:	d9f0      	bls.n	8001398 <SD_TxDataBlock+0x40>
 80013b6:	e000      	b.n	80013ba <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80013b8:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80013ba:	bf00      	nop
 80013bc:	f7ff fefe 	bl	80011bc <SPI_RxByte>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0fa      	beq.n	80013bc <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d101      	bne.n	80013d4 <SD_TxDataBlock+0x7c>
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <SD_TxDataBlock+0x7e>

  return FALSE;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	6039      	str	r1, [r7, #0]
 80013e8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80013ea:	f7ff ff11 	bl	8001210 <SD_ReadyWait>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2bff      	cmp	r3, #255	; 0xff
 80013f2:	d001      	beq.n	80013f8 <SD_SendCmd+0x1a>
 80013f4:	23ff      	movs	r3, #255	; 0xff
 80013f6:	e042      	b.n	800147e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff feaa 	bl	8001154 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	0e1b      	lsrs	r3, r3, #24
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fea4 	bl	8001154 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	0c1b      	lsrs	r3, r3, #16
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe9e 	bl	8001154 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	0a1b      	lsrs	r3, r3, #8
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe98 	bl	8001154 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe93 	bl	8001154 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b40      	cmp	r3, #64	; 0x40
 8001432:	d102      	bne.n	800143a <SD_SendCmd+0x5c>
 8001434:	2395      	movs	r3, #149	; 0x95
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e007      	b.n	800144a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b48      	cmp	r3, #72	; 0x48
 800143e:	d102      	bne.n	8001446 <SD_SendCmd+0x68>
 8001440:	2387      	movs	r3, #135	; 0x87
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e001      	b.n	800144a <SD_SendCmd+0x6c>
  else crc = 1;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fe81 	bl	8001154 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b4c      	cmp	r3, #76	; 0x4c
 8001456:	d101      	bne.n	800145c <SD_SendCmd+0x7e>
 8001458:	f7ff feb0 	bl	80011bc <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800145c:	230a      	movs	r3, #10
 800145e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001460:	f7ff feac 	bl	80011bc <SPI_RxByte>
 8001464:	4603      	mov	r3, r0
 8001466:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001468:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da05      	bge.n	800147c <SD_SendCmd+0x9e>
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	3b01      	subs	r3, #1
 8001474:	73bb      	strb	r3, [r7, #14]
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f1      	bne.n	8001460 <SD_SendCmd+0x82>

  return res;
 800147c:	7b7b      	ldrb	r3, [r7, #13]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SD_disk_initialize+0x14>
 8001498:	2301      	movs	r3, #1
 800149a:	e0d1      	b.n	8001640 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800149c:	4b6a      	ldr	r3, [pc, #424]	; (8001648 <SD_disk_initialize+0x1c0>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <SD_disk_initialize+0x2a>
 80014aa:	4b67      	ldr	r3, [pc, #412]	; (8001648 <SD_disk_initialize+0x1c0>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	e0c6      	b.n	8001640 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 80014b2:	f7ff fec9 	bl	8001248 <SD_PowerOn>

  /* slave select */
  SELECT();
 80014b6:	f7ff fe35 	bl	8001124 <SELECT>

  /* check disk type */
  type = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80014be:	2100      	movs	r1, #0
 80014c0:	2040      	movs	r0, #64	; 0x40
 80014c2:	f7ff ff8c 	bl	80013de <SD_SendCmd>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	f040 80a1 	bne.w	8001610 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <SD_disk_initialize+0x1c4>)
 80014d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014d4:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80014d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80014da:	2048      	movs	r0, #72	; 0x48
 80014dc:	f7ff ff7f 	bl	80013de <SD_SendCmd>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d155      	bne.n	8001592 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e00c      	b.n	8001506 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80014ec:	7bfc      	ldrb	r4, [r7, #15]
 80014ee:	f7ff fe65 	bl	80011bc <SPI_RxByte>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	f104 0310 	add.w	r3, r4, #16
 80014fa:	443b      	add	r3, r7
 80014fc:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d9ef      	bls.n	80014ec <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800150c:	7abb      	ldrb	r3, [r7, #10]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d17e      	bne.n	8001610 <SD_disk_initialize+0x188>
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	2baa      	cmp	r3, #170	; 0xaa
 8001516:	d17b      	bne.n	8001610 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001518:	2100      	movs	r1, #0
 800151a:	2077      	movs	r0, #119	; 0x77
 800151c:	f7ff ff5f 	bl	80013de <SD_SendCmd>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d807      	bhi.n	8001536 <SD_disk_initialize+0xae>
 8001526:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800152a:	2069      	movs	r0, #105	; 0x69
 800152c:	f7ff ff57 	bl	80013de <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d004      	beq.n	8001540 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <SD_disk_initialize+0x1c4>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1ec      	bne.n	8001518 <SD_disk_initialize+0x90>
 800153e:	e000      	b.n	8001542 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001540:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001542:	4b42      	ldr	r3, [pc, #264]	; (800164c <SD_disk_initialize+0x1c4>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d062      	beq.n	8001610 <SD_disk_initialize+0x188>
 800154a:	2100      	movs	r1, #0
 800154c:	207a      	movs	r0, #122	; 0x7a
 800154e:	f7ff ff46 	bl	80013de <SD_SendCmd>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d15b      	bne.n	8001610 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e00c      	b.n	8001578 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800155e:	7bfc      	ldrb	r4, [r7, #15]
 8001560:	f7ff fe2c 	bl	80011bc <SPI_RxByte>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	f104 0310 	add.w	r3, r4, #16
 800156c:	443b      	add	r3, r7
 800156e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	3301      	adds	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d9ef      	bls.n	800155e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800157e:	7a3b      	ldrb	r3, [r7, #8]
 8001580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SD_disk_initialize+0x104>
 8001588:	230c      	movs	r3, #12
 800158a:	e000      	b.n	800158e <SD_disk_initialize+0x106>
 800158c:	2304      	movs	r3, #4
 800158e:	73bb      	strb	r3, [r7, #14]
 8001590:	e03e      	b.n	8001610 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001592:	2100      	movs	r1, #0
 8001594:	2077      	movs	r0, #119	; 0x77
 8001596:	f7ff ff22 	bl	80013de <SD_SendCmd>
 800159a:	4603      	mov	r3, r0
 800159c:	2b01      	cmp	r3, #1
 800159e:	d808      	bhi.n	80015b2 <SD_disk_initialize+0x12a>
 80015a0:	2100      	movs	r1, #0
 80015a2:	2069      	movs	r0, #105	; 0x69
 80015a4:	f7ff ff1b 	bl	80013de <SD_SendCmd>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d801      	bhi.n	80015b2 <SD_disk_initialize+0x12a>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e000      	b.n	80015b4 <SD_disk_initialize+0x12c>
 80015b2:	2301      	movs	r3, #1
 80015b4:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d10e      	bne.n	80015da <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80015bc:	2100      	movs	r1, #0
 80015be:	2077      	movs	r0, #119	; 0x77
 80015c0:	f7ff ff0d 	bl	80013de <SD_SendCmd>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d80e      	bhi.n	80015e8 <SD_disk_initialize+0x160>
 80015ca:	2100      	movs	r1, #0
 80015cc:	2069      	movs	r0, #105	; 0x69
 80015ce:	f7ff ff06 	bl	80013de <SD_SendCmd>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d107      	bne.n	80015e8 <SD_disk_initialize+0x160>
 80015d8:	e00c      	b.n	80015f4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80015da:	2100      	movs	r1, #0
 80015dc:	2041      	movs	r0, #65	; 0x41
 80015de:	f7ff fefe 	bl	80013de <SD_SendCmd>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d004      	beq.n	80015f2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <SD_disk_initialize+0x1c4>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e2      	bne.n	80015b6 <SD_disk_initialize+0x12e>
 80015f0:	e000      	b.n	80015f4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80015f2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <SD_disk_initialize+0x1c4>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <SD_disk_initialize+0x184>
 80015fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001600:	2050      	movs	r0, #80	; 0x50
 8001602:	f7ff feec 	bl	80013de <SD_SendCmd>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SD_disk_initialize+0x188>
 800160c:	2300      	movs	r3, #0
 800160e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <SD_disk_initialize+0x1c8>)
 8001612:	7bbb      	ldrb	r3, [r7, #14]
 8001614:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001616:	f7ff fd91 	bl	800113c <DESELECT>
  SPI_RxByte();
 800161a:	f7ff fdcf 	bl	80011bc <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <SD_disk_initialize+0x1c0>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SD_disk_initialize+0x1c0>)
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e001      	b.n	800163a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001636:	f7ff fe49 	bl	80012cc <SD_PowerOff>
  }

  return Stat;
 800163a:	4b03      	ldr	r3, [pc, #12]	; (8001648 <SD_disk_initialize+0x1c0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	200000ac 	.word	0x200000ac
 8001650:	200000b0 	.word	0x200000b0

08001654 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SD_disk_status+0x14>
 8001664:	2301      	movs	r3, #1
 8001666:	e002      	b.n	800166e <SD_disk_status+0x1a>
  return Stat;
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <SD_disk_status+0x28>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000000 	.word	0x20000000

08001680 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <SD_disk_read+0x1c>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <SD_disk_read+0x20>
 800169c:	2304      	movs	r3, #4
 800169e:	e051      	b.n	8001744 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <SD_disk_read+0xcc>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SD_disk_read+0x32>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e048      	b.n	8001744 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <SD_disk_read+0xd0>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d102      	bne.n	80016c4 <SD_disk_read+0x44>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	025b      	lsls	r3, r3, #9
 80016c2:	607b      	str	r3, [r7, #4]

  SELECT();
 80016c4:	f7ff fd2e 	bl	8001124 <SELECT>

  if (count == 1)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d111      	bne.n	80016f2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	2051      	movs	r0, #81	; 0x51
 80016d2:	f7ff fe84 	bl	80013de <SD_SendCmd>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d129      	bne.n	8001730 <SD_disk_read+0xb0>
 80016dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e0:	68b8      	ldr	r0, [r7, #8]
 80016e2:	f7ff fe0b 	bl	80012fc <SD_RxDataBlock>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d021      	beq.n	8001730 <SD_disk_read+0xb0>
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	e01e      	b.n	8001730 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	2052      	movs	r0, #82	; 0x52
 80016f6:	f7ff fe72 	bl	80013de <SD_SendCmd>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d117      	bne.n	8001730 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f7ff fdf9 	bl	80012fc <SD_RxDataBlock>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00a      	beq.n	8001726 <SD_disk_read+0xa6>
        buff += 512;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001716:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	3b01      	subs	r3, #1
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ed      	bne.n	8001700 <SD_disk_read+0x80>
 8001724:	e000      	b.n	8001728 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001726:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001728:	2100      	movs	r1, #0
 800172a:	204c      	movs	r0, #76	; 0x4c
 800172c:	f7ff fe57 	bl	80013de <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001730:	f7ff fd04 	bl	800113c <DESELECT>
  SPI_RxByte();
 8001734:	f7ff fd42 	bl	80011bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	bf14      	ite	ne
 800173e:	2301      	movne	r3, #1
 8001740:	2300      	moveq	r3, #0
 8001742:	b2db      	uxtb	r3, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000000 	.word	0x20000000
 8001750:	200000b0 	.word	0x200000b0

08001754 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <SD_disk_write+0x1c>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <SD_disk_write+0x20>
 8001770:	2304      	movs	r3, #4
 8001772:	e06b      	b.n	800184c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001774:	4b37      	ldr	r3, [pc, #220]	; (8001854 <SD_disk_write+0x100>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SD_disk_write+0x32>
 8001782:	2303      	movs	r3, #3
 8001784:	e062      	b.n	800184c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001786:	4b33      	ldr	r3, [pc, #204]	; (8001854 <SD_disk_write+0x100>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SD_disk_write+0x44>
 8001794:	2302      	movs	r3, #2
 8001796:	e059      	b.n	800184c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <SD_disk_write+0x104>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <SD_disk_write+0x56>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	025b      	lsls	r3, r3, #9
 80017a8:	607b      	str	r3, [r7, #4]

  SELECT();
 80017aa:	f7ff fcbb 	bl	8001124 <SELECT>

  if (count == 1)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d110      	bne.n	80017d6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	2058      	movs	r0, #88	; 0x58
 80017b8:	f7ff fe11 	bl	80013de <SD_SendCmd>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d13a      	bne.n	8001838 <SD_disk_write+0xe4>
 80017c2:	21fe      	movs	r1, #254	; 0xfe
 80017c4:	68b8      	ldr	r0, [r7, #8]
 80017c6:	f7ff fdc7 	bl	8001358 <SD_TxDataBlock>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d033      	beq.n	8001838 <SD_disk_write+0xe4>
      count = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	e030      	b.n	8001838 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <SD_disk_write+0x104>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d007      	beq.n	80017f2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80017e2:	2100      	movs	r1, #0
 80017e4:	2077      	movs	r0, #119	; 0x77
 80017e6:	f7ff fdfa 	bl	80013de <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80017ea:	6839      	ldr	r1, [r7, #0]
 80017ec:	2057      	movs	r0, #87	; 0x57
 80017ee:	f7ff fdf6 	bl	80013de <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	2059      	movs	r0, #89	; 0x59
 80017f6:	f7ff fdf2 	bl	80013de <SD_SendCmd>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d11b      	bne.n	8001838 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001800:	21fc      	movs	r1, #252	; 0xfc
 8001802:	68b8      	ldr	r0, [r7, #8]
 8001804:	f7ff fda8 	bl	8001358 <SD_TxDataBlock>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00a      	beq.n	8001824 <SD_disk_write+0xd0>
        buff += 512;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001814:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3b01      	subs	r3, #1
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ee      	bne.n	8001800 <SD_disk_write+0xac>
 8001822:	e000      	b.n	8001826 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001824:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001826:	21fd      	movs	r1, #253	; 0xfd
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fd95 	bl	8001358 <SD_TxDataBlock>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <SD_disk_write+0xe4>
      {
        count = 1;
 8001834:	2301      	movs	r3, #1
 8001836:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001838:	f7ff fc80 	bl	800113c <DESELECT>
  SPI_RxByte();
 800183c:	f7ff fcbe 	bl	80011bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf14      	ite	ne
 8001846:	2301      	movne	r3, #1
 8001848:	2300      	moveq	r3, #0
 800184a:	b2db      	uxtb	r3, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000000 	.word	0x20000000
 8001858:	200000b0 	.word	0x200000b0

0800185c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b08b      	sub	sp, #44	; 0x2c
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	603a      	str	r2, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	460b      	mov	r3, r1
 800186a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SD_disk_ioctl+0x1e>
 8001876:	2304      	movs	r3, #4
 8001878:	e115      	b.n	8001aa6 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	2b05      	cmp	r3, #5
 8001884:	d124      	bne.n	80018d0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d012      	beq.n	80018b4 <SD_disk_ioctl+0x58>
 800188e:	2b02      	cmp	r3, #2
 8001890:	dc1a      	bgt.n	80018c8 <SD_disk_ioctl+0x6c>
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <SD_disk_ioctl+0x40>
 8001896:	2b01      	cmp	r3, #1
 8001898:	d006      	beq.n	80018a8 <SD_disk_ioctl+0x4c>
 800189a:	e015      	b.n	80018c8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800189c:	f7ff fd16 	bl	80012cc <SD_PowerOff>
      res = RES_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018a6:	e0fc      	b.n	8001aa2 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 80018a8:	f7ff fcce 	bl	8001248 <SD_PowerOn>
      res = RES_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018b2:	e0f6      	b.n	8001aa2 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	1c5c      	adds	r4, r3, #1
 80018b8:	f7ff fd14 	bl	80012e4 <SD_CheckPower>
 80018bc:	4603      	mov	r3, r0
 80018be:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80018c6:	e0ec      	b.n	8001aa2 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 80018c8:	2304      	movs	r3, #4
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018ce:	e0e8      	b.n	8001aa2 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80018d0:	4b77      	ldr	r3, [pc, #476]	; (8001ab0 <SD_disk_ioctl+0x254>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SD_disk_ioctl+0x86>
 80018de:	2303      	movs	r3, #3
 80018e0:	e0e1      	b.n	8001aa6 <SD_disk_ioctl+0x24a>

    SELECT();
 80018e2:	f7ff fc1f 	bl	8001124 <SELECT>

    switch (ctrl)
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	2b0d      	cmp	r3, #13
 80018ea:	f200 80cb 	bhi.w	8001a84 <SD_disk_ioctl+0x228>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <SD_disk_ioctl+0x98>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	080019ef 	.word	0x080019ef
 80018f8:	0800192d 	.word	0x0800192d
 80018fc:	080019df 	.word	0x080019df
 8001900:	08001a85 	.word	0x08001a85
 8001904:	08001a85 	.word	0x08001a85
 8001908:	08001a85 	.word	0x08001a85
 800190c:	08001a85 	.word	0x08001a85
 8001910:	08001a85 	.word	0x08001a85
 8001914:	08001a85 	.word	0x08001a85
 8001918:	08001a85 	.word	0x08001a85
 800191c:	08001a85 	.word	0x08001a85
 8001920:	08001a01 	.word	0x08001a01
 8001924:	08001a25 	.word	0x08001a25
 8001928:	08001a49 	.word	0x08001a49
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800192c:	2100      	movs	r1, #0
 800192e:	2049      	movs	r0, #73	; 0x49
 8001930:	f7ff fd55 	bl	80013de <SD_SendCmd>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 80a8 	bne.w	8001a8c <SD_disk_ioctl+0x230>
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2110      	movs	r1, #16
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fcda 	bl	80012fc <SD_RxDataBlock>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 809e 	beq.w	8001a8c <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001950:	7b3b      	ldrb	r3, [r7, #12]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b01      	cmp	r3, #1
 8001958:	d10e      	bne.n	8001978 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800195a:	7d7b      	ldrb	r3, [r7, #21]
 800195c:	b29a      	uxth	r2, r3
 800195e:	7d3b      	ldrb	r3, [r7, #20]
 8001960:	b29b      	uxth	r3, r3
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	b29b      	uxth	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	3301      	adds	r3, #1
 800196c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800196e:	8bfb      	ldrh	r3, [r7, #30]
 8001970:	029a      	lsls	r2, r3, #10
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e02e      	b.n	80019d6 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001978:	7c7b      	ldrb	r3, [r7, #17]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	b2da      	uxtb	r2, r3
 8001980:	7dbb      	ldrb	r3, [r7, #22]
 8001982:	09db      	lsrs	r3, r3, #7
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b2da      	uxtb	r2, r3
 800198a:	7d7b      	ldrb	r3, [r7, #21]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f003 0306 	and.w	r3, r3, #6
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4413      	add	r3, r2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	3302      	adds	r3, #2
 800199c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80019a0:	7d3b      	ldrb	r3, [r7, #20]
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	7cbb      	ldrb	r3, [r7, #18]
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80019c8:	8bfa      	ldrh	r2, [r7, #30]
 80019ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80019ce:	3b09      	subs	r3, #9
 80019d0:	409a      	lsls	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80019dc:	e056      	b.n	8001a8c <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019ec:	e055      	b.n	8001a9a <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80019ee:	f7ff fc0f 	bl	8001210 <SD_ReadyWait>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2bff      	cmp	r3, #255	; 0xff
 80019f6:	d14b      	bne.n	8001a90 <SD_disk_ioctl+0x234>
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019fe:	e047      	b.n	8001a90 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a00:	2100      	movs	r1, #0
 8001a02:	2049      	movs	r0, #73	; 0x49
 8001a04:	f7ff fceb 	bl	80013de <SD_SendCmd>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d142      	bne.n	8001a94 <SD_disk_ioctl+0x238>
 8001a0e:	2110      	movs	r1, #16
 8001a10:	6a38      	ldr	r0, [r7, #32]
 8001a12:	f7ff fc73 	bl	80012fc <SD_RxDataBlock>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d03b      	beq.n	8001a94 <SD_disk_ioctl+0x238>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a22:	e037      	b.n	8001a94 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a24:	2100      	movs	r1, #0
 8001a26:	204a      	movs	r0, #74	; 0x4a
 8001a28:	f7ff fcd9 	bl	80013de <SD_SendCmd>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d132      	bne.n	8001a98 <SD_disk_ioctl+0x23c>
 8001a32:	2110      	movs	r1, #16
 8001a34:	6a38      	ldr	r0, [r7, #32]
 8001a36:	f7ff fc61 	bl	80012fc <SD_RxDataBlock>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d02b      	beq.n	8001a98 <SD_disk_ioctl+0x23c>
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001a46:	e027      	b.n	8001a98 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	207a      	movs	r0, #122	; 0x7a
 8001a4c:	f7ff fcc7 	bl	80013de <SD_SendCmd>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d116      	bne.n	8001a84 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a5c:	e00b      	b.n	8001a76 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001a5e:	6a3c      	ldr	r4, [r7, #32]
 8001a60:	1c63      	adds	r3, r4, #1
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	f7ff fbaa 	bl	80011bc <SPI_RxByte>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001a6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a70:	3301      	adds	r3, #1
 8001a72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d9ef      	bls.n	8001a5e <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001a84:	2304      	movs	r3, #4
 8001a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a8a:	e006      	b.n	8001a9a <SD_disk_ioctl+0x23e>
      break;
 8001a8c:	bf00      	nop
 8001a8e:	e004      	b.n	8001a9a <SD_disk_ioctl+0x23e>
      break;
 8001a90:	bf00      	nop
 8001a92:	e002      	b.n	8001a9a <SD_disk_ioctl+0x23e>
      break;
 8001a94:	bf00      	nop
 8001a96:	e000      	b.n	8001a9a <SD_disk_ioctl+0x23e>
      break;
 8001a98:	bf00      	nop
    }

    DESELECT();
 8001a9a:	f7ff fb4f 	bl	800113c <DESELECT>
    SPI_RxByte();
 8001a9e:	f7ff fb8d 	bl	80011bc <SPI_RxByte>
  }

  return res;
 8001aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	372c      	adds	r7, #44	; 0x2c
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <vApplicationMallocFailedHook>:
/* Hook prototypes */
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
	while(1);
 8001ab8:	e7fe      	b.n	8001ab8 <vApplicationMallocFailedHook+0x4>
	...

08001abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac2:	f000 fd6b 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ac6:	f000 f84f 	bl	8001b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aca:	f000 f919 	bl	8001d00 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001ace:	f000 f8a9 	bl	8001c24 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001ad2:	f004 ff8b 	bl	80069ec <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8001ad6:	f000 f8e3 	bl	8001ca0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n\r\n(Powering up)\r\nMary had a little lamb --\r\nI ate it with mint sauce.\r\n\r\n");
 8001ada:	481a      	ldr	r0, [pc, #104]	; (8001b44 <main+0x88>)
 8001adc:	f000 f97e 	bl	8001ddc <myprintf>

  myprintf("SD Card Connecting\r\n");
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <main+0x8c>)
 8001ae2:	f000 f97b 	bl	8001ddc <myprintf>
  fres = f_mount(&FatFs, "0", 1);    //1=mount now
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4918      	ldr	r1, [pc, #96]	; (8001b4c <main+0x90>)
 8001aea:	4819      	ldr	r0, [pc, #100]	; (8001b50 <main+0x94>)
 8001aec:	f007 f8b4 	bl	8008c58 <f_mount>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <main+0x98>)
 8001af6:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <main+0x98>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <main+0x52>
  {
	myprintf("No SD Card found : (%i)\r\n", fres);
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <main+0x98>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	4814      	ldr	r0, [pc, #80]	; (8001b58 <main+0x9c>)
 8001b08:	f000 f968 	bl	8001ddc <myprintf>
 8001b0c:	e002      	b.n	8001b14 <main+0x58>
  }
  else {
	myprintf("SD Card Mounted Successfully!!!\r\n");
 8001b0e:	4813      	ldr	r0, [pc, #76]	; (8001b5c <main+0xa0>)
 8001b10:	f000 f964 	bl	8001ddc <myprintf>
  }
  f_mount(NULL, "0", 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	490d      	ldr	r1, [pc, #52]	; (8001b4c <main+0x90>)
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f007 f89d 	bl	8008c58 <f_mount>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <main+0xa4>)
 8001b20:	1d3c      	adds	r4, r7, #4
 8001b22:	461d      	mov	r5, r3
 8001b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f009 f86f 	bl	800ac14 <osThreadCreate>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <main+0xa8>)
 8001b3a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b3c:	f009 f863 	bl	800ac06 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <main+0x84>
 8001b42:	bf00      	nop
 8001b44:	0800dc6c 	.word	0x0800dc6c
 8001b48:	0800dcb8 	.word	0x0800dcb8
 8001b4c:	0800dcd0 	.word	0x0800dcd0
 8001b50:	200001d4 	.word	0x200001d4
 8001b54:	20002234 	.word	0x20002234
 8001b58:	0800dcd4 	.word	0x0800dcd4
 8001b5c:	0800dcf0 	.word	0x0800dcf0
 8001b60:	0800dd14 	.word	0x0800dd14
 8001b64:	2000019c 	.word	0x2000019c

08001b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0a6      	sub	sp, #152	; 0x98
 8001b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b72:	2228      	movs	r2, #40	; 0x28
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f00b fb52 	bl	800d220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2258      	movs	r2, #88	; 0x58
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00b fb44 	bl	800d220 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bb4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f001 f9be 	bl	8002f48 <HAL_RCC_OscConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001bd2:	f000 facf 	bl	8002174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 f9fc 	bl	8003ff0 <HAL_RCC_ClockConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bfe:	f000 fab9 	bl	8002174 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fc57 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c18:	f000 faac 	bl	8002174 <Error_Handler>
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3798      	adds	r7, #152	; 0x98
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <MX_SPI1_Init+0x78>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c72:	2207      	movs	r2, #7
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c7e:	2208      	movs	r2, #8
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_SPI1_Init+0x74>)
 8001c84:	f002 fe3a 	bl	80048fc <HAL_SPI_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c8e:	f000 fa71 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200000b4 	.word	0x200000b4
 8001c9c:	40013000 	.word	0x40013000

08001ca0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <MX_USART2_UART_Init+0x5c>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_USART2_UART_Init+0x58>)
 8001ce4:	f003 fe70 	bl	80059c8 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cee:	f000 fa41 	bl	8002174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000118 	.word	0x20000118
 8001cfc:	40004400 	.word	0x40004400

08001d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d16:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d20:	6153      	str	r3, [r2, #20]
 8001d22:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d38:	6153      	str	r3, [r2, #20]
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	6153      	str	r3, [r2, #20]
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d68:	6153      	str	r3, [r2, #20]
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_GPIO_Init+0xd0>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	4816      	ldr	r0, [pc, #88]	; (8001dd4 <MX_GPIO_Init+0xd4>)
 8001d7c:	f001 f88e 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <MX_GPIO_Init+0xd8>)
 8001d98:	f000 fef6 	bl	8002b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001d9c:	2340      	movs	r3, #64	; 0x40
 8001d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <MX_GPIO_Init+0xd4>)
 8001db4:	f000 fee8 	bl	8002b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2105      	movs	r1, #5
 8001dbc:	2028      	movs	r0, #40	; 0x28
 8001dbe:	f000 fcdb 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dc2:	2028      	movs	r0, #40	; 0x28
 8001dc4:	f000 fcf4 	bl	80027b0 <HAL_NVIC_EnableIRQ>

}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	; 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400
 8001dd8:	48000800 	.word	0x48000800

08001ddc <myprintf>:

/* USER CODE BEGIN 4 */
void myprintf(const char *fmt, ...) {
 8001ddc:	b40f      	push	{r0, r1, r2, r3}
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b084      	sub	sp, #16
 8001de2:	af00      	add	r7, sp, #0

  char *buffer = malloc(100);
 8001de4:	2064      	movs	r0, #100	; 0x64
 8001de6:	f00b f9fd 	bl	800d1e4 <malloc>
 8001dea:	4603      	mov	r3, r0
 8001dec:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, fmt);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, 100, fmt, args);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	2164      	movs	r1, #100	; 0x64
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f00b fbba 	bl	800d574 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f7fe f9ed 	bl	80001e0 <strlen>
 8001e06:	4603      	mov	r3, r0
 8001e08:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	4806      	ldr	r0, [pc, #24]	; (8001e30 <myprintf+0x54>)
 8001e16:	f003 fe25 	bl	8005a64 <HAL_UART_Transmit>
  free(buffer);
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f00b f9ea 	bl	800d1f4 <free>
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e2a:	b004      	add	sp, #16
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000118 	.word	0x20000118

08001e34 <print_buffer>:

void print_buffer(CSV_BUFFER *buffer){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
	int i, j;
	myprintf("\n");
 8001e3c:	481f      	ldr	r0, [pc, #124]	; (8001ebc <print_buffer+0x88>)
 8001e3e:	f7ff ffcd 	bl	8001ddc <myprintf>
	for (i = 0; i < buffer->rows; i++) {
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e02c      	b.n	8001ea2 <print_buffer+0x6e>
	for (j = 0; j < buffer->width[i]; j++) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	e01a      	b.n	8001e84 <print_buffer+0x50>
			myprintf("%c%s%c%c", buffer->text_delim, buffer->field[i][j]->text, buffer->text_delim, buffer->field_delim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7b5b      	ldrb	r3, [r3, #13]
 8001e52:	4619      	mov	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7b5b      	ldrb	r3, [r3, #13]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7b1b      	ldrb	r3, [r3, #12]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4603      	mov	r3, r0
 8001e78:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <print_buffer+0x8c>)
 8001e7a:	f7ff ffaf 	bl	8001ddc <myprintf>
	for (j = 0; j < buffer->width[i]; j++) {
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3301      	adds	r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d8db      	bhi.n	8001e4e <print_buffer+0x1a>
		}
		myprintf("\r\n");
 8001e96:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <print_buffer+0x90>)
 8001e98:	f7ff ffa0 	bl	8001ddc <myprintf>
	for (i = 0; i < buffer->rows; i++) {
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8cd      	bhi.n	8001e48 <print_buffer+0x14>
	}
	myprintf("\n\n");
 8001eac:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <print_buffer+0x94>)
 8001eae:	f7ff ff95 	bl	8001ddc <myprintf>
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	0800dd28 	.word	0x0800dd28
 8001ec0:	0800dd2c 	.word	0x0800dd2c
 8001ec4:	0800dd38 	.word	0x0800dd38
 8001ec8:	0800dd3c 	.word	0x0800dd3c

08001ecc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	; 0x30
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int current_state = 1;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  const TCHAR *file_path = "0:/csv/test.csv";
 8001ed8:	4b84      	ldr	r3, [pc, #528]	; (80020ec <StartDefaultTask+0x220>)
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Infinite loop */
  for(;;)
  {
	myprintf("Running Default Task \r\n");
 8001edc:	4884      	ldr	r0, [pc, #528]	; (80020f0 <StartDefaultTask+0x224>)
 8001ede:	f7ff ff7d 	bl	8001ddc <myprintf>

	fres = f_mount(&FatFs, "", 1);    //1=mount now
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4983      	ldr	r1, [pc, #524]	; (80020f4 <StartDefaultTask+0x228>)
 8001ee6:	4884      	ldr	r0, [pc, #528]	; (80020f8 <StartDefaultTask+0x22c>)
 8001ee8:	f006 feb6 	bl	8008c58 <f_mount>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b82      	ldr	r3, [pc, #520]	; (80020fc <StartDefaultTask+0x230>)
 8001ef2:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8001ef4:	4b81      	ldr	r3, [pc, #516]	; (80020fc <StartDefaultTask+0x230>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <StartDefaultTask+0x3e>
	{
	  myprintf("No SD Card found : (%i)\r\n", fres);
 8001efc:	4b7f      	ldr	r3, [pc, #508]	; (80020fc <StartDefaultTask+0x230>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4619      	mov	r1, r3
 8001f02:	487f      	ldr	r0, [pc, #508]	; (8002100 <StartDefaultTask+0x234>)
 8001f04:	f7ff ff6a 	bl	8001ddc <myprintf>
 8001f08:	e085      	b.n	8002016 <StartDefaultTask+0x14a>
	}
	else {
		myprintf("SD Card Mounted Successfully!!!\r\n");
 8001f0a:	487e      	ldr	r0, [pc, #504]	; (8002104 <StartDefaultTask+0x238>)
 8001f0c:	f7ff ff66 	bl	8001ddc <myprintf>
		FATFS *pfs;
		DWORD fre_clust;
		UINT br;
		uint32_t totalSpace, freeSpace;
		f_getfree("", &fre_clust, &pfs);
 8001f10:	f107 0214 	add.w	r2, r7, #20
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4876      	ldr	r0, [pc, #472]	; (80020f4 <StartDefaultTask+0x228>)
 8001f1c:	f008 fb6a 	bl	800a5f4 <f_getfree>
		totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	3b02      	subs	r3, #2
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f30:	7892      	ldrb	r2, [r2, #2]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fc16 	bl	8000768 <__aeabi_ui2d>
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	4b71      	ldr	r3, [pc, #452]	; (8002108 <StartDefaultTask+0x23c>)
 8001f42:	f7fe f9a5 	bl	8000290 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fc85 	bl	800085c <__aeabi_d2uiz>
 8001f52:	4603      	mov	r3, r0
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
		freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5c:	789b      	ldrb	r3, [r3, #2]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fbfe 	bl	8000768 <__aeabi_ui2d>
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	4b65      	ldr	r3, [pc, #404]	; (8002108 <StartDefaultTask+0x23c>)
 8001f72:	f7fe f98d 	bl	8000290 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fc6d 	bl	800085c <__aeabi_d2uiz>
 8001f82:	4603      	mov	r3, r0
 8001f84:	623b      	str	r3, [r7, #32]
		myprintf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\r\n", totalSpace, freeSpace);
 8001f86:	6a3a      	ldr	r2, [r7, #32]
 8001f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8a:	4860      	ldr	r0, [pc, #384]	; (800210c <StartDefaultTask+0x240>)
 8001f8c:	f7ff ff26 	bl	8001ddc <myprintf>
		fres = f_open(&rwfile, "text.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001f90:	220a      	movs	r2, #10
 8001f92:	495f      	ldr	r1, [pc, #380]	; (8002110 <StartDefaultTask+0x244>)
 8001f94:	485f      	ldr	r0, [pc, #380]	; (8002114 <StartDefaultTask+0x248>)
 8001f96:	f006 fecb 	bl	8008d30 <f_open>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b57      	ldr	r3, [pc, #348]	; (80020fc <StartDefaultTask+0x230>)
 8001fa0:	701a      	strb	r2, [r3, #0]
		if(fres != FR_OK){
 8001fa2:	4b56      	ldr	r3, [pc, #344]	; (80020fc <StartDefaultTask+0x230>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <StartDefaultTask+0xec>
			myprintf("File creation/open Error : (%i)\r\n", fres);
 8001faa:	4b54      	ldr	r3, [pc, #336]	; (80020fc <StartDefaultTask+0x230>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4859      	ldr	r0, [pc, #356]	; (8002118 <StartDefaultTask+0x24c>)
 8001fb2:	f7ff ff13 	bl	8001ddc <myprintf>
 8001fb6:	e02e      	b.n	8002016 <StartDefaultTask+0x14a>
		}
		else{
			myprintf("Writing data!!!\r\n");
 8001fb8:	4858      	ldr	r0, [pc, #352]	; (800211c <StartDefaultTask+0x250>)
 8001fba:	f7ff ff0f 	bl	8001ddc <myprintf>
			//write the data
			f_puts("Welcome to the best zone", &rwfile);
 8001fbe:	4955      	ldr	r1, [pc, #340]	; (8002114 <StartDefaultTask+0x248>)
 8001fc0:	4857      	ldr	r0, [pc, #348]	; (8002120 <StartDefaultTask+0x254>)
 8001fc2:	f008 fd18 	bl	800a9f6 <f_puts>
			//close your file
			f_close(&rwfile);
 8001fc6:	4853      	ldr	r0, [pc, #332]	; (8002114 <StartDefaultTask+0x248>)
 8001fc8:	f007 ff6f 	bl	8009eaa <f_close>
			fres = f_open(&rwfile, "text.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001fcc:	220b      	movs	r2, #11
 8001fce:	4950      	ldr	r1, [pc, #320]	; (8002110 <StartDefaultTask+0x244>)
 8001fd0:	4850      	ldr	r0, [pc, #320]	; (8002114 <StartDefaultTask+0x248>)
 8001fd2:	f006 fead 	bl	8008d30 <f_open>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <StartDefaultTask+0x230>)
 8001fdc:	701a      	strb	r2, [r3, #0]
			if(fres != FR_OK){
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <StartDefaultTask+0x230>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <StartDefaultTask+0x128>
				myprintf("File creation/open Error : (%i)\r\n", fres);
 8001fe6:	4b45      	ldr	r3, [pc, #276]	; (80020fc <StartDefaultTask+0x230>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4619      	mov	r1, r3
 8001fec:	484a      	ldr	r0, [pc, #296]	; (8002118 <StartDefaultTask+0x24c>)
 8001fee:	f7ff fef5 	bl	8001ddc <myprintf>
 8001ff2:	e010      	b.n	8002016 <StartDefaultTask+0x14a>
			}
			else{
				//read the data
				f_read(&rwfile, rwbuffer, 10, &br);
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	220a      	movs	r2, #10
 8001ffa:	494a      	ldr	r1, [pc, #296]	; (8002124 <StartDefaultTask+0x258>)
 8001ffc:	4845      	ldr	r0, [pc, #276]	; (8002114 <StartDefaultTask+0x248>)
 8001ffe:	f007 f9aa 	bl	8009356 <f_read>
				myprintf("Read Data : %s\r\n", rwbuffer);
 8002002:	4948      	ldr	r1, [pc, #288]	; (8002124 <StartDefaultTask+0x258>)
 8002004:	4848      	ldr	r0, [pc, #288]	; (8002128 <StartDefaultTask+0x25c>)
 8002006:	f7ff fee9 	bl	8001ddc <myprintf>
				//close your file
				f_close(&rwfile);
 800200a:	4842      	ldr	r0, [pc, #264]	; (8002114 <StartDefaultTask+0x248>)
 800200c:	f007 ff4d 	bl	8009eaa <f_close>
				myprintf("Closing File!!!\r\n");
 8002010:	4846      	ldr	r0, [pc, #280]	; (800212c <StartDefaultTask+0x260>)
 8002012:	f7ff fee3 	bl	8001ddc <myprintf>
			}
		}

	}
	f_mount(NULL, "0", 0);
 8002016:	2200      	movs	r2, #0
 8002018:	4945      	ldr	r1, [pc, #276]	; (8002130 <StartDefaultTask+0x264>)
 800201a:	2000      	movs	r0, #0
 800201c:	f006 fe1c 	bl	8008c58 <f_mount>

	myprintf("Mounting SD card\r\n");
 8002020:	4844      	ldr	r0, [pc, #272]	; (8002134 <StartDefaultTask+0x268>)
 8002022:	f7ff fedb 	bl	8001ddc <myprintf>
	fres = f_mount(&FatFs, "0", 1);
 8002026:	2201      	movs	r2, #1
 8002028:	4941      	ldr	r1, [pc, #260]	; (8002130 <StartDefaultTask+0x264>)
 800202a:	4833      	ldr	r0, [pc, #204]	; (80020f8 <StartDefaultTask+0x22c>)
 800202c:	f006 fe14 	bl	8008c58 <f_mount>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <StartDefaultTask+0x230>)
 8002036:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <StartDefaultTask+0x230>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <StartDefaultTask+0x182>
	{
		myprintf("f_mount problem: %d\r\n", fres);
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <StartDefaultTask+0x230>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	483c      	ldr	r0, [pc, #240]	; (8002138 <StartDefaultTask+0x26c>)
 8002048:	f7ff fec8 	bl	8001ddc <myprintf>
 800204c:	e049      	b.n	80020e2 <StartDefaultTask+0x216>
	}
	else{
		fres = f_open(&rwfile, file_path, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 800204e:	2203      	movs	r2, #3
 8002050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002052:	4830      	ldr	r0, [pc, #192]	; (8002114 <StartDefaultTask+0x248>)
 8002054:	f006 fe6c 	bl	8008d30 <f_open>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <StartDefaultTask+0x230>)
 800205e:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK)
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <StartDefaultTask+0x230>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <StartDefaultTask+0x1aa>
		{
			myprintf("f_open pb: %d\r\n", fres);
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <StartDefaultTask+0x230>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	4833      	ldr	r0, [pc, #204]	; (800213c <StartDefaultTask+0x270>)
 8002070:	f7ff feb4 	bl	8001ddc <myprintf>
 8002074:	e035      	b.n	80020e2 <StartDefaultTask+0x216>
		}
		else{
			myprintf("Creating buffer\r\n");
 8002076:	4832      	ldr	r0, [pc, #200]	; (8002140 <StartDefaultTask+0x274>)
 8002078:	f7ff feb0 	bl	8001ddc <myprintf>
			CSV_BUFFER *buffer = csv_create_buffer();
 800207c:	f7fe fe4e 	bl	8000d1c <csv_create_buffer>
 8002080:	61f8      	str	r0, [r7, #28]

			myprintf("Loading csv\r\n");
 8002082:	4830      	ldr	r0, [pc, #192]	; (8002144 <StartDefaultTask+0x278>)
 8002084:	f7ff feaa 	bl	8001ddc <myprintf>
			csv_load(buffer, &rwfile);
 8002088:	4922      	ldr	r1, [pc, #136]	; (8002114 <StartDefaultTask+0x248>)
 800208a:	69f8      	ldr	r0, [r7, #28]
 800208c:	f7fe feb9 	bl	8000e02 <csv_load>

			print_buffer(buffer);
 8002090:	69f8      	ldr	r0, [r7, #28]
 8002092:	f7ff fecf 	bl	8001e34 <print_buffer>

			// add a row and input values

			if (current_state == 1){
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d113      	bne.n	80020c4 <StartDefaultTask+0x1f8>
				myprintf("editing csv\r\n");
 800209c:	482a      	ldr	r0, [pc, #168]	; (8002148 <StartDefaultTask+0x27c>)
 800209e:	f7ff fe9d 	bl	8001ddc <myprintf>
				char *new_value = "88";
 80020a2:	4b2a      	ldr	r3, [pc, #168]	; (800214c <StartDefaultTask+0x280>)
 80020a4:	61bb      	str	r3, [r7, #24]
				current_state--;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	3b01      	subs	r3, #1
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
				csv_set_field(buffer, 1, 1, (char *) new_value);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2201      	movs	r2, #1
 80020b0:	2101      	movs	r1, #1
 80020b2:	69f8      	ldr	r0, [r7, #28]
 80020b4:	f7ff f800 	bl	80010b8 <csv_set_field>
				csv_set_field(buffer, 1, 2, (char *) new_value);
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2202      	movs	r2, #2
 80020bc:	2101      	movs	r1, #1
 80020be:	69f8      	ldr	r0, [r7, #28]
 80020c0:	f7fe fffa 	bl	80010b8 <csv_set_field>
			}
			csv_save(&rwfile, buffer);
 80020c4:	69f9      	ldr	r1, [r7, #28]
 80020c6:	4813      	ldr	r0, [pc, #76]	; (8002114 <StartDefaultTask+0x248>)
 80020c8:	f7fe ff09 	bl	8000ede <csv_save>

			f_mount(NULL, "0", 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	4918      	ldr	r1, [pc, #96]	; (8002130 <StartDefaultTask+0x264>)
 80020d0:	2000      	movs	r0, #0
 80020d2:	f006 fdc1 	bl	8008c58 <f_mount>

			f_close(&rwfile);
 80020d6:	480f      	ldr	r0, [pc, #60]	; (8002114 <StartDefaultTask+0x248>)
 80020d8:	f007 fee7 	bl	8009eaa <f_close>
			csv_destroy_buffer(buffer);
 80020dc:	69f8      	ldr	r0, [r7, #28]
 80020de:	f7fe fe3c 	bl	8000d5a <csv_destroy_buffer>
		}
	}


    osDelay(4000);
 80020e2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80020e6:	f008 fdbc 	bl	800ac62 <osDelay>
	myprintf("Running Default Task \r\n");
 80020ea:	e6f7      	b.n	8001edc <StartDefaultTask+0x10>
 80020ec:	0800dd40 	.word	0x0800dd40
 80020f0:	0800ddc4 	.word	0x0800ddc4
 80020f4:	0800dd64 	.word	0x0800dd64
 80020f8:	200001d4 	.word	0x200001d4
 80020fc:	20002234 	.word	0x20002234
 8002100:	0800dcd4 	.word	0x0800dcd4
 8002104:	0800dcf0 	.word	0x0800dcf0
 8002108:	3fe00000 	.word	0x3fe00000
 800210c:	0800dddc 	.word	0x0800dddc
 8002110:	0800de0c 	.word	0x0800de0c
 8002114:	20001208 	.word	0x20001208
 8002118:	0800de18 	.word	0x0800de18
 800211c:	0800de3c 	.word	0x0800de3c
 8002120:	0800de50 	.word	0x0800de50
 8002124:	200001a0 	.word	0x200001a0
 8002128:	0800de6c 	.word	0x0800de6c
 800212c:	0800de80 	.word	0x0800de80
 8002130:	0800dcd0 	.word	0x0800dcd0
 8002134:	0800dd50 	.word	0x0800dd50
 8002138:	0800de94 	.word	0x0800de94
 800213c:	0800dd7c 	.word	0x0800dd7c
 8002140:	0800dd8c 	.word	0x0800dd8c
 8002144:	0800dda0 	.word	0x0800dda0
 8002148:	0800deac 	.word	0x0800deac
 800214c:	0800debc 	.word	0x0800debc

08002150 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002162:	f000 fa31 	bl	80025c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40001000 	.word	0x40001000

08002174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8002178:	e7fe      	b.n	8002178 <Error_Handler+0x4>
	...

0800217c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_MspInit+0x8c>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	4a20      	ldr	r2, [pc, #128]	; (8002208 <HAL_MspInit+0x8c>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6193      	str	r3, [r2, #24]
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_MspInit+0x8c>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_MspInit+0x8c>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_MspInit+0x8c>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_MspInit+0x8c>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	210f      	movs	r1, #15
 80021b6:	f06f 0001 	mvn.w	r0, #1
 80021ba:	f000 fadd 	bl	8002778 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2105      	movs	r1, #5
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 fad8 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80021c8:	2001      	movs	r0, #1
 80021ca:	f000 faf1 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2105      	movs	r1, #5
 80021d2:	2004      	movs	r0, #4
 80021d4:	f000 fad0 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80021d8:	2004      	movs	r0, #4
 80021da:	f000 fae9 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2105      	movs	r1, #5
 80021e2:	2005      	movs	r0, #5
 80021e4:	f000 fac8 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80021e8:	2005      	movs	r0, #5
 80021ea:	f000 fae1 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2105      	movs	r1, #5
 80021f2:	2051      	movs	r0, #81	; 0x51
 80021f4:	f000 fac0 	bl	8002778 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80021f8:	2051      	movs	r0, #81	; 0x51
 80021fa:	f000 fad9 	bl	80027b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_SPI_MspInit+0x7c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d128      	bne.n	8002280 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_SPI_MspInit+0x80>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4a16      	ldr	r2, [pc, #88]	; (800228c <HAL_SPI_MspInit+0x80>)
 8002234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002238:	6193      	str	r3, [r2, #24]
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <HAL_SPI_MspInit+0x80>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_SPI_MspInit+0x80>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_SPI_MspInit+0x80>)
 800224c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002250:	6153      	str	r3, [r2, #20]
 8002252:	4b0e      	ldr	r3, [pc, #56]	; (800228c <HAL_SPI_MspInit+0x80>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800225e:	23e0      	movs	r3, #224	; 0xe0
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800226e:	2305      	movs	r3, #5
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227c:	f000 fc84 	bl	8002b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40013000 	.word	0x40013000
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_UART_MspInit+0x8c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d130      	bne.n	8002314 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_UART_MspInit+0x90>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_UART_MspInit+0x90>)
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	61d3      	str	r3, [r2, #28]
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_UART_MspInit+0x90>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_UART_MspInit+0x90>)
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4a14      	ldr	r2, [pc, #80]	; (8002320 <HAL_UART_MspInit+0x90>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6153      	str	r3, [r2, #20]
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_UART_MspInit+0x90>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022e2:	230c      	movs	r3, #12
 80022e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022f2:	2307      	movs	r3, #7
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002300:	f000 fc42 	bl	8002b88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2105      	movs	r1, #5
 8002308:	2026      	movs	r0, #38	; 0x26
 800230a:	f000 fa35 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800230e:	2026      	movs	r0, #38	; 0x26
 8002310:	f000 fa4e 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002314:	bf00      	nop
 8002316:	3728      	adds	r7, #40	; 0x28
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40004400 	.word	0x40004400
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	; 0x38
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002334:	4b33      	ldr	r3, [pc, #204]	; (8002404 <HAL_InitTick+0xe0>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4a32      	ldr	r2, [pc, #200]	; (8002404 <HAL_InitTick+0xe0>)
 800233a:	f043 0310 	orr.w	r3, r3, #16
 800233e:	61d3      	str	r3, [r2, #28]
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <HAL_InitTick+0xe0>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800234c:	f107 0210 	add.w	r2, r7, #16
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f002 f880 	bl	800445c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d103      	bne.n	800236e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002366:	f002 f835 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 800236a:	6378      	str	r0, [r7, #52]	; 0x34
 800236c:	e004      	b.n	8002378 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800236e:	f002 f831 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8002372:	4603      	mov	r3, r0
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	4a23      	ldr	r2, [pc, #140]	; (8002408 <HAL_InitTick+0xe4>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	3b01      	subs	r3, #1
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_InitTick+0xe8>)
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_InitTick+0xec>)
 800238a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_InitTick+0xe8>)
 800238e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002392:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_InitTick+0xe8>)
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_InitTick+0xe8>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <HAL_InitTick+0xe8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_InitTick+0xe8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023ac:	4817      	ldr	r0, [pc, #92]	; (800240c <HAL_InitTick+0xe8>)
 80023ae:	f003 f835 	bl	800541c <HAL_TIM_Base_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80023b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11b      	bne.n	80023f8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023c0:	4812      	ldr	r0, [pc, #72]	; (800240c <HAL_InitTick+0xe8>)
 80023c2:	f003 f88d 	bl	80054e0 <HAL_TIM_Base_Start_IT>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80023cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d111      	bne.n	80023f8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023d4:	2036      	movs	r0, #54	; 0x36
 80023d6:	f000 f9eb 	bl	80027b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d808      	bhi.n	80023f2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80023e0:	2200      	movs	r2, #0
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	2036      	movs	r0, #54	; 0x36
 80023e6:	f000 f9c7 	bl	8002778 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_InitTick+0xf0>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e002      	b.n	80023f8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3738      	adds	r7, #56	; 0x38
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000
 8002408:	431bde83 	.word	0x431bde83
 800240c:	20002238 	.word	0x20002238
 8002410:	40001000 	.word	0x40001000
 8002414:	20000008 	.word	0x20000008

08002418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800241c:	e7fe      	b.n	800241c <NMI_Handler+0x4>

0800241e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <MemManage_Handler+0x4>

0800242a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <BusFault_Handler+0x4>

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <UsageFault_Handler+0x4>

08002436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8002448:	f000 fd64 	bl	8002f14 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}

08002450 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8002454:	f000 fa32 	bl	80028bc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <USART2_IRQHandler+0x10>)
 8002472:	f003 fb8b 	bl	8005b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000118 	.word	0x20000118

08002480 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002484:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002488:	f000 fd20 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <TIM6_DAC_IRQHandler+0x10>)
 8002496:	f003 f893 	bl	80055c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20002238 	.word	0x20002238

080024a4 <FPU_IRQHandler>:

/**
  * @brief This function handles Floating point unit interrupt.
  */
void FPU_IRQHandler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <SystemInit+0x84>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <SystemInit+0x84>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	; (800253c <SystemInit+0x88>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <SystemInit+0x88>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <SystemInit+0x88>)
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	4918      	ldr	r1, [pc, #96]	; (800253c <SystemInit+0x88>)
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <SystemInit+0x8c>)
 80024dc:	4013      	ands	r3, r2
 80024de:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <SystemInit+0x88>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a15      	ldr	r2, [pc, #84]	; (800253c <SystemInit+0x88>)
 80024e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <SystemInit+0x88>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <SystemInit+0x88>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <SystemInit+0x88>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <SystemInit+0x88>)
 8002502:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002506:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <SystemInit+0x88>)
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	4a0b      	ldr	r2, [pc, #44]	; (800253c <SystemInit+0x88>)
 800250e:	f023 030f 	bic.w	r3, r3, #15
 8002512:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <SystemInit+0x88>)
 8002516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002518:	4908      	ldr	r1, [pc, #32]	; (800253c <SystemInit+0x88>)
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <SystemInit+0x90>)
 800251c:	4013      	ands	r3, r2
 800251e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <SystemInit+0x88>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002526:	4b04      	ldr	r3, [pc, #16]	; (8002538 <SystemInit+0x84>)
 8002528:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800252c:	609a      	str	r2, [r3, #8]
#endif
 }
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	40021000 	.word	0x40021000
 8002540:	f87fc00c 	.word	0xf87fc00c
 8002544:	ff00fccc 	.word	0xff00fccc

08002548 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002580 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <LoopForever+0x6>)
  ldr r1, =_edata
 800254e:	490e      	ldr	r1, [pc, #56]	; (8002588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <LoopForever+0xe>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002564:	4c0b      	ldr	r4, [pc, #44]	; (8002594 <LoopForever+0x16>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002572:	f7ff ff9f 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002576:	f00a fe0f 	bl	800d198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800257a:	f7ff fa9f 	bl	8001abc <main>

0800257e <LoopForever>:

LoopForever:
    b LoopForever
 800257e:	e7fe      	b.n	800257e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002580:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800258c:	0800e060 	.word	0x0800e060
  ldr r2, =_sbss
 8002590:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002594:	2000447c 	.word	0x2000447c

08002598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC1_2_IRQHandler>
	...

0800259c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_Init+0x28>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_Init+0x28>)
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f8d8 	bl	8002762 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f7ff feb6 	bl	8002324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff fde0 	bl	800217c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40022000 	.word	0x40022000

080025c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	2000000c 	.word	0x2000000c
 80025ec:	20002284 	.word	0x20002284

080025f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20002284 	.word	0x20002284

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff4c 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278a:	f7ff ff61 	bl	8002650 <__NVIC_GetPriorityGrouping>
 800278e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	6978      	ldr	r0, [r7, #20]
 8002796:	f7ff ffb1 	bl	80026fc <NVIC_EncodePriority>
 800279a:	4602      	mov	r2, r0
 800279c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff80 	bl	80026a8 <__NVIC_SetPriority>
}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff54 	bl	800266c <__NVIC_EnableIRQ>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d008      	beq.n	80027f0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2204      	movs	r2, #4
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e020      	b.n	8002832 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 020e 	bic.w	r2, r2, #14
 80027fe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	2101      	movs	r1, #1
 800281a:	fa01 f202 	lsl.w	r2, r1, r2
 800281e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002850:	2b02      	cmp	r3, #2
 8002852:	d005      	beq.n	8002860 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2204      	movs	r2, #4
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e027      	b.n	80028b0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 020e 	bic.w	r2, r2, #14
 800286e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	2101      	movs	r1, #1
 800288a:	fa01 f202 	lsl.w	r2, r1, r2
 800288e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	4798      	blx	r3
    } 
  }
  return status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d005      	beq.n	80028de <HAL_FLASH_IRQHandler+0x22>
 80028d2:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d10e      	bne.n	80028fc <HAL_FLASH_IRQHandler+0x40>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 80028de:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80028e4:	4b66      	ldr	r3, [pc, #408]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80028e6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ea:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80028ec:	f000 f8fa 	bl	8002ae4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f8d1 	bl	8002a98 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80028f6:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80028fc:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b20      	cmp	r3, #32
 8002906:	f040 80a0 	bne.w	8002a4a <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 800290c:	2220      	movs	r2, #32
 800290e:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002910:	4b5b      	ldr	r3, [pc, #364]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8097 	beq.w	8002a4a <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800291c:	4b58      	ldr	r3, [pc, #352]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d12d      	bne.n	8002982 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002926:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	4a54      	ldr	r2, [pc, #336]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 800292e:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8002938:	4b51      	ldr	r3, [pc, #324]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8a0 	bl	8002a84 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002944:	4b4e      	ldr	r3, [pc, #312]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294c:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 800294e:	4a4c      	ldr	r2, [pc, #304]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002954:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 800295a:	f023 0302 	bic.w	r3, r3, #2
 800295e:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f8f1 	bl	8002b48 <FLASH_PageErase>
 8002966:	e070      	b.n	8002a4a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4a44      	ldr	r2, [pc, #272]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002974:	4b42      	ldr	r3, [pc, #264]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f882 	bl	8002a84 <HAL_FLASH_EndOfOperationCallback>
 8002980:	e063      	b.n	8002a4a <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d10c      	bne.n	80029a6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800298c:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	4a3a      	ldr	r2, [pc, #232]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 8002992:	f023 0304 	bic.w	r3, r3, #4
 8002996:	6113      	str	r3, [r2, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 8002998:	2000      	movs	r0, #0
 800299a:	f000 f873 	bl	8002a84 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800299e:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e051      	b.n	8002a4a <HAL_FLASH_IRQHandler+0x18e>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	4a34      	ldr	r2, [pc, #208]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029ae:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d024      	beq.n	8002a02 <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 80029b8:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	3302      	adds	r3, #2
 80029be:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029c0:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	0c02      	lsrs	r2, r0, #16
 80029d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029dc:	0c0b      	lsrs	r3, r1, #16
 80029de:	4928      	ldr	r1, [pc, #160]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80029f0:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 80029f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029f6:	b293      	uxth	r3, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f856 	bl	8002aac <FLASH_Program_HalfWord>
 8002a00:	e023      	b.n	8002a4a <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d105      	bne.n	8002a18 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 f837 	bl	8002a84 <HAL_FLASH_EndOfOperationCallback>
 8002a16:	e011      	b.n	8002a3c <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d106      	bne.n	8002a30 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	3b02      	subs	r3, #2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f82b 	bl	8002a84 <HAL_FLASH_EndOfOperationCallback>
 8002a2e:	e005      	b.n	8002a3c <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	3b06      	subs	r3, #6
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f824 	bl	8002a84 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a42:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10e      	bne.n	8002a72 <HAL_FLASH_IRQHandler+0x1b6>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <HAL_FLASH_IRQHandler+0x1c0>)
 8002a66:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8002a6a:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_FLASH_IRQHandler+0x1c4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	761a      	strb	r2, [r3, #24]
  }
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000
 8002a80:	20002288 	.word	0x20002288

08002a84 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <FLASH_Program_HalfWord+0x30>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <FLASH_Program_HalfWord+0x34>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <FLASH_Program_HalfWord+0x34>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	887a      	ldrh	r2, [r7, #2]
 8002ace:	801a      	strh	r2, [r3, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	20002288 	.word	0x20002288
 8002ae0:	40022000 	.word	0x40022000

08002ae4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <FLASH_SetErrorCode+0x5c>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d109      	bne.n	8002b0e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <FLASH_SetErrorCode+0x60>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <FLASH_SetErrorCode+0x60>)
 8002b04:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f043 0310 	orr.w	r3, r3, #16
 8002b0c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <FLASH_SetErrorCode+0x5c>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d109      	bne.n	8002b2e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <FLASH_SetErrorCode+0x60>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <FLASH_SetErrorCode+0x60>)
 8002b24:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <FLASH_SetErrorCode+0x5c>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60d3      	str	r3, [r2, #12]
}  
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40022000 	.word	0x40022000
 8002b44:	20002288 	.word	0x20002288

08002b48 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <FLASH_PageErase+0x38>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <FLASH_PageErase+0x3c>)
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <FLASH_PageErase+0x3c>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <FLASH_PageErase+0x3c>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <FLASH_PageErase+0x3c>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <FLASH_PageErase+0x3c>)
 8002b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b72:	6113      	str	r3, [r2, #16]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	20002288 	.word	0x20002288
 8002b84:	40022000 	.word	0x40022000

08002b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b96:	e160      	b.n	8002e5a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8152 	beq.w	8002e54 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d005      	beq.n	8002bc8 <HAL_GPIO_Init+0x40>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d130      	bne.n	8002c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bfe:	2201      	movs	r2, #1
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 0201 	and.w	r2, r3, #1
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d017      	beq.n	8002c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	2203      	movs	r2, #3
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d123      	bne.n	8002cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	08da      	lsrs	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3208      	adds	r2, #8
 8002c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	6939      	ldr	r1, [r7, #16]
 8002cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0203 	and.w	r2, r3, #3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80ac 	beq.w	8002e54 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a5d      	ldr	r2, [pc, #372]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <HAL_GPIO_Init+0x2f0>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d14:	4a59      	ldr	r2, [pc, #356]	; (8002e7c <HAL_GPIO_Init+0x2f4>)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	220f      	movs	r2, #15
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d3e:	d025      	beq.n	8002d8c <HAL_GPIO_Init+0x204>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a4f      	ldr	r2, [pc, #316]	; (8002e80 <HAL_GPIO_Init+0x2f8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d01f      	beq.n	8002d88 <HAL_GPIO_Init+0x200>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a4e      	ldr	r2, [pc, #312]	; (8002e84 <HAL_GPIO_Init+0x2fc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d019      	beq.n	8002d84 <HAL_GPIO_Init+0x1fc>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a4d      	ldr	r2, [pc, #308]	; (8002e88 <HAL_GPIO_Init+0x300>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d013      	beq.n	8002d80 <HAL_GPIO_Init+0x1f8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a4c      	ldr	r2, [pc, #304]	; (8002e8c <HAL_GPIO_Init+0x304>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00d      	beq.n	8002d7c <HAL_GPIO_Init+0x1f4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a4b      	ldr	r2, [pc, #300]	; (8002e90 <HAL_GPIO_Init+0x308>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <HAL_GPIO_Init+0x1f0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a4a      	ldr	r2, [pc, #296]	; (8002e94 <HAL_GPIO_Init+0x30c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_GPIO_Init+0x1ec>
 8002d70:	2306      	movs	r3, #6
 8002d72:	e00c      	b.n	8002d8e <HAL_GPIO_Init+0x206>
 8002d74:	2307      	movs	r3, #7
 8002d76:	e00a      	b.n	8002d8e <HAL_GPIO_Init+0x206>
 8002d78:	2305      	movs	r3, #5
 8002d7a:	e008      	b.n	8002d8e <HAL_GPIO_Init+0x206>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e006      	b.n	8002d8e <HAL_GPIO_Init+0x206>
 8002d80:	2303      	movs	r3, #3
 8002d82:	e004      	b.n	8002d8e <HAL_GPIO_Init+0x206>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e002      	b.n	8002d8e <HAL_GPIO_Init+0x206>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_GPIO_Init+0x206>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	f002 0203 	and.w	r2, r2, #3
 8002d94:	0092      	lsls	r2, r2, #2
 8002d96:	4093      	lsls	r3, r2
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d9e:	4937      	ldr	r1, [pc, #220]	; (8002e7c <HAL_GPIO_Init+0x2f4>)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	089b      	lsrs	r3, r3, #2
 8002da4:	3302      	adds	r3, #2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dac:	4b3a      	ldr	r3, [pc, #232]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dd0:	4a31      	ldr	r2, [pc, #196]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dd6:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dfa:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e24:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_GPIO_Init+0x310>)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	3301      	adds	r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f47f ae97 	bne.w	8002b98 <HAL_GPIO_Init+0x10>
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	48000400 	.word	0x48000400
 8002e84:	48000800 	.word	0x48000800
 8002e88:	48000c00 	.word	0x48000c00
 8002e8c:	48001000 	.word	0x48001000
 8002e90:	48001400 	.word	0x48001400
 8002e94:	48001800 	.word	0x48001800
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb8:	e002      	b.n	8002ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ee2:	4a05      	ldr	r2, [pc, #20]	; (8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f806 	bl	8002efc <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002f18:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002f24:	f000 f808 	bl	8002f38 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002f28:	4b02      	ldr	r3, [pc, #8]	; (8002f34 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f2e:	615a      	str	r2, [r3, #20]
  }
}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40010400 	.word	0x40010400

08002f38 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f001 b83a 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 816f 	beq.w	8003262 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f84:	4bb5      	ldr	r3, [pc, #724]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d00c      	beq.n	8002faa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f90:	4bb2      	ldr	r3, [pc, #712]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d15c      	bne.n	8003056 <HAL_RCC_OscConfig+0x10e>
 8002f9c:	4baf      	ldr	r3, [pc, #700]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa8:	d155      	bne.n	8003056 <HAL_RCC_OscConfig+0x10e>
 8002faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_RCC_OscConfig+0x94>
 8002fd6:	4ba1      	ldr	r3, [pc, #644]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	e015      	b.n	8003008 <HAL_RCC_OscConfig+0xc0>
 8002fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ff8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003004:	4b95      	ldr	r3, [pc, #596]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800300c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003010:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003014:	fa92 f2a2 	rbit	r2, r2
 8003018:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800301c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003020:	fab2 f282 	clz	r2, r2
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f042 0220 	orr.w	r2, r2, #32
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f002 021f 	and.w	r2, r2, #31
 8003030:	2101      	movs	r1, #1
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8111 	beq.w	8003260 <HAL_RCC_OscConfig+0x318>
 800303e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003042:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 8108 	bne.w	8003260 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f000 bfc6 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x12e>
 8003068:	4b7c      	ldr	r3, [pc, #496]	; (800325c <HAL_RCC_OscConfig+0x314>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7b      	ldr	r2, [pc, #492]	; (800325c <HAL_RCC_OscConfig+0x314>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e036      	b.n	80030e4 <HAL_RCC_OscConfig+0x19c>
 8003076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x158>
 8003086:	4b75      	ldr	r3, [pc, #468]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a74      	ldr	r2, [pc, #464]	; (800325c <HAL_RCC_OscConfig+0x314>)
 800308c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b72      	ldr	r3, [pc, #456]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a71      	ldr	r2, [pc, #452]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8003098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e021      	b.n	80030e4 <HAL_RCC_OscConfig+0x19c>
 80030a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x184>
 80030b2:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a69      	ldr	r2, [pc, #420]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80030b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a66      	ldr	r2, [pc, #408]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e00b      	b.n	80030e4 <HAL_RCC_OscConfig+0x19c>
 80030cc:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a62      	ldr	r2, [pc, #392]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b60      	ldr	r3, [pc, #384]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a5f      	ldr	r2, [pc, #380]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80030de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d059      	beq.n	80031a8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7ff fa7c 	bl	80025f0 <HAL_GetTick>
 80030f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030fe:	f7ff fa77 	bl	80025f0 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d902      	bls.n	8003114 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	f000 bf67 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>
 8003114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003118:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003128:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d102      	bne.n	8003146 <HAL_RCC_OscConfig+0x1fe>
 8003140:	4b46      	ldr	r3, [pc, #280]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	e015      	b.n	8003172 <HAL_RCC_OscConfig+0x22a>
 8003146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800315a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003162:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003176:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800317a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800317e:	fa92 f2a2 	rbit	r2, r2
 8003182:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003186:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800318a:	fab2 f282 	clz	r2, r2
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f042 0220 	orr.w	r2, r2, #32
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	f002 021f 	and.w	r2, r2, #31
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f202 	lsl.w	r2, r1, r2
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ab      	beq.n	80030fe <HAL_RCC_OscConfig+0x1b6>
 80031a6:	e05c      	b.n	8003262 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7ff fa22 	bl	80025f0 <HAL_GetTick>
 80031ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b2:	f7ff fa1d 	bl	80025f0 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d902      	bls.n	80031c8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	f000 bf0d 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>
 80031c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80031dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d102      	bne.n	80031fa <HAL_RCC_OscConfig+0x2b2>
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_OscConfig+0x314>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x2de>
 80031fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800320e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003212:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003216:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003222:	4b0e      	ldr	r3, [pc, #56]	; (800325c <HAL_RCC_OscConfig+0x314>)
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800322a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800322e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003232:	fa92 f2a2 	rbit	r2, r2
 8003236:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800323a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800323e:	fab2 f282 	clz	r2, r2
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	f042 0220 	orr.w	r2, r2, #32
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f002 021f 	and.w	r2, r2, #31
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f202 	lsl.w	r2, r1, r2
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1ab      	bne.n	80031b2 <HAL_RCC_OscConfig+0x26a>
 800325a:	e002      	b.n	8003262 <HAL_RCC_OscConfig+0x31a>
 800325c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003266:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 817f 	beq.w	8003576 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003278:	4ba7      	ldr	r3, [pc, #668]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00c      	beq.n	800329e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003284:	4ba4      	ldr	r3, [pc, #656]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d173      	bne.n	8003378 <HAL_RCC_OscConfig+0x430>
 8003290:	4ba1      	ldr	r3, [pc, #644]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800329c:	d16c      	bne.n	8003378 <HAL_RCC_OscConfig+0x430>
 800329e:	2302      	movs	r3, #2
 80032a0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80032b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0x386>
 80032c8:	4b93      	ldr	r3, [pc, #588]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	e013      	b.n	80032f6 <HAL_RCC_OscConfig+0x3ae>
 80032ce:	2302      	movs	r3, #2
 80032d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80032e0:	2302      	movs	r3, #2
 80032e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80032e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80032f2:	4b89      	ldr	r3, [pc, #548]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2202      	movs	r2, #2
 80032f8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80032fc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003300:	fa92 f2a2 	rbit	r2, r2
 8003304:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003308:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800330c:	fab2 f282 	clz	r2, r2
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f042 0220 	orr.w	r2, r2, #32
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	f002 021f 	and.w	r2, r2, #31
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f202 	lsl.w	r2, r1, r2
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCC_OscConfig+0x3f6>
 8003328:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d002      	beq.n	800333e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f000 be52 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	21f8      	movs	r1, #248	; 0xf8
 8003354:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800335c:	fa91 f1a1 	rbit	r1, r1
 8003360:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003364:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003368:	fab1 f181 	clz	r1, r1
 800336c:	b2c9      	uxtb	r1, r1
 800336e:	408b      	lsls	r3, r1
 8003370:	4969      	ldr	r1, [pc, #420]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	e0fe      	b.n	8003576 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800337c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8088 	beq.w	800349a <HAL_RCC_OscConfig+0x552>
 800338a:	2301      	movs	r3, #1
 800338c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800339c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	461a      	mov	r2, r3
 80033b2:	2301      	movs	r3, #1
 80033b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7ff f91b 	bl	80025f0 <HAL_GetTick>
 80033ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c0:	f7ff f916 	bl	80025f0 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d902      	bls.n	80033d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	f000 be06 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80033e8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d102      	bne.n	8003406 <HAL_RCC_OscConfig+0x4be>
 8003400:	4b45      	ldr	r3, [pc, #276]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	e013      	b.n	800342e <HAL_RCC_OscConfig+0x4e6>
 8003406:	2302      	movs	r3, #2
 8003408:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003418:	2302      	movs	r3, #2
 800341a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800341e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2202      	movs	r2, #2
 8003430:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003434:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003438:	fa92 f2a2 	rbit	r2, r2
 800343c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003440:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003444:	fab2 f282 	clz	r2, r2
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	f042 0220 	orr.w	r2, r2, #32
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	f002 021f 	and.w	r2, r2, #31
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f202 	lsl.w	r2, r1, r2
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0af      	beq.n	80033c0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	21f8      	movs	r1, #248	; 0xf8
 8003476:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800347e:	fa91 f1a1 	rbit	r1, r1
 8003482:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003486:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800348a:	fab1 f181 	clz	r1, r1
 800348e:	b2c9      	uxtb	r1, r1
 8003490:	408b      	lsls	r3, r1
 8003492:	4921      	ldr	r1, [pc, #132]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
 8003498:	e06d      	b.n	8003576 <HAL_RCC_OscConfig+0x62e>
 800349a:	2301      	movs	r3, #1
 800349c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80034ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b0:	fab3 f383 	clz	r3, r3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	461a      	mov	r2, r3
 80034c2:	2300      	movs	r3, #0
 80034c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7ff f893 	bl	80025f0 <HAL_GetTick>
 80034ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d0:	f7ff f88e 	bl	80025f0 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d902      	bls.n	80034e6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	f000 bd7e 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80034f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x5d4>
 8003510:	4b01      	ldr	r3, [pc, #4]	; (8003518 <HAL_RCC_OscConfig+0x5d0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	e016      	b.n	8003544 <HAL_RCC_OscConfig+0x5fc>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	2302      	movs	r3, #2
 800351e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800352e:	2302      	movs	r3, #2
 8003530:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003534:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003540:	4bbf      	ldr	r3, [pc, #764]	; (8003840 <HAL_RCC_OscConfig+0x8f8>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	2202      	movs	r2, #2
 8003546:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800354a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800354e:	fa92 f2a2 	rbit	r2, r2
 8003552:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003556:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800355a:	fab2 f282 	clz	r2, r2
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f042 0220 	orr.w	r2, r2, #32
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f002 021f 	and.w	r2, r2, #31
 800356a:	2101      	movs	r1, #1
 800356c:	fa01 f202 	lsl.w	r2, r1, r2
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ac      	bne.n	80034d0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8113 	beq.w	80037b2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003590:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d07c      	beq.n	8003696 <HAL_RCC_OscConfig+0x74e>
 800359c:	2301      	movs	r3, #1
 800359e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80035ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	4ba2      	ldr	r3, [pc, #648]	; (8003844 <HAL_RCC_OscConfig+0x8fc>)
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	461a      	mov	r2, r3
 80035c2:	2301      	movs	r3, #1
 80035c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7ff f813 	bl	80025f0 <HAL_GetTick>
 80035ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7ff f80e 	bl	80025f0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d902      	bls.n	80035e6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	f000 bcfe 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>
 80035e6:	2302      	movs	r3, #2
 80035e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f0:	fa93 f2a3 	rbit	r2, r3
 80035f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003606:	2202      	movs	r2, #2
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800360e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	fa93 f2a3 	rbit	r2, r3
 8003618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800361c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003626:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800362a:	2202      	movs	r2, #2
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003632:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	fa93 f2a3 	rbit	r2, r3
 800363c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003640:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003644:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	4b7e      	ldr	r3, [pc, #504]	; (8003840 <HAL_RCC_OscConfig+0x8f8>)
 8003648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800364a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003652:	2102      	movs	r1, #2
 8003654:	6019      	str	r1, [r3, #0]
 8003656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800365a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	fa93 f1a3 	rbit	r1, r3
 8003664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003668:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800366c:	6019      	str	r1, [r3, #0]
  return result;
 800366e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003672:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2101      	movs	r1, #1
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d09d      	beq.n	80035d0 <HAL_RCC_OscConfig+0x688>
 8003694:	e08d      	b.n	80037b2 <HAL_RCC_OscConfig+0x86a>
 8003696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800369a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	fa93 f2a3 	rbit	r2, r3
 80036b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036b8:	601a      	str	r2, [r3, #0]
  return result;
 80036ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036be:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80036c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c4:	fab3 f383 	clz	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	4b5d      	ldr	r3, [pc, #372]	; (8003844 <HAL_RCC_OscConfig+0x8fc>)
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	461a      	mov	r2, r3
 80036d4:	2300      	movs	r3, #0
 80036d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d8:	f7fe ff8a 	bl	80025f0 <HAL_GetTick>
 80036dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e2:	f7fe ff85 	bl	80025f0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d902      	bls.n	80036f8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	f000 bc75 	b.w	8003fe2 <HAL_RCC_OscConfig+0x109a>
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003700:	2202      	movs	r2, #2
 8003702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003708:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003716:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003724:	2202      	movs	r2, #2
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	fa93 f2a3 	rbit	r2, r3
 8003736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003744:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003748:	2202      	movs	r2, #2
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003750:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	fa93 f2a3 	rbit	r2, r3
 800375a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003762:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_RCC_OscConfig+0x8f8>)
 8003766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800376c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003770:	2102      	movs	r1, #2
 8003772:	6019      	str	r1, [r3, #0]
 8003774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003778:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	fa93 f1a3 	rbit	r1, r3
 8003782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003786:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800378a:	6019      	str	r1, [r3, #0]
  return result;
 800378c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003790:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	2101      	movs	r1, #1
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d197      	bne.n	80036e2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 81a5 	beq.w	8003b12 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <HAL_RCC_OscConfig+0x8f8>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d116      	bne.n	8003808 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_OscConfig+0x8f8>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_RCC_OscConfig+0x8f8>)
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e4:	61d3      	str	r3, [r2, #28]
 80037e6:	4b16      	ldr	r3, [pc, #88]	; (8003840 <HAL_RCC_OscConfig+0x8f8>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80037ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003800:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <HAL_RCC_OscConfig+0x900>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d121      	bne.n	8003858 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <HAL_RCC_OscConfig+0x900>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0b      	ldr	r2, [pc, #44]	; (8003848 <HAL_RCC_OscConfig+0x900>)
 800381a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003820:	f7fe fee6 	bl	80025f0 <HAL_GetTick>
 8003824:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	e010      	b.n	800384c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fe fee1 	bl	80025f0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d908      	bls.n	800384c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e3d1      	b.n	8003fe2 <HAL_RCC_OscConfig+0x109a>
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	10908120 	.word	0x10908120
 8003848:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	4b8d      	ldr	r3, [pc, #564]	; (8003a84 <HAL_RCC_OscConfig+0xb3c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0e8      	beq.n	800382a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d106      	bne.n	8003876 <HAL_RCC_OscConfig+0x92e>
 8003868:	4b87      	ldr	r3, [pc, #540]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	4a86      	ldr	r2, [pc, #536]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6213      	str	r3, [r2, #32]
 8003874:	e035      	b.n	80038e2 <HAL_RCC_OscConfig+0x99a>
 8003876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x958>
 8003886:	4b80      	ldr	r3, [pc, #512]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	4a7f      	ldr	r2, [pc, #508]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6213      	str	r3, [r2, #32]
 8003892:	4b7d      	ldr	r3, [pc, #500]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a7c      	ldr	r2, [pc, #496]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	6213      	str	r3, [r2, #32]
 800389e:	e020      	b.n	80038e2 <HAL_RCC_OscConfig+0x99a>
 80038a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d10c      	bne.n	80038ca <HAL_RCC_OscConfig+0x982>
 80038b0:	4b75      	ldr	r3, [pc, #468]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	4a74      	ldr	r2, [pc, #464]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80038b6:	f043 0304 	orr.w	r3, r3, #4
 80038ba:	6213      	str	r3, [r2, #32]
 80038bc:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4a71      	ldr	r2, [pc, #452]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6213      	str	r3, [r2, #32]
 80038c8:	e00b      	b.n	80038e2 <HAL_RCC_OscConfig+0x99a>
 80038ca:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	6213      	str	r3, [r2, #32]
 80038d6:	4b6c      	ldr	r3, [pc, #432]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a6b      	ldr	r2, [pc, #428]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80038dc:	f023 0304 	bic.w	r3, r3, #4
 80038e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8081 	beq.w	80039f6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f4:	f7fe fe7c 	bl	80025f0 <HAL_GetTick>
 80038f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fc:	e00b      	b.n	8003916 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fe fe77 	bl	80025f0 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e365      	b.n	8003fe2 <HAL_RCC_OscConfig+0x109a>
 8003916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800391e:	2202      	movs	r2, #2
 8003920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003926:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003934:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003942:	2202      	movs	r2, #2
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	fa93 f2a3 	rbit	r2, r3
 8003954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003958:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800395c:	601a      	str	r2, [r3, #0]
  return result;
 800395e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003962:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003966:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f043 0302 	orr.w	r3, r3, #2
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d102      	bne.n	8003982 <HAL_RCC_OscConfig+0xa3a>
 800397c:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	e013      	b.n	80039aa <HAL_RCC_OscConfig+0xa62>
 8003982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003986:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800398a:	2202      	movs	r2, #2
 800398c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003992:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f2a3 	rbit	r2, r3
 800399c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	4b38      	ldr	r3, [pc, #224]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80039ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039b2:	2102      	movs	r1, #2
 80039b4:	6011      	str	r1, [r2, #0]
 80039b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80039ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	fa92 f1a2 	rbit	r1, r2
 80039c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80039c8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80039cc:	6011      	str	r1, [r2, #0]
  return result;
 80039ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80039d2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	fab2 f282 	clz	r2, r2
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	f002 021f 	and.w	r2, r2, #31
 80039e8:	2101      	movs	r1, #1
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d084      	beq.n	80038fe <HAL_RCC_OscConfig+0x9b6>
 80039f4:	e083      	b.n	8003afe <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f6:	f7fe fdfb 	bl	80025f0 <HAL_GetTick>
 80039fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a00:	f7fe fdf6 	bl	80025f0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e2e4      	b.n	8003fe2 <HAL_RCC_OscConfig+0x109a>
 8003a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a20:	2202      	movs	r2, #2
 8003a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	fa93 f2a3 	rbit	r2, r3
 8003a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a40:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a44:	2202      	movs	r2, #2
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	fa93 f2a3 	rbit	r2, r3
 8003a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a5e:	601a      	str	r2, [r3, #0]
  return result;
 8003a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a64:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a68:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0xb44>
 8003a7e:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <HAL_RCC_OscConfig+0xb40>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	e017      	b.n	8003ab4 <HAL_RCC_OscConfig+0xb6c>
 8003a84:	40007000 	.word	0x40007000
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003a94:	2202      	movs	r2, #2
 8003a96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	fa93 f2a3 	rbit	r2, r3
 8003aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aaa:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	4bb3      	ldr	r3, [pc, #716]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ab8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003abc:	2102      	movs	r1, #2
 8003abe:	6011      	str	r1, [r2, #0]
 8003ac0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ac4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	fa92 f1a2 	rbit	r1, r2
 8003ace:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ad2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003ad6:	6011      	str	r1, [r2, #0]
  return result;
 8003ad8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003adc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	fab2 f282 	clz	r2, r2
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	f002 021f 	and.w	r2, r2, #31
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f202 	lsl.w	r2, r1, r2
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d180      	bne.n	8003a00 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003afe:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d105      	bne.n	8003b12 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b06:	4b9e      	ldr	r3, [pc, #632]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	4a9d      	ldr	r2, [pc, #628]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b10:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 825e 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b24:	4b96      	ldr	r3, [pc, #600]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	f000 821f 	beq.w	8003f70 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f040 8170 	bne.w	8003e24 <HAL_RCC_OscConfig+0xedc>
 8003b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b48:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	fa93 f2a3 	rbit	r2, r3
 8003b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b68:	601a      	str	r2, [r3, #0]
  return result;
 8003b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b72:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	461a      	mov	r2, r3
 8003b86:	2300      	movs	r3, #0
 8003b88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fd31 	bl	80025f0 <HAL_GetTick>
 8003b8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b92:	e009      	b.n	8003ba8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe fd2c 	bl	80025f0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e21c      	b.n	8003fe2 <HAL_RCC_OscConfig+0x109a>
 8003ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bac:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	fa93 f2a3 	rbit	r2, r3
 8003bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003bcc:	601a      	str	r2, [r3, #0]
  return result;
 8003bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003bd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d102      	bne.n	8003bf2 <HAL_RCC_OscConfig+0xcaa>
 8003bec:	4b64      	ldr	r3, [pc, #400]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	e027      	b.n	8003c42 <HAL_RCC_OscConfig+0xcfa>
 8003bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c04:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	fa93 f2a3 	rbit	r2, r3
 8003c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c12:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c1c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c2a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f2a3 	rbit	r2, r3
 8003c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c38:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c46:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c4e:	6011      	str	r1, [r2, #0]
 8003c50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c54:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	fa92 f1a2 	rbit	r1, r2
 8003c5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c62:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003c66:	6011      	str	r1, [r2, #0]
  return result;
 8003c68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c6c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	fab2 f282 	clz	r2, r2
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	f042 0220 	orr.w	r2, r2, #32
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	f002 021f 	and.w	r2, r2, #31
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f202 	lsl.w	r2, r1, r2
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d182      	bne.n	8003b94 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8e:	4b3c      	ldr	r3, [pc, #240]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	f023 020f 	bic.w	r2, r3, #15
 8003c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	4937      	ldr	r1, [pc, #220]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a19      	ldr	r1, [r3, #32]
 8003cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	492d      	ldr	r1, [pc, #180]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
 8003cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	fa93 f2a3 	rbit	r2, r3
 8003cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003cf4:	601a      	str	r2, [r3, #0]
  return result;
 8003cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003cfe:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	461a      	mov	r2, r3
 8003d12:	2301      	movs	r3, #1
 8003d14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fe fc6b 	bl	80025f0 <HAL_GetTick>
 8003d1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d1e:	e009      	b.n	8003d34 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe fc66 	bl	80025f0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e156      	b.n	8003fe2 <HAL_RCC_OscConfig+0x109a>
 8003d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	fa93 f2a3 	rbit	r2, r3
 8003d50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d54:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d58:	601a      	str	r2, [r3, #0]
  return result;
 8003d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003d62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d105      	bne.n	8003d84 <HAL_RCC_OscConfig+0xe3c>
 8003d78:	4b01      	ldr	r3, [pc, #4]	; (8003d80 <HAL_RCC_OscConfig+0xe38>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	e02a      	b.n	8003dd4 <HAL_RCC_OscConfig+0xe8c>
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d96:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	fa93 f2a3 	rbit	r2, r3
 8003da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dbc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	fa93 f2a3 	rbit	r2, r3
 8003dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dca:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	4b86      	ldr	r3, [pc, #536]	; (8003fec <HAL_RCC_OscConfig+0x10a4>)
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ddc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003de0:	6011      	str	r1, [r2, #0]
 8003de2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003de6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	fa92 f1a2 	rbit	r1, r2
 8003df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003df4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003df8:	6011      	str	r1, [r2, #0]
  return result;
 8003dfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dfe:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	fab2 f282 	clz	r2, r2
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	f042 0220 	orr.w	r2, r2, #32
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	f002 021f 	and.w	r2, r2, #31
 8003e14:	2101      	movs	r1, #1
 8003e16:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f43f af7f 	beq.w	8003d20 <HAL_RCC_OscConfig+0xdd8>
 8003e22:	e0dd      	b.n	8003fe0 <HAL_RCC_OscConfig+0x1098>
 8003e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e36:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	fa93 f2a3 	rbit	r2, r3
 8003e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e44:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e48:	601a      	str	r2, [r3, #0]
  return result;
 8003e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003e52:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	461a      	mov	r2, r3
 8003e66:	2300      	movs	r3, #0
 8003e68:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fe fbc1 	bl	80025f0 <HAL_GetTick>
 8003e6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e72:	e009      	b.n	8003e88 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fe fbbc 	bl	80025f0 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e0ac      	b.n	8003fe2 <HAL_RCC_OscConfig+0x109a>
 8003e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e9a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	fa93 f2a3 	rbit	r2, r3
 8003ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003eac:	601a      	str	r2, [r3, #0]
  return result;
 8003eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003eb6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d102      	bne.n	8003ed2 <HAL_RCC_OscConfig+0xf8a>
 8003ecc:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_RCC_OscConfig+0x10a4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	e027      	b.n	8003f22 <HAL_RCC_OscConfig+0xfda>
 8003ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f2a3 	rbit	r2, r3
 8003eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	fa93 f2a3 	rbit	r2, r3
 8003f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f18:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	4b33      	ldr	r3, [pc, #204]	; (8003fec <HAL_RCC_OscConfig+0x10a4>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f26:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f2e:	6011      	str	r1, [r2, #0]
 8003f30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	fa92 f1a2 	rbit	r1, r2
 8003f3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f42:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003f46:	6011      	str	r1, [r2, #0]
  return result;
 8003f48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f4c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	fab2 f282 	clz	r2, r2
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	f042 0220 	orr.w	r2, r2, #32
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	f002 021f 	and.w	r2, r2, #31
 8003f62:	2101      	movs	r1, #1
 8003f64:	fa01 f202 	lsl.w	r2, r1, r2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d182      	bne.n	8003e74 <HAL_RCC_OscConfig+0xf2c>
 8003f6e:	e037      	b.n	8003fe0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e02e      	b.n	8003fe2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f84:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_RCC_OscConfig+0x10a4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_RCC_OscConfig+0x10a4>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003f98:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d117      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003fac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003fb0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000

08003ff0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b09e      	sub	sp, #120	; 0x78
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e162      	b.n	80042ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b90      	ldr	r3, [pc, #576]	; (800424c <HAL_RCC_ClockConfig+0x25c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d910      	bls.n	8004038 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b8d      	ldr	r3, [pc, #564]	; (800424c <HAL_RCC_ClockConfig+0x25c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	498b      	ldr	r1, [pc, #556]	; (800424c <HAL_RCC_ClockConfig+0x25c>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b89      	ldr	r3, [pc, #548]	; (800424c <HAL_RCC_ClockConfig+0x25c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e14a      	b.n	80042ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004044:	4b82      	ldr	r3, [pc, #520]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	497f      	ldr	r1, [pc, #508]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80dc 	beq.w	800421c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d13c      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xf6>
 800406c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004070:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800407a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407c:	fab3 f383 	clz	r3, r3
 8004080:	b2db      	uxtb	r3, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d102      	bne.n	8004096 <HAL_RCC_ClockConfig+0xa6>
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	e00f      	b.n	80040b6 <HAL_RCC_ClockConfig+0xc6>
 8004096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800409a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	667b      	str	r3, [r7, #100]	; 0x64
 80040a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a8:	663b      	str	r3, [r7, #96]	; 0x60
 80040aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b2:	4b67      	ldr	r3, [pc, #412]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80040bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040be:	fa92 f2a2 	rbit	r2, r2
 80040c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040c6:	fab2 f282 	clz	r2, r2
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	f042 0220 	orr.w	r2, r2, #32
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f002 021f 	and.w	r2, r2, #31
 80040d6:	2101      	movs	r1, #1
 80040d8:	fa01 f202 	lsl.w	r2, r1, r2
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d17b      	bne.n	80041da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e0f3      	b.n	80042ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d13c      	bne.n	8004168 <HAL_RCC_ClockConfig+0x178>
 80040ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f6:	fa93 f3a3 	rbit	r3, r3
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fe:	fab3 f383 	clz	r3, r3
 8004102:	b2db      	uxtb	r3, r3
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	b2db      	uxtb	r3, r3
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b01      	cmp	r3, #1
 8004110:	d102      	bne.n	8004118 <HAL_RCC_ClockConfig+0x128>
 8004112:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	e00f      	b.n	8004138 <HAL_RCC_ClockConfig+0x148>
 8004118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800411c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004120:	fa93 f3a3 	rbit	r3, r3
 8004124:	647b      	str	r3, [r7, #68]	; 0x44
 8004126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
 800412c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004134:	4b46      	ldr	r3, [pc, #280]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800413c:	63ba      	str	r2, [r7, #56]	; 0x38
 800413e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004140:	fa92 f2a2 	rbit	r2, r2
 8004144:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004148:	fab2 f282 	clz	r2, r2
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	f042 0220 	orr.w	r2, r2, #32
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	f002 021f 	and.w	r2, r2, #31
 8004158:	2101      	movs	r1, #1
 800415a:	fa01 f202 	lsl.w	r2, r1, r2
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d13a      	bne.n	80041da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0b2      	b.n	80042ce <HAL_RCC_ClockConfig+0x2de>
 8004168:	2302      	movs	r3, #2
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d102      	bne.n	8004190 <HAL_RCC_ClockConfig+0x1a0>
 800418a:	4b31      	ldr	r3, [pc, #196]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	e00d      	b.n	80041ac <HAL_RCC_ClockConfig+0x1bc>
 8004190:	2302      	movs	r3, #2
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
 800419c:	2302      	movs	r3, #2
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	4b29      	ldr	r3, [pc, #164]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	2202      	movs	r2, #2
 80041ae:	61ba      	str	r2, [r7, #24]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	fa92 f2a2 	rbit	r2, r2
 80041b6:	617a      	str	r2, [r7, #20]
  return result;
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	fab2 f282 	clz	r2, r2
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	f042 0220 	orr.w	r2, r2, #32
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	f002 021f 	and.w	r2, r2, #31
 80041ca:	2101      	movs	r1, #1
 80041cc:	fa01 f202 	lsl.w	r2, r1, r2
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e079      	b.n	80042ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041da:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	491a      	ldr	r1, [pc, #104]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ec:	f7fe fa00 	bl	80025f0 <HAL_GetTick>
 80041f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	e00a      	b.n	800420a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f4:	f7fe f9fc 	bl	80025f0 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e061      	b.n	80042ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCC_ClockConfig+0x260>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 020c 	and.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	429a      	cmp	r2, r3
 800421a:	d1eb      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_RCC_ClockConfig+0x25c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d214      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <HAL_RCC_ClockConfig+0x25c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 0207 	bic.w	r2, r3, #7
 8004232:	4906      	ldr	r1, [pc, #24]	; (800424c <HAL_RCC_ClockConfig+0x25c>)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	4313      	orrs	r3, r2
 8004238:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423a:	4b04      	ldr	r3, [pc, #16]	; (800424c <HAL_RCC_ClockConfig+0x25c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e040      	b.n	80042ce <HAL_RCC_ClockConfig+0x2de>
 800424c:	40022000 	.word	0x40022000
 8004250:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	491a      	ldr	r1, [pc, #104]	; (80042d8 <HAL_RCC_ClockConfig+0x2e8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4912      	ldr	r1, [pc, #72]	; (80042d8 <HAL_RCC_ClockConfig+0x2e8>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004292:	f000 f829 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8004296:	4601      	mov	r1, r0
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_RCC_ClockConfig+0x2e8>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042a0:	22f0      	movs	r2, #240	; 0xf0
 80042a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	fa92 f2a2 	rbit	r2, r2
 80042aa:	60fa      	str	r2, [r7, #12]
  return result;
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	fab2 f282 	clz	r2, r2
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	40d3      	lsrs	r3, r2
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <HAL_RCC_ClockConfig+0x2ec>)
 80042b8:	5cd3      	ldrb	r3, [r2, r3]
 80042ba:	fa21 f303 	lsr.w	r3, r1, r3
 80042be:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <HAL_RCC_ClockConfig+0x2f0>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_RCC_ClockConfig+0x2f4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe f82c 	bl	8002324 <HAL_InitTick>
  
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3778      	adds	r7, #120	; 0x78
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800df0c 	.word	0x0800df0c
 80042e0:	20000004 	.word	0x20000004
 80042e4:	20000008 	.word	0x20000008

080042e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b08b      	sub	sp, #44	; 0x2c
 80042ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004302:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b04      	cmp	r3, #4
 8004310:	d002      	beq.n	8004318 <HAL_RCC_GetSysClockFreq+0x30>
 8004312:	2b08      	cmp	r3, #8
 8004314:	d003      	beq.n	800431e <HAL_RCC_GetSysClockFreq+0x36>
 8004316:	e03f      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004318:	4b25      	ldr	r3, [pc, #148]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800431a:	623b      	str	r3, [r7, #32]
      break;
 800431c:	e03f      	b.n	800439e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004324:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004328:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	fa92 f2a2 	rbit	r2, r2
 8004330:	607a      	str	r2, [r7, #4]
  return result;
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	fab2 f282 	clz	r2, r2
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	40d3      	lsrs	r3, r2
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800433e:	5cd3      	ldrb	r3, [r2, r3]
 8004340:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004342:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	220f      	movs	r2, #15
 800434c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	fa92 f2a2 	rbit	r2, r2
 8004354:	60fa      	str	r2, [r7, #12]
  return result;
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	fab2 f282 	clz	r2, r2
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	40d3      	lsrs	r3, r2
 8004360:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004362:	5cd3      	ldrb	r3, [r2, r3]
 8004364:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004370:	4a0f      	ldr	r2, [pc, #60]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	fbb2 f2f3 	udiv	r2, r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	fb02 f303 	mul.w	r3, r2, r3
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	e007      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004382:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	fbb2 f2f3 	udiv	r2, r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	623b      	str	r3, [r7, #32]
      break;
 8004396:	e002      	b.n	800439e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800439a:	623b      	str	r3, [r7, #32]
      break;
 800439c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439e:	6a3b      	ldr	r3, [r7, #32]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	372c      	adds	r7, #44	; 0x2c
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40021000 	.word	0x40021000
 80043b0:	007a1200 	.word	0x007a1200
 80043b4:	0800df24 	.word	0x0800df24
 80043b8:	0800df34 	.word	0x0800df34

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000004 	.word	0x20000004

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043da:	f7ff ffef 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043de:	4601      	mov	r1, r0
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80043ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	fa92 f2a2 	rbit	r2, r2
 80043f4:	603a      	str	r2, [r7, #0]
  return result;
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	fab2 f282 	clz	r2, r2
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	40d3      	lsrs	r3, r2
 8004400:	4a04      	ldr	r2, [pc, #16]	; (8004414 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004402:	5cd3      	ldrb	r3, [r2, r3]
 8004404:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000
 8004414:	0800df1c 	.word	0x0800df1c

08004418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800441e:	f7ff ffcd 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004422:	4601      	mov	r1, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800442c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004430:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	fa92 f2a2 	rbit	r2, r2
 8004438:	603a      	str	r2, [r7, #0]
  return result;
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	fab2 f282 	clz	r2, r2
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	40d3      	lsrs	r3, r2
 8004444:	4a04      	ldr	r2, [pc, #16]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004446:	5cd3      	ldrb	r3, [r2, r3]
 8004448:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	0800df1c 	.word	0x0800df1c

0800445c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	220f      	movs	r2, #15
 800446a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800446c:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_GetClockConfig+0x5c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0203 	and.w	r2, r3, #3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <HAL_RCC_GetClockConfig+0x5c>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	08db      	lsrs	r3, r3, #3
 8004496:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <HAL_RCC_GetClockConfig+0x60>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0207 	and.w	r2, r3, #7
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	601a      	str	r2, [r3, #0]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40022000 	.word	0x40022000

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b092      	sub	sp, #72	; 0x48
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80d4 	beq.w	800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e4:	4b4e      	ldr	r3, [pc, #312]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10e      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f0:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4a4a      	ldr	r2, [pc, #296]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fa:	61d3      	str	r3, [r2, #28]
 80044fc:	4b48      	ldr	r3, [pc, #288]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	4b45      	ldr	r3, [pc, #276]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d118      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451a:	4b42      	ldr	r3, [pc, #264]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a41      	ldr	r2, [pc, #260]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004524:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004526:	f7fe f863 	bl	80025f0 <HAL_GetTick>
 800452a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	e008      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452e:	f7fe f85f 	bl	80025f0 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b64      	cmp	r3, #100	; 0x64
 800453a:	d901      	bls.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e1d6      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	4b38      	ldr	r3, [pc, #224]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800454c:	4b34      	ldr	r3, [pc, #208]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004554:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8084 	beq.w	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004568:	429a      	cmp	r2, r3
 800456a:	d07c      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800456c:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004586:	fab3 f383 	clz	r3, r3
 800458a:	b2db      	uxtb	r3, r3
 800458c:	461a      	mov	r2, r3
 800458e:	4b26      	ldr	r3, [pc, #152]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	461a      	mov	r2, r3
 8004596:	2301      	movs	r3, #1
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800459e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045be:	4a18      	ldr	r2, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d04b      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fe f80f 	bl	80025f0 <HAL_GetTick>
 80045d2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fe f80b 	bl	80025f0 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e180      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80045ec:	2302      	movs	r3, #2
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
 80045f8:	2302      	movs	r3, #2
 80045fa:	623b      	str	r3, [r7, #32]
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	61fb      	str	r3, [r7, #28]
  return result;
 8004604:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d108      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800461a:	4b01      	ldr	r3, [pc, #4]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	e00d      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004620:	40021000 	.word	0x40021000
 8004624:	40007000 	.word	0x40007000
 8004628:	10908100 	.word	0x10908100
 800462c:	2302      	movs	r3, #2
 800462e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	4b9a      	ldr	r3, [pc, #616]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	2202      	movs	r2, #2
 800463e:	613a      	str	r2, [r7, #16]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	fa92 f2a2 	rbit	r2, r2
 8004646:	60fa      	str	r2, [r7, #12]
  return result;
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	fab2 f282 	clz	r2, r2
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	f002 021f 	and.w	r2, r2, #31
 800465a:	2101      	movs	r1, #1
 800465c:	fa01 f202 	lsl.w	r2, r1, r2
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0b7      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004666:	4b8f      	ldr	r3, [pc, #572]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	498c      	ldr	r1, [pc, #560]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004678:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004680:	4b88      	ldr	r3, [pc, #544]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	4a87      	ldr	r2, [pc, #540]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004698:	4b82      	ldr	r3, [pc, #520]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	f023 0203 	bic.w	r2, r3, #3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	497f      	ldr	r1, [pc, #508]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046b6:	4b7b      	ldr	r3, [pc, #492]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4978      	ldr	r1, [pc, #480]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046d4:	4b73      	ldr	r3, [pc, #460]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	4970      	ldr	r1, [pc, #448]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f2:	4b6c      	ldr	r3, [pc, #432]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f023 0210 	bic.w	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	4969      	ldr	r1, [pc, #420]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004700:	4313      	orrs	r3, r2
 8004702:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004710:	4b64      	ldr	r3, [pc, #400]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	4961      	ldr	r1, [pc, #388]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d008      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800472e:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f023 0220 	bic.w	r2, r3, #32
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	495a      	ldr	r1, [pc, #360]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800474c:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	4952      	ldr	r1, [pc, #328]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800476a:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	494b      	ldr	r1, [pc, #300]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004788:	4b46      	ldr	r3, [pc, #280]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4943      	ldr	r1, [pc, #268]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047a6:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	493c      	ldr	r1, [pc, #240]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	4934      	ldr	r1, [pc, #208]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047e2:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	492d      	ldr	r1, [pc, #180]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004800:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	4925      	ldr	r1, [pc, #148]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	491e      	ldr	r1, [pc, #120]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800483c:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	4916      	ldr	r1, [pc, #88]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	490f      	ldr	r1, [pc, #60]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	4907      	ldr	r1, [pc, #28]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00c      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004896:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	e002      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	4913      	ldr	r1, [pc, #76]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c8:	490b      	ldr	r1, [pc, #44]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80048da:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	4904      	ldr	r1, [pc, #16]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3748      	adds	r7, #72	; 0x48
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000

080048fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e09d      	b.n	8004a4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800491e:	d009      	beq.n	8004934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	61da      	str	r2, [r3, #28]
 8004926:	e005      	b.n	8004934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fd fc5c 	bl	800220c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004974:	d902      	bls.n	800497c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004976:	2300      	movs	r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e002      	b.n	8004982 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800497c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004980:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800498a:	d007      	beq.n	800499c <HAL_SPI_Init+0xa0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004994:	d002      	beq.n	800499c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	ea42 0103 	orr.w	r1, r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	f003 0204 	and.w	r2, r3, #4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a18:	ea42 0103 	orr.w	r1, r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b088      	sub	sp, #32
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_SPI_Transmit+0x22>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e158      	b.n	8004d26 <HAL_SPI_Transmit+0x2d4>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a7c:	f7fd fdb8 	bl	80025f0 <HAL_GetTick>
 8004a80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d002      	beq.n	8004a98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
 8004a94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a96:	e13d      	b.n	8004d14 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <HAL_SPI_Transmit+0x52>
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d102      	bne.n	8004aaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aa8:	e134      	b.n	8004d14 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2203      	movs	r2, #3
 8004aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	88fa      	ldrh	r2, [r7, #6]
 8004ac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d10f      	bne.n	8004b16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d007      	beq.n	8004b34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b3c:	d94b      	bls.n	8004bd6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_SPI_Transmit+0xfa>
 8004b46:	8afb      	ldrh	r3, [r7, #22]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d13e      	bne.n	8004bca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b70:	e02b      	b.n	8004bca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d112      	bne.n	8004ba6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	881a      	ldrh	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	1c9a      	adds	r2, r3, #2
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ba4:	e011      	b.n	8004bca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba6:	f7fd fd23 	bl	80025f0 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d803      	bhi.n	8004bbe <HAL_SPI_Transmit+0x16c>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d102      	bne.n	8004bc4 <HAL_SPI_Transmit+0x172>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bc8:	e0a4      	b.n	8004d14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ce      	bne.n	8004b72 <HAL_SPI_Transmit+0x120>
 8004bd4:	e07c      	b.n	8004cd0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Transmit+0x192>
 8004bde:	8afb      	ldrh	r3, [r7, #22]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d170      	bne.n	8004cc6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d912      	bls.n	8004c14 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	1c9a      	adds	r2, r3, #2
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b02      	subs	r3, #2
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c12:	e058      	b.n	8004cc6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004c3a:	e044      	b.n	8004cc6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d12b      	bne.n	8004ca2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d912      	bls.n	8004c7a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	881a      	ldrh	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	1c9a      	adds	r2, r3, #2
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b02      	subs	r3, #2
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c78:	e025      	b.n	8004cc6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ca0:	e011      	b.n	8004cc6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca2:	f7fd fca5 	bl	80025f0 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d803      	bhi.n	8004cba <HAL_SPI_Transmit+0x268>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d102      	bne.n	8004cc0 <HAL_SPI_Transmit+0x26e>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cc4:	e026      	b.n	8004d14 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1b5      	bne.n	8004c3c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fb5b 	bl	8005390 <SPI_EndRxTxTransaction>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e000      	b.n	8004d14 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004d12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b08a      	sub	sp, #40	; 0x28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x26>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e1fb      	b.n	800514c <HAL_SPI_TransmitReceive+0x41e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d5c:	f7fd fc48 	bl	80025f0 <HAL_GetTick>
 8004d60:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d68:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d70:	887b      	ldrh	r3, [r7, #2]
 8004d72:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d74:	887b      	ldrh	r3, [r7, #2]
 8004d76:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d78:	7efb      	ldrb	r3, [r7, #27]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d00e      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x6e>
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d84:	d106      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d102      	bne.n	8004d94 <HAL_SPI_TransmitReceive+0x66>
 8004d8e:	7efb      	ldrb	r3, [r7, #27]
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d003      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
 8004d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d9a:	e1cd      	b.n	8005138 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x80>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_SPI_TransmitReceive+0x80>
 8004da8:	887b      	ldrh	r3, [r7, #2]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004db4:	e1c0      	b.n	8005138 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d003      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2205      	movs	r2, #5
 8004dc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	887a      	ldrh	r2, [r7, #2]
 8004dda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	887a      	ldrh	r2, [r7, #2]
 8004de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	887a      	ldrh	r2, [r7, #2]
 8004df6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e0c:	d802      	bhi.n	8004e14 <HAL_SPI_TransmitReceive+0xe6>
 8004e0e:	8a3b      	ldrh	r3, [r7, #16]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d908      	bls.n	8004e26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e22:	605a      	str	r2, [r3, #4]
 8004e24:	e007      	b.n	8004e36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d007      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e5c:	d97c      	bls.n	8004f58 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <HAL_SPI_TransmitReceive+0x13e>
 8004e66:	8a7b      	ldrh	r3, [r7, #18]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d169      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	1c9a      	adds	r2, r3, #2
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e90:	e056      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x1aa>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_SPI_TransmitReceive+0x1aa>
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d113      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d11c      	bne.n	8004f20 <HAL_SPI_TransmitReceive+0x1f2>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	b292      	uxth	r2, r2
 8004efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	1c9a      	adds	r2, r3, #2
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f20:	f7fd fb66 	bl	80025f0 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d807      	bhi.n	8004f40 <HAL_SPI_TransmitReceive+0x212>
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d003      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f3e:	e0fb      	b.n	8005138 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1a3      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x164>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d19d      	bne.n	8004e92 <HAL_SPI_TransmitReceive+0x164>
 8004f56:	e0df      	b.n	8005118 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x23a>
 8004f60:	8a7b      	ldrh	r3, [r7, #18]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	f040 80cb 	bne.w	80050fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d912      	bls.n	8004f98 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	1c9a      	adds	r2, r3, #2
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b02      	subs	r3, #2
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f96:	e0b2      	b.n	80050fe <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	7812      	ldrb	r2, [r2, #0]
 8004fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fbe:	e09e      	b.n	80050fe <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d134      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x30a>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d02f      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x30a>
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d12c      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d912      	bls.n	800500e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	881a      	ldrh	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	1c9a      	adds	r2, r3, #2
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b02      	subs	r3, #2
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800500c:	e012      	b.n	8005034 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	7812      	ldrb	r2, [r2, #0]
 800501a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b01      	cmp	r3, #1
 8005044:	d148      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x3aa>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d042      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d923      	bls.n	80050a6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	b292      	uxth	r2, r2
 800506a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	1c9a      	adds	r2, r3, #2
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b02      	subs	r3, #2
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	d81f      	bhi.n	80050d4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050a2:	605a      	str	r2, [r3, #4]
 80050a4:	e016      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f103 020c 	add.w	r2, r3, #12
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	7812      	ldrb	r2, [r2, #0]
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050d4:	2301      	movs	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050d8:	f7fd fa8a 	bl	80025f0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d803      	bhi.n	80050f0 <HAL_SPI_TransmitReceive+0x3c2>
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d102      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x3c8>
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80050fc:	e01c      	b.n	8005138 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	f47f af5b 	bne.w	8004fc0 <HAL_SPI_TransmitReceive+0x292>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	f47f af54 	bne.w	8004fc0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f937 	bl	8005390 <SPI_EndRxTxTransaction>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d006      	beq.n	8005136 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	661a      	str	r2, [r3, #96]	; 0x60
 8005134:	e000      	b.n	8005138 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800514c:	4618      	mov	r0, r3
 800514e:	3728      	adds	r7, #40	; 0x28
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005164:	f7fd fa44 	bl	80025f0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	4413      	add	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005174:	f7fd fa3c 	bl	80025f0 <HAL_GetTick>
 8005178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800517a:	4b39      	ldr	r3, [pc, #228]	; (8005260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	015b      	lsls	r3, r3, #5
 8005180:	0d1b      	lsrs	r3, r3, #20
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	fb02 f303 	mul.w	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800518a:	e054      	b.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	d050      	beq.n	8005236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005194:	f7fd fa2c 	bl	80025f0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d902      	bls.n	80051aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d13d      	bne.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c2:	d111      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051cc:	d004      	beq.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d107      	bne.n	80051e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f0:	d10f      	bne.n	8005212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e017      	b.n	8005256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3b01      	subs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	429a      	cmp	r2, r3
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	429a      	cmp	r2, r3
 8005252:	d19b      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000004 	.word	0x20000004

08005264 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005276:	f7fd f9bb 	bl	80025f0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	4413      	add	r3, r2
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005286:	f7fd f9b3 	bl	80025f0 <HAL_GetTick>
 800528a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005294:	4b3d      	ldr	r3, [pc, #244]	; (800538c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	00da      	lsls	r2, r3, #3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	0d1b      	lsrs	r3, r3, #20
 80052a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80052ac:	e060      	b.n	8005370 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052b4:	d107      	bne.n	80052c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d050      	beq.n	8005370 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ce:	f7fd f98f 	bl	80025f0 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	429a      	cmp	r2, r3
 80052dc:	d902      	bls.n	80052e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d13d      	bne.n	8005360 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052fc:	d111      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005306:	d004      	beq.n	8005312 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005310:	d107      	bne.n	8005322 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005320:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800532a:	d10f      	bne.n	800534c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800534a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e010      	b.n	8005382 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3b01      	subs	r3, #1
 800536e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d196      	bne.n	80052ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3728      	adds	r7, #40	; 0x28
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000004 	.word	0x20000004

08005390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff ff5b 	bl	8005264 <SPI_WaitFifoStateUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b8:	f043 0220 	orr.w	r2, r3, #32
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e027      	b.n	8005414 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff fec0 	bl	8005154 <SPI_WaitFlagStateUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e014      	b.n	8005414 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff ff34 	bl	8005264 <SPI_WaitFifoStateUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e000      	b.n	8005414 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e049      	b.n	80054c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f841 	bl	80054ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f000 f9f8 	bl	8005850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e04f      	b.n	8005598 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a23      	ldr	r2, [pc, #140]	; (80055a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01d      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0x76>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005522:	d018      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0x76>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0x76>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0x76>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0x76>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_TIM_Base_Start_IT+0x76>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d115      	bne.n	8005582 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <HAL_TIM_Base_Start_IT+0xdc>)
 800555e:	4013      	ands	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b06      	cmp	r3, #6
 8005566:	d015      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0xb4>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800556e:	d011      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005580:	e008      	b.n	8005594 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e000      	b.n	8005596 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005594:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40013400 	.word	0x40013400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40015000 	.word	0x40015000
 80055bc:	00010007 	.word	0x00010007

080055c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0202 	mvn.w	r2, #2
 80055ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f905 	bl	8005812 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8f7 	bl	80057fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f908 	bl	8005826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b04      	cmp	r3, #4
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b04      	cmp	r3, #4
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0204 	mvn.w	r2, #4
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2202      	movs	r2, #2
 8005646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f8db 	bl	8005812 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8cd 	bl	80057fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8de 	bl	8005826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b08      	cmp	r3, #8
 800567c:	d122      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b08      	cmp	r3, #8
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0208 	mvn.w	r2, #8
 8005694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2204      	movs	r2, #4
 800569a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f8b1 	bl	8005812 <HAL_TIM_IC_CaptureCallback>
 80056b0:	e005      	b.n	80056be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f8a3 	bl	80057fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f8b4 	bl	8005826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d122      	bne.n	8005718 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d11b      	bne.n	8005718 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0210 	mvn.w	r2, #16
 80056e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2208      	movs	r2, #8
 80056ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f887 	bl	8005812 <HAL_TIM_IC_CaptureCallback>
 8005704:	e005      	b.n	8005712 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f879 	bl	80057fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f88a 	bl	8005826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d10e      	bne.n	8005744 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b01      	cmp	r3, #1
 8005732:	d107      	bne.n	8005744 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0201 	mvn.w	r2, #1
 800573c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fc fd06 	bl	8002150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b80      	cmp	r3, #128	; 0x80
 8005750:	d10e      	bne.n	8005770 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b80      	cmp	r3, #128	; 0x80
 800575e:	d107      	bne.n	8005770 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f918 	bl	80059a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800577e:	d10e      	bne.n	800579e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d107      	bne.n	800579e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f90b 	bl	80059b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d10e      	bne.n	80057ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d107      	bne.n	80057ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f838 	bl	800583a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d10e      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d107      	bne.n	80057f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f06f 0220 	mvn.w	r2, #32
 80057ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f8cb 	bl	800598c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a42      	ldr	r2, [pc, #264]	; (800596c <TIM_Base_SetConfig+0x11c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d013      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d00f      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a3f      	ldr	r2, [pc, #252]	; (8005970 <TIM_Base_SetConfig+0x120>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00b      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a3e      	ldr	r2, [pc, #248]	; (8005974 <TIM_Base_SetConfig+0x124>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3d      	ldr	r2, [pc, #244]	; (8005978 <TIM_Base_SetConfig+0x128>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3c      	ldr	r2, [pc, #240]	; (800597c <TIM_Base_SetConfig+0x12c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d108      	bne.n	80058a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a31      	ldr	r2, [pc, #196]	; (800596c <TIM_Base_SetConfig+0x11c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01f      	beq.n	80058ea <TIM_Base_SetConfig+0x9a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d01b      	beq.n	80058ea <TIM_Base_SetConfig+0x9a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2e      	ldr	r2, [pc, #184]	; (8005970 <TIM_Base_SetConfig+0x120>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d017      	beq.n	80058ea <TIM_Base_SetConfig+0x9a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2d      	ldr	r2, [pc, #180]	; (8005974 <TIM_Base_SetConfig+0x124>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <TIM_Base_SetConfig+0x9a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2c      	ldr	r2, [pc, #176]	; (8005978 <TIM_Base_SetConfig+0x128>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00f      	beq.n	80058ea <TIM_Base_SetConfig+0x9a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <TIM_Base_SetConfig+0x130>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00b      	beq.n	80058ea <TIM_Base_SetConfig+0x9a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2b      	ldr	r2, [pc, #172]	; (8005984 <TIM_Base_SetConfig+0x134>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <TIM_Base_SetConfig+0x9a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2a      	ldr	r2, [pc, #168]	; (8005988 <TIM_Base_SetConfig+0x138>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d003      	beq.n	80058ea <TIM_Base_SetConfig+0x9a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a25      	ldr	r2, [pc, #148]	; (800597c <TIM_Base_SetConfig+0x12c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d108      	bne.n	80058fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a12      	ldr	r2, [pc, #72]	; (800596c <TIM_Base_SetConfig+0x11c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <TIM_Base_SetConfig+0x100>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a13      	ldr	r2, [pc, #76]	; (8005978 <TIM_Base_SetConfig+0x128>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0x100>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <TIM_Base_SetConfig+0x130>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0x100>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a12      	ldr	r2, [pc, #72]	; (8005984 <TIM_Base_SetConfig+0x134>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0x100>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a11      	ldr	r2, [pc, #68]	; (8005988 <TIM_Base_SetConfig+0x138>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0x100>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <TIM_Base_SetConfig+0x12c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d103      	bne.n	8005958 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	615a      	str	r2, [r3, #20]
}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40013400 	.word	0x40013400
 800597c:	40015000 	.word	0x40015000
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e040      	b.n	8005a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc fc50 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fbbe 	bl	8006188 <UART_SetConfig>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e022      	b.n	8005a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fd88 	bl	8006534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fe0f 	bl	8006678 <UART_CheckIdleState>
 8005a5a:	4603      	mov	r3, r0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	f040 8082 	bne.w	8005b82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_UART_Transmit+0x26>
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e07a      	b.n	8005b84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_UART_Transmit+0x38>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e073      	b.n	8005b84 <HAL_UART_Transmit+0x120>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2221      	movs	r2, #33	; 0x21
 8005ab0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ab2:	f7fc fd9d 	bl	80025f0 <HAL_GetTick>
 8005ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad0:	d108      	bne.n	8005ae4 <HAL_UART_Transmit+0x80>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	e003      	b.n	8005aec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005af4:	e02d      	b.n	8005b52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fe02 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e039      	b.n	8005b84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	881a      	ldrh	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b22:	b292      	uxth	r2, r2
 8005b24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	3302      	adds	r3, #2
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	e008      	b.n	8005b40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	781a      	ldrb	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	b292      	uxth	r2, r2
 8005b38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1cb      	bne.n	8005af6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2140      	movs	r1, #64	; 0x40
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fdce 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e005      	b.n	8005b84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3720      	adds	r7, #32
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b0ba      	sub	sp, #232	; 0xe8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005bb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005bba:	4013      	ands	r3, r2
 8005bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d115      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00f      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d009      	beq.n	8005bf4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 82a3 	beq.w	8006130 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
      }
      return;
 8005bf2:	e29d      	b.n	8006130 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8117 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c0e:	4b85      	ldr	r3, [pc, #532]	; (8005e24 <HAL_UART_IRQHandler+0x298>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 810a 	beq.w	8005e2c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <HAL_UART_IRQHandler+0xbc>
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2201      	movs	r2, #1
 8005c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d011      	beq.n	8005c78 <HAL_UART_IRQHandler+0xec>
 8005c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00b      	beq.n	8005c78 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2202      	movs	r2, #2
 8005c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d011      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x11c>
 8005c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2204      	movs	r2, #4
 8005c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9e:	f043 0202 	orr.w	r2, r3, #2
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d017      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb8:	f003 0320 	and.w	r3, r3, #32
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cc4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cda:	f043 0208 	orr.w	r2, r3, #8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d012      	beq.n	8005d16 <HAL_UART_IRQHandler+0x18a>
 8005cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8209 	beq.w	8006134 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d005      	beq.n	8005d6e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d04f      	beq.n	8005e0e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fd8f 	bl	8006892 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7e:	2b40      	cmp	r3, #64	; 0x40
 8005d80:	d141      	bne.n	8005e06 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1d9      	bne.n	8005d82 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d013      	beq.n	8005dfe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <HAL_UART_IRQHandler+0x29c>)
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fc fd2b 	bl	800283e <HAL_DMA_Abort_IT>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d017      	beq.n	8005e1e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	e00f      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f9ac 	bl	800615c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e04:	e00b      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f9a8 	bl	800615c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0c:	e007      	b.n	8005e1e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f9a4 	bl	800615c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005e1c:	e18a      	b.n	8006134 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1e:	bf00      	nop
    return;
 8005e20:	e188      	b.n	8006134 <HAL_UART_IRQHandler+0x5a8>
 8005e22:	bf00      	nop
 8005e24:	04000120 	.word	0x04000120
 8005e28:	08006959 	.word	0x08006959

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 8143 	bne.w	80060bc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 813c 	beq.w	80060bc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8135 	beq.w	80060bc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2210      	movs	r2, #16
 8005e58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b40      	cmp	r3, #64	; 0x40
 8005e66:	f040 80b1 	bne.w	8005fcc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 815c 	beq.w	8006138 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	f080 8154 	bcs.w	8006138 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	f000 8085 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005eba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ed0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ed4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005edc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1da      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e1      	bne.n	8005ef0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3308      	adds	r3, #8
 8005f32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f50:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e3      	bne.n	8005f2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f80:	f023 0310 	bic.w	r3, r3, #16
 8005f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f92:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e4      	bne.n	8005f70 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fc fc0e 	bl	80027cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f8d3 	bl	8006170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fca:	e0b5      	b.n	8006138 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80a7 	beq.w	800613c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80a2 	beq.w	800613c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800600c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800601a:	647b      	str	r3, [r7, #68]	; 0x44
 800601c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e4      	bne.n	8005ff8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	623b      	str	r3, [r7, #32]
   return(result);
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006052:	633a      	str	r2, [r7, #48]	; 0x30
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e3      	bne.n	800602e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	60fb      	str	r3, [r7, #12]
   return(result);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f023 0310 	bic.w	r3, r3, #16
 800608c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	69b9      	ldr	r1, [r7, #24]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	617b      	str	r3, [r7, #20]
   return(result);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e4      	bne.n	8006078 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f85b 	bl	8006170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060ba:	e03f      	b.n	800613c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00e      	beq.n	80060e6 <HAL_UART_IRQHandler+0x55a>
 80060c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fc7a 	bl	80069d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060e4:	e02d      	b.n	8006142 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d008      	beq.n	8006110 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006102:	2b00      	cmp	r3, #0
 8006104:	d01c      	beq.n	8006140 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
    }
    return;
 800610e:	e017      	b.n	8006140 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <HAL_UART_IRQHandler+0x5b6>
 800611c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00c      	beq.n	8006142 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fc2b 	bl	8006984 <UART_EndTransmit_IT>
    return;
 800612e:	e008      	b.n	8006142 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006130:	bf00      	nop
 8006132:	e006      	b.n	8006142 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006134:	bf00      	nop
 8006136:	e004      	b.n	8006142 <HAL_UART_IRQHandler+0x5b6>
      return;
 8006138:	bf00      	nop
 800613a:	e002      	b.n	8006142 <HAL_UART_IRQHandler+0x5b6>
      return;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <HAL_UART_IRQHandler+0x5b6>
    return;
 8006140:	bf00      	nop
  }

}
 8006142:	37e8      	adds	r7, #232	; 0xe8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b92      	ldr	r3, [pc, #584]	; (80063fc <UART_SetConfig+0x274>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	6979      	ldr	r1, [r7, #20]
 80061bc:	430b      	orrs	r3, r1
 80061be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a80      	ldr	r2, [pc, #512]	; (8006400 <UART_SetConfig+0x278>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d120      	bne.n	8006246 <UART_SetConfig+0xbe>
 8006204:	4b7f      	ldr	r3, [pc, #508]	; (8006404 <UART_SetConfig+0x27c>)
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	2b03      	cmp	r3, #3
 800620e:	d817      	bhi.n	8006240 <UART_SetConfig+0xb8>
 8006210:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <UART_SetConfig+0x90>)
 8006212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006216:	bf00      	nop
 8006218:	08006229 	.word	0x08006229
 800621c:	08006235 	.word	0x08006235
 8006220:	0800623b 	.word	0x0800623b
 8006224:	0800622f 	.word	0x0800622f
 8006228:	2301      	movs	r3, #1
 800622a:	77fb      	strb	r3, [r7, #31]
 800622c:	e0b5      	b.n	800639a <UART_SetConfig+0x212>
 800622e:	2302      	movs	r3, #2
 8006230:	77fb      	strb	r3, [r7, #31]
 8006232:	e0b2      	b.n	800639a <UART_SetConfig+0x212>
 8006234:	2304      	movs	r3, #4
 8006236:	77fb      	strb	r3, [r7, #31]
 8006238:	e0af      	b.n	800639a <UART_SetConfig+0x212>
 800623a:	2308      	movs	r3, #8
 800623c:	77fb      	strb	r3, [r7, #31]
 800623e:	e0ac      	b.n	800639a <UART_SetConfig+0x212>
 8006240:	2310      	movs	r3, #16
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e0a9      	b.n	800639a <UART_SetConfig+0x212>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a6f      	ldr	r2, [pc, #444]	; (8006408 <UART_SetConfig+0x280>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d124      	bne.n	800629a <UART_SetConfig+0x112>
 8006250:	4b6c      	ldr	r3, [pc, #432]	; (8006404 <UART_SetConfig+0x27c>)
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006258:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800625c:	d011      	beq.n	8006282 <UART_SetConfig+0xfa>
 800625e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006262:	d817      	bhi.n	8006294 <UART_SetConfig+0x10c>
 8006264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006268:	d011      	beq.n	800628e <UART_SetConfig+0x106>
 800626a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800626e:	d811      	bhi.n	8006294 <UART_SetConfig+0x10c>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <UART_SetConfig+0xf4>
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d006      	beq.n	8006288 <UART_SetConfig+0x100>
 800627a:	e00b      	b.n	8006294 <UART_SetConfig+0x10c>
 800627c:	2300      	movs	r3, #0
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e08b      	b.n	800639a <UART_SetConfig+0x212>
 8006282:	2302      	movs	r3, #2
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e088      	b.n	800639a <UART_SetConfig+0x212>
 8006288:	2304      	movs	r3, #4
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e085      	b.n	800639a <UART_SetConfig+0x212>
 800628e:	2308      	movs	r3, #8
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e082      	b.n	800639a <UART_SetConfig+0x212>
 8006294:	2310      	movs	r3, #16
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e07f      	b.n	800639a <UART_SetConfig+0x212>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a5b      	ldr	r2, [pc, #364]	; (800640c <UART_SetConfig+0x284>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d124      	bne.n	80062ee <UART_SetConfig+0x166>
 80062a4:	4b57      	ldr	r3, [pc, #348]	; (8006404 <UART_SetConfig+0x27c>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80062ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80062b0:	d011      	beq.n	80062d6 <UART_SetConfig+0x14e>
 80062b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80062b6:	d817      	bhi.n	80062e8 <UART_SetConfig+0x160>
 80062b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062bc:	d011      	beq.n	80062e2 <UART_SetConfig+0x15a>
 80062be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062c2:	d811      	bhi.n	80062e8 <UART_SetConfig+0x160>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <UART_SetConfig+0x148>
 80062c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062cc:	d006      	beq.n	80062dc <UART_SetConfig+0x154>
 80062ce:	e00b      	b.n	80062e8 <UART_SetConfig+0x160>
 80062d0:	2300      	movs	r3, #0
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e061      	b.n	800639a <UART_SetConfig+0x212>
 80062d6:	2302      	movs	r3, #2
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e05e      	b.n	800639a <UART_SetConfig+0x212>
 80062dc:	2304      	movs	r3, #4
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e05b      	b.n	800639a <UART_SetConfig+0x212>
 80062e2:	2308      	movs	r3, #8
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e058      	b.n	800639a <UART_SetConfig+0x212>
 80062e8:	2310      	movs	r3, #16
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e055      	b.n	800639a <UART_SetConfig+0x212>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a47      	ldr	r2, [pc, #284]	; (8006410 <UART_SetConfig+0x288>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d124      	bne.n	8006342 <UART_SetConfig+0x1ba>
 80062f8:	4b42      	ldr	r3, [pc, #264]	; (8006404 <UART_SetConfig+0x27c>)
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006300:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006304:	d011      	beq.n	800632a <UART_SetConfig+0x1a2>
 8006306:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800630a:	d817      	bhi.n	800633c <UART_SetConfig+0x1b4>
 800630c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006310:	d011      	beq.n	8006336 <UART_SetConfig+0x1ae>
 8006312:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006316:	d811      	bhi.n	800633c <UART_SetConfig+0x1b4>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <UART_SetConfig+0x19c>
 800631c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006320:	d006      	beq.n	8006330 <UART_SetConfig+0x1a8>
 8006322:	e00b      	b.n	800633c <UART_SetConfig+0x1b4>
 8006324:	2300      	movs	r3, #0
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e037      	b.n	800639a <UART_SetConfig+0x212>
 800632a:	2302      	movs	r3, #2
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e034      	b.n	800639a <UART_SetConfig+0x212>
 8006330:	2304      	movs	r3, #4
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e031      	b.n	800639a <UART_SetConfig+0x212>
 8006336:	2308      	movs	r3, #8
 8006338:	77fb      	strb	r3, [r7, #31]
 800633a:	e02e      	b.n	800639a <UART_SetConfig+0x212>
 800633c:	2310      	movs	r3, #16
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e02b      	b.n	800639a <UART_SetConfig+0x212>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a33      	ldr	r2, [pc, #204]	; (8006414 <UART_SetConfig+0x28c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d124      	bne.n	8006396 <UART_SetConfig+0x20e>
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <UART_SetConfig+0x27c>)
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006354:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006358:	d011      	beq.n	800637e <UART_SetConfig+0x1f6>
 800635a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800635e:	d817      	bhi.n	8006390 <UART_SetConfig+0x208>
 8006360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006364:	d011      	beq.n	800638a <UART_SetConfig+0x202>
 8006366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800636a:	d811      	bhi.n	8006390 <UART_SetConfig+0x208>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <UART_SetConfig+0x1f0>
 8006370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006374:	d006      	beq.n	8006384 <UART_SetConfig+0x1fc>
 8006376:	e00b      	b.n	8006390 <UART_SetConfig+0x208>
 8006378:	2300      	movs	r3, #0
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e00d      	b.n	800639a <UART_SetConfig+0x212>
 800637e:	2302      	movs	r3, #2
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e00a      	b.n	800639a <UART_SetConfig+0x212>
 8006384:	2304      	movs	r3, #4
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e007      	b.n	800639a <UART_SetConfig+0x212>
 800638a:	2308      	movs	r3, #8
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e004      	b.n	800639a <UART_SetConfig+0x212>
 8006390:	2310      	movs	r3, #16
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e001      	b.n	800639a <UART_SetConfig+0x212>
 8006396:	2310      	movs	r3, #16
 8006398:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a2:	d16c      	bne.n	800647e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80063a4:	7ffb      	ldrb	r3, [r7, #31]
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d838      	bhi.n	800641c <UART_SetConfig+0x294>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x228>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063dd 	.word	0x080063dd
 80063b8:	080063e5 	.word	0x080063e5
 80063bc:	0800641d 	.word	0x0800641d
 80063c0:	080063eb 	.word	0x080063eb
 80063c4:	0800641d 	.word	0x0800641d
 80063c8:	0800641d 	.word	0x0800641d
 80063cc:	0800641d 	.word	0x0800641d
 80063d0:	080063f3 	.word	0x080063f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d4:	f7fd fffe 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 80063d8:	61b8      	str	r0, [r7, #24]
        break;
 80063da:	e024      	b.n	8006426 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063dc:	f7fe f81c 	bl	8004418 <HAL_RCC_GetPCLK2Freq>
 80063e0:	61b8      	str	r0, [r7, #24]
        break;
 80063e2:	e020      	b.n	8006426 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e4:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <UART_SetConfig+0x290>)
 80063e6:	61bb      	str	r3, [r7, #24]
        break;
 80063e8:	e01d      	b.n	8006426 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ea:	f7fd ff7d 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80063ee:	61b8      	str	r0, [r7, #24]
        break;
 80063f0:	e019      	b.n	8006426 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063f6:	61bb      	str	r3, [r7, #24]
        break;
 80063f8:	e015      	b.n	8006426 <UART_SetConfig+0x29e>
 80063fa:	bf00      	nop
 80063fc:	efff69f3 	.word	0xefff69f3
 8006400:	40013800 	.word	0x40013800
 8006404:	40021000 	.word	0x40021000
 8006408:	40004400 	.word	0x40004400
 800640c:	40004800 	.word	0x40004800
 8006410:	40004c00 	.word	0x40004c00
 8006414:	40005000 	.word	0x40005000
 8006418:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	77bb      	strb	r3, [r7, #30]
        break;
 8006424:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d075      	beq.n	8006518 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	005a      	lsls	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	b29b      	uxth	r3, r3
 8006442:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b0f      	cmp	r3, #15
 8006448:	d916      	bls.n	8006478 <UART_SetConfig+0x2f0>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006450:	d212      	bcs.n	8006478 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	b29b      	uxth	r3, r3
 8006456:	f023 030f 	bic.w	r3, r3, #15
 800645a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	085b      	lsrs	r3, r3, #1
 8006460:	b29b      	uxth	r3, r3
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	b29a      	uxth	r2, r3
 8006468:	89fb      	ldrh	r3, [r7, #14]
 800646a:	4313      	orrs	r3, r2
 800646c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	89fa      	ldrh	r2, [r7, #14]
 8006474:	60da      	str	r2, [r3, #12]
 8006476:	e04f      	b.n	8006518 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	77bb      	strb	r3, [r7, #30]
 800647c:	e04c      	b.n	8006518 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800647e:	7ffb      	ldrb	r3, [r7, #31]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d828      	bhi.n	80064d6 <UART_SetConfig+0x34e>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x304>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064b9 	.word	0x080064b9
 8006494:	080064c1 	.word	0x080064c1
 8006498:	080064d7 	.word	0x080064d7
 800649c:	080064c7 	.word	0x080064c7
 80064a0:	080064d7 	.word	0x080064d7
 80064a4:	080064d7 	.word	0x080064d7
 80064a8:	080064d7 	.word	0x080064d7
 80064ac:	080064cf 	.word	0x080064cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b0:	f7fd ff90 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 80064b4:	61b8      	str	r0, [r7, #24]
        break;
 80064b6:	e013      	b.n	80064e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b8:	f7fd ffae 	bl	8004418 <HAL_RCC_GetPCLK2Freq>
 80064bc:	61b8      	str	r0, [r7, #24]
        break;
 80064be:	e00f      	b.n	80064e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <UART_SetConfig+0x3a8>)
 80064c2:	61bb      	str	r3, [r7, #24]
        break;
 80064c4:	e00c      	b.n	80064e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c6:	f7fd ff0f 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80064ca:	61b8      	str	r0, [r7, #24]
        break;
 80064cc:	e008      	b.n	80064e0 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d2:	61bb      	str	r3, [r7, #24]
        break;
 80064d4:	e004      	b.n	80064e0 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	77bb      	strb	r3, [r7, #30]
        break;
 80064de:	bf00      	nop
    }

    if (pclk != 0U)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d018      	beq.n	8006518 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	085a      	lsrs	r2, r3, #1
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	441a      	add	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d908      	bls.n	8006514 <UART_SetConfig+0x38c>
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	d204      	bcs.n	8006514 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	e001      	b.n	8006518 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006524:	7fbb      	ldrb	r3, [r7, #30]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	007a1200 	.word	0x007a1200

08006534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01a      	beq.n	800664a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006632:	d10a      	bne.n	800664a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006688:	f7fb ffb2 	bl	80025f0 <HAL_GetTick>
 800668c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b08      	cmp	r3, #8
 800669a:	d10e      	bne.n	80066ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f82d 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e023      	b.n	8006702 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d10e      	bne.n	80066e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f817 	bl	800670a <UART_WaitOnFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e00d      	b.n	8006702 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2220      	movs	r2, #32
 80066ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b09c      	sub	sp, #112	; 0x70
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	4613      	mov	r3, r2
 8006718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800671a:	e0a5      	b.n	8006868 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800671e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006722:	f000 80a1 	beq.w	8006868 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fb ff63 	bl	80025f0 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <UART_WaitOnFlagUntilTimeout+0x32>
 8006736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006738:	2b00      	cmp	r3, #0
 800673a:	d13e      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006750:	667b      	str	r3, [r7, #100]	; 0x64
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800675c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006760:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e6      	bne.n	800673c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	663b      	str	r3, [r7, #96]	; 0x60
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3308      	adds	r3, #8
 800678c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800678e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e5      	bne.n	800676e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2220      	movs	r2, #32
 80067a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e067      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d04f      	beq.n	8006868 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d6:	d147      	bne.n	8006868 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e6      	bne.n	80067e2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3308      	adds	r3, #8
 800681a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	e853 3f00 	ldrex	r3, [r3]
 8006822:	613b      	str	r3, [r7, #16]
   return(result);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f023 0301 	bic.w	r3, r3, #1
 800682a:	66bb      	str	r3, [r7, #104]	; 0x68
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3308      	adds	r3, #8
 8006832:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006834:	623a      	str	r2, [r7, #32]
 8006836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	6a3a      	ldr	r2, [r7, #32]
 800683c:	e841 2300 	strex	r3, r2, [r1]
 8006840:	61bb      	str	r3, [r7, #24]
   return(result);
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e5      	bne.n	8006814 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e010      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	69da      	ldr	r2, [r3, #28]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4013      	ands	r3, r2
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	bf0c      	ite	eq
 8006878:	2301      	moveq	r3, #1
 800687a:	2300      	movne	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	461a      	mov	r2, r3
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	429a      	cmp	r2, r3
 8006884:	f43f af4a 	beq.w	800671c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3770      	adds	r7, #112	; 0x70
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006892:	b480      	push	{r7}
 8006894:	b095      	sub	sp, #84	; 0x54
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	e853 3f00 	ldrex	r3, [r3]
 80068a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b8:	643b      	str	r3, [r7, #64]	; 0x40
 80068ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e6      	bne.n	800689a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3308      	adds	r3, #8
 80068d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	e853 3f00 	ldrex	r3, [r3]
 80068da:	61fb      	str	r3, [r7, #28]
   return(result);
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f4:	e841 2300 	strex	r3, r2, [r1]
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1e5      	bne.n	80068cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006904:	2b01      	cmp	r3, #1
 8006906:	d118      	bne.n	800693a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	60bb      	str	r3, [r7, #8]
   return(result);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f023 0310 	bic.w	r3, r3, #16
 800691c:	647b      	str	r3, [r7, #68]	; 0x44
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6979      	ldr	r1, [r7, #20]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	613b      	str	r3, [r7, #16]
   return(result);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e6      	bne.n	8006908 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800694c:	bf00      	nop
 800694e:	3754      	adds	r7, #84	; 0x54
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f7ff fbf0 	bl	800615c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800697c:	bf00      	nop
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	60bb      	str	r3, [r7, #8]
   return(result);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6979      	ldr	r1, [r7, #20]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	613b      	str	r3, [r7, #16]
   return(result);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e6      	bne.n	800698c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff fbbc 	bl	8006148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d0:	bf00      	nop
 80069d2:	3720      	adds	r7, #32
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069f0:	4904      	ldr	r1, [pc, #16]	; (8006a04 <MX_FATFS_Init+0x18>)
 80069f2:	4805      	ldr	r0, [pc, #20]	; (8006a08 <MX_FATFS_Init+0x1c>)
 80069f4:	f004 f884 	bl	800ab00 <FATFS_LinkDriver>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <MX_FATFS_Init+0x20>)
 80069fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a00:	bf00      	nop
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	200022ac 	.word	0x200022ac
 8006a08:	20000010 	.word	0x20000010
 8006a0c:	200022a8 	.word	0x200022a8

08006a10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006a14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fa fd2b 	bl	8001488 <SD_disk_initialize>
 8006a32:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	4603      	mov	r3, r0
 8006a44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fa fe03 	bl	8001654 <SD_disk_status>
 8006a4e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006a68:	7bf8      	ldrb	r0, [r7, #15]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	f7fa fe06 	bl	8001680 <SD_disk_read>
 8006a74:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006a8e:	7bf8      	ldrb	r0, [r7, #15]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	f7fa fe5d 	bl	8001754 <SD_disk_write>
 8006a9a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	603a      	str	r2, [r7, #0]
 8006aae:	71fb      	strb	r3, [r7, #7]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006ab4:	79b9      	ldrb	r1, [r7, #6]
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fa fece 	bl	800185c <SD_disk_ioctl>
 8006ac0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	4a08      	ldr	r2, [pc, #32]	; (8006afc <disk_status+0x30>)
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	79fa      	ldrb	r2, [r7, #7]
 8006ae4:	4905      	ldr	r1, [pc, #20]	; (8006afc <disk_status+0x30>)
 8006ae6:	440a      	add	r2, r1
 8006ae8:	7a12      	ldrb	r2, [r2, #8]
 8006aea:	4610      	mov	r0, r2
 8006aec:	4798      	blx	r3
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	200022d0 	.word	0x200022d0

08006b00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	4a0d      	ldr	r2, [pc, #52]	; (8006b48 <disk_initialize+0x48>)
 8006b12:	5cd3      	ldrb	r3, [r2, r3]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d111      	bne.n	8006b3c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	4a0b      	ldr	r2, [pc, #44]	; (8006b48 <disk_initialize+0x48>)
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	4a09      	ldr	r2, [pc, #36]	; (8006b48 <disk_initialize+0x48>)
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	79fa      	ldrb	r2, [r7, #7]
 8006b2e:	4906      	ldr	r1, [pc, #24]	; (8006b48 <disk_initialize+0x48>)
 8006b30:	440a      	add	r2, r1
 8006b32:	7a12      	ldrb	r2, [r2, #8]
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
 8006b38:	4603      	mov	r3, r0
 8006b3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	200022d0 	.word	0x200022d0

08006b4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b4c:	b590      	push	{r4, r7, lr}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <disk_read+0x3c>)
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	689c      	ldr	r4, [r3, #8]
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	4a07      	ldr	r2, [pc, #28]	; (8006b88 <disk_read+0x3c>)
 8006b6c:	4413      	add	r3, r2
 8006b6e:	7a18      	ldrb	r0, [r3, #8]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	47a0      	blx	r4
 8006b78:	4603      	mov	r3, r0
 8006b7a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	371c      	adds	r7, #28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd90      	pop	{r4, r7, pc}
 8006b86:	bf00      	nop
 8006b88:	200022d0 	.word	0x200022d0

08006b8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b8c:	b590      	push	{r4, r7, lr}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <disk_write+0x3c>)
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	68dc      	ldr	r4, [r3, #12]
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	4a07      	ldr	r2, [pc, #28]	; (8006bc8 <disk_write+0x3c>)
 8006bac:	4413      	add	r3, r2
 8006bae:	7a18      	ldrb	r0, [r3, #8]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	47a0      	blx	r4
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]
  return res;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd90      	pop	{r4, r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	200022d0 	.word	0x200022d0

08006bcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	603a      	str	r2, [r7, #0]
 8006bd6:	71fb      	strb	r3, [r7, #7]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	4a09      	ldr	r2, [pc, #36]	; (8006c04 <disk_ioctl+0x38>)
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	79fa      	ldrb	r2, [r7, #7]
 8006bea:	4906      	ldr	r1, [pc, #24]	; (8006c04 <disk_ioctl+0x38>)
 8006bec:	440a      	add	r2, r1
 8006bee:	7a10      	ldrb	r0, [r2, #8]
 8006bf0:	79b9      	ldrb	r1, [r7, #6]
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	4798      	blx	r3
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  return res;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	200022d0 	.word	0x200022d0

08006c08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006c1c:	e007      	b.n	8006c2e <mem_cpy+0x26>
		*d++ = *s++;
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	1c53      	adds	r3, r2, #1
 8006c22:	613b      	str	r3, [r7, #16]
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	1c59      	adds	r1, r3, #1
 8006c28:	6179      	str	r1, [r7, #20]
 8006c2a:	7812      	ldrb	r2, [r2, #0]
 8006c2c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	1e5a      	subs	r2, r3, #1
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f2      	bne.n	8006c1e <mem_cpy+0x16>
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c46:	b480      	push	{r7}
 8006c48:	b087      	sub	sp, #28
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006c56:	e005      	b.n	8006c64 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	617a      	str	r2, [r7, #20]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	b2d2      	uxtb	r2, r2
 8006c62:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	1e5a      	subs	r2, r3, #1
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f4      	bne.n	8006c58 <mem_set+0x12>
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	; 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006c94:	bf00      	nop
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	1e5a      	subs	r2, r3, #1
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00d      	beq.n	8006cbc <mem_cmp+0x40>
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	61fa      	str	r2, [r7, #28]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	61ba      	str	r2, [r7, #24]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	1acb      	subs	r3, r1, r3
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0ec      	beq.n	8006c96 <mem_cmp+0x1a>
	return r;
 8006cbc:	697b      	ldr	r3, [r7, #20]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3724      	adds	r7, #36	; 0x24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006cd4:	e002      	b.n	8006cdc <chk_chr+0x12>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	607b      	str	r3, [r7, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <chk_chr+0x26>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d1f2      	bne.n	8006cd6 <chk_chr+0xc>
	return *str;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f003 ff2e 	bl	800ab72 <ff_req_grant>
 8006d16:	4603      	mov	r3, r0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d012      	beq.n	8006d58 <unlock_fs+0x38>
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	2b0c      	cmp	r3, #12
 8006d36:	d00f      	beq.n	8006d58 <unlock_fs+0x38>
		res != FR_NOT_ENABLED &&
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	2b0b      	cmp	r3, #11
 8006d3c:	d00c      	beq.n	8006d58 <unlock_fs+0x38>
		res != FR_INVALID_DRIVE &&
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	2b09      	cmp	r3, #9
 8006d42:	d009      	beq.n	8006d58 <unlock_fs+0x38>
		res != FR_INVALID_OBJECT &&
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d006      	beq.n	8006d58 <unlock_fs+0x38>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f003 ff22 	bl	800ab9c <ff_rel_grant>
	}
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e03b      	b.n	8006dec <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8006d74:	4931      	ldr	r1, [pc, #196]	; (8006e3c <chk_lock+0xdc>)
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d02c      	beq.n	8006de2 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006d88:	492c      	ldr	r1, [pc, #176]	; (8006e3c <chk_lock+0xdc>)
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d120      	bne.n	8006de6 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8006da4:	4925      	ldr	r1, [pc, #148]	; (8006e3c <chk_lock+0xdc>)
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4613      	mov	r3, r2
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	3304      	adds	r3, #4
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dbc:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d111      	bne.n	8006de6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006dc2:	491e      	ldr	r1, [pc, #120]	; (8006e3c <chk_lock+0xdc>)
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	440b      	add	r3, r1
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	881a      	ldrh	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dda:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d102      	bne.n	8006de6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006de0:	e007      	b.n	8006df2 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8006de2:	2301      	movs	r3, #1
 8006de4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3301      	adds	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d9c0      	bls.n	8006d74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d109      	bne.n	8006e0c <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <chk_lock+0xa4>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d101      	bne.n	8006e08 <chk_lock+0xa8>
 8006e04:	2300      	movs	r3, #0
 8006e06:	e013      	b.n	8006e30 <chk_lock+0xd0>
 8006e08:	2312      	movs	r3, #18
 8006e0a:	e011      	b.n	8006e30 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <chk_lock+0xca>
 8006e12:	490a      	ldr	r1, [pc, #40]	; (8006e3c <chk_lock+0xdc>)
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4613      	mov	r3, r2
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	330a      	adds	r3, #10
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e28:	d101      	bne.n	8006e2e <chk_lock+0xce>
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	e000      	b.n	8006e30 <chk_lock+0xd0>
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	200022b8 	.word	0x200022b8

08006e40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e46:	2300      	movs	r3, #0
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	e002      	b.n	8006e52 <enq_lock+0x12>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d809      	bhi.n	8006e6c <enq_lock+0x2c>
 8006e58:	490a      	ldr	r1, [pc, #40]	; (8006e84 <enq_lock+0x44>)
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	440b      	add	r3, r1
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1ef      	bne.n	8006e4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	bf14      	ite	ne
 8006e72:	2301      	movne	r3, #1
 8006e74:	2300      	moveq	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	200022b8 	.word	0x200022b8

08006e88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	e02e      	b.n	8006ef6 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8006e98:	4959      	ldr	r1, [pc, #356]	; (8007000 <inc_lock+0x178>)
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d11d      	bne.n	8006ef0 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006eb4:	4952      	ldr	r1, [pc, #328]	; (8007000 <inc_lock+0x178>)
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ecc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d10e      	bne.n	8006ef0 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006ed2:	494b      	ldr	r1, [pc, #300]	; (8007000 <inc_lock+0x178>)
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	881a      	ldrh	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eea:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d006      	beq.n	8006efe <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d9cd      	bls.n	8006e98 <inc_lock+0x10>
 8006efc:	e000      	b.n	8006f00 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8006efe:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d148      	bne.n	8006f98 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f06:	2300      	movs	r3, #0
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	e002      	b.n	8006f12 <inc_lock+0x8a>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d809      	bhi.n	8006f2c <inc_lock+0xa4>
 8006f18:	4939      	ldr	r1, [pc, #228]	; (8007000 <inc_lock+0x178>)
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1ef      	bne.n	8006f0c <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d101      	bne.n	8006f36 <inc_lock+0xae>
 8006f32:	2300      	movs	r3, #0
 8006f34:	e05d      	b.n	8006ff2 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3c:	6819      	ldr	r1, [r3, #0]
 8006f3e:	4830      	ldr	r0, [pc, #192]	; (8007000 <inc_lock+0x178>)
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4613      	mov	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4403      	add	r3, r0
 8006f4c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f54:	6899      	ldr	r1, [r3, #8]
 8006f56:	482a      	ldr	r0, [pc, #168]	; (8007000 <inc_lock+0x178>)
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4403      	add	r3, r0
 8006f64:	3304      	adds	r3, #4
 8006f66:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6e:	88d8      	ldrh	r0, [r3, #6]
 8006f70:	4923      	ldr	r1, [pc, #140]	; (8007000 <inc_lock+0x178>)
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4613      	mov	r3, r2
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	3308      	adds	r3, #8
 8006f80:	4602      	mov	r2, r0
 8006f82:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006f84:	491e      	ldr	r1, [pc, #120]	; (8007000 <inc_lock+0x178>)
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	330a      	adds	r3, #10
 8006f94:	2200      	movs	r2, #0
 8006f96:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <inc_lock+0x130>
 8006f9e:	4918      	ldr	r1, [pc, #96]	; (8007000 <inc_lock+0x178>)
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	330a      	adds	r3, #10
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <inc_lock+0x130>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e01c      	b.n	8006ff2 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10b      	bne.n	8006fd6 <inc_lock+0x14e>
 8006fbe:	4910      	ldr	r1, [pc, #64]	; (8007000 <inc_lock+0x178>)
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	330a      	adds	r3, #10
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	b299      	uxth	r1, r3
 8006fd4:	e001      	b.n	8006fda <inc_lock+0x152>
 8006fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fda:	4809      	ldr	r0, [pc, #36]	; (8007000 <inc_lock+0x178>)
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	4413      	add	r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4403      	add	r3, r0
 8006fe8:	330a      	adds	r3, #10
 8006fea:	460a      	mov	r2, r1
 8006fec:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3301      	adds	r3, #1
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	200022b8 	.word	0x200022b8

08007004 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3b01      	subs	r3, #1
 8007010:	607b      	str	r3, [r7, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d82e      	bhi.n	8007076 <dec_lock+0x72>
		n = Files[i].ctr;
 8007018:	491b      	ldr	r1, [pc, #108]	; (8007088 <dec_lock+0x84>)
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4613      	mov	r3, r2
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	330a      	adds	r3, #10
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800702c:	89fb      	ldrh	r3, [r7, #14]
 800702e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007032:	d101      	bne.n	8007038 <dec_lock+0x34>
 8007034:	2300      	movs	r3, #0
 8007036:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007038:	89fb      	ldrh	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <dec_lock+0x40>
 800703e:	89fb      	ldrh	r3, [r7, #14]
 8007040:	3b01      	subs	r3, #1
 8007042:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007044:	4910      	ldr	r1, [pc, #64]	; (8007088 <dec_lock+0x84>)
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	005b      	lsls	r3, r3, #1
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	330a      	adds	r3, #10
 8007054:	89fa      	ldrh	r2, [r7, #14]
 8007056:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007058:	89fb      	ldrh	r3, [r7, #14]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d108      	bne.n	8007070 <dec_lock+0x6c>
 800705e:	490a      	ldr	r1, [pc, #40]	; (8007088 <dec_lock+0x84>)
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	737b      	strb	r3, [r7, #13]
 8007074:	e001      	b.n	800707a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007076:	2302      	movs	r3, #2
 8007078:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800707a:	7b7b      	ldrb	r3, [r7, #13]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	200022b8 	.word	0x200022b8

0800708c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	e016      	b.n	80070c8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800709a:	4910      	ldr	r1, [pc, #64]	; (80070dc <clear_lock+0x50>)
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4613      	mov	r3, r2
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d108      	bne.n	80070c2 <clear_lock+0x36>
 80070b0:	490a      	ldr	r1, [pc, #40]	; (80070dc <clear_lock+0x50>)
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4613      	mov	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d9e5      	bls.n	800709a <clear_lock+0xe>
	}
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	200022b8 	.word	0x200022b8

080070e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f2:	791b      	ldrb	r3, [r3, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d040      	beq.n	800717a <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007108:	7858      	ldrb	r0, [r3, #1]
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	2301      	movs	r3, #1
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	f7ff fd3c 	bl	8006b8c <disk_write>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <sync_window+0x40>
			res = FR_DISK_ERR;
 800711a:	2301      	movs	r3, #1
 800711c:	73fb      	strb	r3, [r7, #15]
 800711e:	e02c      	b.n	800717a <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007126:	2200      	movs	r2, #0
 8007128:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	1ad2      	subs	r2, r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	429a      	cmp	r2, r3
 8007140:	d21b      	bcs.n	800717a <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007148:	78db      	ldrb	r3, [r3, #3]
 800714a:	613b      	str	r3, [r7, #16]
 800714c:	e012      	b.n	8007174 <sync_window+0x94>
					wsect += fs->fsize;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	4413      	add	r3, r2
 800715a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007162:	7858      	ldrb	r0, [r3, #1]
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	2301      	movs	r3, #1
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	f7ff fd0f 	bl	8006b8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	3b01      	subs	r3, #1
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d8e9      	bhi.n	800714e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d01e      	beq.n	80071de <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff ff9d 	bl	80070e0 <sync_window>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d116      	bne.n	80071de <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b6:	7858      	ldrb	r0, [r3, #1]
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	2301      	movs	r3, #1
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	f7ff fcc5 	bl	8006b4c <disk_read>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d004      	beq.n	80071d2 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80071c8:	f04f 33ff 	mov.w	r3, #4294967295
 80071cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d8:	461a      	mov	r2, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}
	return res;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff ff75 	bl	80070e0 <sync_window>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 80ad 	bne.w	800735c <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b03      	cmp	r3, #3
 800720c:	f040 8098 	bne.w	8007340 <sync_fs+0x158>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007216:	795b      	ldrb	r3, [r3, #5]
 8007218:	2b01      	cmp	r3, #1
 800721a:	f040 8091 	bne.w	8007340 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007226:	895b      	ldrh	r3, [r3, #10]
 8007228:	461a      	mov	r2, r3
 800722a:	2100      	movs	r1, #0
 800722c:	f7ff fd0b 	bl	8006c46 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2255      	movs	r2, #85	; 0x55
 8007234:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	22aa      	movs	r2, #170	; 0xaa
 800723c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2252      	movs	r2, #82	; 0x52
 8007244:	701a      	strb	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2252      	movs	r2, #82	; 0x52
 800724a:	705a      	strb	r2, [r3, #1]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2261      	movs	r2, #97	; 0x61
 8007250:	709a      	strb	r2, [r3, #2]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2241      	movs	r2, #65	; 0x41
 8007256:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2272      	movs	r2, #114	; 0x72
 800725c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2272      	movs	r2, #114	; 0x72
 8007264:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2241      	movs	r2, #65	; 0x41
 800726c:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2261      	movs	r2, #97	; 0x61
 8007274:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	b2da      	uxtb	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	b29b      	uxth	r3, r3
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	b29b      	uxth	r3, r3
 8007296:	b2da      	uxtb	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	0e1b      	lsrs	r3, r3, #24
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	b29b      	uxth	r3, r3
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	0c1b      	lsrs	r3, r3, #16
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	0e1b      	lsrs	r3, r3, #24
 8007304:	b2da      	uxtb	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	3301      	adds	r3, #1
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800731c:	6313      	str	r3, [r2, #48]	; 0x30
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007324:	7858      	ldrb	r0, [r3, #1]
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007330:	2301      	movs	r3, #1
 8007332:	f7ff fc2b 	bl	8006b8c <disk_write>
			fs->fsi_flag = 0;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800733c:	2200      	movs	r2, #0
 800733e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007346:	785b      	ldrb	r3, [r3, #1]
 8007348:	2200      	movs	r2, #0
 800734a:	2100      	movs	r1, #0
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff fc3d 	bl	8006bcc <disk_ioctl>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <sync_fs+0x174>
			res = FR_DISK_ERR;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	3b02      	subs	r3, #2
 8007374:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	3b02      	subs	r3, #2
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d301      	bcc.n	800738a <clust2sect+0x24>
 8007386:	2300      	movs	r3, #0
 8007388:	e00c      	b.n	80073a4 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007390:	789b      	ldrb	r3, [r3, #2]
 8007392:	461a      	mov	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	fb03 f202 	mul.w	r2, r3, r2
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	4413      	add	r3, r2
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d906      	bls.n	80073ce <get_fat+0x1e>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d302      	bcc.n	80073d4 <get_fat+0x24>
		val = 1;	/* Internal error */
 80073ce:	2301      	movs	r3, #1
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	e0e4      	b.n	800759e <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	f000 8098 	beq.w	8007518 <get_fat+0x168>
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	f300 80ce 	bgt.w	800758a <get_fat+0x1da>
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d002      	beq.n	80073f8 <get_fat+0x48>
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d05f      	beq.n	80074b6 <get_fat+0x106>
 80073f6:	e0c8      	b.n	800758a <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800740c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007414:	895b      	ldrh	r3, [r3, #10]
 8007416:	4619      	mov	r1, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	fbb3 f3f1 	udiv	r3, r3, r1
 800741e:	4413      	add	r3, r2
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff feae 	bl	8007184 <move_window>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	f040 80b0 	bne.w	8007590 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	60fa      	str	r2, [r7, #12]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800743c:	8952      	ldrh	r2, [r2, #10]
 800743e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007442:	fb01 f202 	mul.w	r2, r1, r2
 8007446:	1a9b      	subs	r3, r3, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	5cd3      	ldrb	r3, [r2, r3]
 800744c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745c:	895b      	ldrh	r3, [r3, #10]
 800745e:	4619      	mov	r1, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	fbb3 f3f1 	udiv	r3, r3, r1
 8007466:	4413      	add	r3, r2
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff fe8a 	bl	8007184 <move_window>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	f040 808e 	bne.w	8007594 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747e:	895b      	ldrh	r3, [r3, #10]
 8007480:	461a      	mov	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	fbb3 f1f2 	udiv	r1, r3, r2
 8007488:	fb01 f202 	mul.w	r2, r1, r2
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	5cd3      	ldrb	r3, [r2, r3]
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	461a      	mov	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4313      	orrs	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <get_fat+0xfc>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	091b      	lsrs	r3, r3, #4
 80074aa:	e002      	b.n	80074b2 <get_fat+0x102>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074b2:	617b      	str	r3, [r7, #20]
			break;
 80074b4:	e073      	b.n	800759e <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c4:	895b      	ldrh	r3, [r3, #10]
 80074c6:	085b      	lsrs	r3, r3, #1
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4619      	mov	r1, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80074d2:	4413      	add	r3, r2
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff fe54 	bl	8007184 <move_window>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d15a      	bne.n	8007598 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074ec:	8952      	ldrh	r2, [r2, #10]
 80074ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80074f2:	fb01 f202 	mul.w	r2, r1, r2
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4413      	add	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	3301      	adds	r3, #1
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	b21a      	sxth	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	b21b      	sxth	r3, r3
 800750e:	4313      	orrs	r3, r2
 8007510:	b21b      	sxth	r3, r3
 8007512:	b29b      	uxth	r3, r3
 8007514:	617b      	str	r3, [r7, #20]
			break;
 8007516:	e042      	b.n	800759e <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007526:	895b      	ldrh	r3, [r3, #10]
 8007528:	089b      	lsrs	r3, r3, #2
 800752a:	b29b      	uxth	r3, r3
 800752c:	4619      	mov	r1, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	fbb3 f3f1 	udiv	r3, r3, r1
 8007534:	4413      	add	r3, r2
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff fe23 	bl	8007184 <move_window>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d12b      	bne.n	800759c <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800754e:	8952      	ldrh	r2, [r2, #10]
 8007550:	fbb3 f1f2 	udiv	r1, r3, r2
 8007554:	fb01 f202 	mul.w	r2, r1, r2
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	3303      	adds	r3, #3
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	061a      	lsls	r2, r3, #24
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3302      	adds	r3, #2
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	041b      	lsls	r3, r3, #16
 8007570:	4313      	orrs	r3, r2
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	3201      	adds	r2, #1
 8007576:	7812      	ldrb	r2, [r2, #0]
 8007578:	0212      	lsls	r2, r2, #8
 800757a:	4313      	orrs	r3, r2
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	7812      	ldrb	r2, [r2, #0]
 8007580:	4313      	orrs	r3, r2
 8007582:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007586:	617b      	str	r3, [r7, #20]
			break;
 8007588:	e009      	b.n	800759e <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 800758a:	2301      	movs	r3, #1
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e006      	b.n	800759e <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007590:	bf00      	nop
 8007592:	e004      	b.n	800759e <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800759c:	bf00      	nop
		}
	}

	return val;
 800759e:	697b      	ldr	r3, [r7, #20]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d906      	bls.n	80075c8 <put_fat+0x20>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d302      	bcc.n	80075ce <put_fat+0x26>
		res = FR_INT_ERR;
 80075c8:	2302      	movs	r3, #2
 80075ca:	77fb      	strb	r3, [r7, #31]
 80075cc:	e13a      	b.n	8007844 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	f000 80d0 	beq.w	800777c <put_fat+0x1d4>
 80075dc:	2b03      	cmp	r3, #3
 80075de:	f300 8127 	bgt.w	8007830 <put_fat+0x288>
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d003      	beq.n	80075ee <put_fat+0x46>
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	f000 808f 	beq.w	800770a <put_fat+0x162>
 80075ec:	e120      	b.n	8007830 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	085b      	lsrs	r3, r3, #1
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4413      	add	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	895b      	ldrh	r3, [r3, #10]
 800760c:	4619      	mov	r1, r3
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	fbb3 f3f1 	udiv	r3, r3, r1
 8007614:	4413      	add	r3, r2
 8007616:	4619      	mov	r1, r3
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff fdb3 	bl	8007184 <move_window>
 800761e:	4603      	mov	r3, r0
 8007620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007622:	7ffb      	ldrb	r3, [r7, #31]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8106 	bne.w	8007836 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	617a      	str	r2, [r7, #20]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007636:	8952      	ldrh	r2, [r2, #10]
 8007638:	fbb3 f1f2 	udiv	r1, r3, r2
 800763c:	fb01 f202 	mul.w	r2, r1, r2
 8007640:	1a9b      	subs	r3, r3, r2
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <put_fat+0xc6>
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b25b      	sxtb	r3, r3
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	b25a      	sxtb	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	011b      	lsls	r3, r3, #4
 8007664:	b25b      	sxtb	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b25b      	sxtb	r3, r3
 800766a:	b2db      	uxtb	r3, r3
 800766c:	e001      	b.n	8007672 <put_fat+0xca>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767c:	2201      	movs	r2, #1
 800767e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768e:	895b      	ldrh	r3, [r3, #10]
 8007690:	4619      	mov	r1, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	fbb3 f3f1 	udiv	r3, r3, r1
 8007698:	4413      	add	r3, r2
 800769a:	4619      	mov	r1, r3
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff fd71 	bl	8007184 <move_window>
 80076a2:	4603      	mov	r3, r0
 80076a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076a6:	7ffb      	ldrb	r3, [r7, #31]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f040 80c6 	bne.w	800783a <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b4:	895b      	ldrh	r3, [r3, #10]
 80076b6:	461a      	mov	r2, r3
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80076be:	fb01 f202 	mul.w	r2, r1, r2
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <put_fat+0x134>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	091b      	lsrs	r3, r3, #4
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	e00e      	b.n	80076fa <put_fat+0x152>
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	b25b      	sxtb	r3, r3
 80076e2:	f023 030f 	bic.w	r3, r3, #15
 80076e6:	b25a      	sxtb	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	0a1b      	lsrs	r3, r3, #8
 80076ec:	b25b      	sxtb	r3, r3
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	b25b      	sxtb	r3, r3
 80076f4:	4313      	orrs	r3, r2
 80076f6:	b25b      	sxtb	r3, r3
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007704:	2201      	movs	r2, #1
 8007706:	711a      	strb	r2, [r3, #4]
			break;
 8007708:	e09c      	b.n	8007844 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007718:	895b      	ldrh	r3, [r3, #10]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	b29b      	uxth	r3, r3
 800771e:	4619      	mov	r1, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	fbb3 f3f1 	udiv	r3, r3, r1
 8007726:	4413      	add	r3, r2
 8007728:	4619      	mov	r1, r3
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fd2a 	bl	8007184 <move_window>
 8007730:	4603      	mov	r3, r0
 8007732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007734:	7ffb      	ldrb	r3, [r7, #31]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f040 8081 	bne.w	800783e <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007746:	8952      	ldrh	r2, [r2, #10]
 8007748:	fbb3 f1f2 	udiv	r1, r3, r2
 800774c:	fb01 f202 	mul.w	r2, r1, r2
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4413      	add	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	b2da      	uxtb	r2, r3
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	b29b      	uxth	r3, r3
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	b29a      	uxth	r2, r3
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	3301      	adds	r3, #1
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007776:	2201      	movs	r2, #1
 8007778:	711a      	strb	r2, [r3, #4]
			break;
 800777a:	e063      	b.n	8007844 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800778a:	895b      	ldrh	r3, [r3, #10]
 800778c:	089b      	lsrs	r3, r3, #2
 800778e:	b29b      	uxth	r3, r3
 8007790:	4619      	mov	r1, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	fbb3 f3f1 	udiv	r3, r3, r1
 8007798:	4413      	add	r3, r2
 800779a:	4619      	mov	r1, r3
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fcf1 	bl	8007184 <move_window>
 80077a2:	4603      	mov	r3, r0
 80077a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077a6:	7ffb      	ldrb	r3, [r7, #31]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d14a      	bne.n	8007842 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077b6:	8952      	ldrh	r2, [r2, #10]
 80077b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80077bc:	fb01 f202 	mul.w	r2, r1, r2
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4413      	add	r3, r2
 80077c6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	3303      	adds	r3, #3
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	061a      	lsls	r2, r3, #24
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	3302      	adds	r3, #2
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	4313      	orrs	r3, r2
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	3201      	adds	r2, #1
 80077de:	7812      	ldrb	r2, [r2, #0]
 80077e0:	0212      	lsls	r2, r2, #8
 80077e2:	4313      	orrs	r3, r2
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	7812      	ldrb	r2, [r2, #0]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	0a1b      	lsrs	r3, r3, #8
 8007802:	b29a      	uxth	r2, r3
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	3301      	adds	r3, #1
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	0c1a      	lsrs	r2, r3, #16
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	3302      	adds	r3, #2
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	0e1a      	lsrs	r2, r3, #24
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	3303      	adds	r3, #3
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782a:	2201      	movs	r2, #1
 800782c:	711a      	strb	r2, [r3, #4]
			break;
 800782e:	e009      	b.n	8007844 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8007830:	2302      	movs	r3, #2
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e006      	b.n	8007844 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007836:	bf00      	nop
 8007838:	e004      	b.n	8007844 <put_fat+0x29c>
			if (res != FR_OK) break;
 800783a:	bf00      	nop
 800783c:	e002      	b.n	8007844 <put_fat+0x29c>
			if (res != FR_OK) break;
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007842:	bf00      	nop
		}
	}

	return res;
 8007844:	7ffb      	ldrb	r3, [r7, #31]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d906      	bls.n	800786c <remove_chain+0x1e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d302      	bcc.n	8007872 <remove_chain+0x24>
		res = FR_INT_ERR;
 800786c:	2302      	movs	r3, #2
 800786e:	73fb      	strb	r3, [r7, #15]
 8007870:	e049      	b.n	8007906 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007876:	e03b      	b.n	80078f0 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff fd98 	bl	80073b0 <get_fat>
 8007880:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d03b      	beq.n	8007900 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d102      	bne.n	8007894 <remove_chain+0x46>
 800788e:	2302      	movs	r3, #2
 8007890:	73fb      	strb	r3, [r7, #15]
 8007892:	e038      	b.n	8007906 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d102      	bne.n	80078a2 <remove_chain+0x54>
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
 80078a0:	e031      	b.n	8007906 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80078a2:	2200      	movs	r2, #0
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff fe7e 	bl	80075a8 <put_fat>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d126      	bne.n	8007904 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c2:	d013      	beq.n	80078ec <remove_chain+0x9e>
				fs->free_clust++;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	3301      	adds	r3, #1
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078d4:	6153      	str	r3, [r2, #20]
				fs->fsi_flag |= 1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078dc:	795b      	ldrb	r3, [r3, #5]
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ea:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d3bc      	bcc.n	8007878 <remove_chain+0x2a>
 80078fe:	e002      	b.n	8007906 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8007900:	bf00      	nop
 8007902:	e000      	b.n	8007906 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8007904:	bf00      	nop
		}
	}

	return res;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d111      	bne.n	8007944 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d006      	beq.n	800793e <create_chain+0x2e>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	429a      	cmp	r2, r3
 800793c:	d31d      	bcc.n	800797a <create_chain+0x6a>
 800793e:	2301      	movs	r3, #1
 8007940:	613b      	str	r3, [r7, #16]
 8007942:	e01a      	b.n	800797a <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fd32 	bl	80073b0 <get_fat>
 800794c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d801      	bhi.n	8007958 <create_chain+0x48>
 8007954:	2301      	movs	r3, #1
 8007956:	e07f      	b.n	8007a58 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	d101      	bne.n	8007964 <create_chain+0x54>
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	e079      	b.n	8007a58 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	429a      	cmp	r2, r3
 8007970:	d201      	bcs.n	8007976 <create_chain+0x66>
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	e070      	b.n	8007a58 <create_chain+0x148>
		scl = clst;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	3301      	adds	r3, #1
 8007982:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	429a      	cmp	r2, r3
 8007990:	d307      	bcc.n	80079a2 <create_chain+0x92>
			ncl = 2;
 8007992:	2302      	movs	r3, #2
 8007994:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	429a      	cmp	r2, r3
 800799c:	d901      	bls.n	80079a2 <create_chain+0x92>
 800799e:	2300      	movs	r3, #0
 80079a0:	e05a      	b.n	8007a58 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80079a2:	6979      	ldr	r1, [r7, #20]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff fd03 	bl	80073b0 <get_fat>
 80079aa:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00e      	beq.n	80079d0 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d002      	beq.n	80079c0 <create_chain+0xb0>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <create_chain+0xb4>
			return cs;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	e049      	b.n	8007a58 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d1d8      	bne.n	800797e <create_chain+0x6e>
 80079cc:	2300      	movs	r3, #0
 80079ce:	e043      	b.n	8007a58 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80079d0:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80079d2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80079d6:	6979      	ldr	r1, [r7, #20]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff fde5 	bl	80075a8 <put_fat>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d109      	bne.n	80079fc <create_chain+0xec>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d006      	beq.n	80079fc <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fdd8 	bl	80075a8 <put_fat>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d121      	bne.n	8007a46 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a08:	461a      	mov	r2, r3
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	6113      	str	r3, [r2, #16]
		if (fs->free_clust != 0xFFFFFFFF) {
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d01c      	beq.n	8007a56 <create_chain+0x146>
			fs->free_clust--;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a2c:	6153      	str	r3, [r2, #20]
			fs->fsi_flag |= 1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a34:	795b      	ldrb	r3, [r3, #5]
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a42:	715a      	strb	r2, [r3, #5]
 8007a44:	e007      	b.n	8007a56 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d102      	bne.n	8007a52 <create_chain+0x142>
 8007a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a50:	e000      	b.n	8007a54 <create_chain+0x144>
 8007a52:	2301      	movs	r3, #1
 8007a54:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007a56:	697b      	ldr	r3, [r7, #20]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3718      	adds	r7, #24
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	3304      	adds	r3, #4
 8007a74:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a82:	895b      	ldrh	r3, [r3, #10]
 8007a84:	461a      	mov	r2, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a98:	7892      	ldrb	r2, [r2, #2]
 8007a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	613a      	str	r2, [r7, #16]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <clmt_clust+0x54>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	e010      	b.n	8007ad6 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d307      	bcc.n	8007acc <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	617b      	str	r3, [r7, #20]
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007aca:	e7e9      	b.n	8007aa0 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8007acc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	4413      	add	r3, r2
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b086      	sub	sp, #24
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af6:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d009      	beq.n	8007b1c <dir_sdi+0x3a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d301      	bcc.n	8007b20 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e0aa      	b.n	8007c76 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d110      	bne.n	8007b48 <dir_sdi+0x66>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d107      	bne.n	8007b48 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d115      	bne.n	8007b7a <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5a:	891b      	ldrh	r3, [r3, #8]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d301      	bcc.n	8007b68 <dir_sdi+0x86>
			return FR_INT_ERR;
 8007b64:	2302      	movs	r3, #2
 8007b66:	e086      	b.n	8007c76 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	e043      	b.n	8007c02 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b86:	895b      	ldrh	r3, [r3, #10]
 8007b88:	095b      	lsrs	r3, r3, #5
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b9a:	789b      	ldrb	r3, [r3, #2]
 8007b9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ba0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007ba2:	e021      	b.n	8007be8 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6979      	ldr	r1, [r7, #20]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff fbfe 	bl	80073b0 <get_fat>
 8007bb4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbc:	d101      	bne.n	8007bc2 <dir_sdi+0xe0>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e059      	b.n	8007c76 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d909      	bls.n	8007bdc <dir_sdi+0xfa>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d301      	bcc.n	8007be0 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e04a      	b.n	8007c76 <dir_sdi+0x194>
			idx -= ic;
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d2d9      	bcs.n	8007ba4 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6979      	ldr	r1, [r7, #20]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff fbb3 	bl	8007366 <clust2sect>
 8007c00:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c08:	461a      	mov	r2, r3
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <dir_sdi+0x136>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e02e      	b.n	8007c76 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c24:	895b      	ldrh	r3, [r3, #10]
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	4413      	add	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c3c:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4618      	mov	r0, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c54:	895b      	ldrh	r3, [r3, #10]
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c62:	fb01 f202 	mul.w	r2, r1, r2
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	015b      	lsls	r3, r3, #5
 8007c6a:	4403      	add	r3, r0
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c72:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c7e:	b590      	push	{r4, r7, lr}
 8007c80:	b087      	sub	sp, #28
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8e:	88db      	ldrh	r3, [r3, #6]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d005      	beq.n	8007ca8 <dir_next+0x2a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <dir_next+0x2e>
		return FR_NO_FILE;
 8007ca8:	2304      	movs	r3, #4
 8007caa:	e12e      	b.n	8007f0a <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb8:	895b      	ldrh	r3, [r3, #10]
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cc6:	fb01 f202 	mul.w	r2, r1, r2
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 80fa 	bne.w	8007ec6 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ce2:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10d      	bne.n	8007d0c <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfc:	891b      	ldrh	r3, [r3, #8]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4293      	cmp	r3, r2
 8007d04:	f0c0 80df 	bcc.w	8007ec6 <dir_next+0x248>
				return FR_NO_FILE;
 8007d08:	2304      	movs	r3, #4
 8007d0a:	e0fe      	b.n	8007f0a <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d18:	895b      	ldrh	r3, [r3, #10]
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d32:	7892      	ldrb	r2, [r2, #2]
 8007d34:	3a01      	subs	r2, #1
 8007d36:	4013      	ands	r3, r2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f040 80c4 	bne.w	8007ec6 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4610      	mov	r0, r2
 8007d52:	f7ff fb2d 	bl	80073b0 <get_fat>
 8007d56:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d801      	bhi.n	8007d62 <dir_next+0xe4>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e0d3      	b.n	8007f0a <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d101      	bne.n	8007d6e <dir_next+0xf0>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e0cd      	b.n	8007f0a <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	f0c0 808e 	bcc.w	8007ea0 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <dir_next+0x110>
 8007d8a:	2304      	movs	r3, #4
 8007d8c:	e0bd      	b.n	8007f0a <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4610      	mov	r0, r2
 8007da2:	f7ff fdb5 	bl	8007910 <create_chain>
 8007da6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <dir_next+0x134>
 8007dae:	2307      	movs	r3, #7
 8007db0:	e0ab      	b.n	8007f0a <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d101      	bne.n	8007dbc <dir_next+0x13e>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e0a6      	b.n	8007f0a <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d101      	bne.n	8007dc8 <dir_next+0x14a>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e0a0      	b.n	8007f0a <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff f985 	bl	80070e0 <sync_window>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <dir_next+0x162>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e094      	b.n	8007f0a <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df6:	895b      	ldrh	r3, [r3, #10]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f7fe ff23 	bl	8006c46 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0e:	681c      	ldr	r4, [r3, #0]
 8007e10:	6979      	ldr	r1, [r7, #20]
 8007e12:	4610      	mov	r0, r2
 8007e14:	f7ff faa7 	bl	8007366 <clust2sect>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8007e1e:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007e20:	2300      	movs	r3, #0
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	e021      	b.n	8007e6a <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e32:	2201      	movs	r2, #1
 8007e34:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff f94e 	bl	80070e0 <sync_window>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <dir_next+0x1d0>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e05d      	b.n	8007f0a <dir_next+0x28c>
						dp->fs->winsect++;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8007e5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e5c:	3201      	adds	r2, #1
 8007e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e62:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	3301      	adds	r3, #1
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e76:	789b      	ldrb	r3, [r3, #2]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d3d2      	bcc.n	8007e26 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	1acb      	subs	r3, r1, r3
 8007e9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007e9e:	6313      	str	r3, [r2, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6979      	ldr	r1, [r7, #20]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fa55 	bl	8007366 <clust2sect>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec4:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed0:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee8:	895b      	ldrh	r3, [r3, #10]
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	461a      	mov	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ef6:	fb01 f202 	mul.w	r2, r1, r2
 8007efa:	1a9b      	subs	r3, r3, r2
 8007efc:	015b      	lsls	r3, r3, #5
 8007efe:	4403      	add	r3, r0
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f06:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd90      	pop	{r4, r7, pc}

08007f12 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff fddf 	bl	8007ae2 <dir_sdi>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d135      	bne.n	8007f9a <dir_alloc+0x88>
		n = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f7ff f91d 	bl	8007184 <move_window>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d121      	bne.n	8007f98 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2be5      	cmp	r3, #229	; 0xe5
 8007f60:	d006      	beq.n	8007f70 <dir_alloc+0x5e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d107      	bne.n	8007f80 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60bb      	str	r3, [r7, #8]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d102      	bne.n	8007f84 <dir_alloc+0x72>
 8007f7e:	e00c      	b.n	8007f9a <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007f80:	2300      	movs	r3, #0
 8007f82:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007f84:	2101      	movs	r1, #1
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff fe79 	bl	8007c7e <dir_next>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0cd      	beq.n	8007f32 <dir_alloc+0x20>
 8007f96:	e000      	b.n	8007f9a <dir_alloc+0x88>
			if (res != FR_OK) break;
 8007f98:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d101      	bne.n	8007fa4 <dir_alloc+0x92>
 8007fa0:	2307      	movs	r3, #7
 8007fa2:	73fb      	strb	r3, [r7, #15]
	return res;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	331b      	adds	r3, #27
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	b21a      	sxth	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	331a      	adds	r3, #26
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b21b      	sxth	r3, r3
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	b21b      	sxth	r3, r3
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d10f      	bne.n	8007ffe <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	3315      	adds	r3, #21
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	b21a      	sxth	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	3314      	adds	r3, #20
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b21b      	sxth	r3, r3
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	041b      	lsls	r3, r3, #16
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60fb      	str	r3, [r7, #12]

	return cl;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	331a      	adds	r3, #26
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	b29b      	uxth	r3, r3
 8008024:	0a1b      	lsrs	r3, r3, #8
 8008026:	b29a      	uxth	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	331b      	adds	r3, #27
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	0c1a      	lsrs	r2, r3, #16
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3314      	adds	r3, #20
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	701a      	strb	r2, [r3, #0]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	b29b      	uxth	r3, r3
 8008042:	0a1b      	lsrs	r3, r3, #8
 8008044:	b29a      	uxth	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	3315      	adds	r3, #21
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008062:	2100      	movs	r1, #0
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff fd3c 	bl	8007ae2 <dir_sdi>
 800806a:	4603      	mov	r3, r0
 800806c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <dir_find+0x1e>
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	e03f      	b.n	80080f8 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f7ff f87a 	bl	8007184 <move_window>
 8008090:	4603      	mov	r3, r0
 8008092:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d12a      	bne.n	80080f0 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <dir_find+0x5c>
 80080b0:	2304      	movs	r3, #4
 80080b2:	75fb      	strb	r3, [r7, #23]
 80080b4:	e01f      	b.n	80080f6 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	330b      	adds	r3, #11
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <dir_find+0x82>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	220b      	movs	r2, #11
 80080ce:	4619      	mov	r1, r3
 80080d0:	6938      	ldr	r0, [r7, #16]
 80080d2:	f7fe fdd3 	bl	8006c7c <mem_cmp>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fdcd 	bl	8007c7e <dir_next>
 80080e4:	4603      	mov	r3, r0
 80080e6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0c4      	beq.n	8008078 <dir_find+0x1e>
 80080ee:	e002      	b.n	80080f6 <dir_find+0x9c>
		if (res != FR_OK) break;
 80080f0:	bf00      	nop
 80080f2:	e000      	b.n	80080f6 <dir_find+0x9c>
			break;
 80080f4:	bf00      	nop

	return res;
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008108:	2101      	movs	r1, #1
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f7ff ff01 	bl	8007f12 <dir_alloc>
 8008110:	4603      	mov	r3, r0
 8008112:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d12d      	bne.n	8008176 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	4619      	mov	r1, r3
 800812c:	4610      	mov	r0, r2
 800812e:	f7ff f829 	bl	8007184 <move_window>
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d11c      	bne.n	8008176 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	2220      	movs	r2, #32
 8008146:	2100      	movs	r1, #0
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fd7c 	bl	8006c46 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008154:	6958      	ldr	r0, [r3, #20]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	220b      	movs	r2, #11
 8008160:	4619      	mov	r1, r3
 8008162:	f7fe fd51 	bl	8006c08 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008172:	2201      	movs	r2, #1
 8008174:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e002      	b.n	8008198 <create_name+0x18>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b2f      	cmp	r3, #47	; 0x2f
 800819e:	d0f8      	beq.n	8008192 <create_name+0x12>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	2b5c      	cmp	r3, #92	; 0x5c
 80081a6:	d0f4      	beq.n	8008192 <create_name+0x12>
	sfn = dp->fn;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80081b2:	220b      	movs	r2, #11
 80081b4:	2120      	movs	r1, #32
 80081b6:	68b8      	ldr	r0, [r7, #8]
 80081b8:	f7fe fd45 	bl	8006c46 <mem_set>
	si = i = b = 0; ni = 8;
 80081bc:	2300      	movs	r3, #0
 80081be:	77fb      	strb	r3, [r7, #31]
 80081c0:	2300      	movs	r3, #0
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	2308      	movs	r3, #8
 80081ca:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	617a      	str	r2, [r7, #20]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4413      	add	r3, r2
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80081da:	7fbb      	ldrb	r3, [r7, #30]
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d953      	bls.n	8008288 <create_name+0x108>
 80081e0:	7fbb      	ldrb	r3, [r7, #30]
 80081e2:	2b2f      	cmp	r3, #47	; 0x2f
 80081e4:	d050      	beq.n	8008288 <create_name+0x108>
 80081e6:	7fbb      	ldrb	r3, [r7, #30]
 80081e8:	2b5c      	cmp	r3, #92	; 0x5c
 80081ea:	d04d      	beq.n	8008288 <create_name+0x108>
		if (c == '.' || i >= ni) {
 80081ec:	7fbb      	ldrb	r3, [r7, #30]
 80081ee:	2b2e      	cmp	r3, #46	; 0x2e
 80081f0:	d003      	beq.n	80081fa <create_name+0x7a>
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d30f      	bcc.n	800821a <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d102      	bne.n	8008206 <create_name+0x86>
 8008200:	7fbb      	ldrb	r3, [r7, #30]
 8008202:	2b2e      	cmp	r3, #46	; 0x2e
 8008204:	d001      	beq.n	800820a <create_name+0x8a>
 8008206:	2306      	movs	r3, #6
 8008208:	e073      	b.n	80082f2 <create_name+0x172>
			i = 8; ni = 11;
 800820a:	2308      	movs	r3, #8
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	230b      	movs	r3, #11
 8008210:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8008212:	7ffb      	ldrb	r3, [r7, #31]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	77fb      	strb	r3, [r7, #31]
 8008218:	e035      	b.n	8008286 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 800821a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800821e:	2b00      	cmp	r3, #0
 8008220:	da08      	bge.n	8008234 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 8008222:	7ffb      	ldrb	r3, [r7, #31]
 8008224:	f043 0303 	orr.w	r3, r3, #3
 8008228:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800822a:	7fbb      	ldrb	r3, [r7, #30]
 800822c:	3b80      	subs	r3, #128	; 0x80
 800822e:	4a33      	ldr	r2, [pc, #204]	; (80082fc <create_name+0x17c>)
 8008230:	5cd3      	ldrb	r3, [r2, r3]
 8008232:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8008234:	7fbb      	ldrb	r3, [r7, #30]
 8008236:	4619      	mov	r1, r3
 8008238:	4831      	ldr	r0, [pc, #196]	; (8008300 <create_name+0x180>)
 800823a:	f7fe fd46 	bl	8006cca <chk_chr>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <create_name+0xc8>
				return FR_INVALID_NAME;
 8008244:	2306      	movs	r3, #6
 8008246:	e054      	b.n	80082f2 <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8008248:	7fbb      	ldrb	r3, [r7, #30]
 800824a:	2b40      	cmp	r3, #64	; 0x40
 800824c:	d907      	bls.n	800825e <create_name+0xde>
 800824e:	7fbb      	ldrb	r3, [r7, #30]
 8008250:	2b5a      	cmp	r3, #90	; 0x5a
 8008252:	d804      	bhi.n	800825e <create_name+0xde>
				b |= 2;
 8008254:	7ffb      	ldrb	r3, [r7, #31]
 8008256:	f043 0302 	orr.w	r3, r3, #2
 800825a:	77fb      	strb	r3, [r7, #31]
 800825c:	e00c      	b.n	8008278 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800825e:	7fbb      	ldrb	r3, [r7, #30]
 8008260:	2b60      	cmp	r3, #96	; 0x60
 8008262:	d909      	bls.n	8008278 <create_name+0xf8>
 8008264:	7fbb      	ldrb	r3, [r7, #30]
 8008266:	2b7a      	cmp	r3, #122	; 0x7a
 8008268:	d806      	bhi.n	8008278 <create_name+0xf8>
					b |= 1; c -= 0x20;
 800826a:	7ffb      	ldrb	r3, [r7, #31]
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	77fb      	strb	r3, [r7, #31]
 8008272:	7fbb      	ldrb	r3, [r7, #30]
 8008274:	3b20      	subs	r3, #32
 8008276:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	613a      	str	r2, [r7, #16]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	4413      	add	r3, r2
 8008282:	7fba      	ldrb	r2, [r7, #30]
 8008284:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008286:	e7a1      	b.n	80081cc <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	441a      	add	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008292:	7fbb      	ldrb	r3, [r7, #30]
 8008294:	2b20      	cmp	r3, #32
 8008296:	d801      	bhi.n	800829c <create_name+0x11c>
 8008298:	2304      	movs	r3, #4
 800829a:	e000      	b.n	800829e <create_name+0x11e>
 800829c:	2300      	movs	r3, #0
 800829e:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <create_name+0x12a>
 80082a6:	2306      	movs	r3, #6
 80082a8:	e023      	b.n	80082f2 <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2be5      	cmp	r3, #229	; 0xe5
 80082b0:	d102      	bne.n	80082b8 <create_name+0x138>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2205      	movs	r2, #5
 80082b6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b08      	cmp	r3, #8
 80082bc:	d102      	bne.n	80082c4 <create_name+0x144>
 80082be:	7ffb      	ldrb	r3, [r7, #31]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80082c4:	7ffb      	ldrb	r3, [r7, #31]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d103      	bne.n	80082d6 <create_name+0x156>
 80082ce:	7fbb      	ldrb	r3, [r7, #30]
 80082d0:	f043 0310 	orr.w	r3, r3, #16
 80082d4:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80082d6:	7ffb      	ldrb	r3, [r7, #31]
 80082d8:	f003 030c 	and.w	r3, r3, #12
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d103      	bne.n	80082e8 <create_name+0x168>
 80082e0:	7fbb      	ldrb	r3, [r7, #30]
 80082e2:	f043 0308 	orr.w	r3, r3, #8
 80082e6:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	330b      	adds	r3, #11
 80082ec:	7fba      	ldrb	r2, [r7, #30]
 80082ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80082f0:	2300      	movs	r3, #0
#endif
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3720      	adds	r7, #32
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	0800df44 	.word	0x0800df44
 8008300:	0800dec0 	.word	0x0800dec0

08008304 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b2f      	cmp	r3, #47	; 0x2f
 8008314:	d003      	beq.n	800831e <follow_path+0x1a>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b5c      	cmp	r3, #92	; 0x5c
 800831c:	d102      	bne.n	8008324 <follow_path+0x20>
		path++;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	3301      	adds	r3, #1
 8008322:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800832a:	461a      	mov	r2, r3
 800832c:	2300      	movs	r3, #0
 800832e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b1f      	cmp	r3, #31
 8008336:	d80c      	bhi.n	8008352 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8008338:	2100      	movs	r1, #0
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff fbd1 	bl	8007ae2 <dir_sdi>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834a:	461a      	mov	r2, r3
 800834c:	2300      	movs	r3, #0
 800834e:	6153      	str	r3, [r2, #20]
 8008350:	e049      	b.n	80083e6 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008352:	463b      	mov	r3, r7
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff ff12 	bl	8008180 <create_name>
 800835c:	4603      	mov	r3, r0
 800835e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d13a      	bne.n	80083dc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fe77 	bl	800805a <dir_find>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	7adb      	ldrb	r3, [r3, #11]
 800837a:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	2b04      	cmp	r3, #4
 8008386:	d12b      	bne.n	80083e0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	f003 0304 	and.w	r3, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	d126      	bne.n	80083e0 <follow_path+0xdc>
 8008392:	2305      	movs	r3, #5
 8008394:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008396:	e023      	b.n	80083e0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	f003 0304 	and.w	r3, r3, #4
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d120      	bne.n	80083e4 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	330b      	adds	r3, #11
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	f003 0310 	and.w	r3, r3, #16
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d102      	bne.n	80083c0 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80083ba:	2305      	movs	r3, #5
 80083bc:	73fb      	strb	r3, [r7, #15]
 80083be:	e012      	b.n	80083e6 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff fdef 	bl	8007fae <ld_clust>
 80083d0:	4602      	mov	r2, r0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80083da:	e7ba      	b.n	8008352 <follow_path+0x4e>
			if (res != FR_OK) break;
 80083dc:	bf00      	nop
 80083de:	e002      	b.n	80083e6 <follow_path+0xe2>
				break;
 80083e0:	bf00      	nop
 80083e2:	e000      	b.n	80083e6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083e4:	bf00      	nop
		}
	}

	return res;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295
 80083fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d031      	beq.n	800846a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e002      	b.n	8008414 <get_ldnumber+0x24>
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	3301      	adds	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b20      	cmp	r3, #32
 800841a:	d903      	bls.n	8008424 <get_ldnumber+0x34>
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b3a      	cmp	r3, #58	; 0x3a
 8008422:	d1f4      	bne.n	800840e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b3a      	cmp	r3, #58	; 0x3a
 800842a:	d11c      	bne.n	8008466 <get_ldnumber+0x76>
			tp = *path;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	60fa      	str	r2, [r7, #12]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	3b30      	subs	r3, #48	; 0x30
 800843c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b09      	cmp	r3, #9
 8008442:	d80e      	bhi.n	8008462 <get_ldnumber+0x72>
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	429a      	cmp	r2, r3
 800844a:	d10a      	bne.n	8008462 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d107      	bne.n	8008462 <get_ldnumber+0x72>
					vol = (int)i;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	3301      	adds	r3, #1
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	e002      	b.n	800846c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008466:	2300      	movs	r3, #0
 8008468:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800846a:	693b      	ldr	r3, [r7, #16]
}
 800846c:	4618      	mov	r0, r3
 800846e:	371c      	adds	r7, #28
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008488:	2200      	movs	r2, #0
 800848a:	711a      	strb	r2, [r3, #4]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008492:	461a      	mov	r2, r3
 8008494:	f04f 33ff 	mov.w	r3, #4294967295
 8008498:	6313      	str	r3, [r2, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fe fe71 	bl	8007184 <move_window>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <check_fs+0x34>
		return 3;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e04a      	b.n	8008542 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084b2:	3301      	adds	r3, #1
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	b21a      	sxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80084c0:	b21b      	sxth	r3, r3
 80084c2:	4313      	orrs	r3, r2
 80084c4:	b21b      	sxth	r3, r3
 80084c6:	4a21      	ldr	r2, [pc, #132]	; (800854c <check_fs+0xd4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d001      	beq.n	80084d0 <check_fs+0x58>
		return 2;
 80084cc:	2302      	movs	r3, #2
 80084ce:	e038      	b.n	8008542 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3336      	adds	r3, #54	; 0x36
 80084d4:	3303      	adds	r3, #3
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	061a      	lsls	r2, r3, #24
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3336      	adds	r3, #54	; 0x36
 80084de:	3302      	adds	r3, #2
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	041b      	lsls	r3, r3, #16
 80084e4:	4313      	orrs	r3, r2
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	3236      	adds	r2, #54	; 0x36
 80084ea:	3201      	adds	r2, #1
 80084ec:	7812      	ldrb	r2, [r2, #0]
 80084ee:	0212      	lsls	r2, r2, #8
 80084f0:	4313      	orrs	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80084f8:	4313      	orrs	r3, r2
 80084fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084fe:	4a14      	ldr	r2, [pc, #80]	; (8008550 <check_fs+0xd8>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d101      	bne.n	8008508 <check_fs+0x90>
		return 0;
 8008504:	2300      	movs	r3, #0
 8008506:	e01c      	b.n	8008542 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3352      	adds	r3, #82	; 0x52
 800850c:	3303      	adds	r3, #3
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	061a      	lsls	r2, r3, #24
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3352      	adds	r3, #82	; 0x52
 8008516:	3302      	adds	r3, #2
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	041b      	lsls	r3, r3, #16
 800851c:	4313      	orrs	r3, r2
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	3252      	adds	r2, #82	; 0x52
 8008522:	3201      	adds	r2, #1
 8008524:	7812      	ldrb	r2, [r2, #0]
 8008526:	0212      	lsls	r2, r2, #8
 8008528:	4313      	orrs	r3, r2
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008530:	4313      	orrs	r3, r2
 8008532:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008536:	4a06      	ldr	r2, [pc, #24]	; (8008550 <check_fs+0xd8>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d101      	bne.n	8008540 <check_fs+0xc8>
		return 0;
 800853c:	2300      	movs	r3, #0
 800853e:	e000      	b.n	8008542 <check_fs+0xca>

	return 1;
 8008540:	2301      	movs	r3, #1
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	ffffaa55 	.word	0xffffaa55
 8008550:	00544146 	.word	0x00544146

08008554 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b096      	sub	sp, #88	; 0x58
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008568:	68b8      	ldr	r0, [r7, #8]
 800856a:	f7ff ff41 	bl	80083f0 <get_ldnumber>
 800856e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008572:	2b00      	cmp	r3, #0
 8008574:	da01      	bge.n	800857a <find_volume+0x26>
 8008576:	230b      	movs	r3, #11
 8008578:	e319      	b.n	8008bae <find_volume+0x65a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800857a:	4a9c      	ldr	r2, [pc, #624]	; (80087ec <find_volume+0x298>)
 800857c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008582:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <find_volume+0x3a>
 800858a:	230c      	movs	r3, #12
 800858c:	e30f      	b.n	8008bae <find_volume+0x65a>

	ENTER_FF(fs);						/* Lock the volume */
 800858e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008590:	f7fe fbb6 	bl	8006d00 <lock_fs>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <find_volume+0x4a>
 800859a:	230f      	movs	r3, #15
 800859c:	e307      	b.n	8008bae <find_volume+0x65a>
	*rfs = fs;							/* Return pointer to the file system object */
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085a2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01c      	beq.n	80085ea <find_volume+0x96>
		stat = disk_status(fs->drv);
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe fa87 	bl	8006acc <disk_status>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80085c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10c      	bne.n	80085ea <find_volume+0x96>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <find_volume+0x92>
 80085d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80085e2:	230a      	movs	r3, #10
 80085e4:	e2e3      	b.n	8008bae <find_volume+0x65a>
			return FR_OK;				/* The file system object is valid */
 80085e6:	2300      	movs	r3, #0
 80085e8:	e2e1      	b.n	8008bae <find_volume+0x65a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80085f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	4618      	mov	r0, r3
 800860a:	f7fe fa79 	bl	8006b00 <disk_initialize>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <find_volume+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008620:	2303      	movs	r3, #3
 8008622:	e2c4      	b.n	8008bae <find_volume+0x65a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <find_volume+0xe6>
 800862a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 8008636:	230a      	movs	r3, #10
 8008638:	e2b9      	b.n	8008bae <find_volume+0x65a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008640:	7858      	ldrb	r0, [r3, #1]
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008648:	330a      	adds	r3, #10
 800864a:	461a      	mov	r2, r3
 800864c:	2102      	movs	r1, #2
 800864e:	f7fe fabd 	bl	8006bcc <disk_ioctl>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10d      	bne.n	8008674 <find_volume+0x120>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800865e:	895b      	ldrh	r3, [r3, #10]
 8008660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008664:	d306      	bcc.n	8008674 <find_volume+0x120>
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800866c:	895b      	ldrh	r3, [r3, #10]
 800866e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008672:	d901      	bls.n	8008678 <find_volume+0x124>
 8008674:	2301      	movs	r3, #1
 8008676:	e29a      	b.n	8008bae <find_volume+0x65a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800867c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800867e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008680:	f7ff fefa 	bl	8008478 <check_fs>
 8008684:	4603      	mov	r3, r0
 8008686:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800868a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800868e:	2b01      	cmp	r3, #1
 8008690:	d153      	bne.n	800873a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008692:	2300      	movs	r3, #0
 8008694:	643b      	str	r3, [r7, #64]	; 0x40
 8008696:	e028      	b.n	80086ea <find_volume+0x196>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800869a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80086a2:	4413      	add	r3, r2
 80086a4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	3304      	adds	r3, #4
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d012      	beq.n	80086d6 <find_volume+0x182>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b2:	330b      	adds	r3, #11
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	061a      	lsls	r2, r3, #24
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	330a      	adds	r3, #10
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	041b      	lsls	r3, r3, #16
 80086c0:	4313      	orrs	r3, r2
 80086c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c4:	3209      	adds	r2, #9
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	0212      	lsls	r2, r2, #8
 80086ca:	4313      	orrs	r3, r2
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	3208      	adds	r2, #8
 80086d0:	7812      	ldrb	r2, [r2, #0]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	e000      	b.n	80086d8 <find_volume+0x184>
 80086d6:	2200      	movs	r2, #0
 80086d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	3358      	adds	r3, #88	; 0x58
 80086de:	443b      	add	r3, r7
 80086e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80086e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e6:	3301      	adds	r3, #1
 80086e8:	643b      	str	r3, [r7, #64]	; 0x40
 80086ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d9d3      	bls.n	8008698 <find_volume+0x144>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80086f0:	2300      	movs	r3, #0
 80086f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80086f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <find_volume+0x1ac>
 80086fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fc:	3b01      	subs	r3, #1
 80086fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	3358      	adds	r3, #88	; 0x58
 8008706:	443b      	add	r3, r7
 8008708:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800870c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800870e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008710:	2b00      	cmp	r3, #0
 8008712:	d005      	beq.n	8008720 <find_volume+0x1cc>
 8008714:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008716:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008718:	f7ff feae 	bl	8008478 <check_fs>
 800871c:	4603      	mov	r3, r0
 800871e:	e000      	b.n	8008722 <find_volume+0x1ce>
 8008720:	2302      	movs	r3, #2
 8008722:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008726:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <find_volume+0x1e6>
 800872e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008730:	3301      	adds	r3, #1
 8008732:	643b      	str	r3, [r7, #64]	; 0x40
 8008734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008736:	2b03      	cmp	r3, #3
 8008738:	d9e2      	bls.n	8008700 <find_volume+0x1ac>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800873a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800873e:	2b03      	cmp	r3, #3
 8008740:	d101      	bne.n	8008746 <find_volume+0x1f2>
 8008742:	2301      	movs	r3, #1
 8008744:	e233      	b.n	8008bae <find_volume+0x65a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008746:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <find_volume+0x1fe>
 800874e:	230d      	movs	r3, #13
 8008750:	e22d      	b.n	8008bae <find_volume+0x65a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	7b1b      	ldrb	r3, [r3, #12]
 8008756:	021b      	lsls	r3, r3, #8
 8008758:	b21a      	sxth	r2, r3
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	7adb      	ldrb	r3, [r3, #11]
 800875e:	b21b      	sxth	r3, r3
 8008760:	4313      	orrs	r3, r2
 8008762:	b21a      	sxth	r2, r3
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800876a:	895b      	ldrh	r3, [r3, #10]
 800876c:	b21b      	sxth	r3, r3
 800876e:	429a      	cmp	r2, r3
 8008770:	d001      	beq.n	8008776 <find_volume+0x222>
		return FR_NO_FILESYSTEM;
 8008772:	230d      	movs	r3, #13
 8008774:	e21b      	b.n	8008bae <find_volume+0x65a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	7ddb      	ldrb	r3, [r3, #23]
 800877a:	021b      	lsls	r3, r3, #8
 800877c:	b21a      	sxth	r2, r3
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	7d9b      	ldrb	r3, [r3, #22]
 8008782:	b21b      	sxth	r3, r3
 8008784:	4313      	orrs	r3, r2
 8008786:	b21b      	sxth	r3, r3
 8008788:	b29b      	uxth	r3, r3
 800878a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800878c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d112      	bne.n	80087b8 <find_volume+0x264>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008798:	061a      	lsls	r2, r3, #24
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80087a0:	041b      	lsls	r3, r3, #16
 80087a2:	4313      	orrs	r3, r2
 80087a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087a6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80087aa:	0212      	lsls	r2, r2, #8
 80087ac:	4313      	orrs	r3, r2
 80087ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087b0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80087b4:	4313      	orrs	r3, r2
 80087b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087be:	461a      	mov	r2, r3
 80087c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c2:	61d3      	str	r3, [r2, #28]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	7c1a      	ldrb	r2, [r3, #16]
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ce:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80087d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d6:	78db      	ldrb	r3, [r3, #3]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d009      	beq.n	80087f0 <find_volume+0x29c>
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e2:	78db      	ldrb	r3, [r3, #3]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d003      	beq.n	80087f0 <find_volume+0x29c>
		return FR_NO_FILESYSTEM;
 80087e8:	230d      	movs	r3, #13
 80087ea:	e1e0      	b.n	8008bae <find_volume+0x65a>
 80087ec:	200022b0 	.word	0x200022b0
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80087f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f6:	78db      	ldrb	r3, [r3, #3]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
 8008800:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	7b5a      	ldrb	r2, [r3, #13]
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800880c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008814:	789b      	ldrb	r3, [r3, #2]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00c      	beq.n	8008834 <find_volume+0x2e0>
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008820:	789b      	ldrb	r3, [r3, #2]
 8008822:	461a      	mov	r2, r3
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800882a:	789b      	ldrb	r3, [r3, #2]
 800882c:	3b01      	subs	r3, #1
 800882e:	4013      	ands	r3, r2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <find_volume+0x2e4>
		return FR_NO_FILESYSTEM;
 8008834:	230d      	movs	r3, #13
 8008836:	e1ba      	b.n	8008bae <find_volume+0x65a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	7c9b      	ldrb	r3, [r3, #18]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	b21a      	sxth	r2, r3
 8008840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008842:	7c5b      	ldrb	r3, [r3, #17]
 8008844:	b21b      	sxth	r3, r3
 8008846:	4313      	orrs	r3, r2
 8008848:	b21b      	sxth	r3, r3
 800884a:	b29a      	uxth	r2, r3
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008852:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885a:	891b      	ldrh	r3, [r3, #8]
 800885c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800885e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008862:	8952      	ldrh	r2, [r2, #10]
 8008864:	0952      	lsrs	r2, r2, #5
 8008866:	b292      	uxth	r2, r2
 8008868:	fbb3 f1f2 	udiv	r1, r3, r2
 800886c:	fb01 f202 	mul.w	r2, r1, r2
 8008870:	1a9b      	subs	r3, r3, r2
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <find_volume+0x328>
		return FR_NO_FILESYSTEM;
 8008878:	230d      	movs	r3, #13
 800887a:	e198      	b.n	8008bae <find_volume+0x65a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	7d1b      	ldrb	r3, [r3, #20]
 8008880:	021b      	lsls	r3, r3, #8
 8008882:	b21a      	sxth	r2, r3
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	7cdb      	ldrb	r3, [r3, #19]
 8008888:	b21b      	sxth	r3, r3
 800888a:	4313      	orrs	r3, r2
 800888c:	b21b      	sxth	r3, r3
 800888e:	b29b      	uxth	r3, r3
 8008890:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008894:	2b00      	cmp	r3, #0
 8008896:	d112      	bne.n	80088be <find_volume+0x36a>
 8008898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800889e:	061a      	lsls	r2, r3, #24
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80088a6:	041b      	lsls	r3, r3, #16
 80088a8:	4313      	orrs	r3, r2
 80088aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ac:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80088b0:	0212      	lsls	r2, r2, #8
 80088b2:	4313      	orrs	r3, r2
 80088b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	7bdb      	ldrb	r3, [r3, #15]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	b21a      	sxth	r2, r3
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	7b9b      	ldrb	r3, [r3, #14]
 80088ca:	b21b      	sxth	r3, r3
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b21b      	sxth	r3, r3
 80088d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80088d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <find_volume+0x388>
 80088d8:	230d      	movs	r3, #13
 80088da:	e168      	b.n	8008bae <find_volume+0x65a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80088dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80088de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e0:	4413      	add	r3, r2
 80088e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088e8:	8911      	ldrh	r1, [r2, #8]
 80088ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088f0:	8952      	ldrh	r2, [r2, #10]
 80088f2:	0952      	lsrs	r2, r2, #5
 80088f4:	b292      	uxth	r2, r2
 80088f6:	fbb1 f2f2 	udiv	r2, r1, r2
 80088fa:	b292      	uxth	r2, r2
 80088fc:	4413      	add	r3, r2
 80088fe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	429a      	cmp	r2, r3
 8008906:	d201      	bcs.n	800890c <find_volume+0x3b8>
 8008908:	230d      	movs	r3, #13
 800890a:	e150      	b.n	8008bae <find_volume+0x65a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800890c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008914:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008918:	7892      	ldrb	r2, [r2, #2]
 800891a:	fbb3 f3f2 	udiv	r3, r3, r2
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <find_volume+0x3d6>
 8008926:	230d      	movs	r3, #13
 8008928:	e141      	b.n	8008bae <find_volume+0x65a>
	fmt = FS_FAT12;
 800892a:	2301      	movs	r3, #1
 800892c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008936:	4293      	cmp	r3, r2
 8008938:	d902      	bls.n	8008940 <find_volume+0x3ec>
 800893a:	2302      	movs	r3, #2
 800893c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008946:	4293      	cmp	r3, r2
 8008948:	d902      	bls.n	8008950 <find_volume+0x3fc>
 800894a:	2303      	movs	r3, #3
 800894c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	3302      	adds	r3, #2
 8008954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800895a:	6193      	str	r3, [r2, #24]
	fs->volbase = bsect;								/* Volume start sector */
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008962:	461a      	mov	r2, r3
 8008964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008966:	6213      	str	r3, [r2, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008968:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800896a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896c:	4413      	add	r3, r2
 800896e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008970:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008974:	6253      	str	r3, [r2, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 8008976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897a:	4413      	add	r3, r2
 800897c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800897e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008982:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 8008984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008988:	2b03      	cmp	r3, #3
 800898a:	d124      	bne.n	80089d6 <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800898c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008992:	891b      	ldrh	r3, [r3, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <find_volume+0x448>
 8008998:	230d      	movs	r3, #13
 800899a:	e108      	b.n	8008bae <find_volume+0x65a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80089a2:	061a      	lsls	r2, r3, #24
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	4313      	orrs	r3, r2
 80089ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089b0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80089b4:	0212      	lsls	r2, r2, #8
 80089b6:	4313      	orrs	r3, r2
 80089b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ba:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80089be:	4313      	orrs	r3, r2
 80089c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089c6:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80089c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	647b      	str	r3, [r7, #68]	; 0x44
 80089d4:	e02b      	b.n	8008a2e <find_volume+0x4da>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089dc:	891b      	ldrh	r3, [r3, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <find_volume+0x492>
 80089e2:	230d      	movs	r3, #13
 80089e4:	e0e3      	b.n	8008bae <find_volume+0x65a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f0:	4413      	add	r3, r2
 80089f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80089f8:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80089fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d105      	bne.n	8008a0e <find_volume+0x4ba>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	e00e      	b.n	8008a2c <find_volume+0x4d8>
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a14:	699a      	ldr	r2, [r3, #24]
 8008a16:	4613      	mov	r3, r2
 8008a18:	005b      	lsls	r3, r3, #1
 8008a1a:	4413      	add	r3, r2
 8008a1c:	085a      	lsrs	r2, r3, #1
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008a2c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a34:	69da      	ldr	r2, [r3, #28]
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3c:	895b      	ldrh	r3, [r3, #10]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a42:	440b      	add	r3, r1
 8008a44:	3b01      	subs	r3, #1
 8008a46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a48:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8008a4c:	8949      	ldrh	r1, [r1, #10]
 8008a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d201      	bcs.n	8008a5a <find_volume+0x506>
		return FR_NO_FILESYSTEM;
 8008a56:	230d      	movs	r3, #13
 8008a58:	e0a9      	b.n	8008bae <find_volume+0x65a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a60:	461a      	mov	r2, r3
 8008a62:	f04f 33ff 	mov.w	r3, #4294967295
 8008a66:	6153      	str	r3, [r2, #20]
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008a76:	6113      	str	r3, [r2, #16]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a7e:	2280      	movs	r2, #128	; 0x80
 8008a80:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008a82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d17a      	bne.n	8008b80 <find_volume+0x62c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a90:	021b      	lsls	r3, r3, #8
 8008a92:	b21a      	sxth	r2, r3
 8008a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a9a:	b21b      	sxth	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	b21b      	sxth	r3, r3
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d16d      	bne.n	8008b80 <find_volume+0x62c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008aac:	f7fe fb6a 	bl	8007184 <move_window>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d164      	bne.n	8008b80 <find_volume+0x62c>
	{
		fs->fsi_flag = 0;
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008abc:	2200      	movs	r2, #0
 8008abe:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	b21a      	sxth	r2, r3
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	b21b      	sxth	r3, r3
 8008ad6:	4a38      	ldr	r2, [pc, #224]	; (8008bb8 <find_volume+0x664>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d151      	bne.n	8008b80 <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	78db      	ldrb	r3, [r3, #3]
 8008ae0:	061a      	lsls	r2, r3, #24
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	789b      	ldrb	r3, [r3, #2]
 8008ae6:	041b      	lsls	r3, r3, #16
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aec:	7852      	ldrb	r2, [r2, #1]
 8008aee:	0212      	lsls	r2, r2, #8
 8008af0:	4313      	orrs	r3, r2
 8008af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008af4:	7812      	ldrb	r2, [r2, #0]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	4a30      	ldr	r2, [pc, #192]	; (8008bbc <find_volume+0x668>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d140      	bne.n	8008b80 <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b00:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008b04:	061a      	lsls	r2, r3, #24
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b12:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008b16:	0212      	lsls	r2, r2, #8
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b1c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008b20:	4313      	orrs	r3, r2
 8008b22:	4a27      	ldr	r2, [pc, #156]	; (8008bc0 <find_volume+0x66c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d12b      	bne.n	8008b80 <find_volume+0x62c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008b2e:	061a      	lsls	r2, r3, #24
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008b36:	041b      	lsls	r3, r3, #16
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b3c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008b40:	0212      	lsls	r2, r2, #8
 8008b42:	4313      	orrs	r3, r2
 8008b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b46:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b52:	6153      	str	r3, [r2, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008b5a:	061a      	lsls	r2, r3, #24
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008b62:	041b      	lsls	r3, r3, #16
 8008b64:	4313      	orrs	r3, r2
 8008b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b68:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008b6c:	0212      	lsls	r2, r2, #8
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b72:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008b76:	4313      	orrs	r3, r2
 8008b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b7e:	6113      	str	r3, [r2, #16]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b86:	461a      	mov	r2, r3
 8008b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b8c:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	; (8008bc4 <find_volume+0x670>)
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <find_volume+0x670>)
 8008b98:	801a      	strh	r2, [r3, #0]
 8008b9a:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <find_volume+0x670>)
 8008b9c:	881a      	ldrh	r2, [r3, #0]
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ba6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ba8:	f7fe fa70 	bl	800708c <clear_lock>
#endif

	return FR_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3758      	adds	r7, #88	; 0x58
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	ffffaa55 	.word	0xffffaa55
 8008bbc:	41615252 	.word	0x41615252
 8008bc0:	61417272 	.word	0x61417272
 8008bc4:	200022b4 	.word	0x200022b4

08008bc8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d02a      	beq.n	8008c30 <validate+0x68>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d024      	beq.n	8008c30 <validate+0x68>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01b      	beq.n	8008c30 <validate+0x68>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c04:	88da      	ldrh	r2, [r3, #6]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0c:	889b      	ldrh	r3, [r3, #4]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d10e      	bne.n	8008c30 <validate+0x68>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fd ff53 	bl	8006acc <disk_status>
 8008c26:	4603      	mov	r3, r0
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8008c30:	2309      	movs	r3, #9
 8008c32:	e00c      	b.n	8008c4e <validate+0x86>

	ENTER_FF(fil->fs);		/* Lock file system */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe f85f 	bl	8006d00 <lock_fs>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <validate+0x84>
 8008c48:	230f      	movs	r3, #15
 8008c4a:	e000      	b.n	8008c4e <validate+0x86>

	return FR_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008c6a:	f107 0310 	add.w	r3, r7, #16
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fbbe 	bl	80083f0 <get_ldnumber>
 8008c74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	da01      	bge.n	8008c80 <f_mount+0x28>
 8008c7c:	230b      	movs	r3, #11
 8008c7e:	e050      	b.n	8008d22 <f_mount+0xca>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c80:	4a2a      	ldr	r2, [pc, #168]	; (8008d2c <f_mount+0xd4>)
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d013      	beq.n	8008cb8 <f_mount+0x60>
#if _FS_LOCK
		clear_lock(cfs);
 8008c90:	69b8      	ldr	r0, [r7, #24]
 8008c92:	f7fe f9fb 	bl	800708c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 ff5b 	bl	800ab5a <ff_del_syncobj>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <f_mount+0x56>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e039      	b.n	8008d22 <f_mount+0xca>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d013      	beq.n	8008ce6 <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd2:	330c      	adds	r3, #12
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f001 ff21 	bl	800ab1e <ff_cre_syncobj>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <f_mount+0x8e>
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	e01d      	b.n	8008d22 <f_mount+0xca>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4910      	ldr	r1, [pc, #64]	; (8008d2c <f_mount+0xd4>)
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <f_mount+0xa4>
 8008cf6:	79fb      	ldrb	r3, [r7, #7]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d001      	beq.n	8008d00 <f_mount+0xa8>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e010      	b.n	8008d22 <f_mount+0xca>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008d00:	f107 0108 	add.w	r1, r7, #8
 8008d04:	f107 030c 	add.w	r3, r7, #12
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff fc22 	bl	8008554 <find_volume>
 8008d10:	4603      	mov	r3, r0
 8008d12:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	7dfa      	ldrb	r2, [r7, #23]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe f800 	bl	8006d20 <unlock_fs>
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3720      	adds	r7, #32
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	200022b0 	.word	0x200022b0

08008d30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d3e:	f843 0c44 	str.w	r0, [r3, #-68]
 8008d42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d46:	f843 1c48 	str.w	r1, [r3, #-72]
 8008d4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d4e:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008d52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <f_open+0x32>
 8008d5e:	2309      	movs	r3, #9
 8008d60:	e2f3      	b.n	800934a <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8008d62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d6e:	461a      	mov	r2, r3
 8008d70:	2300      	movs	r3, #0
 8008d72:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008d74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d78:	461a      	mov	r2, r3
 8008d7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d7e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008d82:	f003 031f 	and.w	r3, r3, #31
 8008d86:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008d8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d8e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008d92:	f023 0301 	bic.w	r3, r3, #1
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	f107 0110 	add.w	r1, r7, #16
 8008d9c:	3908      	subs	r1, #8
 8008d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008da2:	3b10      	subs	r3, #16
 8008da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7ff fbd3 	bl	8008554 <find_volume>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008db4:	f102 020f 	add.w	r2, r2, #15
 8008db8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008dba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008dbe:	f103 030f 	add.w	r3, r3, #15
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 82ae 	bne.w	8009326 <f_open+0x5f6>
		INIT_BUF(dj);
 8008dca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dd4:	3b1c      	subs	r3, #28
 8008dd6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8008dda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dde:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8008de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008de6:	3b10      	subs	r3, #16
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fa8a 	bl	8008304 <follow_path>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008df6:	f102 020f 	add.w	r2, r2, #15
 8008dfa:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8008dfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e00:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8008e04:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e08:	f102 0208 	add.w	r2, r2, #8
 8008e0c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008e0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e12:	f103 030f 	add.w	r3, r3, #15
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d126      	bne.n	8008e6a <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 8008e1c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e20:	f103 0308 	add.w	r3, r3, #8
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <f_open+0x108>
				res = FR_INVALID_NAME;
 8008e2a:	2306      	movs	r3, #6
 8008e2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e30:	f102 020f 	add.w	r2, r2, #15
 8008e34:	7013      	strb	r3, [r2, #0]
 8008e36:	e018      	b.n	8008e6a <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e3c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bf14      	ite	ne
 8008e48:	2301      	movne	r3, #1
 8008e4a:	2300      	moveq	r3, #0
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e54:	3b10      	subs	r3, #16
 8008e56:	4611      	mov	r1, r2
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fd ff81 	bl	8006d60 <chk_lock>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e64:	f102 020f 	add.w	r2, r2, #15
 8008e68:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008e6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e6e:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008e72:	f003 031c 	and.w	r3, r3, #28
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 8134 	beq.w	80090e4 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8008e7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e80:	f103 030f 	add.w	r3, r3, #15
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d02e      	beq.n	8008ee8 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008e8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e8e:	f103 030f 	add.w	r3, r3, #15
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d112      	bne.n	8008ebe <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008e98:	f7fd ffd2 	bl	8006e40 <enq_lock>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d007      	beq.n	8008eb2 <f_open+0x182>
 8008ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ea6:	3b10      	subs	r3, #16
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7ff f929 	bl	8008100 <dir_register>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	e000      	b.n	8008eb4 <f_open+0x184>
 8008eb2:	2312      	movs	r3, #18
 8008eb4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008eb8:	f102 020f 	add.w	r2, r2, #15
 8008ebc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008ebe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ec8:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008ecc:	f043 0308 	orr.w	r3, r3, #8
 8008ed0:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8008ed4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ed8:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8008edc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ee0:	f102 0208 	add.w	r2, r2, #8
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	e01f      	b.n	8008f28 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008ee8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008eec:	f103 0308 	add.w	r3, r3, #8
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	330b      	adds	r3, #11
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	f003 0311 	and.w	r3, r3, #17
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d006      	beq.n	8008f0c <f_open+0x1dc>
					res = FR_DENIED;
 8008efe:	2307      	movs	r3, #7
 8008f00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008f04:	f102 020f 	add.w	r2, r2, #15
 8008f08:	7013      	strb	r3, [r2, #0]
 8008f0a:	e00d      	b.n	8008f28 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008f0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f10:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d005      	beq.n	8008f28 <f_open+0x1f8>
						res = FR_EXIST;
 8008f1c:	2308      	movs	r3, #8
 8008f1e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008f22:	f102 020f 	add.w	r2, r2, #15
 8008f26:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008f2c:	f103 030f 	add.w	r3, r3, #15
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f040 8108 	bne.w	8009148 <f_open+0x418>
 8008f38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f3c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80ff 	beq.w	8009148 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 8008f4a:	f7fd fd61 	bl	8006a10 <get_fattime>
 8008f4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008f52:	f103 0304 	add.w	r3, r3, #4
 8008f56:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008f58:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008f5c:	f103 0308 	add.w	r3, r3, #8
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	330e      	adds	r3, #14
 8008f64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008f68:	f102 0204 	add.w	r2, r2, #4
 8008f6c:	6812      	ldr	r2, [r2, #0]
 8008f6e:	b2d2      	uxtb	r2, r2
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008f76:	f103 0304 	add.w	r3, r3, #4
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	0a1b      	lsrs	r3, r3, #8
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008f86:	f103 0308 	add.w	r3, r3, #8
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330f      	adds	r3, #15
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]
 8008f92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008f96:	f103 0304 	add.w	r3, r3, #4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	0c1a      	lsrs	r2, r3, #16
 8008f9e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008fa2:	f103 0308 	add.w	r3, r3, #8
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3310      	adds	r3, #16
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008fb2:	f103 0304 	add.w	r3, r3, #4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	0e1a      	lsrs	r2, r3, #24
 8008fba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008fbe:	f103 0308 	add.w	r3, r3, #8
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3311      	adds	r3, #17
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008fca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008fce:	f103 0308 	add.w	r3, r3, #8
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	330b      	adds	r3, #11
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008fda:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008fde:	f103 0308 	add.w	r3, r3, #8
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	331c      	adds	r3, #28
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	701a      	strb	r2, [r3, #0]
 8008fea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008fee:	f103 0308 	add.w	r3, r3, #8
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	331d      	adds	r3, #29
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ffe:	f103 0308 	add.w	r3, r3, #8
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	331e      	adds	r3, #30
 8009006:	2200      	movs	r2, #0
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800900e:	f103 0308 	add.w	r3, r3, #8
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	331f      	adds	r3, #31
 8009016:	2200      	movs	r2, #0
 8009018:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800901a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800901e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8009022:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009026:	f102 0208 	add.w	r2, r2, #8
 800902a:	6811      	ldr	r1, [r2, #0]
 800902c:	4618      	mov	r0, r3
 800902e:	f7fe ffbe 	bl	8007fae <ld_clust>
 8009032:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009036:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8009038:	2100      	movs	r1, #0
 800903a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800903e:	f103 0308 	add.w	r3, r3, #8
 8009042:	6818      	ldr	r0, [r3, #0]
 8009044:	f7fe ffe2 	bl	800800c <st_clust>
				dj.fs->wflag = 1;
 8009048:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800904c:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8009050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009054:	2201      	movs	r2, #1
 8009056:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8009058:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d072      	beq.n	8009148 <f_open+0x418>
					dw = dj.fs->winsect;
 8009062:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009066:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800906a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009070:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009074:	f102 0204 	add.w	r2, r2, #4
 8009078:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800907a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800907e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8009082:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009086:	6811      	ldr	r1, [r2, #0]
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe fbe0 	bl	800784e <remove_chain>
 800908e:	4603      	mov	r3, r0
 8009090:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009094:	f102 020f 	add.w	r2, r2, #15
 8009098:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800909a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800909e:	f103 030f 	add.w	r3, r3, #15
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d14f      	bne.n	8009148 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80090a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090ac:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 80090b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80090bc:	6113      	str	r3, [r2, #16]
						res = move_window(dj.fs, dw);
 80090be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090c2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80090c6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80090ca:	f102 0204 	add.w	r2, r2, #4
 80090ce:	6811      	ldr	r1, [r2, #0]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe f857 	bl	8007184 <move_window>
 80090d6:	4603      	mov	r3, r0
 80090d8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80090dc:	f102 020f 	add.w	r2, r2, #15
 80090e0:	7013      	strb	r3, [r2, #0]
 80090e2:	e031      	b.n	8009148 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80090e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80090e8:	f103 030f 	add.w	r3, r3, #15
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d12a      	bne.n	8009148 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80090f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80090f6:	f103 0308 	add.w	r3, r3, #8
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	330b      	adds	r3, #11
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	f003 0310 	and.w	r3, r3, #16
 8009104:	2b00      	cmp	r3, #0
 8009106:	d006      	beq.n	8009116 <f_open+0x3e6>
					res = FR_NO_FILE;
 8009108:	2304      	movs	r3, #4
 800910a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800910e:	f102 020f 	add.w	r2, r2, #15
 8009112:	7013      	strb	r3, [r2, #0]
 8009114:	e018      	b.n	8009148 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009116:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800911a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d010      	beq.n	8009148 <f_open+0x418>
 8009126:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800912a:	f103 0308 	add.w	r3, r3, #8
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	330b      	adds	r3, #11
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <f_open+0x418>
						res = FR_DENIED;
 800913c:	2307      	movs	r3, #7
 800913e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009142:	f102 020f 	add.w	r2, r2, #15
 8009146:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8009148:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800914c:	f103 030f 	add.w	r3, r3, #15
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d157      	bne.n	8009206 <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009156:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800915a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <f_open+0x44c>
				mode |= FA__WRITTEN;
 8009166:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800916a:	461a      	mov	r2, r3
 800916c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009170:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8009174:	f043 0320 	orr.w	r3, r3, #32
 8009178:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800917c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009180:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8009184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800918e:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8009192:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009196:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8009198:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800919c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80091a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a4:	461a      	mov	r2, r3
 80091a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80091aa:	f103 0308 	add.w	r3, r3, #8
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80091b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091b6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80091ba:	f023 0301 	bic.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bf14      	ite	ne
 80091c2:	2301      	movne	r3, #1
 80091c4:	2300      	moveq	r3, #0
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091ce:	3b10      	subs	r3, #16
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fd fe58 	bl	8006e88 <inc_lock>
 80091d8:	4602      	mov	r2, r0
 80091da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80091e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e6:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80091e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80091ec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80091f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d105      	bne.n	8009206 <f_open+0x4d6>
 80091fa:	2302      	movs	r3, #2
 80091fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009200:	f102 020f 	add.w	r2, r2, #15
 8009204:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009206:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800920a:	f103 030f 	add.w	r3, r3, #15
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	f040 8088 	bne.w	8009326 <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 8009216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800921a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800921e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009222:	461a      	mov	r2, r3
 8009224:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009228:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800922c:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800922e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009232:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800923a:	2200      	movs	r2, #0
 800923c:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800923e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009242:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8009246:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800924a:	f102 0208 	add.w	r2, r2, #8
 800924e:	6811      	ldr	r1, [r2, #0]
 8009250:	4618      	mov	r0, r3
 8009252:	f7fe feac 	bl	8007fae <ld_clust>
 8009256:	4602      	mov	r2, r0
 8009258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800925c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009264:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009266:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800926a:	f103 0308 	add.w	r3, r3, #8
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	331f      	adds	r3, #31
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	061a      	lsls	r2, r3, #24
 8009276:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800927a:	f103 0308 	add.w	r3, r3, #8
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	331e      	adds	r3, #30
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	041b      	lsls	r3, r3, #16
 8009286:	4313      	orrs	r3, r2
 8009288:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800928c:	f102 0208 	add.w	r2, r2, #8
 8009290:	6812      	ldr	r2, [r2, #0]
 8009292:	321d      	adds	r2, #29
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	0212      	lsls	r2, r2, #8
 8009298:	4313      	orrs	r3, r2
 800929a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800929e:	f102 0208 	add.w	r2, r2, #8
 80092a2:	6812      	ldr	r2, [r2, #0]
 80092a4:	321c      	adds	r2, #28
 80092a6:	7812      	ldrb	r2, [r2, #0]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80092ae:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80092b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092b6:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80092b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092bc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80092c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c4:	461a      	mov	r2, r3
 80092c6:	2300      	movs	r3, #0
 80092c8:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80092ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80092d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d6:	461a      	mov	r2, r3
 80092d8:	2300      	movs	r3, #0
 80092da:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80092dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092e0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80092e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e8:	461a      	mov	r2, r3
 80092ea:	2300      	movs	r3, #0
 80092ec:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80092ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092f2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 80092f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80092fa:	f852 2c44 	ldr.w	r2, [r2, #-68]
 80092fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009302:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8009304:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009308:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800930c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009316:	88da      	ldrh	r2, [r3, #6]
 8009318:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800931c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009324:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8009326:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800932a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800932e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8009332:	f102 020f 	add.w	r2, r2, #15
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7fd fcf0 	bl	8006d20 <unlock_fs>
 8009340:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8009344:	f103 030f 	add.w	r3, r3, #15
 8009348:	781b      	ldrb	r3, [r3, #0]
}
 800934a:	4618      	mov	r0, r3
 800934c:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b08c      	sub	sp, #48	; 0x30
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
 8009362:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff fc2a 	bl	8008bc8 <validate>
 8009374:	4603      	mov	r3, r0
 8009376:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009378:	7ffb      	ldrb	r3, [r7, #31]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <f_read+0x3e>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	7ffa      	ldrb	r2, [r7, #31]
 8009388:	4611      	mov	r1, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f7fd fcc8 	bl	8006d20 <unlock_fs>
 8009390:	7ffb      	ldrb	r3, [r7, #31]
 8009392:	e219      	b.n	80097c8 <f_read+0x472>
	if (fp->err)								/* Check error */
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800939a:	79db      	ldrb	r3, [r3, #7]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d010      	beq.n	80093c2 <f_read+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ae:	79db      	ldrb	r3, [r3, #7]
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7fd fcb4 	bl	8006d20 <unlock_fs>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093be:	79db      	ldrb	r3, [r3, #7]
 80093c0:	e202      	b.n	80097c8 <f_read+0x472>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c8:	799b      	ldrb	r3, [r3, #6]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <f_read+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2107      	movs	r1, #7
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fd fc9f 	bl	8006d20 <unlock_fs>
 80093e2:	2307      	movs	r3, #7
 80093e4:	e1f0      	b.n	80097c8 <f_read+0x472>
	remain = fp->fsize - fp->fptr;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	429a      	cmp	r2, r3
 8009400:	f240 81d5 	bls.w	80097ae <f_read+0x458>
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009408:	e1d1      	b.n	80097ae <f_read+0x458>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009418:	6812      	ldr	r2, [r2, #0]
 800941a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800941e:	8952      	ldrh	r2, [r2, #10]
 8009420:	fbb3 f1f2 	udiv	r1, r3, r2
 8009424:	fb01 f202 	mul.w	r2, r1, r2
 8009428:	1a9b      	subs	r3, r3, r2
 800942a:	2b00      	cmp	r3, #0
 800942c:	f040 8170 	bne.w	8009710 <f_read+0x3ba>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800943e:	6812      	ldr	r2, [r2, #0]
 8009440:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009444:	8952      	ldrh	r2, [r2, #10]
 8009446:	fbb3 f3f2 	udiv	r3, r3, r2
 800944a:	b2da      	uxtb	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009458:	789b      	ldrb	r3, [r3, #2]
 800945a:	3b01      	subs	r3, #1
 800945c:	b2db      	uxtb	r3, r3
 800945e:	4013      	ands	r3, r2
 8009460:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d153      	bne.n	8009510 <f_read+0x1ba>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <f_read+0x12a>
					clst = fp->sclust;			/* Follow from the origin */
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800947e:	e01c      	b.n	80094ba <f_read+0x164>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	d009      	beq.n	80094a0 <f_read+0x14a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	4619      	mov	r1, r3
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7fe fae2 	bl	8007a60 <clmt_clust>
 800949c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800949e:	e00c      	b.n	80094ba <f_read+0x164>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f7fd ff7c 	bl	80073b0 <get_fat>
 80094b8:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80094ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d80e      	bhi.n	80094de <f_read+0x188>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c6:	2202      	movs	r2, #2
 80094c8:	71da      	strb	r2, [r3, #7]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2102      	movs	r1, #2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fd fc23 	bl	8006d20 <unlock_fs>
 80094da:	2302      	movs	r3, #2
 80094dc:	e174      	b.n	80097c8 <f_read+0x472>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d10e      	bne.n	8009504 <f_read+0x1ae>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ec:	2201      	movs	r2, #1
 80094ee:	71da      	strb	r2, [r3, #7]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2101      	movs	r1, #1
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fd fc10 	bl	8006d20 <unlock_fs>
 8009500:	2301      	movs	r3, #1
 8009502:	e161      	b.n	80097c8 <f_read+0x472>
				fp->clust = clst;				/* Update current cluster */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800950a:	461a      	mov	r2, r3
 800950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950e:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7fd ff1f 	bl	8007366 <clust2sect>
 8009528:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10e      	bne.n	800954e <f_read+0x1f8>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009536:	2202      	movs	r2, #2
 8009538:	71da      	strb	r2, [r3, #7]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2102      	movs	r1, #2
 8009544:	4618      	mov	r0, r3
 8009546:	f7fd fbeb 	bl	8006d20 <unlock_fs>
 800954a:	2302      	movs	r3, #2
 800954c:	e13c      	b.n	80097c8 <f_read+0x472>
			sect += csect;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4413      	add	r3, r2
 8009554:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009562:	895b      	ldrh	r3, [r3, #10]
 8009564:	461a      	mov	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	fbb3 f3f2 	udiv	r3, r3, r2
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d06e      	beq.n	8009652 <f_read+0x2fc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009574:	7dfa      	ldrb	r2, [r7, #23]
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	4413      	add	r3, r2
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009580:	6812      	ldr	r2, [r2, #0]
 8009582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009586:	7892      	ldrb	r2, [r2, #2]
 8009588:	4293      	cmp	r3, r2
 800958a:	d90a      	bls.n	80095a2 <f_read+0x24c>
					cc = fp->fs->csize - csect;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009598:	789b      	ldrb	r3, [r3, #2]
 800959a:	461a      	mov	r2, r3
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ae:	7858      	ldrb	r0, [r3, #1]
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	6a39      	ldr	r1, [r7, #32]
 80095b6:	f7fd fac9 	bl	8006b4c <disk_read>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00e      	beq.n	80095de <f_read+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c6:	2201      	movs	r2, #1
 80095c8:	71da      	strb	r2, [r3, #7]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2101      	movs	r1, #1
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fd fba3 	bl	8006d20 <unlock_fs>
 80095da:	2301      	movs	r3, #1
 80095dc:	e0f4      	b.n	80097c8 <f_read+0x472>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e4:	799b      	ldrb	r3, [r3, #6]
 80095e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d024      	beq.n	8009638 <f_read+0x2e2>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f4:	699a      	ldr	r2, [r3, #24]
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d91b      	bls.n	8009638 <f_read+0x2e2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009606:	699a      	ldr	r2, [r3, #24]
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009612:	6812      	ldr	r2, [r2, #0]
 8009614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009618:	8952      	ldrh	r2, [r2, #10]
 800961a:	fb02 f303 	mul.w	r3, r2, r3
 800961e:	6a3a      	ldr	r2, [r7, #32]
 8009620:	18d0      	adds	r0, r2, r3
 8009622:	68f9      	ldr	r1, [r7, #12]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009630:	895b      	ldrh	r3, [r3, #10]
 8009632:	461a      	mov	r2, r3
 8009634:	f7fd fae8 	bl	8006c08 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009644:	895b      	ldrh	r3, [r3, #10]
 8009646:	461a      	mov	r2, r3
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	fb02 f303 	mul.w	r3, r2, r3
 800964e:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8009650:	e095      	b.n	800977e <f_read+0x428>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	429a      	cmp	r2, r3
 800965e:	d051      	beq.n	8009704 <f_read+0x3ae>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009666:	799b      	ldrb	r3, [r3, #6]
 8009668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966c:	2b00      	cmp	r3, #0
 800966e:	d02b      	beq.n	80096c8 <f_read+0x372>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800967c:	7858      	ldrb	r0, [r3, #1]
 800967e:	68f9      	ldr	r1, [r7, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009686:	699a      	ldr	r2, [r3, #24]
 8009688:	2301      	movs	r3, #1
 800968a:	f7fd fa7f 	bl	8006b8c <disk_write>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00e      	beq.n	80096b2 <f_read+0x35c>
						ABORT(fp->fs, FR_DISK_ERR);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800969a:	2201      	movs	r2, #1
 800969c:	71da      	strb	r2, [r3, #7]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2101      	movs	r1, #1
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fd fb39 	bl	8006d20 <unlock_fs>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e08a      	b.n	80097c8 <f_read+0x472>
					fp->flag &= ~FA__DIRTY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b8:	799b      	ldrb	r3, [r3, #6]
 80096ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c6:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d4:	7858      	ldrb	r0, [r3, #1]
 80096d6:	68f9      	ldr	r1, [r7, #12]
 80096d8:	2301      	movs	r3, #1
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	f7fd fa36 	bl	8006b4c <disk_read>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00e      	beq.n	8009704 <f_read+0x3ae>
					ABORT(fp->fs, FR_DISK_ERR);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ec:	2201      	movs	r2, #1
 80096ee:	71da      	strb	r2, [r3, #7]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2101      	movs	r1, #1
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fd fb10 	bl	8006d20 <unlock_fs>
 8009700:	2301      	movs	r3, #1
 8009702:	e061      	b.n	80097c8 <f_read+0x472>
			}
#endif
			fp->dsect = sect;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800970a:	461a      	mov	r2, r3
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971c:	895b      	ldrh	r3, [r3, #10]
 800971e:	4618      	mov	r0, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009734:	8952      	ldrh	r2, [r2, #10]
 8009736:	fbb3 f1f2 	udiv	r1, r3, r2
 800973a:	fb01 f202 	mul.w	r2, r1, r2
 800973e:	1a9b      	subs	r3, r3, r2
 8009740:	1ac3      	subs	r3, r0, r3
 8009742:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8009744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	429a      	cmp	r2, r3
 800974a:	d901      	bls.n	8009750 <f_read+0x3fa>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800975e:	6812      	ldr	r2, [r2, #0]
 8009760:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009764:	8952      	ldrh	r2, [r2, #10]
 8009766:	fbb3 f1f2 	udiv	r1, r3, r2
 800976a:	fb01 f202 	mul.w	r2, r1, r2
 800976e:	1a9b      	subs	r3, r3, r2
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	4413      	add	r3, r2
 8009774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009776:	4619      	mov	r1, r3
 8009778:	6a38      	ldr	r0, [r7, #32]
 800977a:	f7fd fa45 	bl	8006c08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800977e:	6a3a      	ldr	r2, [r7, #32]
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	4413      	add	r3, r2
 8009784:	623b      	str	r3, [r7, #32]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	4413      	add	r3, r2
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009798:	6093      	str	r3, [r2, #8]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	441a      	add	r2, r3
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f47f ae2a 	bne.w	800940a <f_read+0xb4>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2100      	movs	r1, #0
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd faad 	bl	8006d20 <unlock_fs>
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3730      	adds	r7, #48	; 0x30
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08a      	sub	sp, #40	; 0x28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2200      	movs	r2, #0
 80097e6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f7ff f9ed 	bl	8008bc8 <validate>
 80097ee:	4603      	mov	r3, r0
 80097f0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <f_write+0x3e>
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	7dfa      	ldrb	r2, [r7, #23]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7fd fa8b 	bl	8006d20 <unlock_fs>
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	e26a      	b.n	8009ce4 <f_write+0x514>
	if (fp->err)							/* Check error */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009814:	79db      	ldrb	r3, [r3, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d010      	beq.n	800983c <f_write+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009828:	79db      	ldrb	r3, [r3, #7]
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7fd fa77 	bl	8006d20 <unlock_fs>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009838:	79db      	ldrb	r3, [r3, #7]
 800983a:	e253      	b.n	8009ce4 <f_write+0x514>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009842:	799b      	ldrb	r3, [r3, #6]
 8009844:	f003 0302 	and.w	r3, r3, #2
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <f_write+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2107      	movs	r1, #7
 8009856:	4618      	mov	r0, r3
 8009858:	f7fd fa62 	bl	8006d20 <unlock_fs>
 800985c:	2307      	movs	r3, #7
 800985e:	e241      	b.n	8009ce4 <f_write+0x514>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	441a      	add	r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	429a      	cmp	r2, r3
 8009876:	f080 8209 	bcs.w	8009c8c <f_write+0x4bc>
 800987a:	2300      	movs	r3, #0
 800987c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800987e:	e205      	b.n	8009c8c <f_write+0x4bc>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800988e:	6812      	ldr	r2, [r2, #0]
 8009890:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009894:	8952      	ldrh	r2, [r2, #10]
 8009896:	fbb3 f1f2 	udiv	r1, r3, r2
 800989a:	fb01 f202 	mul.w	r2, r1, r2
 800989e:	1a9b      	subs	r3, r3, r2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f040 8199 	bne.w	8009bd8 <f_write+0x408>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098b4:	6812      	ldr	r2, [r2, #0]
 80098b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098ba:	8952      	ldrh	r2, [r2, #10]
 80098bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ce:	789b      	ldrb	r3, [r3, #2]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	4013      	ands	r3, r2
 80098d6:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80098d8:	7dbb      	ldrb	r3, [r7, #22]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d16f      	bne.n	80099be <f_write+0x1ee>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d111      	bne.n	800990e <f_write+0x13e>
					clst = fp->sclust;		/* Follow from the origin */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d126      	bne.n	8009948 <f_write+0x178>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2100      	movs	r1, #0
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe f803 	bl	8007910 <create_chain>
 800990a:	6278      	str	r0, [r7, #36]	; 0x24
 800990c:	e01c      	b.n	8009948 <f_write+0x178>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009916:	2b00      	cmp	r3, #0
 8009918:	d009      	beq.n	800992e <f_write+0x15e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	4619      	mov	r1, r3
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f7fe f89b 	bl	8007a60 <clmt_clust>
 800992a:	6278      	str	r0, [r7, #36]	; 0x24
 800992c:	e00c      	b.n	8009948 <f_write+0x178>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f7fd ffe5 	bl	8007910 <create_chain>
 8009946:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 81a3 	beq.w	8009c96 <f_write+0x4c6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	2b01      	cmp	r3, #1
 8009954:	d10e      	bne.n	8009974 <f_write+0x1a4>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800995c:	2202      	movs	r2, #2
 800995e:	71da      	strb	r2, [r3, #7]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2102      	movs	r1, #2
 800996a:	4618      	mov	r0, r3
 800996c:	f7fd f9d8 	bl	8006d20 <unlock_fs>
 8009970:	2302      	movs	r3, #2
 8009972:	e1b7      	b.n	8009ce4 <f_write+0x514>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997a:	d10e      	bne.n	800999a <f_write+0x1ca>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009982:	2201      	movs	r2, #1
 8009984:	71da      	strb	r2, [r3, #7]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2101      	movs	r1, #1
 8009990:	4618      	mov	r0, r3
 8009992:	f7fd f9c5 	bl	8006d20 <unlock_fs>
 8009996:	2301      	movs	r3, #1
 8009998:	e1a4      	b.n	8009ce4 <f_write+0x514>
				fp->clust = clst;			/* Update current cluster */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a0:	461a      	mov	r2, r3
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d105      	bne.n	80099be <f_write+0x1ee>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b8:	461a      	mov	r2, r3
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c4:	799b      	ldrb	r3, [r3, #6]
 80099c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d02b      	beq.n	8009a26 <f_write+0x256>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099da:	7858      	ldrb	r0, [r3, #1]
 80099dc:	68f9      	ldr	r1, [r7, #12]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	2301      	movs	r3, #1
 80099e8:	f7fd f8d0 	bl	8006b8c <disk_write>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00e      	beq.n	8009a10 <f_write+0x240>
					ABORT(fp->fs, FR_DISK_ERR);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f8:	2201      	movs	r2, #1
 80099fa:	71da      	strb	r2, [r3, #7]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2101      	movs	r1, #1
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd f98a 	bl	8006d20 <unlock_fs>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e169      	b.n	8009ce4 <f_write+0x514>
				fp->flag &= ~FA__DIRTY;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a16:	799b      	ldrb	r3, [r3, #6]
 8009a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a24:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	4619      	mov	r1, r3
 8009a38:	4610      	mov	r0, r2
 8009a3a:	f7fd fc94 	bl	8007366 <clust2sect>
 8009a3e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10e      	bne.n	8009a64 <f_write+0x294>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	71da      	strb	r2, [r3, #7]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2102      	movs	r1, #2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fd f960 	bl	8006d20 <unlock_fs>
 8009a60:	2302      	movs	r3, #2
 8009a62:	e13f      	b.n	8009ce4 <f_write+0x514>
			sect += csect;
 8009a64:	7dbb      	ldrb	r3, [r7, #22]
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	4413      	add	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a78:	895b      	ldrh	r3, [r3, #10]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a82:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d071      	beq.n	8009b6e <f_write+0x39e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009a8a:	7dba      	ldrb	r2, [r7, #22]
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	4413      	add	r3, r2
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a96:	6812      	ldr	r2, [r2, #0]
 8009a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a9c:	7892      	ldrb	r2, [r2, #2]
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d90a      	bls.n	8009ab8 <f_write+0x2e8>
					cc = fp->fs->csize - csect;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aae:	789b      	ldrb	r3, [r3, #2]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	7dbb      	ldrb	r3, [r7, #22]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac4:	7858      	ldrb	r0, [r3, #1]
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	69b9      	ldr	r1, [r7, #24]
 8009acc:	f7fd f85e 	bl	8006b8c <disk_write>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00e      	beq.n	8009af4 <f_write+0x324>
					ABORT(fp->fs, FR_DISK_ERR);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009adc:	2201      	movs	r2, #1
 8009ade:	71da      	strb	r2, [r3, #7]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2101      	movs	r1, #1
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fd f918 	bl	8006d20 <unlock_fs>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e0f7      	b.n	8009ce4 <f_write+0x514>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009afa:	699a      	ldr	r2, [r3, #24]
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	69fa      	ldr	r2, [r7, #28]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d926      	bls.n	8009b54 <f_write+0x384>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0e:	699a      	ldr	r2, [r3, #24]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b1a:	6812      	ldr	r2, [r2, #0]
 8009b1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b20:	8952      	ldrh	r2, [r2, #10]
 8009b22:	fb02 f303 	mul.w	r3, r2, r3
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	18d1      	adds	r1, r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b36:	895b      	ldrh	r3, [r3, #10]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	f7fd f865 	bl	8006c08 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b44:	799b      	ldrb	r3, [r3, #6]
 8009b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b4a:	b2da      	uxtb	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b52:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b60:	895b      	ldrh	r3, [r3, #10]
 8009b62:	461a      	mov	r2, r3
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	fb02 f303 	mul.w	r3, r2, r3
 8009b6a:	623b      	str	r3, [r7, #32]
				continue;
 8009b6c:	e076      	b.n	8009c5c <f_write+0x48c>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d027      	beq.n	8009bcc <f_write+0x3fc>
				if (fp->fptr < fp->fsize &&
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d21d      	bcs.n	8009bcc <f_write+0x3fc>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9c:	7858      	ldrb	r0, [r3, #1]
 8009b9e:	68f9      	ldr	r1, [r7, #12]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	f7fc ffd2 	bl	8006b4c <disk_read>
 8009ba8:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00e      	beq.n	8009bcc <f_write+0x3fc>
						ABORT(fp->fs, FR_DISK_ERR);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	71da      	strb	r2, [r3, #7]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7fd f8ac 	bl	8006d20 <unlock_fs>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e08b      	b.n	8009ce4 <f_write+0x514>
			}
#endif
			fp->dsect = sect;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009be4:	895b      	ldrh	r3, [r3, #10]
 8009be6:	4618      	mov	r0, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bf6:	6812      	ldr	r2, [r2, #0]
 8009bf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bfc:	8952      	ldrh	r2, [r2, #10]
 8009bfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c02:	fb01 f202 	mul.w	r2, r1, r2
 8009c06:	1a9b      	subs	r3, r3, r2
 8009c08:	1ac3      	subs	r3, r0, r3
 8009c0a:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009c0c:	6a3a      	ldr	r2, [r7, #32]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d901      	bls.n	8009c18 <f_write+0x448>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c2c:	8952      	ldrh	r2, [r2, #10]
 8009c2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c32:	fb01 f202 	mul.w	r2, r1, r2
 8009c36:	1a9b      	subs	r3, r3, r2
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	6a3a      	ldr	r2, [r7, #32]
 8009c3e:	69b9      	ldr	r1, [r7, #24]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fc ffe1 	bl	8006c08 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4c:	799b      	ldrb	r3, [r3, #6]
 8009c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5a:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009c5c:	69ba      	ldr	r2, [r7, #24]
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	4413      	add	r3, r2
 8009c62:	61bb      	str	r3, [r7, #24]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	4413      	add	r3, r2
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c76:	6093      	str	r3, [r2, #8]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	441a      	add	r2, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f47f adf6 	bne.w	8009880 <f_write+0xb0>
 8009c94:	e000      	b.n	8009c98 <f_write+0x4c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c96:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d907      	bls.n	8009cbc <f_write+0x4ec>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cba:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc2:	799b      	ldrb	r3, [r3, #6]
 8009cc4:	f043 0320 	orr.w	r3, r3, #32
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2100      	movs	r1, #0
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fd f81f 	bl	8006d20 <unlock_fs>
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3728      	adds	r7, #40	; 0x28
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fe ff67 	bl	8008bc8 <validate>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f040 80c4 	bne.w	8009e8e <f_sync+0x1a2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0c:	799b      	ldrb	r3, [r3, #6]
 8009d0e:	f003 0320 	and.w	r3, r3, #32
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 80bb 	beq.w	8009e8e <f_sync+0x1a2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1e:	799b      	ldrb	r3, [r3, #6]
 8009d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d026      	beq.n	8009d76 <f_sync+0x8a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d34:	7858      	ldrb	r0, [r3, #1]
 8009d36:	6879      	ldr	r1, [r7, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3e:	699a      	ldr	r2, [r3, #24]
 8009d40:	2301      	movs	r3, #1
 8009d42:	f7fc ff23 	bl	8006b8c <disk_write>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d009      	beq.n	8009d60 <f_sync+0x74>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2101      	movs	r1, #1
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fc ffe2 	bl	8006d20 <unlock_fs>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e0a0      	b.n	8009ea2 <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d66:	799b      	ldrb	r3, [r3, #6]
 8009d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d74:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	4619      	mov	r1, r3
 8009d88:	4610      	mov	r0, r2
 8009d8a:	f7fd f9fb 	bl	8007184 <move_window>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d17a      	bne.n	8009e8e <f_sync+0x1a2>
				dir = fp->dir_ptr;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	330b      	adds	r3, #11
 8009da6:	781a      	ldrb	r2, [r3, #0]
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	330b      	adds	r3, #11
 8009dac:	f042 0220 	orr.w	r2, r2, #32
 8009db0:	b2d2      	uxtb	r2, r2
 8009db2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	331c      	adds	r3, #28
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	701a      	strb	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	0a1b      	lsrs	r3, r3, #8
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	331d      	adds	r3, #29
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	701a      	strb	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	0c1a      	lsrs	r2, r3, #16
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	331e      	adds	r3, #30
 8009de8:	b2d2      	uxtb	r2, r2
 8009dea:	701a      	strb	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	0e1a      	lsrs	r2, r3, #24
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	331f      	adds	r3, #31
 8009dfa:	b2d2      	uxtb	r2, r2
 8009dfc:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	4619      	mov	r1, r3
 8009e08:	6938      	ldr	r0, [r7, #16]
 8009e0a:	f7fe f8ff 	bl	800800c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009e0e:	f7fc fdff 	bl	8006a10 <get_fattime>
 8009e12:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	3316      	adds	r3, #22
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	b2d2      	uxtb	r2, r2
 8009e1c:	701a      	strb	r2, [r3, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	0a1b      	lsrs	r3, r3, #8
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	3317      	adds	r3, #23
 8009e2a:	b2d2      	uxtb	r2, r2
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	0c1a      	lsrs	r2, r3, #16
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	3318      	adds	r3, #24
 8009e36:	b2d2      	uxtb	r2, r2
 8009e38:	701a      	strb	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	0e1a      	lsrs	r2, r3, #24
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	3319      	adds	r3, #25
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	3312      	adds	r3, #18
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	701a      	strb	r2, [r3, #0]
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3313      	adds	r3, #19
 8009e52:	2200      	movs	r2, #0
 8009e54:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e5c:	799b      	ldrb	r3, [r3, #6]
 8009e5e:	f023 0320 	bic.w	r3, r3, #32
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e6a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e78:	2201      	movs	r2, #1
 8009e7a:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fd f9af 	bl	80071e8 <sync_fs>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	7dfa      	ldrb	r2, [r7, #23]
 8009e98:	4611      	mov	r1, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fc ff40 	bl	8006d20 <unlock_fs>
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff ff1a 	bl	8009cec <f_sync>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d122      	bne.n	8009f08 <f_close+0x5e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7fe fe80 	bl	8008bc8 <validate>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d11a      	bne.n	8009f08 <f_close+0x5e>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fd f88d 	bl	8007004 <dec_lock>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d105      	bne.n	8009f00 <f_close+0x56>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009efa:	461a      	mov	r2, r3
 8009efc:	2300      	movs	r3, #0
 8009efe:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009f00:	2100      	movs	r1, #0
 8009f02:	68b8      	ldr	r0, [r7, #8]
 8009f04:	f7fc ff0c 	bl	8006d20 <unlock_fs>
#endif
		}
	}
	return res;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b090      	sub	sp, #64	; 0x40
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7fe fe53 	bl	8008bc8 <validate>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009f28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00c      	beq.n	8009f4a <f_lseek+0x38>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fc feee 	bl	8006d20 <unlock_fs>
 8009f44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009f48:	e350      	b.n	800a5ec <f_lseek+0x6da>
	if (fp->err)						/* Check error */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f50:	79db      	ldrb	r3, [r3, #7]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d010      	beq.n	8009f78 <f_lseek+0x66>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f64:	79db      	ldrb	r3, [r3, #7]
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f7fc fed9 	bl	8006d20 <unlock_fs>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f74:	79db      	ldrb	r3, [r3, #7]
 8009f76:	e339      	b.n	800a5ec <f_lseek+0x6da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 814c 	beq.w	800a21e <f_lseek+0x30c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8c:	d17c      	bne.n	800a088 <f_lseek+0x176>
			tbl = fp->cltbl;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	1d1a      	adds	r2, r3, #4
 8009f9c:	627a      	str	r2, [r7, #36]	; 0x24
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	617b      	str	r3, [r7, #20]
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d056      	beq.n	800a064 <f_lseek+0x152>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	613b      	str	r3, [r7, #16]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fca:	3301      	adds	r3, #1
 8009fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fd f9e9 	bl	80073b0 <get_fat>
 8009fde:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d80e      	bhi.n	800a004 <f_lseek+0xf2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fec:	2202      	movs	r2, #2
 8009fee:	71da      	strb	r2, [r3, #7]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2102      	movs	r1, #2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fc fe90 	bl	8006d20 <unlock_fs>
 800a000:	2302      	movs	r3, #2
 800a002:	e2f3      	b.n	800a5ec <f_lseek+0x6da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00a:	d10e      	bne.n	800a02a <f_lseek+0x118>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a012:	2201      	movs	r2, #1
 800a014:	71da      	strb	r2, [r3, #7]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2101      	movs	r1, #1
 800a020:	4618      	mov	r0, r3
 800a022:	f7fc fe7d 	bl	8006d20 <unlock_fs>
 800a026:	2301      	movs	r3, #1
 800a028:	e2e0      	b.n	800a5ec <f_lseek+0x6da>
					} while (cl == pcl + 1);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	3301      	adds	r3, #1
 800a02e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a030:	429a      	cmp	r2, r3
 800a032:	d0c7      	beq.n	8009fc4 <f_lseek+0xb2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d809      	bhi.n	800a050 <f_lseek+0x13e>
						*tbl++ = ncl; *tbl++ = tcl;
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	1d1a      	adds	r2, r3, #4
 800a040:	627a      	str	r2, [r7, #36]	; 0x24
 800a042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	1d1a      	adds	r2, r3, #4
 800a04a:	627a      	str	r2, [r7, #36]	; 0x24
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a060:	429a      	cmp	r2, r3
 800a062:	d3a8      	bcc.n	8009fb6 <f_lseek+0xa4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a06e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800a070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	d803      	bhi.n	800a080 <f_lseek+0x16e>
				*tbl = 0;		/* Terminate table */
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	2200      	movs	r2, #0
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e2a9      	b.n	800a5d4 <f_lseek+0x6c2>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a080:	2311      	movs	r3, #17
 800a082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a086:	e2a5      	b.n	800a5d4 <f_lseek+0x6c2>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	429a      	cmp	r2, r3
 800a094:	d904      	bls.n	800a0a0 <f_lseek+0x18e>
				ofs = fp->fsize;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 8290 	beq.w	800a5d4 <f_lseek+0x6c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7fd fcd0 	bl	8007a60 <clmt_clust>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c8:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f7fd f942 	bl	8007366 <clust2sect>
 800a0e2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10e      	bne.n	800a108 <f_lseek+0x1f6>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	71da      	strb	r2, [r3, #7]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2102      	movs	r1, #2
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fc fe0e 	bl	8006d20 <unlock_fs>
 800a104:	2302      	movs	r3, #2
 800a106:	e271      	b.n	800a5ec <f_lseek+0x6da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a112:	6812      	ldr	r2, [r2, #0]
 800a114:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a118:	8952      	ldrh	r2, [r2, #10]
 800a11a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a124:	6812      	ldr	r2, [r2, #0]
 800a126:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a12a:	7892      	ldrb	r2, [r2, #2]
 800a12c:	3a01      	subs	r2, #1
 800a12e:	4013      	ands	r3, r2
 800a130:	69ba      	ldr	r2, [r7, #24]
 800a132:	4413      	add	r3, r2
 800a134:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a14a:	8952      	ldrh	r2, [r2, #10]
 800a14c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a150:	fb01 f202 	mul.w	r2, r1, r2
 800a154:	1a9b      	subs	r3, r3, r2
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 823c 	beq.w	800a5d4 <f_lseek+0x6c2>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	429a      	cmp	r2, r3
 800a168:	f000 8234 	beq.w	800a5d4 <f_lseek+0x6c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a172:	799b      	ldrb	r3, [r3, #6]
 800a174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d02b      	beq.n	800a1d4 <f_lseek+0x2c2>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a188:	7858      	ldrb	r0, [r3, #1]
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a192:	699a      	ldr	r2, [r3, #24]
 800a194:	2301      	movs	r3, #1
 800a196:	f7fc fcf9 	bl	8006b8c <disk_write>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00e      	beq.n	800a1be <f_lseek+0x2ac>
							ABORT(fp->fs, FR_DISK_ERR);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	71da      	strb	r2, [r3, #7]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fc fdb3 	bl	8006d20 <unlock_fs>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e216      	b.n	800a5ec <f_lseek+0x6da>
						fp->flag &= ~FA__DIRTY;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c4:	799b      	ldrb	r3, [r3, #6]
 800a1c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d2:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1e0:	7858      	ldrb	r0, [r3, #1]
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	69ba      	ldr	r2, [r7, #24]
 800a1e8:	f7fc fcb0 	bl	8006b4c <disk_read>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00e      	beq.n	800a210 <f_lseek+0x2fe>
						ABORT(fp->fs, FR_DISK_ERR);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	71da      	strb	r2, [r3, #7]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2101      	movs	r1, #1
 800a206:	4618      	mov	r0, r3
 800a208:	f7fc fd8a 	bl	8006d20 <unlock_fs>
 800a20c:	2301      	movs	r3, #1
 800a20e:	e1ed      	b.n	800a5ec <f_lseek+0x6da>
#endif
					fp->dsect = dsc;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a216:	461a      	mov	r2, r3
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	6193      	str	r3, [r2, #24]
 800a21c:	e1da      	b.n	800a5d4 <f_lseek+0x6c2>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d90c      	bls.n	800a246 <f_lseek+0x334>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a232:	799b      	ldrb	r3, [r3, #6]
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d104      	bne.n	800a246 <f_lseek+0x334>
#endif
			) ofs = fp->fsize;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a250:	2300      	movs	r3, #0
 800a252:	637b      	str	r3, [r7, #52]	; 0x34
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a25a:	461a      	mov	r2, r3
 800a25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25e:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 8128 	beq.w	800a4b8 <f_lseek+0x5a6>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a274:	789b      	ldrb	r3, [r3, #2]
 800a276:	461a      	mov	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a284:	895b      	ldrh	r3, [r3, #10]
 800a286:	fb02 f303 	mul.w	r3, r2, r3
 800a28a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d021      	beq.n	800a2d6 <f_lseek+0x3c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	1e5a      	subs	r2, r3, #1
 800a296:	69fb      	ldr	r3, [r7, #28]
 800a298:	fbb2 f2f3 	udiv	r2, r2, r3
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	1e59      	subs	r1, r3, #1
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d315      	bcc.n	800a2d6 <f_lseek+0x3c4>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	1e5a      	subs	r2, r3, #1
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	425b      	negs	r3, r3
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2ba:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2d4:	e041      	b.n	800a35a <f_lseek+0x448>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d133      	bne.n	800a34e <f_lseek+0x43c>
					clst = create_chain(fp->fs, 0);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fd fb0d 	bl	8007910 <create_chain>
 800a2f6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d10e      	bne.n	800a31c <f_lseek+0x40a>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a304:	2202      	movs	r2, #2
 800a306:	71da      	strb	r2, [r3, #7]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2102      	movs	r1, #2
 800a312:	4618      	mov	r0, r3
 800a314:	f7fc fd04 	bl	8006d20 <unlock_fs>
 800a318:	2302      	movs	r3, #2
 800a31a:	e167      	b.n	800a5ec <f_lseek+0x6da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a322:	d10e      	bne.n	800a342 <f_lseek+0x430>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a32a:	2201      	movs	r2, #1
 800a32c:	71da      	strb	r2, [r3, #7]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2101      	movs	r1, #1
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fc fcf1 	bl	8006d20 <unlock_fs>
 800a33e:	2301      	movs	r3, #1
 800a340:	e154      	b.n	800a5ec <f_lseek+0x6da>
					fp->sclust = clst;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a348:	461a      	mov	r2, r3
 800a34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34c:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a354:	461a      	mov	r2, r3
 800a356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a358:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 80ab 	beq.w	800a4b8 <f_lseek+0x5a6>
				while (ofs > bcs) {						/* Cluster following loop */
 800a362:	e062      	b.n	800a42a <f_lseek+0x518>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a36a:	799b      	ldrb	r3, [r3, #6]
 800a36c:	f003 0302 	and.w	r3, r3, #2
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00e      	beq.n	800a392 <f_lseek+0x480>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a37e:	4618      	mov	r0, r3
 800a380:	f7fd fac6 	bl	8007910 <create_chain>
 800a384:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10b      	bne.n	800a3a4 <f_lseek+0x492>
							ofs = bcs; break;
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	e04f      	b.n	800a432 <f_lseek+0x520>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7fd f807 	bl	80073b0 <get_fat>
 800a3a2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3aa:	d10e      	bne.n	800a3ca <f_lseek+0x4b8>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	71da      	strb	r2, [r3, #7]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fc fcad 	bl	8006d20 <unlock_fs>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e110      	b.n	800a5ec <f_lseek+0x6da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d909      	bls.n	800a3e4 <f_lseek+0x4d2>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d30e      	bcc.n	800a402 <f_lseek+0x4f0>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	71da      	strb	r2, [r3, #7]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2102      	movs	r1, #2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fc fc91 	bl	8006d20 <unlock_fs>
 800a3fe:	2302      	movs	r3, #2
 800a400:	e0f4      	b.n	800a5ec <f_lseek+0x6da>
					fp->clust = clst;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a408:	461a      	mov	r2, r3
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	4413      	add	r3, r2
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a420:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d898      	bhi.n	800a364 <f_lseek+0x452>
				}
				fp->fptr += ofs;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	4413      	add	r3, r2
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a444:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a452:	895b      	ldrh	r3, [r3, #10]
 800a454:	461a      	mov	r2, r3
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	fbb3 f1f2 	udiv	r1, r3, r2
 800a45c:	fb01 f202 	mul.w	r2, r1, r2
 800a460:	1a9b      	subs	r3, r3, r2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d028      	beq.n	800a4b8 <f_lseek+0x5a6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a470:	4618      	mov	r0, r3
 800a472:	f7fc ff78 	bl	8007366 <clust2sect>
 800a476:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800a478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10e      	bne.n	800a49c <f_lseek+0x58a>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a484:	2202      	movs	r2, #2
 800a486:	71da      	strb	r2, [r3, #7]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2102      	movs	r1, #2
 800a492:	4618      	mov	r0, r3
 800a494:	f7fc fc44 	bl	8006d20 <unlock_fs>
 800a498:	2302      	movs	r3, #2
 800a49a:	e0a7      	b.n	800a5ec <f_lseek+0x6da>
					nsect += ofs / SS(fp->fs);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a8:	895b      	ldrh	r3, [r3, #10]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4b4:	4413      	add	r3, r2
 800a4b6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4cc:	8952      	ldrh	r2, [r2, #10]
 800a4ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4d2:	fb01 f202 	mul.w	r2, r1, r2
 800a4d6:	1a9b      	subs	r3, r3, r2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d05e      	beq.n	800a59a <f_lseek+0x688>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d057      	beq.n	800a59a <f_lseek+0x688>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f0:	799b      	ldrb	r3, [r3, #6]
 800a4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d02b      	beq.n	800a552 <f_lseek+0x640>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a506:	7858      	ldrb	r0, [r3, #1]
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	2301      	movs	r3, #1
 800a514:	f7fc fb3a 	bl	8006b8c <disk_write>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00e      	beq.n	800a53c <f_lseek+0x62a>
					ABORT(fp->fs, FR_DISK_ERR);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a524:	2201      	movs	r2, #1
 800a526:	71da      	strb	r2, [r3, #7]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2101      	movs	r1, #1
 800a532:	4618      	mov	r0, r3
 800a534:	f7fc fbf4 	bl	8006d20 <unlock_fs>
 800a538:	2301      	movs	r3, #1
 800a53a:	e057      	b.n	800a5ec <f_lseek+0x6da>
				fp->flag &= ~FA__DIRTY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a542:	799b      	ldrb	r3, [r3, #6]
 800a544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a550:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a55e:	7858      	ldrb	r0, [r3, #1]
 800a560:	6879      	ldr	r1, [r7, #4]
 800a562:	2301      	movs	r3, #1
 800a564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a566:	f7fc faf1 	bl	8006b4c <disk_read>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00e      	beq.n	800a58e <f_lseek+0x67c>
				ABORT(fp->fs, FR_DISK_ERR);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a576:	2201      	movs	r2, #1
 800a578:	71da      	strb	r2, [r3, #7]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2101      	movs	r1, #1
 800a584:	4618      	mov	r0, r3
 800a586:	f7fc fbcb 	bl	8006d20 <unlock_fs>
 800a58a:	2301      	movs	r3, #1
 800a58c:	e02e      	b.n	800a5ec <f_lseek+0x6da>
#endif
			fp->dsect = nsect;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a594:	461a      	mov	r2, r3
 800a596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a598:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a0:	689a      	ldr	r2, [r3, #8]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d912      	bls.n	800a5d4 <f_lseek+0x6c2>
			fp->fsize = fp->fptr;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5bc:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5c4:	799b      	ldrb	r3, [r3, #6]
 800a5c6:	f043 0320 	orr.w	r3, r3, #32
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d2:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fc fb9c 	bl	8006d20 <unlock_fs>
 800a5e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3740      	adds	r7, #64	; 0x40
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08e      	sub	sp, #56	; 0x38
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 800a600:	f107 030c 	add.w	r3, r7, #12
 800a604:	2200      	movs	r2, #0
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7fd ffa3 	bl	8008554 <find_volume>
 800a60e:	4603      	mov	r3, r0
 800a610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800a61a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f040 80bc 	bne.w	800a79c <f_getfree+0x1a8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a62a:	695a      	ldr	r2, [r3, #20]
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	3b02      	subs	r3, #2
 800a636:	429a      	cmp	r2, r3
 800a638:	d806      	bhi.n	800a648 <f_getfree+0x54>
			*nclst = fs->free_clust;
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a640:	695a      	ldr	r2, [r3, #20]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e0a9      	b.n	800a79c <f_getfree+0x1a8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	76fb      	strb	r3, [r7, #27]
			n = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800a656:	7efb      	ldrb	r3, [r7, #27]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d126      	bne.n	800a6aa <f_getfree+0xb6>
				clst = 2;
 800a65c:	2302      	movs	r3, #2
 800a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 800a660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a662:	69f8      	ldr	r0, [r7, #28]
 800a664:	f7fc fea4 	bl	80073b0 <get_fat>
 800a668:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a670:	d103      	bne.n	800a67a <f_getfree+0x86>
 800a672:	2301      	movs	r3, #1
 800a674:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a678:	e07c      	b.n	800a774 <f_getfree+0x180>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d103      	bne.n	800a688 <f_getfree+0x94>
 800a680:	2302      	movs	r3, #2
 800a682:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a686:	e075      	b.n	800a774 <f_getfree+0x180>
					if (stat == 0) n++;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <f_getfree+0xa0>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a690:	3301      	adds	r3, #1
 800a692:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	3301      	adds	r3, #1
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d3db      	bcc.n	800a660 <f_getfree+0x6c>
 800a6a8:	e064      	b.n	800a774 <f_getfree+0x180>
			} else {
				clst = fs->n_fatent;
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d114      	bne.n	800a6f6 <f_getfree+0x102>
						res = move_window(fs, sect++);
 800a6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	62ba      	str	r2, [r7, #40]	; 0x28
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	69f8      	ldr	r0, [r7, #28]
 800a6d6:	f7fc fd55 	bl	8007184 <move_window>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800a6e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d144      	bne.n	800a772 <f_getfree+0x17e>
						p = fs->win.d8;
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f2:	895b      	ldrh	r3, [r3, #10]
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800a6f6:	7efb      	ldrb	r3, [r7, #27]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d115      	bne.n	800a728 <f_getfree+0x134>
						if (LD_WORD(p) == 0) n++;
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	3301      	adds	r3, #1
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	b21a      	sxth	r2, r3
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	b21b      	sxth	r3, r3
 800a70c:	4313      	orrs	r3, r2
 800a70e:	b21b      	sxth	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d102      	bne.n	800a71a <f_getfree+0x126>
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	3301      	adds	r3, #1
 800a718:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	3302      	adds	r3, #2
 800a71e:	623b      	str	r3, [r7, #32]
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	3b02      	subs	r3, #2
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
 800a726:	e01d      	b.n	800a764 <f_getfree+0x170>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 800a728:	6a3b      	ldr	r3, [r7, #32]
 800a72a:	3303      	adds	r3, #3
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	061a      	lsls	r2, r3, #24
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	3302      	adds	r3, #2
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	041b      	lsls	r3, r3, #16
 800a738:	4313      	orrs	r3, r2
 800a73a:	6a3a      	ldr	r2, [r7, #32]
 800a73c:	3201      	adds	r2, #1
 800a73e:	7812      	ldrb	r2, [r2, #0]
 800a740:	0212      	lsls	r2, r2, #8
 800a742:	4313      	orrs	r3, r2
 800a744:	6a3a      	ldr	r2, [r7, #32]
 800a746:	7812      	ldrb	r2, [r2, #0]
 800a748:	4313      	orrs	r3, r2
 800a74a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d102      	bne.n	800a758 <f_getfree+0x164>
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	3301      	adds	r3, #1
 800a756:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	3304      	adds	r3, #4
 800a75c:	623b      	str	r3, [r7, #32]
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	3b04      	subs	r3, #4
 800a762:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	3b01      	subs	r3, #1
 800a768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1aa      	bne.n	800a6c6 <f_getfree+0xd2>
 800a770:	e000      	b.n	800a774 <f_getfree+0x180>
						if (res != FR_OK) break;
 800a772:	bf00      	nop
			}
			fs->free_clust = n;
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77a:	461a      	mov	r2, r3
 800a77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77e:	6153      	str	r3, [r2, #20]
			fs->fsi_flag |= 1;
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a786:	795b      	ldrb	r3, [r3, #5]
 800a788:	f043 0301 	orr.w	r3, r3, #1
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a794:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a79a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800a79c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	69f8      	ldr	r0, [r7, #28]
 800a7a4:	f7fc fabc 	bl	8006d20 <unlock_fs>
 800a7a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3738      	adds	r7, #56	; 0x38
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7fe fa03 	bl	8008bc8 <validate>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d115      	bne.n	800a7f8 <f_truncate+0x44>
		if (fp->err) {						/* Check error */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d2:	79db      	ldrb	r3, [r3, #7]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d005      	beq.n	800a7e4 <f_truncate+0x30>
			res = (FRESULT)fp->err;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7de:	79db      	ldrb	r3, [r3, #7]
 800a7e0:	73fb      	strb	r3, [r7, #15]
 800a7e2:	e009      	b.n	800a7f8 <f_truncate+0x44>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ea:	799b      	ldrb	r3, [r3, #6]
 800a7ec:	f003 0302 	and.w	r3, r3, #2
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <f_truncate+0x44>
				res = FR_DENIED;
 800a7f4:	2307      	movs	r3, #7
 800a7f6:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f040 80b0 	bne.w	800a960 <f_truncate+0x1ac>
		if (fp->fsize > fp->fptr) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a806:	68da      	ldr	r2, [r3, #12]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	429a      	cmp	r2, r3
 800a812:	f240 809c 	bls.w	800a94e <f_truncate+0x19a>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a824:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a82c:	799b      	ldrb	r3, [r3, #6]
 800a82e:	f043 0320 	orr.w	r3, r3, #32
 800a832:	b2da      	uxtb	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a83a:	719a      	strb	r2, [r3, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d114      	bne.n	800a872 <f_truncate+0xbe>
				res = remove_chain(fp->fs, fp->sclust);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	4619      	mov	r1, r3
 800a85a:	4610      	mov	r0, r2
 800a85c:	f7fc fff7 	bl	800784e <remove_chain>
 800a860:	4603      	mov	r3, r0
 800a862:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86a:	461a      	mov	r2, r3
 800a86c:	2300      	movs	r3, #0
 800a86e:	6113      	str	r3, [r2, #16]
 800a870:	e042      	b.n	800a8f8 <f_truncate+0x144>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	4619      	mov	r1, r3
 800a884:	4610      	mov	r0, r2
 800a886:	f7fc fd93 	bl	80073b0 <get_fat>
 800a88a:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a896:	d101      	bne.n	800a89c <f_truncate+0xe8>
 800a898:	2301      	movs	r3, #1
 800a89a:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d101      	bne.n	800a8a6 <f_truncate+0xf2>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d125      	bne.n	800a8f8 <f_truncate+0x144>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d21b      	bcs.n	800a8f8 <f_truncate+0x144>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	f7fc fe67 	bl	80075a8 <put_fat>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d109      	bne.n	800a8f8 <f_truncate+0x144>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68b9      	ldr	r1, [r7, #8]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fc ffad 	bl	800784e <remove_chain>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d127      	bne.n	800a94e <f_truncate+0x19a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a904:	799b      	ldrb	r3, [r3, #6]
 800a906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d01f      	beq.n	800a94e <f_truncate+0x19a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a91a:	7858      	ldrb	r0, [r3, #1]
 800a91c:	6879      	ldr	r1, [r7, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a924:	699a      	ldr	r2, [r3, #24]
 800a926:	2301      	movs	r3, #1
 800a928:	f7fc f930 	bl	8006b8c <disk_write>
 800a92c:	4603      	mov	r3, r0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <f_truncate+0x184>
					res = FR_DISK_ERR;
 800a932:	2301      	movs	r3, #1
 800a934:	73fb      	strb	r3, [r7, #15]
 800a936:	e00a      	b.n	800a94e <f_truncate+0x19a>
				else
					fp->flag &= ~FA__DIRTY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a93e:	799b      	ldrb	r3, [r3, #6]
 800a940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a944:	b2da      	uxtb	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a94c:	719a      	strb	r2, [r3, #6]
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 800a94e:	7bfb      	ldrb	r3, [r7, #15]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <f_truncate+0x1ac>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a95a:	461a      	mov	r2, r3
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
 800a95e:	71d3      	strb	r3, [r2, #7]
	}

	LEAVE_FF(fp->fs, res);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	7bfa      	ldrb	r2, [r7, #15]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fc f9d7 	bl	8006d20 <unlock_fs>
 800a972:	7bfb      	ldrb	r3, [r7, #15]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	2b0a      	cmp	r3, #10
 800a98c:	d103      	bne.n	800a996 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a98e:	210d      	movs	r1, #13
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fff3 	bl	800a97c <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	db25      	blt.n	800a9ee <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	60fa      	str	r2, [r7, #12]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	78fa      	ldrb	r2, [r7, #3]
 800a9ae:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b3c      	cmp	r3, #60	; 0x3c
 800a9b4:	dd12      	ble.n	800a9dc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6818      	ldr	r0, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f103 010c 	add.w	r1, r3, #12
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	f107 0308 	add.w	r3, r7, #8
 800a9c6:	f7fe ff03 	bl	80097d0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d101      	bne.n	800a9d6 <putc_bfd+0x5a>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e001      	b.n	800a9da <putc_bfd+0x5e>
 800a9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9da:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	1c5a      	adds	r2, r3, #1
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	609a      	str	r2, [r3, #8]
 800a9ec:	e000      	b.n	800a9f0 <putc_bfd+0x74>
	if (i < 0) return;
 800a9ee:	bf00      	nop
}
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a9f6:	b590      	push	{r4, r7, lr}
 800a9f8:	b097      	sub	sp, #92	; 0x5c
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	613b      	str	r3, [r7, #16]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800aa0c:	e009      	b.n	800aa22 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	781a      	ldrb	r2, [r3, #0]
 800aa16:	f107 030c 	add.w	r3, r7, #12
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7ff ffad 	bl	800a97c <putc_bfd>
	while (*str)			/* Put the string */
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1f1      	bne.n	800aa0e <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	db15      	blt.n	800aa5c <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	461c      	mov	r4, r3
 800aa36:	f107 0208 	add.w	r2, r7, #8
 800aa3a:	f107 030c 	add.w	r3, r7, #12
 800aa3e:	f103 010c 	add.w	r1, r3, #12
 800aa42:	4613      	mov	r3, r2
 800aa44:	4622      	mov	r2, r4
 800aa46:	f7fe fec3 	bl	80097d0 <f_write>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d105      	bne.n	800aa5c <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d101      	bne.n	800aa5c <f_puts+0x66>
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	e001      	b.n	800aa60 <f_puts+0x6a>
	return EOF;
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	375c      	adds	r7, #92	; 0x5c
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd90      	pop	{r4, r7, pc}

0800aa68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	4613      	mov	r3, r2
 800aa74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa76:	2301      	movs	r3, #1
 800aa78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800aa7e:	4b1f      	ldr	r3, [pc, #124]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aa80:	7a5b      	ldrb	r3, [r3, #9]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d831      	bhi.n	800aaec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa88:	4b1c      	ldr	r3, [pc, #112]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aa8a:	7a5b      	ldrb	r3, [r3, #9]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	461a      	mov	r2, r3
 800aa90:	4b1a      	ldr	r3, [pc, #104]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aa92:	2100      	movs	r1, #0
 800aa94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800aa96:	4b19      	ldr	r3, [pc, #100]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aa98:	7a5b      	ldrb	r3, [r3, #9]
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	4a17      	ldr	r2, [pc, #92]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800aaa6:	4b15      	ldr	r3, [pc, #84]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aaa8:	7a5b      	ldrb	r3, [r3, #9]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	461a      	mov	r2, r3
 800aaae:	4b13      	ldr	r3, [pc, #76]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aab0:	4413      	add	r3, r2
 800aab2:	79fa      	ldrb	r2, [r7, #7]
 800aab4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aab6:	4b11      	ldr	r3, [pc, #68]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aab8:	7a5b      	ldrb	r3, [r3, #9]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	1c5a      	adds	r2, r3, #1
 800aabe:	b2d1      	uxtb	r1, r2
 800aac0:	4a0e      	ldr	r2, [pc, #56]	; (800aafc <FATFS_LinkDriverEx+0x94>)
 800aac2:	7251      	strb	r1, [r2, #9]
 800aac4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aac6:	7dbb      	ldrb	r3, [r7, #22]
 800aac8:	3330      	adds	r3, #48	; 0x30
 800aaca:	b2da      	uxtb	r2, r3
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	3301      	adds	r3, #1
 800aad4:	223a      	movs	r2, #58	; 0x3a
 800aad6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	3302      	adds	r3, #2
 800aadc:	222f      	movs	r2, #47	; 0x2f
 800aade:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	3303      	adds	r3, #3
 800aae4:	2200      	movs	r2, #0
 800aae6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aae8:	2300      	movs	r3, #0
 800aaea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800aaec:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	371c      	adds	r7, #28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	200022d0 	.word	0x200022d0

0800ab00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7ff ffaa 	bl	800aa68 <FATFS_LinkDriverEx>
 800ab14:	4603      	mov	r3, r0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	4603      	mov	r3, r0
 800ab26:	6039      	str	r1, [r7, #0]
 800ab28:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60bb      	str	r3, [r7, #8]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800ab2e:	f107 0308 	add.w	r3, r7, #8
 800ab32:	2101      	movs	r1, #1
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 f8a8 	bl	800ac8a <osSemaphoreCreate>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bf14      	ite	ne
 800ab48:	2301      	movne	r3, #1
 800ab4a:	2300      	moveq	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 800ab50:	68fb      	ldr	r3, [r7, #12]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f934 	bl	800add0 <osSemaphoreDelete>
  return 1;
 800ab68:	2301      	movs	r3, #1
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ab7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f8a0 	bl	800acc8 <osSemaphoreWait>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d101      	bne.n	800ab92 <ff_req_grant+0x20>
  {
    ret = 1;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800ab92:	68fb      	ldr	r3, [r7, #12]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f8dd 	bl	800ad64 <osSemaphoreRelease>
}
 800abaa:	bf00      	nop
 800abac:	3708      	adds	r7, #8
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b085      	sub	sp, #20
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	4603      	mov	r3, r0
 800abba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800abc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800abc4:	2b84      	cmp	r3, #132	; 0x84
 800abc6:	d005      	beq.n	800abd4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800abc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	3303      	adds	r3, #3
 800abd2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800abd4:	68fb      	ldr	r3, [r7, #12]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abe8:	f3ef 8305 	mrs	r3, IPSR
 800abec:	607b      	str	r3, [r7, #4]
  return(result);
 800abee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bf14      	ite	ne
 800abf4:	2301      	movne	r3, #1
 800abf6:	2300      	moveq	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ac0a:	f001 f869 	bl	800bce0 <vTaskStartScheduler>
  
  return osOK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ac14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af02      	add	r7, sp, #8
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	685c      	ldr	r4, [r3, #4]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ac2a:	b29e      	uxth	r6, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7ff ffbd 	bl	800abb2 <makeFreeRtosPriority>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	f107 030c 	add.w	r3, r7, #12
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	9200      	str	r2, [sp, #0]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	4632      	mov	r2, r6
 800ac46:	4629      	mov	r1, r5
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 fed3 	bl	800b9f4 <xTaskCreate>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d001      	beq.n	800ac58 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800ac54:	2300      	movs	r3, #0
 800ac56:	e000      	b.n	800ac5a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800ac58:	68fb      	ldr	r3, [r7, #12]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b084      	sub	sp, #16
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <osDelay+0x16>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	e000      	b.n	800ac7a <osDelay+0x18>
 800ac78:	2301      	movs	r3, #1
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 fffc 	bl	800bc78 <vTaskDelay>
  
  return osOK;
 800ac80:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d110      	bne.n	800acbc <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800ac9a:	2203      	movs	r2, #3
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	2001      	movs	r0, #1
 800aca0:	f000 f9c6 	bl	800b030 <xQueueGenericCreate>
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <osSemaphoreCreate+0x2e>
 800acac:	2300      	movs	r3, #0
 800acae:	2200      	movs	r2, #0
 800acb0:	2100      	movs	r1, #0
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 fa16 	bl	800b0e4 <xQueueGenericSend>
    return sema;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	e000      	b.n	800acbe <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800acbc:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800acd2:	2300      	movs	r3, #0
 800acd4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800acdc:	2380      	movs	r3, #128	; 0x80
 800acde:	e03a      	b.n	800ad56 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acea:	d103      	bne.n	800acf4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800acec:	f04f 33ff 	mov.w	r3, #4294967295
 800acf0:	60fb      	str	r3, [r7, #12]
 800acf2:	e009      	b.n	800ad08 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d006      	beq.n	800ad08 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <osSemaphoreWait+0x40>
      ticks = 1;
 800ad04:	2301      	movs	r3, #1
 800ad06:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ad08:	f7ff ff6b 	bl	800abe2 <inHandlerMode>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d017      	beq.n	800ad42 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ad12:	f107 0308 	add.w	r3, r7, #8
 800ad16:	461a      	mov	r2, r3
 800ad18:	2100      	movs	r1, #0
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fc7a 	bl	800b614 <xQueueReceiveFromISR>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d001      	beq.n	800ad2a <osSemaphoreWait+0x62>
      return osErrorOS;
 800ad26:	23ff      	movs	r3, #255	; 0xff
 800ad28:	e015      	b.n	800ad56 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d011      	beq.n	800ad54 <osSemaphoreWait+0x8c>
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <osSemaphoreWait+0x98>)
 800ad32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	e008      	b.n	800ad54 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ad42:	68f9      	ldr	r1, [r7, #12]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fb59 	bl	800b3fc <xQueueSemaphoreTake>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d001      	beq.n	800ad54 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ad50:	23ff      	movs	r3, #255	; 0xff
 800ad52:	e000      	b.n	800ad56 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	e000ed04 	.word	0xe000ed04

0800ad64 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad70:	2300      	movs	r3, #0
 800ad72:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ad74:	f7ff ff35 	bl	800abe2 <inHandlerMode>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d016      	beq.n	800adac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ad7e:	f107 0308 	add.w	r3, r7, #8
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 faab 	bl	800b2e0 <xQueueGiveFromISR>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d001      	beq.n	800ad94 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ad90:	23ff      	movs	r3, #255	; 0xff
 800ad92:	e017      	b.n	800adc4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d013      	beq.n	800adc2 <osSemaphoreRelease+0x5e>
 800ad9a:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <osSemaphoreRelease+0x68>)
 800ad9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada0:	601a      	str	r2, [r3, #0]
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	e00a      	b.n	800adc2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800adac:	2300      	movs	r3, #0
 800adae:	2200      	movs	r2, #0
 800adb0:	2100      	movs	r1, #0
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f996 	bl	800b0e4 <xQueueGenericSend>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d001      	beq.n	800adc2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800adbe:	23ff      	movs	r3, #255	; 0xff
 800adc0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800adc2:	68fb      	ldr	r3, [r7, #12]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	e000ed04 	.word	0xe000ed04

0800add0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800add8:	f7ff ff03 	bl	800abe2 <inHandlerMode>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800ade2:	2382      	movs	r3, #130	; 0x82
 800ade4:	e003      	b.n	800adee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fc94 	bl	800b714 <vQueueDelete>

  return osOK; 
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f103 0208 	add.w	r2, r3, #8
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f103 0208 	add.w	r2, r3, #8
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f103 0208 	add.w	r2, r3, #8
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ae2a:	bf00      	nop
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689a      	ldr	r2, [r3, #8]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
}
 800ae8c:	bf00      	nop
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeae:	d103      	bne.n	800aeb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	60fb      	str	r3, [r7, #12]
 800aeb6:	e00c      	b.n	800aed2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3308      	adds	r3, #8
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e002      	b.n	800aec6 <vListInsert+0x2e>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d2f6      	bcs.n	800aec0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	1c5a      	adds	r2, r3, #1
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	601a      	str	r2, [r3, #0]
}
 800aefe:	bf00      	nop
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800af0a:	b480      	push	{r7}
 800af0c:	b085      	sub	sp, #20
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	6892      	ldr	r2, [r2, #8]
 800af20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	6852      	ldr	r2, [r2, #4]
 800af2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	429a      	cmp	r2, r3
 800af34:	d103      	bne.n	800af3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	689a      	ldr	r2, [r3, #8]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	1e5a      	subs	r2, r3, #1
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
	...

0800af60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800af8a:	f001 fe03 	bl	800cb94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af96:	68f9      	ldr	r1, [r7, #12]
 800af98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af9a:	fb01 f303 	mul.w	r3, r1, r3
 800af9e:	441a      	add	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afba:	3b01      	subs	r3, #1
 800afbc:	68f9      	ldr	r1, [r7, #12]
 800afbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800afc0:	fb01 f303 	mul.w	r3, r1, r3
 800afc4:	441a      	add	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	22ff      	movs	r2, #255	; 0xff
 800afce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	22ff      	movs	r2, #255	; 0xff
 800afd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d114      	bne.n	800b00a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d01a      	beq.n	800b01e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3310      	adds	r3, #16
 800afec:	4618      	mov	r0, r3
 800afee:	f001 f8b5 	bl	800c15c <xTaskRemoveFromEventList>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d012      	beq.n	800b01e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aff8:	4b0c      	ldr	r3, [pc, #48]	; (800b02c <xQueueGenericReset+0xcc>)
 800affa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	e009      	b.n	800b01e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3310      	adds	r3, #16
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff fef1 	bl	800adf6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3324      	adds	r3, #36	; 0x24
 800b018:	4618      	mov	r0, r3
 800b01a:	f7ff feec 	bl	800adf6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b01e:	f001 fde9 	bl	800cbf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b022:	2301      	movs	r3, #1
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	e000ed04 	.word	0xe000ed04

0800b030 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b030:	b580      	push	{r7, lr}
 800b032:	b08a      	sub	sp, #40	; 0x28
 800b034:	af02      	add	r7, sp, #8
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	4613      	mov	r3, r2
 800b03c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10a      	bne.n	800b05a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	613b      	str	r3, [r7, #16]
}
 800b056:	bf00      	nop
 800b058:	e7fe      	b.n	800b058 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d102      	bne.n	800b066 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b060:	2300      	movs	r3, #0
 800b062:	61fb      	str	r3, [r7, #28]
 800b064:	e004      	b.n	800b070 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
 800b06e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	3348      	adds	r3, #72	; 0x48
 800b074:	4618      	mov	r0, r3
 800b076:	f001 feaf 	bl	800cdd8 <pvPortMalloc>
 800b07a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00b      	beq.n	800b09a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	3348      	adds	r3, #72	; 0x48
 800b086:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b088:	79fa      	ldrb	r2, [r7, #7]
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	4613      	mov	r3, r2
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	68b9      	ldr	r1, [r7, #8]
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f000 f805 	bl	800b0a4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800b09a:	69bb      	ldr	r3, [r7, #24]
	}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d103      	bne.n	800b0c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	69ba      	ldr	r2, [r7, #24]
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	e002      	b.n	800b0c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0d2:	2101      	movs	r1, #1
 800b0d4:	69b8      	ldr	r0, [r7, #24]
 800b0d6:	f7ff ff43 	bl	800af60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0da:	bf00      	nop
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08e      	sub	sp, #56	; 0x38
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <xQueueGenericSend+0x32>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d103      	bne.n	800b124 <xQueueGenericSend+0x40>
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b120:	2b00      	cmp	r3, #0
 800b122:	d101      	bne.n	800b128 <xQueueGenericSend+0x44>
 800b124:	2301      	movs	r3, #1
 800b126:	e000      	b.n	800b12a <xQueueGenericSend+0x46>
 800b128:	2300      	movs	r3, #0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10a      	bne.n	800b144 <xQueueGenericSend+0x60>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d103      	bne.n	800b152 <xQueueGenericSend+0x6e>
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d101      	bne.n	800b156 <xQueueGenericSend+0x72>
 800b152:	2301      	movs	r3, #1
 800b154:	e000      	b.n	800b158 <xQueueGenericSend+0x74>
 800b156:	2300      	movs	r3, #0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10a      	bne.n	800b172 <xQueueGenericSend+0x8e>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	623b      	str	r3, [r7, #32]
}
 800b16e:	bf00      	nop
 800b170:	e7fe      	b.n	800b170 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b172:	f001 f99b 	bl	800c4ac <xTaskGetSchedulerState>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <xQueueGenericSend+0x9e>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d101      	bne.n	800b186 <xQueueGenericSend+0xa2>
 800b182:	2301      	movs	r3, #1
 800b184:	e000      	b.n	800b188 <xQueueGenericSend+0xa4>
 800b186:	2300      	movs	r3, #0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	f383 8811 	msr	BASEPRI, r3
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	61fb      	str	r3, [r7, #28]
}
 800b19e:	bf00      	nop
 800b1a0:	e7fe      	b.n	800b1a0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1a2:	f001 fcf7 	bl	800cb94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d302      	bcc.n	800b1b8 <xQueueGenericSend+0xd4>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d129      	bne.n	800b20c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	68b9      	ldr	r1, [r7, #8]
 800b1bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1be:	f000 fadf 	bl	800b780 <prvCopyDataToQueue>
 800b1c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d010      	beq.n	800b1ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ce:	3324      	adds	r3, #36	; 0x24
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 ffc3 	bl	800c15c <xTaskRemoveFromEventList>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d013      	beq.n	800b204 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1dc:	4b3f      	ldr	r3, [pc, #252]	; (800b2dc <xQueueGenericSend+0x1f8>)
 800b1de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	e00a      	b.n	800b204 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d007      	beq.n	800b204 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1f4:	4b39      	ldr	r3, [pc, #228]	; (800b2dc <xQueueGenericSend+0x1f8>)
 800b1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1fa:	601a      	str	r2, [r3, #0]
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b204:	f001 fcf6 	bl	800cbf4 <vPortExitCritical>
				return pdPASS;
 800b208:	2301      	movs	r3, #1
 800b20a:	e063      	b.n	800b2d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d103      	bne.n	800b21a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b212:	f001 fcef 	bl	800cbf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b216:	2300      	movs	r3, #0
 800b218:	e05c      	b.n	800b2d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b220:	f107 0314 	add.w	r3, r7, #20
 800b224:	4618      	mov	r0, r3
 800b226:	f000 fffb 	bl	800c220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b22a:	2301      	movs	r3, #1
 800b22c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b22e:	f001 fce1 	bl	800cbf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b232:	f000 fda5 	bl	800bd80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b236:	f001 fcad 	bl	800cb94 <vPortEnterCritical>
 800b23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b240:	b25b      	sxtb	r3, r3
 800b242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b246:	d103      	bne.n	800b250 <xQueueGenericSend+0x16c>
 800b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b256:	b25b      	sxtb	r3, r3
 800b258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25c:	d103      	bne.n	800b266 <xQueueGenericSend+0x182>
 800b25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b266:	f001 fcc5 	bl	800cbf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b26a:	1d3a      	adds	r2, r7, #4
 800b26c:	f107 0314 	add.w	r3, r7, #20
 800b270:	4611      	mov	r1, r2
 800b272:	4618      	mov	r0, r3
 800b274:	f000 ffea 	bl	800c24c <xTaskCheckForTimeOut>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d124      	bne.n	800b2c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b27e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b280:	f000 fb76 	bl	800b970 <prvIsQueueFull>
 800b284:	4603      	mov	r3, r0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d018      	beq.n	800b2bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28c:	3310      	adds	r3, #16
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	4611      	mov	r1, r2
 800b292:	4618      	mov	r0, r3
 800b294:	f000 ff3e 	bl	800c114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b29a:	f000 fb01 	bl	800b8a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b29e:	f000 fd7d 	bl	800bd9c <xTaskResumeAll>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f47f af7c 	bne.w	800b1a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b2aa:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <xQueueGenericSend+0x1f8>)
 800b2ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	e772      	b.n	800b1a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2be:	f000 faef 	bl	800b8a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2c2:	f000 fd6b 	bl	800bd9c <xTaskResumeAll>
 800b2c6:	e76c      	b.n	800b1a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2ca:	f000 fae9 	bl	800b8a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2ce:	f000 fd65 	bl	800bd9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2d2:	2300      	movs	r3, #0
		}
	}
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3738      	adds	r7, #56	; 0x38
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	e000ed04 	.word	0xe000ed04

0800b2e0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b08e      	sub	sp, #56	; 0x38
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d10a      	bne.n	800b30a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	623b      	str	r3, [r7, #32]
}
 800b306:	bf00      	nop
 800b308:	e7fe      	b.n	800b308 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00a      	beq.n	800b328 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	61fb      	str	r3, [r7, #28]
}
 800b324:	bf00      	nop
 800b326:	e7fe      	b.n	800b326 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d103      	bne.n	800b338 <xQueueGiveFromISR+0x58>
 800b330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <xQueueGiveFromISR+0x5c>
 800b338:	2301      	movs	r3, #1
 800b33a:	e000      	b.n	800b33e <xQueueGiveFromISR+0x5e>
 800b33c:	2300      	movs	r3, #0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10a      	bne.n	800b358 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	61bb      	str	r3, [r7, #24]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b358:	f001 fcfe 	bl	800cd58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b35c:	f3ef 8211 	mrs	r2, BASEPRI
 800b360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	617a      	str	r2, [r7, #20]
 800b372:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b374:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b376:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b384:	429a      	cmp	r2, r3
 800b386:	d22b      	bcs.n	800b3e0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b394:	1c5a      	adds	r2, r3, #1
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b39a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a2:	d112      	bne.n	800b3ca <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d016      	beq.n	800b3da <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	3324      	adds	r3, #36	; 0x24
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f000 fed3 	bl	800c15c <xTaskRemoveFromEventList>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00e      	beq.n	800b3da <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00b      	beq.n	800b3da <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	601a      	str	r2, [r3, #0]
 800b3c8:	e007      	b.n	800b3da <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	b25a      	sxtb	r2, r3
 800b3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b3de:	e001      	b.n	800b3e4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3738      	adds	r7, #56	; 0x38
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
	...

0800b3fc <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b08e      	sub	sp, #56	; 0x38
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b406:	2300      	movs	r3, #0
 800b408:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b40e:	2300      	movs	r3, #0
 800b410:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10a      	bne.n	800b42e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	623b      	str	r3, [r7, #32]
}
 800b42a:	bf00      	nop
 800b42c:	e7fe      	b.n	800b42c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00a      	beq.n	800b44c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	61fb      	str	r3, [r7, #28]
}
 800b448:	bf00      	nop
 800b44a:	e7fe      	b.n	800b44a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b44c:	f001 f82e 	bl	800c4ac <xTaskGetSchedulerState>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d102      	bne.n	800b45c <xQueueSemaphoreTake+0x60>
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <xQueueSemaphoreTake+0x64>
 800b45c:	2301      	movs	r3, #1
 800b45e:	e000      	b.n	800b462 <xQueueSemaphoreTake+0x66>
 800b460:	2300      	movs	r3, #0
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10a      	bne.n	800b47c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	61bb      	str	r3, [r7, #24]
}
 800b478:	bf00      	nop
 800b47a:	e7fe      	b.n	800b47a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b47c:	f001 fb8a 	bl	800cb94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b484:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d024      	beq.n	800b4d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	1e5a      	subs	r2, r3, #1
 800b490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b492:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d104      	bne.n	800b4a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800b49c:	f001 f9d0 	bl	800c840 <pvTaskIncrementMutexHeldCount>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00f      	beq.n	800b4ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	3310      	adds	r3, #16
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 fe52 	bl	800c15c <xTaskRemoveFromEventList>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d007      	beq.n	800b4ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4be:	4b54      	ldr	r3, [pc, #336]	; (800b610 <xQueueSemaphoreTake+0x214>)
 800b4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4ce:	f001 fb91 	bl	800cbf4 <vPortExitCritical>
				return pdPASS;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e097      	b.n	800b606 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d111      	bne.n	800b500 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e6:	f383 8811 	msr	BASEPRI, r3
 800b4ea:	f3bf 8f6f 	isb	sy
 800b4ee:	f3bf 8f4f 	dsb	sy
 800b4f2:	617b      	str	r3, [r7, #20]
}
 800b4f4:	bf00      	nop
 800b4f6:	e7fe      	b.n	800b4f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b4f8:	f001 fb7c 	bl	800cbf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	e082      	b.n	800b606 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b502:	2b00      	cmp	r3, #0
 800b504:	d106      	bne.n	800b514 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b506:	f107 030c 	add.w	r3, r7, #12
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 fe88 	bl	800c220 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b510:	2301      	movs	r3, #1
 800b512:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b514:	f001 fb6e 	bl	800cbf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b518:	f000 fc32 	bl	800bd80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b51c:	f001 fb3a 	bl	800cb94 <vPortEnterCritical>
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b526:	b25b      	sxtb	r3, r3
 800b528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52c:	d103      	bne.n	800b536 <xQueueSemaphoreTake+0x13a>
 800b52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b53c:	b25b      	sxtb	r3, r3
 800b53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b542:	d103      	bne.n	800b54c <xQueueSemaphoreTake+0x150>
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	2200      	movs	r2, #0
 800b548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b54c:	f001 fb52 	bl	800cbf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b550:	463a      	mov	r2, r7
 800b552:	f107 030c 	add.w	r3, r7, #12
 800b556:	4611      	mov	r1, r2
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fe77 	bl	800c24c <xTaskCheckForTimeOut>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d132      	bne.n	800b5ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b566:	f000 f9ed 	bl	800b944 <prvIsQueueEmpty>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d026      	beq.n	800b5be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b578:	f001 fb0c 	bl	800cb94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800b57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	4618      	mov	r0, r3
 800b582:	f000 ffb1 	bl	800c4e8 <xTaskPriorityInherit>
 800b586:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b588:	f001 fb34 	bl	800cbf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58e:	3324      	adds	r3, #36	; 0x24
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	4611      	mov	r1, r2
 800b594:	4618      	mov	r0, r3
 800b596:	f000 fdbd 	bl	800c114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b59a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b59c:	f000 f980 	bl	800b8a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5a0:	f000 fbfc 	bl	800bd9c <xTaskResumeAll>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f47f af68 	bne.w	800b47c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b5ac:	4b18      	ldr	r3, [pc, #96]	; (800b610 <xQueueSemaphoreTake+0x214>)
 800b5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	e75e      	b.n	800b47c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b5be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5c0:	f000 f96e 	bl	800b8a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5c4:	f000 fbea 	bl	800bd9c <xTaskResumeAll>
 800b5c8:	e758      	b.n	800b47c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b5ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5cc:	f000 f968 	bl	800b8a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5d0:	f000 fbe4 	bl	800bd9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5d6:	f000 f9b5 	bl	800b944 <prvIsQueueEmpty>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f43f af4d 	beq.w	800b47c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00d      	beq.n	800b604 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b5e8:	f001 fad4 	bl	800cb94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b5ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5ee:	f000 f8af 	bl	800b750 <prvGetDisinheritPriorityAfterTimeout>
 800b5f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800b5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 f880 	bl	800c700 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b600:	f001 faf8 	bl	800cbf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b606:	4618      	mov	r0, r3
 800b608:	3738      	adds	r7, #56	; 0x38
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08e      	sub	sp, #56	; 0x38
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	623b      	str	r3, [r7, #32]
}
 800b63c:	bf00      	nop
 800b63e:	e7fe      	b.n	800b63e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d103      	bne.n	800b64e <xQueueReceiveFromISR+0x3a>
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <xQueueReceiveFromISR+0x3e>
 800b64e:	2301      	movs	r3, #1
 800b650:	e000      	b.n	800b654 <xQueueReceiveFromISR+0x40>
 800b652:	2300      	movs	r3, #0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10a      	bne.n	800b66e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	61fb      	str	r3, [r7, #28]
}
 800b66a:	bf00      	nop
 800b66c:	e7fe      	b.n	800b66c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b66e:	f001 fb73 	bl	800cd58 <vPortValidateInterruptPriority>
	__asm volatile
 800b672:	f3ef 8211 	mrs	r2, BASEPRI
 800b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	61ba      	str	r2, [r7, #24]
 800b688:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b68a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b68c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b692:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b696:	2b00      	cmp	r3, #0
 800b698:	d02f      	beq.n	800b6fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b6a4:	68b9      	ldr	r1, [r7, #8]
 800b6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6a8:	f000 f8d4 	bl	800b854 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ae:	1e5a      	subs	r2, r3, #1
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b6b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6bc:	d112      	bne.n	800b6e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d016      	beq.n	800b6f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c8:	3310      	adds	r3, #16
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 fd46 	bl	800c15c <xTaskRemoveFromEventList>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00e      	beq.n	800b6f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00b      	beq.n	800b6f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	601a      	str	r2, [r3, #0]
 800b6e2:	e007      	b.n	800b6f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	b25a      	sxtb	r2, r3
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f8:	e001      	b.n	800b6fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	f383 8811 	msr	BASEPRI, r3
}
 800b708:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3738      	adds	r7, #56	; 0x38
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10a      	bne.n	800b73c <vQueueDelete+0x28>
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	60bb      	str	r3, [r7, #8]
}
 800b738:	bf00      	nop
 800b73a:	e7fe      	b.n	800b73a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f000 f92f 	bl	800b9a0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f001 fc12 	bl	800cf6c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b748:	bf00      	nop
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d006      	beq.n	800b76e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f1c3 0307 	rsb	r3, r3, #7
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	e001      	b.n	800b772 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b76e:	2300      	movs	r3, #0
 800b770:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b772:	68fb      	ldr	r3, [r7, #12]
	}
 800b774:	4618      	mov	r0, r3
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b794:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10d      	bne.n	800b7ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d14d      	bne.n	800b842 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 ff22 	bl	800c5f4 <xTaskPriorityDisinherit>
 800b7b0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	605a      	str	r2, [r3, #4]
 800b7b8:	e043      	b.n	800b842 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d119      	bne.n	800b7f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6898      	ldr	r0, [r3, #8]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	68b9      	ldr	r1, [r7, #8]
 800b7cc:	f001 fd1a 	bl	800d204 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	689a      	ldr	r2, [r3, #8]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d8:	441a      	add	r2, r3
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	689a      	ldr	r2, [r3, #8]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d32b      	bcc.n	800b842 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	609a      	str	r2, [r3, #8]
 800b7f2:	e026      	b.n	800b842 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	68d8      	ldr	r0, [r3, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	68b9      	ldr	r1, [r7, #8]
 800b800:	f001 fd00 	bl	800d204 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	68da      	ldr	r2, [r3, #12]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80c:	425b      	negs	r3, r3
 800b80e:	441a      	add	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	68da      	ldr	r2, [r3, #12]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d207      	bcs.n	800b830 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	685a      	ldr	r2, [r3, #4]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b828:	425b      	negs	r3, r3
 800b82a:	441a      	add	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b02      	cmp	r3, #2
 800b834:	d105      	bne.n	800b842 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	3b01      	subs	r3, #1
 800b840:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	1c5a      	adds	r2, r3, #1
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b84a:	697b      	ldr	r3, [r7, #20]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b862:	2b00      	cmp	r3, #0
 800b864:	d018      	beq.n	800b898 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86e:	441a      	add	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	68da      	ldr	r2, [r3, #12]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d303      	bcc.n	800b888 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68d9      	ldr	r1, [r3, #12]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b890:	461a      	mov	r2, r3
 800b892:	6838      	ldr	r0, [r7, #0]
 800b894:	f001 fcb6 	bl	800d204 <memcpy>
	}
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b8a8:	f001 f974 	bl	800cb94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8b4:	e011      	b.n	800b8da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d012      	beq.n	800b8e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3324      	adds	r3, #36	; 0x24
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 fc4a 	bl	800c15c <xTaskRemoveFromEventList>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b8ce:	f000 fd1f 	bl	800c310 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b8da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	dce9      	bgt.n	800b8b6 <prvUnlockQueue+0x16>
 800b8e2:	e000      	b.n	800b8e6 <prvUnlockQueue+0x46>
					break;
 800b8e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	22ff      	movs	r2, #255	; 0xff
 800b8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b8ee:	f001 f981 	bl	800cbf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b8f2:	f001 f94f 	bl	800cb94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b8fe:	e011      	b.n	800b924 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d012      	beq.n	800b92e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	3310      	adds	r3, #16
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 fc25 	bl	800c15c <xTaskRemoveFromEventList>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b918:	f000 fcfa 	bl	800c310 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
 800b91e:	3b01      	subs	r3, #1
 800b920:	b2db      	uxtb	r3, r3
 800b922:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dce9      	bgt.n	800b900 <prvUnlockQueue+0x60>
 800b92c:	e000      	b.n	800b930 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b92e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	22ff      	movs	r2, #255	; 0xff
 800b934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b938:	f001 f95c 	bl	800cbf4 <vPortExitCritical>
}
 800b93c:	bf00      	nop
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b94c:	f001 f922 	bl	800cb94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b958:	2301      	movs	r3, #1
 800b95a:	60fb      	str	r3, [r7, #12]
 800b95c:	e001      	b.n	800b962 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b95e:	2300      	movs	r3, #0
 800b960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b962:	f001 f947 	bl	800cbf4 <vPortExitCritical>

	return xReturn;
 800b966:	68fb      	ldr	r3, [r7, #12]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b978:	f001 f90c 	bl	800cb94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b984:	429a      	cmp	r2, r3
 800b986:	d102      	bne.n	800b98e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b988:	2301      	movs	r3, #1
 800b98a:	60fb      	str	r3, [r7, #12]
 800b98c:	e001      	b.n	800b992 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b98e:	2300      	movs	r3, #0
 800b990:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b992:	f001 f92f 	bl	800cbf4 <vPortExitCritical>

	return xReturn;
 800b996:	68fb      	ldr	r3, [r7, #12]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	60fb      	str	r3, [r7, #12]
 800b9ac:	e016      	b.n	800b9dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b9ae:	4a10      	ldr	r2, [pc, #64]	; (800b9f0 <vQueueUnregisterQueue+0x50>)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	00db      	lsls	r3, r3, #3
 800b9b4:	4413      	add	r3, r2
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d10b      	bne.n	800b9d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b9be:	4a0c      	ldr	r2, [pc, #48]	; (800b9f0 <vQueueUnregisterQueue+0x50>)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b9c8:	4a09      	ldr	r2, [pc, #36]	; (800b9f0 <vQueueUnregisterQueue+0x50>)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	605a      	str	r2, [r3, #4]
				break;
 800b9d4:	e006      	b.n	800b9e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2b07      	cmp	r3, #7
 800b9e0:	d9e5      	bls.n	800b9ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	200022dc 	.word	0x200022dc

0800b9f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b08c      	sub	sp, #48	; 0x30
 800b9f8:	af04      	add	r7, sp, #16
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	60b9      	str	r1, [r7, #8]
 800b9fe:	603b      	str	r3, [r7, #0]
 800ba00:	4613      	mov	r3, r2
 800ba02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba04:	88fb      	ldrh	r3, [r7, #6]
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 f9e5 	bl	800cdd8 <pvPortMalloc>
 800ba0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00e      	beq.n	800ba34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ba16:	20b4      	movs	r0, #180	; 0xb4
 800ba18:	f001 f9de 	bl	800cdd8 <pvPortMalloc>
 800ba1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d003      	beq.n	800ba2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	631a      	str	r2, [r3, #48]	; 0x30
 800ba2a:	e005      	b.n	800ba38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba2c:	6978      	ldr	r0, [r7, #20]
 800ba2e:	f001 fa9d 	bl	800cf6c <vPortFree>
 800ba32:	e001      	b.n	800ba38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba34:	2300      	movs	r3, #0
 800ba36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d013      	beq.n	800ba66 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba3e:	88fa      	ldrh	r2, [r7, #6]
 800ba40:	2300      	movs	r3, #0
 800ba42:	9303      	str	r3, [sp, #12]
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	9302      	str	r3, [sp, #8]
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	9301      	str	r3, [sp, #4]
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	68b9      	ldr	r1, [r7, #8]
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 f80f 	bl	800ba78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba5a:	69f8      	ldr	r0, [r7, #28]
 800ba5c:	f000 f8a2 	bl	800bba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba60:	2301      	movs	r3, #1
 800ba62:	61bb      	str	r3, [r7, #24]
 800ba64:	e002      	b.n	800ba6c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295
 800ba6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba6c:	69bb      	ldr	r3, [r7, #24]
	}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3720      	adds	r7, #32
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
	...

0800ba78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ba90:	3b01      	subs	r3, #1
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	f023 0307 	bic.w	r3, r3, #7
 800ba9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	f003 0307 	and.w	r3, r3, #7
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800baaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baae:	f383 8811 	msr	BASEPRI, r3
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	617b      	str	r3, [r7, #20]
}
 800babc:	bf00      	nop
 800babe:	e7fe      	b.n	800babe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bac0:	2300      	movs	r3, #0
 800bac2:	61fb      	str	r3, [r7, #28]
 800bac4:	e012      	b.n	800baec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	4413      	add	r3, r2
 800bacc:	7819      	ldrb	r1, [r3, #0]
 800bace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	4413      	add	r3, r2
 800bad4:	3334      	adds	r3, #52	; 0x34
 800bad6:	460a      	mov	r2, r1
 800bad8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	4413      	add	r3, r2
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d006      	beq.n	800baf4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	3301      	adds	r3, #1
 800baea:	61fb      	str	r3, [r7, #28]
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	2b0f      	cmp	r3, #15
 800baf0:	d9e9      	bls.n	800bac6 <prvInitialiseNewTask+0x4e>
 800baf2:	e000      	b.n	800baf6 <prvInitialiseNewTask+0x7e>
		{
			break;
 800baf4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	2b06      	cmp	r3, #6
 800bb02:	d901      	bls.n	800bb08 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb04:	2306      	movs	r3, #6
 800bb06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb16:	2200      	movs	r2, #0
 800bb18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff f989 	bl	800ae36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	3318      	adds	r3, #24
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff f984 	bl	800ae36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	f1c3 0207 	rsb	r2, r3, #7
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	2200      	movs	r2, #0
 800bb48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb56:	334c      	adds	r3, #76	; 0x4c
 800bb58:	2260      	movs	r2, #96	; 0x60
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f001 fb5f 	bl	800d220 <memset>
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	4a0c      	ldr	r2, [pc, #48]	; (800bb98 <prvInitialiseNewTask+0x120>)
 800bb66:	651a      	str	r2, [r3, #80]	; 0x50
 800bb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6a:	4a0c      	ldr	r2, [pc, #48]	; (800bb9c <prvInitialiseNewTask+0x124>)
 800bb6c:	655a      	str	r2, [r3, #84]	; 0x54
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb70:	4a0b      	ldr	r2, [pc, #44]	; (800bba0 <prvInitialiseNewTask+0x128>)
 800bb72:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb74:	683a      	ldr	r2, [r7, #0]
 800bb76:	68f9      	ldr	r1, [r7, #12]
 800bb78:	69b8      	ldr	r0, [r7, #24]
 800bb7a:	f000 fedb 	bl	800c934 <pxPortInitialiseStack>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d002      	beq.n	800bb90 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb90:	bf00      	nop
 800bb92:	3720      	adds	r7, #32
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	0800dfe4 	.word	0x0800dfe4
 800bb9c:	0800e004 	.word	0x0800e004
 800bba0:	0800dfc4 	.word	0x0800dfc4

0800bba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bbac:	f000 fff2 	bl	800cb94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bbb0:	4b2a      	ldr	r3, [pc, #168]	; (800bc5c <prvAddNewTaskToReadyList+0xb8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	4a29      	ldr	r2, [pc, #164]	; (800bc5c <prvAddNewTaskToReadyList+0xb8>)
 800bbb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bbba:	4b29      	ldr	r3, [pc, #164]	; (800bc60 <prvAddNewTaskToReadyList+0xbc>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d109      	bne.n	800bbd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bbc2:	4a27      	ldr	r2, [pc, #156]	; (800bc60 <prvAddNewTaskToReadyList+0xbc>)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bbc8:	4b24      	ldr	r3, [pc, #144]	; (800bc5c <prvAddNewTaskToReadyList+0xb8>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d110      	bne.n	800bbf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bbd0:	f000 fbc2 	bl	800c358 <prvInitialiseTaskLists>
 800bbd4:	e00d      	b.n	800bbf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbd6:	4b23      	ldr	r3, [pc, #140]	; (800bc64 <prvAddNewTaskToReadyList+0xc0>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d109      	bne.n	800bbf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbde:	4b20      	ldr	r3, [pc, #128]	; (800bc60 <prvAddNewTaskToReadyList+0xbc>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d802      	bhi.n	800bbf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bbec:	4a1c      	ldr	r2, [pc, #112]	; (800bc60 <prvAddNewTaskToReadyList+0xbc>)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bbf2:	4b1d      	ldr	r3, [pc, #116]	; (800bc68 <prvAddNewTaskToReadyList+0xc4>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	4a1b      	ldr	r2, [pc, #108]	; (800bc68 <prvAddNewTaskToReadyList+0xc4>)
 800bbfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc00:	2201      	movs	r2, #1
 800bc02:	409a      	lsls	r2, r3
 800bc04:	4b19      	ldr	r3, [pc, #100]	; (800bc6c <prvAddNewTaskToReadyList+0xc8>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	4a18      	ldr	r2, [pc, #96]	; (800bc6c <prvAddNewTaskToReadyList+0xc8>)
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4a15      	ldr	r2, [pc, #84]	; (800bc70 <prvAddNewTaskToReadyList+0xcc>)
 800bc1c:	441a      	add	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	3304      	adds	r3, #4
 800bc22:	4619      	mov	r1, r3
 800bc24:	4610      	mov	r0, r2
 800bc26:	f7ff f913 	bl	800ae50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bc2a:	f000 ffe3 	bl	800cbf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc2e:	4b0d      	ldr	r3, [pc, #52]	; (800bc64 <prvAddNewTaskToReadyList+0xc0>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00e      	beq.n	800bc54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc36:	4b0a      	ldr	r3, [pc, #40]	; (800bc60 <prvAddNewTaskToReadyList+0xbc>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d207      	bcs.n	800bc54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc44:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <prvAddNewTaskToReadyList+0xd0>)
 800bc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc54:	bf00      	nop
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	2000241c 	.word	0x2000241c
 800bc60:	2000231c 	.word	0x2000231c
 800bc64:	20002428 	.word	0x20002428
 800bc68:	20002438 	.word	0x20002438
 800bc6c:	20002424 	.word	0x20002424
 800bc70:	20002320 	.word	0x20002320
 800bc74:	e000ed04 	.word	0xe000ed04

0800bc78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc80:	2300      	movs	r3, #0
 800bc82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d017      	beq.n	800bcba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc8a:	4b13      	ldr	r3, [pc, #76]	; (800bcd8 <vTaskDelay+0x60>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00a      	beq.n	800bca8 <vTaskDelay+0x30>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	60bb      	str	r3, [r7, #8]
}
 800bca4:	bf00      	nop
 800bca6:	e7fe      	b.n	800bca6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bca8:	f000 f86a 	bl	800bd80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bcac:	2100      	movs	r1, #0
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fdda 	bl	800c868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bcb4:	f000 f872 	bl	800bd9c <xTaskResumeAll>
 800bcb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d107      	bne.n	800bcd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bcc0:	4b06      	ldr	r3, [pc, #24]	; (800bcdc <vTaskDelay+0x64>)
 800bcc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcd0:	bf00      	nop
 800bcd2:	3710      	adds	r7, #16
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20002444 	.word	0x20002444
 800bcdc:	e000ed04 	.word	0xe000ed04

0800bce0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800bce6:	4b1e      	ldr	r3, [pc, #120]	; (800bd60 <vTaskStartScheduler+0x80>)
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	2300      	movs	r3, #0
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2280      	movs	r2, #128	; 0x80
 800bcf2:	491c      	ldr	r1, [pc, #112]	; (800bd64 <vTaskStartScheduler+0x84>)
 800bcf4:	481c      	ldr	r0, [pc, #112]	; (800bd68 <vTaskStartScheduler+0x88>)
 800bcf6:	f7ff fe7d 	bl	800b9f4 <xTaskCreate>
 800bcfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d11b      	bne.n	800bd3a <vTaskStartScheduler+0x5a>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	60bb      	str	r3, [r7, #8]
}
 800bd14:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd16:	4b15      	ldr	r3, [pc, #84]	; (800bd6c <vTaskStartScheduler+0x8c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	334c      	adds	r3, #76	; 0x4c
 800bd1c:	4a14      	ldr	r2, [pc, #80]	; (800bd70 <vTaskStartScheduler+0x90>)
 800bd1e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd20:	4b14      	ldr	r3, [pc, #80]	; (800bd74 <vTaskStartScheduler+0x94>)
 800bd22:	f04f 32ff 	mov.w	r2, #4294967295
 800bd26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd28:	4b13      	ldr	r3, [pc, #76]	; (800bd78 <vTaskStartScheduler+0x98>)
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bd2e:	4b13      	ldr	r3, [pc, #76]	; (800bd7c <vTaskStartScheduler+0x9c>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd34:	f000 fe8c 	bl	800ca50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd38:	e00e      	b.n	800bd58 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd40:	d10a      	bne.n	800bd58 <vTaskStartScheduler+0x78>
	__asm volatile
 800bd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	607b      	str	r3, [r7, #4]
}
 800bd54:	bf00      	nop
 800bd56:	e7fe      	b.n	800bd56 <vTaskStartScheduler+0x76>
}
 800bd58:	bf00      	nop
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20002440 	.word	0x20002440
 800bd64:	0800df04 	.word	0x0800df04
 800bd68:	0800c329 	.word	0x0800c329
 800bd6c:	2000231c 	.word	0x2000231c
 800bd70:	20000028 	.word	0x20000028
 800bd74:	2000243c 	.word	0x2000243c
 800bd78:	20002428 	.word	0x20002428
 800bd7c:	20002420 	.word	0x20002420

0800bd80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd80:	b480      	push	{r7}
 800bd82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bd84:	4b04      	ldr	r3, [pc, #16]	; (800bd98 <vTaskSuspendAll+0x18>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	4a03      	ldr	r2, [pc, #12]	; (800bd98 <vTaskSuspendAll+0x18>)
 800bd8c:	6013      	str	r3, [r2, #0]
}
 800bd8e:	bf00      	nop
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	20002444 	.word	0x20002444

0800bd9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bda6:	2300      	movs	r3, #0
 800bda8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bdaa:	4b41      	ldr	r3, [pc, #260]	; (800beb0 <xTaskResumeAll+0x114>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10a      	bne.n	800bdc8 <xTaskResumeAll+0x2c>
	__asm volatile
 800bdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb6:	f383 8811 	msr	BASEPRI, r3
 800bdba:	f3bf 8f6f 	isb	sy
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	603b      	str	r3, [r7, #0]
}
 800bdc4:	bf00      	nop
 800bdc6:	e7fe      	b.n	800bdc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdc8:	f000 fee4 	bl	800cb94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdcc:	4b38      	ldr	r3, [pc, #224]	; (800beb0 <xTaskResumeAll+0x114>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	4a37      	ldr	r2, [pc, #220]	; (800beb0 <xTaskResumeAll+0x114>)
 800bdd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdd6:	4b36      	ldr	r3, [pc, #216]	; (800beb0 <xTaskResumeAll+0x114>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d161      	bne.n	800bea2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bdde:	4b35      	ldr	r3, [pc, #212]	; (800beb4 <xTaskResumeAll+0x118>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d05d      	beq.n	800bea2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bde6:	e02e      	b.n	800be46 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bde8:	4b33      	ldr	r3, [pc, #204]	; (800beb8 <xTaskResumeAll+0x11c>)
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	3318      	adds	r3, #24
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff f888 	bl	800af0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff f883 	bl	800af0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be08:	2201      	movs	r2, #1
 800be0a:	409a      	lsls	r2, r3
 800be0c:	4b2b      	ldr	r3, [pc, #172]	; (800bebc <xTaskResumeAll+0x120>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4313      	orrs	r3, r2
 800be12:	4a2a      	ldr	r2, [pc, #168]	; (800bebc <xTaskResumeAll+0x120>)
 800be14:	6013      	str	r3, [r2, #0]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be1a:	4613      	mov	r3, r2
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	4a27      	ldr	r2, [pc, #156]	; (800bec0 <xTaskResumeAll+0x124>)
 800be24:	441a      	add	r2, r3
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3304      	adds	r3, #4
 800be2a:	4619      	mov	r1, r3
 800be2c:	4610      	mov	r0, r2
 800be2e:	f7ff f80f 	bl	800ae50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be36:	4b23      	ldr	r3, [pc, #140]	; (800bec4 <xTaskResumeAll+0x128>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d302      	bcc.n	800be46 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800be40:	4b21      	ldr	r3, [pc, #132]	; (800bec8 <xTaskResumeAll+0x12c>)
 800be42:	2201      	movs	r2, #1
 800be44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be46:	4b1c      	ldr	r3, [pc, #112]	; (800beb8 <xTaskResumeAll+0x11c>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1cc      	bne.n	800bde8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be54:	f000 fb04 	bl	800c460 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800be58:	4b1c      	ldr	r3, [pc, #112]	; (800becc <xTaskResumeAll+0x130>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d010      	beq.n	800be86 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be64:	f000 f836 	bl	800bed4 <xTaskIncrementTick>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800be6e:	4b16      	ldr	r3, [pc, #88]	; (800bec8 <xTaskResumeAll+0x12c>)
 800be70:	2201      	movs	r2, #1
 800be72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3b01      	subs	r3, #1
 800be78:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1f1      	bne.n	800be64 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800be80:	4b12      	ldr	r3, [pc, #72]	; (800becc <xTaskResumeAll+0x130>)
 800be82:	2200      	movs	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be86:	4b10      	ldr	r3, [pc, #64]	; (800bec8 <xTaskResumeAll+0x12c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d009      	beq.n	800bea2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be8e:	2301      	movs	r3, #1
 800be90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be92:	4b0f      	ldr	r3, [pc, #60]	; (800bed0 <xTaskResumeAll+0x134>)
 800be94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bea2:	f000 fea7 	bl	800cbf4 <vPortExitCritical>

	return xAlreadyYielded;
 800bea6:	68bb      	ldr	r3, [r7, #8]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20002444 	.word	0x20002444
 800beb4:	2000241c 	.word	0x2000241c
 800beb8:	200023dc 	.word	0x200023dc
 800bebc:	20002424 	.word	0x20002424
 800bec0:	20002320 	.word	0x20002320
 800bec4:	2000231c 	.word	0x2000231c
 800bec8:	20002430 	.word	0x20002430
 800becc:	2000242c 	.word	0x2000242c
 800bed0:	e000ed04 	.word	0xe000ed04

0800bed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800beda:	2300      	movs	r3, #0
 800bedc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bede:	4b51      	ldr	r3, [pc, #324]	; (800c024 <xTaskIncrementTick+0x150>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f040 808d 	bne.w	800c002 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bee8:	4b4f      	ldr	r3, [pc, #316]	; (800c028 <xTaskIncrementTick+0x154>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3301      	adds	r3, #1
 800beee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bef0:	4a4d      	ldr	r2, [pc, #308]	; (800c028 <xTaskIncrementTick+0x154>)
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d120      	bne.n	800bf3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800befc:	4b4b      	ldr	r3, [pc, #300]	; (800c02c <xTaskIncrementTick+0x158>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d00a      	beq.n	800bf1c <xTaskIncrementTick+0x48>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	603b      	str	r3, [r7, #0]
}
 800bf18:	bf00      	nop
 800bf1a:	e7fe      	b.n	800bf1a <xTaskIncrementTick+0x46>
 800bf1c:	4b43      	ldr	r3, [pc, #268]	; (800c02c <xTaskIncrementTick+0x158>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	4b43      	ldr	r3, [pc, #268]	; (800c030 <xTaskIncrementTick+0x15c>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a41      	ldr	r2, [pc, #260]	; (800c02c <xTaskIncrementTick+0x158>)
 800bf28:	6013      	str	r3, [r2, #0]
 800bf2a:	4a41      	ldr	r2, [pc, #260]	; (800c030 <xTaskIncrementTick+0x15c>)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	4b40      	ldr	r3, [pc, #256]	; (800c034 <xTaskIncrementTick+0x160>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	3301      	adds	r3, #1
 800bf36:	4a3f      	ldr	r2, [pc, #252]	; (800c034 <xTaskIncrementTick+0x160>)
 800bf38:	6013      	str	r3, [r2, #0]
 800bf3a:	f000 fa91 	bl	800c460 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf3e:	4b3e      	ldr	r3, [pc, #248]	; (800c038 <xTaskIncrementTick+0x164>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d34d      	bcc.n	800bfe4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf48:	4b38      	ldr	r3, [pc, #224]	; (800c02c <xTaskIncrementTick+0x158>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <xTaskIncrementTick+0x82>
 800bf52:	2301      	movs	r3, #1
 800bf54:	e000      	b.n	800bf58 <xTaskIncrementTick+0x84>
 800bf56:	2300      	movs	r3, #0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d004      	beq.n	800bf66 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf5c:	4b36      	ldr	r3, [pc, #216]	; (800c038 <xTaskIncrementTick+0x164>)
 800bf5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf62:	601a      	str	r2, [r3, #0]
					break;
 800bf64:	e03e      	b.n	800bfe4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bf66:	4b31      	ldr	r3, [pc, #196]	; (800c02c <xTaskIncrementTick+0x158>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf76:	693a      	ldr	r2, [r7, #16]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d203      	bcs.n	800bf86 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf7e:	4a2e      	ldr	r2, [pc, #184]	; (800c038 <xTaskIncrementTick+0x164>)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6013      	str	r3, [r2, #0]
						break;
 800bf84:	e02e      	b.n	800bfe4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe ffbd 	bl	800af0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d004      	beq.n	800bfa2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	3318      	adds	r3, #24
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fe ffb4 	bl	800af0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	409a      	lsls	r2, r3
 800bfaa:	4b24      	ldr	r3, [pc, #144]	; (800c03c <xTaskIncrementTick+0x168>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	4a22      	ldr	r2, [pc, #136]	; (800c03c <xTaskIncrementTick+0x168>)
 800bfb2:	6013      	str	r3, [r2, #0]
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4a1f      	ldr	r2, [pc, #124]	; (800c040 <xTaskIncrementTick+0x16c>)
 800bfc2:	441a      	add	r2, r3
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4610      	mov	r0, r2
 800bfcc:	f7fe ff40 	bl	800ae50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	4b1b      	ldr	r3, [pc, #108]	; (800c044 <xTaskIncrementTick+0x170>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d3b4      	bcc.n	800bf48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfe2:	e7b1      	b.n	800bf48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bfe4:	4b17      	ldr	r3, [pc, #92]	; (800c044 <xTaskIncrementTick+0x170>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfea:	4915      	ldr	r1, [pc, #84]	; (800c040 <xTaskIncrementTick+0x16c>)
 800bfec:	4613      	mov	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	440b      	add	r3, r1
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d907      	bls.n	800c00c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800bffc:	2301      	movs	r3, #1
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	e004      	b.n	800c00c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c002:	4b11      	ldr	r3, [pc, #68]	; (800c048 <xTaskIncrementTick+0x174>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3301      	adds	r3, #1
 800c008:	4a0f      	ldr	r2, [pc, #60]	; (800c048 <xTaskIncrementTick+0x174>)
 800c00a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c00c:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <xTaskIncrementTick+0x178>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800c014:	2301      	movs	r3, #1
 800c016:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c018:	697b      	ldr	r3, [r7, #20]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3718      	adds	r7, #24
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20002444 	.word	0x20002444
 800c028:	20002420 	.word	0x20002420
 800c02c:	200023d4 	.word	0x200023d4
 800c030:	200023d8 	.word	0x200023d8
 800c034:	20002434 	.word	0x20002434
 800c038:	2000243c 	.word	0x2000243c
 800c03c:	20002424 	.word	0x20002424
 800c040:	20002320 	.word	0x20002320
 800c044:	2000231c 	.word	0x2000231c
 800c048:	2000242c 	.word	0x2000242c
 800c04c:	20002430 	.word	0x20002430

0800c050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c050:	b480      	push	{r7}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c056:	4b29      	ldr	r3, [pc, #164]	; (800c0fc <vTaskSwitchContext+0xac>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c05e:	4b28      	ldr	r3, [pc, #160]	; (800c100 <vTaskSwitchContext+0xb0>)
 800c060:	2201      	movs	r2, #1
 800c062:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c064:	e044      	b.n	800c0f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c066:	4b26      	ldr	r3, [pc, #152]	; (800c100 <vTaskSwitchContext+0xb0>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c06c:	4b25      	ldr	r3, [pc, #148]	; (800c104 <vTaskSwitchContext+0xb4>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	fab3 f383 	clz	r3, r3
 800c078:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	f1c3 031f 	rsb	r3, r3, #31
 800c080:	617b      	str	r3, [r7, #20]
 800c082:	4921      	ldr	r1, [pc, #132]	; (800c108 <vTaskSwitchContext+0xb8>)
 800c084:	697a      	ldr	r2, [r7, #20]
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	440b      	add	r3, r1
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10a      	bne.n	800c0ac <vTaskSwitchContext+0x5c>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	607b      	str	r3, [r7, #4]
}
 800c0a8:	bf00      	nop
 800c0aa:	e7fe      	b.n	800c0aa <vTaskSwitchContext+0x5a>
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	4a14      	ldr	r2, [pc, #80]	; (800c108 <vTaskSwitchContext+0xb8>)
 800c0b8:	4413      	add	r3, r2
 800c0ba:	613b      	str	r3, [r7, #16]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	685a      	ldr	r2, [r3, #4]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	605a      	str	r2, [r3, #4]
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d104      	bne.n	800c0dc <vTaskSwitchContext+0x8c>
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	685a      	ldr	r2, [r3, #4]
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	605a      	str	r2, [r3, #4]
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	4a0a      	ldr	r2, [pc, #40]	; (800c10c <vTaskSwitchContext+0xbc>)
 800c0e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c0e6:	4b09      	ldr	r3, [pc, #36]	; (800c10c <vTaskSwitchContext+0xbc>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	334c      	adds	r3, #76	; 0x4c
 800c0ec:	4a08      	ldr	r2, [pc, #32]	; (800c110 <vTaskSwitchContext+0xc0>)
 800c0ee:	6013      	str	r3, [r2, #0]
}
 800c0f0:	bf00      	nop
 800c0f2:	371c      	adds	r7, #28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	20002444 	.word	0x20002444
 800c100:	20002430 	.word	0x20002430
 800c104:	20002424 	.word	0x20002424
 800c108:	20002320 	.word	0x20002320
 800c10c:	2000231c 	.word	0x2000231c
 800c110:	20000028 	.word	0x20000028

0800c114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10a      	bne.n	800c13a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	60fb      	str	r3, [r7, #12]
}
 800c136:	bf00      	nop
 800c138:	e7fe      	b.n	800c138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c13a:	4b07      	ldr	r3, [pc, #28]	; (800c158 <vTaskPlaceOnEventList+0x44>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	3318      	adds	r3, #24
 800c140:	4619      	mov	r1, r3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7fe fea8 	bl	800ae98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c148:	2101      	movs	r1, #1
 800c14a:	6838      	ldr	r0, [r7, #0]
 800c14c:	f000 fb8c 	bl	800c868 <prvAddCurrentTaskToDelayedList>
}
 800c150:	bf00      	nop
 800c152:	3710      	adds	r7, #16
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	2000231c 	.word	0x2000231c

0800c15c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	60fb      	str	r3, [r7, #12]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	3318      	adds	r3, #24
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fe febc 	bl	800af0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c192:	4b1d      	ldr	r3, [pc, #116]	; (800c208 <xTaskRemoveFromEventList+0xac>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d11c      	bne.n	800c1d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	3304      	adds	r3, #4
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe feb3 	bl	800af0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	409a      	lsls	r2, r3
 800c1ac:	4b17      	ldr	r3, [pc, #92]	; (800c20c <xTaskRemoveFromEventList+0xb0>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	4a16      	ldr	r2, [pc, #88]	; (800c20c <xTaskRemoveFromEventList+0xb0>)
 800c1b4:	6013      	str	r3, [r2, #0]
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	4a13      	ldr	r2, [pc, #76]	; (800c210 <xTaskRemoveFromEventList+0xb4>)
 800c1c4:	441a      	add	r2, r3
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	f7fe fe3f 	bl	800ae50 <vListInsertEnd>
 800c1d2:	e005      	b.n	800c1e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	3318      	adds	r3, #24
 800c1d8:	4619      	mov	r1, r3
 800c1da:	480e      	ldr	r0, [pc, #56]	; (800c214 <xTaskRemoveFromEventList+0xb8>)
 800c1dc:	f7fe fe38 	bl	800ae50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e4:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <xTaskRemoveFromEventList+0xbc>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d905      	bls.n	800c1fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <xTaskRemoveFromEventList+0xc0>)
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	601a      	str	r2, [r3, #0]
 800c1f8:	e001      	b.n	800c1fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c1fe:	697b      	ldr	r3, [r7, #20]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	20002444 	.word	0x20002444
 800c20c:	20002424 	.word	0x20002424
 800c210:	20002320 	.word	0x20002320
 800c214:	200023dc 	.word	0x200023dc
 800c218:	2000231c 	.word	0x2000231c
 800c21c:	20002430 	.word	0x20002430

0800c220 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c228:	4b06      	ldr	r3, [pc, #24]	; (800c244 <vTaskInternalSetTimeOutState+0x24>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c230:	4b05      	ldr	r3, [pc, #20]	; (800c248 <vTaskInternalSetTimeOutState+0x28>)
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	605a      	str	r2, [r3, #4]
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	20002434 	.word	0x20002434
 800c248:	20002420 	.word	0x20002420

0800c24c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10a      	bne.n	800c272 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	613b      	str	r3, [r7, #16]
}
 800c26e:	bf00      	nop
 800c270:	e7fe      	b.n	800c270 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10a      	bne.n	800c28e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	60fb      	str	r3, [r7, #12]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c28e:	f000 fc81 	bl	800cb94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c292:	4b1d      	ldr	r3, [pc, #116]	; (800c308 <xTaskCheckForTimeOut+0xbc>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	69ba      	ldr	r2, [r7, #24]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2aa:	d102      	bne.n	800c2b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61fb      	str	r3, [r7, #28]
 800c2b0:	e023      	b.n	800c2fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	4b15      	ldr	r3, [pc, #84]	; (800c30c <xTaskCheckForTimeOut+0xc0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d007      	beq.n	800c2ce <xTaskCheckForTimeOut+0x82>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	69ba      	ldr	r2, [r7, #24]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d302      	bcc.n	800c2ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e015      	b.n	800c2fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d20b      	bcs.n	800c2f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff ff9b 	bl	800c220 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	61fb      	str	r3, [r7, #28]
 800c2ee:	e004      	b.n	800c2fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2fa:	f000 fc7b 	bl	800cbf4 <vPortExitCritical>

	return xReturn;
 800c2fe:	69fb      	ldr	r3, [r7, #28]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3720      	adds	r7, #32
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	20002420 	.word	0x20002420
 800c30c:	20002434 	.word	0x20002434

0800c310 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c310:	b480      	push	{r7}
 800c312:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c314:	4b03      	ldr	r3, [pc, #12]	; (800c324 <vTaskMissedYield+0x14>)
 800c316:	2201      	movs	r2, #1
 800c318:	601a      	str	r2, [r3, #0]
}
 800c31a:	bf00      	nop
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr
 800c324:	20002430 	.word	0x20002430

0800c328 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c330:	f000 f852 	bl	800c3d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c334:	4b06      	ldr	r3, [pc, #24]	; (800c350 <prvIdleTask+0x28>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d9f9      	bls.n	800c330 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c33c:	4b05      	ldr	r3, [pc, #20]	; (800c354 <prvIdleTask+0x2c>)
 800c33e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c34c:	e7f0      	b.n	800c330 <prvIdleTask+0x8>
 800c34e:	bf00      	nop
 800c350:	20002320 	.word	0x20002320
 800c354:	e000ed04 	.word	0xe000ed04

0800c358 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c35e:	2300      	movs	r3, #0
 800c360:	607b      	str	r3, [r7, #4]
 800c362:	e00c      	b.n	800c37e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	4613      	mov	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4a12      	ldr	r2, [pc, #72]	; (800c3b8 <prvInitialiseTaskLists+0x60>)
 800c370:	4413      	add	r3, r2
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fd3f 	bl	800adf6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3301      	adds	r3, #1
 800c37c:	607b      	str	r3, [r7, #4]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b06      	cmp	r3, #6
 800c382:	d9ef      	bls.n	800c364 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c384:	480d      	ldr	r0, [pc, #52]	; (800c3bc <prvInitialiseTaskLists+0x64>)
 800c386:	f7fe fd36 	bl	800adf6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c38a:	480d      	ldr	r0, [pc, #52]	; (800c3c0 <prvInitialiseTaskLists+0x68>)
 800c38c:	f7fe fd33 	bl	800adf6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c390:	480c      	ldr	r0, [pc, #48]	; (800c3c4 <prvInitialiseTaskLists+0x6c>)
 800c392:	f7fe fd30 	bl	800adf6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c396:	480c      	ldr	r0, [pc, #48]	; (800c3c8 <prvInitialiseTaskLists+0x70>)
 800c398:	f7fe fd2d 	bl	800adf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c39c:	480b      	ldr	r0, [pc, #44]	; (800c3cc <prvInitialiseTaskLists+0x74>)
 800c39e:	f7fe fd2a 	bl	800adf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3a2:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <prvInitialiseTaskLists+0x78>)
 800c3a4:	4a05      	ldr	r2, [pc, #20]	; (800c3bc <prvInitialiseTaskLists+0x64>)
 800c3a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3a8:	4b0a      	ldr	r3, [pc, #40]	; (800c3d4 <prvInitialiseTaskLists+0x7c>)
 800c3aa:	4a05      	ldr	r2, [pc, #20]	; (800c3c0 <prvInitialiseTaskLists+0x68>)
 800c3ac:	601a      	str	r2, [r3, #0]
}
 800c3ae:	bf00      	nop
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20002320 	.word	0x20002320
 800c3bc:	200023ac 	.word	0x200023ac
 800c3c0:	200023c0 	.word	0x200023c0
 800c3c4:	200023dc 	.word	0x200023dc
 800c3c8:	200023f0 	.word	0x200023f0
 800c3cc:	20002408 	.word	0x20002408
 800c3d0:	200023d4 	.word	0x200023d4
 800c3d4:	200023d8 	.word	0x200023d8

0800c3d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3de:	e019      	b.n	800c414 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3e0:	f000 fbd8 	bl	800cb94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c3e4:	4b10      	ldr	r3, [pc, #64]	; (800c428 <prvCheckTasksWaitingTermination+0x50>)
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	3304      	adds	r3, #4
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fe fd8a 	bl	800af0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3f6:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <prvCheckTasksWaitingTermination+0x54>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	4a0b      	ldr	r2, [pc, #44]	; (800c42c <prvCheckTasksWaitingTermination+0x54>)
 800c3fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c400:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <prvCheckTasksWaitingTermination+0x58>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	3b01      	subs	r3, #1
 800c406:	4a0a      	ldr	r2, [pc, #40]	; (800c430 <prvCheckTasksWaitingTermination+0x58>)
 800c408:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c40a:	f000 fbf3 	bl	800cbf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 f810 	bl	800c434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c414:	4b06      	ldr	r3, [pc, #24]	; (800c430 <prvCheckTasksWaitingTermination+0x58>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d1e1      	bne.n	800c3e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c41c:	bf00      	nop
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	200023f0 	.word	0x200023f0
 800c42c:	2000241c 	.word	0x2000241c
 800c430:	20002404 	.word	0x20002404

0800c434 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	334c      	adds	r3, #76	; 0x4c
 800c440:	4618      	mov	r0, r3
 800c442:	f000 ffeb 	bl	800d41c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 fd8e 	bl	800cf6c <vPortFree>
			vPortFree( pxTCB );
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fd8b 	bl	800cf6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c456:	bf00      	nop
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
	...

0800c460 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c466:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <prvResetNextTaskUnblockTime+0x44>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <prvResetNextTaskUnblockTime+0x14>
 800c470:	2301      	movs	r3, #1
 800c472:	e000      	b.n	800c476 <prvResetNextTaskUnblockTime+0x16>
 800c474:	2300      	movs	r3, #0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d004      	beq.n	800c484 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c47a:	4b0b      	ldr	r3, [pc, #44]	; (800c4a8 <prvResetNextTaskUnblockTime+0x48>)
 800c47c:	f04f 32ff 	mov.w	r2, #4294967295
 800c480:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c482:	e008      	b.n	800c496 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c484:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <prvResetNextTaskUnblockTime+0x44>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	4a05      	ldr	r2, [pc, #20]	; (800c4a8 <prvResetNextTaskUnblockTime+0x48>)
 800c494:	6013      	str	r3, [r2, #0]
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	200023d4 	.word	0x200023d4
 800c4a8:	2000243c 	.word	0x2000243c

0800c4ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4b2:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <xTaskGetSchedulerState+0x34>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d102      	bne.n	800c4c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	607b      	str	r3, [r7, #4]
 800c4be:	e008      	b.n	800c4d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4c0:	4b08      	ldr	r3, [pc, #32]	; (800c4e4 <xTaskGetSchedulerState+0x38>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d102      	bne.n	800c4ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4c8:	2302      	movs	r3, #2
 800c4ca:	607b      	str	r3, [r7, #4]
 800c4cc:	e001      	b.n	800c4d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4d2:	687b      	ldr	r3, [r7, #4]
	}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr
 800c4e0:	20002428 	.word	0x20002428
 800c4e4:	20002444 	.word	0x20002444

0800c4e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d06e      	beq.n	800c5dc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c502:	4b39      	ldr	r3, [pc, #228]	; (800c5e8 <xTaskPriorityInherit+0x100>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c508:	429a      	cmp	r2, r3
 800c50a:	d25e      	bcs.n	800c5ca <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	db06      	blt.n	800c522 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c514:	4b34      	ldr	r3, [pc, #208]	; (800c5e8 <xTaskPriorityInherit+0x100>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51a:	f1c3 0207 	rsb	r2, r3, #7
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6959      	ldr	r1, [r3, #20]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52a:	4613      	mov	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4413      	add	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4a2e      	ldr	r2, [pc, #184]	; (800c5ec <xTaskPriorityInherit+0x104>)
 800c534:	4413      	add	r3, r2
 800c536:	4299      	cmp	r1, r3
 800c538:	d101      	bne.n	800c53e <xTaskPriorityInherit+0x56>
 800c53a:	2301      	movs	r3, #1
 800c53c:	e000      	b.n	800c540 <xTaskPriorityInherit+0x58>
 800c53e:	2300      	movs	r3, #0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d03a      	beq.n	800c5ba <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	3304      	adds	r3, #4
 800c548:	4618      	mov	r0, r3
 800c54a:	f7fe fcde 	bl	800af0a <uxListRemove>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d115      	bne.n	800c580 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c558:	4924      	ldr	r1, [pc, #144]	; (800c5ec <xTaskPriorityInherit+0x104>)
 800c55a:	4613      	mov	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	440b      	add	r3, r1
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10a      	bne.n	800c580 <xTaskPriorityInherit+0x98>
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56e:	2201      	movs	r2, #1
 800c570:	fa02 f303 	lsl.w	r3, r2, r3
 800c574:	43da      	mvns	r2, r3
 800c576:	4b1e      	ldr	r3, [pc, #120]	; (800c5f0 <xTaskPriorityInherit+0x108>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4013      	ands	r3, r2
 800c57c:	4a1c      	ldr	r2, [pc, #112]	; (800c5f0 <xTaskPriorityInherit+0x108>)
 800c57e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c580:	4b19      	ldr	r3, [pc, #100]	; (800c5e8 <xTaskPriorityInherit+0x100>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58e:	2201      	movs	r2, #1
 800c590:	409a      	lsls	r2, r3
 800c592:	4b17      	ldr	r3, [pc, #92]	; (800c5f0 <xTaskPriorityInherit+0x108>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4313      	orrs	r3, r2
 800c598:	4a15      	ldr	r2, [pc, #84]	; (800c5f0 <xTaskPriorityInherit+0x108>)
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4a10      	ldr	r2, [pc, #64]	; (800c5ec <xTaskPriorityInherit+0x104>)
 800c5aa:	441a      	add	r2, r3
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	f7fe fc4c 	bl	800ae50 <vListInsertEnd>
 800c5b8:	e004      	b.n	800c5c4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c5ba:	4b0b      	ldr	r3, [pc, #44]	; (800c5e8 <xTaskPriorityInherit+0x100>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	60fb      	str	r3, [r7, #12]
 800c5c8:	e008      	b.n	800c5dc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5ce:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <xTaskPriorityInherit+0x100>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d201      	bcs.n	800c5dc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
	}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	2000231c 	.word	0x2000231c
 800c5ec:	20002320 	.word	0x20002320
 800c5f0:	20002424 	.word	0x20002424

0800c5f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c600:	2300      	movs	r3, #0
 800c602:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d06e      	beq.n	800c6e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c60a:	4b3a      	ldr	r3, [pc, #232]	; (800c6f4 <xTaskPriorityDisinherit+0x100>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	429a      	cmp	r2, r3
 800c612:	d00a      	beq.n	800c62a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	60fb      	str	r3, [r7, #12]
}
 800c626:	bf00      	nop
 800c628:	e7fe      	b.n	800c628 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10a      	bne.n	800c648 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	60bb      	str	r3, [r7, #8]
}
 800c644:	bf00      	nop
 800c646:	e7fe      	b.n	800c646 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c64c:	1e5a      	subs	r2, r3, #1
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d044      	beq.n	800c6e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c662:	2b00      	cmp	r3, #0
 800c664:	d140      	bne.n	800c6e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	3304      	adds	r3, #4
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe fc4d 	bl	800af0a <uxListRemove>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d115      	bne.n	800c6a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67a:	491f      	ldr	r1, [pc, #124]	; (800c6f8 <xTaskPriorityDisinherit+0x104>)
 800c67c:	4613      	mov	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	4413      	add	r3, r2
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	440b      	add	r3, r1
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10a      	bne.n	800c6a2 <xTaskPriorityDisinherit+0xae>
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c690:	2201      	movs	r2, #1
 800c692:	fa02 f303 	lsl.w	r3, r2, r3
 800c696:	43da      	mvns	r2, r3
 800c698:	4b18      	ldr	r3, [pc, #96]	; (800c6fc <xTaskPriorityDisinherit+0x108>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4013      	ands	r3, r2
 800c69e:	4a17      	ldr	r2, [pc, #92]	; (800c6fc <xTaskPriorityDisinherit+0x108>)
 800c6a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	f1c3 0207 	rsb	r2, r3, #7
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	409a      	lsls	r2, r3
 800c6be:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <xTaskPriorityDisinherit+0x108>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	4a0d      	ldr	r2, [pc, #52]	; (800c6fc <xTaskPriorityDisinherit+0x108>)
 800c6c6:	6013      	str	r3, [r2, #0]
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4a08      	ldr	r2, [pc, #32]	; (800c6f8 <xTaskPriorityDisinherit+0x104>)
 800c6d6:	441a      	add	r2, r3
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	3304      	adds	r3, #4
 800c6dc:	4619      	mov	r1, r3
 800c6de:	4610      	mov	r0, r2
 800c6e0:	f7fe fbb6 	bl	800ae50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6e8:	697b      	ldr	r3, [r7, #20]
	}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	2000231c 	.word	0x2000231c
 800c6f8:	20002320 	.word	0x20002320
 800c6fc:	20002424 	.word	0x20002424

0800c700 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c70e:	2301      	movs	r3, #1
 800c710:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 8088 	beq.w	800c82a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	60fb      	str	r3, [r7, #12]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d902      	bls.n	800c748 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	61fb      	str	r3, [r7, #28]
 800c746:	e002      	b.n	800c74e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c74c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c752:	69fa      	ldr	r2, [r7, #28]
 800c754:	429a      	cmp	r2, r3
 800c756:	d068      	beq.n	800c82a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c75c:	697a      	ldr	r2, [r7, #20]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d163      	bne.n	800c82a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c762:	4b34      	ldr	r3, [pc, #208]	; (800c834 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	69ba      	ldr	r2, [r7, #24]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d10a      	bne.n	800c782 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	60bb      	str	r3, [r7, #8]
}
 800c77e:	bf00      	nop
 800c780:	e7fe      	b.n	800c780 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c788:	69bb      	ldr	r3, [r7, #24]
 800c78a:	69fa      	ldr	r2, [r7, #28]
 800c78c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	2b00      	cmp	r3, #0
 800c794:	db04      	blt.n	800c7a0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	f1c3 0207 	rsb	r2, r3, #7
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	6959      	ldr	r1, [r3, #20]
 800c7a4:	693a      	ldr	r2, [r7, #16]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	4413      	add	r3, r2
 800c7ac:	009b      	lsls	r3, r3, #2
 800c7ae:	4a22      	ldr	r2, [pc, #136]	; (800c838 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c7b0:	4413      	add	r3, r2
 800c7b2:	4299      	cmp	r1, r3
 800c7b4:	d101      	bne.n	800c7ba <vTaskPriorityDisinheritAfterTimeout+0xba>
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e000      	b.n	800c7bc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d034      	beq.n	800c82a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f7fe fba0 	bl	800af0a <uxListRemove>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d115      	bne.n	800c7fc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d4:	4918      	ldr	r1, [pc, #96]	; (800c838 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4413      	add	r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	440b      	add	r3, r1
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10a      	bne.n	800c7fc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f0:	43da      	mvns	r2, r3
 800c7f2:	4b12      	ldr	r3, [pc, #72]	; (800c83c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	4a10      	ldr	r2, [pc, #64]	; (800c83c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c7fa:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c800:	2201      	movs	r2, #1
 800c802:	409a      	lsls	r2, r3
 800c804:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4313      	orrs	r3, r2
 800c80a:	4a0c      	ldr	r2, [pc, #48]	; (800c83c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	69bb      	ldr	r3, [r7, #24]
 800c810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c812:	4613      	mov	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4a07      	ldr	r2, [pc, #28]	; (800c838 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c81c:	441a      	add	r2, r3
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	3304      	adds	r3, #4
 800c822:	4619      	mov	r1, r3
 800c824:	4610      	mov	r0, r2
 800c826:	f7fe fb13 	bl	800ae50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c82a:	bf00      	nop
 800c82c:	3720      	adds	r7, #32
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	2000231c 	.word	0x2000231c
 800c838:	20002320 	.word	0x20002320
 800c83c:	20002424 	.word	0x20002424

0800c840 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c840:	b480      	push	{r7}
 800c842:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c844:	4b07      	ldr	r3, [pc, #28]	; (800c864 <pvTaskIncrementMutexHeldCount+0x24>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d004      	beq.n	800c856 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <pvTaskIncrementMutexHeldCount+0x24>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c852:	3201      	adds	r2, #1
 800c854:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c856:	4b03      	ldr	r3, [pc, #12]	; (800c864 <pvTaskIncrementMutexHeldCount+0x24>)
 800c858:	681b      	ldr	r3, [r3, #0]
	}
 800c85a:	4618      	mov	r0, r3
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	2000231c 	.word	0x2000231c

0800c868 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c872:	4b29      	ldr	r3, [pc, #164]	; (800c918 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c878:	4b28      	ldr	r3, [pc, #160]	; (800c91c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3304      	adds	r3, #4
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe fb43 	bl	800af0a <uxListRemove>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10b      	bne.n	800c8a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c88a:	4b24      	ldr	r3, [pc, #144]	; (800c91c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c890:	2201      	movs	r2, #1
 800c892:	fa02 f303 	lsl.w	r3, r2, r3
 800c896:	43da      	mvns	r2, r3
 800c898:	4b21      	ldr	r3, [pc, #132]	; (800c920 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4013      	ands	r3, r2
 800c89e:	4a20      	ldr	r2, [pc, #128]	; (800c920 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c8a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a8:	d10a      	bne.n	800c8c0 <prvAddCurrentTaskToDelayedList+0x58>
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d007      	beq.n	800c8c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8b0:	4b1a      	ldr	r3, [pc, #104]	; (800c91c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	481a      	ldr	r0, [pc, #104]	; (800c924 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c8ba:	f7fe fac9 	bl	800ae50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c8be:	e026      	b.n	800c90e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c8c8:	4b14      	ldr	r3, [pc, #80]	; (800c91c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c8d0:	68ba      	ldr	r2, [r7, #8]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d209      	bcs.n	800c8ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8d8:	4b13      	ldr	r3, [pc, #76]	; (800c928 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	4b0f      	ldr	r3, [pc, #60]	; (800c91c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	f7fe fad7 	bl	800ae98 <vListInsert>
}
 800c8ea:	e010      	b.n	800c90e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8ec:	4b0f      	ldr	r3, [pc, #60]	; (800c92c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	4b0a      	ldr	r3, [pc, #40]	; (800c91c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	4610      	mov	r0, r2
 800c8fa:	f7fe facd 	bl	800ae98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c8fe:	4b0c      	ldr	r3, [pc, #48]	; (800c930 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	429a      	cmp	r2, r3
 800c906:	d202      	bcs.n	800c90e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c908:	4a09      	ldr	r2, [pc, #36]	; (800c930 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	6013      	str	r3, [r2, #0]
}
 800c90e:	bf00      	nop
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	20002420 	.word	0x20002420
 800c91c:	2000231c 	.word	0x2000231c
 800c920:	20002424 	.word	0x20002424
 800c924:	20002408 	.word	0x20002408
 800c928:	200023d8 	.word	0x200023d8
 800c92c:	200023d4 	.word	0x200023d4
 800c930:	2000243c 	.word	0x2000243c

0800c934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3b04      	subs	r3, #4
 800c944:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c94c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3b04      	subs	r3, #4
 800c952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	f023 0201 	bic.w	r2, r3, #1
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	3b04      	subs	r3, #4
 800c962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c964:	4a0c      	ldr	r2, [pc, #48]	; (800c998 <pxPortInitialiseStack+0x64>)
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3b14      	subs	r3, #20
 800c96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	3b04      	subs	r3, #4
 800c97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f06f 0202 	mvn.w	r2, #2
 800c982:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	3b20      	subs	r3, #32
 800c988:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c98a:	68fb      	ldr	r3, [r7, #12]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3714      	adds	r7, #20
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	0800c99d 	.word	0x0800c99d

0800c99c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c99c:	b480      	push	{r7}
 800c99e:	b085      	sub	sp, #20
 800c9a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9a6:	4b12      	ldr	r3, [pc, #72]	; (800c9f0 <prvTaskExitError+0x54>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ae:	d00a      	beq.n	800c9c6 <prvTaskExitError+0x2a>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	60fb      	str	r3, [r7, #12]
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <prvTaskExitError+0x28>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	60bb      	str	r3, [r7, #8]
}
 800c9d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c9da:	bf00      	nop
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0fc      	beq.n	800c9dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c9e2:	bf00      	nop
 800c9e4:	bf00      	nop
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	20000024 	.word	0x20000024
	...

0800ca00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca00:	4b07      	ldr	r3, [pc, #28]	; (800ca20 <pxCurrentTCBConst2>)
 800ca02:	6819      	ldr	r1, [r3, #0]
 800ca04:	6808      	ldr	r0, [r1, #0]
 800ca06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0a:	f380 8809 	msr	PSP, r0
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f04f 0000 	mov.w	r0, #0
 800ca16:	f380 8811 	msr	BASEPRI, r0
 800ca1a:	4770      	bx	lr
 800ca1c:	f3af 8000 	nop.w

0800ca20 <pxCurrentTCBConst2>:
 800ca20:	2000231c 	.word	0x2000231c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop

0800ca28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca28:	4808      	ldr	r0, [pc, #32]	; (800ca4c <prvPortStartFirstTask+0x24>)
 800ca2a:	6800      	ldr	r0, [r0, #0]
 800ca2c:	6800      	ldr	r0, [r0, #0]
 800ca2e:	f380 8808 	msr	MSP, r0
 800ca32:	f04f 0000 	mov.w	r0, #0
 800ca36:	f380 8814 	msr	CONTROL, r0
 800ca3a:	b662      	cpsie	i
 800ca3c:	b661      	cpsie	f
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	df00      	svc	0
 800ca48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca4a:	bf00      	nop
 800ca4c:	e000ed08 	.word	0xe000ed08

0800ca50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ca56:	4b46      	ldr	r3, [pc, #280]	; (800cb70 <xPortStartScheduler+0x120>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a46      	ldr	r2, [pc, #280]	; (800cb74 <xPortStartScheduler+0x124>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d10a      	bne.n	800ca76 <xPortStartScheduler+0x26>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	613b      	str	r3, [r7, #16]
}
 800ca72:	bf00      	nop
 800ca74:	e7fe      	b.n	800ca74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca76:	4b3e      	ldr	r3, [pc, #248]	; (800cb70 <xPortStartScheduler+0x120>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a3f      	ldr	r2, [pc, #252]	; (800cb78 <xPortStartScheduler+0x128>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d10a      	bne.n	800ca96 <xPortStartScheduler+0x46>
	__asm volatile
 800ca80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	60fb      	str	r3, [r7, #12]
}
 800ca92:	bf00      	nop
 800ca94:	e7fe      	b.n	800ca94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca96:	4b39      	ldr	r3, [pc, #228]	; (800cb7c <xPortStartScheduler+0x12c>)
 800ca98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	22ff      	movs	r2, #255	; 0xff
 800caa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	b2db      	uxtb	r3, r3
 800caae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cab0:	78fb      	ldrb	r3, [r7, #3]
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	4b31      	ldr	r3, [pc, #196]	; (800cb80 <xPortStartScheduler+0x130>)
 800cabc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cabe:	4b31      	ldr	r3, [pc, #196]	; (800cb84 <xPortStartScheduler+0x134>)
 800cac0:	2207      	movs	r2, #7
 800cac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cac4:	e009      	b.n	800cada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cac6:	4b2f      	ldr	r3, [pc, #188]	; (800cb84 <xPortStartScheduler+0x134>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3b01      	subs	r3, #1
 800cacc:	4a2d      	ldr	r2, [pc, #180]	; (800cb84 <xPortStartScheduler+0x134>)
 800cace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cad0:	78fb      	ldrb	r3, [r7, #3]
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	005b      	lsls	r3, r3, #1
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cada:	78fb      	ldrb	r3, [r7, #3]
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cae2:	2b80      	cmp	r3, #128	; 0x80
 800cae4:	d0ef      	beq.n	800cac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cae6:	4b27      	ldr	r3, [pc, #156]	; (800cb84 <xPortStartScheduler+0x134>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f1c3 0307 	rsb	r3, r3, #7
 800caee:	2b04      	cmp	r3, #4
 800caf0:	d00a      	beq.n	800cb08 <xPortStartScheduler+0xb8>
	__asm volatile
 800caf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf6:	f383 8811 	msr	BASEPRI, r3
 800cafa:	f3bf 8f6f 	isb	sy
 800cafe:	f3bf 8f4f 	dsb	sy
 800cb02:	60bb      	str	r3, [r7, #8]
}
 800cb04:	bf00      	nop
 800cb06:	e7fe      	b.n	800cb06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb08:	4b1e      	ldr	r3, [pc, #120]	; (800cb84 <xPortStartScheduler+0x134>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	021b      	lsls	r3, r3, #8
 800cb0e:	4a1d      	ldr	r2, [pc, #116]	; (800cb84 <xPortStartScheduler+0x134>)
 800cb10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb12:	4b1c      	ldr	r3, [pc, #112]	; (800cb84 <xPortStartScheduler+0x134>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb1a:	4a1a      	ldr	r2, [pc, #104]	; (800cb84 <xPortStartScheduler+0x134>)
 800cb1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb26:	4b18      	ldr	r3, [pc, #96]	; (800cb88 <xPortStartScheduler+0x138>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a17      	ldr	r2, [pc, #92]	; (800cb88 <xPortStartScheduler+0x138>)
 800cb2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <xPortStartScheduler+0x138>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a14      	ldr	r2, [pc, #80]	; (800cb88 <xPortStartScheduler+0x138>)
 800cb38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb3e:	f000 f8dd 	bl	800ccfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb42:	4b12      	ldr	r3, [pc, #72]	; (800cb8c <xPortStartScheduler+0x13c>)
 800cb44:	2200      	movs	r2, #0
 800cb46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb48:	f000 f8fc 	bl	800cd44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb4c:	4b10      	ldr	r3, [pc, #64]	; (800cb90 <xPortStartScheduler+0x140>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a0f      	ldr	r2, [pc, #60]	; (800cb90 <xPortStartScheduler+0x140>)
 800cb52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cb56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb58:	f7ff ff66 	bl	800ca28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb5c:	f7ff fa78 	bl	800c050 <vTaskSwitchContext>
	prvTaskExitError();
 800cb60:	f7ff ff1c 	bl	800c99c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3718      	adds	r7, #24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	e000ed00 	.word	0xe000ed00
 800cb74:	410fc271 	.word	0x410fc271
 800cb78:	410fc270 	.word	0x410fc270
 800cb7c:	e000e400 	.word	0xe000e400
 800cb80:	20002448 	.word	0x20002448
 800cb84:	2000244c 	.word	0x2000244c
 800cb88:	e000ed20 	.word	0xe000ed20
 800cb8c:	20000024 	.word	0x20000024
 800cb90:	e000ef34 	.word	0xe000ef34

0800cb94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
	__asm volatile
 800cb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	607b      	str	r3, [r7, #4]
}
 800cbac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cbae:	4b0f      	ldr	r3, [pc, #60]	; (800cbec <vPortEnterCritical+0x58>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	4a0d      	ldr	r2, [pc, #52]	; (800cbec <vPortEnterCritical+0x58>)
 800cbb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cbb8:	4b0c      	ldr	r3, [pc, #48]	; (800cbec <vPortEnterCritical+0x58>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d10f      	bne.n	800cbe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <vPortEnterCritical+0x5c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	603b      	str	r3, [r7, #0]
}
 800cbdc:	bf00      	nop
 800cbde:	e7fe      	b.n	800cbde <vPortEnterCritical+0x4a>
	}
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	20000024 	.word	0x20000024
 800cbf0:	e000ed04 	.word	0xe000ed04

0800cbf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b083      	sub	sp, #12
 800cbf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbfa:	4b12      	ldr	r3, [pc, #72]	; (800cc44 <vPortExitCritical+0x50>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10a      	bne.n	800cc18 <vPortExitCritical+0x24>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	607b      	str	r3, [r7, #4]
}
 800cc14:	bf00      	nop
 800cc16:	e7fe      	b.n	800cc16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc18:	4b0a      	ldr	r3, [pc, #40]	; (800cc44 <vPortExitCritical+0x50>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	4a09      	ldr	r2, [pc, #36]	; (800cc44 <vPortExitCritical+0x50>)
 800cc20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc22:	4b08      	ldr	r3, [pc, #32]	; (800cc44 <vPortExitCritical+0x50>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d105      	bne.n	800cc36 <vPortExitCritical+0x42>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	f383 8811 	msr	BASEPRI, r3
}
 800cc34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc36:	bf00      	nop
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	20000024 	.word	0x20000024
	...

0800cc50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc50:	f3ef 8009 	mrs	r0, PSP
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	4b15      	ldr	r3, [pc, #84]	; (800ccb0 <pxCurrentTCBConst>)
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	f01e 0f10 	tst.w	lr, #16
 800cc60:	bf08      	it	eq
 800cc62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6a:	6010      	str	r0, [r2, #0]
 800cc6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc74:	f380 8811 	msr	BASEPRI, r0
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f7ff f9e6 	bl	800c050 <vTaskSwitchContext>
 800cc84:	f04f 0000 	mov.w	r0, #0
 800cc88:	f380 8811 	msr	BASEPRI, r0
 800cc8c:	bc09      	pop	{r0, r3}
 800cc8e:	6819      	ldr	r1, [r3, #0]
 800cc90:	6808      	ldr	r0, [r1, #0]
 800cc92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc96:	f01e 0f10 	tst.w	lr, #16
 800cc9a:	bf08      	it	eq
 800cc9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cca0:	f380 8809 	msr	PSP, r0
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	4770      	bx	lr
 800ccaa:	bf00      	nop
 800ccac:	f3af 8000 	nop.w

0800ccb0 <pxCurrentTCBConst>:
 800ccb0:	2000231c 	.word	0x2000231c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop

0800ccb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	607b      	str	r3, [r7, #4]
}
 800ccd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ccd2:	f7ff f8ff 	bl	800bed4 <xTaskIncrementTick>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d003      	beq.n	800cce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ccdc:	4b06      	ldr	r3, [pc, #24]	; (800ccf8 <SysTick_Handler+0x40>)
 800ccde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cce2:	601a      	str	r2, [r3, #0]
 800cce4:	2300      	movs	r3, #0
 800cce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	f383 8811 	msr	BASEPRI, r3
}
 800ccee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	e000ed04 	.word	0xe000ed04

0800ccfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd00:	4b0b      	ldr	r3, [pc, #44]	; (800cd30 <vPortSetupTimerInterrupt+0x34>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd06:	4b0b      	ldr	r3, [pc, #44]	; (800cd34 <vPortSetupTimerInterrupt+0x38>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd0c:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <vPortSetupTimerInterrupt+0x3c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a0a      	ldr	r2, [pc, #40]	; (800cd3c <vPortSetupTimerInterrupt+0x40>)
 800cd12:	fba2 2303 	umull	r2, r3, r2, r3
 800cd16:	099b      	lsrs	r3, r3, #6
 800cd18:	4a09      	ldr	r2, [pc, #36]	; (800cd40 <vPortSetupTimerInterrupt+0x44>)
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd1e:	4b04      	ldr	r3, [pc, #16]	; (800cd30 <vPortSetupTimerInterrupt+0x34>)
 800cd20:	2207      	movs	r2, #7
 800cd22:	601a      	str	r2, [r3, #0]
}
 800cd24:	bf00      	nop
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	e000e010 	.word	0xe000e010
 800cd34:	e000e018 	.word	0xe000e018
 800cd38:	20000004 	.word	0x20000004
 800cd3c:	10624dd3 	.word	0x10624dd3
 800cd40:	e000e014 	.word	0xe000e014

0800cd44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cd54 <vPortEnableVFP+0x10>
 800cd48:	6801      	ldr	r1, [r0, #0]
 800cd4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd4e:	6001      	str	r1, [r0, #0]
 800cd50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cd52:	bf00      	nop
 800cd54:	e000ed88 	.word	0xe000ed88

0800cd58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd5e:	f3ef 8305 	mrs	r3, IPSR
 800cd62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b0f      	cmp	r3, #15
 800cd68:	d914      	bls.n	800cd94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd6a:	4a17      	ldr	r2, [pc, #92]	; (800cdc8 <vPortValidateInterruptPriority+0x70>)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	4413      	add	r3, r2
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd74:	4b15      	ldr	r3, [pc, #84]	; (800cdcc <vPortValidateInterruptPriority+0x74>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	7afa      	ldrb	r2, [r7, #11]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d20a      	bcs.n	800cd94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	607b      	str	r3, [r7, #4]
}
 800cd90:	bf00      	nop
 800cd92:	e7fe      	b.n	800cd92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd94:	4b0e      	ldr	r3, [pc, #56]	; (800cdd0 <vPortValidateInterruptPriority+0x78>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd9c:	4b0d      	ldr	r3, [pc, #52]	; (800cdd4 <vPortValidateInterruptPriority+0x7c>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d90a      	bls.n	800cdba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	603b      	str	r3, [r7, #0]
}
 800cdb6:	bf00      	nop
 800cdb8:	e7fe      	b.n	800cdb8 <vPortValidateInterruptPriority+0x60>
	}
 800cdba:	bf00      	nop
 800cdbc:	3714      	adds	r7, #20
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	e000e3f0 	.word	0xe000e3f0
 800cdcc:	20002448 	.word	0x20002448
 800cdd0:	e000ed0c 	.word	0xe000ed0c
 800cdd4:	2000244c 	.word	0x2000244c

0800cdd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b08a      	sub	sp, #40	; 0x28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cde0:	2300      	movs	r3, #0
 800cde2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cde4:	f7fe ffcc 	bl	800bd80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cde8:	4b5b      	ldr	r3, [pc, #364]	; (800cf58 <pvPortMalloc+0x180>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cdf0:	f000 f916 	bl	800d020 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cdf4:	4b59      	ldr	r3, [pc, #356]	; (800cf5c <pvPortMalloc+0x184>)
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f040 808e 	bne.w	800cf1e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d01d      	beq.n	800ce44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce08:	2208      	movs	r2, #8
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f003 0307 	and.w	r3, r3, #7
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d014      	beq.n	800ce44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f023 0307 	bic.w	r3, r3, #7
 800ce20:	3308      	adds	r3, #8
 800ce22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00a      	beq.n	800ce44 <pvPortMalloc+0x6c>
	__asm volatile
 800ce2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce32:	f383 8811 	msr	BASEPRI, r3
 800ce36:	f3bf 8f6f 	isb	sy
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	617b      	str	r3, [r7, #20]
}
 800ce40:	bf00      	nop
 800ce42:	e7fe      	b.n	800ce42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d069      	beq.n	800cf1e <pvPortMalloc+0x146>
 800ce4a:	4b45      	ldr	r3, [pc, #276]	; (800cf60 <pvPortMalloc+0x188>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d864      	bhi.n	800cf1e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ce54:	4b43      	ldr	r3, [pc, #268]	; (800cf64 <pvPortMalloc+0x18c>)
 800ce56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ce58:	4b42      	ldr	r3, [pc, #264]	; (800cf64 <pvPortMalloc+0x18c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce5e:	e004      	b.n	800ce6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d903      	bls.n	800ce7c <pvPortMalloc+0xa4>
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1f1      	bne.n	800ce60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce7c:	4b36      	ldr	r3, [pc, #216]	; (800cf58 <pvPortMalloc+0x180>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d04b      	beq.n	800cf1e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce86:	6a3b      	ldr	r3, [r7, #32]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2208      	movs	r2, #8
 800ce8c:	4413      	add	r3, r2
 800ce8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	1ad2      	subs	r2, r2, r3
 800cea0:	2308      	movs	r3, #8
 800cea2:	005b      	lsls	r3, r3, #1
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d91f      	bls.n	800cee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4413      	add	r3, r2
 800ceae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	f003 0307 	and.w	r3, r3, #7
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00a      	beq.n	800ced0 <pvPortMalloc+0xf8>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	613b      	str	r3, [r7, #16]
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	685a      	ldr	r2, [r3, #4]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	1ad2      	subs	r2, r2, r3
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cee2:	69b8      	ldr	r0, [r7, #24]
 800cee4:	f000 f8fe 	bl	800d0e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cee8:	4b1d      	ldr	r3, [pc, #116]	; (800cf60 <pvPortMalloc+0x188>)
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	4a1b      	ldr	r2, [pc, #108]	; (800cf60 <pvPortMalloc+0x188>)
 800cef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cef6:	4b1a      	ldr	r3, [pc, #104]	; (800cf60 <pvPortMalloc+0x188>)
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	4b1b      	ldr	r3, [pc, #108]	; (800cf68 <pvPortMalloc+0x190>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d203      	bcs.n	800cf0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf02:	4b17      	ldr	r3, [pc, #92]	; (800cf60 <pvPortMalloc+0x188>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a18      	ldr	r2, [pc, #96]	; (800cf68 <pvPortMalloc+0x190>)
 800cf08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	4b13      	ldr	r3, [pc, #76]	; (800cf5c <pvPortMalloc+0x184>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	431a      	orrs	r2, r3
 800cf14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf1e:	f7fe ff3d 	bl	800bd9c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d101      	bne.n	800cf2c <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cf28:	f7f4 fdc4 	bl	8001ab4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00a      	beq.n	800cf4c <pvPortMalloc+0x174>
	__asm volatile
 800cf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	60fb      	str	r3, [r7, #12]
}
 800cf48:	bf00      	nop
 800cf4a:	e7fe      	b.n	800cf4a <pvPortMalloc+0x172>
	return pvReturn;
 800cf4c:	69fb      	ldr	r3, [r7, #28]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3728      	adds	r7, #40	; 0x28
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20004458 	.word	0x20004458
 800cf5c:	20004464 	.word	0x20004464
 800cf60:	2000445c 	.word	0x2000445c
 800cf64:	20004450 	.word	0x20004450
 800cf68:	20004460 	.word	0x20004460

0800cf6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d048      	beq.n	800d010 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf7e:	2308      	movs	r3, #8
 800cf80:	425b      	negs	r3, r3
 800cf82:	697a      	ldr	r2, [r7, #20]
 800cf84:	4413      	add	r3, r2
 800cf86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	685a      	ldr	r2, [r3, #4]
 800cf90:	4b21      	ldr	r3, [pc, #132]	; (800d018 <vPortFree+0xac>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4013      	ands	r3, r2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10a      	bne.n	800cfb0 <vPortFree+0x44>
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	60fb      	str	r3, [r7, #12]
}
 800cfac:	bf00      	nop
 800cfae:	e7fe      	b.n	800cfae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00a      	beq.n	800cfce <vPortFree+0x62>
	__asm volatile
 800cfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	60bb      	str	r3, [r7, #8]
}
 800cfca:	bf00      	nop
 800cfcc:	e7fe      	b.n	800cfcc <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	685a      	ldr	r2, [r3, #4]
 800cfd2:	4b11      	ldr	r3, [pc, #68]	; (800d018 <vPortFree+0xac>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4013      	ands	r3, r2
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d019      	beq.n	800d010 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d115      	bne.n	800d010 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	4b0b      	ldr	r3, [pc, #44]	; (800d018 <vPortFree+0xac>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	43db      	mvns	r3, r3
 800cfee:	401a      	ands	r2, r3
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cff4:	f7fe fec4 	bl	800bd80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	4b07      	ldr	r3, [pc, #28]	; (800d01c <vPortFree+0xb0>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4413      	add	r3, r2
 800d002:	4a06      	ldr	r2, [pc, #24]	; (800d01c <vPortFree+0xb0>)
 800d004:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d006:	6938      	ldr	r0, [r7, #16]
 800d008:	f000 f86c 	bl	800d0e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d00c:	f7fe fec6 	bl	800bd9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d010:	bf00      	nop
 800d012:	3718      	adds	r7, #24
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	20004464 	.word	0x20004464
 800d01c:	2000445c 	.word	0x2000445c

0800d020 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d02a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d02c:	4b27      	ldr	r3, [pc, #156]	; (800d0cc <prvHeapInit+0xac>)
 800d02e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f003 0307 	and.w	r3, r3, #7
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00c      	beq.n	800d054 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	3307      	adds	r3, #7
 800d03e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f023 0307 	bic.w	r3, r3, #7
 800d046:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	4a1f      	ldr	r2, [pc, #124]	; (800d0cc <prvHeapInit+0xac>)
 800d050:	4413      	add	r3, r2
 800d052:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d058:	4a1d      	ldr	r2, [pc, #116]	; (800d0d0 <prvHeapInit+0xb0>)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d05e:	4b1c      	ldr	r3, [pc, #112]	; (800d0d0 <prvHeapInit+0xb0>)
 800d060:	2200      	movs	r2, #0
 800d062:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	68ba      	ldr	r2, [r7, #8]
 800d068:	4413      	add	r3, r2
 800d06a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d06c:	2208      	movs	r2, #8
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	1a9b      	subs	r3, r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f023 0307 	bic.w	r3, r3, #7
 800d07a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4a15      	ldr	r2, [pc, #84]	; (800d0d4 <prvHeapInit+0xb4>)
 800d080:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d082:	4b14      	ldr	r3, [pc, #80]	; (800d0d4 <prvHeapInit+0xb4>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2200      	movs	r2, #0
 800d088:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d08a:	4b12      	ldr	r3, [pc, #72]	; (800d0d4 <prvHeapInit+0xb4>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	1ad2      	subs	r2, r2, r3
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d0a0:	4b0c      	ldr	r3, [pc, #48]	; (800d0d4 <prvHeapInit+0xb4>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	4a0a      	ldr	r2, [pc, #40]	; (800d0d8 <prvHeapInit+0xb8>)
 800d0ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	4a09      	ldr	r2, [pc, #36]	; (800d0dc <prvHeapInit+0xbc>)
 800d0b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d0b8:	4b09      	ldr	r3, [pc, #36]	; (800d0e0 <prvHeapInit+0xc0>)
 800d0ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0be:	601a      	str	r2, [r3, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ca:	4770      	bx	lr
 800d0cc:	20002450 	.word	0x20002450
 800d0d0:	20004450 	.word	0x20004450
 800d0d4:	20004458 	.word	0x20004458
 800d0d8:	20004460 	.word	0x20004460
 800d0dc:	2000445c 	.word	0x2000445c
 800d0e0:	20004464 	.word	0x20004464

0800d0e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0ec:	4b28      	ldr	r3, [pc, #160]	; (800d190 <prvInsertBlockIntoFreeList+0xac>)
 800d0ee:	60fb      	str	r3, [r7, #12]
 800d0f0:	e002      	b.n	800d0f8 <prvInsertBlockIntoFreeList+0x14>
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	60fb      	str	r3, [r7, #12]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d8f7      	bhi.n	800d0f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	4413      	add	r3, r2
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d108      	bne.n	800d126 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	441a      	add	r2, r3
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	68ba      	ldr	r2, [r7, #8]
 800d130:	441a      	add	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d118      	bne.n	800d16c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	4b15      	ldr	r3, [pc, #84]	; (800d194 <prvInsertBlockIntoFreeList+0xb0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	d00d      	beq.n	800d162 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	685a      	ldr	r2, [r3, #4]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	441a      	add	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	e008      	b.n	800d174 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d162:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <prvInsertBlockIntoFreeList+0xb0>)
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	e003      	b.n	800d174 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d002      	beq.n	800d182 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d182:	bf00      	nop
 800d184:	3714      	adds	r7, #20
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	20004450 	.word	0x20004450
 800d194:	20004458 	.word	0x20004458

0800d198 <__libc_init_array>:
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	4d0d      	ldr	r5, [pc, #52]	; (800d1d0 <__libc_init_array+0x38>)
 800d19c:	4c0d      	ldr	r4, [pc, #52]	; (800d1d4 <__libc_init_array+0x3c>)
 800d19e:	1b64      	subs	r4, r4, r5
 800d1a0:	10a4      	asrs	r4, r4, #2
 800d1a2:	2600      	movs	r6, #0
 800d1a4:	42a6      	cmp	r6, r4
 800d1a6:	d109      	bne.n	800d1bc <__libc_init_array+0x24>
 800d1a8:	4d0b      	ldr	r5, [pc, #44]	; (800d1d8 <__libc_init_array+0x40>)
 800d1aa:	4c0c      	ldr	r4, [pc, #48]	; (800d1dc <__libc_init_array+0x44>)
 800d1ac:	f000 fd4a 	bl	800dc44 <_init>
 800d1b0:	1b64      	subs	r4, r4, r5
 800d1b2:	10a4      	asrs	r4, r4, #2
 800d1b4:	2600      	movs	r6, #0
 800d1b6:	42a6      	cmp	r6, r4
 800d1b8:	d105      	bne.n	800d1c6 <__libc_init_array+0x2e>
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1c0:	4798      	blx	r3
 800d1c2:	3601      	adds	r6, #1
 800d1c4:	e7ee      	b.n	800d1a4 <__libc_init_array+0xc>
 800d1c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ca:	4798      	blx	r3
 800d1cc:	3601      	adds	r6, #1
 800d1ce:	e7f2      	b.n	800d1b6 <__libc_init_array+0x1e>
 800d1d0:	0800e058 	.word	0x0800e058
 800d1d4:	0800e058 	.word	0x0800e058
 800d1d8:	0800e058 	.word	0x0800e058
 800d1dc:	0800e05c 	.word	0x0800e05c

0800d1e0 <__retarget_lock_acquire_recursive>:
 800d1e0:	4770      	bx	lr

0800d1e2 <__retarget_lock_release_recursive>:
 800d1e2:	4770      	bx	lr

0800d1e4 <malloc>:
 800d1e4:	4b02      	ldr	r3, [pc, #8]	; (800d1f0 <malloc+0xc>)
 800d1e6:	4601      	mov	r1, r0
 800d1e8:	6818      	ldr	r0, [r3, #0]
 800d1ea:	f000 b88d 	b.w	800d308 <_malloc_r>
 800d1ee:	bf00      	nop
 800d1f0:	20000028 	.word	0x20000028

0800d1f4 <free>:
 800d1f4:	4b02      	ldr	r3, [pc, #8]	; (800d200 <free+0xc>)
 800d1f6:	4601      	mov	r1, r0
 800d1f8:	6818      	ldr	r0, [r3, #0]
 800d1fa:	f000 b819 	b.w	800d230 <_free_r>
 800d1fe:	bf00      	nop
 800d200:	20000028 	.word	0x20000028

0800d204 <memcpy>:
 800d204:	440a      	add	r2, r1
 800d206:	4291      	cmp	r1, r2
 800d208:	f100 33ff 	add.w	r3, r0, #4294967295
 800d20c:	d100      	bne.n	800d210 <memcpy+0xc>
 800d20e:	4770      	bx	lr
 800d210:	b510      	push	{r4, lr}
 800d212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d21a:	4291      	cmp	r1, r2
 800d21c:	d1f9      	bne.n	800d212 <memcpy+0xe>
 800d21e:	bd10      	pop	{r4, pc}

0800d220 <memset>:
 800d220:	4402      	add	r2, r0
 800d222:	4603      	mov	r3, r0
 800d224:	4293      	cmp	r3, r2
 800d226:	d100      	bne.n	800d22a <memset+0xa>
 800d228:	4770      	bx	lr
 800d22a:	f803 1b01 	strb.w	r1, [r3], #1
 800d22e:	e7f9      	b.n	800d224 <memset+0x4>

0800d230 <_free_r>:
 800d230:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d232:	2900      	cmp	r1, #0
 800d234:	d044      	beq.n	800d2c0 <_free_r+0x90>
 800d236:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d23a:	9001      	str	r0, [sp, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	f1a1 0404 	sub.w	r4, r1, #4
 800d242:	bfb8      	it	lt
 800d244:	18e4      	addlt	r4, r4, r3
 800d246:	f000 f9a3 	bl	800d590 <__malloc_lock>
 800d24a:	4a1e      	ldr	r2, [pc, #120]	; (800d2c4 <_free_r+0x94>)
 800d24c:	9801      	ldr	r0, [sp, #4]
 800d24e:	6813      	ldr	r3, [r2, #0]
 800d250:	b933      	cbnz	r3, 800d260 <_free_r+0x30>
 800d252:	6063      	str	r3, [r4, #4]
 800d254:	6014      	str	r4, [r2, #0]
 800d256:	b003      	add	sp, #12
 800d258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d25c:	f000 b99e 	b.w	800d59c <__malloc_unlock>
 800d260:	42a3      	cmp	r3, r4
 800d262:	d908      	bls.n	800d276 <_free_r+0x46>
 800d264:	6825      	ldr	r5, [r4, #0]
 800d266:	1961      	adds	r1, r4, r5
 800d268:	428b      	cmp	r3, r1
 800d26a:	bf01      	itttt	eq
 800d26c:	6819      	ldreq	r1, [r3, #0]
 800d26e:	685b      	ldreq	r3, [r3, #4]
 800d270:	1949      	addeq	r1, r1, r5
 800d272:	6021      	streq	r1, [r4, #0]
 800d274:	e7ed      	b.n	800d252 <_free_r+0x22>
 800d276:	461a      	mov	r2, r3
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	b10b      	cbz	r3, 800d280 <_free_r+0x50>
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	d9fa      	bls.n	800d276 <_free_r+0x46>
 800d280:	6811      	ldr	r1, [r2, #0]
 800d282:	1855      	adds	r5, r2, r1
 800d284:	42a5      	cmp	r5, r4
 800d286:	d10b      	bne.n	800d2a0 <_free_r+0x70>
 800d288:	6824      	ldr	r4, [r4, #0]
 800d28a:	4421      	add	r1, r4
 800d28c:	1854      	adds	r4, r2, r1
 800d28e:	42a3      	cmp	r3, r4
 800d290:	6011      	str	r1, [r2, #0]
 800d292:	d1e0      	bne.n	800d256 <_free_r+0x26>
 800d294:	681c      	ldr	r4, [r3, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	6053      	str	r3, [r2, #4]
 800d29a:	4421      	add	r1, r4
 800d29c:	6011      	str	r1, [r2, #0]
 800d29e:	e7da      	b.n	800d256 <_free_r+0x26>
 800d2a0:	d902      	bls.n	800d2a8 <_free_r+0x78>
 800d2a2:	230c      	movs	r3, #12
 800d2a4:	6003      	str	r3, [r0, #0]
 800d2a6:	e7d6      	b.n	800d256 <_free_r+0x26>
 800d2a8:	6825      	ldr	r5, [r4, #0]
 800d2aa:	1961      	adds	r1, r4, r5
 800d2ac:	428b      	cmp	r3, r1
 800d2ae:	bf04      	itt	eq
 800d2b0:	6819      	ldreq	r1, [r3, #0]
 800d2b2:	685b      	ldreq	r3, [r3, #4]
 800d2b4:	6063      	str	r3, [r4, #4]
 800d2b6:	bf04      	itt	eq
 800d2b8:	1949      	addeq	r1, r1, r5
 800d2ba:	6021      	streq	r1, [r4, #0]
 800d2bc:	6054      	str	r4, [r2, #4]
 800d2be:	e7ca      	b.n	800d256 <_free_r+0x26>
 800d2c0:	b003      	add	sp, #12
 800d2c2:	bd30      	pop	{r4, r5, pc}
 800d2c4:	2000446c 	.word	0x2000446c

0800d2c8 <sbrk_aligned>:
 800d2c8:	b570      	push	{r4, r5, r6, lr}
 800d2ca:	4e0e      	ldr	r6, [pc, #56]	; (800d304 <sbrk_aligned+0x3c>)
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	6831      	ldr	r1, [r6, #0]
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	b911      	cbnz	r1, 800d2da <sbrk_aligned+0x12>
 800d2d4:	f000 f8fe 	bl	800d4d4 <_sbrk_r>
 800d2d8:	6030      	str	r0, [r6, #0]
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f000 f8f9 	bl	800d4d4 <_sbrk_r>
 800d2e2:	1c43      	adds	r3, r0, #1
 800d2e4:	d00a      	beq.n	800d2fc <sbrk_aligned+0x34>
 800d2e6:	1cc4      	adds	r4, r0, #3
 800d2e8:	f024 0403 	bic.w	r4, r4, #3
 800d2ec:	42a0      	cmp	r0, r4
 800d2ee:	d007      	beq.n	800d300 <sbrk_aligned+0x38>
 800d2f0:	1a21      	subs	r1, r4, r0
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	f000 f8ee 	bl	800d4d4 <_sbrk_r>
 800d2f8:	3001      	adds	r0, #1
 800d2fa:	d101      	bne.n	800d300 <sbrk_aligned+0x38>
 800d2fc:	f04f 34ff 	mov.w	r4, #4294967295
 800d300:	4620      	mov	r0, r4
 800d302:	bd70      	pop	{r4, r5, r6, pc}
 800d304:	20004470 	.word	0x20004470

0800d308 <_malloc_r>:
 800d308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d30c:	1ccd      	adds	r5, r1, #3
 800d30e:	f025 0503 	bic.w	r5, r5, #3
 800d312:	3508      	adds	r5, #8
 800d314:	2d0c      	cmp	r5, #12
 800d316:	bf38      	it	cc
 800d318:	250c      	movcc	r5, #12
 800d31a:	2d00      	cmp	r5, #0
 800d31c:	4607      	mov	r7, r0
 800d31e:	db01      	blt.n	800d324 <_malloc_r+0x1c>
 800d320:	42a9      	cmp	r1, r5
 800d322:	d905      	bls.n	800d330 <_malloc_r+0x28>
 800d324:	230c      	movs	r3, #12
 800d326:	603b      	str	r3, [r7, #0]
 800d328:	2600      	movs	r6, #0
 800d32a:	4630      	mov	r0, r6
 800d32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d330:	4e2e      	ldr	r6, [pc, #184]	; (800d3ec <_malloc_r+0xe4>)
 800d332:	f000 f92d 	bl	800d590 <__malloc_lock>
 800d336:	6833      	ldr	r3, [r6, #0]
 800d338:	461c      	mov	r4, r3
 800d33a:	bb34      	cbnz	r4, 800d38a <_malloc_r+0x82>
 800d33c:	4629      	mov	r1, r5
 800d33e:	4638      	mov	r0, r7
 800d340:	f7ff ffc2 	bl	800d2c8 <sbrk_aligned>
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	4604      	mov	r4, r0
 800d348:	d14d      	bne.n	800d3e6 <_malloc_r+0xde>
 800d34a:	6834      	ldr	r4, [r6, #0]
 800d34c:	4626      	mov	r6, r4
 800d34e:	2e00      	cmp	r6, #0
 800d350:	d140      	bne.n	800d3d4 <_malloc_r+0xcc>
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	4631      	mov	r1, r6
 800d356:	4638      	mov	r0, r7
 800d358:	eb04 0803 	add.w	r8, r4, r3
 800d35c:	f000 f8ba 	bl	800d4d4 <_sbrk_r>
 800d360:	4580      	cmp	r8, r0
 800d362:	d13a      	bne.n	800d3da <_malloc_r+0xd2>
 800d364:	6821      	ldr	r1, [r4, #0]
 800d366:	3503      	adds	r5, #3
 800d368:	1a6d      	subs	r5, r5, r1
 800d36a:	f025 0503 	bic.w	r5, r5, #3
 800d36e:	3508      	adds	r5, #8
 800d370:	2d0c      	cmp	r5, #12
 800d372:	bf38      	it	cc
 800d374:	250c      	movcc	r5, #12
 800d376:	4629      	mov	r1, r5
 800d378:	4638      	mov	r0, r7
 800d37a:	f7ff ffa5 	bl	800d2c8 <sbrk_aligned>
 800d37e:	3001      	adds	r0, #1
 800d380:	d02b      	beq.n	800d3da <_malloc_r+0xd2>
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	442b      	add	r3, r5
 800d386:	6023      	str	r3, [r4, #0]
 800d388:	e00e      	b.n	800d3a8 <_malloc_r+0xa0>
 800d38a:	6822      	ldr	r2, [r4, #0]
 800d38c:	1b52      	subs	r2, r2, r5
 800d38e:	d41e      	bmi.n	800d3ce <_malloc_r+0xc6>
 800d390:	2a0b      	cmp	r2, #11
 800d392:	d916      	bls.n	800d3c2 <_malloc_r+0xba>
 800d394:	1961      	adds	r1, r4, r5
 800d396:	42a3      	cmp	r3, r4
 800d398:	6025      	str	r5, [r4, #0]
 800d39a:	bf18      	it	ne
 800d39c:	6059      	strne	r1, [r3, #4]
 800d39e:	6863      	ldr	r3, [r4, #4]
 800d3a0:	bf08      	it	eq
 800d3a2:	6031      	streq	r1, [r6, #0]
 800d3a4:	5162      	str	r2, [r4, r5]
 800d3a6:	604b      	str	r3, [r1, #4]
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	f104 060b 	add.w	r6, r4, #11
 800d3ae:	f000 f8f5 	bl	800d59c <__malloc_unlock>
 800d3b2:	f026 0607 	bic.w	r6, r6, #7
 800d3b6:	1d23      	adds	r3, r4, #4
 800d3b8:	1af2      	subs	r2, r6, r3
 800d3ba:	d0b6      	beq.n	800d32a <_malloc_r+0x22>
 800d3bc:	1b9b      	subs	r3, r3, r6
 800d3be:	50a3      	str	r3, [r4, r2]
 800d3c0:	e7b3      	b.n	800d32a <_malloc_r+0x22>
 800d3c2:	6862      	ldr	r2, [r4, #4]
 800d3c4:	42a3      	cmp	r3, r4
 800d3c6:	bf0c      	ite	eq
 800d3c8:	6032      	streq	r2, [r6, #0]
 800d3ca:	605a      	strne	r2, [r3, #4]
 800d3cc:	e7ec      	b.n	800d3a8 <_malloc_r+0xa0>
 800d3ce:	4623      	mov	r3, r4
 800d3d0:	6864      	ldr	r4, [r4, #4]
 800d3d2:	e7b2      	b.n	800d33a <_malloc_r+0x32>
 800d3d4:	4634      	mov	r4, r6
 800d3d6:	6876      	ldr	r6, [r6, #4]
 800d3d8:	e7b9      	b.n	800d34e <_malloc_r+0x46>
 800d3da:	230c      	movs	r3, #12
 800d3dc:	603b      	str	r3, [r7, #0]
 800d3de:	4638      	mov	r0, r7
 800d3e0:	f000 f8dc 	bl	800d59c <__malloc_unlock>
 800d3e4:	e7a1      	b.n	800d32a <_malloc_r+0x22>
 800d3e6:	6025      	str	r5, [r4, #0]
 800d3e8:	e7de      	b.n	800d3a8 <_malloc_r+0xa0>
 800d3ea:	bf00      	nop
 800d3ec:	2000446c 	.word	0x2000446c

0800d3f0 <realloc>:
 800d3f0:	4b02      	ldr	r3, [pc, #8]	; (800d3fc <realloc+0xc>)
 800d3f2:	460a      	mov	r2, r1
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	6818      	ldr	r0, [r3, #0]
 800d3f8:	f000 b8d6 	b.w	800d5a8 <_realloc_r>
 800d3fc:	20000028 	.word	0x20000028

0800d400 <cleanup_glue>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	460c      	mov	r4, r1
 800d404:	6809      	ldr	r1, [r1, #0]
 800d406:	4605      	mov	r5, r0
 800d408:	b109      	cbz	r1, 800d40e <cleanup_glue+0xe>
 800d40a:	f7ff fff9 	bl	800d400 <cleanup_glue>
 800d40e:	4621      	mov	r1, r4
 800d410:	4628      	mov	r0, r5
 800d412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d416:	f7ff bf0b 	b.w	800d230 <_free_r>
	...

0800d41c <_reclaim_reent>:
 800d41c:	4b2c      	ldr	r3, [pc, #176]	; (800d4d0 <_reclaim_reent+0xb4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4283      	cmp	r3, r0
 800d422:	b570      	push	{r4, r5, r6, lr}
 800d424:	4604      	mov	r4, r0
 800d426:	d051      	beq.n	800d4cc <_reclaim_reent+0xb0>
 800d428:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d42a:	b143      	cbz	r3, 800d43e <_reclaim_reent+0x22>
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d14a      	bne.n	800d4c8 <_reclaim_reent+0xac>
 800d432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d434:	6819      	ldr	r1, [r3, #0]
 800d436:	b111      	cbz	r1, 800d43e <_reclaim_reent+0x22>
 800d438:	4620      	mov	r0, r4
 800d43a:	f7ff fef9 	bl	800d230 <_free_r>
 800d43e:	6961      	ldr	r1, [r4, #20]
 800d440:	b111      	cbz	r1, 800d448 <_reclaim_reent+0x2c>
 800d442:	4620      	mov	r0, r4
 800d444:	f7ff fef4 	bl	800d230 <_free_r>
 800d448:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d44a:	b111      	cbz	r1, 800d452 <_reclaim_reent+0x36>
 800d44c:	4620      	mov	r0, r4
 800d44e:	f7ff feef 	bl	800d230 <_free_r>
 800d452:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d454:	b111      	cbz	r1, 800d45c <_reclaim_reent+0x40>
 800d456:	4620      	mov	r0, r4
 800d458:	f7ff feea 	bl	800d230 <_free_r>
 800d45c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d45e:	b111      	cbz	r1, 800d466 <_reclaim_reent+0x4a>
 800d460:	4620      	mov	r0, r4
 800d462:	f7ff fee5 	bl	800d230 <_free_r>
 800d466:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d468:	b111      	cbz	r1, 800d470 <_reclaim_reent+0x54>
 800d46a:	4620      	mov	r0, r4
 800d46c:	f7ff fee0 	bl	800d230 <_free_r>
 800d470:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d472:	b111      	cbz	r1, 800d47a <_reclaim_reent+0x5e>
 800d474:	4620      	mov	r0, r4
 800d476:	f7ff fedb 	bl	800d230 <_free_r>
 800d47a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d47c:	b111      	cbz	r1, 800d484 <_reclaim_reent+0x68>
 800d47e:	4620      	mov	r0, r4
 800d480:	f7ff fed6 	bl	800d230 <_free_r>
 800d484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d486:	b111      	cbz	r1, 800d48e <_reclaim_reent+0x72>
 800d488:	4620      	mov	r0, r4
 800d48a:	f7ff fed1 	bl	800d230 <_free_r>
 800d48e:	69a3      	ldr	r3, [r4, #24]
 800d490:	b1e3      	cbz	r3, 800d4cc <_reclaim_reent+0xb0>
 800d492:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d494:	4620      	mov	r0, r4
 800d496:	4798      	blx	r3
 800d498:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d49a:	b1b9      	cbz	r1, 800d4cc <_reclaim_reent+0xb0>
 800d49c:	4620      	mov	r0, r4
 800d49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4a2:	f7ff bfad 	b.w	800d400 <cleanup_glue>
 800d4a6:	5949      	ldr	r1, [r1, r5]
 800d4a8:	b941      	cbnz	r1, 800d4bc <_reclaim_reent+0xa0>
 800d4aa:	3504      	adds	r5, #4
 800d4ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4ae:	2d80      	cmp	r5, #128	; 0x80
 800d4b0:	68d9      	ldr	r1, [r3, #12]
 800d4b2:	d1f8      	bne.n	800d4a6 <_reclaim_reent+0x8a>
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f7ff febb 	bl	800d230 <_free_r>
 800d4ba:	e7ba      	b.n	800d432 <_reclaim_reent+0x16>
 800d4bc:	680e      	ldr	r6, [r1, #0]
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f7ff feb6 	bl	800d230 <_free_r>
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	e7ef      	b.n	800d4a8 <_reclaim_reent+0x8c>
 800d4c8:	2500      	movs	r5, #0
 800d4ca:	e7ef      	b.n	800d4ac <_reclaim_reent+0x90>
 800d4cc:	bd70      	pop	{r4, r5, r6, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20000028 	.word	0x20000028

0800d4d4 <_sbrk_r>:
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4d06      	ldr	r5, [pc, #24]	; (800d4f0 <_sbrk_r+0x1c>)
 800d4d8:	2300      	movs	r3, #0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	4608      	mov	r0, r1
 800d4de:	602b      	str	r3, [r5, #0]
 800d4e0:	f000 fba2 	bl	800dc28 <_sbrk>
 800d4e4:	1c43      	adds	r3, r0, #1
 800d4e6:	d102      	bne.n	800d4ee <_sbrk_r+0x1a>
 800d4e8:	682b      	ldr	r3, [r5, #0]
 800d4ea:	b103      	cbz	r3, 800d4ee <_sbrk_r+0x1a>
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	bd38      	pop	{r3, r4, r5, pc}
 800d4f0:	20004474 	.word	0x20004474

0800d4f4 <strchr>:
 800d4f4:	b2c9      	uxtb	r1, r1
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4fc:	b11a      	cbz	r2, 800d506 <strchr+0x12>
 800d4fe:	428a      	cmp	r2, r1
 800d500:	d1f9      	bne.n	800d4f6 <strchr+0x2>
 800d502:	4618      	mov	r0, r3
 800d504:	4770      	bx	lr
 800d506:	2900      	cmp	r1, #0
 800d508:	bf18      	it	ne
 800d50a:	2300      	movne	r3, #0
 800d50c:	e7f9      	b.n	800d502 <strchr+0xe>

0800d50e <strcpy>:
 800d50e:	4603      	mov	r3, r0
 800d510:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d514:	f803 2b01 	strb.w	r2, [r3], #1
 800d518:	2a00      	cmp	r2, #0
 800d51a:	d1f9      	bne.n	800d510 <strcpy+0x2>
 800d51c:	4770      	bx	lr

0800d51e <_vsniprintf_r>:
 800d51e:	b530      	push	{r4, r5, lr}
 800d520:	4614      	mov	r4, r2
 800d522:	2c00      	cmp	r4, #0
 800d524:	b09b      	sub	sp, #108	; 0x6c
 800d526:	4605      	mov	r5, r0
 800d528:	461a      	mov	r2, r3
 800d52a:	da05      	bge.n	800d538 <_vsniprintf_r+0x1a>
 800d52c:	238b      	movs	r3, #139	; 0x8b
 800d52e:	6003      	str	r3, [r0, #0]
 800d530:	f04f 30ff 	mov.w	r0, #4294967295
 800d534:	b01b      	add	sp, #108	; 0x6c
 800d536:	bd30      	pop	{r4, r5, pc}
 800d538:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d53c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d540:	bf14      	ite	ne
 800d542:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d546:	4623      	moveq	r3, r4
 800d548:	9302      	str	r3, [sp, #8]
 800d54a:	9305      	str	r3, [sp, #20]
 800d54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d550:	9100      	str	r1, [sp, #0]
 800d552:	9104      	str	r1, [sp, #16]
 800d554:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d558:	4669      	mov	r1, sp
 800d55a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d55c:	f000 f8ae 	bl	800d6bc <_svfiprintf_r>
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	bfbc      	itt	lt
 800d564:	238b      	movlt	r3, #139	; 0x8b
 800d566:	602b      	strlt	r3, [r5, #0]
 800d568:	2c00      	cmp	r4, #0
 800d56a:	d0e3      	beq.n	800d534 <_vsniprintf_r+0x16>
 800d56c:	9b00      	ldr	r3, [sp, #0]
 800d56e:	2200      	movs	r2, #0
 800d570:	701a      	strb	r2, [r3, #0]
 800d572:	e7df      	b.n	800d534 <_vsniprintf_r+0x16>

0800d574 <vsniprintf>:
 800d574:	b507      	push	{r0, r1, r2, lr}
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	4613      	mov	r3, r2
 800d57a:	460a      	mov	r2, r1
 800d57c:	4601      	mov	r1, r0
 800d57e:	4803      	ldr	r0, [pc, #12]	; (800d58c <vsniprintf+0x18>)
 800d580:	6800      	ldr	r0, [r0, #0]
 800d582:	f7ff ffcc 	bl	800d51e <_vsniprintf_r>
 800d586:	b003      	add	sp, #12
 800d588:	f85d fb04 	ldr.w	pc, [sp], #4
 800d58c:	20000028 	.word	0x20000028

0800d590 <__malloc_lock>:
 800d590:	4801      	ldr	r0, [pc, #4]	; (800d598 <__malloc_lock+0x8>)
 800d592:	f7ff be25 	b.w	800d1e0 <__retarget_lock_acquire_recursive>
 800d596:	bf00      	nop
 800d598:	20004468 	.word	0x20004468

0800d59c <__malloc_unlock>:
 800d59c:	4801      	ldr	r0, [pc, #4]	; (800d5a4 <__malloc_unlock+0x8>)
 800d59e:	f7ff be20 	b.w	800d1e2 <__retarget_lock_release_recursive>
 800d5a2:	bf00      	nop
 800d5a4:	20004468 	.word	0x20004468

0800d5a8 <_realloc_r>:
 800d5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	4614      	mov	r4, r2
 800d5b0:	460e      	mov	r6, r1
 800d5b2:	b921      	cbnz	r1, 800d5be <_realloc_r+0x16>
 800d5b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b8:	4611      	mov	r1, r2
 800d5ba:	f7ff bea5 	b.w	800d308 <_malloc_r>
 800d5be:	b92a      	cbnz	r2, 800d5cc <_realloc_r+0x24>
 800d5c0:	f7ff fe36 	bl	800d230 <_free_r>
 800d5c4:	4625      	mov	r5, r4
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5cc:	f000 fb24 	bl	800dc18 <_malloc_usable_size_r>
 800d5d0:	4284      	cmp	r4, r0
 800d5d2:	4607      	mov	r7, r0
 800d5d4:	d802      	bhi.n	800d5dc <_realloc_r+0x34>
 800d5d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5da:	d812      	bhi.n	800d602 <_realloc_r+0x5a>
 800d5dc:	4621      	mov	r1, r4
 800d5de:	4640      	mov	r0, r8
 800d5e0:	f7ff fe92 	bl	800d308 <_malloc_r>
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d0ed      	beq.n	800d5c6 <_realloc_r+0x1e>
 800d5ea:	42bc      	cmp	r4, r7
 800d5ec:	4622      	mov	r2, r4
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	bf28      	it	cs
 800d5f2:	463a      	movcs	r2, r7
 800d5f4:	f7ff fe06 	bl	800d204 <memcpy>
 800d5f8:	4631      	mov	r1, r6
 800d5fa:	4640      	mov	r0, r8
 800d5fc:	f7ff fe18 	bl	800d230 <_free_r>
 800d600:	e7e1      	b.n	800d5c6 <_realloc_r+0x1e>
 800d602:	4635      	mov	r5, r6
 800d604:	e7df      	b.n	800d5c6 <_realloc_r+0x1e>

0800d606 <__ssputs_r>:
 800d606:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d60a:	688e      	ldr	r6, [r1, #8]
 800d60c:	429e      	cmp	r6, r3
 800d60e:	4682      	mov	sl, r0
 800d610:	460c      	mov	r4, r1
 800d612:	4690      	mov	r8, r2
 800d614:	461f      	mov	r7, r3
 800d616:	d838      	bhi.n	800d68a <__ssputs_r+0x84>
 800d618:	898a      	ldrh	r2, [r1, #12]
 800d61a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d61e:	d032      	beq.n	800d686 <__ssputs_r+0x80>
 800d620:	6825      	ldr	r5, [r4, #0]
 800d622:	6909      	ldr	r1, [r1, #16]
 800d624:	eba5 0901 	sub.w	r9, r5, r1
 800d628:	6965      	ldr	r5, [r4, #20]
 800d62a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d62e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d632:	3301      	adds	r3, #1
 800d634:	444b      	add	r3, r9
 800d636:	106d      	asrs	r5, r5, #1
 800d638:	429d      	cmp	r5, r3
 800d63a:	bf38      	it	cc
 800d63c:	461d      	movcc	r5, r3
 800d63e:	0553      	lsls	r3, r2, #21
 800d640:	d531      	bpl.n	800d6a6 <__ssputs_r+0xa0>
 800d642:	4629      	mov	r1, r5
 800d644:	f7ff fe60 	bl	800d308 <_malloc_r>
 800d648:	4606      	mov	r6, r0
 800d64a:	b950      	cbnz	r0, 800d662 <__ssputs_r+0x5c>
 800d64c:	230c      	movs	r3, #12
 800d64e:	f8ca 3000 	str.w	r3, [sl]
 800d652:	89a3      	ldrh	r3, [r4, #12]
 800d654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d658:	81a3      	strh	r3, [r4, #12]
 800d65a:	f04f 30ff 	mov.w	r0, #4294967295
 800d65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d662:	6921      	ldr	r1, [r4, #16]
 800d664:	464a      	mov	r2, r9
 800d666:	f7ff fdcd 	bl	800d204 <memcpy>
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d674:	81a3      	strh	r3, [r4, #12]
 800d676:	6126      	str	r6, [r4, #16]
 800d678:	6165      	str	r5, [r4, #20]
 800d67a:	444e      	add	r6, r9
 800d67c:	eba5 0509 	sub.w	r5, r5, r9
 800d680:	6026      	str	r6, [r4, #0]
 800d682:	60a5      	str	r5, [r4, #8]
 800d684:	463e      	mov	r6, r7
 800d686:	42be      	cmp	r6, r7
 800d688:	d900      	bls.n	800d68c <__ssputs_r+0x86>
 800d68a:	463e      	mov	r6, r7
 800d68c:	6820      	ldr	r0, [r4, #0]
 800d68e:	4632      	mov	r2, r6
 800d690:	4641      	mov	r1, r8
 800d692:	f000 faa7 	bl	800dbe4 <memmove>
 800d696:	68a3      	ldr	r3, [r4, #8]
 800d698:	1b9b      	subs	r3, r3, r6
 800d69a:	60a3      	str	r3, [r4, #8]
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	4433      	add	r3, r6
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	e7db      	b.n	800d65e <__ssputs_r+0x58>
 800d6a6:	462a      	mov	r2, r5
 800d6a8:	f7ff ff7e 	bl	800d5a8 <_realloc_r>
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d1e1      	bne.n	800d676 <__ssputs_r+0x70>
 800d6b2:	6921      	ldr	r1, [r4, #16]
 800d6b4:	4650      	mov	r0, sl
 800d6b6:	f7ff fdbb 	bl	800d230 <_free_r>
 800d6ba:	e7c7      	b.n	800d64c <__ssputs_r+0x46>

0800d6bc <_svfiprintf_r>:
 800d6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c0:	4698      	mov	r8, r3
 800d6c2:	898b      	ldrh	r3, [r1, #12]
 800d6c4:	061b      	lsls	r3, r3, #24
 800d6c6:	b09d      	sub	sp, #116	; 0x74
 800d6c8:	4607      	mov	r7, r0
 800d6ca:	460d      	mov	r5, r1
 800d6cc:	4614      	mov	r4, r2
 800d6ce:	d50e      	bpl.n	800d6ee <_svfiprintf_r+0x32>
 800d6d0:	690b      	ldr	r3, [r1, #16]
 800d6d2:	b963      	cbnz	r3, 800d6ee <_svfiprintf_r+0x32>
 800d6d4:	2140      	movs	r1, #64	; 0x40
 800d6d6:	f7ff fe17 	bl	800d308 <_malloc_r>
 800d6da:	6028      	str	r0, [r5, #0]
 800d6dc:	6128      	str	r0, [r5, #16]
 800d6de:	b920      	cbnz	r0, 800d6ea <_svfiprintf_r+0x2e>
 800d6e0:	230c      	movs	r3, #12
 800d6e2:	603b      	str	r3, [r7, #0]
 800d6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e8:	e0d1      	b.n	800d88e <_svfiprintf_r+0x1d2>
 800d6ea:	2340      	movs	r3, #64	; 0x40
 800d6ec:	616b      	str	r3, [r5, #20]
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f2:	2320      	movs	r3, #32
 800d6f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6fc:	2330      	movs	r3, #48	; 0x30
 800d6fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d8a8 <_svfiprintf_r+0x1ec>
 800d702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d706:	f04f 0901 	mov.w	r9, #1
 800d70a:	4623      	mov	r3, r4
 800d70c:	469a      	mov	sl, r3
 800d70e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d712:	b10a      	cbz	r2, 800d718 <_svfiprintf_r+0x5c>
 800d714:	2a25      	cmp	r2, #37	; 0x25
 800d716:	d1f9      	bne.n	800d70c <_svfiprintf_r+0x50>
 800d718:	ebba 0b04 	subs.w	fp, sl, r4
 800d71c:	d00b      	beq.n	800d736 <_svfiprintf_r+0x7a>
 800d71e:	465b      	mov	r3, fp
 800d720:	4622      	mov	r2, r4
 800d722:	4629      	mov	r1, r5
 800d724:	4638      	mov	r0, r7
 800d726:	f7ff ff6e 	bl	800d606 <__ssputs_r>
 800d72a:	3001      	adds	r0, #1
 800d72c:	f000 80aa 	beq.w	800d884 <_svfiprintf_r+0x1c8>
 800d730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d732:	445a      	add	r2, fp
 800d734:	9209      	str	r2, [sp, #36]	; 0x24
 800d736:	f89a 3000 	ldrb.w	r3, [sl]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f000 80a2 	beq.w	800d884 <_svfiprintf_r+0x1c8>
 800d740:	2300      	movs	r3, #0
 800d742:	f04f 32ff 	mov.w	r2, #4294967295
 800d746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d74a:	f10a 0a01 	add.w	sl, sl, #1
 800d74e:	9304      	str	r3, [sp, #16]
 800d750:	9307      	str	r3, [sp, #28]
 800d752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d756:	931a      	str	r3, [sp, #104]	; 0x68
 800d758:	4654      	mov	r4, sl
 800d75a:	2205      	movs	r2, #5
 800d75c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d760:	4851      	ldr	r0, [pc, #324]	; (800d8a8 <_svfiprintf_r+0x1ec>)
 800d762:	f7f2 fd45 	bl	80001f0 <memchr>
 800d766:	9a04      	ldr	r2, [sp, #16]
 800d768:	b9d8      	cbnz	r0, 800d7a2 <_svfiprintf_r+0xe6>
 800d76a:	06d0      	lsls	r0, r2, #27
 800d76c:	bf44      	itt	mi
 800d76e:	2320      	movmi	r3, #32
 800d770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d774:	0711      	lsls	r1, r2, #28
 800d776:	bf44      	itt	mi
 800d778:	232b      	movmi	r3, #43	; 0x2b
 800d77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d77e:	f89a 3000 	ldrb.w	r3, [sl]
 800d782:	2b2a      	cmp	r3, #42	; 0x2a
 800d784:	d015      	beq.n	800d7b2 <_svfiprintf_r+0xf6>
 800d786:	9a07      	ldr	r2, [sp, #28]
 800d788:	4654      	mov	r4, sl
 800d78a:	2000      	movs	r0, #0
 800d78c:	f04f 0c0a 	mov.w	ip, #10
 800d790:	4621      	mov	r1, r4
 800d792:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d796:	3b30      	subs	r3, #48	; 0x30
 800d798:	2b09      	cmp	r3, #9
 800d79a:	d94e      	bls.n	800d83a <_svfiprintf_r+0x17e>
 800d79c:	b1b0      	cbz	r0, 800d7cc <_svfiprintf_r+0x110>
 800d79e:	9207      	str	r2, [sp, #28]
 800d7a0:	e014      	b.n	800d7cc <_svfiprintf_r+0x110>
 800d7a2:	eba0 0308 	sub.w	r3, r0, r8
 800d7a6:	fa09 f303 	lsl.w	r3, r9, r3
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	9304      	str	r3, [sp, #16]
 800d7ae:	46a2      	mov	sl, r4
 800d7b0:	e7d2      	b.n	800d758 <_svfiprintf_r+0x9c>
 800d7b2:	9b03      	ldr	r3, [sp, #12]
 800d7b4:	1d19      	adds	r1, r3, #4
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	9103      	str	r1, [sp, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	bfbb      	ittet	lt
 800d7be:	425b      	neglt	r3, r3
 800d7c0:	f042 0202 	orrlt.w	r2, r2, #2
 800d7c4:	9307      	strge	r3, [sp, #28]
 800d7c6:	9307      	strlt	r3, [sp, #28]
 800d7c8:	bfb8      	it	lt
 800d7ca:	9204      	strlt	r2, [sp, #16]
 800d7cc:	7823      	ldrb	r3, [r4, #0]
 800d7ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d7d0:	d10c      	bne.n	800d7ec <_svfiprintf_r+0x130>
 800d7d2:	7863      	ldrb	r3, [r4, #1]
 800d7d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d7d6:	d135      	bne.n	800d844 <_svfiprintf_r+0x188>
 800d7d8:	9b03      	ldr	r3, [sp, #12]
 800d7da:	1d1a      	adds	r2, r3, #4
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	9203      	str	r2, [sp, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bfb8      	it	lt
 800d7e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7e8:	3402      	adds	r4, #2
 800d7ea:	9305      	str	r3, [sp, #20]
 800d7ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d8b8 <_svfiprintf_r+0x1fc>
 800d7f0:	7821      	ldrb	r1, [r4, #0]
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	4650      	mov	r0, sl
 800d7f6:	f7f2 fcfb 	bl	80001f0 <memchr>
 800d7fa:	b140      	cbz	r0, 800d80e <_svfiprintf_r+0x152>
 800d7fc:	2340      	movs	r3, #64	; 0x40
 800d7fe:	eba0 000a 	sub.w	r0, r0, sl
 800d802:	fa03 f000 	lsl.w	r0, r3, r0
 800d806:	9b04      	ldr	r3, [sp, #16]
 800d808:	4303      	orrs	r3, r0
 800d80a:	3401      	adds	r4, #1
 800d80c:	9304      	str	r3, [sp, #16]
 800d80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d812:	4826      	ldr	r0, [pc, #152]	; (800d8ac <_svfiprintf_r+0x1f0>)
 800d814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d818:	2206      	movs	r2, #6
 800d81a:	f7f2 fce9 	bl	80001f0 <memchr>
 800d81e:	2800      	cmp	r0, #0
 800d820:	d038      	beq.n	800d894 <_svfiprintf_r+0x1d8>
 800d822:	4b23      	ldr	r3, [pc, #140]	; (800d8b0 <_svfiprintf_r+0x1f4>)
 800d824:	bb1b      	cbnz	r3, 800d86e <_svfiprintf_r+0x1b2>
 800d826:	9b03      	ldr	r3, [sp, #12]
 800d828:	3307      	adds	r3, #7
 800d82a:	f023 0307 	bic.w	r3, r3, #7
 800d82e:	3308      	adds	r3, #8
 800d830:	9303      	str	r3, [sp, #12]
 800d832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d834:	4433      	add	r3, r6
 800d836:	9309      	str	r3, [sp, #36]	; 0x24
 800d838:	e767      	b.n	800d70a <_svfiprintf_r+0x4e>
 800d83a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d83e:	460c      	mov	r4, r1
 800d840:	2001      	movs	r0, #1
 800d842:	e7a5      	b.n	800d790 <_svfiprintf_r+0xd4>
 800d844:	2300      	movs	r3, #0
 800d846:	3401      	adds	r4, #1
 800d848:	9305      	str	r3, [sp, #20]
 800d84a:	4619      	mov	r1, r3
 800d84c:	f04f 0c0a 	mov.w	ip, #10
 800d850:	4620      	mov	r0, r4
 800d852:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d856:	3a30      	subs	r2, #48	; 0x30
 800d858:	2a09      	cmp	r2, #9
 800d85a:	d903      	bls.n	800d864 <_svfiprintf_r+0x1a8>
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d0c5      	beq.n	800d7ec <_svfiprintf_r+0x130>
 800d860:	9105      	str	r1, [sp, #20]
 800d862:	e7c3      	b.n	800d7ec <_svfiprintf_r+0x130>
 800d864:	fb0c 2101 	mla	r1, ip, r1, r2
 800d868:	4604      	mov	r4, r0
 800d86a:	2301      	movs	r3, #1
 800d86c:	e7f0      	b.n	800d850 <_svfiprintf_r+0x194>
 800d86e:	ab03      	add	r3, sp, #12
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	462a      	mov	r2, r5
 800d874:	4b0f      	ldr	r3, [pc, #60]	; (800d8b4 <_svfiprintf_r+0x1f8>)
 800d876:	a904      	add	r1, sp, #16
 800d878:	4638      	mov	r0, r7
 800d87a:	f3af 8000 	nop.w
 800d87e:	1c42      	adds	r2, r0, #1
 800d880:	4606      	mov	r6, r0
 800d882:	d1d6      	bne.n	800d832 <_svfiprintf_r+0x176>
 800d884:	89ab      	ldrh	r3, [r5, #12]
 800d886:	065b      	lsls	r3, r3, #25
 800d888:	f53f af2c 	bmi.w	800d6e4 <_svfiprintf_r+0x28>
 800d88c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d88e:	b01d      	add	sp, #116	; 0x74
 800d890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d894:	ab03      	add	r3, sp, #12
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	462a      	mov	r2, r5
 800d89a:	4b06      	ldr	r3, [pc, #24]	; (800d8b4 <_svfiprintf_r+0x1f8>)
 800d89c:	a904      	add	r1, sp, #16
 800d89e:	4638      	mov	r0, r7
 800d8a0:	f000 f87a 	bl	800d998 <_printf_i>
 800d8a4:	e7eb      	b.n	800d87e <_svfiprintf_r+0x1c2>
 800d8a6:	bf00      	nop
 800d8a8:	0800e024 	.word	0x0800e024
 800d8ac:	0800e02e 	.word	0x0800e02e
 800d8b0:	00000000 	.word	0x00000000
 800d8b4:	0800d607 	.word	0x0800d607
 800d8b8:	0800e02a 	.word	0x0800e02a

0800d8bc <_printf_common>:
 800d8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	4699      	mov	r9, r3
 800d8c4:	688a      	ldr	r2, [r1, #8]
 800d8c6:	690b      	ldr	r3, [r1, #16]
 800d8c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	bfb8      	it	lt
 800d8d0:	4613      	movlt	r3, r2
 800d8d2:	6033      	str	r3, [r6, #0]
 800d8d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8d8:	4607      	mov	r7, r0
 800d8da:	460c      	mov	r4, r1
 800d8dc:	b10a      	cbz	r2, 800d8e2 <_printf_common+0x26>
 800d8de:	3301      	adds	r3, #1
 800d8e0:	6033      	str	r3, [r6, #0]
 800d8e2:	6823      	ldr	r3, [r4, #0]
 800d8e4:	0699      	lsls	r1, r3, #26
 800d8e6:	bf42      	ittt	mi
 800d8e8:	6833      	ldrmi	r3, [r6, #0]
 800d8ea:	3302      	addmi	r3, #2
 800d8ec:	6033      	strmi	r3, [r6, #0]
 800d8ee:	6825      	ldr	r5, [r4, #0]
 800d8f0:	f015 0506 	ands.w	r5, r5, #6
 800d8f4:	d106      	bne.n	800d904 <_printf_common+0x48>
 800d8f6:	f104 0a19 	add.w	sl, r4, #25
 800d8fa:	68e3      	ldr	r3, [r4, #12]
 800d8fc:	6832      	ldr	r2, [r6, #0]
 800d8fe:	1a9b      	subs	r3, r3, r2
 800d900:	42ab      	cmp	r3, r5
 800d902:	dc26      	bgt.n	800d952 <_printf_common+0x96>
 800d904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d908:	1e13      	subs	r3, r2, #0
 800d90a:	6822      	ldr	r2, [r4, #0]
 800d90c:	bf18      	it	ne
 800d90e:	2301      	movne	r3, #1
 800d910:	0692      	lsls	r2, r2, #26
 800d912:	d42b      	bmi.n	800d96c <_printf_common+0xb0>
 800d914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d918:	4649      	mov	r1, r9
 800d91a:	4638      	mov	r0, r7
 800d91c:	47c0      	blx	r8
 800d91e:	3001      	adds	r0, #1
 800d920:	d01e      	beq.n	800d960 <_printf_common+0xa4>
 800d922:	6823      	ldr	r3, [r4, #0]
 800d924:	68e5      	ldr	r5, [r4, #12]
 800d926:	6832      	ldr	r2, [r6, #0]
 800d928:	f003 0306 	and.w	r3, r3, #6
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	bf08      	it	eq
 800d930:	1aad      	subeq	r5, r5, r2
 800d932:	68a3      	ldr	r3, [r4, #8]
 800d934:	6922      	ldr	r2, [r4, #16]
 800d936:	bf0c      	ite	eq
 800d938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d93c:	2500      	movne	r5, #0
 800d93e:	4293      	cmp	r3, r2
 800d940:	bfc4      	itt	gt
 800d942:	1a9b      	subgt	r3, r3, r2
 800d944:	18ed      	addgt	r5, r5, r3
 800d946:	2600      	movs	r6, #0
 800d948:	341a      	adds	r4, #26
 800d94a:	42b5      	cmp	r5, r6
 800d94c:	d11a      	bne.n	800d984 <_printf_common+0xc8>
 800d94e:	2000      	movs	r0, #0
 800d950:	e008      	b.n	800d964 <_printf_common+0xa8>
 800d952:	2301      	movs	r3, #1
 800d954:	4652      	mov	r2, sl
 800d956:	4649      	mov	r1, r9
 800d958:	4638      	mov	r0, r7
 800d95a:	47c0      	blx	r8
 800d95c:	3001      	adds	r0, #1
 800d95e:	d103      	bne.n	800d968 <_printf_common+0xac>
 800d960:	f04f 30ff 	mov.w	r0, #4294967295
 800d964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d968:	3501      	adds	r5, #1
 800d96a:	e7c6      	b.n	800d8fa <_printf_common+0x3e>
 800d96c:	18e1      	adds	r1, r4, r3
 800d96e:	1c5a      	adds	r2, r3, #1
 800d970:	2030      	movs	r0, #48	; 0x30
 800d972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d976:	4422      	add	r2, r4
 800d978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d97c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d980:	3302      	adds	r3, #2
 800d982:	e7c7      	b.n	800d914 <_printf_common+0x58>
 800d984:	2301      	movs	r3, #1
 800d986:	4622      	mov	r2, r4
 800d988:	4649      	mov	r1, r9
 800d98a:	4638      	mov	r0, r7
 800d98c:	47c0      	blx	r8
 800d98e:	3001      	adds	r0, #1
 800d990:	d0e6      	beq.n	800d960 <_printf_common+0xa4>
 800d992:	3601      	adds	r6, #1
 800d994:	e7d9      	b.n	800d94a <_printf_common+0x8e>
	...

0800d998 <_printf_i>:
 800d998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d99c:	7e0f      	ldrb	r7, [r1, #24]
 800d99e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9a0:	2f78      	cmp	r7, #120	; 0x78
 800d9a2:	4691      	mov	r9, r2
 800d9a4:	4680      	mov	r8, r0
 800d9a6:	460c      	mov	r4, r1
 800d9a8:	469a      	mov	sl, r3
 800d9aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d9ae:	d807      	bhi.n	800d9c0 <_printf_i+0x28>
 800d9b0:	2f62      	cmp	r7, #98	; 0x62
 800d9b2:	d80a      	bhi.n	800d9ca <_printf_i+0x32>
 800d9b4:	2f00      	cmp	r7, #0
 800d9b6:	f000 80d8 	beq.w	800db6a <_printf_i+0x1d2>
 800d9ba:	2f58      	cmp	r7, #88	; 0x58
 800d9bc:	f000 80a3 	beq.w	800db06 <_printf_i+0x16e>
 800d9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9c8:	e03a      	b.n	800da40 <_printf_i+0xa8>
 800d9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9ce:	2b15      	cmp	r3, #21
 800d9d0:	d8f6      	bhi.n	800d9c0 <_printf_i+0x28>
 800d9d2:	a101      	add	r1, pc, #4	; (adr r1, 800d9d8 <_printf_i+0x40>)
 800d9d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9d8:	0800da31 	.word	0x0800da31
 800d9dc:	0800da45 	.word	0x0800da45
 800d9e0:	0800d9c1 	.word	0x0800d9c1
 800d9e4:	0800d9c1 	.word	0x0800d9c1
 800d9e8:	0800d9c1 	.word	0x0800d9c1
 800d9ec:	0800d9c1 	.word	0x0800d9c1
 800d9f0:	0800da45 	.word	0x0800da45
 800d9f4:	0800d9c1 	.word	0x0800d9c1
 800d9f8:	0800d9c1 	.word	0x0800d9c1
 800d9fc:	0800d9c1 	.word	0x0800d9c1
 800da00:	0800d9c1 	.word	0x0800d9c1
 800da04:	0800db51 	.word	0x0800db51
 800da08:	0800da75 	.word	0x0800da75
 800da0c:	0800db33 	.word	0x0800db33
 800da10:	0800d9c1 	.word	0x0800d9c1
 800da14:	0800d9c1 	.word	0x0800d9c1
 800da18:	0800db73 	.word	0x0800db73
 800da1c:	0800d9c1 	.word	0x0800d9c1
 800da20:	0800da75 	.word	0x0800da75
 800da24:	0800d9c1 	.word	0x0800d9c1
 800da28:	0800d9c1 	.word	0x0800d9c1
 800da2c:	0800db3b 	.word	0x0800db3b
 800da30:	682b      	ldr	r3, [r5, #0]
 800da32:	1d1a      	adds	r2, r3, #4
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	602a      	str	r2, [r5, #0]
 800da38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da40:	2301      	movs	r3, #1
 800da42:	e0a3      	b.n	800db8c <_printf_i+0x1f4>
 800da44:	6820      	ldr	r0, [r4, #0]
 800da46:	6829      	ldr	r1, [r5, #0]
 800da48:	0606      	lsls	r6, r0, #24
 800da4a:	f101 0304 	add.w	r3, r1, #4
 800da4e:	d50a      	bpl.n	800da66 <_printf_i+0xce>
 800da50:	680e      	ldr	r6, [r1, #0]
 800da52:	602b      	str	r3, [r5, #0]
 800da54:	2e00      	cmp	r6, #0
 800da56:	da03      	bge.n	800da60 <_printf_i+0xc8>
 800da58:	232d      	movs	r3, #45	; 0x2d
 800da5a:	4276      	negs	r6, r6
 800da5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da60:	485e      	ldr	r0, [pc, #376]	; (800dbdc <_printf_i+0x244>)
 800da62:	230a      	movs	r3, #10
 800da64:	e019      	b.n	800da9a <_printf_i+0x102>
 800da66:	680e      	ldr	r6, [r1, #0]
 800da68:	602b      	str	r3, [r5, #0]
 800da6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da6e:	bf18      	it	ne
 800da70:	b236      	sxthne	r6, r6
 800da72:	e7ef      	b.n	800da54 <_printf_i+0xbc>
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	6820      	ldr	r0, [r4, #0]
 800da78:	1d19      	adds	r1, r3, #4
 800da7a:	6029      	str	r1, [r5, #0]
 800da7c:	0601      	lsls	r1, r0, #24
 800da7e:	d501      	bpl.n	800da84 <_printf_i+0xec>
 800da80:	681e      	ldr	r6, [r3, #0]
 800da82:	e002      	b.n	800da8a <_printf_i+0xf2>
 800da84:	0646      	lsls	r6, r0, #25
 800da86:	d5fb      	bpl.n	800da80 <_printf_i+0xe8>
 800da88:	881e      	ldrh	r6, [r3, #0]
 800da8a:	4854      	ldr	r0, [pc, #336]	; (800dbdc <_printf_i+0x244>)
 800da8c:	2f6f      	cmp	r7, #111	; 0x6f
 800da8e:	bf0c      	ite	eq
 800da90:	2308      	moveq	r3, #8
 800da92:	230a      	movne	r3, #10
 800da94:	2100      	movs	r1, #0
 800da96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da9a:	6865      	ldr	r5, [r4, #4]
 800da9c:	60a5      	str	r5, [r4, #8]
 800da9e:	2d00      	cmp	r5, #0
 800daa0:	bfa2      	ittt	ge
 800daa2:	6821      	ldrge	r1, [r4, #0]
 800daa4:	f021 0104 	bicge.w	r1, r1, #4
 800daa8:	6021      	strge	r1, [r4, #0]
 800daaa:	b90e      	cbnz	r6, 800dab0 <_printf_i+0x118>
 800daac:	2d00      	cmp	r5, #0
 800daae:	d04d      	beq.n	800db4c <_printf_i+0x1b4>
 800dab0:	4615      	mov	r5, r2
 800dab2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dab6:	fb03 6711 	mls	r7, r3, r1, r6
 800daba:	5dc7      	ldrb	r7, [r0, r7]
 800dabc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dac0:	4637      	mov	r7, r6
 800dac2:	42bb      	cmp	r3, r7
 800dac4:	460e      	mov	r6, r1
 800dac6:	d9f4      	bls.n	800dab2 <_printf_i+0x11a>
 800dac8:	2b08      	cmp	r3, #8
 800daca:	d10b      	bne.n	800dae4 <_printf_i+0x14c>
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	07de      	lsls	r6, r3, #31
 800dad0:	d508      	bpl.n	800dae4 <_printf_i+0x14c>
 800dad2:	6923      	ldr	r3, [r4, #16]
 800dad4:	6861      	ldr	r1, [r4, #4]
 800dad6:	4299      	cmp	r1, r3
 800dad8:	bfde      	ittt	le
 800dada:	2330      	movle	r3, #48	; 0x30
 800dadc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dae4:	1b52      	subs	r2, r2, r5
 800dae6:	6122      	str	r2, [r4, #16]
 800dae8:	f8cd a000 	str.w	sl, [sp]
 800daec:	464b      	mov	r3, r9
 800daee:	aa03      	add	r2, sp, #12
 800daf0:	4621      	mov	r1, r4
 800daf2:	4640      	mov	r0, r8
 800daf4:	f7ff fee2 	bl	800d8bc <_printf_common>
 800daf8:	3001      	adds	r0, #1
 800dafa:	d14c      	bne.n	800db96 <_printf_i+0x1fe>
 800dafc:	f04f 30ff 	mov.w	r0, #4294967295
 800db00:	b004      	add	sp, #16
 800db02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db06:	4835      	ldr	r0, [pc, #212]	; (800dbdc <_printf_i+0x244>)
 800db08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db0c:	6829      	ldr	r1, [r5, #0]
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	f851 6b04 	ldr.w	r6, [r1], #4
 800db14:	6029      	str	r1, [r5, #0]
 800db16:	061d      	lsls	r5, r3, #24
 800db18:	d514      	bpl.n	800db44 <_printf_i+0x1ac>
 800db1a:	07df      	lsls	r7, r3, #31
 800db1c:	bf44      	itt	mi
 800db1e:	f043 0320 	orrmi.w	r3, r3, #32
 800db22:	6023      	strmi	r3, [r4, #0]
 800db24:	b91e      	cbnz	r6, 800db2e <_printf_i+0x196>
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	f023 0320 	bic.w	r3, r3, #32
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	2310      	movs	r3, #16
 800db30:	e7b0      	b.n	800da94 <_printf_i+0xfc>
 800db32:	6823      	ldr	r3, [r4, #0]
 800db34:	f043 0320 	orr.w	r3, r3, #32
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	2378      	movs	r3, #120	; 0x78
 800db3c:	4828      	ldr	r0, [pc, #160]	; (800dbe0 <_printf_i+0x248>)
 800db3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db42:	e7e3      	b.n	800db0c <_printf_i+0x174>
 800db44:	0659      	lsls	r1, r3, #25
 800db46:	bf48      	it	mi
 800db48:	b2b6      	uxthmi	r6, r6
 800db4a:	e7e6      	b.n	800db1a <_printf_i+0x182>
 800db4c:	4615      	mov	r5, r2
 800db4e:	e7bb      	b.n	800dac8 <_printf_i+0x130>
 800db50:	682b      	ldr	r3, [r5, #0]
 800db52:	6826      	ldr	r6, [r4, #0]
 800db54:	6961      	ldr	r1, [r4, #20]
 800db56:	1d18      	adds	r0, r3, #4
 800db58:	6028      	str	r0, [r5, #0]
 800db5a:	0635      	lsls	r5, r6, #24
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	d501      	bpl.n	800db64 <_printf_i+0x1cc>
 800db60:	6019      	str	r1, [r3, #0]
 800db62:	e002      	b.n	800db6a <_printf_i+0x1d2>
 800db64:	0670      	lsls	r0, r6, #25
 800db66:	d5fb      	bpl.n	800db60 <_printf_i+0x1c8>
 800db68:	8019      	strh	r1, [r3, #0]
 800db6a:	2300      	movs	r3, #0
 800db6c:	6123      	str	r3, [r4, #16]
 800db6e:	4615      	mov	r5, r2
 800db70:	e7ba      	b.n	800dae8 <_printf_i+0x150>
 800db72:	682b      	ldr	r3, [r5, #0]
 800db74:	1d1a      	adds	r2, r3, #4
 800db76:	602a      	str	r2, [r5, #0]
 800db78:	681d      	ldr	r5, [r3, #0]
 800db7a:	6862      	ldr	r2, [r4, #4]
 800db7c:	2100      	movs	r1, #0
 800db7e:	4628      	mov	r0, r5
 800db80:	f7f2 fb36 	bl	80001f0 <memchr>
 800db84:	b108      	cbz	r0, 800db8a <_printf_i+0x1f2>
 800db86:	1b40      	subs	r0, r0, r5
 800db88:	6060      	str	r0, [r4, #4]
 800db8a:	6863      	ldr	r3, [r4, #4]
 800db8c:	6123      	str	r3, [r4, #16]
 800db8e:	2300      	movs	r3, #0
 800db90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db94:	e7a8      	b.n	800dae8 <_printf_i+0x150>
 800db96:	6923      	ldr	r3, [r4, #16]
 800db98:	462a      	mov	r2, r5
 800db9a:	4649      	mov	r1, r9
 800db9c:	4640      	mov	r0, r8
 800db9e:	47d0      	blx	sl
 800dba0:	3001      	adds	r0, #1
 800dba2:	d0ab      	beq.n	800dafc <_printf_i+0x164>
 800dba4:	6823      	ldr	r3, [r4, #0]
 800dba6:	079b      	lsls	r3, r3, #30
 800dba8:	d413      	bmi.n	800dbd2 <_printf_i+0x23a>
 800dbaa:	68e0      	ldr	r0, [r4, #12]
 800dbac:	9b03      	ldr	r3, [sp, #12]
 800dbae:	4298      	cmp	r0, r3
 800dbb0:	bfb8      	it	lt
 800dbb2:	4618      	movlt	r0, r3
 800dbb4:	e7a4      	b.n	800db00 <_printf_i+0x168>
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	4632      	mov	r2, r6
 800dbba:	4649      	mov	r1, r9
 800dbbc:	4640      	mov	r0, r8
 800dbbe:	47d0      	blx	sl
 800dbc0:	3001      	adds	r0, #1
 800dbc2:	d09b      	beq.n	800dafc <_printf_i+0x164>
 800dbc4:	3501      	adds	r5, #1
 800dbc6:	68e3      	ldr	r3, [r4, #12]
 800dbc8:	9903      	ldr	r1, [sp, #12]
 800dbca:	1a5b      	subs	r3, r3, r1
 800dbcc:	42ab      	cmp	r3, r5
 800dbce:	dcf2      	bgt.n	800dbb6 <_printf_i+0x21e>
 800dbd0:	e7eb      	b.n	800dbaa <_printf_i+0x212>
 800dbd2:	2500      	movs	r5, #0
 800dbd4:	f104 0619 	add.w	r6, r4, #25
 800dbd8:	e7f5      	b.n	800dbc6 <_printf_i+0x22e>
 800dbda:	bf00      	nop
 800dbdc:	0800e035 	.word	0x0800e035
 800dbe0:	0800e046 	.word	0x0800e046

0800dbe4 <memmove>:
 800dbe4:	4288      	cmp	r0, r1
 800dbe6:	b510      	push	{r4, lr}
 800dbe8:	eb01 0402 	add.w	r4, r1, r2
 800dbec:	d902      	bls.n	800dbf4 <memmove+0x10>
 800dbee:	4284      	cmp	r4, r0
 800dbf0:	4623      	mov	r3, r4
 800dbf2:	d807      	bhi.n	800dc04 <memmove+0x20>
 800dbf4:	1e43      	subs	r3, r0, #1
 800dbf6:	42a1      	cmp	r1, r4
 800dbf8:	d008      	beq.n	800dc0c <memmove+0x28>
 800dbfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc02:	e7f8      	b.n	800dbf6 <memmove+0x12>
 800dc04:	4402      	add	r2, r0
 800dc06:	4601      	mov	r1, r0
 800dc08:	428a      	cmp	r2, r1
 800dc0a:	d100      	bne.n	800dc0e <memmove+0x2a>
 800dc0c:	bd10      	pop	{r4, pc}
 800dc0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc16:	e7f7      	b.n	800dc08 <memmove+0x24>

0800dc18 <_malloc_usable_size_r>:
 800dc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc1c:	1f18      	subs	r0, r3, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bfbc      	itt	lt
 800dc22:	580b      	ldrlt	r3, [r1, r0]
 800dc24:	18c0      	addlt	r0, r0, r3
 800dc26:	4770      	bx	lr

0800dc28 <_sbrk>:
 800dc28:	4a04      	ldr	r2, [pc, #16]	; (800dc3c <_sbrk+0x14>)
 800dc2a:	6811      	ldr	r1, [r2, #0]
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	b909      	cbnz	r1, 800dc34 <_sbrk+0xc>
 800dc30:	4903      	ldr	r1, [pc, #12]	; (800dc40 <_sbrk+0x18>)
 800dc32:	6011      	str	r1, [r2, #0]
 800dc34:	6810      	ldr	r0, [r2, #0]
 800dc36:	4403      	add	r3, r0
 800dc38:	6013      	str	r3, [r2, #0]
 800dc3a:	4770      	bx	lr
 800dc3c:	20004478 	.word	0x20004478
 800dc40:	20004480 	.word	0x20004480

0800dc44 <_init>:
 800dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc46:	bf00      	nop
 800dc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc4a:	bc08      	pop	{r3}
 800dc4c:	469e      	mov	lr, r3
 800dc4e:	4770      	bx	lr

0800dc50 <_fini>:
 800dc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc52:	bf00      	nop
 800dc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc56:	bc08      	pop	{r3}
 800dc58:	469e      	mov	lr, r3
 800dc5a:	4770      	bx	lr
