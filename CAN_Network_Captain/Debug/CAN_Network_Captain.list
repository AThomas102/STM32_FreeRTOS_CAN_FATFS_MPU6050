
CAN_Network_Captain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a58  0800d280  0800d280  0001d280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcd8  0800dcd8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcd8  0800dcd8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcd8  0800dcd8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcd8  0800dcd8  0001dcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcdc  0800dcdc  0001dcdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800dce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000014d4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001564  20001564  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020180  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004406  00000000  00000000  00040240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a8  00000000  00000000  00044648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e0  00000000  00000000  00045ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002618f  00000000  00000000  000477d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000229a7  00000000  00000000  0006d95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9b09  00000000  00000000  00090306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169e0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007148  00000000  00000000  00169e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d268 	.word	0x0800d268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800d268 	.word	0x0800d268

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <add_char>:
 * Returns:
 * 0: success
 * 1: realloc failure
 */
static int add_char(char **string, int *c, char ch)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	71fb      	strb	r3, [r7, #7]
    char *tmp = NULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
    (*c)++;
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	1c5a      	adds	r2, r3, #1
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	601a      	str	r2, [r3, #0]
    tmp = realloc(*string, (*c)+1);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	4619      	mov	r1, r3
 80002b8:	4610      	mov	r0, r2
 80002ba:	f00c fbb9 	bl	800ca30 <realloc>
 80002be:	6178      	str	r0, [r7, #20]
    if (tmp == NULL)
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <add_char+0x3a>
        return 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e012      	b.n	80002f0 <add_char+0x60>
    *string = tmp;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	601a      	str	r2, [r3, #0]
    (*string)[(*c)-1] = ch;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3b01      	subs	r3, #1
 80002da:	4413      	add	r3, r2
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	701a      	strb	r2, [r3, #0]
    (*string)[*c] = '\0';
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	6812      	ldr	r2, [r2, #0]
 80002e8:	4413      	add	r3, r2
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]

    return 0;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3718      	adds	r7, #24
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <create_field>:
 * memory for the field. Length is set to 0 and text to NULL
 *
 * Returns NULL on error via malloc.
 */
static CSV_FIELD *create_field()
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
    CSV_FIELD *field = malloc(sizeof(CSV_FIELD));
 80002fe:	2008      	movs	r0, #8
 8000300:	f00c fa90 	bl	800c824 <malloc>
 8000304:	4603      	mov	r3, r0
 8000306:	607b      	str	r3, [r7, #4]
    field->length = 0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
    field->text = NULL;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
    set_field(field, "\0");
 8000314:	4904      	ldr	r1, [pc, #16]	; (8000328 <create_field+0x30>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f821 	bl	800035e <set_field>
    return field;
 800031c:	687b      	ldr	r3, [r7, #4]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	0800d280 	.word	0x0800d280

0800032c <destroy_field>:
 * Returns:
 * 0: success
 * 1: error realloc'ing field's char array
 */
static void destroy_field(CSV_FIELD *field)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    if (field->text != NULL)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d007      	beq.n	800034c <destroy_field+0x20>
	{
		free(field->text);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f00c fa77 	bl	800c834 <free>
		field->text = NULL;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
    }
    free(field);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f00c fa71 	bl	800c834 <free>
    field = NULL;
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <set_field>:
 * Returns:
 *  0: success
 *  1: error allocating space to the string
 */
static int set_field(CSV_FIELD *field, char *text)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b084      	sub	sp, #16
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
    char *tmp;

    field->length = strlen(text) + 1;
 8000368:	6838      	ldr	r0, [r7, #0]
 800036a:	f7ff ff39 	bl	80001e0 <strlen>
 800036e:	4603      	mov	r3, r0
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	605a      	str	r2, [r3, #4]
    tmp = realloc(field->text, field->length);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4619      	mov	r1, r3
 8000380:	4610      	mov	r0, r2
 8000382:	f00c fb55 	bl	800ca30 <realloc>
 8000386:	60f8      	str	r0, [r7, #12]
    if (tmp == NULL)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <set_field+0x34>
        return 1;
 800038e:	2301      	movs	r3, #1
 8000390:	e009      	b.n	80003a6 <set_field+0x48>
    field->text = tmp;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	601a      	str	r2, [r3, #0]
    strcpy(field->text, text);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f00c fbd5 	bl	800cb4e <strcpy>

    return 0;
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <read_next_field>:
 *  0: Moved successfully to the next entry in this row
 *  1: The next entry is on a new row
 *  2: There is no next entry (EOF)
 */
static int read_next_field(FIL *csv_fp, char field_delim, char text_delim, CSV_FIELD *field)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b08c      	sub	sp, #48	; 0x30
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	72fb      	strb	r3, [r7, #11]
 80003bc:	4613      	mov	r3, r2
 80003be:	72bb      	strb	r3, [r7, #10]
	char ch = 'a';
 80003c0:	2361      	movs	r3, #97	; 0x61
 80003c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    bool done = false;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool in_text = false;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool esc = false;
 80003d2:	2300      	movs	r3, #0
 80003d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	UINT n;
    int c = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
    char *tmp = malloc(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f00c fa21 	bl	800c824 <malloc>
 80003e2:	4603      	mov	r3, r0
 80003e4:	617b      	str	r3, [r7, #20]
    tmp[0] = '\0';
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]

	while (!done)
 80003ec:	e086      	b.n	80004fc <read_next_field+0x14e>
	{
		f_read(csv_fp, &ch, 1, &n);
 80003ee:	f107 031c 	add.w	r3, r7, #28
 80003f2:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80003f6:	2201      	movs	r2, #1
 80003f8:	68f8      	ldr	r0, [r7, #12]
 80003fa:	f007 fff9 	bl	80083f0 <f_read>

		if (f_eof(csv_fp))
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000404:	689a      	ldr	r2, [r3, #8]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	429a      	cmp	r2, r3
 8000410:	d105      	bne.n	800041e <read_next_field+0x70>
		{
			c = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
			done = true;
 8000416:	2301      	movs	r3, #1
 8000418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800041c:	e06e      	b.n	80004fc <read_next_field+0x14e>
		}
		else if (!in_text)
 800041e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000422:	f083 0301 	eor.w	r3, r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d029      	beq.n	8000480 <read_next_field+0xd2>
		{
			if (ch == text_delim)
 800042c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000430:	7aba      	ldrb	r2, [r7, #10]
 8000432:	429a      	cmp	r2, r3
 8000434:	d105      	bne.n	8000442 <read_next_field+0x94>
			{
				in_text = true;
 8000436:	2301      	movs	r3, #1
 8000438:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				c = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
 8000440:	e05c      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch == field_delim)
 8000442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000446:	7afa      	ldrb	r2, [r7, #11]
 8000448:	429a      	cmp	r2, r3
 800044a:	d103      	bne.n	8000454 <read_next_field+0xa6>
			{
				done = true;
 800044c:	2301      	movs	r3, #1
 800044e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000452:	e053      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch == '\n')
 8000454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000458:	2b0a      	cmp	r3, #10
 800045a:	d103      	bne.n	8000464 <read_next_field+0xb6>
			{
				done = true;
 800045c:	2301      	movs	r3, #1
 800045e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000462:	e04b      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch != '\r')
 8000464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000468:	2b0d      	cmp	r3, #13
 800046a:	d047      	beq.n	80004fc <read_next_field+0x14e>
			{
				add_char(&tmp, &c, ch);
 800046c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000470:	f107 0118 	add.w	r1, r7, #24
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff09 	bl	8000290 <add_char>
 800047e:	e03d      	b.n	80004fc <read_next_field+0x14e>
			}
		}
		else
		{ /* in_text == true */
			if (esc)
 8000480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000484:	2b00      	cmp	r3, #0
 8000486:	d018      	beq.n	80004ba <read_next_field+0x10c>
			{
				if (ch == text_delim)
 8000488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800048c:	7aba      	ldrb	r2, [r7, #10]
 800048e:	429a      	cmp	r2, r3
 8000490:	d10c      	bne.n	80004ac <read_next_field+0xfe>
				{
					add_char(&tmp, &c, ch);
 8000492:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000496:	f107 0118 	add.w	r1, r7, #24
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fef6 	bl	8000290 <add_char>
					esc = false;
 80004a4:	2300      	movs	r3, #0
 80004a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80004aa:	e027      	b.n	80004fc <read_next_field+0x14e>
				}
				else
				{
					esc = false;
 80004ac:	2300      	movs	r3, #0
 80004ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					done = true;
 80004b2:	2301      	movs	r3, #1
 80004b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004b8:	e020      	b.n	80004fc <read_next_field+0x14e>
				}
			}
			else
			{ /* !esc */
				if (ch == text_delim)
 80004ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004be:	7aba      	ldrb	r2, [r7, #10]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d103      	bne.n	80004cc <read_next_field+0x11e>
				{
					esc = true;
 80004c4:	2301      	movs	r3, #1
 80004c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80004ca:	e017      	b.n	80004fc <read_next_field+0x14e>
				} else if (ch == field_delim)
 80004cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004d0:	7afa      	ldrb	r2, [r7, #11]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d109      	bne.n	80004ea <read_next_field+0x13c>
				{
					add_char(&tmp, &c, ch);
 80004d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80004da:	f107 0118 	add.w	r1, r7, #24
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff fed4 	bl	8000290 <add_char>
 80004e8:	e008      	b.n	80004fc <read_next_field+0x14e>
				}
				else
				{
					add_char(&tmp, &c, ch);
 80004ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80004ee:	f107 0118 	add.w	r1, r7, #24
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff feca 	bl	8000290 <add_char>
	while (!done)
 80004fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	f47f af71 	bne.w	80003ee <read_next_field+0x40>
				}
			}
		}
    }

    if (field != NULL)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d004      	beq.n	800051c <read_next_field+0x16e>
	{
        set_field(field, tmp);
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff21 	bl	800035e <set_field>
    }

    if (tmp != NULL)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d003      	beq.n	800052a <read_next_field+0x17c>
        free(tmp);
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	4618      	mov	r0, r3
 8000526:	f00c f985 	bl	800c834 <free>
    tmp = NULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
    /* Moving the fp to the beginning of the next field and peeking
        * to see if it is a new line or if there is in fact no next field.
        */
    int pos;
    int retval;
    done = false;
 800052e:	2300      	movs	r3, #0
 8000530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (!done)
 8000534:	e04b      	b.n	80005ce <read_next_field+0x220>
	{
		if (ch == field_delim)
 8000536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800053a:	7afa      	ldrb	r2, [r7, #11]
 800053c:	429a      	cmp	r2, r3
 800053e:	d105      	bne.n	800054c <read_next_field+0x19e>
		{
			retval = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 8000544:	2301      	movs	r3, #1
 8000546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800054a:	e040      	b.n	80005ce <read_next_field+0x220>
		}
		else if (ch == '\n')
 800054c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000550:	2b0a      	cmp	r3, #10
 8000552:	d124      	bne.n	800059e <read_next_field+0x1f0>
		{
			/* Checking to see if this \n is the one that UNIX
				* sometimes includes before the EOF */
			pos = csv_fp->fptr;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
			f_read(csv_fp, &ch, 1, &n);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000566:	2201      	movs	r2, #1
 8000568:	68f8      	ldr	r0, [r7, #12]
 800056a:	f007 ff41 	bl	80083f0 <f_read>

			if (f_eof(csv_fp))
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000574:	689a      	ldr	r2, [r3, #8]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	429a      	cmp	r2, r3
 8000580:	d102      	bne.n	8000588 <read_next_field+0x1da>
				retval = 2;
 8000582:	2302      	movs	r3, #2
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
 8000586:	e001      	b.n	800058c <read_next_field+0x1de>
			else
				retval = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28

			f_lseek(csv_fp, pos);
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	4619      	mov	r1, r3
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f008 fd0b 	bl	8008fac <f_lseek>
			done = true;
 8000596:	2301      	movs	r3, #1
 8000598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800059c:	e017      	b.n	80005ce <read_next_field+0x220>
		}
		else if (f_eof(csv_fp))
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005a4:	689a      	ldr	r2, [r3, #8]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d105      	bne.n	80005be <read_next_field+0x210>
		{
			retval = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 80005b6:	2301      	movs	r3, #1
 80005b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80005bc:	e007      	b.n	80005ce <read_next_field+0x220>
		}
		else
		{
			f_read(csv_fp, &ch, 1, &n);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80005c6:	2201      	movs	r2, #1
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f007 ff11 	bl	80083f0 <f_read>
    while (!done)
 80005ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1ac      	bne.n	8000536 <read_next_field+0x188>
		}
    }

    return retval;
 80005dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3730      	adds	r7, #48	; 0x30
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <append_field>:
 * 0: success
 * 1: the given row does not exist
 * 2: memory allocation error
 */
static int append_field(CSV_BUFFER *buffer, size_t row)
{
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]

	CSV_FIELD **temp_field;

	if (buffer->rows < row + 1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d201      	bcs.n	8000600 <append_field+0x1a>
		return 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e036      	b.n	800066e <append_field+0x88>

	/* Set col equal to the index of the new field */
	int col = buffer->width[row];
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60fb      	str	r3, [r7, #12]

	temp_field = realloc(buffer->field[row], (col + 1) * sizeof(CSV_FIELD*));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4619      	mov	r1, r3
 8000622:	4610      	mov	r0, r2
 8000624:	f00c fa04 	bl	800ca30 <realloc>
 8000628:	60b8      	str	r0, [r7, #8]
	if (temp_field == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <append_field+0x4e>
	{
		return 2;
 8000630:	2302      	movs	r3, #2
 8000632:	e01c      	b.n	800066e <append_field+0x88>
	}
	else
	{
		buffer->field[row] = temp_field;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	601a      	str	r2, [r3, #0]
		buffer->field[row][col] = create_field();
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	18d4      	adds	r4, r2, r3
 8000654:	f7ff fe50 	bl	80002f8 <create_field>
 8000658:	4603      	mov	r3, r0
 800065a:	6023      	str	r3, [r4, #0]
		buffer->width[row]++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	3201      	adds	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bd90      	pop	{r4, r7, pc}

08000676 <append_row>:
 * 0: success
 * 1: error allocating width memory
 * 2: error allocating field memory
 */
static int append_row(CSV_BUFFER *buffer)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
    size_t *temp_width;
    CSV_FIELD ***temp_field;

    size_t row  = buffer->rows;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	617b      	str	r3, [r7, #20]

    temp_width = realloc(buffer->width, (buffer->rows + 1) * sizeof(size_t));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4619      	mov	r1, r3
 8000692:	4610      	mov	r0, r2
 8000694:	f00c f9cc 	bl	800ca30 <realloc>
 8000698:	6138      	str	r0, [r7, #16]
    if (temp_width != NULL)
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d018      	beq.n	80006d2 <append_row+0x5c>
	{
        buffer->width = temp_width;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	609a      	str	r2, [r3, #8]
        buffer->width[row] = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	689a      	ldr	r2, [r3, #8]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
	else
	{
        return 1;
    }

    temp_field = realloc(buffer->field, (buffer->rows + 1) * sizeof(CSV_FIELD**));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	3301      	adds	r3, #1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4619      	mov	r1, r3
 80006c2:	4610      	mov	r0, r2
 80006c4:	f00c f9b4 	bl	800ca30 <realloc>
 80006c8:	60f8      	str	r0, [r7, #12]
    if (temp_field != NULL)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d017      	beq.n	8000700 <append_row+0x8a>
 80006d0:	e001      	b.n	80006d6 <append_row+0x60>
        return 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e018      	b.n	8000708 <append_row+0x92>
	{
        buffer->field = temp_field;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	601a      	str	r2, [r3, #0]
        buffer->field[row] = NULL;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	{
        free(temp_width);
        return 2;
    }

    buffer->rows++;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	605a      	str	r2, [r3, #4]
    append_field(buffer, row);
 80006f4:	6979      	ldr	r1, [r7, #20]
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff75 	bl	80005e6 <append_field>
    return 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e003      	b.n	8000708 <append_row+0x92>
        free(temp_width);
 8000700:	6938      	ldr	r0, [r7, #16]
 8000702:	f00c f897 	bl	800c834 <free>
        return 2;
 8000706:	2302      	movs	r3, #2
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <csv_create_buffer>:

    return 0;
}

CSV_BUFFER *csv_create_buffer()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
    CSV_BUFFER *buffer = malloc(sizeof(CSV_BUFFER));
 8000716:	2010      	movs	r0, #16
 8000718:	f00c f884 	bl	800c824 <malloc>
 800071c:	4603      	mov	r3, r0
 800071e:	607b      	str	r3, [r7, #4]

    if (buffer != NULL)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00e      	beq.n	8000744 <csv_create_buffer+0x34>
	{
	    buffer->field = NULL;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
	    buffer->rows = 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
	    buffer->width = NULL;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	    buffer->field_delim = ',';
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	222c      	movs	r2, #44	; 0x2c
 800073c:	731a      	strb	r2, [r3, #12]
	    buffer->text_delim = '"';
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2222      	movs	r2, #34	; 0x22
 8000742:	735a      	strb	r2, [r3, #13]
    }

    return buffer;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <csv_destroy_buffer>:

void csv_destroy_buffer(CSV_BUFFER *buffer)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
    int i, j;

    for (i = 0; i < buffer->rows; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e02e      	b.n	80007ba <csv_destroy_buffer+0x6c>
	{
        for (j = 0; j < buffer->width[i]; j++)
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	e00f      	b.n	8000782 <csv_destroy_buffer+0x34>
		{
            destroy_field(buffer->field[i][j]);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fdd8 	bl	800032c <destroy_field>
        for (j = 0; j < buffer->width[i]; j++)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	3301      	adds	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	429a      	cmp	r2, r3
 8000792:	d8e6      	bhi.n	8000762 <csv_destroy_buffer+0x14>
        }
        free(buffer->field[i]);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00c f847 	bl	800c834 <free>
        buffer->field[i] = NULL;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->rows; i++)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3301      	adds	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d8cb      	bhi.n	800075c <csv_destroy_buffer+0xe>
    }

    if (buffer->field != NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d004      	beq.n	80007d6 <csv_destroy_buffer+0x88>
        free(buffer->field);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f00c f82f 	bl	800c834 <free>

    if (buffer->width != NULL)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <csv_destroy_buffer+0x9a>
        free(buffer->width);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00c f826 	bl	800c834 <free>

    free(buffer);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f00c f823 	bl	800c834 <free>
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <csv_load>:

int csv_load(CSV_BUFFER *buffer, FIL *csv_fp)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b088      	sub	sp, #32
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 8000800:	2100      	movs	r1, #0
 8000802:	6838      	ldr	r0, [r7, #0]
 8000804:	f008 fbd2 	bl	8008fac <f_lseek>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <csv_load+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 8000812:	2301      	movs	r3, #1
 8000814:	e059      	b.n	80008ca <csv_load+0xd4>
	}

	int next = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
	bool end = false;
 800081a:	2300      	movs	r3, #0
 800081c:	76fb      	strb	r3, [r7, #27]
	bool first = true;
 800081e:	2301      	movs	r3, #1
 8000820:	76bb      	strb	r3, [r7, #26]
	int i = -1, j = -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	613b      	str	r3, [r7, #16]

	while (!end)
 800082e:	e045      	b.n	80008bc <csv_load+0xc6>
	{
		if (!first)
 8000830:	7ebb      	ldrb	r3, [r7, #26]
 8000832:	f083 0301 	eor.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d015      	beq.n	8000868 <csv_load+0x72>
		{
			next = read_next_field(csv_fp, buffer->field_delim, buffer->text_delim, buffer->field[i][j-1]);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7b19      	ldrb	r1, [r3, #12]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7b58      	ldrb	r0, [r3, #13]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000856:	3b01      	subs	r3, #1
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4602      	mov	r2, r0
 8000860:	6838      	ldr	r0, [r7, #0]
 8000862:	f7ff fda4 	bl	80003ae <read_next_field>
 8000866:	61f8      	str	r0, [r7, #28]
		}

		if (next == 2)
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d101      	bne.n	8000872 <csv_load+0x7c>
			end = true;
 800086e:	2301      	movs	r3, #1
 8000870:	76fb      	strb	r3, [r7, #27]

		if (next == 1)
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d10c      	bne.n	8000892 <csv_load+0x9c>
		{
			if (append_row(buffer) != 0)
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fefc 	bl	8000676 <append_row>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <csv_load+0x92>
				return 2;
 8000884:	2302      	movs	r3, #2
 8000886:	e020      	b.n	80008ca <csv_load+0xd4>
			j = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
			i++;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
		}

		if (next == 0)
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10c      	bne.n	80008b2 <csv_load+0xbc>
		{
			if (append_field(buffer, i) != 0)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	4619      	mov	r1, r3
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fea2 	bl	80005e6 <append_field>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <csv_load+0xb6>
				return 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	e00e      	b.n	80008ca <csv_load+0xd4>
			j++;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	3301      	adds	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
		}

		if (first) first = false;
 80008b2:	7ebb      	ldrb	r3, [r7, #26]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <csv_load+0xc6>
 80008b8:	2300      	movs	r3, #0
 80008ba:	76bb      	strb	r3, [r7, #26]
	while (!end)
 80008bc:	7efb      	ldrb	r3, [r7, #27]
 80008be:	f083 0301 	eor.w	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1b3      	bne.n	8000830 <csv_load+0x3a>
	}

	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <csv_save>:

int csv_save(FIL *csv_fp, CSV_BUFFER *buffer)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b088      	sub	sp, #32
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]

	UINT n;
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 80008dc:	2100      	movs	r1, #0
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f008 fb64 	bl	8008fac <f_lseek>
 80008e4:	4603      	mov	r3, r0
 80008e6:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 80008e8:	7cfb      	ldrb	r3, [r7, #19]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <csv_save+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e0d8      	b.n	8000aa4 <csv_save+0x1d2>
	}

    char text_delim = buffer->text_delim;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	7b5b      	ldrb	r3, [r3, #13]
 80008f6:	72fb      	strb	r3, [r7, #11]
    char field_delim = buffer->field_delim;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	7b1b      	ldrb	r3, [r3, #12]
 80008fc:	72bb      	strb	r3, [r7, #10]
	char new_line = '\n';
 80008fe:	230a      	movs	r3, #10
 8000900:	727b      	strb	r3, [r7, #9]
    for(i = 0; i < buffer->rows; i++)
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	e0b9      	b.n	8000a7c <csv_save+0x1aa>
	{
        for(j = 0; j < buffer->width[i]; j++)
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	e0a9      	b.n	8000a62 <csv_save+0x190>
		{
            chloc = strchr(buffer->field[i][j]->text, text_delim);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	7afa      	ldrb	r2, [r7, #11]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f00c f903 	bl	800cb34 <strchr>
 800092e:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d110      	bne.n	8000958 <csv_save+0x86>
                chloc = strchr(buffer->field[i][j]->text, field_delim);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	7aba      	ldrb	r2, [r7, #10]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f00c f8ef 	bl	800cb34 <strchr>
 8000956:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10f      	bne.n	800097e <csv_save+0xac>
                chloc = strchr(buffer->field[i][j]->text, '\n');
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	210a      	movs	r1, #10
 8000976:	4618      	mov	r0, r3
 8000978:	f00c f8dc 	bl	800cb34 <strchr>
 800097c:	6178      	str	r0, [r7, #20]
            // if any of the above characters are found, chloc will be set
            // and we must use text delimiters.
            if(chloc != NULL)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d02e      	beq.n	80009e2 <csv_save+0x110>
			{
				f_write(csv_fp, &text_delim, 1, &n);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	f107 010b 	add.w	r1, r7, #11
 800098c:	2201      	movs	r2, #1
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f007 ff6b 	bl	800886a <f_write>
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f007 ff4f 	bl	800886a <f_write>
				f_write(csv_fp, &text_delim, 1, &n);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	f107 010b 	add.w	r1, r7, #11
 80009d4:	2201      	movs	r2, #1
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f007 ff47 	bl	800886a <f_write>
                chloc = NULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e01b      	b.n	8000a1a <csv_save+0x148>
            }
			else
			{
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6819      	ldr	r1, [r3, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f007 ff28 	bl	800886a <f_write>
            }
            if(j < buffer->width[i] - 1)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1e5a      	subs	r2, r3, #1
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d908      	bls.n	8000a40 <csv_save+0x16e>
				f_write(csv_fp, &field_delim, 1, &n);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	f107 010a 	add.w	r1, r7, #10
 8000a36:	2201      	movs	r2, #1
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f007 ff16 	bl	800886a <f_write>
 8000a3e:	e00d      	b.n	8000a5c <csv_save+0x18a>
            else if (i < buffer->rows - 1)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	1e5a      	subs	r2, r3, #1
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d907      	bls.n	8000a5c <csv_save+0x18a>
				f_write(csv_fp, &new_line, 1, &n);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	f107 0109 	add.w	r1, r7, #9
 8000a54:	2201      	movs	r2, #1
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f007 ff07 	bl	800886a <f_write>
        for(j = 0; j < buffer->width[i]; j++)
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f63f af4c 	bhi.w	800090e <csv_save+0x3c>
    for(i = 0; i < buffer->rows; i++)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	f63f af40 	bhi.w	8000908 <csv_save+0x36>
        }
    }
	f_truncate(csv_fp);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f008 fe00 	bl	800968e <f_truncate>

	// Sync (just in case)
	res = f_sync(csv_fp);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f008 f979 	bl	8008d86 <f_sync>
 8000a94:	4603      	mov	r3, r0
 8000a96:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 8000a98:	7cfb      	ldrb	r3, [r7, #19]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <csv_save+0x1d0>
	{
		//log_error("f_sync pb: %d", res);
		return 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <csv_save+0x1d2>
	}

    return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <csv_set_field>:
    else
        return buffer->field[row][entry]->length - 1;
}

int csv_set_field(CSV_BUFFER *buffer, size_t row, size_t entry, char *field)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
    while (row >= buffer->rows)
 8000aba:	e002      	b.n	8000ac2 <csv_set_field+0x16>
	{
        append_row(buffer);
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fdda 	bl	8000676 <append_row>
    while (row >= buffer->rows)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d2f7      	bcs.n	8000abc <csv_set_field+0x10>
    }
    while (entry >= buffer->width[row])
 8000acc:	e003      	b.n	8000ad6 <csv_set_field+0x2a>
        append_field(buffer, row);
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fd88 	bl	80005e6 <append_field>
    while (entry >= buffer->width[row])
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d2f2      	bcs.n	8000ace <csv_set_field+0x22>

    if (set_field(buffer->field[row][entry], field) == 0)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6839      	ldr	r1, [r7, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc2d 	bl	800035e <set_field>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <csv_set_field+0x62>
        return 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <csv_set_field+0x64>
    else
        return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <vApplicationGetIdleTaskMemory+0x30>)
 8000b2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2240      	movs	r2, #64	; 0x40
 8000b34:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200000ac 	.word	0x200000ac
 8000b48:	20000160 	.word	0x20000160

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b0aa      	sub	sp, #168	; 0xa8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f000 ff41 	bl	80019d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f8e7 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f000 f9e9 	bl	8000f30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b5e:	f000 f9b7 	bl	8000ed0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000b62:	f000 f93f 	bl	8000de4 <MX_CAN_Init>
  MX_FATFS_Init();
 8000b66:	f004 fb6b 	bl	8005240 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000b6a:	f000 f973 	bl	8000e54 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  myprintf("------- CAN Captain Controller ----------\r\n");
 8000b6e:	485e      	ldr	r0, [pc, #376]	; (8000ce8 <main+0x19c>)
 8000b70:	f000 fa28 	bl	8000fc4 <myprintf>

  canfil.FilterBank = 0;
 8000b74:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <main+0x1a0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b7a:	4b5c      	ldr	r3, [pc, #368]	; (8000cec <main+0x1a0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b80:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <main+0x1a0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8000b86:	4b59      	ldr	r3, [pc, #356]	; (8000cec <main+0x1a0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 8000b8c:	4b57      	ldr	r3, [pc, #348]	; (8000cec <main+0x1a0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <main+0x1a0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8000b98:	4b54      	ldr	r3, [pc, #336]	; (8000cec <main+0x1a0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b9e:	4b53      	ldr	r3, [pc, #332]	; (8000cec <main+0x1a0>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000ba4:	4b51      	ldr	r3, [pc, #324]	; (8000cec <main+0x1a0>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 8000baa:	4b50      	ldr	r3, [pc, #320]	; (8000cec <main+0x1a0>)
 8000bac:	220e      	movs	r2, #14
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan,&canfil) != HAL_OK){
 8000bb0:	494e      	ldr	r1, [pc, #312]	; (8000cec <main+0x1a0>)
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <main+0x1a4>)
 8000bb4:	f001 f865 	bl	8001c82 <HAL_CAN_ConfigFilter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <main+0x76>
	Error_Handler();
 8000bbe:	f000 fcf1 	bl	80015a4 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan) != HAL_OK){
 8000bc2:	484b      	ldr	r0, [pc, #300]	; (8000cf0 <main+0x1a4>)
 8000bc4:	f001 f927 	bl	8001e16 <HAL_CAN_Start>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <main+0x86>
	Error_Handler();
 8000bce:	f000 fce9 	bl	80015a4 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4846      	ldr	r0, [pc, #280]	; (8000cf0 <main+0x1a4>)
 8000bd6:	f001 fbac 	bl	8002332 <HAL_CAN_ActivateNotification>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <main+0x98>
	Error_Handler();
 8000be0:	f000 fce0 	bl	80015a4 <Error_Handler>
  }


  HAL_Delay(100);
 8000be4:	2064      	movs	r0, #100	; 0x64
 8000be6:	f000 ff2d 	bl	8001a44 <HAL_Delay>

  saveData();
 8000bea:	f000 fa43 	bl	8001074 <saveData>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of canTelemetryMutex */
  osMutexDef(canTelemetryMutex);
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  canTelemetryMutexHandle = osMutexCreate(osMutex(canTelemetryMutex));
 8000bfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f008 ffe4 	bl	8009bcc <osMutexCreate>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4a3b      	ldr	r2, [pc, #236]	; (8000cf4 <main+0x1a8>)
 8000c08:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of TelemetryQueue */
  osMessageQDef(TelemetryQueue, 16, uint16_t);
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <main+0x1ac>)
 8000c0c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000c10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  TelemetryQueueHandle = osMessageCreate(osMessageQ(TelemetryQueue), NULL);
 8000c16:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f009 f8b6 	bl	8009d8e <osMessageCreate>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <main+0x1b0>)
 8000c26:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <main+0x1b4>)
 8000c2a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c2e:	461d      	mov	r5, r3
 8000c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c3c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f008 ff62 	bl	8009b0c <osThreadCreate>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <main+0x1b8>)
 8000c4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDCardSaveTask */
  osThreadDef(SDCardSaveTask, StartSDCardSaveTask, osPriorityHigh, 0, 128);
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <main+0x1bc>)
 8000c50:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c54:	461d      	mov	r5, r3
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDCardSaveTaskHandle = osThreadCreate(osThread(SDCardSaveTask), NULL);
 8000c62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 ff4f 	bl	8009b0c <osThreadCreate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <main+0x1c0>)
 8000c72:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData1 */
  osThreadDef(GetData1, StartGetData1, osPriorityBelowNormal, 0, 128);
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <main+0x1c4>)
 8000c76:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GetData1Handle = osThreadCreate(osThread(GetData1), NULL);
 8000c88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 ff3c 	bl	8009b0c <osThreadCreate>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <main+0x1c8>)
 8000c98:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData2 */
  osThreadDef(GetData2, StartGetData2, osPriorityBelowNormal, 0, 128);
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <main+0x1cc>)
 8000c9c:	f107 0420 	add.w	r4, r7, #32
 8000ca0:	461d      	mov	r5, r3
 8000ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GetData2Handle = osThreadCreate(osThread(GetData2), NULL);
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f008 ff29 	bl	8009b0c <osThreadCreate>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <main+0x1d0>)
 8000cbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadCAN */
  osThreadDef(ReadCAN, StartReadCAN, osPriorityNormal, 0, 128);
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <main+0x1d4>)
 8000cc2:	1d3c      	adds	r4, r7, #4
 8000cc4:	461d      	mov	r5, r3
 8000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadCANHandle = osThreadCreate(osThread(ReadCAN), NULL);
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f008 ff18 	bl	8009b0c <osThreadCreate>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <main+0x1d8>)
 8000ce0:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ce2:	f008 ff0c 	bl	8009afe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <main+0x19a>
 8000ce8:	0800d2c0 	.word	0x0800d2c0
 8000cec:	20000414 	.word	0x20000414
 8000cf0:	20000260 	.word	0x20000260
 8000cf4:	20000388 	.word	0x20000388
 8000cf8:	0800d2ec 	.word	0x0800d2ec
 8000cfc:	20000384 	.word	0x20000384
 8000d00:	0800d2fc 	.word	0x0800d2fc
 8000d04:	20000370 	.word	0x20000370
 8000d08:	0800d318 	.word	0x0800d318
 8000d0c:	20000374 	.word	0x20000374
 8000d10:	0800d334 	.word	0x0800d334
 8000d14:	20000378 	.word	0x20000378
 8000d18:	0800d350 	.word	0x0800d350
 8000d1c:	2000037c 	.word	0x2000037c
 8000d20:	0800d36c 	.word	0x0800d36c
 8000d24:	20000380 	.word	0x20000380

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0a6      	sub	sp, #152	; 0x98
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d32:	2228      	movs	r2, #40	; 0x28
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f00b fd92 	bl	800c860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2258      	movs	r2, #88	; 0x58
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00b fd84 	bl	800c860 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d60:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d62:	2301      	movs	r3, #1
 8000d64:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fd98 	bl	80028bc <HAL_RCC_OscConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d92:	f000 fc07 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d96:	230f      	movs	r3, #15
 8000d98:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000db0:	2101      	movs	r1, #1
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fdd6 	bl	8003964 <HAL_RCC_ClockConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dbe:	f000 fbf1 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 f831 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dd8:	f000 fbe4 	bl	80015a4 <Error_Handler>
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3798      	adds	r7, #152	; 0x98
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_CAN_Init+0x68>)
 8000dea:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <MX_CAN_Init+0x6c>)
 8000dec:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <MX_CAN_Init+0x68>)
 8000df0:	2208      	movs	r2, #8
 8000df2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_CAN_Init+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_CAN_Init+0x68>)
 8000dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e00:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e08:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e10:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_CAN_Init+0x68>)
 8000e38:	f000 fe28 	bl	8001a8c <HAL_CAN_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000e42:	f000 fbaf 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000260 	.word	0x20000260
 8000e50:	40006400 	.word	0x40006400

08000e54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <MX_SPI1_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e8a:	2210      	movs	r2, #16
 8000e8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000eae:	2208      	movs	r2, #8
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_SPI1_Init+0x74>)
 8000eb4:	f003 f9dc 	bl	8004270 <HAL_SPI_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ebe:	f000 fb71 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000288 	.word	0x20000288
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <MX_USART2_UART_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000edc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_USART2_UART_Init+0x58>)
 8000f14:	f003 fd2c 	bl	8004970 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 fb41 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200002ec 	.word	0x200002ec
 8000f2c:	40004400 	.word	0x40004400

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a1d      	ldr	r2, [pc, #116]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_GPIO_Init+0x90>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2120      	movs	r1, #32
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f001 fc5f 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f001 fac6 	bl	8002544 <HAL_GPIO_Init>

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <myprintf>:
/* USER CODE BEGIN 4 */

int dataShift = 10;
int dataPacket = 1;

void myprintf(const char *fmt, ...) {
 8000fc4:	b40f      	push	{r0, r1, r2, r3}
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	2164      	movs	r1, #100	; 0x64
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <myprintf+0x44>)
 8000fda:	f00b fdeb 	bl	800cbb4 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000fde:	480a      	ldr	r0, [pc, #40]	; (8001008 <myprintf+0x44>)
 8000fe0:	f7ff f8fe 	bl	80001e0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff0:	4905      	ldr	r1, [pc, #20]	; (8001008 <myprintf+0x44>)
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <myprintf+0x48>)
 8000ff4:	f003 fd0a 	bl	8004a0c <HAL_UART_Transmit>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001002:	b004      	add	sp, #16
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000038c 	.word	0x2000038c
 800100c:	200002ec 	.word	0x200002ec

08001010 <printCANMessage>:


void printCANMessage(CAN_RxHeaderTypeDef Header, uint8_t data[]){
 8001010:	b084      	sub	sp, #16
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	f107 0c20 	add.w	ip, r7, #32
 800101c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char dataStr[20];
	myprintf("canMsg = 0x%lx %li", Header.StdId, Header.DLC);
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001024:	4619      	mov	r1, r3
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <printCANMessage+0x58>)
 8001028:	f7ff ffcc 	bl	8000fc4 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e00c      	b.n	800104c <printCANMessage+0x3c>
		myprintf(dataStr, " %x", data[i]);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	463b      	mov	r3, r7
 800103e:	490b      	ldr	r1, [pc, #44]	; (800106c <printCANMessage+0x5c>)
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffbf 	bl	8000fc4 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8ee      	bhi.n	8001032 <printCANMessage+0x22>
	}
	myprintf("\r\n");
 8001054:	4806      	ldr	r0, [pc, #24]	; (8001070 <printCANMessage+0x60>)
 8001056:	f7ff ffb5 	bl	8000fc4 <myprintf>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001064:	b004      	add	sp, #16
 8001066:	4770      	bx	lr
 8001068:	0800d388 	.word	0x0800d388
 800106c:	0800d39c 	.word	0x0800d39c
 8001070:	0800d3a0 	.word	0x0800d3a0

08001074 <saveData>:

void saveData(void){
 8001074:	b580      	push	{r7, lr}
 8001076:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
	FATFS FatFs;
	//File object
	FIL file;

	FRESULT fres;
	const TCHAR *file_path = "0:/csv/test.csv";
 800107e:	4b8f      	ldr	r3, [pc, #572]	; (80012bc <saveData+0x248>)
 8001080:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001084:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001088:	6013      	str	r3, [r2, #0]
	const char *new_header = "Test";
 800108a:	4b8d      	ldr	r3, [pc, #564]	; (80012c0 <saveData+0x24c>)
 800108c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001090:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001094:	6013      	str	r3, [r2, #0]

	// Mount drive
	myprintf("Mounting SD card\r\n");
 8001096:	488b      	ldr	r0, [pc, #556]	; (80012c4 <saveData+0x250>)
 8001098:	f7ff ff94 	bl	8000fc4 <myprintf>
	fres = f_mount(&FatFs, "", 1);
 800109c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010a0:	f103 0318 	add.w	r3, r3, #24
 80010a4:	3b0c      	subs	r3, #12
 80010a6:	2201      	movs	r2, #1
 80010a8:	4987      	ldr	r1, [pc, #540]	; (80012c8 <saveData+0x254>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fdee 	bl	8007c8c <f_mount>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80010b6:	f102 0227 	add.w	r2, r2, #39	; 0x27
 80010ba:	7013      	strb	r3, [r2, #0]
	if (fres != FR_OK){
 80010bc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80010c0:	f103 0327 	add.w	r3, r3, #39	; 0x27
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d009      	beq.n	80010de <saveData+0x6a>
		myprintf("f_mount pb: %d\r\n", fres);
 80010ca:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80010ce:	f103 0327 	add.w	r3, r3, #39	; 0x27
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	487d      	ldr	r0, [pc, #500]	; (80012cc <saveData+0x258>)
 80010d8:	f7ff ff74 	bl	8000fc4 <myprintf>
 80010dc:	e0e8      	b.n	80012b0 <saveData+0x23c>
		return;
	}

	fres = f_open(&file, file_path, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80010de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010e2:	3b38      	subs	r3, #56	; 0x38
 80010e4:	2203      	movs	r2, #3
 80010e6:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80010ea:	f101 012c 	add.w	r1, r1, #44	; 0x2c
 80010ee:	6809      	ldr	r1, [r1, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fe37 	bl	8007d64 <f_open>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80010fc:	f102 0227 	add.w	r2, r2, #39	; 0x27
 8001100:	7013      	strb	r3, [r2, #0]
	if (fres != FR_OK){
 8001102:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001106:	f103 0327 	add.w	r3, r3, #39	; 0x27
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d008      	beq.n	8001122 <saveData+0xae>
		myprintf("f_open pb: %d\r\n", fres);
 8001110:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001114:	f103 0327 	add.w	r3, r3, #39	; 0x27
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	486c      	ldr	r0, [pc, #432]	; (80012d0 <saveData+0x25c>)
 800111e:	f7ff ff51 	bl	8000fc4 <myprintf>
	}
	myprintf("Creating buffer\r\n");
 8001122:	486c      	ldr	r0, [pc, #432]	; (80012d4 <saveData+0x260>)
 8001124:	f7ff ff4e 	bl	8000fc4 <myprintf>
	CSV_BUFFER *buffer = csv_create_buffer();
 8001128:	f7ff faf2 	bl	8000710 <csv_create_buffer>
 800112c:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001130:	f103 0320 	add.w	r3, r3, #32
 8001134:	6018      	str	r0, [r3, #0]

	myprintf("Loading csv\r\n");
 8001136:	4868      	ldr	r0, [pc, #416]	; (80012d8 <saveData+0x264>)
 8001138:	f7ff ff44 	bl	8000fc4 <myprintf>
	csv_load(buffer, &file);
 800113c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001140:	3b38      	subs	r3, #56	; 0x38
 8001142:	4619      	mov	r1, r3
 8001144:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001148:	f103 0320 	add.w	r3, r3, #32
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f7ff fb52 	bl	80007f6 <csv_load>

	// Print buffer
	uint32_t i, j;
	for (i = 0; i < buffer->rows; i++){
 8001152:	2300      	movs	r3, #0
 8001154:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001158:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e058      	b.n	8001212 <saveData+0x19e>
		for (j = 0; j < buffer->width[i]; j++){
 8001160:	2300      	movs	r3, #0
 8001162:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001166:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e02e      	b.n	80011cc <saveData+0x158>
			//myprintf("%-10s\t", buffer->field[i][j]->text);
			myprintf("buff[%d][%d] = %s\t\t", i, j, buffer->field[i][j]->text);
 800116e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001172:	f103 0320 	add.w	r3, r3, #32
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800117e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800118e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80011a0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80011aa:	f101 0134 	add.w	r1, r1, #52	; 0x34
 80011ae:	6809      	ldr	r1, [r1, #0]
 80011b0:	484a      	ldr	r0, [pc, #296]	; (80012dc <saveData+0x268>)
 80011b2:	f7ff ff07 	bl	8000fc4 <myprintf>
		for (j = 0; j < buffer->width[i]; j++){
 80011b6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80011ba:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80011c6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80011d0:	f103 0320 	add.w	r3, r3, #32
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80011dc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80011ec:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3bb      	bcc.n	800116e <saveData+0xfa>
			}
	myprintf("\r\n");
 80011f6:	483a      	ldr	r0, [pc, #232]	; (80012e0 <saveData+0x26c>)
 80011f8:	f7ff fee4 	bl	8000fc4 <myprintf>
	for (i = 0; i < buffer->rows; i++){
 80011fc:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001200:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800120c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001216:	f103 0320 	add.w	r3, r3, #32
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001222:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d399      	bcc.n	8001160 <saveData+0xec>
	}

	// Let try overwriting one of the header fields
	myprintf("Saving csv\r\n");
 800122c:	482d      	ldr	r0, [pc, #180]	; (80012e4 <saveData+0x270>)
 800122e:	f7ff fec9 	bl	8000fc4 <myprintf>
	csv_set_field(buffer, 0, 1, (char *) new_header);
 8001232:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001236:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	2100      	movs	r1, #0
 8001240:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 8001244:	f100 0020 	add.w	r0, r0, #32
 8001248:	6800      	ldr	r0, [r0, #0]
 800124a:	f7ff fc2f 	bl	8000aac <csv_set_field>
	csv_save(&file, buffer);
 800124e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001252:	3b38      	subs	r3, #56	; 0x38
 8001254:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8001258:	f102 0220 	add.w	r2, r2, #32
 800125c:	6811      	ldr	r1, [r2, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fb37 	bl	80008d2 <csv_save>

	myprintf("Destroying buffer\r\n");
 8001264:	4820      	ldr	r0, [pc, #128]	; (80012e8 <saveData+0x274>)
 8001266:	f7ff fead 	bl	8000fc4 <myprintf>
	csv_destroy_buffer(buffer);
 800126a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800126e:	f103 0320 	add.w	r3, r3, #32
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	f7ff fa6b 	bl	800074e <csv_destroy_buffer>

	// Close file
	fres = f_close(&file);
 8001278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800127c:	3b38      	subs	r3, #56	; 0x38
 800127e:	4618      	mov	r0, r3
 8001280:	f007 fe60 	bl	8008f44 <f_close>
 8001284:	4603      	mov	r3, r0
 8001286:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800128a:	f102 0227 	add.w	r2, r2, #39	; 0x27
 800128e:	7013      	strb	r3, [r2, #0]
	if (fres != FR_OK){
 8001290:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8001294:	f103 0327 	add.w	r3, r3, #39	; 0x27
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d008      	beq.n	80012b0 <saveData+0x23c>
		myprintf("f_close pb: %d\r\n", fres);
 800129e:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80012a2:	f103 0327 	add.w	r3, r3, #39	; 0x27
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4810      	ldr	r0, [pc, #64]	; (80012ec <saveData+0x278>)
 80012ac:	f7ff fe8a 	bl	8000fc4 <myprintf>
		}
}
 80012b0:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 80012b4:	3738      	adds	r7, #56	; 0x38
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800d3a4 	.word	0x0800d3a4
 80012c0:	0800d3b4 	.word	0x0800d3b4
 80012c4:	0800d3bc 	.word	0x0800d3bc
 80012c8:	0800d3d0 	.word	0x0800d3d0
 80012cc:	0800d3d4 	.word	0x0800d3d4
 80012d0:	0800d3e8 	.word	0x0800d3e8
 80012d4:	0800d3f8 	.word	0x0800d3f8
 80012d8:	0800d40c 	.word	0x0800d40c
 80012dc:	0800d41c 	.word	0x0800d41c
 80012e0:	0800d3a0 	.word	0x0800d3a0
 80012e4:	0800d430 	.word	0x0800d430
 80012e8:	0800d440 	.word	0x0800d440
 80012ec:	0800d454 	.word	0x0800d454

080012f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	CAN_TxHeaderTypeDef   TxHeader;

	// CAN default data
	TxHeader.StdId = 0x222;
 80012f8:	f240 2322 	movw	r3, #546	; 0x222
 80012fc:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = 0x00;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.IDE = CAN_ID_STD;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 4;
 800130a:	2304      	movs	r3, #4
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t freeMailboxs;
	uint8_t data[10] = "bcad";
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <StartDefaultTask+0x64>)
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131e:	6018      	str	r0, [r3, #0]
 8001320:	3304      	adds	r3, #4
 8001322:	7019      	strb	r1, [r3, #0]
 8001324:	f107 0311 	add.w	r3, r7, #17
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for(;;)
	{
		myprintf(" -- STARTING thread DefaultTask -- \r\n");
 800132e:	480a      	ldr	r0, [pc, #40]	; (8001358 <StartDefaultTask+0x68>)
 8001330:	f7ff fe48 	bl	8000fc4 <myprintf>
		DefaultProfiler++;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <StartDefaultTask+0x6c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <StartDefaultTask+0x6c>)
 800133c:	6013      	str	r3, [r2, #0]
//		freeMailboxs = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
//		myprintf("packet sent: %s\r\n", data);
//		myprintf("num free mailboxs: %i\r\n", freeMailboxs);
//		myprintf("text mailbox used: %ld\r\n", TxMailbox);

		myprintf(" -- ENDING thread DefaultTask -- \r\n");
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <StartDefaultTask+0x70>)
 8001340:	f7ff fe40 	bl	8000fc4 <myprintf>
		osDelay(DefaultTask_delay);	// Task is put to sleep for 500ms
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <StartDefaultTask+0x74>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	4618      	mov	r0, r3
 800134c:	f008 fc2a 	bl	8009ba4 <osDelay>
		myprintf(" -- STARTING thread DefaultTask -- \r\n");
 8001350:	e7ed      	b.n	800132e <StartDefaultTask+0x3e>
 8001352:	bf00      	nop
 8001354:	0800d4b4 	.word	0x0800d4b4
 8001358:	0800d468 	.word	0x0800d468
 800135c:	2000043c 	.word	0x2000043c
 8001360:	0800d490 	.word	0x0800d490
 8001364:	20000000 	.word	0x20000000

08001368 <StartSDCardSaveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDCardSaveTask */
void StartSDCardSaveTask(void const * argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 8001370:	480e      	ldr	r0, [pc, #56]	; (80013ac <StartSDCardSaveTask+0x44>)
 8001372:	f7ff fe27 	bl	8000fc4 <myprintf>
	// restart CAN telemetry threads
	myprintf(" -- RESUMING thread GetData1 -- \r\n");
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <StartSDCardSaveTask+0x48>)
 8001378:	f7ff fe24 	bl	8000fc4 <myprintf>
	osThreadResume(GetData1Handle);
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <StartSDCardSaveTask+0x4c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f008 fd39 	bl	8009df8 <osThreadResume>
	myprintf(" -- RESUMING thread GetData2 -- \r\n");
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <StartSDCardSaveTask+0x50>)
 8001388:	f7ff fe1c 	bl	8000fc4 <myprintf>
	osThreadResume(GetData2Handle);
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <StartSDCardSaveTask+0x54>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f008 fd31 	bl	8009df8 <osThreadResume>

	myprintf(" -- ENDING thread SDCardSave -- \r\n");
 8001396:	480a      	ldr	r0, [pc, #40]	; (80013c0 <StartSDCardSaveTask+0x58>)
 8001398:	f7ff fe14 	bl	8000fc4 <myprintf>
	osDelay(SDCardSave_delay);
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <StartSDCardSaveTask+0x5c>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f008 fbfe 	bl	8009ba4 <osDelay>
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 80013a8:	e7e2      	b.n	8001370 <StartSDCardSaveTask+0x8>
 80013aa:	bf00      	nop
 80013ac:	0800d4c0 	.word	0x0800d4c0
 80013b0:	0800d4e8 	.word	0x0800d4e8
 80013b4:	20000378 	.word	0x20000378
 80013b8:	0800d50c 	.word	0x0800d50c
 80013bc:	2000037c 	.word	0x2000037c
 80013c0:	0800d530 	.word	0x0800d530
 80013c4:	20000002 	.word	0x20000002

080013c8 <StartGetData1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData1 */
void StartGetData1(void const * argument)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	; 0x30
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData1 */
	CAN_TxHeaderTypeDef   TxHeader1;

	// can transmission 1
	TxHeader1.StdId = 0x201;
 80013d0:	f240 2301 	movw	r3, #513	; 0x201
 80013d4:	617b      	str	r3, [r7, #20]
	TxHeader1.ExtId = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
	TxHeader1.RTR = CAN_RTR_DATA;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
	TxHeader1.IDE = CAN_ID_STD;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
	TxHeader1.DLC = 4;
 80013e2:	2304      	movs	r3, #4
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader1.TransmitGlobalTime = DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint8_t TransmissionData1[8] = "dat1";
 80013ec:	4a34      	ldr	r2, [pc, #208]	; (80014c0 <StartGetData1+0xf8>)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013f6:	6018      	str	r0, [r3, #0]
 80013f8:	3304      	adds	r3, #4
 80013fa:	7019      	strb	r1, [r3, #0]
 80013fc:	f107 0311 	add.w	r3, r7, #17
 8001400:	2200      	movs	r2, #0
 8001402:	801a      	strh	r2, [r3, #0]
 8001404:	709a      	strb	r2, [r3, #2]
	uint8_t node1req[4] = {0x77, 0x6f, 0x6f, 0x66};
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <StartGetData1+0xfc>)
 8001408:	60bb      	str	r3, [r7, #8]
	uint32_t current_time;
	/* Infinite loop */
  for(;;)
  {
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 800140a:	482f      	ldr	r0, [pc, #188]	; (80014c8 <StartGetData1+0x100>)
 800140c:	f7ff fdda 	bl	8000fc4 <myprintf>
	  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <StartGetData1+0x104>)
 8001412:	f000 fe1f 	bl	8002054 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d010      	beq.n	800143e <StartGetData1+0x76>
		  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader1, TransmissionData1, &TxMailbox) == HAL_OK){
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	f107 0114 	add.w	r1, r7, #20
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <StartGetData1+0x108>)
 8001426:	4829      	ldr	r0, [pc, #164]	; (80014cc <StartGetData1+0x104>)
 8001428:	f000 fd39 	bl	8001e9e <HAL_CAN_AddTxMessage>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d103      	bne.n	800143a <StartGetData1+0x72>
			  myprintf("CAN message sent to data1\r\n");}
 8001432:	4828      	ldr	r0, [pc, #160]	; (80014d4 <StartGetData1+0x10c>)
 8001434:	f7ff fdc6 	bl	8000fc4 <myprintf>
 8001438:	e001      	b.n	800143e <StartGetData1+0x76>
		  else{
			  Error_Handler();
 800143a:	f000 f8b3 	bl	80015a4 <Error_Handler>
		  }
	  }
	  osDelay(10);	// response delay
 800143e:	200a      	movs	r0, #10
 8001440:	f008 fbb0 	bl	8009ba4 <osDelay>
	  // continue retransmission until data1 is collected
	  // change this to wait for a flag change from ReadCAN
	  if (RxHeader.StdId == 0x206 &&
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <StartGetData1+0x110>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f240 2206 	movw	r2, #518	; 0x206
 800144c:	4293      	cmp	r3, r2
 800144e:	d122      	bne.n	8001496 <StartGetData1+0xce>
		  RxData[0] == node1req[0] &&
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <StartGetData1+0x114>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	7a3b      	ldrb	r3, [r7, #8]
	  if (RxHeader.StdId == 0x206 &&
 8001456:	429a      	cmp	r2, r3
 8001458:	d11d      	bne.n	8001496 <StartGetData1+0xce>
		  RxData[1] == node1req[1] &&
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <StartGetData1+0x114>)
 800145c:	785a      	ldrb	r2, [r3, #1]
 800145e:	7a7b      	ldrb	r3, [r7, #9]
		  RxData[0] == node1req[0] &&
 8001460:	429a      	cmp	r2, r3
 8001462:	d118      	bne.n	8001496 <StartGetData1+0xce>
	      RxData[2] == node1req[2] &&
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <StartGetData1+0x114>)
 8001466:	789a      	ldrb	r2, [r3, #2]
 8001468:	7abb      	ldrb	r3, [r7, #10]
		  RxData[1] == node1req[1] &&
 800146a:	429a      	cmp	r2, r3
 800146c:	d113      	bne.n	8001496 <StartGetData1+0xce>
		  RxData[3] == node1req[3]){
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <StartGetData1+0x114>)
 8001470:	78da      	ldrb	r2, [r3, #3]
 8001472:	7afb      	ldrb	r3, [r7, #11]
	      RxData[2] == node1req[2] &&
 8001474:	429a      	cmp	r2, r3
 8001476:	d10e      	bne.n	8001496 <StartGetData1+0xce>
		  // process data1...
		  myprintf("CAN response from node1\r\n");
 8001478:	4819      	ldr	r0, [pc, #100]	; (80014e0 <StartGetData1+0x118>)
 800147a:	f7ff fda3 	bl	8000fc4 <myprintf>
		  myprintf("processing...\r\n");
 800147e:	4819      	ldr	r0, [pc, #100]	; (80014e4 <StartGetData1+0x11c>)
 8001480:	f7ff fda0 	bl	8000fc4 <myprintf>
		  myprintf(" -- SUSPENDING thread GetData1 -- \r\n");
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <StartGetData1+0x120>)
 8001486:	f7ff fd9d 	bl	8000fc4 <myprintf>
		  osThreadSuspend(GetData1Handle);
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <StartGetData1+0x124>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f008 fca5 	bl	8009dde <osThreadSuspend>
 8001494:	e012      	b.n	80014bc <StartGetData1+0xf4>
	  }
	  else{
		  myprintf("no CAN response, delaying thread GetData1\r\n");
 8001496:	4816      	ldr	r0, [pc, #88]	; (80014f0 <StartGetData1+0x128>)
 8001498:	f7ff fd94 	bl	8000fc4 <myprintf>
		  current_time = HAL_GetTick();
 800149c:	f000 fac6 	bl	8001a2c <HAL_GetTick>
 80014a0:	62f8      	str	r0, [r7, #44]	; 0x2c
		  myprintf("current time: %lu\r\n", current_time);
 80014a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <StartGetData1+0x12c>)
 80014a6:	f7ff fd8d 	bl	8000fc4 <myprintf>
		  myprintf(" -- ENDING thread GetData1 -- \r\n");
 80014aa:	4813      	ldr	r0, [pc, #76]	; (80014f8 <StartGetData1+0x130>)
 80014ac:	f7ff fd8a 	bl	8000fc4 <myprintf>
		  osDelay(retransmit_delay);
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <StartGetData1+0x134>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f008 fb74 	bl	8009ba4 <osDelay>
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 80014bc:	e7a5      	b.n	800140a <StartGetData1+0x42>
 80014be:	bf00      	nop
 80014c0:	0800d64c 	.word	0x0800d64c
 80014c4:	666f6f77 	.word	0x666f6f77
 80014c8:	0800d554 	.word	0x0800d554
 80014cc:	20000260 	.word	0x20000260
 80014d0:	20000410 	.word	0x20000410
 80014d4:	0800d578 	.word	0x0800d578
 80014d8:	200003f0 	.word	0x200003f0
 80014dc:	2000040c 	.word	0x2000040c
 80014e0:	0800d594 	.word	0x0800d594
 80014e4:	0800d5b0 	.word	0x0800d5b0
 80014e8:	0800d5c0 	.word	0x0800d5c0
 80014ec:	20000378 	.word	0x20000378
 80014f0:	0800d5e8 	.word	0x0800d5e8
 80014f4:	0800d614 	.word	0x0800d614
 80014f8:	0800d628 	.word	0x0800d628
 80014fc:	20000006 	.word	0x20000006

08001500 <StartGetData2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData2 */
void StartGetData2(void const * argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(retransmit_delay);
 8001508:	4b03      	ldr	r3, [pc, #12]	; (8001518 <StartGetData2+0x18>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	4618      	mov	r0, r3
 8001510:	f008 fb48 	bl	8009ba4 <osDelay>
 8001514:	e7f8      	b.n	8001508 <StartGetData2+0x8>
 8001516:	bf00      	nop
 8001518:	20000006 	.word	0x20000006

0800151c <StartReadCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCAN */
void StartReadCAN(void const * argument)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b087      	sub	sp, #28
 8001520:	af04      	add	r7, sp, #16
 8001522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCAN */
	/* Infinite loop */
	for(;;)
	{
		//myprintf(" -- STARTING thread ReadCAN -- \r\n");
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8001524:	2100      	movs	r1, #0
 8001526:	4812      	ldr	r0, [pc, #72]	; (8001570 <StartReadCAN+0x54>)
 8001528:	f000 fedb 	bl	80022e2 <HAL_CAN_GetRxFifoFillLevel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d016      	beq.n	8001560 <StartReadCAN+0x44>
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <StartReadCAN+0x58>)
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <StartReadCAN+0x5c>)
 8001536:	2100      	movs	r1, #0
 8001538:	480d      	ldr	r0, [pc, #52]	; (8001570 <StartReadCAN+0x54>)
 800153a:	f000 fdc0 	bl	80020be <HAL_CAN_GetRxMessage>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	//LED shows a CAN message read
 800153e:	2120      	movs	r1, #32
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f001 f9a0 	bl	8002888 <HAL_GPIO_TogglePin>
			printCANMessage(RxHeader, RxData);
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <StartReadCAN+0x5c>)
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <StartReadCAN+0x58>)
 800154c:	9203      	str	r2, [sp, #12]
 800154e:	466c      	mov	r4, sp
 8001550:	f103 0210 	add.w	r2, r3, #16
 8001554:	ca07      	ldmia	r2, {r0, r1, r2}
 8001556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800155a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800155c:	f7ff fd58 	bl	8001010 <printCANMessage>
//				myprintf("data request response from node1 of id 0x206\r\n");
//				data1collected = 1;	// can be changed into thread signal/flag
//			}
		}
		//myprintf(" -- ENDING thread ReadCAN -- \r\n");
		osDelay(read_delay);
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <StartReadCAN+0x60>)
 8001562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001566:	4618      	mov	r0, r3
 8001568:	f008 fb1c 	bl	8009ba4 <osDelay>
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 800156c:	e7da      	b.n	8001524 <StartReadCAN+0x8>
 800156e:	bf00      	nop
 8001570:	20000260 	.word	0x20000260
 8001574:	2000040c 	.word	0x2000040c
 8001578:	200003f0 	.word	0x200003f0
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001592:	f000 fa37 	bl	8001a04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40012c00 	.word	0x40012c00

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  myprintf("HAL error occurred!\r\n"); // print
 80015ac:	4801      	ldr	r0, [pc, #4]	; (80015b4 <Error_Handler+0x10>)
 80015ae:	f7ff fd09 	bl	8000fc4 <myprintf>
 80015b2:	e7fb      	b.n	80015ac <Error_Handler+0x8>
 80015b4:	0800d654 	.word	0x0800d654

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_MspInit+0x4c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a10      	ldr	r2, [pc, #64]	; (8001604 <HAL_MspInit+0x4c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_MspInit+0x4c>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_MspInit+0x4c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_MspInit+0x4c>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	210f      	movs	r1, #15
 80015f2:	f06f 0001 	mvn.w	r0, #1
 80015f6:	f000 ff7b 	bl	80024f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000

08001608 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_CAN_MspInit+0x80>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d129      	bne.n	800167e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_CAN_MspInit+0x84>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_CAN_MspInit+0x84>)
 8001630:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_CAN_MspInit+0x84>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_CAN_MspInit+0x84>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	4a11      	ldr	r2, [pc, #68]	; (800168c <HAL_CAN_MspInit+0x84>)
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	6153      	str	r3, [r2, #20]
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_CAN_MspInit+0x84>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800165a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800166c:	2309      	movs	r3, #9
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f000 ff63 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800167e:	bf00      	nop
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40006400 	.word	0x40006400
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a25      	ldr	r2, [pc, #148]	; (8001744 <HAL_SPI_MspInit+0xb4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d144      	bne.n	800173c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016bc:	6193      	str	r3, [r2, #24]
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_SPI_MspInit+0xb8>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800170a:	2305      	movs	r3, #5
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f000 ff14 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800171c:	2308      	movs	r3, #8
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800172c:	2305      	movs	r3, #5
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_SPI_MspInit+0xbc>)
 8001738:	f000 ff04 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013000 	.word	0x40013000
 8001748:	40021000 	.word	0x40021000
 800174c:	48000400 	.word	0x48000400

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a17      	ldr	r2, [pc, #92]	; (80017cc <HAL_UART_MspInit+0x7c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d128      	bne.n	80017c4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_UART_MspInit+0x80>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <HAL_UART_MspInit+0x80>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_UART_MspInit+0x80>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_UART_MspInit+0x80>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_UART_MspInit+0x80>)
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	6153      	str	r3, [r2, #20]
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_UART_MspInit+0x80>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a2:	230c      	movs	r3, #12
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b2:	2307      	movs	r3, #7
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f000 fec0 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40004400 	.word	0x40004400
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017e4:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_InitTick+0xcc>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <HAL_InitTick+0xcc>)
 80017ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_InitTick+0xcc>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017fc:	f107 020c 	add.w	r2, r7, #12
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fae2 	bl	8003dd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800180c:	f002 fabe 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 8001810:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <HAL_InitTick+0xd0>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9b      	lsrs	r3, r3, #18
 800181c:	3b01      	subs	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_InitTick+0xd4>)
 8001822:	4a22      	ldr	r2, [pc, #136]	; (80018ac <HAL_InitTick+0xd8>)
 8001824:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_InitTick+0xd4>)
 8001828:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_InitTick+0xd4>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_InitTick+0xd4>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_InitTick+0xd4>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_InitTick+0xd4>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001846:	4818      	ldr	r0, [pc, #96]	; (80018a8 <HAL_InitTick+0xd4>)
 8001848:	f002 fdbd 	bl	80043c6 <HAL_TIM_Base_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001856:	2b00      	cmp	r3, #0
 8001858:	d11b      	bne.n	8001892 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800185a:	4813      	ldr	r0, [pc, #76]	; (80018a8 <HAL_InitTick+0xd4>)
 800185c:	f002 fe14 	bl	8004488 <HAL_TIM_Base_Start_IT>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800186a:	2b00      	cmp	r3, #0
 800186c:	d111      	bne.n	8001892 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800186e:	2019      	movs	r0, #25
 8001870:	f000 fe5a 	bl	8002528 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	d808      	bhi.n	800188c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800187a:	2200      	movs	r2, #0
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	2019      	movs	r0, #25
 8001880:	f000 fe36 	bl	80024f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_InitTick+0xdc>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e002      	b.n	8001892 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001896:	4618      	mov	r0, r3
 8001898:	3730      	adds	r7, #48	; 0x30
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	431bde83 	.word	0x431bde83
 80018a8:	20000440 	.word	0x20000440
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	2000000c 	.word	0x2000000c

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018e6:	f002 fe3f 	bl	8004568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000440 	.word	0x20000440

080018f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <_sbrk+0x5c>)
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <_sbrk+0x60>)
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <_sbrk+0x64>)
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <_sbrk+0x68>)
 8001914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	429a      	cmp	r2, r3
 8001922:	d207      	bcs.n	8001934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001924:	f00a ff52 	bl	800c7cc <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	220c      	movs	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e009      	b.n	8001948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <_sbrk+0x64>)
 8001944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20010000 	.word	0x20010000
 8001954:	00000400 	.word	0x00000400
 8001958:	2000048c 	.word	0x2000048c
 800195c:	20001568 	.word	0x20001568

08001960 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <SystemInit+0x20>)
 8001966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <SystemInit+0x20>)
 800196c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800198a:	490e      	ldr	r1, [pc, #56]	; (80019c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <LoopForever+0xe>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001990:	e002      	b.n	8001998 <LoopCopyDataInit>

08001992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001996:	3304      	adds	r3, #4

08001998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800199c:	d3f9      	bcc.n	8001992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199e:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a0:	4c0b      	ldr	r4, [pc, #44]	; (80019d0 <LoopForever+0x16>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a4:	e001      	b.n	80019aa <LoopFillZerobss>

080019a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a8:	3204      	adds	r2, #4

080019aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ac:	d3fb      	bcc.n	80019a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019ae:	f7ff ffd7 	bl	8001960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b2:	f00a ff11 	bl	800c7d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019b6:	f7ff f8c9 	bl	8000b4c <main>

080019ba <LoopForever>:

LoopForever:
    b LoopForever
 80019ba:	e7fe      	b.n	80019ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80019c8:	0800dce0 	.word	0x0800dce0
  ldr r2, =_sbss
 80019cc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80019d0:	20001564 	.word	0x20001564

080019d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d4:	e7fe      	b.n	80019d4 <ADC1_2_IRQHandler>
	...

080019d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_Init+0x28>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_Init+0x28>)
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e8:	2003      	movs	r0, #3
 80019ea:	f000 fd76 	bl	80024da <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ee:	200f      	movs	r0, #15
 80019f0:	f7ff fef0 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f4:	f7ff fde0 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000010 	.word	0x20000010
 8001a28:	20000490 	.word	0x20000490

08001a2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000490 	.word	0x20000490

08001a44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000010 	.word	0x20000010

08001a8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0ed      	b.n	8001c7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fdac 	bl	8001608 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac0:	f7ff ffb4 	bl	8001a2c <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ac6:	e012      	b.n	8001aee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ac8:	f7ff ffb0 	bl	8001a2c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b0a      	cmp	r3, #10
 8001ad4:	d90b      	bls.n	8001aee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0c5      	b.n	8001c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0e5      	beq.n	8001ac8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0202 	bic.w	r2, r2, #2
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b0c:	f7ff ff8e 	bl	8001a2c <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b12:	e012      	b.n	8001b3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b14:	f7ff ff8a 	bl	8001a2c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b0a      	cmp	r3, #10
 8001b20:	d90b      	bls.n	8001b3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2205      	movs	r2, #5
 8001b32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e09f      	b.n	8001c7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e5      	bne.n	8001b14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7e1b      	ldrb	r3, [r3, #24]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d108      	bne.n	8001b62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e007      	b.n	8001b72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7e5b      	ldrb	r3, [r3, #25]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d108      	bne.n	8001b8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e007      	b.n	8001b9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7e9b      	ldrb	r3, [r3, #26]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d108      	bne.n	8001bb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0220 	orr.w	r2, r2, #32
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e007      	b.n	8001bc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0220 	bic.w	r2, r2, #32
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7edb      	ldrb	r3, [r3, #27]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0210 	bic.w	r2, r2, #16
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e007      	b.n	8001bf0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0210 	orr.w	r2, r2, #16
 8001bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7f1b      	ldrb	r3, [r3, #28]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d108      	bne.n	8001c0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0208 	orr.w	r2, r2, #8
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e007      	b.n	8001c1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0208 	bic.w	r2, r2, #8
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7f5b      	ldrb	r3, [r3, #29]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d108      	bne.n	8001c34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0204 	orr.w	r2, r2, #4
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e007      	b.n	8001c44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0204 	bic.w	r2, r2, #4
 8001c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	ea42 0103 	orr.w	r1, r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	1e5a      	subs	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b087      	sub	sp, #28
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c98:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c9a:	7cfb      	ldrb	r3, [r7, #19]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d003      	beq.n	8001ca8 <HAL_CAN_ConfigFilter+0x26>
 8001ca0:	7cfb      	ldrb	r3, [r7, #19]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	f040 80aa 	bne.w	8001dfc <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d123      	bne.n	8001d2a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	401a      	ands	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d04:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3248      	adds	r2, #72	; 0x48
 8001d0a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d1e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d20:	6979      	ldr	r1, [r7, #20]
 8001d22:	3348      	adds	r3, #72	; 0x48
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d122      	bne.n	8001d78 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d52:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3248      	adds	r2, #72	; 0x48
 8001d58:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d6c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d6e:	6979      	ldr	r1, [r7, #20]
 8001d70:	3348      	adds	r3, #72	; 0x48
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d92:	e007      	b.n	8001da4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001dbe:	e007      	b.n	8001dd0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dee:	f023 0201 	bic.w	r2, r3, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e006      	b.n	8001e0a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
  }
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	371c      	adds	r7, #28
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d12e      	bne.n	8001e88 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e42:	f7ff fdf3 	bl	8001a2c <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e48:	e012      	b.n	8001e70 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e4a:	f7ff fdef 	bl	8001a2c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b0a      	cmp	r3, #10
 8001e56:	d90b      	bls.n	8001e70 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2205      	movs	r2, #5
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e012      	b.n	8001e96 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1e5      	bne.n	8001e4a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e006      	b.n	8001e96 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b089      	sub	sp, #36	; 0x24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ebc:	7ffb      	ldrb	r3, [r7, #31]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d003      	beq.n	8001eca <HAL_CAN_AddTxMessage+0x2c>
 8001ec2:	7ffb      	ldrb	r3, [r7, #31]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	f040 80b8 	bne.w	800203a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 80a0 	beq.w	800202a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	0e1b      	lsrs	r3, r3, #24
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d907      	bls.n	8001f0a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e09e      	b.n	8002048 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10d      	bne.n	8001f38 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	6809      	ldr	r1, [r1, #0]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3318      	adds	r3, #24
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	440b      	add	r3, r1
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e00f      	b.n	8001f58 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f42:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f4c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3318      	adds	r3, #24
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	440b      	add	r3, r1
 8001f56:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3318      	adds	r3, #24
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	440b      	add	r3, r1
 8001f68:	3304      	adds	r3, #4
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	7d1b      	ldrb	r3, [r3, #20]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d111      	bne.n	8001f98 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3318      	adds	r3, #24
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	4413      	add	r3, r2
 8001f80:	3304      	adds	r3, #4
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6811      	ldr	r1, [r2, #0]
 8001f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3318      	adds	r3, #24
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	440b      	add	r3, r1
 8001f94:	3304      	adds	r3, #4
 8001f96:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3307      	adds	r3, #7
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	061a      	lsls	r2, r3, #24
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3306      	adds	r3, #6
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	041b      	lsls	r3, r3, #16
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3305      	adds	r3, #5
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	3204      	adds	r2, #4
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	4610      	mov	r0, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	6811      	ldr	r1, [r2, #0]
 8001fc0:	ea43 0200 	orr.w	r2, r3, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001fce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	061a      	lsls	r2, r3, #24
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3302      	adds	r3, #2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	4313      	orrs	r3, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	6811      	ldr	r1, [r2, #0]
 8001ff6:	ea43 0200 	orr.w	r2, r3, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002004:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3318      	adds	r3, #24
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	6811      	ldr	r1, [r2, #0]
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3318      	adds	r3, #24
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	440b      	add	r3, r1
 8002024:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e00e      	b.n	8002048 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e006      	b.n	8002048 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
  }
}
 8002048:	4618      	mov	r0, r3
 800204a:	3724      	adds	r7, #36	; 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002066:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002068:	7afb      	ldrb	r3, [r7, #11]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d002      	beq.n	8002074 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d11d      	bne.n	80020b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3301      	adds	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020be:	b480      	push	{r7}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d003      	beq.n	80020e2 <HAL_CAN_GetRxMessage+0x24>
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	f040 80f3 	bne.w	80022c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10e      	bne.n	8002106 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0e7      	b.n	80022d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e0d8      	b.n	80022d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	331b      	adds	r3, #27
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0204 	and.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	331b      	adds	r3, #27
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	4413      	add	r3, r2
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0d5b      	lsrs	r3, r3, #21
 8002152:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e00b      	b.n	8002174 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	331b      	adds	r3, #27
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	4413      	add	r3, r2
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	08db      	lsrs	r3, r3, #3
 800216c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	331b      	adds	r3, #27
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4413      	add	r3, r2
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0202 	and.w	r2, r3, #2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	331b      	adds	r3, #27
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	3304      	adds	r3, #4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 020f 	and.w	r2, r3, #15
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	331b      	adds	r3, #27
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4413      	add	r3, r2
 80021ae:	3304      	adds	r3, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0a1b      	lsrs	r3, r3, #8
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	331b      	adds	r3, #27
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	0c1b      	lsrs	r3, r3, #16
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4413      	add	r3, r2
 80021dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0a1a      	lsrs	r2, r3, #8
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0c1a      	lsrs	r2, r3, #16
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3302      	adds	r3, #2
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	4413      	add	r3, r2
 8002226:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e1a      	lsrs	r2, r3, #24
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	3303      	adds	r3, #3
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	3304      	adds	r3, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	4413      	add	r3, r2
 8002258:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0a1a      	lsrs	r2, r3, #8
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	3305      	adds	r3, #5
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	4413      	add	r3, r2
 8002272:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0c1a      	lsrs	r2, r3, #16
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	3306      	adds	r3, #6
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	4413      	add	r3, r2
 800228c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0e1a      	lsrs	r2, r3, #24
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	3307      	adds	r3, #7
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0220 	orr.w	r2, r2, #32
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	e007      	b.n	80022c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e006      	b.n	80022d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022f8:	7afb      	ldrb	r3, [r7, #11]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80022fe:	7afb      	ldrb	r3, [r7, #11]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d10f      	bne.n	8002324 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e005      	b.n	8002324 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002342:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d002      	beq.n	8002350 <HAL_CAN_ActivateNotification+0x1e>
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d109      	bne.n	8002364 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6959      	ldr	r1, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e006      	b.n	8002372 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b2:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	60d3      	str	r3, [r2, #12]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023cc:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	f003 0307 	and.w	r3, r3, #7
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	db0b      	blt.n	800240e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4907      	ldr	r1, [pc, #28]	; (800241c <__NVIC_EnableIRQ+0x38>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2001      	movs	r0, #1
 8002406:	fa00 f202 	lsl.w	r2, r0, r2
 800240a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ff4c 	bl	8002380 <__NVIC_SetPriorityGrouping>
}
 80024e8:	bf00      	nop
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002502:	f7ff ff61 	bl	80023c8 <__NVIC_GetPriorityGrouping>
 8002506:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68b9      	ldr	r1, [r7, #8]
 800250c:	6978      	ldr	r0, [r7, #20]
 800250e:	f7ff ffb1 	bl	8002474 <NVIC_EncodePriority>
 8002512:	4602      	mov	r2, r0
 8002514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff80 	bl	8002420 <__NVIC_SetPriority>
}
 8002520:	bf00      	nop
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff54 	bl	80023e4 <__NVIC_EnableIRQ>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002552:	e160      	b.n	8002816 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8152 	beq.w	8002810 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d005      	beq.n	8002584 <HAL_GPIO_Init+0x40>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d130      	bne.n	80025e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ba:	2201      	movs	r2, #1
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 0201 	and.w	r2, r3, #1
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d017      	beq.n	8002622 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d123      	bne.n	8002676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	08da      	lsrs	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3208      	adds	r2, #8
 8002670:	6939      	ldr	r1, [r7, #16]
 8002672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	2203      	movs	r2, #3
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0203 	and.w	r2, r3, #3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80ac 	beq.w	8002810 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b8:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4a5d      	ldr	r2, [pc, #372]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6193      	str	r3, [r2, #24]
 80026c4:	4b5b      	ldr	r3, [pc, #364]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026d0:	4a59      	ldr	r2, [pc, #356]	; (8002838 <HAL_GPIO_Init+0x2f4>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	3302      	adds	r3, #2
 80026d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026fa:	d025      	beq.n	8002748 <HAL_GPIO_Init+0x204>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a4f      	ldr	r2, [pc, #316]	; (800283c <HAL_GPIO_Init+0x2f8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01f      	beq.n	8002744 <HAL_GPIO_Init+0x200>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a4e      	ldr	r2, [pc, #312]	; (8002840 <HAL_GPIO_Init+0x2fc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d019      	beq.n	8002740 <HAL_GPIO_Init+0x1fc>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a4d      	ldr	r2, [pc, #308]	; (8002844 <HAL_GPIO_Init+0x300>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d013      	beq.n	800273c <HAL_GPIO_Init+0x1f8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a4c      	ldr	r2, [pc, #304]	; (8002848 <HAL_GPIO_Init+0x304>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00d      	beq.n	8002738 <HAL_GPIO_Init+0x1f4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a4b      	ldr	r2, [pc, #300]	; (800284c <HAL_GPIO_Init+0x308>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <HAL_GPIO_Init+0x1f0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a4a      	ldr	r2, [pc, #296]	; (8002850 <HAL_GPIO_Init+0x30c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_GPIO_Init+0x1ec>
 800272c:	2306      	movs	r3, #6
 800272e:	e00c      	b.n	800274a <HAL_GPIO_Init+0x206>
 8002730:	2307      	movs	r3, #7
 8002732:	e00a      	b.n	800274a <HAL_GPIO_Init+0x206>
 8002734:	2305      	movs	r3, #5
 8002736:	e008      	b.n	800274a <HAL_GPIO_Init+0x206>
 8002738:	2304      	movs	r3, #4
 800273a:	e006      	b.n	800274a <HAL_GPIO_Init+0x206>
 800273c:	2303      	movs	r3, #3
 800273e:	e004      	b.n	800274a <HAL_GPIO_Init+0x206>
 8002740:	2302      	movs	r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x206>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_GPIO_Init+0x206>
 8002748:	2300      	movs	r3, #0
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	f002 0203 	and.w	r2, r2, #3
 8002750:	0092      	lsls	r2, r2, #2
 8002752:	4093      	lsls	r3, r2
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800275a:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_GPIO_Init+0x2f4>)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3302      	adds	r3, #2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <HAL_GPIO_Init+0x310>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	43db      	mvns	r3, r3
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800278c:	4a31      	ldr	r2, [pc, #196]	; (8002854 <HAL_GPIO_Init+0x310>)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002792:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_GPIO_Init+0x310>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43db      	mvns	r3, r3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027b6:	4a27      	ldr	r2, [pc, #156]	; (8002854 <HAL_GPIO_Init+0x310>)
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <HAL_GPIO_Init+0x310>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027e0:	4a1c      	ldr	r2, [pc, #112]	; (8002854 <HAL_GPIO_Init+0x310>)
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e6:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_GPIO_Init+0x310>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_GPIO_Init+0x310>)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	f47f ae97 	bne.w	8002554 <HAL_GPIO_Init+0x10>
  }
}
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40021000 	.word	0x40021000
 8002838:	40010000 	.word	0x40010000
 800283c:	48000400 	.word	0x48000400
 8002840:	48000800 	.word	0x48000800
 8002844:	48000c00 	.word	0x48000c00
 8002848:	48001000 	.word	0x48001000
 800284c:	48001400 	.word	0x48001400
 8002850:	48001800 	.word	0x48001800
 8002854:	40010400 	.word	0x40010400

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002874:	e002      	b.n	800287c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	041a      	lsls	r2, r3, #16
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43d9      	mvns	r1, r3
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	400b      	ands	r3, r1
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f001 b83a 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 816f 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028f8:	4bb5      	ldr	r3, [pc, #724]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00c      	beq.n	800291e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002904:	4bb2      	ldr	r3, [pc, #712]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d15c      	bne.n	80029ca <HAL_RCC_OscConfig+0x10e>
 8002910:	4baf      	ldr	r3, [pc, #700]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291c:	d155      	bne.n	80029ca <HAL_RCC_OscConfig+0x10e>
 800291e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002922:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002932:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d102      	bne.n	8002950 <HAL_RCC_OscConfig+0x94>
 800294a:	4ba1      	ldr	r3, [pc, #644]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	e015      	b.n	800297c <HAL_RCC_OscConfig+0xc0>
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002968:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800296c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002978:	4b95      	ldr	r3, [pc, #596]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002980:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002984:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002990:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f002 021f 	and.w	r2, r2, #31
 80029a4:	2101      	movs	r1, #1
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8111 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x318>
 80029b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8108 	bne.w	8002bd4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f000 bfc6 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x12e>
 80029dc:	4b7c      	ldr	r3, [pc, #496]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a7b      	ldr	r2, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	e036      	b.n	8002a58 <HAL_RCC_OscConfig+0x19c>
 80029ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x158>
 80029fa:	4b75      	ldr	r3, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a74      	ldr	r2, [pc, #464]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b72      	ldr	r3, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a71      	ldr	r2, [pc, #452]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e021      	b.n	8002a58 <HAL_RCC_OscConfig+0x19c>
 8002a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x184>
 8002a26:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a69      	ldr	r2, [pc, #420]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x19c>
 8002a40:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a62      	ldr	r2, [pc, #392]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b60      	ldr	r3, [pc, #384]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5f      	ldr	r2, [pc, #380]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d059      	beq.n	8002b1c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe ffe0 	bl	8001a2c <HAL_GetTick>
 8002a6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a72:	f7fe ffdb 	bl	8001a2c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d902      	bls.n	8002a88 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	f000 bf67 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>
 8002a88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a8c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002a9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d102      	bne.n	8002aba <HAL_RCC_OscConfig+0x1fe>
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x22a>
 8002aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ad2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ad6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002aee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002af2:	fa92 f2a2 	rbit	r2, r2
 8002af6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002afa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002afe:	fab2 f282 	clz	r2, r2
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f042 0220 	orr.w	r2, r2, #32
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	f002 021f 	and.w	r2, r2, #31
 8002b0e:	2101      	movs	r1, #1
 8002b10:	fa01 f202 	lsl.w	r2, r1, r2
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0ab      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1b6>
 8002b1a:	e05c      	b.n	8002bd6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe ff86 	bl	8001a2c <HAL_GetTick>
 8002b20:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b26:	f7fe ff81 	bl	8001a2c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d902      	bls.n	8002b3c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	f000 bf0d 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>
 8002b3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b40:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002b50:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d102      	bne.n	8002b6e <HAL_RCC_OscConfig+0x2b2>
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	e015      	b.n	8002b9a <HAL_RCC_OscConfig+0x2de>
 8002b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b72:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_RCC_OscConfig+0x314>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b9e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002ba2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002ba6:	fa92 f2a2 	rbit	r2, r2
 8002baa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002bae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002bb2:	fab2 f282 	clz	r2, r2
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	f042 0220 	orr.w	r2, r2, #32
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	f002 021f 	and.w	r2, r2, #31
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ab      	bne.n	8002b26 <HAL_RCC_OscConfig+0x26a>
 8002bce:	e002      	b.n	8002bd6 <HAL_RCC_OscConfig+0x31a>
 8002bd0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 817f 	beq.w	8002eea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bec:	4ba7      	ldr	r3, [pc, #668]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bf8:	4ba4      	ldr	r3, [pc, #656]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d173      	bne.n	8002cec <HAL_RCC_OscConfig+0x430>
 8002c04:	4ba1      	ldr	r3, [pc, #644]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	d16c      	bne.n	8002cec <HAL_RCC_OscConfig+0x430>
 8002c12:	2302      	movs	r3, #2
 8002c14:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002c24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_OscConfig+0x386>
 8002c3c:	4b93      	ldr	r3, [pc, #588]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e013      	b.n	8002c6a <HAL_RCC_OscConfig+0x3ae>
 8002c42:	2302      	movs	r3, #2
 8002c44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002c54:	2302      	movs	r3, #2
 8002c56:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c5a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c66:	4b89      	ldr	r3, [pc, #548]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002c70:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002c74:	fa92 f2a2 	rbit	r2, r2
 8002c78:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002c7c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f042 0220 	orr.w	r2, r2, #32
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	f002 021f 	and.w	r2, r2, #31
 8002c90:	2101      	movs	r1, #1
 8002c92:	fa01 f202 	lsl.w	r2, r1, r2
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x3f6>
 8002c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d002      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f000 be52 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b76      	ldr	r3, [pc, #472]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	21f8      	movs	r1, #248	; 0xf8
 8002cc8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002cd0:	fa91 f1a1 	rbit	r1, r1
 8002cd4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002cd8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002cdc:	fab1 f181 	clz	r1, r1
 8002ce0:	b2c9      	uxtb	r1, r1
 8002ce2:	408b      	lsls	r3, r1
 8002ce4:	4969      	ldr	r1, [pc, #420]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	e0fe      	b.n	8002eea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8088 	beq.w	8002e0e <HAL_RCC_OscConfig+0x552>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002d10:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	461a      	mov	r2, r3
 8002d26:	2301      	movs	r3, #1
 8002d28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fe fe7f 	bl	8001a2c <HAL_GetTick>
 8002d2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fe fe7a 	bl	8001a2c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d902      	bls.n	8002d4a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	f000 be06 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002d5c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d102      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4be>
 8002d74:	4b45      	ldr	r3, [pc, #276]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e013      	b.n	8002da2 <HAL_RCC_OscConfig+0x4e6>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d92:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d9e:	4b3b      	ldr	r3, [pc, #236]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2202      	movs	r2, #2
 8002da4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002da8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002dac:	fa92 f2a2 	rbit	r2, r2
 8002db0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002db4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002db8:	fab2 f282 	clz	r2, r2
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f042 0220 	orr.w	r2, r2, #32
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f002 021f 	and.w	r2, r2, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f202 	lsl.w	r2, r1, r2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0af      	beq.n	8002d34 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	21f8      	movs	r1, #248	; 0xf8
 8002dea:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002df2:	fa91 f1a1 	rbit	r1, r1
 8002df6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002dfa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002dfe:	fab1 f181 	clz	r1, r1
 8002e02:	b2c9      	uxtb	r1, r1
 8002e04:	408b      	lsls	r3, r1
 8002e06:	4921      	ldr	r1, [pc, #132]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	e06d      	b.n	8002eea <HAL_RCC_OscConfig+0x62e>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002e20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	461a      	mov	r2, r3
 8002e36:	2300      	movs	r3, #0
 8002e38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fdf7 	bl	8001a2c <HAL_GetTick>
 8002e3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e44:	f7fe fdf2 	bl	8001a2c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d902      	bls.n	8002e5a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	f000 bd7e 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002e6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d105      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5d4>
 8002e84:	4b01      	ldr	r3, [pc, #4]	; (8002e8c <HAL_RCC_OscConfig+0x5d0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	e016      	b.n	8002eb8 <HAL_RCC_OscConfig+0x5fc>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	2302      	movs	r3, #2
 8002e92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ea8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002eb4:	4bbf      	ldr	r3, [pc, #764]	; (80031b4 <HAL_RCC_OscConfig+0x8f8>)
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2202      	movs	r2, #2
 8002eba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002ebe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002ec2:	fa92 f2a2 	rbit	r2, r2
 8002ec6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002eca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002ece:	fab2 f282 	clz	r2, r2
 8002ed2:	b2d2      	uxtb	r2, r2
 8002ed4:	f042 0220 	orr.w	r2, r2, #32
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	f002 021f 	and.w	r2, r2, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1ac      	bne.n	8002e44 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8113 	beq.w	8003126 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d07c      	beq.n	800300a <HAL_RCC_OscConfig+0x74e>
 8002f10:	2301      	movs	r3, #1
 8002f12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002f22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4ba2      	ldr	r3, [pc, #648]	; (80031b8 <HAL_RCC_OscConfig+0x8fc>)
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	461a      	mov	r2, r3
 8002f36:	2301      	movs	r3, #1
 8002f38:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fd77 	bl	8001a2c <HAL_GetTick>
 8002f3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe fd72 	bl	8001a2c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d902      	bls.n	8002f5a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	f000 bcfe 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002fb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	4b7e      	ldr	r3, [pc, #504]	; (80031b4 <HAL_RCC_OscConfig+0x8f8>)
 8002fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	6019      	str	r1, [r3, #0]
 8002fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f1a3 	rbit	r1, r3
 8002fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fdc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fe0:	6019      	str	r1, [r3, #0]
  return result;
 8002fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d09d      	beq.n	8002f44 <HAL_RCC_OscConfig+0x688>
 8003008:	e08d      	b.n	8003126 <HAL_RCC_OscConfig+0x86a>
 800300a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800300e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800301a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	fa93 f2a3 	rbit	r2, r3
 8003024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003028:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800302c:	601a      	str	r2, [r3, #0]
  return result;
 800302e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003032:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003036:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	461a      	mov	r2, r3
 8003040:	4b5d      	ldr	r3, [pc, #372]	; (80031b8 <HAL_RCC_OscConfig+0x8fc>)
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	461a      	mov	r2, r3
 8003048:	2300      	movs	r3, #0
 800304a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe fcee 	bl	8001a2c <HAL_GetTick>
 8003050:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	e00a      	b.n	800306c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003056:	f7fe fce9 	bl	8001a2c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d902      	bls.n	800306c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	f000 bc75 	b.w	8003956 <HAL_RCC_OscConfig+0x109a>
 800306c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003070:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003074:	2202      	movs	r2, #2
 8003076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	fa93 f2a3 	rbit	r2, r3
 8003086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800308a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003098:	2202      	movs	r2, #2
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	fa93 f2a3 	rbit	r2, r3
 80030aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030bc:	2202      	movs	r2, #2
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	fa93 f2a3 	rbit	r2, r3
 80030ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_RCC_OscConfig+0x8f8>)
 80030da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030e4:	2102      	movs	r1, #2
 80030e6:	6019      	str	r1, [r3, #0]
 80030e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f1a3 	rbit	r1, r3
 80030f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030fe:	6019      	str	r1, [r3, #0]
  return result;
 8003100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003104:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2101      	movs	r1, #1
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d197      	bne.n	8003056 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800312a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 81a5 	beq.w	8003486 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_RCC_OscConfig+0x8f8>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_RCC_OscConfig+0x8f8>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_RCC_OscConfig+0x8f8>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	61d3      	str	r3, [r2, #28]
 800315a:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <HAL_RCC_OscConfig+0x8f8>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003174:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_RCC_OscConfig+0x900>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d121      	bne.n	80031cc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_RCC_OscConfig+0x900>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <HAL_RCC_OscConfig+0x900>)
 800318e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003192:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003194:	f7fe fc4a 	bl	8001a2c <HAL_GetTick>
 8003198:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	e010      	b.n	80031c0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319e:	f7fe fc45 	bl	8001a2c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	; 0x64
 80031ac:	d908      	bls.n	80031c0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e3d1      	b.n	8003956 <HAL_RCC_OscConfig+0x109a>
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000
 80031b8:	10908120 	.word	0x10908120
 80031bc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b8d      	ldr	r3, [pc, #564]	; (80033f8 <HAL_RCC_OscConfig+0xb3c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0e8      	beq.n	800319e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d106      	bne.n	80031ea <HAL_RCC_OscConfig+0x92e>
 80031dc:	4b87      	ldr	r3, [pc, #540]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	4a86      	ldr	r2, [pc, #536]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6213      	str	r3, [r2, #32]
 80031e8:	e035      	b.n	8003256 <HAL_RCC_OscConfig+0x99a>
 80031ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x958>
 80031fa:	4b80      	ldr	r3, [pc, #512]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4a7f      	ldr	r2, [pc, #508]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6213      	str	r3, [r2, #32]
 8003206:	4b7d      	ldr	r3, [pc, #500]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a7c      	ldr	r2, [pc, #496]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	e020      	b.n	8003256 <HAL_RCC_OscConfig+0x99a>
 8003214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003218:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b05      	cmp	r3, #5
 8003222:	d10c      	bne.n	800323e <HAL_RCC_OscConfig+0x982>
 8003224:	4b75      	ldr	r3, [pc, #468]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4a74      	ldr	r2, [pc, #464]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	6213      	str	r3, [r2, #32]
 8003230:	4b72      	ldr	r3, [pc, #456]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4a71      	ldr	r2, [pc, #452]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6213      	str	r3, [r2, #32]
 800323c:	e00b      	b.n	8003256 <HAL_RCC_OscConfig+0x99a>
 800323e:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a6e      	ldr	r2, [pc, #440]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	6213      	str	r3, [r2, #32]
 800324a:	4b6c      	ldr	r3, [pc, #432]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a6b      	ldr	r2, [pc, #428]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003256:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800325a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8081 	beq.w	800336a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003268:	f7fe fbe0 	bl	8001a2c <HAL_GetTick>
 800326c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003270:	e00b      	b.n	800328a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003272:	f7fe fbdb 	bl	8001a2c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e365      	b.n	8003956 <HAL_RCC_OscConfig+0x109a>
 800328a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800328e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003292:	2202      	movs	r2, #2
 8003294:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	fa93 f2a3 	rbit	r2, r3
 80032a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032b6:	2202      	movs	r2, #2
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	fa93 f2a3 	rbit	r2, r3
 80032c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032d0:	601a      	str	r2, [r3, #0]
  return result;
 80032d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0302 	orr.w	r3, r3, #2
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d102      	bne.n	80032f6 <HAL_RCC_OscConfig+0xa3a>
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	e013      	b.n	800331e <HAL_RCC_OscConfig+0xa62>
 80032f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032fe:	2202      	movs	r2, #2
 8003300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003306:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	fa93 f2a3 	rbit	r2, r3
 8003310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003314:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4b38      	ldr	r3, [pc, #224]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003322:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003326:	2102      	movs	r1, #2
 8003328:	6011      	str	r1, [r2, #0]
 800332a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800332e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	fa92 f1a2 	rbit	r1, r2
 8003338:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800333c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003340:	6011      	str	r1, [r2, #0]
  return result;
 8003342:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003346:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d084      	beq.n	8003272 <HAL_RCC_OscConfig+0x9b6>
 8003368:	e083      	b.n	8003472 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fe fb5f 	bl	8001a2c <HAL_GetTick>
 800336e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7fe fb5a 	bl	8001a2c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e2e4      	b.n	8003956 <HAL_RCC_OscConfig+0x109a>
 800338c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003390:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003394:	2202      	movs	r2, #2
 8003396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800339c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	fa93 f2a3 	rbit	r2, r3
 80033a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033b8:	2202      	movs	r2, #2
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	fa93 f2a3 	rbit	r2, r3
 80033ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033d2:	601a      	str	r2, [r3, #0]
  return result;
 80033d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0xb44>
 80033f2:	4b02      	ldr	r3, [pc, #8]	; (80033fc <HAL_RCC_OscConfig+0xb40>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	e017      	b.n	8003428 <HAL_RCC_OscConfig+0xb6c>
 80033f8:	40007000 	.word	0x40007000
 80033fc:	40021000 	.word	0x40021000
 8003400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003404:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003408:	2202      	movs	r2, #2
 800340a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003410:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	fa93 f2a3 	rbit	r2, r3
 800341a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	4bb3      	ldr	r3, [pc, #716]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800342c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003430:	2102      	movs	r1, #2
 8003432:	6011      	str	r1, [r2, #0]
 8003434:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003438:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	fa92 f1a2 	rbit	r1, r2
 8003442:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003446:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800344a:	6011      	str	r1, [r2, #0]
  return result;
 800344c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003450:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	fab2 f282 	clz	r2, r2
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	f002 021f 	and.w	r2, r2, #31
 8003466:	2101      	movs	r1, #1
 8003468:	fa01 f202 	lsl.w	r2, r1, r2
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d180      	bne.n	8003374 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003472:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003476:	2b01      	cmp	r3, #1
 8003478:	d105      	bne.n	8003486 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800347a:	4b9e      	ldr	r3, [pc, #632]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4a9d      	ldr	r2, [pc, #628]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 8003480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003484:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800348a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 825e 	beq.w	8003954 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003498:	4b96      	ldr	r3, [pc, #600]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	f000 821f 	beq.w	80038e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	f040 8170 	bne.w	8003798 <HAL_RCC_OscConfig+0xedc>
 80034b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	fa93 f2a3 	rbit	r2, r3
 80034d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034dc:	601a      	str	r2, [r3, #0]
  return result;
 80034de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034e6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e8:	fab3 f383 	clz	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	461a      	mov	r2, r3
 80034fa:	2300      	movs	r3, #0
 80034fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fe fa95 	bl	8001a2c <HAL_GetTick>
 8003502:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003506:	e009      	b.n	800351c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003508:	f7fe fa90 	bl	8001a2c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e21c      	b.n	8003956 <HAL_RCC_OscConfig+0x109a>
 800351c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003520:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003524:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800352e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	fa93 f2a3 	rbit	r2, r3
 8003538:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800353c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003540:	601a      	str	r2, [r3, #0]
  return result;
 8003542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003546:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800354a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d102      	bne.n	8003566 <HAL_RCC_OscConfig+0xcaa>
 8003560:	4b64      	ldr	r3, [pc, #400]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	e027      	b.n	80035b6 <HAL_RCC_OscConfig+0xcfa>
 8003566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800356a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800356e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003578:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	fa93 f2a3 	rbit	r2, r3
 8003582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003586:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003590:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800359e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	fa93 f2a3 	rbit	r2, r3
 80035a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ac:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035ba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035be:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035c2:	6011      	str	r1, [r2, #0]
 80035c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	fa92 f1a2 	rbit	r1, r2
 80035d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035d6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035da:	6011      	str	r1, [r2, #0]
  return result;
 80035dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80035e0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0220 	orr.w	r2, r2, #32
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d182      	bne.n	8003508 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003602:	4b3c      	ldr	r3, [pc, #240]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	f023 020f 	bic.w	r2, r3, #15
 800360a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800360e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	4937      	ldr	r1, [pc, #220]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 8003618:	4313      	orrs	r3, r2
 800361a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800361c:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003628:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a19      	ldr	r1, [r3, #32]
 8003630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003634:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	430b      	orrs	r3, r1
 800363e:	492d      	ldr	r1, [pc, #180]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
 8003644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003648:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800364c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003656:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	fa93 f2a3 	rbit	r2, r3
 8003660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003664:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003668:	601a      	str	r2, [r3, #0]
  return result;
 800366a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800366e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003672:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800367e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	461a      	mov	r2, r3
 8003686:	2301      	movs	r3, #1
 8003688:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fe f9cf 	bl	8001a2c <HAL_GetTick>
 800368e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003692:	e009      	b.n	80036a8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003694:	f7fe f9ca 	bl	8001a2c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e156      	b.n	8003956 <HAL_RCC_OscConfig+0x109a>
 80036a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fa93 f2a3 	rbit	r2, r3
 80036c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036cc:	601a      	str	r2, [r3, #0]
  return result;
 80036ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0xe3c>
 80036ec:	4b01      	ldr	r3, [pc, #4]	; (80036f4 <HAL_RCC_OscConfig+0xe38>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	e02a      	b.n	8003748 <HAL_RCC_OscConfig+0xe8c>
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	fa93 f2a3 	rbit	r2, r3
 8003714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003718:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003722:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003730:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	fa93 f2a3 	rbit	r2, r3
 800373a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	4b86      	ldr	r3, [pc, #536]	; (8003960 <HAL_RCC_OscConfig+0x10a4>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800374c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003750:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003754:	6011      	str	r1, [r2, #0]
 8003756:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800375a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	fa92 f1a2 	rbit	r1, r2
 8003764:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003768:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800376c:	6011      	str	r1, [r2, #0]
  return result;
 800376e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003772:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	fab2 f282 	clz	r2, r2
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f042 0220 	orr.w	r2, r2, #32
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	f002 021f 	and.w	r2, r2, #31
 8003788:	2101      	movs	r1, #1
 800378a:	fa01 f202 	lsl.w	r2, r1, r2
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	f43f af7f 	beq.w	8003694 <HAL_RCC_OscConfig+0xdd8>
 8003796:	e0dd      	b.n	8003954 <HAL_RCC_OscConfig+0x1098>
 8003798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f2a3 	rbit	r2, r3
 80037b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037bc:	601a      	str	r2, [r3, #0]
  return result;
 80037be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037c6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	461a      	mov	r2, r3
 80037da:	2300      	movs	r3, #0
 80037dc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe f925 	bl	8001a2c <HAL_GetTick>
 80037e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e6:	e009      	b.n	80037fc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe f920 	bl	8001a2c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0ac      	b.n	8003956 <HAL_RCC_OscConfig+0x109a>
 80037fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003800:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003804:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	fa93 f2a3 	rbit	r2, r3
 8003818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800381c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003820:	601a      	str	r2, [r3, #0]
  return result;
 8003822:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003826:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800382a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382c:	fab3 f383 	clz	r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d102      	bne.n	8003846 <HAL_RCC_OscConfig+0xf8a>
 8003840:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_RCC_OscConfig+0x10a4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	e027      	b.n	8003896 <HAL_RCC_OscConfig+0xfda>
 8003846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800384e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003858:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	fa93 f2a3 	rbit	r2, r3
 8003862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003866:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003870:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f2a3 	rbit	r2, r3
 8003888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800388c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	4b33      	ldr	r3, [pc, #204]	; (8003960 <HAL_RCC_OscConfig+0x10a4>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800389a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800389e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038a2:	6011      	str	r1, [r2, #0]
 80038a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	fa92 f1a2 	rbit	r1, r2
 80038b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038b6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80038ba:	6011      	str	r1, [r2, #0]
  return result;
 80038bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80038c0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	fab2 f282 	clz	r2, r2
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	f042 0220 	orr.w	r2, r2, #32
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	f002 021f 	and.w	r2, r2, #31
 80038d6:	2101      	movs	r1, #1
 80038d8:	fa01 f202 	lsl.w	r2, r1, r2
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d182      	bne.n	80037e8 <HAL_RCC_OscConfig+0xf2c>
 80038e2:	e037      	b.n	8003954 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e02e      	b.n	8003956 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038f8:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_RCC_OscConfig+0x10a4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003900:	4b17      	ldr	r3, [pc, #92]	; (8003960 <HAL_RCC_OscConfig+0x10a4>)
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003908:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800390c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	429a      	cmp	r2, r3
 800391e:	d117      	bne.n	8003950 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003920:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003924:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003934:	429a      	cmp	r2, r3
 8003936:	d10b      	bne.n	8003950 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800393c:	f003 020f 	and.w	r2, r3, #15
 8003940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003944:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800394c:	429a      	cmp	r2, r3
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000

08003964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b09e      	sub	sp, #120	; 0x78
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e162      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b90      	ldr	r3, [pc, #576]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d910      	bls.n	80039ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b8d      	ldr	r3, [pc, #564]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 0207 	bic.w	r2, r3, #7
 8003992:	498b      	ldr	r1, [pc, #556]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b89      	ldr	r3, [pc, #548]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e14a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b8:	4b82      	ldr	r3, [pc, #520]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	497f      	ldr	r1, [pc, #508]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80dc 	beq.w	8003b90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d13c      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xf6>
 80039e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80039ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d102      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xa6>
 8003a04:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	e00f      	b.n	8003a2a <HAL_RCC_ClockConfig+0xc6>
 8003a0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	667b      	str	r3, [r7, #100]	; 0x64
 8003a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a26:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003a38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f042 0220 	orr.w	r2, r2, #32
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f002 021f 	and.w	r2, r2, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d17b      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0f3      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d13c      	bne.n	8003adc <HAL_RCC_ClockConfig+0x178>
 8003a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x128>
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	e00f      	b.n	8003aac <HAL_RCC_ClockConfig+0x148>
 8003a8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	647b      	str	r3, [r7, #68]	; 0x44
 8003a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa2:	fa93 f3a3 	rbit	r3, r3
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa8:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ab0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab4:	fa92 f2a2 	rbit	r2, r2
 8003ab8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003abc:	fab2 f282 	clz	r2, r2
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	f042 0220 	orr.w	r2, r2, #32
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	f002 021f 	and.w	r2, r2, #31
 8003acc:	2101      	movs	r1, #1
 8003ace:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d13a      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0b2      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
 8003adc:	2302      	movs	r3, #2
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x1a0>
 8003afe:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	e00d      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1bc>
 8003b04:	2302      	movs	r3, #2
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	fa93 f3a3 	rbit	r3, r3
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b10:	2302      	movs	r3, #2
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2202      	movs	r2, #2
 8003b22:	61ba      	str	r2, [r7, #24]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	fa92 f2a2 	rbit	r2, r2
 8003b2a:	617a      	str	r2, [r7, #20]
  return result;
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	fab2 f282 	clz	r2, r2
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	f042 0220 	orr.w	r2, r2, #32
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f002 021f 	and.w	r2, r2, #31
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e079      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f023 0203 	bic.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	491a      	ldr	r1, [pc, #104]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b60:	f7fd ff64 	bl	8001a2c <HAL_GetTick>
 8003b64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b68:	f7fd ff60 	bl	8001a2c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e061      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_ClockConfig+0x260>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 020c 	and.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1eb      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d214      	bcs.n	8003bc8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	4906      	ldr	r1, [pc, #24]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <HAL_RCC_ClockConfig+0x25c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e040      	b.n	8003c42 <HAL_RCC_ClockConfig+0x2de>
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	491a      	ldr	r1, [pc, #104]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4912      	ldr	r1, [pc, #72]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c06:	f000 f829 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_RCC_ClockConfig+0x2e8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c14:	22f0      	movs	r2, #240	; 0xf0
 8003c16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	fa92 f2a2 	rbit	r2, r2
 8003c1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	40d3      	lsrs	r3, r2
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x2ec>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_RCC_ClockConfig+0x2f0>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_RCC_ClockConfig+0x2f4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd fdca 	bl	80017d4 <HAL_InitTick>
  
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3778      	adds	r7, #120	; 0x78
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	0800d6bc 	.word	0x0800d6bc
 8003c54:	20000008 	.word	0x20000008
 8003c58:	2000000c 	.word	0x2000000c

08003c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b08b      	sub	sp, #44	; 0x2c
 8003c60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d002      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x30>
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x36>
 8003c8a:	e03f      	b.n	8003d0c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c8c:	4b25      	ldr	r3, [pc, #148]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c8e:	623b      	str	r3, [r7, #32]
      break;
 8003c90:	e03f      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	fa92 f2a2 	rbit	r2, r2
 8003ca4:	607a      	str	r2, [r7, #4]
  return result;
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	fab2 f282 	clz	r2, r2
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	40d3      	lsrs	r3, r2
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	220f      	movs	r2, #15
 8003cc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	fa92 f2a2 	rbit	r2, r2
 8003cc8:	60fa      	str	r2, [r7, #12]
  return result;
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	fab2 f282 	clz	r2, r2
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	40d3      	lsrs	r3, r2
 8003cd4:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cd6:	5cd3      	ldrb	r3, [r2, r3]
 8003cd8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ce4:	4a0f      	ldr	r2, [pc, #60]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf4:	e007      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cf6:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	fb02 f303 	mul.w	r3, r2, r3
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	623b      	str	r3, [r7, #32]
      break;
 8003d0a:	e002      	b.n	8003d12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d0e:	623b      	str	r3, [r7, #32]
      break;
 8003d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d12:	6a3b      	ldr	r3, [r7, #32]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	372c      	adds	r7, #44	; 0x2c
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40021000 	.word	0x40021000
 8003d24:	007a1200 	.word	0x007a1200
 8003d28:	0800d6d4 	.word	0x0800d6d4
 8003d2c:	0800d6e4 	.word	0x0800d6e4

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000008 	.word	0x20000008

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003d4e:	f7ff ffef 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d52:	4601      	mov	r1, r0
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003d60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	fa92 f2a2 	rbit	r2, r2
 8003d68:	603a      	str	r2, [r7, #0]
  return result;
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	fab2 f282 	clz	r2, r2
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	40d3      	lsrs	r3, r2
 8003d74:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	0800d6cc 	.word	0x0800d6cc

08003d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d92:	f7ff ffcd 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d96:	4601      	mov	r1, r0
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003da0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003da4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	fa92 f2a2 	rbit	r2, r2
 8003dac:	603a      	str	r2, [r7, #0]
  return result;
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	fab2 f282 	clz	r2, r2
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	40d3      	lsrs	r3, r2
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	0800d6cc 	.word	0x0800d6cc

08003dd0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	220f      	movs	r2, #15
 8003dde:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003de0:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0203 	and.w	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_GetClockConfig+0x5c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	08db      	lsrs	r3, r3, #3
 8003e0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <HAL_RCC_GetClockConfig+0x60>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0207 	and.w	r2, r3, #7
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	601a      	str	r2, [r3, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40022000 	.word	0x40022000

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b092      	sub	sp, #72	; 0x48
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e44:	2300      	movs	r3, #0
 8003e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80d4 	beq.w	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e58:	4b4e      	ldr	r3, [pc, #312]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10e      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b4b      	ldr	r3, [pc, #300]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	4a4a      	ldr	r2, [pc, #296]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	61d3      	str	r3, [r2, #28]
 8003e70:	4b48      	ldr	r3, [pc, #288]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	4b45      	ldr	r3, [pc, #276]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d118      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a41      	ldr	r2, [pc, #260]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9a:	f7fd fdc7 	bl	8001a2c <HAL_GetTick>
 8003e9e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea2:	f7fd fdc3 	bl	8001a2c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b64      	cmp	r3, #100	; 0x64
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1d6      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb4:	4b38      	ldr	r3, [pc, #224]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec0:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8084 	beq.w	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d07c      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee0:	4b2c      	ldr	r3, [pc, #176]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efa:	fab3 f383 	clz	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04b      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fd fd73 	bl	8001a2c <HAL_GetTick>
 8003f46:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fd fd6f 	bl	8001a2c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e180      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f60:	2302      	movs	r3, #2
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	fa93 f3a3 	rbit	r3, r3
 8003f76:	61fb      	str	r3, [r7, #28]
  return result;
 8003f78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f043 0302 	orr.w	r3, r3, #2
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d108      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003f8e:	4b01      	ldr	r3, [pc, #4]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	e00d      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	10908100 	.word	0x10908100
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	4b9a      	ldr	r3, [pc, #616]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	613a      	str	r2, [r7, #16]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	fa92 f2a2 	rbit	r2, r2
 8003fba:	60fa      	str	r2, [r7, #12]
  return result;
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	fab2 f282 	clz	r2, r2
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	f002 021f 	and.w	r2, r2, #31
 8003fce:	2101      	movs	r1, #1
 8003fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0b7      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fda:	4b8f      	ldr	r3, [pc, #572]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	498c      	ldr	r1, [pc, #560]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4b88      	ldr	r3, [pc, #544]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4a87      	ldr	r2, [pc, #540]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400c:	4b82      	ldr	r3, [pc, #520]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	f023 0203 	bic.w	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	497f      	ldr	r1, [pc, #508]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d008      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402a:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	4978      	ldr	r1, [pc, #480]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004038:	4313      	orrs	r3, r2
 800403a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004048:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	4970      	ldr	r1, [pc, #448]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004066:	4b6c      	ldr	r3, [pc, #432]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f023 0210 	bic.w	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4969      	ldr	r1, [pc, #420]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004074:	4313      	orrs	r3, r2
 8004076:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004084:	4b64      	ldr	r3, [pc, #400]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	4961      	ldr	r1, [pc, #388]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040a2:	4b5d      	ldr	r3, [pc, #372]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f023 0220 	bic.w	r2, r3, #32
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	495a      	ldr	r1, [pc, #360]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040c0:	4b55      	ldr	r3, [pc, #340]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	4952      	ldr	r1, [pc, #328]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040de:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	494b      	ldr	r1, [pc, #300]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040fc:	4b46      	ldr	r3, [pc, #280]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	4943      	ldr	r1, [pc, #268]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800410a:	4313      	orrs	r3, r2
 800410c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	493c      	ldr	r1, [pc, #240]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004138:	4b37      	ldr	r3, [pc, #220]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	4934      	ldr	r1, [pc, #208]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	492d      	ldr	r1, [pc, #180]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004164:	4313      	orrs	r3, r2
 8004166:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004174:	4b28      	ldr	r3, [pc, #160]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004180:	4925      	ldr	r1, [pc, #148]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004192:	4b21      	ldr	r3, [pc, #132]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	491e      	ldr	r1, [pc, #120]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	4916      	ldr	r1, [pc, #88]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	490f      	ldr	r1, [pc, #60]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00c      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800420a:	4b03      	ldr	r3, [pc, #12]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	e002      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	4913      	ldr	r1, [pc, #76]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004220:	4313      	orrs	r3, r2
 8004222:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	490b      	ldr	r1, [pc, #44]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800423e:	4313      	orrs	r3, r2
 8004240:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	4904      	ldr	r1, [pc, #16]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800425c:	4313      	orrs	r3, r2
 800425e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3748      	adds	r7, #72	; 0x48
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000

08004270 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e09d      	b.n	80043be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	d108      	bne.n	800429c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004292:	d009      	beq.n	80042a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	61da      	str	r2, [r3, #28]
 800429a:	e005      	b.n	80042a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd f9e4 	bl	8001690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e8:	d902      	bls.n	80042f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e002      	b.n	80042f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042fe:	d007      	beq.n	8004310 <HAL_SPI_Init+0xa0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004308:	d002      	beq.n	8004310 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	ea42 0103 	orr.w	r1, r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	0c1b      	lsrs	r3, r3, #16
 800436c:	f003 0204 	and.w	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800438c:	ea42 0103 	orr.w	r1, r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e049      	b.n	800446c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f841 	bl	8004474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f000 f9f7 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d001      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e04f      	b.n	8004540 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a23      	ldr	r2, [pc, #140]	; (800454c <HAL_TIM_Base_Start_IT+0xc4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d01d      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0x76>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ca:	d018      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0x76>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1f      	ldr	r2, [pc, #124]	; (8004550 <HAL_TIM_Base_Start_IT+0xc8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d013      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0x76>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1e      	ldr	r2, [pc, #120]	; (8004554 <HAL_TIM_Base_Start_IT+0xcc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0x76>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <HAL_TIM_Base_Start_IT+0xd0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0x76>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1b      	ldr	r2, [pc, #108]	; (800455c <HAL_TIM_Base_Start_IT+0xd4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_TIM_Base_Start_IT+0x76>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a19      	ldr	r2, [pc, #100]	; (8004560 <HAL_TIM_Base_Start_IT+0xd8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d115      	bne.n	800452a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <HAL_TIM_Base_Start_IT+0xdc>)
 8004506:	4013      	ands	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b06      	cmp	r3, #6
 800450e:	d015      	beq.n	800453c <HAL_TIM_Base_Start_IT+0xb4>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d011      	beq.n	800453c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004528:	e008      	b.n	800453c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f042 0201 	orr.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e000      	b.n	800453e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40012c00 	.word	0x40012c00
 8004550:	40000400 	.word	0x40000400
 8004554:	40000800 	.word	0x40000800
 8004558:	40013400 	.word	0x40013400
 800455c:	40014000 	.word	0x40014000
 8004560:	40015000 	.word	0x40015000
 8004564:	00010007 	.word	0x00010007

08004568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d122      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b02      	cmp	r3, #2
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0202 	mvn.w	r2, #2
 8004594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f905 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80045b0:	e005      	b.n	80045be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8f7 	bl	80047a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f908 	bl	80047ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d122      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d11b      	bne.n	8004618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0204 	mvn.w	r2, #4
 80045e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2202      	movs	r2, #2
 80045ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8db 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 8004604:	e005      	b.n	8004612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f8cd 	bl	80047a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 f8de 	bl	80047ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b08      	cmp	r3, #8
 8004624:	d122      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d11b      	bne.n	800466c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0208 	mvn.w	r2, #8
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2204      	movs	r2, #4
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8b1 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8a3 	bl	80047a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f8b4 	bl	80047ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b10      	cmp	r3, #16
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b10      	cmp	r3, #16
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0210 	mvn.w	r2, #16
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2208      	movs	r2, #8
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f887 	bl	80047ba <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f879 	bl	80047a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f88a 	bl	80047ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0201 	mvn.w	r2, #1
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fc ff4a 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d10e      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d107      	bne.n	8004718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f918 	bl	8004948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004726:	d10e      	bne.n	8004746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d107      	bne.n	8004746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f90b 	bl	800495c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b40      	cmp	r3, #64	; 0x40
 8004752:	d10e      	bne.n	8004772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b40      	cmp	r3, #64	; 0x40
 8004760:	d107      	bne.n	8004772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f838 	bl	80047e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b20      	cmp	r3, #32
 800477e:	d10e      	bne.n	800479e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b20      	cmp	r3, #32
 800478c:	d107      	bne.n	800479e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f06f 0220 	mvn.w	r2, #32
 8004796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f8cb 	bl	8004934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800479e:	bf00      	nop
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a42      	ldr	r2, [pc, #264]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d00f      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3f      	ldr	r2, [pc, #252]	; (8004918 <TIM_Base_SetConfig+0x120>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00b      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3e      	ldr	r2, [pc, #248]	; (800491c <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a3d      	ldr	r2, [pc, #244]	; (8004920 <TIM_Base_SetConfig+0x128>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3c      	ldr	r2, [pc, #240]	; (8004924 <TIM_Base_SetConfig+0x12c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d108      	bne.n	800484a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a31      	ldr	r2, [pc, #196]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01f      	beq.n	8004892 <TIM_Base_SetConfig+0x9a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d01b      	beq.n	8004892 <TIM_Base_SetConfig+0x9a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2e      	ldr	r2, [pc, #184]	; (8004918 <TIM_Base_SetConfig+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d017      	beq.n	8004892 <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a2d      	ldr	r2, [pc, #180]	; (800491c <TIM_Base_SetConfig+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2c      	ldr	r2, [pc, #176]	; (8004920 <TIM_Base_SetConfig+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00f      	beq.n	8004892 <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a2c      	ldr	r2, [pc, #176]	; (8004928 <TIM_Base_SetConfig+0x130>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00b      	beq.n	8004892 <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2b      	ldr	r2, [pc, #172]	; (800492c <TIM_Base_SetConfig+0x134>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <TIM_Base_SetConfig+0x138>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a25      	ldr	r2, [pc, #148]	; (8004924 <TIM_Base_SetConfig+0x12c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <TIM_Base_SetConfig+0x11c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <TIM_Base_SetConfig+0x100>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a13      	ldr	r2, [pc, #76]	; (8004920 <TIM_Base_SetConfig+0x128>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0x100>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a13      	ldr	r2, [pc, #76]	; (8004928 <TIM_Base_SetConfig+0x130>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0x100>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a12      	ldr	r2, [pc, #72]	; (800492c <TIM_Base_SetConfig+0x134>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0x100>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a11      	ldr	r2, [pc, #68]	; (8004930 <TIM_Base_SetConfig+0x138>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0x100>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <TIM_Base_SetConfig+0x12c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d103      	bne.n	8004900 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	615a      	str	r2, [r3, #20]
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40013400 	.word	0x40013400
 8004924:	40015000 	.word	0x40015000
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800

08004934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e040      	b.n	8004a04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fedc 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2224      	movs	r2, #36	; 0x24
 800499c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f8c0 	bl	8004b34 <UART_SetConfig>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e022      	b.n	8004a04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa8a 	bl	8004ee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0201 	orr.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fb11 	bl	8005024 <UART_CheckIdleState>
 8004a02:	4603      	mov	r3, r0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a20:	2b20      	cmp	r3, #32
 8004a22:	f040 8082 	bne.w	8004b2a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_UART_Transmit+0x26>
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07a      	b.n	8004b2c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Transmit+0x38>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e073      	b.n	8004b2c <HAL_UART_Transmit+0x120>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2221      	movs	r2, #33	; 0x21
 8004a58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a5a:	f7fc ffe7 	bl	8001a2c <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a78:	d108      	bne.n	8004a8c <HAL_UART_Transmit+0x80>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	e003      	b.n	8004a94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a9c:	e02d      	b.n	8004afa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2180      	movs	r1, #128	; 0x80
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 fb04 	bl	80050b6 <UART_WaitOnFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e039      	b.n	8004b2c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aca:	b292      	uxth	r2, r2
 8004acc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	e008      	b.n	8004ae8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	b292      	uxth	r2, r2
 8004ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1cb      	bne.n	8004a9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2140      	movs	r1, #64	; 0x40
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fad0 	bl	80050b6 <UART_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e005      	b.n	8004b2c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e000      	b.n	8004b2c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3720      	adds	r7, #32
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b92      	ldr	r3, [pc, #584]	; (8004da8 <UART_SetConfig+0x274>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	6979      	ldr	r1, [r7, #20]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a80      	ldr	r2, [pc, #512]	; (8004dac <UART_SetConfig+0x278>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d120      	bne.n	8004bf2 <UART_SetConfig+0xbe>
 8004bb0:	4b7f      	ldr	r3, [pc, #508]	; (8004db0 <UART_SetConfig+0x27c>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d817      	bhi.n	8004bec <UART_SetConfig+0xb8>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x90>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004be1 	.word	0x08004be1
 8004bcc:	08004be7 	.word	0x08004be7
 8004bd0:	08004bdb 	.word	0x08004bdb
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e0b5      	b.n	8004d46 <UART_SetConfig+0x212>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e0b2      	b.n	8004d46 <UART_SetConfig+0x212>
 8004be0:	2304      	movs	r3, #4
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e0af      	b.n	8004d46 <UART_SetConfig+0x212>
 8004be6:	2308      	movs	r3, #8
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e0ac      	b.n	8004d46 <UART_SetConfig+0x212>
 8004bec:	2310      	movs	r3, #16
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e0a9      	b.n	8004d46 <UART_SetConfig+0x212>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a6f      	ldr	r2, [pc, #444]	; (8004db4 <UART_SetConfig+0x280>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d124      	bne.n	8004c46 <UART_SetConfig+0x112>
 8004bfc:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <UART_SetConfig+0x27c>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c08:	d011      	beq.n	8004c2e <UART_SetConfig+0xfa>
 8004c0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c0e:	d817      	bhi.n	8004c40 <UART_SetConfig+0x10c>
 8004c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c14:	d011      	beq.n	8004c3a <UART_SetConfig+0x106>
 8004c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1a:	d811      	bhi.n	8004c40 <UART_SetConfig+0x10c>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <UART_SetConfig+0xf4>
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c24:	d006      	beq.n	8004c34 <UART_SetConfig+0x100>
 8004c26:	e00b      	b.n	8004c40 <UART_SetConfig+0x10c>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e08b      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e088      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c34:	2304      	movs	r3, #4
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e085      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e082      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c40:	2310      	movs	r3, #16
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e07f      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a5b      	ldr	r2, [pc, #364]	; (8004db8 <UART_SetConfig+0x284>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d124      	bne.n	8004c9a <UART_SetConfig+0x166>
 8004c50:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <UART_SetConfig+0x27c>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c5c:	d011      	beq.n	8004c82 <UART_SetConfig+0x14e>
 8004c5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c62:	d817      	bhi.n	8004c94 <UART_SetConfig+0x160>
 8004c64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c68:	d011      	beq.n	8004c8e <UART_SetConfig+0x15a>
 8004c6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c6e:	d811      	bhi.n	8004c94 <UART_SetConfig+0x160>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <UART_SetConfig+0x148>
 8004c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c78:	d006      	beq.n	8004c88 <UART_SetConfig+0x154>
 8004c7a:	e00b      	b.n	8004c94 <UART_SetConfig+0x160>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e061      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c82:	2302      	movs	r3, #2
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e05e      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e05b      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e058      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c94:	2310      	movs	r3, #16
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e055      	b.n	8004d46 <UART_SetConfig+0x212>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a47      	ldr	r2, [pc, #284]	; (8004dbc <UART_SetConfig+0x288>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d124      	bne.n	8004cee <UART_SetConfig+0x1ba>
 8004ca4:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <UART_SetConfig+0x27c>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004cac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cb0:	d011      	beq.n	8004cd6 <UART_SetConfig+0x1a2>
 8004cb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cb6:	d817      	bhi.n	8004ce8 <UART_SetConfig+0x1b4>
 8004cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cbc:	d011      	beq.n	8004ce2 <UART_SetConfig+0x1ae>
 8004cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc2:	d811      	bhi.n	8004ce8 <UART_SetConfig+0x1b4>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <UART_SetConfig+0x19c>
 8004cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ccc:	d006      	beq.n	8004cdc <UART_SetConfig+0x1a8>
 8004cce:	e00b      	b.n	8004ce8 <UART_SetConfig+0x1b4>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e037      	b.n	8004d46 <UART_SetConfig+0x212>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e034      	b.n	8004d46 <UART_SetConfig+0x212>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e031      	b.n	8004d46 <UART_SetConfig+0x212>
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	77fb      	strb	r3, [r7, #31]
 8004ce6:	e02e      	b.n	8004d46 <UART_SetConfig+0x212>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e02b      	b.n	8004d46 <UART_SetConfig+0x212>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a33      	ldr	r2, [pc, #204]	; (8004dc0 <UART_SetConfig+0x28c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d124      	bne.n	8004d42 <UART_SetConfig+0x20e>
 8004cf8:	4b2d      	ldr	r3, [pc, #180]	; (8004db0 <UART_SetConfig+0x27c>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004d00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d04:	d011      	beq.n	8004d2a <UART_SetConfig+0x1f6>
 8004d06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d0a:	d817      	bhi.n	8004d3c <UART_SetConfig+0x208>
 8004d0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d10:	d011      	beq.n	8004d36 <UART_SetConfig+0x202>
 8004d12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d16:	d811      	bhi.n	8004d3c <UART_SetConfig+0x208>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <UART_SetConfig+0x1f0>
 8004d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d20:	d006      	beq.n	8004d30 <UART_SetConfig+0x1fc>
 8004d22:	e00b      	b.n	8004d3c <UART_SetConfig+0x208>
 8004d24:	2300      	movs	r3, #0
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e00d      	b.n	8004d46 <UART_SetConfig+0x212>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e00a      	b.n	8004d46 <UART_SetConfig+0x212>
 8004d30:	2304      	movs	r3, #4
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e007      	b.n	8004d46 <UART_SetConfig+0x212>
 8004d36:	2308      	movs	r3, #8
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e004      	b.n	8004d46 <UART_SetConfig+0x212>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e001      	b.n	8004d46 <UART_SetConfig+0x212>
 8004d42:	2310      	movs	r3, #16
 8004d44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4e:	d16c      	bne.n	8004e2a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8004d50:	7ffb      	ldrb	r3, [r7, #31]
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d838      	bhi.n	8004dc8 <UART_SetConfig+0x294>
 8004d56:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0x228>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004d89 	.word	0x08004d89
 8004d64:	08004d91 	.word	0x08004d91
 8004d68:	08004dc9 	.word	0x08004dc9
 8004d6c:	08004d97 	.word	0x08004d97
 8004d70:	08004dc9 	.word	0x08004dc9
 8004d74:	08004dc9 	.word	0x08004dc9
 8004d78:	08004dc9 	.word	0x08004dc9
 8004d7c:	08004d9f 	.word	0x08004d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fe ffe2 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8004d84:	61b8      	str	r0, [r7, #24]
        break;
 8004d86:	e024      	b.n	8004dd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7ff f800 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 8004d8c:	61b8      	str	r0, [r7, #24]
        break;
 8004d8e:	e020      	b.n	8004dd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d90:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <UART_SetConfig+0x290>)
 8004d92:	61bb      	str	r3, [r7, #24]
        break;
 8004d94:	e01d      	b.n	8004dd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d96:	f7fe ff61 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8004d9a:	61b8      	str	r0, [r7, #24]
        break;
 8004d9c:	e019      	b.n	8004dd2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da2:	61bb      	str	r3, [r7, #24]
        break;
 8004da4:	e015      	b.n	8004dd2 <UART_SetConfig+0x29e>
 8004da6:	bf00      	nop
 8004da8:	efff69f3 	.word	0xefff69f3
 8004dac:	40013800 	.word	0x40013800
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40004400 	.word	0x40004400
 8004db8:	40004800 	.word	0x40004800
 8004dbc:	40004c00 	.word	0x40004c00
 8004dc0:	40005000 	.word	0x40005000
 8004dc4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	77bb      	strb	r3, [r7, #30]
        break;
 8004dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d075      	beq.n	8004ec4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	005a      	lsls	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b0f      	cmp	r3, #15
 8004df4:	d916      	bls.n	8004e24 <UART_SetConfig+0x2f0>
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfc:	d212      	bcs.n	8004e24 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f023 030f 	bic.w	r3, r3, #15
 8004e06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	89fa      	ldrh	r2, [r7, #14]
 8004e20:	60da      	str	r2, [r3, #12]
 8004e22:	e04f      	b.n	8004ec4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	77bb      	strb	r3, [r7, #30]
 8004e28:	e04c      	b.n	8004ec4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e2a:	7ffb      	ldrb	r3, [r7, #31]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d828      	bhi.n	8004e82 <UART_SetConfig+0x34e>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x304>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fe ff74 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8004e60:	61b8      	str	r0, [r7, #24]
        break;
 8004e62:	e013      	b.n	8004e8c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fe ff92 	bl	8003d8c <HAL_RCC_GetPCLK2Freq>
 8004e68:	61b8      	str	r0, [r7, #24]
        break;
 8004e6a:	e00f      	b.n	8004e8c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <UART_SetConfig+0x3a8>)
 8004e6e:	61bb      	str	r3, [r7, #24]
        break;
 8004e70:	e00c      	b.n	8004e8c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fe fef3 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8004e76:	61b8      	str	r0, [r7, #24]
        break;
 8004e78:	e008      	b.n	8004e8c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7e:	61bb      	str	r3, [r7, #24]
        break;
 8004e80:	e004      	b.n	8004e8c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	77bb      	strb	r3, [r7, #30]
        break;
 8004e8a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d018      	beq.n	8004ec4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	085a      	lsrs	r2, r3, #1
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	441a      	add	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d908      	bls.n	8004ec0 <UART_SetConfig+0x38c>
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb4:	d204      	bcs.n	8004ec0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	e001      	b.n	8004ec4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ed0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	007a1200 	.word	0x007a1200

08004ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01a      	beq.n	8004ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fde:	d10a      	bne.n	8004ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
  }
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af02      	add	r7, sp, #8
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005034:	f7fc fcfa 	bl	8001a2c <HAL_GetTick>
 8005038:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b08      	cmp	r3, #8
 8005046:	d10e      	bne.n	8005066 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f82d 	bl	80050b6 <UART_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e023      	b.n	80050ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d10e      	bne.n	8005092 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f817 	bl	80050b6 <UART_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e00d      	b.n	80050ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b09c      	sub	sp, #112	; 0x70
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c6:	e0a5      	b.n	8005214 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	f000 80a1 	beq.w	8005214 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d2:	f7fc fcab 	bl	8001a2c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050de:	429a      	cmp	r2, r3
 80050e0:	d302      	bcc.n	80050e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80050e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d13e      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050fc:	667b      	str	r3, [r7, #100]	; 0x64
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005108:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800510c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e6      	bne.n	80050e8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3308      	adds	r3, #8
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	663b      	str	r3, [r7, #96]	; 0x60
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800513a:	64ba      	str	r2, [r7, #72]	; 0x48
 800513c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e5      	bne.n	800511a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e067      	b.n	8005236 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d04f      	beq.n	8005214 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d147      	bne.n	8005214 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800518c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
 80051ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e6      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	613b      	str	r3, [r7, #16]
   return(result);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3308      	adds	r3, #8
 80051de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051e0:	623a      	str	r2, [r7, #32]
 80051e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	69f9      	ldr	r1, [r7, #28]
 80051e6:	6a3a      	ldr	r2, [r7, #32]
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2220      	movs	r2, #32
 80051f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2220      	movs	r2, #32
 8005204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e010      	b.n	8005236 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69da      	ldr	r2, [r3, #28]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4013      	ands	r3, r2
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	429a      	cmp	r2, r3
 8005222:	bf0c      	ite	eq
 8005224:	2301      	moveq	r3, #1
 8005226:	2300      	movne	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	429a      	cmp	r2, r3
 8005230:	f43f af4a 	beq.w	80050c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3770      	adds	r7, #112	; 0x70
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005244:	4904      	ldr	r1, [pc, #16]	; (8005258 <MX_FATFS_Init+0x18>)
 8005246:	4805      	ldr	r0, [pc, #20]	; (800525c <MX_FATFS_Init+0x1c>)
 8005248:	f004 fb52 	bl	80098f0 <FATFS_LinkDriver>
 800524c:	4603      	mov	r3, r0
 800524e:	461a      	mov	r2, r3
 8005250:	4b03      	ldr	r3, [pc, #12]	; (8005260 <MX_FATFS_Init+0x20>)
 8005252:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005254:	bf00      	nop
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000498 	.word	0x20000498
 800525c:	20000014 	.word	0x20000014
 8005260:	20000494 	.word	0x20000494

08005264 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005268:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <USER_initialize+0x24>)
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <USER_initialize+0x24>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000011 	.word	0x20000011

0800529c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80052a6:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <USER_status+0x24>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
    return Stat;
 80052ac:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <USER_status+0x24>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000011 	.word	0x20000011

080052c4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4603      	mov	r3, r0
 80052d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80052d4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80052f2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	603a      	str	r2, [r7, #0]
 800530a:	71fb      	strb	r3, [r7, #7]
 800530c:	460b      	mov	r3, r1
 800530e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
    return res;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	4a08      	ldr	r2, [pc, #32]	; (8005354 <disk_status+0x30>)
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	79fa      	ldrb	r2, [r7, #7]
 800533c:	4905      	ldr	r1, [pc, #20]	; (8005354 <disk_status+0x30>)
 800533e:	440a      	add	r2, r1
 8005340:	7a12      	ldrb	r2, [r2, #8]
 8005342:	4610      	mov	r0, r2
 8005344:	4798      	blx	r3
 8005346:	4603      	mov	r3, r0
 8005348:	73fb      	strb	r3, [r7, #15]
  return stat;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	200004bc 	.word	0x200004bc

08005358 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <disk_initialize+0x48>)
 800536a:	5cd3      	ldrb	r3, [r2, r3]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d111      	bne.n	8005394 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	4a0b      	ldr	r2, [pc, #44]	; (80053a0 <disk_initialize+0x48>)
 8005374:	2101      	movs	r1, #1
 8005376:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <disk_initialize+0x48>)
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	79fa      	ldrb	r2, [r7, #7]
 8005386:	4906      	ldr	r1, [pc, #24]	; (80053a0 <disk_initialize+0x48>)
 8005388:	440a      	add	r2, r1
 800538a:	7a12      	ldrb	r2, [r2, #8]
 800538c:	4610      	mov	r0, r2
 800538e:	4798      	blx	r3
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200004bc 	.word	0x200004bc

080053a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4603      	mov	r3, r0
 80053b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <disk_read+0x3c>)
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	689c      	ldr	r4, [r3, #8]
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	4a07      	ldr	r2, [pc, #28]	; (80053e0 <disk_read+0x3c>)
 80053c4:	4413      	add	r3, r2
 80053c6:	7a18      	ldrb	r0, [r3, #8]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	47a0      	blx	r4
 80053d0:	4603      	mov	r3, r0
 80053d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd90      	pop	{r4, r7, pc}
 80053de:	bf00      	nop
 80053e0:	200004bc 	.word	0x200004bc

080053e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	4a0a      	ldr	r2, [pc, #40]	; (8005420 <disk_write+0x3c>)
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68dc      	ldr	r4, [r3, #12]
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	4a07      	ldr	r2, [pc, #28]	; (8005420 <disk_write+0x3c>)
 8005404:	4413      	add	r3, r2
 8005406:	7a18      	ldrb	r0, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	47a0      	blx	r4
 8005410:	4603      	mov	r3, r0
 8005412:	75fb      	strb	r3, [r7, #23]
  return res;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
}
 8005416:	4618      	mov	r0, r3
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	bd90      	pop	{r4, r7, pc}
 800541e:	bf00      	nop
 8005420:	200004bc 	.word	0x200004bc

08005424 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	603a      	str	r2, [r7, #0]
 800542e:	71fb      	strb	r3, [r7, #7]
 8005430:	460b      	mov	r3, r1
 8005432:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <disk_ioctl+0x38>)
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	79fa      	ldrb	r2, [r7, #7]
 8005442:	4906      	ldr	r1, [pc, #24]	; (800545c <disk_ioctl+0x38>)
 8005444:	440a      	add	r2, r1
 8005446:	7a10      	ldrb	r0, [r2, #8]
 8005448:	79b9      	ldrb	r1, [r7, #6]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	4798      	blx	r3
 800544e:	4603      	mov	r3, r0
 8005450:	73fb      	strb	r3, [r7, #15]
  return res;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200004bc 	.word	0x200004bc

08005460 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005474:	e007      	b.n	8005486 <mem_cpy+0x26>
		*d++ = *s++;
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	1c53      	adds	r3, r2, #1
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	1c59      	adds	r1, r3, #1
 8005480:	6179      	str	r1, [r7, #20]
 8005482:	7812      	ldrb	r2, [r2, #0]
 8005484:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	1e5a      	subs	r2, r3, #1
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1f2      	bne.n	8005476 <mem_cpy+0x16>
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800549e:	b480      	push	{r7}
 80054a0:	b087      	sub	sp, #28
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80054ae:	e005      	b.n	80054bc <mem_set+0x1e>
		*d++ = (BYTE)val;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	617a      	str	r2, [r7, #20]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1e5a      	subs	r2, r3, #1
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f4      	bne.n	80054b0 <mem_set+0x12>
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	; 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80054ec:	bf00      	nop
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	1e5a      	subs	r2, r3, #1
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00d      	beq.n	8005514 <mem_cmp+0x40>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	61fa      	str	r2, [r7, #28]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	61ba      	str	r2, [r7, #24]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	1acb      	subs	r3, r1, r3
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ec      	beq.n	80054ee <mem_cmp+0x1a>
	return r;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3724      	adds	r7, #36	; 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800552c:	e002      	b.n	8005534 <chk_chr+0x12>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3301      	adds	r3, #1
 8005532:	607b      	str	r3, [r7, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <chk_chr+0x26>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	4293      	cmp	r3, r2
 8005546:	d1f2      	bne.n	800552e <chk_chr+0xc>
	return *str;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	781b      	ldrb	r3, [r3, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4618      	mov	r0, r3
 800556a:	f004 fa67 	bl	8009a3c <ff_req_grant>
 800556e:	4603      	mov	r3, r0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d012      	beq.n	80055b0 <unlock_fs+0x38>
 800558a:	78fb      	ldrb	r3, [r7, #3]
 800558c:	2b0c      	cmp	r3, #12
 800558e:	d00f      	beq.n	80055b0 <unlock_fs+0x38>
		res != FR_NOT_ENABLED &&
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b0b      	cmp	r3, #11
 8005594:	d00c      	beq.n	80055b0 <unlock_fs+0x38>
		res != FR_INVALID_DRIVE &&
 8005596:	78fb      	ldrb	r3, [r7, #3]
 8005598:	2b09      	cmp	r3, #9
 800559a:	d009      	beq.n	80055b0 <unlock_fs+0x38>
		res != FR_INVALID_OBJECT &&
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	d006      	beq.n	80055b0 <unlock_fs+0x38>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f004 fa5b 	bl	8009a66 <ff_rel_grant>
	}
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e03b      	b.n	8005644 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80055cc:	4931      	ldr	r1, [pc, #196]	; (8005694 <chk_lock+0xdc>)
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4613      	mov	r3, r2
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02c      	beq.n	800563a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80055e0:	492c      	ldr	r1, [pc, #176]	; (8005694 <chk_lock+0xdc>)
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4613      	mov	r3, r2
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	4413      	add	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d120      	bne.n	800563e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 80055fc:	4925      	ldr	r1, [pc, #148]	; (8005694 <chk_lock+0xdc>)
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4613      	mov	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	3304      	adds	r3, #4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005614:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005616:	429a      	cmp	r2, r3
 8005618:	d111      	bne.n	800563e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800561a:	491e      	ldr	r1, [pc, #120]	; (8005694 <chk_lock+0xdc>)
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4613      	mov	r3, r2
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	3308      	adds	r3, #8
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005632:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8005634:	429a      	cmp	r2, r3
 8005636:	d102      	bne.n	800563e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8005638:	e007      	b.n	800564a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3301      	adds	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d9c0      	bls.n	80055cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d109      	bne.n	8005664 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <chk_lock+0xa4>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d101      	bne.n	8005660 <chk_lock+0xa8>
 800565c:	2300      	movs	r3, #0
 800565e:	e013      	b.n	8005688 <chk_lock+0xd0>
 8005660:	2312      	movs	r3, #18
 8005662:	e011      	b.n	8005688 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <chk_lock+0xca>
 800566a:	490a      	ldr	r1, [pc, #40]	; (8005694 <chk_lock+0xdc>)
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4613      	mov	r3, r2
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	330a      	adds	r3, #10
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d101      	bne.n	8005686 <chk_lock+0xce>
 8005682:	2310      	movs	r3, #16
 8005684:	e000      	b.n	8005688 <chk_lock+0xd0>
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	200004a4 	.word	0x200004a4

08005698 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
 80056a2:	e002      	b.n	80056aa <enq_lock+0x12>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3301      	adds	r3, #1
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d809      	bhi.n	80056c4 <enq_lock+0x2c>
 80056b0:	490a      	ldr	r1, [pc, #40]	; (80056dc <enq_lock+0x44>)
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1ef      	bne.n	80056a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	bf14      	ite	ne
 80056ca:	2301      	movne	r3, #1
 80056cc:	2300      	moveq	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	200004a4 	.word	0x200004a4

080056e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80056ea:	2300      	movs	r3, #0
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	e02e      	b.n	800574e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 80056f0:	4959      	ldr	r1, [pc, #356]	; (8005858 <inc_lock+0x178>)
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4613      	mov	r3, r2
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d11d      	bne.n	8005748 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 800570c:	4952      	ldr	r1, [pc, #328]	; (8005858 <inc_lock+0x178>)
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4613      	mov	r3, r2
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3304      	adds	r3, #4
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005724:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8005726:	429a      	cmp	r2, r3
 8005728:	d10e      	bne.n	8005748 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800572a:	494b      	ldr	r1, [pc, #300]	; (8005858 <inc_lock+0x178>)
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4613      	mov	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	3308      	adds	r3, #8
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005742:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8005744:	429a      	cmp	r2, r3
 8005746:	d006      	beq.n	8005756 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d9cd      	bls.n	80056f0 <inc_lock+0x10>
 8005754:	e000      	b.n	8005758 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8005756:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d148      	bne.n	80057f0 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e002      	b.n	800576a <inc_lock+0x8a>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d809      	bhi.n	8005784 <inc_lock+0xa4>
 8005770:	4939      	ldr	r1, [pc, #228]	; (8005858 <inc_lock+0x178>)
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4613      	mov	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1ef      	bne.n	8005764 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d101      	bne.n	800578e <inc_lock+0xae>
 800578a:	2300      	movs	r3, #0
 800578c:	e05d      	b.n	800584a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005794:	6819      	ldr	r1, [r3, #0]
 8005796:	4830      	ldr	r0, [pc, #192]	; (8005858 <inc_lock+0x178>)
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4613      	mov	r3, r2
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4403      	add	r3, r0
 80057a4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ac:	6899      	ldr	r1, [r3, #8]
 80057ae:	482a      	ldr	r0, [pc, #168]	; (8005858 <inc_lock+0x178>)
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4613      	mov	r3, r2
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4403      	add	r3, r0
 80057bc:	3304      	adds	r3, #4
 80057be:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c6:	88d8      	ldrh	r0, [r3, #6]
 80057c8:	4923      	ldr	r1, [pc, #140]	; (8005858 <inc_lock+0x178>)
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	3308      	adds	r3, #8
 80057d8:	4602      	mov	r2, r0
 80057da:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80057dc:	491e      	ldr	r1, [pc, #120]	; (8005858 <inc_lock+0x178>)
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	330a      	adds	r3, #10
 80057ec:	2200      	movs	r2, #0
 80057ee:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <inc_lock+0x130>
 80057f6:	4918      	ldr	r1, [pc, #96]	; (8005858 <inc_lock+0x178>)
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4613      	mov	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	330a      	adds	r3, #10
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <inc_lock+0x130>
 800580c:	2300      	movs	r3, #0
 800580e:	e01c      	b.n	800584a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <inc_lock+0x14e>
 8005816:	4910      	ldr	r1, [pc, #64]	; (8005858 <inc_lock+0x178>)
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	330a      	adds	r3, #10
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	3301      	adds	r3, #1
 800582a:	b299      	uxth	r1, r3
 800582c:	e001      	b.n	8005832 <inc_lock+0x152>
 800582e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005832:	4809      	ldr	r0, [pc, #36]	; (8005858 <inc_lock+0x178>)
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4403      	add	r3, r0
 8005840:	330a      	adds	r3, #10
 8005842:	460a      	mov	r2, r1
 8005844:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	200004a4 	.word	0x200004a4

0800585c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3b01      	subs	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d82e      	bhi.n	80058ce <dec_lock+0x72>
		n = Files[i].ctr;
 8005870:	491b      	ldr	r1, [pc, #108]	; (80058e0 <dec_lock+0x84>)
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	330a      	adds	r3, #10
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005884:	89fb      	ldrh	r3, [r7, #14]
 8005886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588a:	d101      	bne.n	8005890 <dec_lock+0x34>
 800588c:	2300      	movs	r3, #0
 800588e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005890:	89fb      	ldrh	r3, [r7, #14]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <dec_lock+0x40>
 8005896:	89fb      	ldrh	r3, [r7, #14]
 8005898:	3b01      	subs	r3, #1
 800589a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800589c:	4910      	ldr	r1, [pc, #64]	; (80058e0 <dec_lock+0x84>)
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	330a      	adds	r3, #10
 80058ac:	89fa      	ldrh	r2, [r7, #14]
 80058ae:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80058b0:	89fb      	ldrh	r3, [r7, #14]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d108      	bne.n	80058c8 <dec_lock+0x6c>
 80058b6:	490a      	ldr	r1, [pc, #40]	; (80058e0 <dec_lock+0x84>)
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	737b      	strb	r3, [r7, #13]
 80058cc:	e001      	b.n	80058d2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80058ce:	2302      	movs	r3, #2
 80058d0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80058d2:	7b7b      	ldrb	r3, [r7, #13]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	200004a4 	.word	0x200004a4

080058e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e016      	b.n	8005920 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80058f2:	4910      	ldr	r1, [pc, #64]	; (8005934 <clear_lock+0x50>)
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d108      	bne.n	800591a <clear_lock+0x36>
 8005908:	490a      	ldr	r1, [pc, #40]	; (8005934 <clear_lock+0x50>)
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3301      	adds	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d9e5      	bls.n	80058f2 <clear_lock+0xe>
	}
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	200004a4 	.word	0x200004a4

08005938 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800594a:	791b      	ldrb	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d040      	beq.n	80059d2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005960:	7858      	ldrb	r0, [r3, #1]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	2301      	movs	r3, #1
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	f7ff fd3c 	bl	80053e4 <disk_write>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <sync_window+0x40>
			res = FR_DISK_ERR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	e02c      	b.n	80059d2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	2200      	movs	r2, #0
 8005980:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	1ad2      	subs	r2, r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	429a      	cmp	r2, r3
 8005998:	d21b      	bcs.n	80059d2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a0:	78db      	ldrb	r3, [r3, #3]
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	e012      	b.n	80059cc <sync_window+0x94>
					wsect += fs->fsize;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4413      	add	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ba:	7858      	ldrb	r0, [r3, #1]
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	2301      	movs	r3, #1
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	f7ff fd0f 	bl	80053e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d8e9      	bhi.n	80059a6 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d01e      	beq.n	8005a36 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7ff ff9d 	bl	8005938 <sync_window>
 80059fe:	4603      	mov	r3, r0
 8005a00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d116      	bne.n	8005a36 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0e:	7858      	ldrb	r0, [r3, #1]
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	2301      	movs	r3, #1
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	f7ff fcc5 	bl	80053a4 <disk_read>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005a20:	f04f 33ff 	mov.w	r3, #4294967295
 8005a24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a30:	461a      	mov	r2, r3
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}
	return res;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff ff75 	bl	8005938 <sync_window>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f040 80ad 	bne.w	8005bb4 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	f040 8098 	bne.w	8005b98 <sync_fs+0x158>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6e:	795b      	ldrb	r3, [r3, #5]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 8091 	bne.w	8005b98 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7e:	895b      	ldrh	r3, [r3, #10]
 8005a80:	461a      	mov	r2, r3
 8005a82:	2100      	movs	r1, #0
 8005a84:	f7ff fd0b 	bl	800549e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2255      	movs	r2, #85	; 0x55
 8005a8c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	22aa      	movs	r2, #170	; 0xaa
 8005a94:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2252      	movs	r2, #82	; 0x52
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2252      	movs	r2, #82	; 0x52
 8005aa2:	705a      	strb	r2, [r3, #1]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2261      	movs	r2, #97	; 0x61
 8005aa8:	709a      	strb	r2, [r3, #2]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2241      	movs	r2, #65	; 0x41
 8005aae:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2272      	movs	r2, #114	; 0x72
 8005ab4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2272      	movs	r2, #114	; 0x72
 8005abc:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2241      	movs	r2, #65	; 0x41
 8005ac4:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2261      	movs	r2, #97	; 0x61
 8005acc:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	0c1b      	lsrs	r3, r3, #16
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	0e1b      	lsrs	r3, r3, #24
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	0e1b      	lsrs	r3, r3, #24
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b74:	6313      	str	r3, [r2, #48]	; 0x30
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7c:	7858      	ldrb	r0, [r3, #1]
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f7ff fc2b 	bl	80053e4 <disk_write>
			fs->fsi_flag = 0;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b94:	2200      	movs	r2, #0
 8005b96:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fc3d 	bl	8005424 <disk_ioctl>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	3b02      	subs	r3, #2
 8005bcc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	3b02      	subs	r3, #2
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d301      	bcc.n	8005be2 <clust2sect+0x24>
 8005bde:	2300      	movs	r3, #0
 8005be0:	e00c      	b.n	8005bfc <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be8:	789b      	ldrb	r3, [r3, #2]
 8005bea:	461a      	mov	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	fb03 f202 	mul.w	r2, r3, r2
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	4413      	add	r3, r2
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d906      	bls.n	8005c26 <get_fat+0x1e>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d302      	bcc.n	8005c2c <get_fat+0x24>
		val = 1;	/* Internal error */
 8005c26:	2301      	movs	r3, #1
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e0e4      	b.n	8005df6 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	f000 8098 	beq.w	8005d70 <get_fat+0x168>
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	f300 80ce 	bgt.w	8005de2 <get_fat+0x1da>
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d002      	beq.n	8005c50 <get_fat+0x48>
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d05f      	beq.n	8005d0e <get_fat+0x106>
 8005c4e:	e0c8      	b.n	8005de2 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6c:	895b      	ldrh	r3, [r3, #10]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c76:	4413      	add	r3, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff feae 	bl	80059dc <move_window>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 80b0 	bne.w	8005de8 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	60fa      	str	r2, [r7, #12]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c94:	8952      	ldrh	r2, [r2, #10]
 8005c96:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c9a:	fb01 f202 	mul.w	r2, r1, r2
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	5cd3      	ldrb	r3, [r2, r3]
 8005ca4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb4:	895b      	ldrh	r3, [r3, #10]
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cbe:	4413      	add	r3, r2
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff fe8a 	bl	80059dc <move_window>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 808e 	bne.w	8005dec <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd6:	895b      	ldrh	r3, [r3, #10]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ce0:	fb01 f202 	mul.w	r2, r1, r2
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	5cd3      	ldrb	r3, [r2, r3]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <get_fat+0xfc>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	e002      	b.n	8005d0a <get_fat+0x102>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0a:	617b      	str	r3, [r7, #20]
			break;
 8005d0c:	e073      	b.n	8005df6 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1c:	895b      	ldrh	r3, [r3, #10]
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4619      	mov	r1, r3
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d2a:	4413      	add	r3, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff fe54 	bl	80059dc <move_window>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d15a      	bne.n	8005df0 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d44:	8952      	ldrh	r2, [r2, #10]
 8005d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d4a:	fb01 f202 	mul.w	r2, r1, r2
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	b21a      	sxth	r2, r3
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b21b      	sxth	r3, r3
 8005d66:	4313      	orrs	r3, r2
 8005d68:	b21b      	sxth	r3, r3
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	617b      	str	r3, [r7, #20]
			break;
 8005d6e:	e042      	b.n	8005df6 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7e:	895b      	ldrh	r3, [r3, #10]
 8005d80:	089b      	lsrs	r3, r3, #2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	4619      	mov	r1, r3
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fe23 	bl	80059dc <move_window>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d12b      	bne.n	8005df4 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005da6:	8952      	ldrh	r2, [r2, #10]
 8005da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dac:	fb01 f202 	mul.w	r2, r1, r2
 8005db0:	1a9b      	subs	r3, r3, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	4413      	add	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3303      	adds	r3, #3
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	061a      	lsls	r2, r3, #24
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	041b      	lsls	r3, r3, #16
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	3201      	adds	r2, #1
 8005dce:	7812      	ldrb	r2, [r2, #0]
 8005dd0:	0212      	lsls	r2, r2, #8
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	7812      	ldrb	r2, [r2, #0]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005dde:	617b      	str	r3, [r7, #20]
			break;
 8005de0:	e009      	b.n	8005df6 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8005de2:	2301      	movs	r3, #1
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e006      	b.n	8005df6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005de8:	bf00      	nop
 8005dea:	e004      	b.n	8005df6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dec:	bf00      	nop
 8005dee:	e002      	b.n	8005df6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005df0:	bf00      	nop
 8005df2:	e000      	b.n	8005df6 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005df4:	bf00      	nop
		}
	}

	return val;
 8005df6:	697b      	ldr	r3, [r7, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d906      	bls.n	8005e20 <put_fat+0x20>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d302      	bcc.n	8005e26 <put_fat+0x26>
		res = FR_INT_ERR;
 8005e20:	2302      	movs	r3, #2
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e13a      	b.n	800609c <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	f000 80d0 	beq.w	8005fd4 <put_fat+0x1d4>
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	f300 8127 	bgt.w	8006088 <put_fat+0x288>
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d003      	beq.n	8005e46 <put_fat+0x46>
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	f000 808f 	beq.w	8005f62 <put_fat+0x162>
 8005e44:	e120      	b.n	8006088 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e62:	895b      	ldrh	r3, [r3, #10]
 8005e64:	4619      	mov	r1, r3
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	4619      	mov	r1, r3
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7ff fdb3 	bl	80059dc <move_window>
 8005e76:	4603      	mov	r3, r0
 8005e78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e7a:	7ffb      	ldrb	r3, [r7, #31]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f040 8106 	bne.w	800608e <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	617a      	str	r2, [r7, #20]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e8e:	8952      	ldrh	r2, [r2, #10]
 8005e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e94:	fb01 f202 	mul.w	r2, r1, r2
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <put_fat+0xc6>
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	b25b      	sxtb	r3, r3
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	b25a      	sxtb	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	b25b      	sxtb	r3, r3
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	b25b      	sxtb	r3, r3
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e001      	b.n	8005eca <put_fat+0xca>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ee6:	895b      	ldrh	r3, [r3, #10]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ef0:	4413      	add	r3, r2
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff fd71 	bl	80059dc <move_window>
 8005efa:	4603      	mov	r3, r0
 8005efc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005efe:	7ffb      	ldrb	r3, [r7, #31]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 80c6 	bne.w	8006092 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0c:	895b      	ldrh	r3, [r3, #10]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f16:	fb01 f202 	mul.w	r2, r1, r2
 8005f1a:	1a9b      	subs	r3, r3, r2
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <put_fat+0x134>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	091b      	lsrs	r3, r3, #4
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	e00e      	b.n	8005f52 <put_fat+0x152>
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	b25b      	sxtb	r3, r3
 8005f3a:	f023 030f 	bic.w	r3, r3, #15
 8005f3e:	b25a      	sxtb	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	b25b      	sxtb	r3, r3
 8005f46:	f003 030f 	and.w	r3, r3, #15
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	b25b      	sxtb	r3, r3
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	711a      	strb	r2, [r3, #4]
			break;
 8005f60:	e09c      	b.n	800609c <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f70:	895b      	ldrh	r3, [r3, #10]
 8005f72:	085b      	lsrs	r3, r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	4619      	mov	r1, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f7e:	4413      	add	r3, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fd2a 	bl	80059dc <move_window>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f8c:	7ffb      	ldrb	r3, [r7, #31]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f040 8081 	bne.w	8006096 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005f9e:	8952      	ldrh	r2, [r2, #10]
 8005fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fa4:	fb01 f202 	mul.w	r2, r1, r2
 8005fa8:	1a9b      	subs	r3, r3, r2
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fce:	2201      	movs	r2, #1
 8005fd0:	711a      	strb	r2, [r3, #4]
			break;
 8005fd2:	e063      	b.n	800609c <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe2:	895b      	ldrh	r3, [r3, #10]
 8005fe4:	089b      	lsrs	r3, r3, #2
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	4619      	mov	r1, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ff0:	4413      	add	r3, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff fcf1 	bl	80059dc <move_window>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ffe:	7ffb      	ldrb	r3, [r7, #31]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d14a      	bne.n	800609a <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800600e:	8952      	ldrh	r2, [r2, #10]
 8006010:	fbb3 f1f2 	udiv	r1, r3, r2
 8006014:	fb01 f202 	mul.w	r2, r1, r2
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3303      	adds	r3, #3
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	061a      	lsls	r2, r3, #24
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	3302      	adds	r3, #2
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	4313      	orrs	r3, r2
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	3201      	adds	r2, #1
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	0212      	lsls	r2, r2, #8
 800603a:	4313      	orrs	r3, r2
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	4313      	orrs	r3, r2
 8006042:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4313      	orrs	r3, r2
 800604a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	b29b      	uxth	r3, r3
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	b29a      	uxth	r2, r3
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	3301      	adds	r3, #1
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	0c1a      	lsrs	r2, r3, #16
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	3302      	adds	r3, #2
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	0e1a      	lsrs	r2, r3, #24
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	3303      	adds	r3, #3
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006082:	2201      	movs	r2, #1
 8006084:	711a      	strb	r2, [r3, #4]
			break;
 8006086:	e009      	b.n	800609c <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8006088:	2302      	movs	r3, #2
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e006      	b.n	800609c <put_fat+0x29c>
			if (res != FR_OK) break;
 800608e:	bf00      	nop
 8006090:	e004      	b.n	800609c <put_fat+0x29c>
			if (res != FR_OK) break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <put_fat+0x29c>
			if (res != FR_OK) break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <put_fat+0x29c>
			if (res != FR_OK) break;
 800609a:	bf00      	nop
		}
	}

	return res;
 800609c:	7ffb      	ldrb	r3, [r7, #31]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d906      	bls.n	80060c4 <remove_chain+0x1e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d302      	bcc.n	80060ca <remove_chain+0x24>
		res = FR_INT_ERR;
 80060c4:	2302      	movs	r3, #2
 80060c6:	73fb      	strb	r3, [r7, #15]
 80060c8:	e049      	b.n	800615e <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80060ca:	2300      	movs	r3, #0
 80060cc:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80060ce:	e03b      	b.n	8006148 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fd98 	bl	8005c08 <get_fat>
 80060d8:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d03b      	beq.n	8006158 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d102      	bne.n	80060ec <remove_chain+0x46>
 80060e6:	2302      	movs	r3, #2
 80060e8:	73fb      	strb	r3, [r7, #15]
 80060ea:	e038      	b.n	800615e <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d102      	bne.n	80060fa <remove_chain+0x54>
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	e031      	b.n	800615e <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80060fa:	2200      	movs	r2, #0
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fe7e 	bl	8005e00 <put_fat>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d126      	bne.n	800615c <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d013      	beq.n	8006144 <remove_chain+0x9e>
				fs->free_clust++;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	3301      	adds	r3, #1
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800612c:	6153      	str	r3, [r2, #20]
				fs->fsi_flag |= 1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006134:	795b      	ldrb	r3, [r3, #5]
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	b2da      	uxtb	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006142:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d3bc      	bcc.n	80060d0 <remove_chain+0x2a>
 8006156:	e002      	b.n	800615e <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006158:	bf00      	nop
 800615a:	e000      	b.n	800615e <remove_chain+0xb8>
			if (res != FR_OK) break;
 800615c:	bf00      	nop
		}
	}

	return res;
 800615e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d111      	bne.n	800619c <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d006      	beq.n	8006196 <create_chain+0x2e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	429a      	cmp	r2, r3
 8006194:	d31d      	bcc.n	80061d2 <create_chain+0x6a>
 8006196:	2301      	movs	r3, #1
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	e01a      	b.n	80061d2 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fd32 	bl	8005c08 <get_fat>
 80061a4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d801      	bhi.n	80061b0 <create_chain+0x48>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e07f      	b.n	80062b0 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d101      	bne.n	80061bc <create_chain+0x54>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	e079      	b.n	80062b0 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d201      	bcs.n	80061ce <create_chain+0x66>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	e070      	b.n	80062b0 <create_chain+0x148>
		scl = clst;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	3301      	adds	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d307      	bcc.n	80061fa <create_chain+0x92>
			ncl = 2;
 80061ea:	2302      	movs	r3, #2
 80061ec:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d901      	bls.n	80061fa <create_chain+0x92>
 80061f6:	2300      	movs	r3, #0
 80061f8:	e05a      	b.n	80062b0 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff fd03 	bl	8005c08 <get_fat>
 8006202:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00e      	beq.n	8006228 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d002      	beq.n	8006218 <create_chain+0xb0>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <create_chain+0xb4>
			return cs;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	e049      	b.n	80062b0 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	429a      	cmp	r2, r3
 8006222:	d1d8      	bne.n	80061d6 <create_chain+0x6e>
 8006224:	2300      	movs	r3, #0
 8006226:	e043      	b.n	80062b0 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8006228:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800622a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800622e:	6979      	ldr	r1, [r7, #20]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff fde5 	bl	8005e00 <put_fat>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <create_chain+0xec>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d006      	beq.n	8006254 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff fdd8 	bl	8005e00 <put_fat>
 8006250:	4603      	mov	r3, r0
 8006252:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d121      	bne.n	800629e <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006260:	461a      	mov	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	6113      	str	r3, [r2, #16]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d01c      	beq.n	80062ae <create_chain+0x146>
			fs->free_clust--;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	3b01      	subs	r3, #1
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006284:	6153      	str	r3, [r2, #20]
			fs->fsi_flag |= 1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800628c:	795b      	ldrb	r3, [r3, #5]
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	b2da      	uxtb	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629a:	715a      	strb	r2, [r3, #5]
 800629c:	e007      	b.n	80062ae <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d102      	bne.n	80062aa <create_chain+0x142>
 80062a4:	f04f 33ff 	mov.w	r3, #4294967295
 80062a8:	e000      	b.n	80062ac <create_chain+0x144>
 80062aa:	2301      	movs	r3, #1
 80062ac:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80062ae:	697b      	ldr	r3, [r7, #20]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	3304      	adds	r3, #4
 80062cc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062da:	895b      	ldrh	r3, [r3, #10]
 80062dc:	461a      	mov	r2, r3
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062f0:	7892      	ldrb	r2, [r2, #2]
 80062f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1d1a      	adds	r2, r3, #4
 80062fc:	613a      	str	r2, [r7, #16]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <clmt_clust+0x54>
 8006308:	2300      	movs	r3, #0
 800630a:	e010      	b.n	800632e <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d307      	bcc.n	8006324 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	3304      	adds	r3, #4
 8006320:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006322:	e7e9      	b.n	80062f8 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006324:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	4413      	add	r3, r2
}
 800632e:	4618      	mov	r0, r3
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800634e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d009      	beq.n	8006374 <dir_sdi+0x3a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	429a      	cmp	r2, r3
 8006372:	d301      	bcc.n	8006378 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8006374:	2302      	movs	r3, #2
 8006376:	e0aa      	b.n	80064ce <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d110      	bne.n	80063a0 <dir_sdi+0x66>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d107      	bne.n	80063a0 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d115      	bne.n	80063d2 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063b2:	891b      	ldrh	r3, [r3, #8]
 80063b4:	461a      	mov	r2, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d301      	bcc.n	80063c0 <dir_sdi+0x86>
			return FR_INT_ERR;
 80063bc:	2302      	movs	r3, #2
 80063be:	e086      	b.n	80064ce <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	e043      	b.n	800645a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063de:	895b      	ldrh	r3, [r3, #10]
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f2:	789b      	ldrb	r3, [r3, #2]
 80063f4:	fb02 f303 	mul.w	r3, r2, r3
 80063f8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80063fa:	e021      	b.n	8006440 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6979      	ldr	r1, [r7, #20]
 8006406:	4618      	mov	r0, r3
 8006408:	f7ff fbfe 	bl	8005c08 <get_fat>
 800640c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d101      	bne.n	800641a <dir_sdi+0xe0>
 8006416:	2301      	movs	r3, #1
 8006418:	e059      	b.n	80064ce <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d909      	bls.n	8006434 <dir_sdi+0xfa>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	429a      	cmp	r2, r3
 8006432:	d301      	bcc.n	8006438 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8006434:	2302      	movs	r3, #2
 8006436:	e04a      	b.n	80064ce <dir_sdi+0x194>
			idx -= ic;
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	429a      	cmp	r2, r3
 8006446:	d2d9      	bcs.n	80063fc <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fbb3 	bl	8005bbe <clust2sect>
 8006458:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006460:	461a      	mov	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <dir_sdi+0x136>
 800646c:	2302      	movs	r3, #2
 800646e:	e02e      	b.n	80064ce <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800647c:	895b      	ldrh	r3, [r3, #10]
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	b29b      	uxth	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	fbb3 f2f2 	udiv	r2, r3, r2
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4413      	add	r3, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006494:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4618      	mov	r0, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064ac:	895b      	ldrh	r3, [r3, #10]
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80064ba:	fb01 f202 	mul.w	r2, r1, r2
 80064be:	1a9b      	subs	r3, r3, r2
 80064c0:	015b      	lsls	r3, r3, #5
 80064c2:	4403      	add	r3, r0
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80064ca:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80064d6:	b590      	push	{r4, r7, lr}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e6:	88db      	ldrh	r3, [r3, #6]
 80064e8:	3301      	adds	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <dir_next+0x2a>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <dir_next+0x2e>
		return FR_NO_FILE;
 8006500:	2304      	movs	r3, #4
 8006502:	e12e      	b.n	8006762 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006510:	895b      	ldrh	r3, [r3, #10]
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	fbb3 f1f2 	udiv	r1, r3, r2
 800651e:	fb01 f202 	mul.w	r2, r1, r2
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	f040 80fa 	bne.w	800671e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	3301      	adds	r3, #1
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800653a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10d      	bne.n	8006564 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006554:	891b      	ldrh	r3, [r3, #8]
 8006556:	461a      	mov	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4293      	cmp	r3, r2
 800655c:	f0c0 80df 	bcc.w	800671e <dir_next+0x248>
				return FR_NO_FILE;
 8006560:	2304      	movs	r3, #4
 8006562:	e0fe      	b.n	8006762 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006570:	895b      	ldrh	r3, [r3, #10]
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	b29b      	uxth	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	fbb3 f3f2 	udiv	r3, r3, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800658a:	7892      	ldrb	r2, [r2, #2]
 800658c:	3a01      	subs	r2, #1
 800658e:	4013      	ands	r3, r2
 8006590:	2b00      	cmp	r3, #0
 8006592:	f040 80c4 	bne.w	800671e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f7ff fb2d 	bl	8005c08 <get_fat>
 80065ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d801      	bhi.n	80065ba <dir_next+0xe4>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e0d3      	b.n	8006762 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d101      	bne.n	80065c6 <dir_next+0xf0>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e0cd      	b.n	8006762 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	f0c0 808e 	bcc.w	80066f8 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <dir_next+0x110>
 80065e2:	2304      	movs	r3, #4
 80065e4:	e0bd      	b.n	8006762 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f7ff fdb5 	bl	8006168 <create_chain>
 80065fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <dir_next+0x134>
 8006606:	2307      	movs	r3, #7
 8006608:	e0ab      	b.n	8006762 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <dir_next+0x13e>
 8006610:	2302      	movs	r3, #2
 8006612:	e0a6      	b.n	8006762 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d101      	bne.n	8006620 <dir_next+0x14a>
 800661c:	2301      	movs	r3, #1
 800661e:	e0a0      	b.n	8006762 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4618      	mov	r0, r3
 800662a:	f7ff f985 	bl	8005938 <sync_window>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <dir_next+0x162>
 8006634:	2301      	movs	r3, #1
 8006636:	e094      	b.n	8006762 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664e:	895b      	ldrh	r3, [r3, #10]
 8006650:	461a      	mov	r2, r3
 8006652:	2100      	movs	r1, #0
 8006654:	f7fe ff23 	bl	800549e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006666:	681c      	ldr	r4, [r3, #0]
 8006668:	6979      	ldr	r1, [r7, #20]
 800666a:	4610      	mov	r0, r2
 800666c:	f7ff faa7 	bl	8005bbe <clust2sect>
 8006670:	4603      	mov	r3, r0
 8006672:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8006676:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	e021      	b.n	80066c2 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668a:	2201      	movs	r2, #1
 800668c:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff f94e 	bl	8005938 <sync_window>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <dir_next+0x1d0>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e05d      	b.n	8006762 <dir_next+0x28c>
						dp->fs->winsect++;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80066b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80066b4:	3201      	adds	r2, #1
 80066b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	3301      	adds	r3, #1
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ce:	789b      	ldrb	r3, [r3, #2]
 80066d0:	461a      	mov	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d3d2      	bcc.n	800667e <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1acb      	subs	r3, r1, r3
 80066f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066f6:	6313      	str	r3, [r2, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066fe:	461a      	mov	r2, r3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6979      	ldr	r1, [r7, #20]
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fa55 	bl	8005bbe <clust2sect>
 8006714:	4602      	mov	r2, r0
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006728:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006740:	895b      	ldrh	r3, [r3, #10]
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	b29b      	uxth	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	fbb3 f1f2 	udiv	r1, r3, r2
 800674e:	fb01 f202 	mul.w	r2, r1, r2
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	015b      	lsls	r3, r3, #5
 8006756:	4403      	add	r3, r0
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800675e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	371c      	adds	r7, #28
 8006766:	46bd      	mov	sp, r7
 8006768:	bd90      	pop	{r4, r7, pc}

0800676a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006774:	2100      	movs	r1, #0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fddf 	bl	800633a <dir_sdi>
 800677c:	4603      	mov	r3, r0
 800677e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d135      	bne.n	80067f2 <dir_alloc+0x88>
		n = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f7ff f91d 	bl	80059dc <move_window>
 80067a2:	4603      	mov	r3, r0
 80067a4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d121      	bne.n	80067f0 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2be5      	cmp	r3, #229	; 0xe5
 80067b8:	d006      	beq.n	80067c8 <dir_alloc+0x5e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d107      	bne.n	80067d8 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	3301      	adds	r3, #1
 80067cc:	60bb      	str	r3, [r7, #8]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d102      	bne.n	80067dc <dir_alloc+0x72>
 80067d6:	e00c      	b.n	80067f2 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80067d8:	2300      	movs	r3, #0
 80067da:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80067dc:	2101      	movs	r1, #1
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fe79 	bl	80064d6 <dir_next>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0cd      	beq.n	800678a <dir_alloc+0x20>
 80067ee:	e000      	b.n	80067f2 <dir_alloc+0x88>
			if (res != FR_OK) break;
 80067f0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d101      	bne.n	80067fc <dir_alloc+0x92>
 80067f8:	2307      	movs	r3, #7
 80067fa:	73fb      	strb	r3, [r7, #15]
	return res;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006806:	b480      	push	{r7}
 8006808:	b085      	sub	sp, #20
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	331b      	adds	r3, #27
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	b21a      	sxth	r2, r3
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	331a      	adds	r3, #26
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	b21b      	sxth	r3, r3
 8006822:	4313      	orrs	r3, r2
 8006824:	b21b      	sxth	r3, r3
 8006826:	b29b      	uxth	r3, r3
 8006828:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d10f      	bne.n	8006856 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	3315      	adds	r3, #21
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	b21a      	sxth	r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	3314      	adds	r3, #20
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b21b      	sxth	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	b29b      	uxth	r3, r3
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

	return cl;
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	331a      	adds	r3, #26
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	0a1b      	lsrs	r3, r3, #8
 800687e:	b29a      	uxth	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	331b      	adds	r3, #27
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	0c1a      	lsrs	r2, r3, #16
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3314      	adds	r3, #20
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	0c1b      	lsrs	r3, r3, #16
 8006898:	b29b      	uxth	r3, r3
 800689a:	0a1b      	lsrs	r3, r3, #8
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3315      	adds	r3, #21
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c6:	1e5a      	subs	r2, r3, #1
 80068c8:	4613      	mov	r3, r2
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	2301      	movs	r3, #1
 80068da:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80068dc:	4a2b      	ldr	r2, [pc, #172]	; (800698c <cmp_lfn+0xd8>)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4413      	add	r3, r2
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	4413      	add	r3, r2
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	b21a      	sxth	r2, r3
 80068f0:	4926      	ldr	r1, [pc, #152]	; (800698c <cmp_lfn+0xd8>)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	440b      	add	r3, r1
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	4619      	mov	r1, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	440b      	add	r3, r1
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b21b      	sxth	r3, r3
 8006902:	4313      	orrs	r3, r2
 8006904:	b21b      	sxth	r3, r3
 8006906:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006908:	89fb      	ldrh	r3, [r7, #14]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d019      	beq.n	8006942 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800690e:	89bb      	ldrh	r3, [r7, #12]
 8006910:	4618      	mov	r0, r3
 8006912:	f003 f839 	bl	8009988 <ff_wtoupper>
 8006916:	4603      	mov	r3, r0
 8006918:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2bfe      	cmp	r3, #254	; 0xfe
 800691e:	d80e      	bhi.n	800693e <cmp_lfn+0x8a>
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	617a      	str	r2, [r7, #20]
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	4413      	add	r3, r2
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f003 f82a 	bl	8009988 <ff_wtoupper>
 8006934:	4603      	mov	r3, r0
 8006936:	461a      	mov	r2, r3
 8006938:	89fb      	ldrh	r3, [r7, #14]
 800693a:	4293      	cmp	r3, r2
 800693c:	d008      	beq.n	8006950 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800693e:	2300      	movs	r3, #0
 8006940:	e01f      	b.n	8006982 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8006942:	89bb      	ldrh	r3, [r7, #12]
 8006944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006948:	4293      	cmp	r3, r2
 800694a:	d001      	beq.n	8006950 <cmp_lfn+0x9c>
 800694c:	2300      	movs	r3, #0
 800694e:	e018      	b.n	8006982 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	3301      	adds	r3, #1
 8006954:	613b      	str	r3, [r7, #16]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b0c      	cmp	r3, #12
 800695a:	d9bf      	bls.n	80068dc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <cmp_lfn+0xcc>
 8006968:	89fb      	ldrh	r3, [r7, #14]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d008      	beq.n	8006980 <cmp_lfn+0xcc>
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <cmp_lfn+0xcc>
		return 0;
 800697c:	2300      	movs	r3, #0
 800697e:	e000      	b.n	8006982 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006980:	2301      	movs	r3, #1
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	0800d774 	.word	0x0800d774

08006990 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4611      	mov	r1, r2
 800699c:	461a      	mov	r2, r3
 800699e:	460b      	mov	r3, r1
 80069a0:	71fb      	strb	r3, [r7, #7]
 80069a2:	4613      	mov	r3, r2
 80069a4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	330d      	adds	r3, #13
 80069aa:	79ba      	ldrb	r2, [r7, #6]
 80069ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	330b      	adds	r3, #11
 80069b2:	220f      	movs	r2, #15
 80069b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	330c      	adds	r3, #12
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	331a      	adds	r3, #26
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	331b      	adds	r3, #27
 80069ca:	2200      	movs	r2, #0
 80069cc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	1e5a      	subs	r2, r3, #1
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	82fb      	strh	r3, [r7, #22]
 80069e2:	2300      	movs	r3, #0
 80069e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80069e6:	8afb      	ldrh	r3, [r7, #22]
 80069e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d007      	beq.n	8006a00 <fit_lfn+0x70>
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	61fa      	str	r2, [r7, #28]
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8006a00:	4a1d      	ldr	r2, [pc, #116]	; (8006a78 <fit_lfn+0xe8>)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	4413      	add	r3, r2
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	8afa      	ldrh	r2, [r7, #22]
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	8afb      	ldrh	r3, [r7, #22]
 8006a16:	0a1b      	lsrs	r3, r3, #8
 8006a18:	b299      	uxth	r1, r3
 8006a1a:	4a17      	ldr	r2, [pc, #92]	; (8006a78 <fit_lfn+0xe8>)
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	4413      	add	r3, r2
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4413      	add	r3, r2
 8006a28:	b2ca      	uxtb	r2, r1
 8006a2a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006a2c:	8afb      	ldrh	r3, [r7, #22]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d102      	bne.n	8006a38 <fit_lfn+0xa8>
 8006a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a36:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	61bb      	str	r3, [r7, #24]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b0c      	cmp	r3, #12
 8006a42:	d9d0      	bls.n	80069e6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8006a44:	8afb      	ldrh	r3, [r7, #22]
 8006a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d006      	beq.n	8006a5c <fit_lfn+0xcc>
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <fit_lfn+0xd4>
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a62:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	79fa      	ldrb	r2, [r7, #7]
 8006a68:	701a      	strb	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	3724      	adds	r7, #36	; 0x24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	0800d774 	.word	0x0800d774

08006a7c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	; 0x30
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006a8a:	220b      	movs	r2, #11
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7fe fce6 	bl	8005460 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d92b      	bls.n	8006af2 <gen_numname+0x76>
		sr = seq;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006a9e:	e022      	b.n	8006ae6 <gen_numname+0x6a>
			wc = *lfn++;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	1c9a      	adds	r2, r3, #2
 8006aa4:	607a      	str	r2, [r7, #4]
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006aaa:	2300      	movs	r3, #0
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aae:	e017      	b.n	8006ae0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	005a      	lsls	r2, r3, #1
 8006ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006abe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <gen_numname+0x5e>
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006ad4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006ad8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	3301      	adds	r3, #1
 8006ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	2b0f      	cmp	r3, #15
 8006ae4:	d9e4      	bls.n	8006ab0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1d8      	bne.n	8006aa0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006af2:	2307      	movs	r3, #7
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	3330      	adds	r3, #48	; 0x30
 8006b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b0a:	2b39      	cmp	r3, #57	; 0x39
 8006b0c:	d904      	bls.n	8006b18 <gen_numname+0x9c>
 8006b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b12:	3307      	adds	r3, #7
 8006b14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	1e5a      	subs	r2, r3, #1
 8006b1c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b1e:	3330      	adds	r3, #48	; 0x30
 8006b20:	443b      	add	r3, r7
 8006b22:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006b26:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	091b      	lsrs	r3, r3, #4
 8006b2e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1df      	bne.n	8006af6 <gen_numname+0x7a>
	ns[i] = '~';
 8006b36:	f107 0214 	add.w	r2, r7, #20
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	4413      	add	r3, r2
 8006b3e:	227e      	movs	r2, #126	; 0x7e
 8006b40:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b42:	2300      	movs	r3, #0
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	e002      	b.n	8006b4e <gen_numname+0xd2>
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d205      	bcs.n	8006b62 <gen_numname+0xe6>
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	4413      	add	r3, r2
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d1f2      	bne.n	8006b48 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	2b07      	cmp	r3, #7
 8006b66:	d807      	bhi.n	8006b78 <gen_numname+0xfc>
 8006b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b6e:	3330      	adds	r3, #48	; 0x30
 8006b70:	443b      	add	r3, r7
 8006b72:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006b76:	e000      	b.n	8006b7a <gen_numname+0xfe>
 8006b78:	2120      	movs	r1, #32
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4413      	add	r3, r2
 8006b84:	460a      	mov	r2, r1
 8006b86:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	2b07      	cmp	r3, #7
 8006b8c:	d9e9      	bls.n	8006b62 <gen_numname+0xe6>
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	3730      	adds	r7, #48	; 0x30
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006ba4:	230b      	movs	r3, #11
 8006ba6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	0852      	lsrs	r2, r2, #1
 8006bae:	01db      	lsls	r3, r3, #7
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	6079      	str	r1, [r7, #4]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	73fb      	strb	r3, [r7, #15]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1ed      	bne.n	8006ba8 <sum_sfn+0x10>
	return sum;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006be2:	2100      	movs	r1, #0
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff fba8 	bl	800633a <dir_sdi>
 8006bea:	4603      	mov	r3, r0
 8006bec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <dir_find+0x1e>
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	e0b8      	b.n	8006d6a <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006bf8:	23ff      	movs	r3, #255	; 0xff
 8006bfa:	753b      	strb	r3, [r7, #20]
 8006bfc:	7d3b      	ldrb	r3, [r7, #20]
 8006bfe:	757b      	strb	r3, [r7, #21]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c0a:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4610      	mov	r0, r2
 8006c20:	f7fe fedc 	bl	80059dc <move_window>
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f040 8097 	bne.w	8006d5e <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006c40:	7dbb      	ldrb	r3, [r7, #22]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d102      	bne.n	8006c4c <dir_find+0x72>
 8006c46:	2304      	movs	r3, #4
 8006c48:	75fb      	strb	r3, [r7, #23]
 8006c4a:	e08d      	b.n	8006d68 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	330b      	adds	r3, #11
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c56:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006c58:	7dbb      	ldrb	r3, [r7, #22]
 8006c5a:	2be5      	cmp	r3, #229	; 0xe5
 8006c5c:	d007      	beq.n	8006c6e <dir_find+0x94>
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00b      	beq.n	8006c80 <dir_find+0xa6>
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b0f      	cmp	r3, #15
 8006c6c:	d008      	beq.n	8006c80 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006c6e:	23ff      	movs	r3, #255	; 0xff
 8006c70:	757b      	strb	r3, [r7, #21]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c7c:	849a      	strh	r2, [r3, #36]	; 0x24
 8006c7e:	e063      	b.n	8006d48 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d137      	bne.n	8006cf6 <dir_find+0x11c>
				if (dp->lfn) {
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d05a      	beq.n	8006d48 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006c92:	7dbb      	ldrb	r3, [r7, #22]
 8006c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d010      	beq.n	8006cbe <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	7b5b      	ldrb	r3, [r3, #13]
 8006ca0:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006ca2:	7dbb      	ldrb	r3, [r7, #22]
 8006ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca8:	75bb      	strb	r3, [r7, #22]
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb4:	88da      	ldrh	r2, [r3, #6]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbc:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006cbe:	7dba      	ldrb	r2, [r7, #22]
 8006cc0:	7d7b      	ldrb	r3, [r7, #21]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d114      	bne.n	8006cf0 <dir_find+0x116>
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	330d      	adds	r3, #13
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	7d3a      	ldrb	r2, [r7, #20]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d10e      	bne.n	8006cf0 <dir_find+0x116>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	6939      	ldr	r1, [r7, #16]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fde9 	bl	80068b4 <cmp_lfn>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <dir_find+0x116>
 8006ce8:	7d7b      	ldrb	r3, [r7, #21]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	e000      	b.n	8006cf2 <dir_find+0x118>
 8006cf0:	23ff      	movs	r3, #255	; 0xff
 8006cf2:	757b      	strb	r3, [r7, #21]
 8006cf4:	e028      	b.n	8006d48 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006cf6:	7d7b      	ldrb	r3, [r7, #21]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d107      	bne.n	8006d0c <dir_find+0x132>
 8006cfc:	6938      	ldr	r0, [r7, #16]
 8006cfe:	f7ff ff4b 	bl	8006b98 <sum_sfn>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	7d3b      	ldrb	r3, [r7, #20]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d02a      	beq.n	8006d62 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	330b      	adds	r3, #11
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10b      	bne.n	8006d38 <dir_find+0x15e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	220b      	movs	r2, #11
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6938      	ldr	r0, [r7, #16]
 8006d2e:	f7fe fbd1 	bl	80054d4 <mem_cmp>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d016      	beq.n	8006d66 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006d38:	23ff      	movs	r3, #255	; 0xff
 8006d3a:	757b      	strb	r3, [r7, #21]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d46:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff fbc3 	bl	80064d6 <dir_next>
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f43f af58 	beq.w	8006c0c <dir_find+0x32>
 8006d5c:	e004      	b.n	8006d68 <dir_find+0x18e>
		if (res != FR_OK) break;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006d66:	bf00      	nop

	return res;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08c      	sub	sp, #48	; 0x30
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	623b      	str	r3, [r7, #32]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8006d90:	f107 030c 	add.w	r3, r7, #12
 8006d94:	220c      	movs	r2, #12
 8006d96:	6a39      	ldr	r1, [r7, #32]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fb61 	bl	8005460 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d03b      	beq.n	8006e20 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	330b      	adds	r3, #11
 8006dac:	2200      	movs	r2, #0
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db6:	461a      	mov	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc0:	e013      	b.n	8006dea <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006dc2:	f107 010c 	add.w	r1, r7, #12
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	6a38      	ldr	r0, [r7, #32]
 8006dcc:	f7ff fe56 	bl	8006a7c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff ff02 	bl	8006bda <dir_find>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	3301      	adds	r3, #1
 8006de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	2b63      	cmp	r3, #99	; 0x63
 8006dee:	d9e8      	bls.n	8006dc2 <dir_register+0x4e>
 8006df0:	e000      	b.n	8006df4 <dir_register+0x80>
			if (res != FR_OK) break;
 8006df2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	2b64      	cmp	r3, #100	; 0x64
 8006df8:	d101      	bne.n	8006dfe <dir_register+0x8a>
 8006dfa:	2307      	movs	r3, #7
 8006dfc:	e0d8      	b.n	8006fb0 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d002      	beq.n	8006e0c <dir_register+0x98>
 8006e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e0a:	e0d1      	b.n	8006fb0 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	330b      	adds	r3, #11
 8006e10:	7dfa      	ldrb	r2, [r7, #23]
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d014      	beq.n	8006e54 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e2e:	e002      	b.n	8006e36 <dir_register+0xc2>
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	3301      	adds	r3, #1
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f5      	bne.n	8006e30 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	3319      	adds	r3, #25
 8006e48:	4a5b      	ldr	r2, [pc, #364]	; (8006fb8 <dir_register+0x244>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	089b      	lsrs	r3, r3, #2
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
 8006e52:	e001      	b.n	8006e58 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006e54:	2301      	movs	r3, #1
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006e58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff fc85 	bl	800676a <dir_alloc>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d15b      	bne.n	8006f26 <dir_register+0x1b2>
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	3b01      	subs	r3, #1
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d055      	beq.n	8006f26 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e80:	88db      	ldrh	r3, [r3, #6]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	4619      	mov	r1, r3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff fa55 	bl	800633a <dir_sdi>
 8006e90:	4603      	mov	r3, r0
 8006e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d143      	bne.n	8006f26 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fe76 	bl	8006b98 <sum_sfn>
 8006eac:	4603      	mov	r3, r0
 8006eae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	f7fe fd8a 	bl	80059dc <move_window>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d126      	bne.n	8006f24 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006edc:	6a18      	ldr	r0, [r3, #32]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee4:	6959      	ldr	r1, [r3, #20]
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	7efb      	ldrb	r3, [r7, #27]
 8006eec:	f7ff fd50 	bl	8006990 <fit_lfn>
				dp->fs->wflag = 1;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efc:	2201      	movs	r2, #1
 8006efe:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8006f00:	2100      	movs	r1, #0
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff fae7 	bl	80064d6 <dir_next>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d107      	bne.n	8006f26 <dir_register+0x1b2>
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1c6      	bne.n	8006eb0 <dir_register+0x13c>
 8006f22:	e000      	b.n	8006f26 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8006f24:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d13e      	bne.n	8006fac <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4610      	mov	r0, r2
 8006f42:	f7fe fd4b 	bl	80059dc <move_window>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d12b      	bne.n	8006fac <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	2220      	movs	r2, #32
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fa9c 	bl	800549e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f6c:	6958      	ldr	r0, [r3, #20]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	220b      	movs	r2, #11
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f7fe fa71 	bl	8005460 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	330b      	adds	r3, #11
 8006f88:	781a      	ldrb	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	330c      	adds	r3, #12
 8006f94:	f002 0218 	and.w	r2, r2, #24
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa8:	2201      	movs	r2, #1
 8006faa:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8006fac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3730      	adds	r7, #48	; 0x30
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	4ec4ec4f 	.word	0x4ec4ec4f

08006fbc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08a      	sub	sp, #40	; 0x28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	e002      	b.n	8006fd4 <create_name+0x18>
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b2f      	cmp	r3, #47	; 0x2f
 8006fda:	d0f8      	beq.n	8006fce <create_name+0x12>
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b5c      	cmp	r3, #92	; 0x5c
 8006fe2:	d0f4      	beq.n	8006fce <create_name+0x12>
	lfn = dp->lfn;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	61ba      	str	r2, [r7, #24]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	4413      	add	r3, r2
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8007004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007006:	2b1f      	cmp	r3, #31
 8007008:	d92f      	bls.n	800706a <create_name+0xae>
 800700a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800700c:	2b2f      	cmp	r3, #47	; 0x2f
 800700e:	d02c      	beq.n	800706a <create_name+0xae>
 8007010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007012:	2b5c      	cmp	r3, #92	; 0x5c
 8007014:	d029      	beq.n	800706a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2bfe      	cmp	r3, #254	; 0xfe
 800701a:	d901      	bls.n	8007020 <create_name+0x64>
			return FR_INVALID_NAME;
 800701c:	2306      	movs	r3, #6
 800701e:	e186      	b.n	800732e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007022:	b2db      	uxtb	r3, r3
 8007024:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007028:	2101      	movs	r1, #1
 800702a:	4618      	mov	r0, r3
 800702c:	f002 fc70 	bl	8009910 <ff_convert>
 8007030:	4603      	mov	r3, r0
 8007032:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <create_name+0x82>
 800703a:	2306      	movs	r3, #6
 800703c:	e177      	b.n	800732e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800703e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007040:	2b7f      	cmp	r3, #127	; 0x7f
 8007042:	d809      	bhi.n	8007058 <create_name+0x9c>
 8007044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007046:	4619      	mov	r1, r3
 8007048:	488e      	ldr	r0, [pc, #568]	; (8007284 <create_name+0x2c8>)
 800704a:	f7fe fa6a 	bl	8005522 <chk_chr>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <create_name+0x9c>
			return FR_INVALID_NAME;
 8007054:	2306      	movs	r3, #6
 8007056:	e16a      	b.n	800732e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	1c5a      	adds	r2, r3, #1
 800705c:	617a      	str	r2, [r7, #20]
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007066:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007068:	e7c5      	b.n	8006ff6 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	441a      	add	r2, r3
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007074:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007076:	2b1f      	cmp	r3, #31
 8007078:	d801      	bhi.n	800707e <create_name+0xc2>
 800707a:	2304      	movs	r3, #4
 800707c:	e000      	b.n	8007080 <create_name+0xc4>
 800707e:	2300      	movs	r3, #0
 8007080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8007084:	e011      	b.n	80070aa <create_name+0xee>
		w = lfn[di - 1];
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800708c:	3b01      	subs	r3, #1
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800709a:	2b20      	cmp	r3, #32
 800709c:	d002      	beq.n	80070a4 <create_name+0xe8>
 800709e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a0:	2b2e      	cmp	r3, #46	; 0x2e
 80070a2:	d106      	bne.n	80070b2 <create_name+0xf6>
		di--;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1ea      	bne.n	8007086 <create_name+0xca>
 80070b0:	e000      	b.n	80070b4 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80070b2:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <create_name+0x102>
 80070ba:	2306      	movs	r3, #6
 80070bc:	e137      	b.n	800732e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	220b      	movs	r2, #11
 80070d4:	2120      	movs	r1, #32
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe f9e1 	bl	800549e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80070dc:	2300      	movs	r3, #0
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	e002      	b.n	80070e8 <create_name+0x12c>
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	3301      	adds	r3, #1
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	d0f5      	beq.n	80070e2 <create_name+0x126>
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	2b2e      	cmp	r3, #46	; 0x2e
 8007102:	d0ee      	beq.n	80070e2 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <create_name+0x162>
 800710a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800710e:	f043 0303 	orr.w	r3, r3, #3
 8007112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007116:	e002      	b.n	800711e <create_name+0x162>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3b01      	subs	r3, #1
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <create_name+0x17c>
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800712a:	3b01      	subs	r3, #1
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	2b2e      	cmp	r3, #46	; 0x2e
 8007136:	d1ef      	bne.n	8007118 <create_name+0x15c>

	b = i = 0; ni = 8;
 8007138:	2300      	movs	r3, #0
 800713a:	623b      	str	r3, [r7, #32]
 800713c:	2300      	movs	r3, #0
 800713e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007142:	2308      	movs	r3, #8
 8007144:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	61ba      	str	r2, [r7, #24]
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8091 	beq.w	8007280 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800715e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007160:	2b20      	cmp	r3, #32
 8007162:	d006      	beq.n	8007172 <create_name+0x1b6>
 8007164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007166:	2b2e      	cmp	r3, #46	; 0x2e
 8007168:	d10a      	bne.n	8007180 <create_name+0x1c4>
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	429a      	cmp	r2, r3
 8007170:	d006      	beq.n	8007180 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8007172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007176:	f043 0303 	orr.w	r3, r3, #3
 800717a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800717e:	e07e      	b.n	800727e <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	429a      	cmp	r2, r3
 8007186:	d203      	bcs.n	8007190 <create_name+0x1d4>
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	429a      	cmp	r2, r3
 800718e:	d123      	bne.n	80071d8 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	2b0b      	cmp	r3, #11
 8007194:	d106      	bne.n	80071a4 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8007196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800719a:	f043 0303 	orr.w	r3, r3, #3
 800719e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071a2:	e076      	b.n	8007292 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d005      	beq.n	80071b8 <create_name+0x1fc>
 80071ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071b0:	f043 0303 	orr.w	r3, r3, #3
 80071b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d867      	bhi.n	8007290 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	2308      	movs	r3, #8
 80071c6:	623b      	str	r3, [r7, #32]
 80071c8:	230b      	movs	r3, #11
 80071ca:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80071cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071d6:	e052      	b.n	800727e <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80071d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071da:	2b7f      	cmp	r3, #127	; 0x7f
 80071dc:	d914      	bls.n	8007208 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80071de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f002 fb94 	bl	8009910 <ff_convert>
 80071e8:	4603      	mov	r3, r0
 80071ea:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80071ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d004      	beq.n	80071fc <create_name+0x240>
 80071f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071f4:	3b80      	subs	r3, #128	; 0x80
 80071f6:	4a24      	ldr	r2, [pc, #144]	; (8007288 <create_name+0x2cc>)
 80071f8:	5cd3      	ldrb	r3, [r2, r3]
 80071fa:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80071fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007200:	f043 0302 	orr.w	r3, r3, #2
 8007204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	d007      	beq.n	800721e <create_name+0x262>
 800720e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007210:	4619      	mov	r1, r3
 8007212:	481e      	ldr	r0, [pc, #120]	; (800728c <create_name+0x2d0>)
 8007214:	f7fe f985 	bl	8005522 <chk_chr>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d008      	beq.n	8007230 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800721e:	235f      	movs	r3, #95	; 0x5f
 8007220:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007226:	f043 0303 	orr.w	r3, r3, #3
 800722a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800722e:	e01b      	b.n	8007268 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	d909      	bls.n	800724a <create_name+0x28e>
 8007236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007238:	2b5a      	cmp	r3, #90	; 0x5a
 800723a:	d806      	bhi.n	800724a <create_name+0x28e>
					b |= 2;
 800723c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007240:	f043 0302 	orr.w	r3, r3, #2
 8007244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007248:	e00e      	b.n	8007268 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800724a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800724c:	2b60      	cmp	r3, #96	; 0x60
 800724e:	d90b      	bls.n	8007268 <create_name+0x2ac>
 8007250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007252:	2b7a      	cmp	r3, #122	; 0x7a
 8007254:	d808      	bhi.n	8007268 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8007256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800725a:	f043 0301 	orr.w	r3, r3, #1
 800725e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007264:	3b20      	subs	r3, #32
 8007266:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	1c59      	adds	r1, r3, #1
 8007274:	6239      	str	r1, [r7, #32]
 8007276:	4413      	add	r3, r2
 8007278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800727e:	e762      	b.n	8007146 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8007280:	bf00      	nop
 8007282:	e006      	b.n	8007292 <create_name+0x2d6>
 8007284:	0800d66c 	.word	0x0800d66c
 8007288:	0800d6f4 	.word	0x0800d6f4
 800728c:	0800d678 	.word	0x0800d678
			if (si > di) break;			/* No extension */
 8007290:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2be5      	cmp	r3, #229	; 0xe5
 800729e:	d105      	bne.n	80072ac <create_name+0x2f0>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	2205      	movs	r2, #5
 80072aa:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d104      	bne.n	80072bc <create_name+0x300>
 80072b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80072bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072c0:	f003 030c 	and.w	r3, r3, #12
 80072c4:	2b0c      	cmp	r3, #12
 80072c6:	d005      	beq.n	80072d4 <create_name+0x318>
 80072c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d105      	bne.n	80072e0 <create_name+0x324>
		cf |= NS_LFN;
 80072d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d8:	f043 0302 	orr.w	r3, r3, #2
 80072dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80072e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d117      	bne.n	800731c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80072ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d105      	bne.n	8007304 <create_name+0x348>
 80072f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072fc:	f043 0310 	orr.w	r3, r3, #16
 8007300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	2b04      	cmp	r3, #4
 800730e:	d105      	bne.n	800731c <create_name+0x360>
 8007310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007314:	f043 0308 	orr.w	r3, r3, #8
 8007318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	330b      	adds	r3, #11
 8007326:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800732a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800732c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800732e:	4618      	mov	r0, r3
 8007330:	3728      	adds	r7, #40	; 0x28
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop

08007338 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b2f      	cmp	r3, #47	; 0x2f
 8007348:	d003      	beq.n	8007352 <follow_path+0x1a>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b5c      	cmp	r3, #92	; 0x5c
 8007350:	d102      	bne.n	8007358 <follow_path+0x20>
		path++;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	3301      	adds	r3, #1
 8007356:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735e:	461a      	mov	r2, r3
 8007360:	2300      	movs	r3, #0
 8007362:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b1f      	cmp	r3, #31
 800736a:	d80c      	bhi.n	8007386 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7fe ffe3 	bl	800633a <dir_sdi>
 8007374:	4603      	mov	r3, r0
 8007376:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737e:	461a      	mov	r2, r3
 8007380:	2300      	movs	r3, #0
 8007382:	6153      	str	r3, [r2, #20]
 8007384:	e049      	b.n	800741a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007386:	463b      	mov	r3, r7
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff fe16 	bl	8006fbc <create_name>
 8007390:	4603      	mov	r3, r0
 8007392:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d13a      	bne.n	8007410 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fc1d 	bl	8006bda <dir_find>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	7adb      	ldrb	r3, [r3, #11]
 80073ae:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d12b      	bne.n	8007414 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	f003 0304 	and.w	r3, r3, #4
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d126      	bne.n	8007414 <follow_path+0xdc>
 80073c6:	2305      	movs	r3, #5
 80073c8:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80073ca:	e023      	b.n	8007414 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	f003 0304 	and.w	r3, r3, #4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d120      	bne.n	8007418 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	330b      	adds	r3, #11
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80073ee:	2305      	movs	r3, #5
 80073f0:	73fb      	strb	r3, [r7, #15]
 80073f2:	e012      	b.n	800741a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68b9      	ldr	r1, [r7, #8]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fa01 	bl	8006806 <ld_clust>
 8007404:	4602      	mov	r2, r0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800740c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800740e:	e7ba      	b.n	8007386 <follow_path+0x4e>
			if (res != FR_OK) break;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <follow_path+0xe2>
				break;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007418:	bf00      	nop
		}
	}

	return res;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800742c:	f04f 33ff 	mov.w	r3, #4294967295
 8007430:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d031      	beq.n	800749e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e002      	b.n	8007448 <get_ldnumber+0x24>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	3301      	adds	r3, #1
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b1f      	cmp	r3, #31
 800744e:	d903      	bls.n	8007458 <get_ldnumber+0x34>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b3a      	cmp	r3, #58	; 0x3a
 8007456:	d1f4      	bne.n	8007442 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b3a      	cmp	r3, #58	; 0x3a
 800745e:	d11c      	bne.n	800749a <get_ldnumber+0x76>
			tp = *path;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	60fa      	str	r2, [r7, #12]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	3b30      	subs	r3, #48	; 0x30
 8007470:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b09      	cmp	r3, #9
 8007476:	d80e      	bhi.n	8007496 <get_ldnumber+0x72>
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	429a      	cmp	r2, r3
 800747e:	d10a      	bne.n	8007496 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d107      	bne.n	8007496 <get_ldnumber+0x72>
					vol = (int)i;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	3301      	adds	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	e002      	b.n	80074a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800749a:	2300      	movs	r3, #0
 800749c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800749e:	693b      	ldr	r3, [r7, #16]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	371c      	adds	r7, #28
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074bc:	2200      	movs	r2, #0
 80074be:	711a      	strb	r2, [r3, #4]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c6:	461a      	mov	r2, r3
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
 80074cc:	6313      	str	r3, [r2, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7fe fa83 	bl	80059dc <move_window>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <check_fs+0x34>
		return 3;
 80074dc:	2303      	movs	r3, #3
 80074de:	e04a      	b.n	8007576 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80074e6:	3301      	adds	r3, #1
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	b21a      	sxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80074f4:	b21b      	sxth	r3, r3
 80074f6:	4313      	orrs	r3, r2
 80074f8:	b21b      	sxth	r3, r3
 80074fa:	4a21      	ldr	r2, [pc, #132]	; (8007580 <check_fs+0xd4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d001      	beq.n	8007504 <check_fs+0x58>
		return 2;
 8007500:	2302      	movs	r3, #2
 8007502:	e038      	b.n	8007576 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3336      	adds	r3, #54	; 0x36
 8007508:	3303      	adds	r3, #3
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	061a      	lsls	r2, r3, #24
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3336      	adds	r3, #54	; 0x36
 8007512:	3302      	adds	r3, #2
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	4313      	orrs	r3, r2
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	3236      	adds	r2, #54	; 0x36
 800751e:	3201      	adds	r2, #1
 8007520:	7812      	ldrb	r2, [r2, #0]
 8007522:	0212      	lsls	r2, r2, #8
 8007524:	4313      	orrs	r3, r2
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800752c:	4313      	orrs	r3, r2
 800752e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007532:	4a14      	ldr	r2, [pc, #80]	; (8007584 <check_fs+0xd8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d101      	bne.n	800753c <check_fs+0x90>
		return 0;
 8007538:	2300      	movs	r3, #0
 800753a:	e01c      	b.n	8007576 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3352      	adds	r3, #82	; 0x52
 8007540:	3303      	adds	r3, #3
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	061a      	lsls	r2, r3, #24
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3352      	adds	r3, #82	; 0x52
 800754a:	3302      	adds	r3, #2
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	041b      	lsls	r3, r3, #16
 8007550:	4313      	orrs	r3, r2
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	3252      	adds	r2, #82	; 0x52
 8007556:	3201      	adds	r2, #1
 8007558:	7812      	ldrb	r2, [r2, #0]
 800755a:	0212      	lsls	r2, r2, #8
 800755c:	4313      	orrs	r3, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007564:	4313      	orrs	r3, r2
 8007566:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800756a:	4a06      	ldr	r2, [pc, #24]	; (8007584 <check_fs+0xd8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d101      	bne.n	8007574 <check_fs+0xc8>
		return 0;
 8007570:	2300      	movs	r3, #0
 8007572:	e000      	b.n	8007576 <check_fs+0xca>

	return 1;
 8007574:	2301      	movs	r3, #1
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	ffffaa55 	.word	0xffffaa55
 8007584:	00544146 	.word	0x00544146

08007588 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b096      	sub	sp, #88	; 0x58
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800759c:	68b8      	ldr	r0, [r7, #8]
 800759e:	f7ff ff41 	bl	8007424 <get_ldnumber>
 80075a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80075a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	da01      	bge.n	80075ae <find_volume+0x26>
 80075aa:	230b      	movs	r3, #11
 80075ac:	e319      	b.n	8007be2 <find_volume+0x65a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80075ae:	4a9c      	ldr	r2, [pc, #624]	; (8007820 <find_volume+0x298>)
 80075b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80075b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <find_volume+0x3a>
 80075be:	230c      	movs	r3, #12
 80075c0:	e30f      	b.n	8007be2 <find_volume+0x65a>

	ENTER_FF(fs);						/* Lock the volume */
 80075c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075c4:	f7fd ffc8 	bl	8005558 <lock_fs>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <find_volume+0x4a>
 80075ce:	230f      	movs	r3, #15
 80075d0:	e307      	b.n	8007be2 <find_volume+0x65a>
	*rfs = fs;							/* Return pointer to the file system object */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01c      	beq.n	800761e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fd fe99 	bl	8005324 <disk_status>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80075f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10c      	bne.n	800761e <find_volume+0x96>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <find_volume+0x92>
 800760a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007616:	230a      	movs	r3, #10
 8007618:	e2e3      	b.n	8007be2 <find_volume+0x65a>
			return FR_OK;				/* The file system object is valid */
 800761a:	2300      	movs	r3, #0
 800761c:	e2e1      	b.n	8007be2 <find_volume+0x65a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800761e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762a:	b2da      	uxtb	r2, r3
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007632:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763a:	785b      	ldrb	r3, [r3, #1]
 800763c:	4618      	mov	r0, r3
 800763e:	f7fd fe8b 	bl	8005358 <disk_initialize>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8007648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <find_volume+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007654:	2303      	movs	r3, #3
 8007656:	e2c4      	b.n	8007be2 <find_volume+0x65a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <find_volume+0xe6>
 800765e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 800766a:	230a      	movs	r3, #10
 800766c:	e2b9      	b.n	8007be2 <find_volume+0x65a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800766e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007674:	7858      	ldrb	r0, [r3, #1]
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767c:	330a      	adds	r3, #10
 800767e:	461a      	mov	r2, r3
 8007680:	2102      	movs	r1, #2
 8007682:	f7fd fecf 	bl	8005424 <disk_ioctl>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10d      	bne.n	80076a8 <find_volume+0x120>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007692:	895b      	ldrh	r3, [r3, #10]
 8007694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007698:	d306      	bcc.n	80076a8 <find_volume+0x120>
 800769a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a0:	895b      	ldrh	r3, [r3, #10]
 80076a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a6:	d901      	bls.n	80076ac <find_volume+0x124>
 80076a8:	2301      	movs	r3, #1
 80076aa:	e29a      	b.n	8007be2 <find_volume+0x65a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80076b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80076b4:	f7ff fefa 	bl	80074ac <check_fs>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80076be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d153      	bne.n	800776e <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80076c6:	2300      	movs	r3, #0
 80076c8:	643b      	str	r3, [r7, #64]	; 0x40
 80076ca:	e028      	b.n	800771e <find_volume+0x196>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80076cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80076d6:	4413      	add	r3, r2
 80076d8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	3304      	adds	r3, #4
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d012      	beq.n	800770a <find_volume+0x182>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	330b      	adds	r3, #11
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	061a      	lsls	r2, r3, #24
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	330a      	adds	r3, #10
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	041b      	lsls	r3, r3, #16
 80076f4:	4313      	orrs	r3, r2
 80076f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f8:	3209      	adds	r2, #9
 80076fa:	7812      	ldrb	r2, [r2, #0]
 80076fc:	0212      	lsls	r2, r2, #8
 80076fe:	4313      	orrs	r3, r2
 8007700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007702:	3208      	adds	r2, #8
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	431a      	orrs	r2, r3
 8007708:	e000      	b.n	800770c <find_volume+0x184>
 800770a:	2200      	movs	r2, #0
 800770c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	3358      	adds	r3, #88	; 0x58
 8007712:	443b      	add	r3, r7
 8007714:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8007718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800771a:	3301      	adds	r3, #1
 800771c:	643b      	str	r3, [r7, #64]	; 0x40
 800771e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007720:	2b03      	cmp	r3, #3
 8007722:	d9d3      	bls.n	80076cc <find_volume+0x144>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8007724:	2300      	movs	r3, #0
 8007726:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <find_volume+0x1ac>
 800772e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007730:	3b01      	subs	r3, #1
 8007732:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8007734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	3358      	adds	r3, #88	; 0x58
 800773a:	443b      	add	r3, r7
 800773c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007740:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8007742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <find_volume+0x1cc>
 8007748:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800774a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800774c:	f7ff feae 	bl	80074ac <check_fs>
 8007750:	4603      	mov	r3, r0
 8007752:	e000      	b.n	8007756 <find_volume+0x1ce>
 8007754:	2302      	movs	r3, #2
 8007756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800775a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <find_volume+0x1e6>
 8007762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007764:	3301      	adds	r3, #1
 8007766:	643b      	str	r3, [r7, #64]	; 0x40
 8007768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776a:	2b03      	cmp	r3, #3
 800776c:	d9e2      	bls.n	8007734 <find_volume+0x1ac>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800776e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007772:	2b03      	cmp	r3, #3
 8007774:	d101      	bne.n	800777a <find_volume+0x1f2>
 8007776:	2301      	movs	r3, #1
 8007778:	e233      	b.n	8007be2 <find_volume+0x65a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800777a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <find_volume+0x1fe>
 8007782:	230d      	movs	r3, #13
 8007784:	e22d      	b.n	8007be2 <find_volume+0x65a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	7b1b      	ldrb	r3, [r3, #12]
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	b21a      	sxth	r2, r3
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	7adb      	ldrb	r3, [r3, #11]
 8007792:	b21b      	sxth	r3, r3
 8007794:	4313      	orrs	r3, r2
 8007796:	b21a      	sxth	r2, r3
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779e:	895b      	ldrh	r3, [r3, #10]
 80077a0:	b21b      	sxth	r3, r3
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d001      	beq.n	80077aa <find_volume+0x222>
		return FR_NO_FILESYSTEM;
 80077a6:	230d      	movs	r3, #13
 80077a8:	e21b      	b.n	8007be2 <find_volume+0x65a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	7ddb      	ldrb	r3, [r3, #23]
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	b21a      	sxth	r2, r3
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	7d9b      	ldrb	r3, [r3, #22]
 80077b6:	b21b      	sxth	r3, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b21b      	sxth	r3, r3
 80077bc:	b29b      	uxth	r3, r3
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80077c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d112      	bne.n	80077ec <find_volume+0x264>
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80077cc:	061a      	lsls	r2, r3, #24
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80077d4:	041b      	lsls	r3, r3, #16
 80077d6:	4313      	orrs	r3, r2
 80077d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077da:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80077de:	0212      	lsls	r2, r2, #8
 80077e0:	4313      	orrs	r3, r2
 80077e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80077e8:	4313      	orrs	r3, r2
 80077ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	461a      	mov	r2, r3
 80077f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077f6:	61d3      	str	r3, [r2, #28]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	7c1a      	ldrb	r2, [r3, #16]
 80077fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007802:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800780a:	78db      	ldrb	r3, [r3, #3]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d009      	beq.n	8007824 <find_volume+0x29c>
 8007810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	78db      	ldrb	r3, [r3, #3]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d003      	beq.n	8007824 <find_volume+0x29c>
		return FR_NO_FILESYSTEM;
 800781c:	230d      	movs	r3, #13
 800781e:	e1e0      	b.n	8007be2 <find_volume+0x65a>
 8007820:	2000049c 	.word	0x2000049c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782a:	78db      	ldrb	r3, [r3, #3]
 800782c:	461a      	mov	r2, r3
 800782e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007830:	fb02 f303 	mul.w	r3, r2, r3
 8007834:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	7b5a      	ldrb	r2, [r3, #13]
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007840:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007848:	789b      	ldrb	r3, [r3, #2]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <find_volume+0x2e0>
 800784e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007854:	789b      	ldrb	r3, [r3, #2]
 8007856:	461a      	mov	r2, r3
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785e:	789b      	ldrb	r3, [r3, #2]
 8007860:	3b01      	subs	r3, #1
 8007862:	4013      	ands	r3, r2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <find_volume+0x2e4>
		return FR_NO_FILESYSTEM;
 8007868:	230d      	movs	r3, #13
 800786a:	e1ba      	b.n	8007be2 <find_volume+0x65a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786e:	7c9b      	ldrb	r3, [r3, #18]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	b21a      	sxth	r2, r3
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	7c5b      	ldrb	r3, [r3, #17]
 8007878:	b21b      	sxth	r3, r3
 800787a:	4313      	orrs	r3, r2
 800787c:	b21b      	sxth	r3, r3
 800787e:	b29a      	uxth	r2, r3
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007886:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788e:	891b      	ldrh	r3, [r3, #8]
 8007890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007892:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007896:	8952      	ldrh	r2, [r2, #10]
 8007898:	0952      	lsrs	r2, r2, #5
 800789a:	b292      	uxth	r2, r2
 800789c:	fbb3 f1f2 	udiv	r1, r3, r2
 80078a0:	fb01 f202 	mul.w	r2, r1, r2
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <find_volume+0x328>
		return FR_NO_FILESYSTEM;
 80078ac:	230d      	movs	r3, #13
 80078ae:	e198      	b.n	8007be2 <find_volume+0x65a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	7d1b      	ldrb	r3, [r3, #20]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	b21a      	sxth	r2, r3
 80078b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ba:	7cdb      	ldrb	r3, [r3, #19]
 80078bc:	b21b      	sxth	r3, r3
 80078be:	4313      	orrs	r3, r2
 80078c0:	b21b      	sxth	r3, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80078c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d112      	bne.n	80078f2 <find_volume+0x36a>
 80078cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ce:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80078d2:	061a      	lsls	r2, r3, #24
 80078d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	4313      	orrs	r3, r2
 80078de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078e0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80078e4:	0212      	lsls	r2, r2, #8
 80078e6:	4313      	orrs	r3, r2
 80078e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	7bdb      	ldrb	r3, [r3, #15]
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	b21a      	sxth	r2, r3
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	7b9b      	ldrb	r3, [r3, #14]
 80078fe:	b21b      	sxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b21b      	sxth	r3, r3
 8007904:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8007906:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <find_volume+0x388>
 800790c:	230d      	movs	r3, #13
 800790e:	e168      	b.n	8007be2 <find_volume+0x65a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007910:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	4413      	add	r3, r2
 8007916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007918:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800791c:	8911      	ldrh	r1, [r2, #8]
 800791e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007920:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007924:	8952      	ldrh	r2, [r2, #10]
 8007926:	0952      	lsrs	r2, r2, #5
 8007928:	b292      	uxth	r2, r2
 800792a:	fbb1 f2f2 	udiv	r2, r1, r2
 800792e:	b292      	uxth	r2, r2
 8007930:	4413      	add	r3, r2
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	429a      	cmp	r2, r3
 800793a:	d201      	bcs.n	8007940 <find_volume+0x3b8>
 800793c:	230d      	movs	r3, #13
 800793e:	e150      	b.n	8007be2 <find_volume+0x65a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007948:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800794c:	7892      	ldrb	r2, [r2, #2]
 800794e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <find_volume+0x3d6>
 800795a:	230d      	movs	r3, #13
 800795c:	e141      	b.n	8007be2 <find_volume+0x65a>
	fmt = FS_FAT12;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	f640 72f5 	movw	r2, #4085	; 0xff5
 800796a:	4293      	cmp	r3, r2
 800796c:	d902      	bls.n	8007974 <find_volume+0x3ec>
 800796e:	2302      	movs	r3, #2
 8007970:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800797a:	4293      	cmp	r3, r2
 800797c:	d902      	bls.n	8007984 <find_volume+0x3fc>
 800797e:	2303      	movs	r3, #3
 8007980:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	3302      	adds	r3, #2
 8007988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800798a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800798e:	6193      	str	r3, [r2, #24]
	fs->volbase = bsect;								/* Volume start sector */
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007996:	461a      	mov	r2, r3
 8007998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800799a:	6213      	str	r3, [r2, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800799c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800799e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a0:	4413      	add	r3, r2
 80079a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079a8:	6253      	str	r3, [r2, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 80079aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	4413      	add	r3, r2
 80079b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079b6:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 80079b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d124      	bne.n	8007a0a <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80079c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c6:	891b      	ldrh	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <find_volume+0x448>
 80079cc:	230d      	movs	r3, #13
 80079ce:	e108      	b.n	8007be2 <find_volume+0x65a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80079d6:	061a      	lsls	r2, r3, #24
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	4313      	orrs	r3, r2
 80079e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079e4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80079e8:	0212      	lsls	r2, r2, #8
 80079ea:	4313      	orrs	r3, r2
 80079ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ee:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80079f2:	4313      	orrs	r3, r2
 80079f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079fa:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	647b      	str	r3, [r7, #68]	; 0x44
 8007a08:	e02b      	b.n	8007a62 <find_volume+0x4da>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a10:	891b      	ldrh	r3, [r3, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <find_volume+0x492>
 8007a16:	230d      	movs	r3, #13
 8007a18:	e0e3      	b.n	8007be2 <find_volume+0x65a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a24:	4413      	add	r3, r2
 8007a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a2c:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d105      	bne.n	8007a42 <find_volume+0x4ba>
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	e00e      	b.n	8007a60 <find_volume+0x4d8>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a48:	699a      	ldr	r2, [r3, #24]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4413      	add	r3, r2
 8007a50:	085a      	lsrs	r2, r3, #1
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8007a60:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a68:	69da      	ldr	r2, [r3, #28]
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a70:	895b      	ldrh	r3, [r3, #10]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a76:	440b      	add	r3, r1
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a7c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8007a80:	8949      	ldrh	r1, [r1, #10]
 8007a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d201      	bcs.n	8007a8e <find_volume+0x506>
		return FR_NO_FILESYSTEM;
 8007a8a:	230d      	movs	r3, #13
 8007a8c:	e0a9      	b.n	8007be2 <find_volume+0x65a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a94:	461a      	mov	r2, r3
 8007a96:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9a:	6153      	str	r3, [r2, #20]
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007aaa:	6113      	str	r3, [r2, #16]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab2:	2280      	movs	r2, #128	; 0x80
 8007ab4:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007ab6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d17a      	bne.n	8007bb4 <find_volume+0x62c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	b21a      	sxth	r2, r3
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ace:	b21b      	sxth	r3, r3
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	b21b      	sxth	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d16d      	bne.n	8007bb4 <find_volume+0x62c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ada:	3301      	adds	r3, #1
 8007adc:	4619      	mov	r1, r3
 8007ade:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ae0:	f7fd ff7c 	bl	80059dc <move_window>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d164      	bne.n	8007bb4 <find_volume+0x62c>
	{
		fs->fsi_flag = 0;
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af0:	2200      	movs	r2, #0
 8007af2:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007afa:	021b      	lsls	r3, r3, #8
 8007afc:	b21a      	sxth	r2, r3
 8007afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b00:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007b04:	b21b      	sxth	r3, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	4a38      	ldr	r2, [pc, #224]	; (8007bec <find_volume+0x664>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d151      	bne.n	8007bb4 <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	78db      	ldrb	r3, [r3, #3]
 8007b14:	061a      	lsls	r2, r3, #24
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	789b      	ldrb	r3, [r3, #2]
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b20:	7852      	ldrb	r2, [r2, #1]
 8007b22:	0212      	lsls	r2, r2, #8
 8007b24:	4313      	orrs	r3, r2
 8007b26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	4a30      	ldr	r2, [pc, #192]	; (8007bf0 <find_volume+0x668>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d140      	bne.n	8007bb4 <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007b38:	061a      	lsls	r2, r3, #24
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8007b40:	041b      	lsls	r3, r3, #16
 8007b42:	4313      	orrs	r3, r2
 8007b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b46:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007b4a:	0212      	lsls	r2, r2, #8
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b50:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8007b54:	4313      	orrs	r3, r2
 8007b56:	4a27      	ldr	r2, [pc, #156]	; (8007bf4 <find_volume+0x66c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d12b      	bne.n	8007bb4 <find_volume+0x62c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8007b62:	061a      	lsls	r2, r3, #24
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007b6a:	041b      	lsls	r3, r3, #16
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b70:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8007b74:	0212      	lsls	r2, r2, #8
 8007b76:	4313      	orrs	r3, r2
 8007b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b7a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b86:	6153      	str	r3, [r2, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8007b8e:	061a      	lsls	r2, r3, #24
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007b96:	041b      	lsls	r3, r3, #16
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b9c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007ba0:	0212      	lsls	r2, r2, #8
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ba6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8007baa:	4313      	orrs	r3, r2
 8007bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bb2:	6113      	str	r3, [r2, #16]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bc0:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <find_volume+0x670>)
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	4b0b      	ldr	r3, [pc, #44]	; (8007bf8 <find_volume+0x670>)
 8007bcc:	801a      	strh	r2, [r3, #0]
 8007bce:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <find_volume+0x670>)
 8007bd0:	881a      	ldrh	r2, [r3, #0]
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd8:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8007bda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bdc:	f7fd fe82 	bl	80058e4 <clear_lock>
#endif

	return FR_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3758      	adds	r7, #88	; 0x58
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	ffffaa55 	.word	0xffffaa55
 8007bf0:	41615252 	.word	0x41615252
 8007bf4:	61417272 	.word	0x61417272
 8007bf8:	200004a0 	.word	0x200004a0

08007bfc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d02a      	beq.n	8007c64 <validate+0x68>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d024      	beq.n	8007c64 <validate+0x68>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01b      	beq.n	8007c64 <validate+0x68>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c38:	88da      	ldrh	r2, [r3, #6]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c40:	889b      	ldrh	r3, [r3, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d10e      	bne.n	8007c64 <validate+0x68>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c52:	785b      	ldrb	r3, [r3, #1]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fd fb65 	bl	8005324 <disk_status>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8007c64:	2309      	movs	r3, #9
 8007c66:	e00c      	b.n	8007c82 <validate+0x86>

	ENTER_FF(fil->fs);		/* Lock file system */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd fc71 	bl	8005558 <lock_fs>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <validate+0x84>
 8007c7c:	230f      	movs	r3, #15
 8007c7e:	e000      	b.n	8007c82 <validate+0x86>

	return FR_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007c9e:	f107 0310 	add.w	r3, r7, #16
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fbbe 	bl	8007424 <get_ldnumber>
 8007ca8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da01      	bge.n	8007cb4 <f_mount+0x28>
 8007cb0:	230b      	movs	r3, #11
 8007cb2:	e050      	b.n	8007d56 <f_mount+0xca>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007cb4:	4a2a      	ldr	r2, [pc, #168]	; (8007d60 <f_mount+0xd4>)
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d013      	beq.n	8007cec <f_mount+0x60>
#if _FS_LOCK
		clear_lock(cfs);
 8007cc4:	69b8      	ldr	r0, [r7, #24]
 8007cc6:	f7fd fe0d 	bl	80058e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 fea6 	bl	8009a24 <ff_del_syncobj>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <f_mount+0x56>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	e039      	b.n	8007d56 <f_mount+0xca>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d013      	beq.n	8007d1a <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d06:	330c      	adds	r3, #12
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f001 fe6a 	bl	80099e4 <ff_cre_syncobj>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <f_mount+0x8e>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e01d      	b.n	8007d56 <f_mount+0xca>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4910      	ldr	r1, [pc, #64]	; (8007d60 <f_mount+0xd4>)
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <f_mount+0xa4>
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d001      	beq.n	8007d34 <f_mount+0xa8>
 8007d30:	2300      	movs	r3, #0
 8007d32:	e010      	b.n	8007d56 <f_mount+0xca>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	f107 030c 	add.w	r3, r7, #12
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fc22 	bl	8007588 <find_volume>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	7dfa      	ldrb	r2, [r7, #23]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fd fc12 	bl	8005578 <unlock_fs>
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3720      	adds	r7, #32
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	2000049c 	.word	0x2000049c

08007d64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d72:	f843 0c4c 	str.w	r0, [r3, #-76]
 8007d76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d7a:	f843 1c50 	str.w	r1, [r3, #-80]
 8007d7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d82:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007d86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d8a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <f_open+0x32>
 8007d92:	2309      	movs	r3, #9
 8007d94:	e326      	b.n	80083e4 <f_open+0x680>
	fp->fs = 0;			/* Clear file object */
 8007d96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d9a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8007d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da2:	461a      	mov	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007da8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dac:	461a      	mov	r2, r3
 8007dae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007db2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007db6:	f003 031f 	and.w	r3, r3, #31
 8007dba:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007dbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007dc2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007dc6:	f023 0301 	bic.w	r3, r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	f107 0118 	add.w	r1, r7, #24
 8007dd0:	3910      	subs	r1, #16
 8007dd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007dd6:	3b1c      	subs	r3, #28
 8007dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff fbd3 	bl	8007588 <find_volume>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007de8:	f102 0217 	add.w	r2, r2, #23
 8007dec:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007dee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007df2:	f103 0317 	add.w	r3, r3, #23
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f040 82e1 	bne.w	80083c0 <f_open+0x65c>
		INIT_BUF(dj);
 8007dfe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007e02:	f001 fe3b 	bl	8009a7c <ff_memalloc>
 8007e06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e0a:	f103 030c 	add.w	r3, r3, #12
 8007e0e:	6018      	str	r0, [r3, #0]
 8007e10:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e14:	f103 030c 	add.w	r3, r3, #12
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <f_open+0xce>
 8007e1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e22:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8007e26:	2111      	movs	r1, #17
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fd fba5 	bl	8005578 <unlock_fs>
 8007e2e:	2311      	movs	r3, #17
 8007e30:	e2d8      	b.n	80083e4 <f_open+0x680>
 8007e32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e36:	461a      	mov	r2, r3
 8007e38:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e3c:	f103 030c 	add.w	r3, r3, #12
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8c2 3fe4 	str.w	r3, [r2, #4068]	; 0xfe4
 8007e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f107 0318 	add.w	r3, r7, #24
 8007e50:	3b08      	subs	r3, #8
 8007e52:	f8c2 3fdc 	str.w	r3, [r2, #4060]	; 0xfdc
		res = follow_path(&dj, path);	/* Follow the file path */
 8007e56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e5a:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8007e5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007e62:	3b1c      	subs	r3, #28
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fa66 	bl	8007338 <follow_path>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e72:	f102 0217 	add.w	r2, r2, #23
 8007e76:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007e78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e7c:	f8d3 3fd8 	ldr.w	r3, [r3, #4056]	; 0xfd8
 8007e80:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007e84:	f102 0210 	add.w	r2, r2, #16
 8007e88:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007e8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e8e:	f103 0317 	add.w	r3, r3, #23
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d126      	bne.n	8007ee6 <f_open+0x182>
			if (!dir)	/* Default directory itself */
 8007e98:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007e9c:	f103 0310 	add.w	r3, r3, #16
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d106      	bne.n	8007eb4 <f_open+0x150>
				res = FR_INVALID_NAME;
 8007ea6:	2306      	movs	r3, #6
 8007ea8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007eac:	f102 0217 	add.w	r2, r2, #23
 8007eb0:	7013      	strb	r3, [r2, #0]
 8007eb2:	e018      	b.n	8007ee6 <f_open+0x182>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007eb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eb8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007ebc:	f023 0301 	bic.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bf14      	ite	ne
 8007ec4:	2301      	movne	r3, #1
 8007ec6:	2300      	moveq	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ed0:	3b1c      	subs	r3, #28
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fd fb6f 	bl	80055b8 <chk_lock>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007ee0:	f102 0217 	add.w	r2, r2, #23
 8007ee4:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007ee6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007eea:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007eee:	f003 031c 	and.w	r3, r3, #28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 813c 	beq.w	8008170 <f_open+0x40c>
			if (res != FR_OK) {					/* No file, create new */
 8007ef8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007efc:	f103 0317 	add.w	r3, r3, #23
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d02e      	beq.n	8007f64 <f_open+0x200>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007f06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f0a:	f103 0317 	add.w	r3, r3, #23
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d112      	bne.n	8007f3a <f_open+0x1d6>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f14:	f7fd fbc0 	bl	8005698 <enq_lock>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <f_open+0x1ca>
 8007f1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007f22:	3b1c      	subs	r3, #28
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe ff25 	bl	8006d74 <dir_register>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	e000      	b.n	8007f30 <f_open+0x1cc>
 8007f2e:	2312      	movs	r3, #18
 8007f30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f34:	f102 0217 	add.w	r2, r2, #23
 8007f38:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f44:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007f48:	f043 0308 	orr.w	r3, r3, #8
 8007f4c:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8007f50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f54:	f8d3 3fd8 	ldr.w	r3, [r3, #4056]	; 0xfd8
 8007f58:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f5c:	f102 0210 	add.w	r2, r2, #16
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	e01f      	b.n	8007fa4 <f_open+0x240>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f64:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007f68:	f103 0310 	add.w	r3, r3, #16
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	330b      	adds	r3, #11
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	f003 0311 	and.w	r3, r3, #17
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d006      	beq.n	8007f88 <f_open+0x224>
					res = FR_DENIED;
 8007f7a:	2307      	movs	r3, #7
 8007f7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f80:	f102 0217 	add.w	r2, r2, #23
 8007f84:	7013      	strb	r3, [r2, #0]
 8007f86:	e00d      	b.n	8007fa4 <f_open+0x240>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007f88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f8c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <f_open+0x240>
						res = FR_EXIST;
 8007f98:	2308      	movs	r3, #8
 8007f9a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007f9e:	f102 0217 	add.w	r2, r2, #23
 8007fa2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007fa4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007fa8:	f103 0317 	add.w	r3, r3, #23
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 8110 	bne.w	80081d4 <f_open+0x470>
 8007fb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007fb8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8107 	beq.w	80081d4 <f_open+0x470>
				dw = GET_FATTIME();				/* Created time */
 8007fc6:	f7fd f94d 	bl	8005264 <get_fattime>
 8007fca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007fce:	f103 0308 	add.w	r3, r3, #8
 8007fd2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007fd4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007fd8:	f103 0310 	add.w	r3, r3, #16
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	330e      	adds	r3, #14
 8007fe0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007fe4:	f102 0208 	add.w	r2, r2, #8
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007ff2:	f103 0308 	add.w	r3, r3, #8
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008002:	f103 0310 	add.w	r3, r3, #16
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330f      	adds	r3, #15
 800800a:	b2d2      	uxtb	r2, r2
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008012:	f103 0308 	add.w	r3, r3, #8
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	0c1a      	lsrs	r2, r3, #16
 800801a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800801e:	f103 0310 	add.w	r3, r3, #16
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3310      	adds	r3, #16
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800802e:	f103 0308 	add.w	r3, r3, #8
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	0e1a      	lsrs	r2, r3, #24
 8008036:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800803a:	f103 0310 	add.w	r3, r3, #16
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3311      	adds	r3, #17
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008046:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800804a:	f103 0310 	add.w	r3, r3, #16
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	330b      	adds	r3, #11
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008056:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800805a:	f103 0310 	add.w	r3, r3, #16
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	331c      	adds	r3, #28
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800806a:	f103 0310 	add.w	r3, r3, #16
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	331d      	adds	r3, #29
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800807a:	f103 0310 	add.w	r3, r3, #16
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	331e      	adds	r3, #30
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800808a:	f103 0310 	add.w	r3, r3, #16
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	331f      	adds	r3, #31
 8008092:	2200      	movs	r2, #0
 8008094:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800809a:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 800809e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080a2:	f102 0210 	add.w	r2, r2, #16
 80080a6:	6811      	ldr	r1, [r2, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fbac 	bl	8006806 <ld_clust>
 80080ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80080b2:	f103 0304 	add.w	r3, r3, #4
 80080b6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80080b8:	2100      	movs	r1, #0
 80080ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80080be:	f103 0310 	add.w	r3, r3, #16
 80080c2:	6818      	ldr	r0, [r3, #0]
 80080c4:	f7fe fbce 	bl	8006864 <st_clust>
				dj.fs->wflag = 1;
 80080c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080cc:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 80080d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d4:	2201      	movs	r2, #1
 80080d6:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 80080d8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80080dc:	f103 0304 	add.w	r3, r3, #4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d076      	beq.n	80081d4 <f_open+0x470>
					dw = dj.fs->winsect;
 80080e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80080ea:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 80080ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80080f8:	f102 0208 	add.w	r2, r2, #8
 80080fc:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80080fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008102:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008106:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800810a:	f102 0204 	add.w	r2, r2, #4
 800810e:	6811      	ldr	r1, [r2, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f7fd ffc8 	bl	80060a6 <remove_chain>
 8008116:	4603      	mov	r3, r0
 8008118:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800811c:	f102 0217 	add.w	r2, r2, #23
 8008120:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8008122:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008126:	f103 0317 	add.w	r3, r3, #23
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d151      	bne.n	80081d4 <f_open+0x470>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008130:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008134:	f8d3 2fc4 	ldr.w	r2, [r3, #4036]	; 0xfc4
 8008138:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800813c:	f103 0304 	add.w	r3, r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3b01      	subs	r3, #1
 8008144:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008148:	6113      	str	r3, [r2, #16]
						res = move_window(dj.fs, dw);
 800814a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800814e:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008152:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008156:	f102 0208 	add.w	r2, r2, #8
 800815a:	6811      	ldr	r1, [r2, #0]
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd fc3d 	bl	80059dc <move_window>
 8008162:	4603      	mov	r3, r0
 8008164:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008168:	f102 0217 	add.w	r2, r2, #23
 800816c:	7013      	strb	r3, [r2, #0]
 800816e:	e031      	b.n	80081d4 <f_open+0x470>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008170:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008174:	f103 0317 	add.w	r3, r3, #23
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d12a      	bne.n	80081d4 <f_open+0x470>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800817e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008182:	f103 0310 	add.w	r3, r3, #16
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	330b      	adds	r3, #11
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	f003 0310 	and.w	r3, r3, #16
 8008190:	2b00      	cmp	r3, #0
 8008192:	d006      	beq.n	80081a2 <f_open+0x43e>
					res = FR_NO_FILE;
 8008194:	2304      	movs	r3, #4
 8008196:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800819a:	f102 0217 	add.w	r2, r2, #23
 800819e:	7013      	strb	r3, [r2, #0]
 80081a0:	e018      	b.n	80081d4 <f_open+0x470>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80081a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081a6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d010      	beq.n	80081d4 <f_open+0x470>
 80081b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081b6:	f103 0310 	add.w	r3, r3, #16
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	330b      	adds	r3, #11
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <f_open+0x470>
						res = FR_DENIED;
 80081c8:	2307      	movs	r3, #7
 80081ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80081ce:	f102 0217 	add.w	r2, r2, #23
 80081d2:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80081d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80081d8:	f103 0317 	add.w	r3, r3, #23
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d157      	bne.n	8008292 <f_open+0x52e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80081e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081e6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80081ea:	f003 0308 	and.w	r3, r3, #8
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <f_open+0x4a4>
				mode |= FA__WRITTEN;
 80081f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081f6:	461a      	mov	r2, r3
 80081f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081fc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008200:	f043 0320 	orr.w	r3, r3, #32
 8008204:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008208:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800820c:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800821a:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800821e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008222:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008224:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008228:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800822c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008230:	461a      	mov	r2, r3
 8008232:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008236:	f103 0310 	add.w	r3, r3, #16
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800823e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008242:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008246:	f023 0301 	bic.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	bf14      	ite	ne
 800824e:	2301      	movne	r3, #1
 8008250:	2300      	moveq	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	461a      	mov	r2, r3
 8008256:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800825a:	3b1c      	subs	r3, #28
 800825c:	4611      	mov	r1, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f7fd fa3e 	bl	80056e0 <inc_lock>
 8008264:	4602      	mov	r2, r0
 8008266:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800826a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800826e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008272:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008274:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008278:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800827c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	d105      	bne.n	8008292 <f_open+0x52e>
 8008286:	2302      	movs	r3, #2
 8008288:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800828c:	f102 0217 	add.w	r2, r2, #23
 8008290:	7013      	strb	r3, [r2, #0]
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8008292:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008296:	f103 030c 	add.w	r3, r3, #12
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	f001 fbfa 	bl	8009a94 <ff_memfree>

		if (res == FR_OK) {
 80082a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80082a4:	f103 0317 	add.w	r3, r3, #23
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f040 8088 	bne.w	80083c0 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 80082b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082b4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80082b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082bc:	461a      	mov	r2, r3
 80082be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082c2:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80082c6:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 80082c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082cc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80082d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d4:	2200      	movs	r2, #0
 80082d6:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80082d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082dc:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 80082e0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80082e4:	f102 0210 	add.w	r2, r2, #16
 80082e8:	6811      	ldr	r1, [r2, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fa8b 	bl	8006806 <ld_clust>
 80082f0:	4602      	mov	r2, r0
 80082f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082f6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80082fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fe:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008300:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008304:	f103 0310 	add.w	r3, r3, #16
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	331f      	adds	r3, #31
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	061a      	lsls	r2, r3, #24
 8008310:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008314:	f103 0310 	add.w	r3, r3, #16
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	331e      	adds	r3, #30
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	041b      	lsls	r3, r3, #16
 8008320:	4313      	orrs	r3, r2
 8008322:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008326:	f102 0210 	add.w	r2, r2, #16
 800832a:	6812      	ldr	r2, [r2, #0]
 800832c:	321d      	adds	r2, #29
 800832e:	7812      	ldrb	r2, [r2, #0]
 8008330:	0212      	lsls	r2, r2, #8
 8008332:	4313      	orrs	r3, r2
 8008334:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008338:	f102 0210 	add.w	r2, r2, #16
 800833c:	6812      	ldr	r2, [r2, #0]
 800833e:	321c      	adds	r2, #28
 8008340:	7812      	ldrb	r2, [r2, #0]
 8008342:	4313      	orrs	r3, r2
 8008344:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008348:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800834c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008350:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8008352:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008356:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800835a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835e:	461a      	mov	r2, r3
 8008360:	2300      	movs	r3, #0
 8008362:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8008364:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008368:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800836c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008370:	461a      	mov	r2, r3
 8008372:	2300      	movs	r3, #0
 8008374:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800837a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800837e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008382:	461a      	mov	r2, r3
 8008384:	2300      	movs	r3, #0
 8008386:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008388:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800838c:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 8008390:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008394:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008398:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800839c:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800839e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083a2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80083a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b0:	88da      	ldrh	r2, [r3, #6]
 80083b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083b6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80083ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083be:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80083c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80083c4:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	; 0xfc4
 80083c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80083cc:	f102 0217 	add.w	r2, r2, #23
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fd f8cf 	bl	8005578 <unlock_fs>
 80083da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80083de:	f103 0317 	add.w	r3, r3, #23
 80083e2:	781b      	ldrb	r3, [r3, #0]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08c      	sub	sp, #48	; 0x30
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f7ff fbf7 	bl	8007bfc <validate>
 800840e:	4603      	mov	r3, r0
 8008410:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008412:	7ffb      	ldrb	r3, [r7, #31]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00a      	beq.n	800842e <f_read+0x3e>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	7ffa      	ldrb	r2, [r7, #31]
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd f8a7 	bl	8005578 <unlock_fs>
 800842a:	7ffb      	ldrb	r3, [r7, #31]
 800842c:	e219      	b.n	8008862 <f_read+0x472>
	if (fp->err)								/* Check error */
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008434:	79db      	ldrb	r3, [r3, #7]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d010      	beq.n	800845c <f_read+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008448:	79db      	ldrb	r3, [r3, #7]
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f7fd f893 	bl	8005578 <unlock_fs>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008458:	79db      	ldrb	r3, [r3, #7]
 800845a:	e202      	b.n	8008862 <f_read+0x472>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008462:	799b      	ldrb	r3, [r3, #6]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d109      	bne.n	8008480 <f_read+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2107      	movs	r1, #7
 8008476:	4618      	mov	r0, r3
 8008478:	f7fd f87e 	bl	8005578 <unlock_fs>
 800847c:	2307      	movs	r3, #7
 800847e:	e1f0      	b.n	8008862 <f_read+0x472>
	remain = fp->fsize - fp->fptr;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	429a      	cmp	r2, r3
 800849a:	f240 81d5 	bls.w	8008848 <f_read+0x458>
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80084a2:	e1d1      	b.n	8008848 <f_read+0x458>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084b2:	6812      	ldr	r2, [r2, #0]
 80084b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084b8:	8952      	ldrh	r2, [r2, #10]
 80084ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80084be:	fb01 f202 	mul.w	r2, r1, r2
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f040 8170 	bne.w	80087aa <f_read+0x3ba>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084d8:	6812      	ldr	r2, [r2, #0]
 80084da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084de:	8952      	ldrh	r2, [r2, #10]
 80084e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f2:	789b      	ldrb	r3, [r3, #2]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	4013      	ands	r3, r2
 80084fa:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d153      	bne.n	80085aa <f_read+0x1ba>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d105      	bne.n	800851a <f_read+0x12a>
					clst = fp->sclust;			/* Follow from the origin */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008518:	e01c      	b.n	8008554 <f_read+0x164>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <f_read+0x14a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	4619      	mov	r1, r3
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f7fd fec1 	bl	80062b8 <clmt_clust>
 8008536:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008538:	e00c      	b.n	8008554 <f_read+0x164>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	4619      	mov	r1, r3
 800854c:	4610      	mov	r0, r2
 800854e:	f7fd fb5b 	bl	8005c08 <get_fat>
 8008552:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	2b01      	cmp	r3, #1
 8008558:	d80e      	bhi.n	8008578 <f_read+0x188>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008560:	2202      	movs	r2, #2
 8008562:	71da      	strb	r2, [r3, #7]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2102      	movs	r1, #2
 800856e:	4618      	mov	r0, r3
 8008570:	f7fd f802 	bl	8005578 <unlock_fs>
 8008574:	2302      	movs	r3, #2
 8008576:	e174      	b.n	8008862 <f_read+0x472>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857e:	d10e      	bne.n	800859e <f_read+0x1ae>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008586:	2201      	movs	r2, #1
 8008588:	71da      	strb	r2, [r3, #7]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2101      	movs	r1, #1
 8008594:	4618      	mov	r0, r3
 8008596:	f7fc ffef 	bl	8005578 <unlock_fs>
 800859a:	2301      	movs	r3, #1
 800859c:	e161      	b.n	8008862 <f_read+0x472>
				fp->clust = clst;				/* Update current cluster */
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085a4:	461a      	mov	r2, r3
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f7fd fafe 	bl	8005bbe <clust2sect>
 80085c2:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10e      	bne.n	80085e8 <f_read+0x1f8>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d0:	2202      	movs	r2, #2
 80085d2:	71da      	strb	r2, [r3, #7]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2102      	movs	r1, #2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fc ffca 	bl	8005578 <unlock_fs>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e13c      	b.n	8008862 <f_read+0x472>
			sect += csect;
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	4413      	add	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085fc:	895b      	ldrh	r3, [r3, #10]
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	fbb3 f3f2 	udiv	r3, r3, r2
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	2b00      	cmp	r3, #0
 800860c:	d06e      	beq.n	80086ec <f_read+0x2fc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800860e:	7dfa      	ldrb	r2, [r7, #23]
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	4413      	add	r3, r2
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800861a:	6812      	ldr	r2, [r2, #0]
 800861c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008620:	7892      	ldrb	r2, [r2, #2]
 8008622:	4293      	cmp	r3, r2
 8008624:	d90a      	bls.n	800863c <f_read+0x24c>
					cc = fp->fs->csize - csect;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008632:	789b      	ldrb	r3, [r3, #2]
 8008634:	461a      	mov	r2, r3
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008648:	7858      	ldrb	r0, [r3, #1]
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	6a39      	ldr	r1, [r7, #32]
 8008650:	f7fc fea8 	bl	80053a4 <disk_read>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00e      	beq.n	8008678 <f_read+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008660:	2201      	movs	r2, #1
 8008662:	71da      	strb	r2, [r3, #7]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2101      	movs	r1, #1
 800866e:	4618      	mov	r0, r3
 8008670:	f7fc ff82 	bl	8005578 <unlock_fs>
 8008674:	2301      	movs	r3, #1
 8008676:	e0f4      	b.n	8008862 <f_read+0x472>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800867e:	799b      	ldrb	r3, [r3, #6]
 8008680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008684:	2b00      	cmp	r3, #0
 8008686:	d024      	beq.n	80086d2 <f_read+0x2e2>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008696:	429a      	cmp	r2, r3
 8008698:	d91b      	bls.n	80086d2 <f_read+0x2e2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a0:	699a      	ldr	r2, [r3, #24]
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086b2:	8952      	ldrh	r2, [r2, #10]
 80086b4:	fb02 f303 	mul.w	r3, r2, r3
 80086b8:	6a3a      	ldr	r2, [r7, #32]
 80086ba:	18d0      	adds	r0, r2, r3
 80086bc:	68f9      	ldr	r1, [r7, #12]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ca:	895b      	ldrh	r3, [r3, #10]
 80086cc:	461a      	mov	r2, r3
 80086ce:	f7fc fec7 	bl	8005460 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086de:	895b      	ldrh	r3, [r3, #10]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	fb02 f303 	mul.w	r3, r2, r3
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80086ea:	e095      	b.n	8008818 <f_read+0x428>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d051      	beq.n	800879e <f_read+0x3ae>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008700:	799b      	ldrb	r3, [r3, #6]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	d02b      	beq.n	8008762 <f_read+0x372>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008716:	7858      	ldrb	r0, [r3, #1]
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008720:	699a      	ldr	r2, [r3, #24]
 8008722:	2301      	movs	r3, #1
 8008724:	f7fc fe5e 	bl	80053e4 <disk_write>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00e      	beq.n	800874c <f_read+0x35c>
						ABORT(fp->fs, FR_DISK_ERR);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008734:	2201      	movs	r2, #1
 8008736:	71da      	strb	r2, [r3, #7]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2101      	movs	r1, #1
 8008742:	4618      	mov	r0, r3
 8008744:	f7fc ff18 	bl	8005578 <unlock_fs>
 8008748:	2301      	movs	r3, #1
 800874a:	e08a      	b.n	8008862 <f_read+0x472>
					fp->flag &= ~FA__DIRTY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008752:	799b      	ldrb	r3, [r3, #6]
 8008754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008758:	b2da      	uxtb	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008760:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800876e:	7858      	ldrb	r0, [r3, #1]
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	2301      	movs	r3, #1
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	f7fc fe15 	bl	80053a4 <disk_read>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00e      	beq.n	800879e <f_read+0x3ae>
					ABORT(fp->fs, FR_DISK_ERR);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008786:	2201      	movs	r2, #1
 8008788:	71da      	strb	r2, [r3, #7]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2101      	movs	r1, #1
 8008794:	4618      	mov	r0, r3
 8008796:	f7fc feef 	bl	8005578 <unlock_fs>
 800879a:	2301      	movs	r3, #1
 800879c:	e061      	b.n	8008862 <f_read+0x472>
			}
#endif
			fp->dsect = sect;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a4:	461a      	mov	r2, r3
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b6:	895b      	ldrh	r3, [r3, #10]
 80087b8:	4618      	mov	r0, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087c8:	6812      	ldr	r2, [r2, #0]
 80087ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087ce:	8952      	ldrh	r2, [r2, #10]
 80087d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80087d4:	fb01 f202 	mul.w	r2, r1, r2
 80087d8:	1a9b      	subs	r3, r3, r2
 80087da:	1ac3      	subs	r3, r0, r3
 80087dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80087de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d901      	bls.n	80087ea <f_read+0x3fa>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087f8:	6812      	ldr	r2, [r2, #0]
 80087fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087fe:	8952      	ldrh	r2, [r2, #10]
 8008800:	fbb3 f1f2 	udiv	r1, r3, r2
 8008804:	fb01 f202 	mul.w	r2, r1, r2
 8008808:	1a9b      	subs	r3, r3, r2
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	4413      	add	r3, r2
 800880e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008810:	4619      	mov	r1, r3
 8008812:	6a38      	ldr	r0, [r7, #32]
 8008814:	f7fc fe24 	bl	8005460 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008818:	6a3a      	ldr	r2, [r7, #32]
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	4413      	add	r3, r2
 800881e:	623b      	str	r3, [r7, #32]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008826:	689a      	ldr	r2, [r3, #8]
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	4413      	add	r3, r2
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008832:	6093      	str	r3, [r2, #8]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883a:	441a      	add	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	f47f ae2a 	bne.w	80084a4 <f_read+0xb4>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2100      	movs	r1, #0
 800885a:	4618      	mov	r0, r3
 800885c:	f7fc fe8c 	bl	8005578 <unlock_fs>
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3730      	adds	r7, #48	; 0x30
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b08a      	sub	sp, #40	; 0x28
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	607a      	str	r2, [r7, #4]
 8008876:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7ff f9ba 	bl	8007bfc <validate>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <f_write+0x3e>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	7dfa      	ldrb	r2, [r7, #23]
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fc fe6a 	bl	8005578 <unlock_fs>
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
 80088a6:	e26a      	b.n	8008d7e <f_write+0x514>
	if (fp->err)							/* Check error */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ae:	79db      	ldrb	r3, [r3, #7]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d010      	beq.n	80088d6 <f_write+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c2:	79db      	ldrb	r3, [r3, #7]
 80088c4:	4619      	mov	r1, r3
 80088c6:	4610      	mov	r0, r2
 80088c8:	f7fc fe56 	bl	8005578 <unlock_fs>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d2:	79db      	ldrb	r3, [r3, #7]
 80088d4:	e253      	b.n	8008d7e <f_write+0x514>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088dc:	799b      	ldrb	r3, [r3, #6]
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d109      	bne.n	80088fa <f_write+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2107      	movs	r1, #7
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fc fe41 	bl	8005578 <unlock_fs>
 80088f6:	2307      	movs	r3, #7
 80088f8:	e241      	b.n	8008d7e <f_write+0x514>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	f080 8209 	bcs.w	8008d26 <f_write+0x4bc>
 8008914:	2300      	movs	r3, #0
 8008916:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008918:	e205      	b.n	8008d26 <f_write+0x4bc>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008928:	6812      	ldr	r2, [r2, #0]
 800892a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800892e:	8952      	ldrh	r2, [r2, #10]
 8008930:	fbb3 f1f2 	udiv	r1, r3, r2
 8008934:	fb01 f202 	mul.w	r2, r1, r2
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	2b00      	cmp	r3, #0
 800893c:	f040 8199 	bne.w	8008c72 <f_write+0x408>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800894e:	6812      	ldr	r2, [r2, #0]
 8008950:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008954:	8952      	ldrh	r2, [r2, #10]
 8008956:	fbb3 f3f2 	udiv	r3, r3, r2
 800895a:	b2da      	uxtb	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008968:	789b      	ldrb	r3, [r3, #2]
 800896a:	3b01      	subs	r3, #1
 800896c:	b2db      	uxtb	r3, r3
 800896e:	4013      	ands	r3, r2
 8008970:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8008972:	7dbb      	ldrb	r3, [r7, #22]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d16f      	bne.n	8008a58 <f_write+0x1ee>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d111      	bne.n	80089a8 <f_write+0x13e>
					clst = fp->sclust;		/* Follow from the origin */
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	2b00      	cmp	r3, #0
 8008992:	d126      	bne.n	80089e2 <f_write+0x178>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fd fbe2 	bl	8006168 <create_chain>
 80089a4:	6278      	str	r0, [r7, #36]	; 0x24
 80089a6:	e01c      	b.n	80089e2 <f_write+0x178>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <f_write+0x15e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	4619      	mov	r1, r3
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7fd fc7a 	bl	80062b8 <clmt_clust>
 80089c4:	6278      	str	r0, [r7, #36]	; 0x24
 80089c6:	e00c      	b.n	80089e2 <f_write+0x178>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f7fd fbc4 	bl	8006168 <create_chain>
 80089e0:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 81a3 	beq.w	8008d30 <f_write+0x4c6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d10e      	bne.n	8008a0e <f_write+0x1a4>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089f6:	2202      	movs	r2, #2
 80089f8:	71da      	strb	r2, [r3, #7]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2102      	movs	r1, #2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fc fdb7 	bl	8005578 <unlock_fs>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e1b7      	b.n	8008d7e <f_write+0x514>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a14:	d10e      	bne.n	8008a34 <f_write+0x1ca>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	71da      	strb	r2, [r3, #7]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2101      	movs	r1, #1
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fc fda4 	bl	8005578 <unlock_fs>
 8008a30:	2301      	movs	r3, #1
 8008a32:	e1a4      	b.n	8008d7e <f_write+0x514>
				fp->clust = clst;			/* Update current cluster */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d105      	bne.n	8008a58 <f_write+0x1ee>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a52:	461a      	mov	r2, r3
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5e:	799b      	ldrb	r3, [r3, #6]
 8008a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d02b      	beq.n	8008ac0 <f_write+0x256>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a74:	7858      	ldrb	r0, [r3, #1]
 8008a76:	68f9      	ldr	r1, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a7e:	699a      	ldr	r2, [r3, #24]
 8008a80:	2301      	movs	r3, #1
 8008a82:	f7fc fcaf 	bl	80053e4 <disk_write>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00e      	beq.n	8008aaa <f_write+0x240>
					ABORT(fp->fs, FR_DISK_ERR);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a92:	2201      	movs	r2, #1
 8008a94:	71da      	strb	r2, [r3, #7]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fc fd69 	bl	8005578 <unlock_fs>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e169      	b.n	8008d7e <f_write+0x514>
				fp->flag &= ~FA__DIRTY;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ab0:	799b      	ldrb	r3, [r3, #6]
 8008ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008abe:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	f7fd f873 	bl	8005bbe <clust2sect>
 8008ad8:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10e      	bne.n	8008afe <f_write+0x294>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	71da      	strb	r2, [r3, #7]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2102      	movs	r1, #2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fc fd3f 	bl	8005578 <unlock_fs>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e13f      	b.n	8008d7e <f_write+0x514>
			sect += csect;
 8008afe:	7dbb      	ldrb	r3, [r7, #22]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	4413      	add	r3, r2
 8008b04:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b12:	895b      	ldrh	r3, [r3, #10]
 8008b14:	461a      	mov	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b1c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d071      	beq.n	8008c08 <f_write+0x39e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008b24:	7dba      	ldrb	r2, [r7, #22]
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	4413      	add	r3, r2
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b30:	6812      	ldr	r2, [r2, #0]
 8008b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b36:	7892      	ldrb	r2, [r2, #2]
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d90a      	bls.n	8008b52 <f_write+0x2e8>
					cc = fp->fs->csize - csect;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b48:	789b      	ldrb	r3, [r3, #2]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	7dbb      	ldrb	r3, [r7, #22]
 8008b4e:	1ad3      	subs	r3, r2, r3
 8008b50:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b5e:	7858      	ldrb	r0, [r3, #1]
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	69b9      	ldr	r1, [r7, #24]
 8008b66:	f7fc fc3d 	bl	80053e4 <disk_write>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00e      	beq.n	8008b8e <f_write+0x324>
					ABORT(fp->fs, FR_DISK_ERR);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b76:	2201      	movs	r2, #1
 8008b78:	71da      	strb	r2, [r3, #7]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2101      	movs	r1, #1
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7fc fcf7 	bl	8005578 <unlock_fs>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e0f7      	b.n	8008d7e <f_write+0x514>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b94:	699a      	ldr	r2, [r3, #24]
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d926      	bls.n	8008bee <f_write+0x384>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba8:	699a      	ldr	r2, [r3, #24]
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bb4:	6812      	ldr	r2, [r2, #0]
 8008bb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008bba:	8952      	ldrh	r2, [r2, #10]
 8008bbc:	fb02 f303 	mul.w	r3, r2, r3
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	18d1      	adds	r1, r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd0:	895b      	ldrh	r3, [r3, #10]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f7fc fc44 	bl	8005460 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bde:	799b      	ldrb	r3, [r3, #6]
 8008be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bec:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bfa:	895b      	ldrh	r3, [r3, #10]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	fb02 f303 	mul.w	r3, r2, r3
 8008c04:	623b      	str	r3, [r7, #32]
				continue;
 8008c06:	e076      	b.n	8008cf6 <f_write+0x48c>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d027      	beq.n	8008c66 <f_write+0x3fc>
				if (fp->fptr < fp->fsize &&
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d21d      	bcs.n	8008c66 <f_write+0x3fc>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c36:	7858      	ldrb	r0, [r3, #1]
 8008c38:	68f9      	ldr	r1, [r7, #12]
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	f7fc fbb1 	bl	80053a4 <disk_read>
 8008c42:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00e      	beq.n	8008c66 <f_write+0x3fc>
						ABORT(fp->fs, FR_DISK_ERR);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c4e:	2201      	movs	r2, #1
 8008c50:	71da      	strb	r2, [r3, #7]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fc fc8b 	bl	8005578 <unlock_fs>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e08b      	b.n	8008d7e <f_write+0x514>
			}
#endif
			fp->dsect = sect;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7e:	895b      	ldrh	r3, [r3, #10]
 8008c80:	4618      	mov	r0, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c90:	6812      	ldr	r2, [r2, #0]
 8008c92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c96:	8952      	ldrh	r2, [r2, #10]
 8008c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c9c:	fb01 f202 	mul.w	r2, r1, r2
 8008ca0:	1a9b      	subs	r3, r3, r2
 8008ca2:	1ac3      	subs	r3, r0, r3
 8008ca4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8008ca6:	6a3a      	ldr	r2, [r7, #32]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d901      	bls.n	8008cb2 <f_write+0x448>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cc6:	8952      	ldrh	r2, [r2, #10]
 8008cc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ccc:	fb01 f202 	mul.w	r2, r1, r2
 8008cd0:	1a9b      	subs	r3, r3, r2
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	6a3a      	ldr	r2, [r7, #32]
 8008cd8:	69b9      	ldr	r1, [r7, #24]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fc fbc0 	bl	8005460 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ce6:	799b      	ldrb	r3, [r3, #6]
 8008ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cf4:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	4413      	add	r3, r2
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d10:	6093      	str	r3, [r2, #8]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	441a      	add	r2, r3
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f47f adf6 	bne.w	800891a <f_write+0xb0>
 8008d2e:	e000      	b.n	8008d32 <f_write+0x4c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d30:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d38:	689a      	ldr	r2, [r3, #8]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d907      	bls.n	8008d56 <f_write+0x4ec>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d54:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d5c:	799b      	ldrb	r3, [r3, #6]
 8008d5e:	f043 0320 	orr.w	r3, r3, #32
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d6a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2100      	movs	r1, #0
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fc fbfe 	bl	8005578 <unlock_fs>
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3728      	adds	r7, #40	; 0x28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b086      	sub	sp, #24
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fe ff34 	bl	8007bfc <validate>
 8008d94:	4603      	mov	r3, r0
 8008d96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d98:	7dfb      	ldrb	r3, [r7, #23]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f040 80c4 	bne.w	8008f28 <f_sync+0x1a2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da6:	799b      	ldrb	r3, [r3, #6]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 80bb 	beq.w	8008f28 <f_sync+0x1a2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db8:	799b      	ldrb	r3, [r3, #6]
 8008dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d026      	beq.n	8008e10 <f_sync+0x8a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dce:	7858      	ldrb	r0, [r3, #1]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	2301      	movs	r3, #1
 8008ddc:	f7fc fb02 	bl	80053e4 <disk_write>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <f_sync+0x74>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2101      	movs	r1, #1
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fc fbc1 	bl	8005578 <unlock_fs>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e0a0      	b.n	8008f3c <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e00:	799b      	ldrb	r3, [r3, #6]
 8008e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e0e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e1e:	69db      	ldr	r3, [r3, #28]
 8008e20:	4619      	mov	r1, r3
 8008e22:	4610      	mov	r0, r2
 8008e24:	f7fc fdda 	bl	80059dc <move_window>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d17a      	bne.n	8008f28 <f_sync+0x1a2>
				dir = fp->dir_ptr;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	330b      	adds	r3, #11
 8008e40:	781a      	ldrb	r2, [r3, #0]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	330b      	adds	r3, #11
 8008e46:	f042 0220 	orr.w	r2, r2, #32
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	331c      	adds	r3, #28
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	0a1b      	lsrs	r3, r3, #8
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	331d      	adds	r3, #29
 8008e70:	b2d2      	uxtb	r2, r2
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	0c1a      	lsrs	r2, r3, #16
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	331e      	adds	r3, #30
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	0e1a      	lsrs	r2, r3, #24
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	331f      	adds	r3, #31
 8008e94:	b2d2      	uxtb	r2, r2
 8008e96:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6938      	ldr	r0, [r7, #16]
 8008ea4:	f7fd fcde 	bl	8006864 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8008ea8:	f7fc f9dc 	bl	8005264 <get_fattime>
 8008eac:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	3316      	adds	r3, #22
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	b2d2      	uxtb	r2, r2
 8008eb6:	701a      	strb	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	0a1b      	lsrs	r3, r3, #8
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	3317      	adds	r3, #23
 8008ec4:	b2d2      	uxtb	r2, r2
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	0c1a      	lsrs	r2, r3, #16
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	3318      	adds	r3, #24
 8008ed0:	b2d2      	uxtb	r2, r2
 8008ed2:	701a      	strb	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	0e1a      	lsrs	r2, r3, #24
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	3319      	adds	r3, #25
 8008edc:	b2d2      	uxtb	r2, r2
 8008ede:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	3312      	adds	r3, #18
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	3313      	adds	r3, #19
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ef6:	799b      	ldrb	r3, [r3, #6]
 8008ef8:	f023 0320 	bic.w	r3, r3, #32
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f04:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f12:	2201      	movs	r2, #1
 8008f14:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fc fd8e 	bl	8005a40 <sync_fs>
 8008f24:	4603      	mov	r3, r0
 8008f26:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	7dfa      	ldrb	r2, [r7, #23]
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fc fb1f 	bl	8005578 <unlock_fs>
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ff1a 	bl	8008d86 <f_sync>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d122      	bne.n	8008fa2 <f_close+0x5e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7fe fe4d 	bl	8007bfc <validate>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d11a      	bne.n	8008fa2 <f_close+0x5e>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fc fc6c 	bl	800585c <dec_lock>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d105      	bne.n	8008f9a <f_close+0x56>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f94:	461a      	mov	r2, r3
 8008f96:	2300      	movs	r3, #0
 8008f98:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68b8      	ldr	r0, [r7, #8]
 8008f9e:	f7fc faeb 	bl	8005578 <unlock_fs>
#endif
		}
	}
	return res;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b090      	sub	sp, #64	; 0x40
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fe fe20 	bl	8007bfc <validate>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008fc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00c      	beq.n	8008fe4 <f_lseek+0x38>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fc facd 	bl	8005578 <unlock_fs>
 8008fde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008fe2:	e350      	b.n	8009686 <f_lseek+0x6da>
	if (fp->err)						/* Check error */
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fea:	79db      	ldrb	r3, [r3, #7]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d010      	beq.n	8009012 <f_lseek+0x66>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ffe:	79db      	ldrb	r3, [r3, #7]
 8009000:	4619      	mov	r1, r3
 8009002:	4610      	mov	r0, r2
 8009004:	f7fc fab8 	bl	8005578 <unlock_fs>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800900e:	79db      	ldrb	r3, [r3, #7]
 8009010:	e339      	b.n	8009686 <f_lseek+0x6da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 814c 	beq.w	80092b8 <f_lseek+0x30c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009026:	d17c      	bne.n	8009122 <f_lseek+0x176>
			tbl = fp->cltbl;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	1d1a      	adds	r2, r3, #4
 8009036:	627a      	str	r2, [r7, #36]	; 0x24
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	2302      	movs	r3, #2
 800903e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	2b00      	cmp	r3, #0
 800904e:	d056      	beq.n	80090fe <f_lseek+0x152>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	613b      	str	r3, [r7, #16]
 8009054:	2300      	movs	r3, #0
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	3302      	adds	r3, #2
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009064:	3301      	adds	r3, #1
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009072:	4618      	mov	r0, r3
 8009074:	f7fc fdc8 	bl	8005c08 <get_fat>
 8009078:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2b01      	cmp	r3, #1
 800907e:	d80e      	bhi.n	800909e <f_lseek+0xf2>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009086:	2202      	movs	r2, #2
 8009088:	71da      	strb	r2, [r3, #7]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2102      	movs	r1, #2
 8009094:	4618      	mov	r0, r3
 8009096:	f7fc fa6f 	bl	8005578 <unlock_fs>
 800909a:	2302      	movs	r3, #2
 800909c:	e2f3      	b.n	8009686 <f_lseek+0x6da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a4:	d10e      	bne.n	80090c4 <f_lseek+0x118>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ac:	2201      	movs	r2, #1
 80090ae:	71da      	strb	r2, [r3, #7]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2101      	movs	r1, #1
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fc fa5c 	bl	8005578 <unlock_fs>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e2e0      	b.n	8009686 <f_lseek+0x6da>
					} while (cl == pcl + 1);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3301      	adds	r3, #1
 80090c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d0c7      	beq.n	800905e <f_lseek+0xb2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80090ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d809      	bhi.n	80090ea <f_lseek+0x13e>
						*tbl++ = ncl; *tbl++ = tcl;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	1d1a      	adds	r2, r3, #4
 80090da:	627a      	str	r2, [r7, #36]	; 0x24
 80090dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090de:	601a      	str	r2, [r3, #0]
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	1d1a      	adds	r2, r3, #4
 80090e4:	627a      	str	r2, [r7, #36]	; 0x24
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d3a8      	bcc.n	8009050 <f_lseek+0xa4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009108:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800910a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	429a      	cmp	r2, r3
 8009110:	d803      	bhi.n	800911a <f_lseek+0x16e>
				*tbl = 0;		/* Terminate table */
 8009112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	e2a9      	b.n	800966e <f_lseek+0x6c2>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800911a:	2311      	movs	r3, #17
 800911c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009120:	e2a5      	b.n	800966e <f_lseek+0x6c2>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	429a      	cmp	r2, r3
 800912e:	d904      	bls.n	800913a <f_lseek+0x18e>
				ofs = fp->fsize;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009140:	461a      	mov	r2, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 8290 	beq.w	800966e <f_lseek+0x6c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	3b01      	subs	r3, #1
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7fd f8af 	bl	80062b8 <clmt_clust>
 800915a:	4602      	mov	r2, r0
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009162:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	4619      	mov	r1, r3
 8009176:	4610      	mov	r0, r2
 8009178:	f7fc fd21 	bl	8005bbe <clust2sect>
 800917c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10e      	bne.n	80091a2 <f_lseek+0x1f6>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800918a:	2202      	movs	r2, #2
 800918c:	71da      	strb	r2, [r3, #7]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2102      	movs	r1, #2
 8009198:	4618      	mov	r0, r3
 800919a:	f7fc f9ed 	bl	8005578 <unlock_fs>
 800919e:	2302      	movs	r3, #2
 80091a0:	e271      	b.n	8009686 <f_lseek+0x6da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091ac:	6812      	ldr	r2, [r2, #0]
 80091ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091b2:	8952      	ldrh	r2, [r2, #10]
 80091b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091be:	6812      	ldr	r2, [r2, #0]
 80091c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091c4:	7892      	ldrb	r2, [r2, #2]
 80091c6:	3a01      	subs	r2, #1
 80091c8:	4013      	ands	r3, r2
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	4413      	add	r3, r2
 80091ce:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091de:	6812      	ldr	r2, [r2, #0]
 80091e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091e4:	8952      	ldrh	r2, [r2, #10]
 80091e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80091ea:	fb01 f202 	mul.w	r2, r1, r2
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 823c 	beq.w	800966e <f_lseek+0x6c2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	429a      	cmp	r2, r3
 8009202:	f000 8234 	beq.w	800966e <f_lseek+0x6c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800920c:	799b      	ldrb	r3, [r3, #6]
 800920e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009212:	2b00      	cmp	r3, #0
 8009214:	d02b      	beq.n	800926e <f_lseek+0x2c2>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009222:	7858      	ldrb	r0, [r3, #1]
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922c:	699a      	ldr	r2, [r3, #24]
 800922e:	2301      	movs	r3, #1
 8009230:	f7fc f8d8 	bl	80053e4 <disk_write>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00e      	beq.n	8009258 <f_lseek+0x2ac>
							ABORT(fp->fs, FR_DISK_ERR);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009240:	2201      	movs	r2, #1
 8009242:	71da      	strb	r2, [r3, #7]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2101      	movs	r1, #1
 800924e:	4618      	mov	r0, r3
 8009250:	f7fc f992 	bl	8005578 <unlock_fs>
 8009254:	2301      	movs	r3, #1
 8009256:	e216      	b.n	8009686 <f_lseek+0x6da>
						fp->flag &= ~FA__DIRTY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925e:	799b      	ldrb	r3, [r3, #6]
 8009260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009264:	b2da      	uxtb	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800926c:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927a:	7858      	ldrb	r0, [r3, #1]
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	2301      	movs	r3, #1
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	f7fc f88f 	bl	80053a4 <disk_read>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00e      	beq.n	80092aa <f_lseek+0x2fe>
						ABORT(fp->fs, FR_DISK_ERR);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009292:	2201      	movs	r2, #1
 8009294:	71da      	strb	r2, [r3, #7]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2101      	movs	r1, #1
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fc f969 	bl	8005578 <unlock_fs>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e1ed      	b.n	8009686 <f_lseek+0x6da>
#endif
					fp->dsect = dsc;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b0:	461a      	mov	r2, r3
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	6193      	str	r3, [r2, #24]
 80092b6:	e1da      	b.n	800966e <f_lseek+0x6c2>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d90c      	bls.n	80092e0 <f_lseek+0x334>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092cc:	799b      	ldrb	r3, [r3, #6]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <f_lseek+0x334>
#endif
			) ofs = fp->fsize;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80092ea:	2300      	movs	r3, #0
 80092ec:	637b      	str	r3, [r7, #52]	; 0x34
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f4:	461a      	mov	r2, r3
 80092f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f8:	6093      	str	r3, [r2, #8]
		if (ofs) {
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8128 	beq.w	8009552 <f_lseek+0x5a6>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930e:	789b      	ldrb	r3, [r3, #2]
 8009310:	461a      	mov	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800931e:	895b      	ldrh	r3, [r3, #10]
 8009320:	fb02 f303 	mul.w	r3, r2, r3
 8009324:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d021      	beq.n	8009370 <f_lseek+0x3c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	1e5a      	subs	r2, r3, #1
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	fbb2 f2f3 	udiv	r2, r2, r3
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	1e59      	subs	r1, r3, #1
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009340:	429a      	cmp	r2, r3
 8009342:	d315      	bcc.n	8009370 <f_lseek+0x3c4>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	1e5a      	subs	r2, r3, #1
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	425b      	negs	r3, r3
 800934c:	4013      	ands	r3, r2
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009354:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	63bb      	str	r3, [r7, #56]	; 0x38
 800936e:	e041      	b.n	80093f4 <f_lseek+0x448>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800937a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937c:	2b00      	cmp	r3, #0
 800937e:	d133      	bne.n	80093e8 <f_lseek+0x43c>
					clst = create_chain(fp->fs, 0);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f7fc feec 	bl	8006168 <create_chain>
 8009390:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	2b01      	cmp	r3, #1
 8009396:	d10e      	bne.n	80093b6 <f_lseek+0x40a>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800939e:	2202      	movs	r2, #2
 80093a0:	71da      	strb	r2, [r3, #7]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2102      	movs	r1, #2
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fc f8e3 	bl	8005578 <unlock_fs>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e167      	b.n	8009686 <f_lseek+0x6da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093bc:	d10e      	bne.n	80093dc <f_lseek+0x430>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093c4:	2201      	movs	r2, #1
 80093c6:	71da      	strb	r2, [r3, #7]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2101      	movs	r1, #1
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fc f8d0 	bl	8005578 <unlock_fs>
 80093d8:	2301      	movs	r3, #1
 80093da:	e154      	b.n	8009686 <f_lseek+0x6da>
					fp->sclust = clst;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e2:	461a      	mov	r2, r3
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ee:	461a      	mov	r2, r3
 80093f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f2:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80ab 	beq.w	8009552 <f_lseek+0x5a6>
				while (ofs > bcs) {						/* Cluster following loop */
 80093fc:	e062      	b.n	80094c4 <f_lseek+0x518>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009404:	799b      	ldrb	r3, [r3, #6]
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <f_lseek+0x480>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009418:	4618      	mov	r0, r3
 800941a:	f7fc fea5 	bl	8006168 <create_chain>
 800941e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10b      	bne.n	800943e <f_lseek+0x492>
							ofs = bcs; break;
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	e04f      	b.n	80094cc <f_lseek+0x520>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009436:	4618      	mov	r0, r3
 8009438:	f7fc fbe6 	bl	8005c08 <get_fat>
 800943c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009444:	d10e      	bne.n	8009464 <f_lseek+0x4b8>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944c:	2201      	movs	r2, #1
 800944e:	71da      	strb	r2, [r3, #7]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2101      	movs	r1, #1
 800945a:	4618      	mov	r0, r3
 800945c:	f7fc f88c 	bl	8005578 <unlock_fs>
 8009460:	2301      	movs	r3, #1
 8009462:	e110      	b.n	8009686 <f_lseek+0x6da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	2b01      	cmp	r3, #1
 8009468:	d909      	bls.n	800947e <f_lseek+0x4d2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800947a:	429a      	cmp	r2, r3
 800947c:	d30e      	bcc.n	800949c <f_lseek+0x4f0>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009484:	2202      	movs	r2, #2
 8009486:	71da      	strb	r2, [r3, #7]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2102      	movs	r1, #2
 8009492:	4618      	mov	r0, r3
 8009494:	f7fc f870 	bl	8005578 <unlock_fs>
 8009498:	2302      	movs	r3, #2
 800949a:	e0f4      	b.n	8009686 <f_lseek+0x6da>
					fp->clust = clst;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a2:	461a      	mov	r2, r3
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	4413      	add	r3, r2
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094ba:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80094c4:	683a      	ldr	r2, [r7, #0]
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d898      	bhi.n	80093fe <f_lseek+0x452>
				}
				fp->fptr += ofs;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	4413      	add	r3, r2
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094de:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ec:	895b      	ldrh	r3, [r3, #10]
 80094ee:	461a      	mov	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094f6:	fb01 f202 	mul.w	r2, r1, r2
 80094fa:	1a9b      	subs	r3, r3, r2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d028      	beq.n	8009552 <f_lseek+0x5a6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800950a:	4618      	mov	r0, r3
 800950c:	f7fc fb57 	bl	8005bbe <clust2sect>
 8009510:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10e      	bne.n	8009536 <f_lseek+0x58a>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800951e:	2202      	movs	r2, #2
 8009520:	71da      	strb	r2, [r3, #7]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2102      	movs	r1, #2
 800952c:	4618      	mov	r0, r3
 800952e:	f7fc f823 	bl	8005578 <unlock_fs>
 8009532:	2302      	movs	r3, #2
 8009534:	e0a7      	b.n	8009686 <f_lseek+0x6da>
					nsect += ofs / SS(fp->fs);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009542:	895b      	ldrh	r3, [r3, #10]
 8009544:	461a      	mov	r2, r3
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	fbb3 f3f2 	udiv	r3, r3, r2
 800954c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800954e:	4413      	add	r3, r2
 8009550:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009560:	6812      	ldr	r2, [r2, #0]
 8009562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009566:	8952      	ldrh	r2, [r2, #10]
 8009568:	fbb3 f1f2 	udiv	r1, r3, r2
 800956c:	fb01 f202 	mul.w	r2, r1, r2
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d05e      	beq.n	8009634 <f_lseek+0x688>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009580:	429a      	cmp	r2, r3
 8009582:	d057      	beq.n	8009634 <f_lseek+0x688>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958a:	799b      	ldrb	r3, [r3, #6]
 800958c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d02b      	beq.n	80095ec <f_lseek+0x640>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a0:	7858      	ldrb	r0, [r3, #1]
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095aa:	699a      	ldr	r2, [r3, #24]
 80095ac:	2301      	movs	r3, #1
 80095ae:	f7fb ff19 	bl	80053e4 <disk_write>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00e      	beq.n	80095d6 <f_lseek+0x62a>
					ABORT(fp->fs, FR_DISK_ERR);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095be:	2201      	movs	r2, #1
 80095c0:	71da      	strb	r2, [r3, #7]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2101      	movs	r1, #1
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fb ffd3 	bl	8005578 <unlock_fs>
 80095d2:	2301      	movs	r3, #1
 80095d4:	e057      	b.n	8009686 <f_lseek+0x6da>
				fp->flag &= ~FA__DIRTY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095dc:	799b      	ldrb	r3, [r3, #6]
 80095de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ea:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f8:	7858      	ldrb	r0, [r3, #1]
 80095fa:	6879      	ldr	r1, [r7, #4]
 80095fc:	2301      	movs	r3, #1
 80095fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009600:	f7fb fed0 	bl	80053a4 <disk_read>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00e      	beq.n	8009628 <f_lseek+0x67c>
				ABORT(fp->fs, FR_DISK_ERR);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009610:	2201      	movs	r2, #1
 8009612:	71da      	strb	r2, [r3, #7]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2101      	movs	r1, #1
 800961e:	4618      	mov	r0, r3
 8009620:	f7fb ffaa 	bl	8005578 <unlock_fs>
 8009624:	2301      	movs	r3, #1
 8009626:	e02e      	b.n	8009686 <f_lseek+0x6da>
#endif
			fp->dsect = nsect;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800962e:	461a      	mov	r2, r3
 8009630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009632:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	429a      	cmp	r2, r3
 8009646:	d912      	bls.n	800966e <f_lseek+0x6c2>
			fp->fsize = fp->fptr;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009656:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965e:	799b      	ldrb	r3, [r3, #6]
 8009660:	f043 0320 	orr.w	r3, r3, #32
 8009664:	b2da      	uxtb	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800966c:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800967a:	4611      	mov	r1, r2
 800967c:	4618      	mov	r0, r3
 800967e:	f7fb ff7b 	bl	8005578 <unlock_fs>
 8009682:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009686:	4618      	mov	r0, r3
 8009688:	3740      	adds	r7, #64	; 0x40
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7fe fab0 	bl	8007bfc <validate>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d115      	bne.n	80096d2 <f_truncate+0x44>
		if (fp->err) {						/* Check error */
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ac:	79db      	ldrb	r3, [r3, #7]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d005      	beq.n	80096be <f_truncate+0x30>
			res = (FRESULT)fp->err;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b8:	79db      	ldrb	r3, [r3, #7]
 80096ba:	73fb      	strb	r3, [r7, #15]
 80096bc:	e009      	b.n	80096d2 <f_truncate+0x44>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c4:	799b      	ldrb	r3, [r3, #6]
 80096c6:	f003 0302 	and.w	r3, r3, #2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <f_truncate+0x44>
				res = FR_DENIED;
 80096ce:	2307      	movs	r3, #7
 80096d0:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f040 80b0 	bne.w	800983a <f_truncate+0x1ac>
		if (fp->fsize > fp->fptr) {
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e0:	68da      	ldr	r2, [r3, #12]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	f240 809c 	bls.w	8009828 <f_truncate+0x19a>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096fe:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009706:	799b      	ldrb	r3, [r3, #6]
 8009708:	f043 0320 	orr.w	r3, r3, #32
 800970c:	b2da      	uxtb	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009714:	719a      	strb	r2, [r3, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d114      	bne.n	800974c <f_truncate+0xbe>
				res = remove_chain(fp->fs, fp->sclust);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	4619      	mov	r1, r3
 8009734:	4610      	mov	r0, r2
 8009736:	f7fc fcb6 	bl	80060a6 <remove_chain>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009744:	461a      	mov	r2, r3
 8009746:	2300      	movs	r3, #0
 8009748:	6113      	str	r3, [r2, #16]
 800974a:	e042      	b.n	80097d2 <f_truncate+0x144>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	4619      	mov	r1, r3
 800975e:	4610      	mov	r0, r2
 8009760:	f7fc fa52 	bl	8005c08 <get_fat>
 8009764:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009770:	d101      	bne.n	8009776 <f_truncate+0xe8>
 8009772:	2301      	movs	r3, #1
 8009774:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d101      	bne.n	8009780 <f_truncate+0xf2>
 800977c:	2302      	movs	r3, #2
 800977e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d125      	bne.n	80097d2 <f_truncate+0x144>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	429a      	cmp	r2, r3
 8009798:	d21b      	bcs.n	80097d2 <f_truncate+0x144>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a0:	6818      	ldr	r0, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80097ae:	4619      	mov	r1, r3
 80097b0:	f7fc fb26 	bl	8005e00 <put_fat>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <f_truncate+0x144>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68b9      	ldr	r1, [r7, #8]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fc fc6c 	bl	80060a6 <remove_chain>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d127      	bne.n	8009828 <f_truncate+0x19a>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097de:	799b      	ldrb	r3, [r3, #6]
 80097e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d01f      	beq.n	8009828 <f_truncate+0x19a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f4:	7858      	ldrb	r0, [r3, #1]
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097fe:	699a      	ldr	r2, [r3, #24]
 8009800:	2301      	movs	r3, #1
 8009802:	f7fb fdef 	bl	80053e4 <disk_write>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <f_truncate+0x184>
					res = FR_DISK_ERR;
 800980c:	2301      	movs	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]
 8009810:	e00a      	b.n	8009828 <f_truncate+0x19a>
				else
					fp->flag &= ~FA__DIRTY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009818:	799b      	ldrb	r3, [r3, #6]
 800981a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800981e:	b2da      	uxtb	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009826:	719a      	strb	r2, [r3, #6]
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d005      	beq.n	800983a <f_truncate+0x1ac>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009834:	461a      	mov	r2, r3
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	71d3      	strb	r3, [r2, #7]
	}

	LEAVE_FF(fp->fs, res);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	7bfa      	ldrb	r2, [r7, #15]
 8009844:	4611      	mov	r1, r2
 8009846:	4618      	mov	r0, r3
 8009848:	f7fb fe96 	bl	8005578 <unlock_fs>
 800984c:	7bfb      	ldrb	r3, [r7, #15]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009866:	2301      	movs	r3, #1
 8009868:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800986e:	4b1f      	ldr	r3, [pc, #124]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 8009870:	7a5b      	ldrb	r3, [r3, #9]
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b01      	cmp	r3, #1
 8009876:	d831      	bhi.n	80098dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009878:	4b1c      	ldr	r3, [pc, #112]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 800987a:	7a5b      	ldrb	r3, [r3, #9]
 800987c:	b2db      	uxtb	r3, r3
 800987e:	461a      	mov	r2, r3
 8009880:	4b1a      	ldr	r3, [pc, #104]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 8009882:	2100      	movs	r1, #0
 8009884:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009886:	4b19      	ldr	r3, [pc, #100]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 8009888:	7a5b      	ldrb	r3, [r3, #9]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	4a17      	ldr	r2, [pc, #92]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009896:	4b15      	ldr	r3, [pc, #84]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 8009898:	7a5b      	ldrb	r3, [r3, #9]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	4b13      	ldr	r3, [pc, #76]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 80098a0:	4413      	add	r3, r2
 80098a2:	79fa      	ldrb	r2, [r7, #7]
 80098a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80098a6:	4b11      	ldr	r3, [pc, #68]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 80098a8:	7a5b      	ldrb	r3, [r3, #9]
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	b2d1      	uxtb	r1, r2
 80098b0:	4a0e      	ldr	r2, [pc, #56]	; (80098ec <FATFS_LinkDriverEx+0x94>)
 80098b2:	7251      	strb	r1, [r2, #9]
 80098b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80098b6:	7dbb      	ldrb	r3, [r7, #22]
 80098b8:	3330      	adds	r3, #48	; 0x30
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	3301      	adds	r3, #1
 80098c4:	223a      	movs	r2, #58	; 0x3a
 80098c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	3302      	adds	r3, #2
 80098cc:	222f      	movs	r2, #47	; 0x2f
 80098ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	3303      	adds	r3, #3
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	200004bc 	.word	0x200004bc

080098f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80098fa:	2200      	movs	r2, #0
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff ffaa 	bl	8009858 <FATFS_LinkDriverEx>
 8009904:	4603      	mov	r3, r0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800991c:	88fb      	ldrh	r3, [r7, #6]
 800991e:	2b7f      	cmp	r3, #127	; 0x7f
 8009920:	d802      	bhi.n	8009928 <ff_convert+0x18>
		c = chr;
 8009922:	88fb      	ldrh	r3, [r7, #6]
 8009924:	81fb      	strh	r3, [r7, #14]
 8009926:	e025      	b.n	8009974 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800992e:	88fb      	ldrh	r3, [r7, #6]
 8009930:	2bff      	cmp	r3, #255	; 0xff
 8009932:	d805      	bhi.n	8009940 <ff_convert+0x30>
 8009934:	88fb      	ldrh	r3, [r7, #6]
 8009936:	3b80      	subs	r3, #128	; 0x80
 8009938:	4a12      	ldr	r2, [pc, #72]	; (8009984 <ff_convert+0x74>)
 800993a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800993e:	e000      	b.n	8009942 <ff_convert+0x32>
 8009940:	2300      	movs	r3, #0
 8009942:	81fb      	strh	r3, [r7, #14]
 8009944:	e016      	b.n	8009974 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8009946:	2300      	movs	r3, #0
 8009948:	81fb      	strh	r3, [r7, #14]
 800994a:	e009      	b.n	8009960 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800994c:	89fb      	ldrh	r3, [r7, #14]
 800994e:	4a0d      	ldr	r2, [pc, #52]	; (8009984 <ff_convert+0x74>)
 8009950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009954:	88fa      	ldrh	r2, [r7, #6]
 8009956:	429a      	cmp	r2, r3
 8009958:	d006      	beq.n	8009968 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800995a:	89fb      	ldrh	r3, [r7, #14]
 800995c:	3301      	adds	r3, #1
 800995e:	81fb      	strh	r3, [r7, #14]
 8009960:	89fb      	ldrh	r3, [r7, #14]
 8009962:	2b7f      	cmp	r3, #127	; 0x7f
 8009964:	d9f2      	bls.n	800994c <ff_convert+0x3c>
 8009966:	e000      	b.n	800996a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009968:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800996a:	89fb      	ldrh	r3, [r7, #14]
 800996c:	3380      	adds	r3, #128	; 0x80
 800996e:	b29b      	uxth	r3, r3
 8009970:	b2db      	uxtb	r3, r3
 8009972:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009974:	89fb      	ldrh	r3, [r7, #14]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	0800d784 	.word	0x0800d784

08009988 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	4603      	mov	r3, r0
 8009990:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]
 8009996:	e002      	b.n	800999e <ff_wtoupper+0x16>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3301      	adds	r3, #1
 800999c:	60fb      	str	r3, [r7, #12]
 800999e:	4a0f      	ldr	r2, [pc, #60]	; (80099dc <ff_wtoupper+0x54>)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d006      	beq.n	80099b8 <ff_wtoupper+0x30>
 80099aa:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <ff_wtoupper+0x54>)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b2:	88fa      	ldrh	r2, [r7, #6]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d1ef      	bne.n	8009998 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80099b8:	4a08      	ldr	r2, [pc, #32]	; (80099dc <ff_wtoupper+0x54>)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d004      	beq.n	80099ce <ff_wtoupper+0x46>
 80099c4:	4a06      	ldr	r2, [pc, #24]	; (80099e0 <ff_wtoupper+0x58>)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099cc:	e000      	b.n	80099d0 <ff_wtoupper+0x48>
 80099ce:	88fb      	ldrh	r3, [r7, #6]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	0800d884 	.word	0x0800d884
 80099e0:	0800da64 	.word	0x0800da64

080099e4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	6039      	str	r1, [r7, #0]
 80099ee:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	2300      	movs	r3, #0
 80099f6:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80099f8:	f107 030c 	add.w	r3, r7, #12
 80099fc:	2101      	movs	r1, #1
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 f8fc 	bl	8009bfc <osSemaphoreCreate>
 8009a04:	4602      	mov	r2, r0
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	bf14      	ite	ne
 8009a12:	2301      	movne	r3, #1
 8009a14:	2300      	moveq	r3, #0
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	617b      	str	r3, [r7, #20]
  
  return ret;
 8009a1a:	697b      	ldr	r3, [r7, #20]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f99b 	bl	8009d68 <osSemaphoreDelete>
  return 1;
 8009a32:	2301      	movs	r3, #1
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f907 	bl	8009c60 <osSemaphoreWait>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d101      	bne.n	8009a5c <ff_req_grant+0x20>
  {
    ret = 1;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f944 	bl	8009cfc <osSemaphoreRelease>
}
 8009a74:	bf00      	nop
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f002 fecd 	bl	800c824 <malloc>
 8009a8a:	4603      	mov	r3, r0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Discard the memory block with POSIX API */
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f002 fec9 	bl	800c834 <free>
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009abc:	2b84      	cmp	r3, #132	; 0x84
 8009abe:	d005      	beq.n	8009acc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ac0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3303      	adds	r3, #3
 8009aca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009acc:	68fb      	ldr	r3, [r7, #12]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ae0:	f3ef 8305 	mrs	r3, IPSR
 8009ae4:	607b      	str	r3, [r7, #4]
  return(result);
 8009ae6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bf14      	ite	ne
 8009aec:	2301      	movne	r3, #1
 8009aee:	2300      	moveq	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009b02:	f001 fbdb 	bl	800b2bc <vTaskStartScheduler>
  
  return osOK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b0e:	b089      	sub	sp, #36	; 0x24
 8009b10:	af04      	add	r7, sp, #16
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d020      	beq.n	8009b60 <osThreadCreate+0x54>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01c      	beq.n	8009b60 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685c      	ldr	r4, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681d      	ldr	r5, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691e      	ldr	r6, [r3, #16]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff ffb6 	bl	8009aaa <makeFreeRtosPriority>
 8009b3e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	695b      	ldr	r3, [r3, #20]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b48:	9202      	str	r2, [sp, #8]
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	9100      	str	r1, [sp, #0]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	4632      	mov	r2, r6
 8009b52:	4629      	mov	r1, r5
 8009b54:	4620      	mov	r0, r4
 8009b56:	f001 f83d 	bl	800abd4 <xTaskCreateStatic>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	e01c      	b.n	8009b9a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685c      	ldr	r4, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b6c:	b29e      	uxth	r6, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff ff98 	bl	8009aaa <makeFreeRtosPriority>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	9200      	str	r2, [sp, #0]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	4632      	mov	r2, r6
 8009b88:	4629      	mov	r1, r5
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f001 f87e 	bl	800ac8c <xTaskCreate>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d001      	beq.n	8009b9a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e000      	b.n	8009b9c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ba4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <osDelay+0x16>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	e000      	b.n	8009bbc <osDelay+0x18>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f001 f9ab 	bl	800af18 <vTaskDelay>
  
  return osOK;
 8009bc2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d007      	beq.n	8009bec <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	4619      	mov	r1, r3
 8009be2:	2001      	movs	r0, #1
 8009be4:	f000 fb4c 	bl	800a280 <xQueueCreateMutexStatic>
 8009be8:	4603      	mov	r3, r0
 8009bea:	e003      	b.n	8009bf4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009bec:	2001      	movs	r0, #1
 8009bee:	f000 fb2f 	bl	800a250 <xQueueCreateMutex>
 8009bf2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af02      	add	r7, sp, #8
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00f      	beq.n	8009c2e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d10a      	bne.n	8009c2a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	2203      	movs	r2, #3
 8009c1a:	9200      	str	r2, [sp, #0]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2100      	movs	r1, #0
 8009c20:	2001      	movs	r0, #1
 8009c22:	f000 fa27 	bl	800a074 <xQueueGenericCreateStatic>
 8009c26:	4603      	mov	r3, r0
 8009c28:	e016      	b.n	8009c58 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	e014      	b.n	8009c58 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d110      	bne.n	8009c56 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009c34:	2203      	movs	r2, #3
 8009c36:	2100      	movs	r1, #0
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f000 fa92 	bl	800a162 <xQueueGenericCreate>
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <osSemaphoreCreate+0x56>
 8009c46:	2300      	movs	r3, #0
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 fb33 	bl	800a2b8 <xQueueGenericSend>
      return sema;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	e000      	b.n	8009c58 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009c56:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009c74:	2380      	movs	r3, #128	; 0x80
 8009c76:	e03a      	b.n	8009cee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	d103      	bne.n	8009c8c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009c84:	f04f 33ff 	mov.w	r3, #4294967295
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e009      	b.n	8009ca0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d006      	beq.n	8009ca0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <osSemaphoreWait+0x40>
      ticks = 1;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009ca0:	f7ff ff1b 	bl	8009ada <inHandlerMode>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d017      	beq.n	8009cda <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009caa:	f107 0308 	add.w	r3, r7, #8
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fd98 	bl	800a7e8 <xQueueReceiveFromISR>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d001      	beq.n	8009cc2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009cbe:	23ff      	movs	r3, #255	; 0xff
 8009cc0:	e015      	b.n	8009cee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d011      	beq.n	8009cec <osSemaphoreWait+0x8c>
 8009cc8:	4b0b      	ldr	r3, [pc, #44]	; (8009cf8 <osSemaphoreWait+0x98>)
 8009cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cce:	601a      	str	r2, [r3, #0]
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	e008      	b.n	8009cec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fc77 	bl	800a5d0 <xQueueSemaphoreTake>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d001      	beq.n	8009cec <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009ce8:	23ff      	movs	r3, #255	; 0xff
 8009cea:	e000      	b.n	8009cee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	e000ed04 	.word	0xe000ed04

08009cfc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009d0c:	f7ff fee5 	bl	8009ada <inHandlerMode>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d016      	beq.n	8009d44 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fbc9 	bl	800a4b4 <xQueueGiveFromISR>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d001      	beq.n	8009d2c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009d28:	23ff      	movs	r3, #255	; 0xff
 8009d2a:	e017      	b.n	8009d5c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d013      	beq.n	8009d5a <osSemaphoreRelease+0x5e>
 8009d32:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <osSemaphoreRelease+0x68>)
 8009d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	e00a      	b.n	8009d5a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009d44:	2300      	movs	r3, #0
 8009d46:	2200      	movs	r2, #0
 8009d48:	2100      	movs	r1, #0
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fab4 	bl	800a2b8 <xQueueGenericSend>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d001      	beq.n	8009d5a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009d56:	23ff      	movs	r3, #255	; 0xff
 8009d58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	e000ed04 	.word	0xe000ed04

08009d68 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009d70:	f7ff feb3 	bl	8009ada <inHandlerMode>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009d7a:	2382      	movs	r3, #130	; 0x82
 8009d7c:	e003      	b.n	8009d86 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fdb2 	bl	800a8e8 <vQueueDelete>

  return osOK; 
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009d8e:	b590      	push	{r4, r7, lr}
 8009d90:	b085      	sub	sp, #20
 8009d92:	af02      	add	r7, sp, #8
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d011      	beq.n	8009dc4 <osMessageCreate+0x36>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00d      	beq.n	8009dc4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6859      	ldr	r1, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	2400      	movs	r4, #0
 8009dba:	9400      	str	r4, [sp, #0]
 8009dbc:	f000 f95a 	bl	800a074 <xQueueGenericCreateStatic>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	e008      	b.n	8009dd6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4619      	mov	r1, r3
 8009dd0:	f000 f9c7 	bl	800a162 <xQueueGenericCreate>
 8009dd4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd90      	pop	{r4, r7, pc}

08009dde <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 f8ca 	bl	800af80 <vTaskSuspend>
  
  return osOK;
 8009dec:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8009e00:	f7ff fe6b 	bl	8009ada <inHandlerMode>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00e      	beq.n	8009e28 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 f9e4 	bl	800b1d8 <xTaskResumeFromISR>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d10b      	bne.n	8009e2e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8009e16:	4b08      	ldr	r3, [pc, #32]	; (8009e38 <osThreadResume+0x40>)
 8009e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	e002      	b.n	8009e2e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f001 f977 	bl	800b11c <vTaskResume>
  }
  return osOK;
 8009e2e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	e000ed04 	.word	0xe000ed04

08009e3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f103 0208 	add.w	r2, r3, #8
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f04f 32ff 	mov.w	r2, #4294967295
 8009e54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f103 0208 	add.w	r2, r3, #8
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f103 0208 	add.w	r2, r3, #8
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	1c5a      	adds	r2, r3, #1
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	601a      	str	r2, [r3, #0]
}
 8009ed2:	bf00      	nop
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b085      	sub	sp, #20
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef4:	d103      	bne.n	8009efe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	e00c      	b.n	8009f18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	3308      	adds	r3, #8
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	e002      	b.n	8009f0c <vListInsert+0x2e>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68ba      	ldr	r2, [r7, #8]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d2f6      	bcs.n	8009f06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	601a      	str	r2, [r3, #0]
}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6892      	ldr	r2, [r2, #8]
 8009f66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	6852      	ldr	r2, [r2, #4]
 8009f70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d103      	bne.n	8009f84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	1e5a      	subs	r2, r3, #1
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10a      	bne.n	8009fce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fce:	f002 f901 	bl	800c1d4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fda:	68f9      	ldr	r1, [r7, #12]
 8009fdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fde:	fb01 f303 	mul.w	r3, r1, r3
 8009fe2:	441a      	add	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffe:	3b01      	subs	r3, #1
 800a000:	68f9      	ldr	r1, [r7, #12]
 800a002:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a004:	fb01 f303 	mul.w	r3, r1, r3
 800a008:	441a      	add	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	22ff      	movs	r2, #255	; 0xff
 800a012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	22ff      	movs	r2, #255	; 0xff
 800a01a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d114      	bne.n	800a04e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d01a      	beq.n	800a062 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3310      	adds	r3, #16
 800a030:	4618      	mov	r0, r3
 800a032:	f001 fb9b 	bl	800b76c <xTaskRemoveFromEventList>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d012      	beq.n	800a062 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a03c:	4b0c      	ldr	r3, [pc, #48]	; (800a070 <xQueueGenericReset+0xcc>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	e009      	b.n	800a062 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3310      	adds	r3, #16
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff fef2 	bl	8009e3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	3324      	adds	r3, #36	; 0x24
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff feed 	bl	8009e3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a062:	f002 f8e7 	bl	800c234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a066:	2301      	movs	r3, #1
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08e      	sub	sp, #56	; 0x38
 800a078:	af02      	add	r7, sp, #8
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10a      	bne.n	800a09e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <xQueueGenericCreateStatic+0x52>
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <xQueueGenericCreateStatic+0x56>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e000      	b.n	800a0cc <xQueueGenericCreateStatic+0x58>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	623b      	str	r3, [r7, #32]
}
 800a0e2:	bf00      	nop
 800a0e4:	e7fe      	b.n	800a0e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d102      	bne.n	800a0f2 <xQueueGenericCreateStatic+0x7e>
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <xQueueGenericCreateStatic+0x82>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <xQueueGenericCreateStatic+0x84>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10a      	bne.n	800a112 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	61fb      	str	r3, [r7, #28]
}
 800a10e:	bf00      	nop
 800a110:	e7fe      	b.n	800a110 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a112:	2348      	movs	r3, #72	; 0x48
 800a114:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2b48      	cmp	r3, #72	; 0x48
 800a11a:	d00a      	beq.n	800a132 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	61bb      	str	r3, [r7, #24]
}
 800a12e:	bf00      	nop
 800a130:	e7fe      	b.n	800a130 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00d      	beq.n	800a158 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a144:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	4613      	mov	r3, r2
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 f843 	bl	800a1de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3730      	adds	r7, #48	; 0x30
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a162:	b580      	push	{r7, lr}
 800a164:	b08a      	sub	sp, #40	; 0x28
 800a166:	af02      	add	r7, sp, #8
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	4613      	mov	r3, r2
 800a16e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10a      	bne.n	800a18c <xQueueGenericCreate+0x2a>
	__asm volatile
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	613b      	str	r3, [r7, #16]
}
 800a188:	bf00      	nop
 800a18a:	e7fe      	b.n	800a18a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d102      	bne.n	800a198 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
 800a196:	e004      	b.n	800a1a2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	fb02 f303 	mul.w	r3, r2, r3
 800a1a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	3348      	adds	r3, #72	; 0x48
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f002 f936 	bl	800c418 <pvPortMalloc>
 800a1ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00f      	beq.n	800a1d4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	3348      	adds	r3, #72	; 0x48
 800a1b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1c2:	79fa      	ldrb	r2, [r7, #7]
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 f805 	bl	800a1de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
	}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3720      	adds	r7, #32
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	e002      	b.n	800a200 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a20c:	2101      	movs	r1, #1
 800a20e:	69b8      	ldr	r0, [r7, #24]
 800a210:	f7ff fec8 	bl	8009fa4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a214:	bf00      	nop
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00e      	beq.n	800a248 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a23c:	2300      	movs	r3, #0
 800a23e:	2200      	movs	r2, #0
 800a240:	2100      	movs	r1, #0
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f838 	bl	800a2b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a248:	bf00      	nop
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	4603      	mov	r3, r0
 800a258:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a25a:	2301      	movs	r3, #1
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	2300      	movs	r3, #0
 800a260:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a262:	79fb      	ldrb	r3, [r7, #7]
 800a264:	461a      	mov	r2, r3
 800a266:	6939      	ldr	r1, [r7, #16]
 800a268:	6978      	ldr	r0, [r7, #20]
 800a26a:	f7ff ff7a 	bl	800a162 <xQueueGenericCreate>
 800a26e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7ff ffd3 	bl	800a21c <prvInitialiseMutex>

		return pxNewQueue;
 800a276:	68fb      	ldr	r3, [r7, #12]
	}
 800a278:	4618      	mov	r0, r3
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a280:	b580      	push	{r7, lr}
 800a282:	b088      	sub	sp, #32
 800a284:	af02      	add	r7, sp, #8
 800a286:	4603      	mov	r3, r0
 800a288:	6039      	str	r1, [r7, #0]
 800a28a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a28c:	2301      	movs	r3, #1
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	2300      	movs	r3, #0
 800a292:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a294:	79fb      	ldrb	r3, [r7, #7]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	2200      	movs	r2, #0
 800a29c:	6939      	ldr	r1, [r7, #16]
 800a29e:	6978      	ldr	r0, [r7, #20]
 800a2a0:	f7ff fee8 	bl	800a074 <xQueueGenericCreateStatic>
 800a2a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f7ff ffb8 	bl	800a21c <prvInitialiseMutex>

		return pxNewQueue;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
	}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08e      	sub	sp, #56	; 0x38
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10a      	bne.n	800a2ea <xQueueGenericSend+0x32>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <xQueueGenericSend+0x40>
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <xQueueGenericSend+0x44>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e000      	b.n	800a2fe <xQueueGenericSend+0x46>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <xQueueGenericSend+0x60>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d103      	bne.n	800a326 <xQueueGenericSend+0x6e>
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <xQueueGenericSend+0x72>
 800a326:	2301      	movs	r3, #1
 800a328:	e000      	b.n	800a32c <xQueueGenericSend+0x74>
 800a32a:	2300      	movs	r3, #0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10a      	bne.n	800a346 <xQueueGenericSend+0x8e>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	623b      	str	r3, [r7, #32]
}
 800a342:	bf00      	nop
 800a344:	e7fe      	b.n	800a344 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a346:	f001 fbd7 	bl	800baf8 <xTaskGetSchedulerState>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d102      	bne.n	800a356 <xQueueGenericSend+0x9e>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <xQueueGenericSend+0xa2>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <xQueueGenericSend+0xa4>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xQueueGenericSend+0xbe>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	61fb      	str	r3, [r7, #28]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a376:	f001 ff2d 	bl	800c1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a382:	429a      	cmp	r2, r3
 800a384:	d302      	bcc.n	800a38c <xQueueGenericSend+0xd4>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d129      	bne.n	800a3e0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	68b9      	ldr	r1, [r7, #8]
 800a390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a392:	f000 fae4 	bl	800a95e <prvCopyDataToQueue>
 800a396:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d010      	beq.n	800a3c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a2:	3324      	adds	r3, #36	; 0x24
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f001 f9e1 	bl	800b76c <xTaskRemoveFromEventList>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d013      	beq.n	800a3d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3b0:	4b3f      	ldr	r3, [pc, #252]	; (800a4b0 <xQueueGenericSend+0x1f8>)
 800a3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	e00a      	b.n	800a3d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d007      	beq.n	800a3d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3c8:	4b39      	ldr	r3, [pc, #228]	; (800a4b0 <xQueueGenericSend+0x1f8>)
 800a3ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ce:	601a      	str	r2, [r3, #0]
 800a3d0:	f3bf 8f4f 	dsb	sy
 800a3d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3d8:	f001 ff2c 	bl	800c234 <vPortExitCritical>
				return pdPASS;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e063      	b.n	800a4a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d103      	bne.n	800a3ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3e6:	f001 ff25 	bl	800c234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e05c      	b.n	800a4a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d106      	bne.n	800a402 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3f4:	f107 0314 	add.w	r3, r7, #20
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 fa19 	bl	800b830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3fe:	2301      	movs	r3, #1
 800a400:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a402:	f001 ff17 	bl	800c234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a406:	f000 ffc3 	bl	800b390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a40a:	f001 fee3 	bl	800c1d4 <vPortEnterCritical>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a414:	b25b      	sxtb	r3, r3
 800a416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41a:	d103      	bne.n	800a424 <xQueueGenericSend+0x16c>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a42a:	b25b      	sxtb	r3, r3
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a430:	d103      	bne.n	800a43a <xQueueGenericSend+0x182>
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a43a:	f001 fefb 	bl	800c234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a43e:	1d3a      	adds	r2, r7, #4
 800a440:	f107 0314 	add.w	r3, r7, #20
 800a444:	4611      	mov	r1, r2
 800a446:	4618      	mov	r0, r3
 800a448:	f001 fa08 	bl	800b85c <xTaskCheckForTimeOut>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d124      	bne.n	800a49c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a452:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a454:	f000 fb7b 	bl	800ab4e <prvIsQueueFull>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d018      	beq.n	800a490 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	3310      	adds	r3, #16
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f001 f95c 	bl	800b724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a46c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46e:	f000 fb06 	bl	800aa7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a472:	f000 ff9b 	bl	800b3ac <xTaskResumeAll>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f47f af7c 	bne.w	800a376 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a47e:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <xQueueGenericSend+0x1f8>)
 800a480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a484:	601a      	str	r2, [r3, #0]
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	e772      	b.n	800a376 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a492:	f000 faf4 	bl	800aa7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a496:	f000 ff89 	bl	800b3ac <xTaskResumeAll>
 800a49a:	e76c      	b.n	800a376 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a49c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a49e:	f000 faee 	bl	800aa7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4a2:	f000 ff83 	bl	800b3ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4a6:	2300      	movs	r3, #0
		}
	}
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3738      	adds	r7, #56	; 0x38
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	e000ed04 	.word	0xe000ed04

0800a4b4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08e      	sub	sp, #56	; 0x38
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10a      	bne.n	800a4de <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	623b      	str	r3, [r7, #32]
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <xQueueGiveFromISR+0x48>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	61fb      	str	r3, [r7, #28]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d103      	bne.n	800a50c <xQueueGiveFromISR+0x58>
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <xQueueGiveFromISR+0x5c>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e000      	b.n	800a512 <xQueueGiveFromISR+0x5e>
 800a510:	2300      	movs	r3, #0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10a      	bne.n	800a52c <xQueueGiveFromISR+0x78>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	61bb      	str	r3, [r7, #24]
}
 800a528:	bf00      	nop
 800a52a:	e7fe      	b.n	800a52a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a52c:	f001 ff34 	bl	800c398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a530:	f3ef 8211 	mrs	r2, BASEPRI
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	617a      	str	r2, [r7, #20]
 800a546:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a548:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a550:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a558:	429a      	cmp	r2, r3
 800a55a:	d22b      	bcs.n	800a5b4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a568:	1c5a      	adds	r2, r3, #1
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a56e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d112      	bne.n	800a59e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d016      	beq.n	800a5ae <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	3324      	adds	r3, #36	; 0x24
 800a584:	4618      	mov	r0, r3
 800a586:	f001 f8f1 	bl	800b76c <xTaskRemoveFromEventList>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00e      	beq.n	800a5ae <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00b      	beq.n	800a5ae <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2201      	movs	r2, #1
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	e007      	b.n	800a5ae <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a59e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	b25a      	sxtb	r2, r3
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a5b2:	e001      	b.n	800a5b8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ba:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3738      	adds	r7, #56	; 0x38
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08e      	sub	sp, #56	; 0x38
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10a      	bne.n	800a602 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	623b      	str	r3, [r7, #32]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	61fb      	str	r3, [r7, #28]
}
 800a61c:	bf00      	nop
 800a61e:	e7fe      	b.n	800a61e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a620:	f001 fa6a 	bl	800baf8 <xTaskGetSchedulerState>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d102      	bne.n	800a630 <xQueueSemaphoreTake+0x60>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <xQueueSemaphoreTake+0x64>
 800a630:	2301      	movs	r3, #1
 800a632:	e000      	b.n	800a636 <xQueueSemaphoreTake+0x66>
 800a634:	2300      	movs	r3, #0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10a      	bne.n	800a650 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	61bb      	str	r3, [r7, #24]
}
 800a64c:	bf00      	nop
 800a64e:	e7fe      	b.n	800a64e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a650:	f001 fdc0 	bl	800c1d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d024      	beq.n	800a6aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	1e5a      	subs	r2, r3, #1
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d104      	bne.n	800a67a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a670:	f001 fc0c 	bl	800be8c <pvTaskIncrementMutexHeldCount>
 800a674:	4602      	mov	r2, r0
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00f      	beq.n	800a6a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	3310      	adds	r3, #16
 800a686:	4618      	mov	r0, r3
 800a688:	f001 f870 	bl	800b76c <xTaskRemoveFromEventList>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d007      	beq.n	800a6a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a692:	4b54      	ldr	r3, [pc, #336]	; (800a7e4 <xQueueSemaphoreTake+0x214>)
 800a694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6a2:	f001 fdc7 	bl	800c234 <vPortExitCritical>
				return pdPASS;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e097      	b.n	800a7da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d111      	bne.n	800a6d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00a      	beq.n	800a6cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	617b      	str	r3, [r7, #20]
}
 800a6c8:	bf00      	nop
 800a6ca:	e7fe      	b.n	800a6ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6cc:	f001 fdb2 	bl	800c234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e082      	b.n	800a7da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d106      	bne.n	800a6e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6da:	f107 030c 	add.w	r3, r7, #12
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f001 f8a6 	bl	800b830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e8:	f001 fda4 	bl	800c234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6ec:	f000 fe50 	bl	800b390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6f0:	f001 fd70 	bl	800c1d4 <vPortEnterCritical>
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6fa:	b25b      	sxtb	r3, r3
 800a6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a700:	d103      	bne.n	800a70a <xQueueSemaphoreTake+0x13a>
 800a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a710:	b25b      	sxtb	r3, r3
 800a712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a716:	d103      	bne.n	800a720 <xQueueSemaphoreTake+0x150>
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a720:	f001 fd88 	bl	800c234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a724:	463a      	mov	r2, r7
 800a726:	f107 030c 	add.w	r3, r7, #12
 800a72a:	4611      	mov	r1, r2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f001 f895 	bl	800b85c <xTaskCheckForTimeOut>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d132      	bne.n	800a79e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a738:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a73a:	f000 f9f2 	bl	800ab22 <prvIsQueueEmpty>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d026      	beq.n	800a792 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d109      	bne.n	800a760 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a74c:	f001 fd42 	bl	800c1d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	4618      	mov	r0, r3
 800a756:	f001 f9ed 	bl	800bb34 <xTaskPriorityInherit>
 800a75a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a75c:	f001 fd6a 	bl	800c234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a762:	3324      	adds	r3, #36	; 0x24
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 ffdb 	bl	800b724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a76e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a770:	f000 f985 	bl	800aa7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a774:	f000 fe1a 	bl	800b3ac <xTaskResumeAll>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f47f af68 	bne.w	800a650 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a780:	4b18      	ldr	r3, [pc, #96]	; (800a7e4 <xQueueSemaphoreTake+0x214>)
 800a782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	e75e      	b.n	800a650 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a794:	f000 f973 	bl	800aa7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a798:	f000 fe08 	bl	800b3ac <xTaskResumeAll>
 800a79c:	e758      	b.n	800a650 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a79e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7a0:	f000 f96d 	bl	800aa7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7a4:	f000 fe02 	bl	800b3ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7aa:	f000 f9ba 	bl	800ab22 <prvIsQueueEmpty>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f43f af4d 	beq.w	800a650 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00d      	beq.n	800a7d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a7bc:	f001 fd0a 	bl	800c1d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a7c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7c2:	f000 f8b4 	bl	800a92e <prvGetDisinheritPriorityAfterTimeout>
 800a7c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f001 fabc 	bl	800bd4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a7d4:	f001 fd2e 	bl	800c234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3738      	adds	r7, #56	; 0x38
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	e000ed04 	.word	0xe000ed04

0800a7e8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b08e      	sub	sp, #56	; 0x38
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10a      	bne.n	800a814 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	623b      	str	r3, [r7, #32]
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d103      	bne.n	800a822 <xQueueReceiveFromISR+0x3a>
 800a81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d101      	bne.n	800a826 <xQueueReceiveFromISR+0x3e>
 800a822:	2301      	movs	r3, #1
 800a824:	e000      	b.n	800a828 <xQueueReceiveFromISR+0x40>
 800a826:	2300      	movs	r3, #0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10a      	bne.n	800a842 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	61fb      	str	r3, [r7, #28]
}
 800a83e:	bf00      	nop
 800a840:	e7fe      	b.n	800a840 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a842:	f001 fda9 	bl	800c398 <vPortValidateInterruptPriority>
	__asm volatile
 800a846:	f3ef 8211 	mrs	r2, BASEPRI
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	61ba      	str	r2, [r7, #24]
 800a85c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a85e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a860:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a866:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d02f      	beq.n	800a8ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a878:	68b9      	ldr	r1, [r7, #8]
 800a87a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a87c:	f000 f8d9 	bl	800aa32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	1e5a      	subs	r2, r3, #1
 800a884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a886:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a888:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a890:	d112      	bne.n	800a8b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d016      	beq.n	800a8c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89c:	3310      	adds	r3, #16
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 ff64 	bl	800b76c <xTaskRemoveFromEventList>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00e      	beq.n	800a8c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00b      	beq.n	800a8c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	e007      	b.n	800a8c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8bc:	3301      	adds	r3, #1
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	b25a      	sxtb	r2, r3
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a8cc:	e001      	b.n	800a8d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f383 8811 	msr	BASEPRI, r3
}
 800a8dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3738      	adds	r7, #56	; 0x38
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10a      	bne.n	800a910 <vQueueDelete+0x28>
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	60bb      	str	r3, [r7, #8]
}
 800a90c:	bf00      	nop
 800a90e:	e7fe      	b.n	800a90e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f000 f935 	bl	800ab80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d102      	bne.n	800a926 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f001 fe3d 	bl	800c5a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a926:	bf00      	nop
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d006      	beq.n	800a94c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f1c3 0307 	rsb	r3, r3, #7
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e001      	b.n	800a950 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a950:	68fb      	ldr	r3, [r7, #12]
	}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b086      	sub	sp, #24
 800a962:	af00      	add	r7, sp, #0
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a972:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10d      	bne.n	800a998 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d14d      	bne.n	800aa20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	4618      	mov	r0, r3
 800a98a:	f001 f959 	bl	800bc40 <xTaskPriorityDisinherit>
 800a98e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	605a      	str	r2, [r3, #4]
 800a996:	e043      	b.n	800aa20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d119      	bne.n	800a9d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6898      	ldr	r0, [r3, #8]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	68b9      	ldr	r1, [r7, #8]
 800a9aa:	f001 ff4b 	bl	800c844 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b6:	441a      	add	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	689a      	ldr	r2, [r3, #8]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d32b      	bcc.n	800aa20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	609a      	str	r2, [r3, #8]
 800a9d0:	e026      	b.n	800aa20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	68d8      	ldr	r0, [r3, #12]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9da:	461a      	mov	r2, r3
 800a9dc:	68b9      	ldr	r1, [r7, #8]
 800a9de:	f001 ff31 	bl	800c844 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ea:	425b      	negs	r3, r3
 800a9ec:	441a      	add	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d207      	bcs.n	800aa0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	685a      	ldr	r2, [r3, #4]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	425b      	negs	r3, r3
 800aa08:	441a      	add	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d105      	bne.n	800aa20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	1c5a      	adds	r2, r3, #1
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aa28:	697b      	ldr	r3, [r7, #20]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d018      	beq.n	800aa76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	441a      	add	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68da      	ldr	r2, [r3, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d303      	bcc.n	800aa66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68d9      	ldr	r1, [r3, #12]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	461a      	mov	r2, r3
 800aa70:	6838      	ldr	r0, [r7, #0]
 800aa72:	f001 fee7 	bl	800c844 <memcpy>
	}
}
 800aa76:	bf00      	nop
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa86:	f001 fba5 	bl	800c1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa92:	e011      	b.n	800aab8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d012      	beq.n	800aac2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	3324      	adds	r3, #36	; 0x24
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fe63 	bl	800b76c <xTaskRemoveFromEventList>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aaac:	f000 ff38 	bl	800b920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dce9      	bgt.n	800aa94 <prvUnlockQueue+0x16>
 800aac0:	e000      	b.n	800aac4 <prvUnlockQueue+0x46>
					break;
 800aac2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	22ff      	movs	r2, #255	; 0xff
 800aac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aacc:	f001 fbb2 	bl	800c234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aad0:	f001 fb80 	bl	800c1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aada:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aadc:	e011      	b.n	800ab02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d012      	beq.n	800ab0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3310      	adds	r3, #16
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fe3e 	bl	800b76c <xTaskRemoveFromEventList>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aaf6:	f000 ff13 	bl	800b920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dce9      	bgt.n	800aade <prvUnlockQueue+0x60>
 800ab0a:	e000      	b.n	800ab0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	22ff      	movs	r2, #255	; 0xff
 800ab12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ab16:	f001 fb8d 	bl	800c234 <vPortExitCritical>
}
 800ab1a:	bf00      	nop
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab2a:	f001 fb53 	bl	800c1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d102      	bne.n	800ab3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab36:	2301      	movs	r3, #1
 800ab38:	60fb      	str	r3, [r7, #12]
 800ab3a:	e001      	b.n	800ab40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab40:	f001 fb78 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800ab44:	68fb      	ldr	r3, [r7, #12]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab56:	f001 fb3d 	bl	800c1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d102      	bne.n	800ab6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab66:	2301      	movs	r3, #1
 800ab68:	60fb      	str	r3, [r7, #12]
 800ab6a:	e001      	b.n	800ab70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab70:	f001 fb60 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800ab74:	68fb      	ldr	r3, [r7, #12]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab88:	2300      	movs	r3, #0
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	e016      	b.n	800abbc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ab8e:	4a10      	ldr	r2, [pc, #64]	; (800abd0 <vQueueUnregisterQueue+0x50>)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	4413      	add	r3, r2
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d10b      	bne.n	800abb6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ab9e:	4a0c      	ldr	r2, [pc, #48]	; (800abd0 <vQueueUnregisterQueue+0x50>)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2100      	movs	r1, #0
 800aba4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aba8:	4a09      	ldr	r2, [pc, #36]	; (800abd0 <vQueueUnregisterQueue+0x50>)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	4413      	add	r3, r2
 800abb0:	2200      	movs	r2, #0
 800abb2:	605a      	str	r2, [r3, #4]
				break;
 800abb4:	e006      	b.n	800abc4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3301      	adds	r3, #1
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b07      	cmp	r3, #7
 800abc0:	d9e5      	bls.n	800ab8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800abc2:	bf00      	nop
 800abc4:	bf00      	nop
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	200004c8 	.word	0x200004c8

0800abd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b08e      	sub	sp, #56	; 0x38
 800abd8:	af04      	add	r7, sp, #16
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <xTaskCreateStatic+0x2a>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	623b      	str	r3, [r7, #32]
}
 800abfa:	bf00      	nop
 800abfc:	e7fe      	b.n	800abfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xTaskCreateStatic+0x46>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	61fb      	str	r3, [r7, #28]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac1a:	23b4      	movs	r3, #180	; 0xb4
 800ac1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	2bb4      	cmp	r3, #180	; 0xb4
 800ac22:	d00a      	beq.n	800ac3a <xTaskCreateStatic+0x66>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	61bb      	str	r3, [r7, #24]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d01e      	beq.n	800ac7e <xTaskCreateStatic+0xaa>
 800ac40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d01b      	beq.n	800ac7e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac58:	2300      	movs	r3, #0
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	9302      	str	r3, [sp, #8]
 800ac60:	f107 0314 	add.w	r3, r7, #20
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	68b9      	ldr	r1, [r7, #8]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 f851 	bl	800ad18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac78:	f000 f8e4 	bl	800ae44 <prvAddNewTaskToReadyList>
 800ac7c:	e001      	b.n	800ac82 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac82:	697b      	ldr	r3, [r7, #20]
	}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3728      	adds	r7, #40	; 0x28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08c      	sub	sp, #48	; 0x30
 800ac90:	af04      	add	r7, sp, #16
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac9c:	88fb      	ldrh	r3, [r7, #6]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f001 fbb9 	bl	800c418 <pvPortMalloc>
 800aca6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00e      	beq.n	800accc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800acae:	20b4      	movs	r0, #180	; 0xb4
 800acb0:	f001 fbb2 	bl	800c418 <pvPortMalloc>
 800acb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	631a      	str	r2, [r3, #48]	; 0x30
 800acc2:	e005      	b.n	800acd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800acc4:	6978      	ldr	r0, [r7, #20]
 800acc6:	f001 fc6b 	bl	800c5a0 <vPortFree>
 800acca:	e001      	b.n	800acd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800accc:	2300      	movs	r3, #0
 800acce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d017      	beq.n	800ad06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acde:	88fa      	ldrh	r2, [r7, #6]
 800ace0:	2300      	movs	r3, #0
 800ace2:	9303      	str	r3, [sp, #12]
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	9302      	str	r3, [sp, #8]
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 f80f 	bl	800ad18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acfa:	69f8      	ldr	r0, [r7, #28]
 800acfc:	f000 f8a2 	bl	800ae44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad00:	2301      	movs	r3, #1
 800ad02:	61bb      	str	r3, [r7, #24]
 800ad04:	e002      	b.n	800ad0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad06:	f04f 33ff 	mov.w	r3, #4294967295
 800ad0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad0c:	69bb      	ldr	r3, [r7, #24]
	}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad30:	3b01      	subs	r3, #1
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	f023 0307 	bic.w	r3, r3, #7
 800ad3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00a      	beq.n	800ad60 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	617b      	str	r3, [r7, #20]
}
 800ad5c:	bf00      	nop
 800ad5e:	e7fe      	b.n	800ad5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad60:	2300      	movs	r3, #0
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	e012      	b.n	800ad8c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	7819      	ldrb	r1, [r3, #0]
 800ad6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	4413      	add	r3, r2
 800ad74:	3334      	adds	r3, #52	; 0x34
 800ad76:	460a      	mov	r2, r1
 800ad78:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	4413      	add	r3, r2
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d006      	beq.n	800ad94 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	61fb      	str	r3, [r7, #28]
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	2b0f      	cmp	r3, #15
 800ad90:	d9e9      	bls.n	800ad66 <prvInitialiseNewTask+0x4e>
 800ad92:	e000      	b.n	800ad96 <prvInitialiseNewTask+0x7e>
		{
			break;
 800ad94:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	2b06      	cmp	r3, #6
 800ada2:	d901      	bls.n	800ada8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ada4:	2306      	movs	r3, #6
 800ada6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adb2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	2200      	movs	r2, #0
 800adb8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	3304      	adds	r3, #4
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff f85c 	bl	8009e7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	3318      	adds	r3, #24
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff f857 	bl	8009e7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add6:	f1c3 0207 	rsb	r2, r3, #7
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ade2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	2200      	movs	r2, #0
 800ade8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	334c      	adds	r3, #76	; 0x4c
 800adf8:	2260      	movs	r2, #96	; 0x60
 800adfa:	2100      	movs	r1, #0
 800adfc:	4618      	mov	r0, r3
 800adfe:	f001 fd2f 	bl	800c860 <memset>
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	4a0c      	ldr	r2, [pc, #48]	; (800ae38 <prvInitialiseNewTask+0x120>)
 800ae06:	651a      	str	r2, [r3, #80]	; 0x50
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	4a0c      	ldr	r2, [pc, #48]	; (800ae3c <prvInitialiseNewTask+0x124>)
 800ae0c:	655a      	str	r2, [r3, #84]	; 0x54
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	4a0b      	ldr	r2, [pc, #44]	; (800ae40 <prvInitialiseNewTask+0x128>)
 800ae12:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	68f9      	ldr	r1, [r7, #12]
 800ae18:	69b8      	ldr	r0, [r7, #24]
 800ae1a:	f001 f8b1 	bl	800bf80 <pxPortInitialiseStack>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ae24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d002      	beq.n	800ae30 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae30:	bf00      	nop
 800ae32:	3720      	adds	r7, #32
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	0800dc64 	.word	0x0800dc64
 800ae3c:	0800dc84 	.word	0x0800dc84
 800ae40:	0800dc44 	.word	0x0800dc44

0800ae44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae4c:	f001 f9c2 	bl	800c1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae50:	4b2a      	ldr	r3, [pc, #168]	; (800aefc <prvAddNewTaskToReadyList+0xb8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3301      	adds	r3, #1
 800ae56:	4a29      	ldr	r2, [pc, #164]	; (800aefc <prvAddNewTaskToReadyList+0xb8>)
 800ae58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae5a:	4b29      	ldr	r3, [pc, #164]	; (800af00 <prvAddNewTaskToReadyList+0xbc>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae62:	4a27      	ldr	r2, [pc, #156]	; (800af00 <prvAddNewTaskToReadyList+0xbc>)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae68:	4b24      	ldr	r3, [pc, #144]	; (800aefc <prvAddNewTaskToReadyList+0xb8>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d110      	bne.n	800ae92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae70:	f000 fd7a 	bl	800b968 <prvInitialiseTaskLists>
 800ae74:	e00d      	b.n	800ae92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae76:	4b23      	ldr	r3, [pc, #140]	; (800af04 <prvAddNewTaskToReadyList+0xc0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d109      	bne.n	800ae92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae7e:	4b20      	ldr	r3, [pc, #128]	; (800af00 <prvAddNewTaskToReadyList+0xbc>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d802      	bhi.n	800ae92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae8c:	4a1c      	ldr	r2, [pc, #112]	; (800af00 <prvAddNewTaskToReadyList+0xbc>)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae92:	4b1d      	ldr	r3, [pc, #116]	; (800af08 <prvAddNewTaskToReadyList+0xc4>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3301      	adds	r3, #1
 800ae98:	4a1b      	ldr	r2, [pc, #108]	; (800af08 <prvAddNewTaskToReadyList+0xc4>)
 800ae9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	2201      	movs	r2, #1
 800aea2:	409a      	lsls	r2, r3
 800aea4:	4b19      	ldr	r3, [pc, #100]	; (800af0c <prvAddNewTaskToReadyList+0xc8>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	4a18      	ldr	r2, [pc, #96]	; (800af0c <prvAddNewTaskToReadyList+0xc8>)
 800aeac:	6013      	str	r3, [r2, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4a15      	ldr	r2, [pc, #84]	; (800af10 <prvAddNewTaskToReadyList+0xcc>)
 800aebc:	441a      	add	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3304      	adds	r3, #4
 800aec2:	4619      	mov	r1, r3
 800aec4:	4610      	mov	r0, r2
 800aec6:	f7fe ffe6 	bl	8009e96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aeca:	f001 f9b3 	bl	800c234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aece:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <prvAddNewTaskToReadyList+0xc0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00e      	beq.n	800aef4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aed6:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <prvAddNewTaskToReadyList+0xbc>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d207      	bcs.n	800aef4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aee4:	4b0b      	ldr	r3, [pc, #44]	; (800af14 <prvAddNewTaskToReadyList+0xd0>)
 800aee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	20000608 	.word	0x20000608
 800af00:	20000508 	.word	0x20000508
 800af04:	20000614 	.word	0x20000614
 800af08:	20000624 	.word	0x20000624
 800af0c:	20000610 	.word	0x20000610
 800af10:	2000050c 	.word	0x2000050c
 800af14:	e000ed04 	.word	0xe000ed04

0800af18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d017      	beq.n	800af5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af2a:	4b13      	ldr	r3, [pc, #76]	; (800af78 <vTaskDelay+0x60>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00a      	beq.n	800af48 <vTaskDelay+0x30>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	60bb      	str	r3, [r7, #8]
}
 800af44:	bf00      	nop
 800af46:	e7fe      	b.n	800af46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af48:	f000 fa22 	bl	800b390 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af4c:	2100      	movs	r1, #0
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 ffb0 	bl	800beb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af54:	f000 fa2a 	bl	800b3ac <xTaskResumeAll>
 800af58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d107      	bne.n	800af70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af60:	4b06      	ldr	r3, [pc, #24]	; (800af7c <vTaskDelay+0x64>)
 800af62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af70:	bf00      	nop
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	20000630 	.word	0x20000630
 800af7c:	e000ed04 	.word	0xe000ed04

0800af80 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800af88:	f001 f924 	bl	800c1d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d102      	bne.n	800af98 <vTaskSuspend+0x18>
 800af92:	4b3c      	ldr	r3, [pc, #240]	; (800b084 <vTaskSuspend+0x104>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	e000      	b.n	800af9a <vTaskSuspend+0x1a>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3304      	adds	r3, #4
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe ffd5 	bl	8009f50 <uxListRemove>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d115      	bne.n	800afd8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb0:	4935      	ldr	r1, [pc, #212]	; (800b088 <vTaskSuspend+0x108>)
 800afb2:	4613      	mov	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	440b      	add	r3, r1
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <vTaskSuspend+0x58>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc6:	2201      	movs	r2, #1
 800afc8:	fa02 f303 	lsl.w	r3, r2, r3
 800afcc:	43da      	mvns	r2, r3
 800afce:	4b2f      	ldr	r3, [pc, #188]	; (800b08c <vTaskSuspend+0x10c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4013      	ands	r3, r2
 800afd4:	4a2d      	ldr	r2, [pc, #180]	; (800b08c <vTaskSuspend+0x10c>)
 800afd6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d004      	beq.n	800afea <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3318      	adds	r3, #24
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fe ffb3 	bl	8009f50 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3304      	adds	r3, #4
 800afee:	4619      	mov	r1, r3
 800aff0:	4827      	ldr	r0, [pc, #156]	; (800b090 <vTaskSuspend+0x110>)
 800aff2:	f7fe ff50 	bl	8009e96 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b01      	cmp	r3, #1
 800b000:	d103      	bne.n	800b00a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b00a:	f001 f913 	bl	800c234 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b00e:	4b21      	ldr	r3, [pc, #132]	; (800b094 <vTaskSuspend+0x114>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d005      	beq.n	800b022 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b016:	f001 f8dd 	bl	800c1d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b01a:	f000 fd47 	bl	800baac <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b01e:	f001 f909 	bl	800c234 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b022:	4b18      	ldr	r3, [pc, #96]	; (800b084 <vTaskSuspend+0x104>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d127      	bne.n	800b07c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800b02c:	4b19      	ldr	r3, [pc, #100]	; (800b094 <vTaskSuspend+0x114>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d017      	beq.n	800b064 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b034:	4b18      	ldr	r3, [pc, #96]	; (800b098 <vTaskSuspend+0x118>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00a      	beq.n	800b052 <vTaskSuspend+0xd2>
	__asm volatile
 800b03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b040:	f383 8811 	msr	BASEPRI, r3
 800b044:	f3bf 8f6f 	isb	sy
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	60bb      	str	r3, [r7, #8]
}
 800b04e:	bf00      	nop
 800b050:	e7fe      	b.n	800b050 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800b052:	4b12      	ldr	r3, [pc, #72]	; (800b09c <vTaskSuspend+0x11c>)
 800b054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b062:	e00b      	b.n	800b07c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800b064:	4b0a      	ldr	r3, [pc, #40]	; (800b090 <vTaskSuspend+0x110>)
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <vTaskSuspend+0x120>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d103      	bne.n	800b078 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800b070:	4b04      	ldr	r3, [pc, #16]	; (800b084 <vTaskSuspend+0x104>)
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]
	}
 800b076:	e001      	b.n	800b07c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800b078:	f000 faf2 	bl	800b660 <vTaskSwitchContext>
	}
 800b07c:	bf00      	nop
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20000508 	.word	0x20000508
 800b088:	2000050c 	.word	0x2000050c
 800b08c:	20000610 	.word	0x20000610
 800b090:	200005f4 	.word	0x200005f4
 800b094:	20000614 	.word	0x20000614
 800b098:	20000630 	.word	0x20000630
 800b09c:	e000ed04 	.word	0xe000ed04
 800b0a0:	20000608 	.word	0x20000608

0800b0a4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	60fb      	str	r3, [r7, #12]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	695b      	ldr	r3, [r3, #20]
 800b0d4:	4a0f      	ldr	r2, [pc, #60]	; (800b114 <prvTaskIsTaskSuspended+0x70>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d101      	bne.n	800b0de <prvTaskIsTaskSuspended+0x3a>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <prvTaskIsTaskSuspended+0x3c>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00f      	beq.n	800b104 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e8:	4a0b      	ldr	r2, [pc, #44]	; (800b118 <prvTaskIsTaskSuspended+0x74>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d00a      	beq.n	800b104 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <prvTaskIsTaskSuspended+0x56>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <prvTaskIsTaskSuspended+0x58>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800b100:	2301      	movs	r3, #1
 800b102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b104:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b106:	4618      	mov	r0, r3
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	200005f4 	.word	0x200005f4
 800b118:	200005c8 	.word	0x200005c8

0800b11c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10a      	bne.n	800b144 <vTaskResume+0x28>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	60bb      	str	r3, [r7, #8]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d039      	beq.n	800b1be <vTaskResume+0xa2>
 800b14a:	4b1f      	ldr	r3, [pc, #124]	; (800b1c8 <vTaskResume+0xac>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	429a      	cmp	r2, r3
 800b152:	d034      	beq.n	800b1be <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800b154:	f001 f83e 	bl	800c1d4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7ff ffa3 	bl	800b0a4 <prvTaskIsTaskSuspended>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d02a      	beq.n	800b1ba <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3304      	adds	r3, #4
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe fef1 	bl	8009f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b172:	2201      	movs	r2, #1
 800b174:	409a      	lsls	r2, r3
 800b176:	4b15      	ldr	r3, [pc, #84]	; (800b1cc <vTaskResume+0xb0>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	4a13      	ldr	r2, [pc, #76]	; (800b1cc <vTaskResume+0xb0>)
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4a10      	ldr	r2, [pc, #64]	; (800b1d0 <vTaskResume+0xb4>)
 800b18e:	441a      	add	r2, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3304      	adds	r3, #4
 800b194:	4619      	mov	r1, r3
 800b196:	4610      	mov	r0, r2
 800b198:	f7fe fe7d 	bl	8009e96 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a0:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <vTaskResume+0xac>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d307      	bcc.n	800b1ba <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b1aa:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <vTaskResume+0xb8>)
 800b1ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b1ba:	f001 f83b 	bl	800c234 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1be:	bf00      	nop
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20000508 	.word	0x20000508
 800b1cc:	20000610 	.word	0x20000610
 800b1d0:	2000050c 	.word	0x2000050c
 800b1d4:	e000ed04 	.word	0xe000ed04

0800b1d8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08a      	sub	sp, #40	; 0x28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	61bb      	str	r3, [r7, #24]
}
 800b200:	bf00      	nop
 800b202:	e7fe      	b.n	800b202 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b204:	f001 f8c8 	bl	800c398 <vPortValidateInterruptPriority>
	__asm volatile
 800b208:	f3ef 8211 	mrs	r2, BASEPRI
 800b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b210:	f383 8811 	msr	BASEPRI, r3
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	617a      	str	r2, [r7, #20]
 800b21e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b220:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b222:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b224:	6a38      	ldr	r0, [r7, #32]
 800b226:	f7ff ff3d 	bl	800b0a4 <prvTaskIsTaskSuspended>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d02f      	beq.n	800b290 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b230:	4b1d      	ldr	r3, [pc, #116]	; (800b2a8 <xTaskResumeFromISR+0xd0>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d125      	bne.n	800b284 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23c:	4b1b      	ldr	r3, [pc, #108]	; (800b2ac <xTaskResumeFromISR+0xd4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b242:	429a      	cmp	r2, r3
 800b244:	d301      	bcc.n	800b24a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800b246:	2301      	movs	r3, #1
 800b248:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	3304      	adds	r3, #4
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe fe7e 	bl	8009f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b258:	2201      	movs	r2, #1
 800b25a:	409a      	lsls	r2, r3
 800b25c:	4b14      	ldr	r3, [pc, #80]	; (800b2b0 <xTaskResumeFromISR+0xd8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4313      	orrs	r3, r2
 800b262:	4a13      	ldr	r2, [pc, #76]	; (800b2b0 <xTaskResumeFromISR+0xd8>)
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26a:	4613      	mov	r3, r2
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4a10      	ldr	r2, [pc, #64]	; (800b2b4 <xTaskResumeFromISR+0xdc>)
 800b274:	441a      	add	r2, r3
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	3304      	adds	r3, #4
 800b27a:	4619      	mov	r1, r3
 800b27c:	4610      	mov	r0, r2
 800b27e:	f7fe fe0a 	bl	8009e96 <vListInsertEnd>
 800b282:	e005      	b.n	800b290 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	3318      	adds	r3, #24
 800b288:	4619      	mov	r1, r3
 800b28a:	480b      	ldr	r0, [pc, #44]	; (800b2b8 <xTaskResumeFromISR+0xe0>)
 800b28c:	f7fe fe03 	bl	8009e96 <vListInsertEnd>
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f383 8811 	msr	BASEPRI, r3
}
 800b29a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3728      	adds	r7, #40	; 0x28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000630 	.word	0x20000630
 800b2ac:	20000508 	.word	0x20000508
 800b2b0:	20000610 	.word	0x20000610
 800b2b4:	2000050c 	.word	0x2000050c
 800b2b8:	200005c8 	.word	0x200005c8

0800b2bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08a      	sub	sp, #40	; 0x28
 800b2c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2ca:	463a      	mov	r2, r7
 800b2cc:	1d39      	adds	r1, r7, #4
 800b2ce:	f107 0308 	add.w	r3, r7, #8
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7f5 fc20 	bl	8000b18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	9202      	str	r2, [sp, #8]
 800b2e0:	9301      	str	r3, [sp, #4]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	460a      	mov	r2, r1
 800b2ea:	4921      	ldr	r1, [pc, #132]	; (800b370 <vTaskStartScheduler+0xb4>)
 800b2ec:	4821      	ldr	r0, [pc, #132]	; (800b374 <vTaskStartScheduler+0xb8>)
 800b2ee:	f7ff fc71 	bl	800abd4 <xTaskCreateStatic>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	4a20      	ldr	r2, [pc, #128]	; (800b378 <vTaskStartScheduler+0xbc>)
 800b2f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2f8:	4b1f      	ldr	r3, [pc, #124]	; (800b378 <vTaskStartScheduler+0xbc>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b300:	2301      	movs	r3, #1
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	e001      	b.n	800b30a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d11b      	bne.n	800b348 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	613b      	str	r3, [r7, #16]
}
 800b322:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b324:	4b15      	ldr	r3, [pc, #84]	; (800b37c <vTaskStartScheduler+0xc0>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	334c      	adds	r3, #76	; 0x4c
 800b32a:	4a15      	ldr	r2, [pc, #84]	; (800b380 <vTaskStartScheduler+0xc4>)
 800b32c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b32e:	4b15      	ldr	r3, [pc, #84]	; (800b384 <vTaskStartScheduler+0xc8>)
 800b330:	f04f 32ff 	mov.w	r2, #4294967295
 800b334:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <vTaskStartScheduler+0xcc>)
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b33c:	4b13      	ldr	r3, [pc, #76]	; (800b38c <vTaskStartScheduler+0xd0>)
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b342:	f000 fea5 	bl	800c090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b346:	e00e      	b.n	800b366 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34e:	d10a      	bne.n	800b366 <vTaskStartScheduler+0xaa>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	60fb      	str	r3, [r7, #12]
}
 800b362:	bf00      	nop
 800b364:	e7fe      	b.n	800b364 <vTaskStartScheduler+0xa8>
}
 800b366:	bf00      	nop
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	0800d6b4 	.word	0x0800d6b4
 800b374:	0800b939 	.word	0x0800b939
 800b378:	2000062c 	.word	0x2000062c
 800b37c:	20000508 	.word	0x20000508
 800b380:	2000002c 	.word	0x2000002c
 800b384:	20000628 	.word	0x20000628
 800b388:	20000614 	.word	0x20000614
 800b38c:	2000060c 	.word	0x2000060c

0800b390 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b390:	b480      	push	{r7}
 800b392:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b394:	4b04      	ldr	r3, [pc, #16]	; (800b3a8 <vTaskSuspendAll+0x18>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	3301      	adds	r3, #1
 800b39a:	4a03      	ldr	r2, [pc, #12]	; (800b3a8 <vTaskSuspendAll+0x18>)
 800b39c:	6013      	str	r3, [r2, #0]
}
 800b39e:	bf00      	nop
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	20000630 	.word	0x20000630

0800b3ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3ba:	4b41      	ldr	r3, [pc, #260]	; (800b4c0 <xTaskResumeAll+0x114>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10a      	bne.n	800b3d8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	603b      	str	r3, [r7, #0]
}
 800b3d4:	bf00      	nop
 800b3d6:	e7fe      	b.n	800b3d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3d8:	f000 fefc 	bl	800c1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3dc:	4b38      	ldr	r3, [pc, #224]	; (800b4c0 <xTaskResumeAll+0x114>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	4a37      	ldr	r2, [pc, #220]	; (800b4c0 <xTaskResumeAll+0x114>)
 800b3e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3e6:	4b36      	ldr	r3, [pc, #216]	; (800b4c0 <xTaskResumeAll+0x114>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d161      	bne.n	800b4b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3ee:	4b35      	ldr	r3, [pc, #212]	; (800b4c4 <xTaskResumeAll+0x118>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d05d      	beq.n	800b4b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3f6:	e02e      	b.n	800b456 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b3f8:	4b33      	ldr	r3, [pc, #204]	; (800b4c8 <xTaskResumeAll+0x11c>)
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	3318      	adds	r3, #24
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe fda3 	bl	8009f50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	3304      	adds	r3, #4
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fd9e 	bl	8009f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	2201      	movs	r2, #1
 800b41a:	409a      	lsls	r2, r3
 800b41c:	4b2b      	ldr	r3, [pc, #172]	; (800b4cc <xTaskResumeAll+0x120>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4313      	orrs	r3, r2
 800b422:	4a2a      	ldr	r2, [pc, #168]	; (800b4cc <xTaskResumeAll+0x120>)
 800b424:	6013      	str	r3, [r2, #0]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42a:	4613      	mov	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4a27      	ldr	r2, [pc, #156]	; (800b4d0 <xTaskResumeAll+0x124>)
 800b434:	441a      	add	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3304      	adds	r3, #4
 800b43a:	4619      	mov	r1, r3
 800b43c:	4610      	mov	r0, r2
 800b43e:	f7fe fd2a 	bl	8009e96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b446:	4b23      	ldr	r3, [pc, #140]	; (800b4d4 <xTaskResumeAll+0x128>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d302      	bcc.n	800b456 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b450:	4b21      	ldr	r3, [pc, #132]	; (800b4d8 <xTaskResumeAll+0x12c>)
 800b452:	2201      	movs	r2, #1
 800b454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b456:	4b1c      	ldr	r3, [pc, #112]	; (800b4c8 <xTaskResumeAll+0x11c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1cc      	bne.n	800b3f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b464:	f000 fb22 	bl	800baac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b468:	4b1c      	ldr	r3, [pc, #112]	; (800b4dc <xTaskResumeAll+0x130>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d010      	beq.n	800b496 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b474:	f000 f836 	bl	800b4e4 <xTaskIncrementTick>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b47e:	4b16      	ldr	r3, [pc, #88]	; (800b4d8 <xTaskResumeAll+0x12c>)
 800b480:	2201      	movs	r2, #1
 800b482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3b01      	subs	r3, #1
 800b488:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1f1      	bne.n	800b474 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b490:	4b12      	ldr	r3, [pc, #72]	; (800b4dc <xTaskResumeAll+0x130>)
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b496:	4b10      	ldr	r3, [pc, #64]	; (800b4d8 <xTaskResumeAll+0x12c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d009      	beq.n	800b4b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4a2:	4b0f      	ldr	r3, [pc, #60]	; (800b4e0 <xTaskResumeAll+0x134>)
 800b4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4b2:	f000 febf 	bl	800c234 <vPortExitCritical>

	return xAlreadyYielded;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20000630 	.word	0x20000630
 800b4c4:	20000608 	.word	0x20000608
 800b4c8:	200005c8 	.word	0x200005c8
 800b4cc:	20000610 	.word	0x20000610
 800b4d0:	2000050c 	.word	0x2000050c
 800b4d4:	20000508 	.word	0x20000508
 800b4d8:	2000061c 	.word	0x2000061c
 800b4dc:	20000618 	.word	0x20000618
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4ee:	4b51      	ldr	r3, [pc, #324]	; (800b634 <xTaskIncrementTick+0x150>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f040 808d 	bne.w	800b612 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4f8:	4b4f      	ldr	r3, [pc, #316]	; (800b638 <xTaskIncrementTick+0x154>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b500:	4a4d      	ldr	r2, [pc, #308]	; (800b638 <xTaskIncrementTick+0x154>)
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d120      	bne.n	800b54e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b50c:	4b4b      	ldr	r3, [pc, #300]	; (800b63c <xTaskIncrementTick+0x158>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00a      	beq.n	800b52c <xTaskIncrementTick+0x48>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	603b      	str	r3, [r7, #0]
}
 800b528:	bf00      	nop
 800b52a:	e7fe      	b.n	800b52a <xTaskIncrementTick+0x46>
 800b52c:	4b43      	ldr	r3, [pc, #268]	; (800b63c <xTaskIncrementTick+0x158>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60fb      	str	r3, [r7, #12]
 800b532:	4b43      	ldr	r3, [pc, #268]	; (800b640 <xTaskIncrementTick+0x15c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a41      	ldr	r2, [pc, #260]	; (800b63c <xTaskIncrementTick+0x158>)
 800b538:	6013      	str	r3, [r2, #0]
 800b53a:	4a41      	ldr	r2, [pc, #260]	; (800b640 <xTaskIncrementTick+0x15c>)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	4b40      	ldr	r3, [pc, #256]	; (800b644 <xTaskIncrementTick+0x160>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3301      	adds	r3, #1
 800b546:	4a3f      	ldr	r2, [pc, #252]	; (800b644 <xTaskIncrementTick+0x160>)
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	f000 faaf 	bl	800baac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b54e:	4b3e      	ldr	r3, [pc, #248]	; (800b648 <xTaskIncrementTick+0x164>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	429a      	cmp	r2, r3
 800b556:	d34d      	bcc.n	800b5f4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b558:	4b38      	ldr	r3, [pc, #224]	; (800b63c <xTaskIncrementTick+0x158>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <xTaskIncrementTick+0x82>
 800b562:	2301      	movs	r3, #1
 800b564:	e000      	b.n	800b568 <xTaskIncrementTick+0x84>
 800b566:	2300      	movs	r3, #0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d004      	beq.n	800b576 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b56c:	4b36      	ldr	r3, [pc, #216]	; (800b648 <xTaskIncrementTick+0x164>)
 800b56e:	f04f 32ff 	mov.w	r2, #4294967295
 800b572:	601a      	str	r2, [r3, #0]
					break;
 800b574:	e03e      	b.n	800b5f4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b576:	4b31      	ldr	r3, [pc, #196]	; (800b63c <xTaskIncrementTick+0x158>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d203      	bcs.n	800b596 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b58e:	4a2e      	ldr	r2, [pc, #184]	; (800b648 <xTaskIncrementTick+0x164>)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6013      	str	r3, [r2, #0]
						break;
 800b594:	e02e      	b.n	800b5f4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	3304      	adds	r3, #4
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fe fcd8 	bl	8009f50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d004      	beq.n	800b5b2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	3318      	adds	r3, #24
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fe fccf 	bl	8009f50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	409a      	lsls	r2, r3
 800b5ba:	4b24      	ldr	r3, [pc, #144]	; (800b64c <xTaskIncrementTick+0x168>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	4a22      	ldr	r2, [pc, #136]	; (800b64c <xTaskIncrementTick+0x168>)
 800b5c2:	6013      	str	r3, [r2, #0]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	4413      	add	r3, r2
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	4a1f      	ldr	r2, [pc, #124]	; (800b650 <xTaskIncrementTick+0x16c>)
 800b5d2:	441a      	add	r2, r3
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4610      	mov	r0, r2
 800b5dc:	f7fe fc5b 	bl	8009e96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e4:	4b1b      	ldr	r3, [pc, #108]	; (800b654 <xTaskIncrementTick+0x170>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d3b4      	bcc.n	800b558 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5f2:	e7b1      	b.n	800b558 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5f4:	4b17      	ldr	r3, [pc, #92]	; (800b654 <xTaskIncrementTick+0x170>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	4915      	ldr	r1, [pc, #84]	; (800b650 <xTaskIncrementTick+0x16c>)
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	4413      	add	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	440b      	add	r3, r1
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d907      	bls.n	800b61c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b60c:	2301      	movs	r3, #1
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	e004      	b.n	800b61c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b612:	4b11      	ldr	r3, [pc, #68]	; (800b658 <xTaskIncrementTick+0x174>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3301      	adds	r3, #1
 800b618:	4a0f      	ldr	r2, [pc, #60]	; (800b658 <xTaskIncrementTick+0x174>)
 800b61a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b61c:	4b0f      	ldr	r3, [pc, #60]	; (800b65c <xTaskIncrementTick+0x178>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b624:	2301      	movs	r3, #1
 800b626:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b628:	697b      	ldr	r3, [r7, #20]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20000630 	.word	0x20000630
 800b638:	2000060c 	.word	0x2000060c
 800b63c:	200005c0 	.word	0x200005c0
 800b640:	200005c4 	.word	0x200005c4
 800b644:	20000620 	.word	0x20000620
 800b648:	20000628 	.word	0x20000628
 800b64c:	20000610 	.word	0x20000610
 800b650:	2000050c 	.word	0x2000050c
 800b654:	20000508 	.word	0x20000508
 800b658:	20000618 	.word	0x20000618
 800b65c:	2000061c 	.word	0x2000061c

0800b660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b660:	b480      	push	{r7}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b666:	4b29      	ldr	r3, [pc, #164]	; (800b70c <vTaskSwitchContext+0xac>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b66e:	4b28      	ldr	r3, [pc, #160]	; (800b710 <vTaskSwitchContext+0xb0>)
 800b670:	2201      	movs	r2, #1
 800b672:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b674:	e044      	b.n	800b700 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b676:	4b26      	ldr	r3, [pc, #152]	; (800b710 <vTaskSwitchContext+0xb0>)
 800b678:	2200      	movs	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b67c:	4b25      	ldr	r3, [pc, #148]	; (800b714 <vTaskSwitchContext+0xb4>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	fab3 f383 	clz	r3, r3
 800b688:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b68a:	7afb      	ldrb	r3, [r7, #11]
 800b68c:	f1c3 031f 	rsb	r3, r3, #31
 800b690:	617b      	str	r3, [r7, #20]
 800b692:	4921      	ldr	r1, [pc, #132]	; (800b718 <vTaskSwitchContext+0xb8>)
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	4613      	mov	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	440b      	add	r3, r1
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10a      	bne.n	800b6bc <vTaskSwitchContext+0x5c>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	607b      	str	r3, [r7, #4]
}
 800b6b8:	bf00      	nop
 800b6ba:	e7fe      	b.n	800b6ba <vTaskSwitchContext+0x5a>
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4413      	add	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4a14      	ldr	r2, [pc, #80]	; (800b718 <vTaskSwitchContext+0xb8>)
 800b6c8:	4413      	add	r3, r2
 800b6ca:	613b      	str	r3, [r7, #16]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	685a      	ldr	r2, [r3, #4]
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	605a      	str	r2, [r3, #4]
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	3308      	adds	r3, #8
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d104      	bne.n	800b6ec <vTaskSwitchContext+0x8c>
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	605a      	str	r2, [r3, #4]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	4a0a      	ldr	r2, [pc, #40]	; (800b71c <vTaskSwitchContext+0xbc>)
 800b6f4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6f6:	4b09      	ldr	r3, [pc, #36]	; (800b71c <vTaskSwitchContext+0xbc>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	334c      	adds	r3, #76	; 0x4c
 800b6fc:	4a08      	ldr	r2, [pc, #32]	; (800b720 <vTaskSwitchContext+0xc0>)
 800b6fe:	6013      	str	r3, [r2, #0]
}
 800b700:	bf00      	nop
 800b702:	371c      	adds	r7, #28
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	20000630 	.word	0x20000630
 800b710:	2000061c 	.word	0x2000061c
 800b714:	20000610 	.word	0x20000610
 800b718:	2000050c 	.word	0x2000050c
 800b71c:	20000508 	.word	0x20000508
 800b720:	2000002c 	.word	0x2000002c

0800b724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10a      	bne.n	800b74a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	60fb      	str	r3, [r7, #12]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b74a:	4b07      	ldr	r3, [pc, #28]	; (800b768 <vTaskPlaceOnEventList+0x44>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3318      	adds	r3, #24
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7fe fbc3 	bl	8009ede <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b758:	2101      	movs	r1, #1
 800b75a:	6838      	ldr	r0, [r7, #0]
 800b75c:	f000 fbaa 	bl	800beb4 <prvAddCurrentTaskToDelayedList>
}
 800b760:	bf00      	nop
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20000508 	.word	0x20000508

0800b76c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10a      	bne.n	800b798 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	60fb      	str	r3, [r7, #12]
}
 800b794:	bf00      	nop
 800b796:	e7fe      	b.n	800b796 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	3318      	adds	r3, #24
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fe fbd7 	bl	8009f50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7a2:	4b1d      	ldr	r3, [pc, #116]	; (800b818 <xTaskRemoveFromEventList+0xac>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d11c      	bne.n	800b7e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7fe fbce 	bl	8009f50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	409a      	lsls	r2, r3
 800b7bc:	4b17      	ldr	r3, [pc, #92]	; (800b81c <xTaskRemoveFromEventList+0xb0>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	4a16      	ldr	r2, [pc, #88]	; (800b81c <xTaskRemoveFromEventList+0xb0>)
 800b7c4:	6013      	str	r3, [r2, #0]
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4a13      	ldr	r2, [pc, #76]	; (800b820 <xTaskRemoveFromEventList+0xb4>)
 800b7d4:	441a      	add	r2, r3
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4610      	mov	r0, r2
 800b7de:	f7fe fb5a 	bl	8009e96 <vListInsertEnd>
 800b7e2:	e005      	b.n	800b7f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	3318      	adds	r3, #24
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	480e      	ldr	r0, [pc, #56]	; (800b824 <xTaskRemoveFromEventList+0xb8>)
 800b7ec:	f7fe fb53 	bl	8009e96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f4:	4b0c      	ldr	r3, [pc, #48]	; (800b828 <xTaskRemoveFromEventList+0xbc>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d905      	bls.n	800b80a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b7fe:	2301      	movs	r3, #1
 800b800:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b802:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <xTaskRemoveFromEventList+0xc0>)
 800b804:	2201      	movs	r2, #1
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	e001      	b.n	800b80e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b80e:	697b      	ldr	r3, [r7, #20]
}
 800b810:	4618      	mov	r0, r3
 800b812:	3718      	adds	r7, #24
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20000630 	.word	0x20000630
 800b81c:	20000610 	.word	0x20000610
 800b820:	2000050c 	.word	0x2000050c
 800b824:	200005c8 	.word	0x200005c8
 800b828:	20000508 	.word	0x20000508
 800b82c:	2000061c 	.word	0x2000061c

0800b830 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b838:	4b06      	ldr	r3, [pc, #24]	; (800b854 <vTaskInternalSetTimeOutState+0x24>)
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b840:	4b05      	ldr	r3, [pc, #20]	; (800b858 <vTaskInternalSetTimeOutState+0x28>)
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	605a      	str	r2, [r3, #4]
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	20000620 	.word	0x20000620
 800b858:	2000060c 	.word	0x2000060c

0800b85c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	613b      	str	r3, [r7, #16]
}
 800b87e:	bf00      	nop
 800b880:	e7fe      	b.n	800b880 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10a      	bne.n	800b89e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	60fb      	str	r3, [r7, #12]
}
 800b89a:	bf00      	nop
 800b89c:	e7fe      	b.n	800b89c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b89e:	f000 fc99 	bl	800c1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8a2:	4b1d      	ldr	r3, [pc, #116]	; (800b918 <xTaskCheckForTimeOut+0xbc>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ba:	d102      	bne.n	800b8c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	61fb      	str	r3, [r7, #28]
 800b8c0:	e023      	b.n	800b90a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	4b15      	ldr	r3, [pc, #84]	; (800b91c <xTaskCheckForTimeOut+0xc0>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d007      	beq.n	800b8de <xTaskCheckForTimeOut+0x82>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	69ba      	ldr	r2, [r7, #24]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d302      	bcc.n	800b8de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	61fb      	str	r3, [r7, #28]
 800b8dc:	e015      	b.n	800b90a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d20b      	bcs.n	800b900 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff ff9b 	bl	800b830 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	61fb      	str	r3, [r7, #28]
 800b8fe:	e004      	b.n	800b90a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b906:	2301      	movs	r3, #1
 800b908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b90a:	f000 fc93 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800b90e:	69fb      	ldr	r3, [r7, #28]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3720      	adds	r7, #32
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	2000060c 	.word	0x2000060c
 800b91c:	20000620 	.word	0x20000620

0800b920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b920:	b480      	push	{r7}
 800b922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b924:	4b03      	ldr	r3, [pc, #12]	; (800b934 <vTaskMissedYield+0x14>)
 800b926:	2201      	movs	r2, #1
 800b928:	601a      	str	r2, [r3, #0]
}
 800b92a:	bf00      	nop
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	2000061c 	.word	0x2000061c

0800b938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b940:	f000 f852 	bl	800b9e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b944:	4b06      	ldr	r3, [pc, #24]	; (800b960 <prvIdleTask+0x28>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d9f9      	bls.n	800b940 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b94c:	4b05      	ldr	r3, [pc, #20]	; (800b964 <prvIdleTask+0x2c>)
 800b94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b952:	601a      	str	r2, [r3, #0]
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b95c:	e7f0      	b.n	800b940 <prvIdleTask+0x8>
 800b95e:	bf00      	nop
 800b960:	2000050c 	.word	0x2000050c
 800b964:	e000ed04 	.word	0xe000ed04

0800b968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b96e:	2300      	movs	r3, #0
 800b970:	607b      	str	r3, [r7, #4]
 800b972:	e00c      	b.n	800b98e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	4613      	mov	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4a12      	ldr	r2, [pc, #72]	; (800b9c8 <prvInitialiseTaskLists+0x60>)
 800b980:	4413      	add	r3, r2
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe fa5a 	bl	8009e3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3301      	adds	r3, #1
 800b98c:	607b      	str	r3, [r7, #4]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b06      	cmp	r3, #6
 800b992:	d9ef      	bls.n	800b974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b994:	480d      	ldr	r0, [pc, #52]	; (800b9cc <prvInitialiseTaskLists+0x64>)
 800b996:	f7fe fa51 	bl	8009e3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b99a:	480d      	ldr	r0, [pc, #52]	; (800b9d0 <prvInitialiseTaskLists+0x68>)
 800b99c:	f7fe fa4e 	bl	8009e3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9a0:	480c      	ldr	r0, [pc, #48]	; (800b9d4 <prvInitialiseTaskLists+0x6c>)
 800b9a2:	f7fe fa4b 	bl	8009e3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9a6:	480c      	ldr	r0, [pc, #48]	; (800b9d8 <prvInitialiseTaskLists+0x70>)
 800b9a8:	f7fe fa48 	bl	8009e3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9ac:	480b      	ldr	r0, [pc, #44]	; (800b9dc <prvInitialiseTaskLists+0x74>)
 800b9ae:	f7fe fa45 	bl	8009e3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9b2:	4b0b      	ldr	r3, [pc, #44]	; (800b9e0 <prvInitialiseTaskLists+0x78>)
 800b9b4:	4a05      	ldr	r2, [pc, #20]	; (800b9cc <prvInitialiseTaskLists+0x64>)
 800b9b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9b8:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <prvInitialiseTaskLists+0x7c>)
 800b9ba:	4a05      	ldr	r2, [pc, #20]	; (800b9d0 <prvInitialiseTaskLists+0x68>)
 800b9bc:	601a      	str	r2, [r3, #0]
}
 800b9be:	bf00      	nop
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	2000050c 	.word	0x2000050c
 800b9cc:	20000598 	.word	0x20000598
 800b9d0:	200005ac 	.word	0x200005ac
 800b9d4:	200005c8 	.word	0x200005c8
 800b9d8:	200005dc 	.word	0x200005dc
 800b9dc:	200005f4 	.word	0x200005f4
 800b9e0:	200005c0 	.word	0x200005c0
 800b9e4:	200005c4 	.word	0x200005c4

0800b9e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9ee:	e019      	b.n	800ba24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b9f0:	f000 fbf0 	bl	800c1d4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b9f4:	4b10      	ldr	r3, [pc, #64]	; (800ba38 <prvCheckTasksWaitingTermination+0x50>)
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	3304      	adds	r3, #4
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe faa5 	bl	8009f50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba06:	4b0d      	ldr	r3, [pc, #52]	; (800ba3c <prvCheckTasksWaitingTermination+0x54>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	4a0b      	ldr	r2, [pc, #44]	; (800ba3c <prvCheckTasksWaitingTermination+0x54>)
 800ba0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba10:	4b0b      	ldr	r3, [pc, #44]	; (800ba40 <prvCheckTasksWaitingTermination+0x58>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	4a0a      	ldr	r2, [pc, #40]	; (800ba40 <prvCheckTasksWaitingTermination+0x58>)
 800ba18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba1a:	f000 fc0b 	bl	800c234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f810 	bl	800ba44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba24:	4b06      	ldr	r3, [pc, #24]	; (800ba40 <prvCheckTasksWaitingTermination+0x58>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1e1      	bne.n	800b9f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba2c:	bf00      	nop
 800ba2e:	bf00      	nop
 800ba30:	3708      	adds	r7, #8
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	200005dc 	.word	0x200005dc
 800ba3c:	20000608 	.word	0x20000608
 800ba40:	200005f0 	.word	0x200005f0

0800ba44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	334c      	adds	r3, #76	; 0x4c
 800ba50:	4618      	mov	r0, r3
 800ba52:	f001 f803 	bl	800ca5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d108      	bne.n	800ba72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba64:	4618      	mov	r0, r3
 800ba66:	f000 fd9b 	bl	800c5a0 <vPortFree>
				vPortFree( pxTCB );
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fd98 	bl	800c5a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba70:	e018      	b.n	800baa4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d103      	bne.n	800ba84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fd8f 	bl	800c5a0 <vPortFree>
	}
 800ba82:	e00f      	b.n	800baa4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d00a      	beq.n	800baa4 <prvDeleteTCB+0x60>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	60fb      	str	r3, [r7, #12]
}
 800baa0:	bf00      	nop
 800baa2:	e7fe      	b.n	800baa2 <prvDeleteTCB+0x5e>
	}
 800baa4:	bf00      	nop
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bab2:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <prvResetNextTaskUnblockTime+0x44>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <prvResetNextTaskUnblockTime+0x14>
 800babc:	2301      	movs	r3, #1
 800babe:	e000      	b.n	800bac2 <prvResetNextTaskUnblockTime+0x16>
 800bac0:	2300      	movs	r3, #0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d004      	beq.n	800bad0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bac6:	4b0b      	ldr	r3, [pc, #44]	; (800baf4 <prvResetNextTaskUnblockTime+0x48>)
 800bac8:	f04f 32ff 	mov.w	r2, #4294967295
 800bacc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bace:	e008      	b.n	800bae2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <prvResetNextTaskUnblockTime+0x44>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	4a05      	ldr	r2, [pc, #20]	; (800baf4 <prvResetNextTaskUnblockTime+0x48>)
 800bae0:	6013      	str	r3, [r2, #0]
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop
 800baf0:	200005c0 	.word	0x200005c0
 800baf4:	20000628 	.word	0x20000628

0800baf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bafe:	4b0b      	ldr	r3, [pc, #44]	; (800bb2c <xTaskGetSchedulerState+0x34>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d102      	bne.n	800bb0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb06:	2301      	movs	r3, #1
 800bb08:	607b      	str	r3, [r7, #4]
 800bb0a:	e008      	b.n	800bb1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb0c:	4b08      	ldr	r3, [pc, #32]	; (800bb30 <xTaskGetSchedulerState+0x38>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d102      	bne.n	800bb1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb14:	2302      	movs	r3, #2
 800bb16:	607b      	str	r3, [r7, #4]
 800bb18:	e001      	b.n	800bb1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb1e:	687b      	ldr	r3, [r7, #4]
	}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	20000614 	.word	0x20000614
 800bb30:	20000630 	.word	0x20000630

0800bb34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d06e      	beq.n	800bc28 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4e:	4b39      	ldr	r3, [pc, #228]	; (800bc34 <xTaskPriorityInherit+0x100>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d25e      	bcs.n	800bc16 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	db06      	blt.n	800bb6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb60:	4b34      	ldr	r3, [pc, #208]	; (800bc34 <xTaskPriorityInherit+0x100>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb66:	f1c3 0207 	rsb	r2, r3, #7
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	6959      	ldr	r1, [r3, #20]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb76:	4613      	mov	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4413      	add	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4a2e      	ldr	r2, [pc, #184]	; (800bc38 <xTaskPriorityInherit+0x104>)
 800bb80:	4413      	add	r3, r2
 800bb82:	4299      	cmp	r1, r3
 800bb84:	d101      	bne.n	800bb8a <xTaskPriorityInherit+0x56>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e000      	b.n	800bb8c <xTaskPriorityInherit+0x58>
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d03a      	beq.n	800bc06 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	3304      	adds	r3, #4
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe f9db 	bl	8009f50 <uxListRemove>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d115      	bne.n	800bbcc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba4:	4924      	ldr	r1, [pc, #144]	; (800bc38 <xTaskPriorityInherit+0x104>)
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	440b      	add	r3, r1
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d10a      	bne.n	800bbcc <xTaskPriorityInherit+0x98>
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbba:	2201      	movs	r2, #1
 800bbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc0:	43da      	mvns	r2, r3
 800bbc2:	4b1e      	ldr	r3, [pc, #120]	; (800bc3c <xTaskPriorityInherit+0x108>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	4a1c      	ldr	r2, [pc, #112]	; (800bc3c <xTaskPriorityInherit+0x108>)
 800bbca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bbcc:	4b19      	ldr	r3, [pc, #100]	; (800bc34 <xTaskPriorityInherit+0x100>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbda:	2201      	movs	r2, #1
 800bbdc:	409a      	lsls	r2, r3
 800bbde:	4b17      	ldr	r3, [pc, #92]	; (800bc3c <xTaskPriorityInherit+0x108>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	4a15      	ldr	r2, [pc, #84]	; (800bc3c <xTaskPriorityInherit+0x108>)
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbec:	4613      	mov	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4a10      	ldr	r2, [pc, #64]	; (800bc38 <xTaskPriorityInherit+0x104>)
 800bbf6:	441a      	add	r2, r3
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f7fe f949 	bl	8009e96 <vListInsertEnd>
 800bc04:	e004      	b.n	800bc10 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc06:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <xTaskPriorityInherit+0x100>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc10:	2301      	movs	r3, #1
 800bc12:	60fb      	str	r3, [r7, #12]
 800bc14:	e008      	b.n	800bc28 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc1a:	4b06      	ldr	r3, [pc, #24]	; (800bc34 <xTaskPriorityInherit+0x100>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d201      	bcs.n	800bc28 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc24:	2301      	movs	r3, #1
 800bc26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc28:	68fb      	ldr	r3, [r7, #12]
	}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	20000508 	.word	0x20000508
 800bc38:	2000050c 	.word	0x2000050c
 800bc3c:	20000610 	.word	0x20000610

0800bc40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d06e      	beq.n	800bd34 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc56:	4b3a      	ldr	r3, [pc, #232]	; (800bd40 <xTaskPriorityDisinherit+0x100>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	693a      	ldr	r2, [r7, #16]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d00a      	beq.n	800bc76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	60fb      	str	r3, [r7, #12]
}
 800bc72:	bf00      	nop
 800bc74:	e7fe      	b.n	800bc74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10a      	bne.n	800bc94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	60bb      	str	r3, [r7, #8]
}
 800bc90:	bf00      	nop
 800bc92:	e7fe      	b.n	800bc92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc98:	1e5a      	subs	r2, r3, #1
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d044      	beq.n	800bd34 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d140      	bne.n	800bd34 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe f94a 	bl	8009f50 <uxListRemove>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d115      	bne.n	800bcee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc6:	491f      	ldr	r1, [pc, #124]	; (800bd44 <xTaskPriorityDisinherit+0x104>)
 800bcc8:	4613      	mov	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	4413      	add	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	440b      	add	r3, r1
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <xTaskPriorityDisinherit+0xae>
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcdc:	2201      	movs	r2, #1
 800bcde:	fa02 f303 	lsl.w	r3, r2, r3
 800bce2:	43da      	mvns	r2, r3
 800bce4:	4b18      	ldr	r3, [pc, #96]	; (800bd48 <xTaskPriorityDisinherit+0x108>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4013      	ands	r3, r2
 800bcea:	4a17      	ldr	r2, [pc, #92]	; (800bd48 <xTaskPriorityDisinherit+0x108>)
 800bcec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfa:	f1c3 0207 	rsb	r2, r3, #7
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd06:	2201      	movs	r2, #1
 800bd08:	409a      	lsls	r2, r3
 800bd0a:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <xTaskPriorityDisinherit+0x108>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	4a0d      	ldr	r2, [pc, #52]	; (800bd48 <xTaskPriorityDisinherit+0x108>)
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4a08      	ldr	r2, [pc, #32]	; (800bd44 <xTaskPriorityDisinherit+0x104>)
 800bd22:	441a      	add	r2, r3
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7fe f8b3 	bl	8009e96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd30:	2301      	movs	r3, #1
 800bd32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd34:	697b      	ldr	r3, [r7, #20]
	}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000508 	.word	0x20000508
 800bd44:	2000050c 	.word	0x2000050c
 800bd48:	20000610 	.word	0x20000610

0800bd4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b088      	sub	sp, #32
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f000 8088 	beq.w	800be76 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10a      	bne.n	800bd84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	60fb      	str	r3, [r7, #12]
}
 800bd80:	bf00      	nop
 800bd82:	e7fe      	b.n	800bd82 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d902      	bls.n	800bd94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	61fb      	str	r3, [r7, #28]
 800bd92:	e002      	b.n	800bd9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9e:	69fa      	ldr	r2, [r7, #28]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d068      	beq.n	800be76 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bda8:	697a      	ldr	r2, [r7, #20]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d163      	bne.n	800be76 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bdae:	4b34      	ldr	r3, [pc, #208]	; (800be80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d10a      	bne.n	800bdce <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	60bb      	str	r3, [r7, #8]
}
 800bdca:	bf00      	nop
 800bdcc:	e7fe      	b.n	800bdcc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	db04      	blt.n	800bdec <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	f1c3 0207 	rsb	r2, r3, #7
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	6959      	ldr	r1, [r3, #20]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4413      	add	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4a22      	ldr	r2, [pc, #136]	; (800be84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bdfc:	4413      	add	r3, r2
 800bdfe:	4299      	cmp	r1, r3
 800be00:	d101      	bne.n	800be06 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800be02:	2301      	movs	r3, #1
 800be04:	e000      	b.n	800be08 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800be06:	2300      	movs	r3, #0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d034      	beq.n	800be76 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	3304      	adds	r3, #4
 800be10:	4618      	mov	r0, r3
 800be12:	f7fe f89d 	bl	8009f50 <uxListRemove>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d115      	bne.n	800be48 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be20:	4918      	ldr	r1, [pc, #96]	; (800be84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d10a      	bne.n	800be48 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be36:	2201      	movs	r2, #1
 800be38:	fa02 f303 	lsl.w	r3, r2, r3
 800be3c:	43da      	mvns	r2, r3
 800be3e:	4b12      	ldr	r3, [pc, #72]	; (800be88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4013      	ands	r3, r2
 800be44:	4a10      	ldr	r2, [pc, #64]	; (800be88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800be46:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be48:	69bb      	ldr	r3, [r7, #24]
 800be4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be4c:	2201      	movs	r2, #1
 800be4e:	409a      	lsls	r2, r3
 800be50:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4313      	orrs	r3, r2
 800be56:	4a0c      	ldr	r2, [pc, #48]	; (800be88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	4a07      	ldr	r2, [pc, #28]	; (800be84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800be68:	441a      	add	r2, r3
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	3304      	adds	r3, #4
 800be6e:	4619      	mov	r1, r3
 800be70:	4610      	mov	r0, r2
 800be72:	f7fe f810 	bl	8009e96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be76:	bf00      	nop
 800be78:	3720      	adds	r7, #32
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	20000508 	.word	0x20000508
 800be84:	2000050c 	.word	0x2000050c
 800be88:	20000610 	.word	0x20000610

0800be8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800be8c:	b480      	push	{r7}
 800be8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800be90:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d004      	beq.n	800bea2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800be98:	4b05      	ldr	r3, [pc, #20]	; (800beb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be9e:	3201      	adds	r2, #1
 800bea0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bea2:	4b03      	ldr	r3, [pc, #12]	; (800beb0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bea4:	681b      	ldr	r3, [r3, #0]
	}
 800bea6:	4618      	mov	r0, r3
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr
 800beb0:	20000508 	.word	0x20000508

0800beb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bebe:	4b29      	ldr	r3, [pc, #164]	; (800bf64 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bec4:	4b28      	ldr	r3, [pc, #160]	; (800bf68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3304      	adds	r3, #4
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe f840 	bl	8009f50 <uxListRemove>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10b      	bne.n	800beee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bed6:	4b24      	ldr	r3, [pc, #144]	; (800bf68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bedc:	2201      	movs	r2, #1
 800bede:	fa02 f303 	lsl.w	r3, r2, r3
 800bee2:	43da      	mvns	r2, r3
 800bee4:	4b21      	ldr	r3, [pc, #132]	; (800bf6c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4013      	ands	r3, r2
 800beea:	4a20      	ldr	r2, [pc, #128]	; (800bf6c <prvAddCurrentTaskToDelayedList+0xb8>)
 800beec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef4:	d10a      	bne.n	800bf0c <prvAddCurrentTaskToDelayedList+0x58>
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d007      	beq.n	800bf0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800befc:	4b1a      	ldr	r3, [pc, #104]	; (800bf68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3304      	adds	r3, #4
 800bf02:	4619      	mov	r1, r3
 800bf04:	481a      	ldr	r0, [pc, #104]	; (800bf70 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf06:	f7fd ffc6 	bl	8009e96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf0a:	e026      	b.n	800bf5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4413      	add	r3, r2
 800bf12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf14:	4b14      	ldr	r3, [pc, #80]	; (800bf68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d209      	bcs.n	800bf38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf24:	4b13      	ldr	r3, [pc, #76]	; (800bf74 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	4b0f      	ldr	r3, [pc, #60]	; (800bf68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f7fd ffd4 	bl	8009ede <vListInsert>
}
 800bf36:	e010      	b.n	800bf5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf38:	4b0f      	ldr	r3, [pc, #60]	; (800bf78 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	; (800bf68 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	3304      	adds	r3, #4
 800bf42:	4619      	mov	r1, r3
 800bf44:	4610      	mov	r0, r2
 800bf46:	f7fd ffca 	bl	8009ede <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf4a:	4b0c      	ldr	r3, [pc, #48]	; (800bf7c <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d202      	bcs.n	800bf5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf54:	4a09      	ldr	r2, [pc, #36]	; (800bf7c <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	6013      	str	r3, [r2, #0]
}
 800bf5a:	bf00      	nop
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	2000060c 	.word	0x2000060c
 800bf68:	20000508 	.word	0x20000508
 800bf6c:	20000610 	.word	0x20000610
 800bf70:	200005f4 	.word	0x200005f4
 800bf74:	200005c4 	.word	0x200005c4
 800bf78:	200005c0 	.word	0x200005c0
 800bf7c:	20000628 	.word	0x20000628

0800bf80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	3b04      	subs	r3, #4
 800bf90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3b04      	subs	r3, #4
 800bf9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f023 0201 	bic.w	r2, r3, #1
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3b04      	subs	r3, #4
 800bfae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfb0:	4a0c      	ldr	r2, [pc, #48]	; (800bfe4 <pxPortInitialiseStack+0x64>)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3b14      	subs	r3, #20
 800bfba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3b04      	subs	r3, #4
 800bfc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f06f 0202 	mvn.w	r2, #2
 800bfce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3b20      	subs	r3, #32
 800bfd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	0800bfe9 	.word	0x0800bfe9

0800bfe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bff2:	4b12      	ldr	r3, [pc, #72]	; (800c03c <prvTaskExitError+0x54>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffa:	d00a      	beq.n	800c012 <prvTaskExitError+0x2a>
	__asm volatile
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	60fb      	str	r3, [r7, #12]
}
 800c00e:	bf00      	nop
 800c010:	e7fe      	b.n	800c010 <prvTaskExitError+0x28>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	60bb      	str	r3, [r7, #8]
}
 800c024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c026:	bf00      	nop
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d0fc      	beq.n	800c028 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c02e:	bf00      	nop
 800c030:	bf00      	nop
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	20000028 	.word	0x20000028

0800c040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c040:	4b07      	ldr	r3, [pc, #28]	; (800c060 <pxCurrentTCBConst2>)
 800c042:	6819      	ldr	r1, [r3, #0]
 800c044:	6808      	ldr	r0, [r1, #0]
 800c046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04a:	f380 8809 	msr	PSP, r0
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f04f 0000 	mov.w	r0, #0
 800c056:	f380 8811 	msr	BASEPRI, r0
 800c05a:	4770      	bx	lr
 800c05c:	f3af 8000 	nop.w

0800c060 <pxCurrentTCBConst2>:
 800c060:	20000508 	.word	0x20000508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop

0800c068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c068:	4808      	ldr	r0, [pc, #32]	; (800c08c <prvPortStartFirstTask+0x24>)
 800c06a:	6800      	ldr	r0, [r0, #0]
 800c06c:	6800      	ldr	r0, [r0, #0]
 800c06e:	f380 8808 	msr	MSP, r0
 800c072:	f04f 0000 	mov.w	r0, #0
 800c076:	f380 8814 	msr	CONTROL, r0
 800c07a:	b662      	cpsie	i
 800c07c:	b661      	cpsie	f
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	df00      	svc	0
 800c088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c08a:	bf00      	nop
 800c08c:	e000ed08 	.word	0xe000ed08

0800c090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c096:	4b46      	ldr	r3, [pc, #280]	; (800c1b0 <xPortStartScheduler+0x120>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a46      	ldr	r2, [pc, #280]	; (800c1b4 <xPortStartScheduler+0x124>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d10a      	bne.n	800c0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	613b      	str	r3, [r7, #16]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0b6:	4b3e      	ldr	r3, [pc, #248]	; (800c1b0 <xPortStartScheduler+0x120>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a3f      	ldr	r2, [pc, #252]	; (800c1b8 <xPortStartScheduler+0x128>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d10a      	bne.n	800c0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	60fb      	str	r3, [r7, #12]
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0d6:	4b39      	ldr	r3, [pc, #228]	; (800c1bc <xPortStartScheduler+0x12c>)
 800c0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	22ff      	movs	r2, #255	; 0xff
 800c0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0f0:	78fb      	ldrb	r3, [r7, #3]
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	4b31      	ldr	r3, [pc, #196]	; (800c1c0 <xPortStartScheduler+0x130>)
 800c0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0fe:	4b31      	ldr	r3, [pc, #196]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c100:	2207      	movs	r2, #7
 800c102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c104:	e009      	b.n	800c11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c106:	4b2f      	ldr	r3, [pc, #188]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	4a2d      	ldr	r2, [pc, #180]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	b2db      	uxtb	r3, r3
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	b2db      	uxtb	r3, r3
 800c118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c11a:	78fb      	ldrb	r3, [r7, #3]
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c122:	2b80      	cmp	r3, #128	; 0x80
 800c124:	d0ef      	beq.n	800c106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c126:	4b27      	ldr	r3, [pc, #156]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1c3 0307 	rsb	r3, r3, #7
 800c12e:	2b04      	cmp	r3, #4
 800c130:	d00a      	beq.n	800c148 <xPortStartScheduler+0xb8>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	60bb      	str	r3, [r7, #8]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c148:	4b1e      	ldr	r3, [pc, #120]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	021b      	lsls	r3, r3, #8
 800c14e:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c15a:	4a1a      	ldr	r2, [pc, #104]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	b2da      	uxtb	r2, r3
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c166:	4b18      	ldr	r3, [pc, #96]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a17      	ldr	r2, [pc, #92]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c172:	4b15      	ldr	r3, [pc, #84]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a14      	ldr	r2, [pc, #80]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c17e:	f000 f8dd 	bl	800c33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c182:	4b12      	ldr	r3, [pc, #72]	; (800c1cc <xPortStartScheduler+0x13c>)
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c188:	f000 f8fc 	bl	800c384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c18c:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <xPortStartScheduler+0x140>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a0f      	ldr	r2, [pc, #60]	; (800c1d0 <xPortStartScheduler+0x140>)
 800c192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c198:	f7ff ff66 	bl	800c068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c19c:	f7ff fa60 	bl	800b660 <vTaskSwitchContext>
	prvTaskExitError();
 800c1a0:	f7ff ff22 	bl	800bfe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	e000ed00 	.word	0xe000ed00
 800c1b4:	410fc271 	.word	0x410fc271
 800c1b8:	410fc270 	.word	0x410fc270
 800c1bc:	e000e400 	.word	0xe000e400
 800c1c0:	20000634 	.word	0x20000634
 800c1c4:	20000638 	.word	0x20000638
 800c1c8:	e000ed20 	.word	0xe000ed20
 800c1cc:	20000028 	.word	0x20000028
 800c1d0:	e000ef34 	.word	0xe000ef34

0800c1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	607b      	str	r3, [r7, #4]
}
 800c1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1ee:	4b0f      	ldr	r3, [pc, #60]	; (800c22c <vPortEnterCritical+0x58>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	4a0d      	ldr	r2, [pc, #52]	; (800c22c <vPortEnterCritical+0x58>)
 800c1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1f8:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <vPortEnterCritical+0x58>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d10f      	bne.n	800c220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <vPortEnterCritical+0x5c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <vPortEnterCritical+0x4c>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	603b      	str	r3, [r7, #0]
}
 800c21c:	bf00      	nop
 800c21e:	e7fe      	b.n	800c21e <vPortEnterCritical+0x4a>
	}
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	20000028 	.word	0x20000028
 800c230:	e000ed04 	.word	0xe000ed04

0800c234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c23a:	4b12      	ldr	r3, [pc, #72]	; (800c284 <vPortExitCritical+0x50>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10a      	bne.n	800c258 <vPortExitCritical+0x24>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	607b      	str	r3, [r7, #4]
}
 800c254:	bf00      	nop
 800c256:	e7fe      	b.n	800c256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <vPortExitCritical+0x50>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4a09      	ldr	r2, [pc, #36]	; (800c284 <vPortExitCritical+0x50>)
 800c260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c262:	4b08      	ldr	r3, [pc, #32]	; (800c284 <vPortExitCritical+0x50>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d105      	bne.n	800c276 <vPortExitCritical+0x42>
 800c26a:	2300      	movs	r3, #0
 800c26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	f383 8811 	msr	BASEPRI, r3
}
 800c274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c276:	bf00      	nop
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	20000028 	.word	0x20000028
	...

0800c290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c290:	f3ef 8009 	mrs	r0, PSP
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	4b15      	ldr	r3, [pc, #84]	; (800c2f0 <pxCurrentTCBConst>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	f01e 0f10 	tst.w	lr, #16
 800c2a0:	bf08      	it	eq
 800c2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2aa:	6010      	str	r0, [r2, #0]
 800c2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2b4:	f380 8811 	msr	BASEPRI, r0
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f7ff f9ce 	bl	800b660 <vTaskSwitchContext>
 800c2c4:	f04f 0000 	mov.w	r0, #0
 800c2c8:	f380 8811 	msr	BASEPRI, r0
 800c2cc:	bc09      	pop	{r0, r3}
 800c2ce:	6819      	ldr	r1, [r3, #0]
 800c2d0:	6808      	ldr	r0, [r1, #0]
 800c2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d6:	f01e 0f10 	tst.w	lr, #16
 800c2da:	bf08      	it	eq
 800c2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2e0:	f380 8809 	msr	PSP, r0
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	f3af 8000 	nop.w

0800c2f0 <pxCurrentTCBConst>:
 800c2f0:	20000508 	.word	0x20000508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2f4:	bf00      	nop
 800c2f6:	bf00      	nop

0800c2f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	607b      	str	r3, [r7, #4]
}
 800c310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c312:	f7ff f8e7 	bl	800b4e4 <xTaskIncrementTick>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c31c:	4b06      	ldr	r3, [pc, #24]	; (800c338 <SysTick_Handler+0x40>)
 800c31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	2300      	movs	r3, #0
 800c326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	f383 8811 	msr	BASEPRI, r3
}
 800c32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c340:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <vPortSetupTimerInterrupt+0x34>)
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c346:	4b0b      	ldr	r3, [pc, #44]	; (800c374 <vPortSetupTimerInterrupt+0x38>)
 800c348:	2200      	movs	r2, #0
 800c34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c34c:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <vPortSetupTimerInterrupt+0x3c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a0a      	ldr	r2, [pc, #40]	; (800c37c <vPortSetupTimerInterrupt+0x40>)
 800c352:	fba2 2303 	umull	r2, r3, r2, r3
 800c356:	099b      	lsrs	r3, r3, #6
 800c358:	4a09      	ldr	r2, [pc, #36]	; (800c380 <vPortSetupTimerInterrupt+0x44>)
 800c35a:	3b01      	subs	r3, #1
 800c35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c35e:	4b04      	ldr	r3, [pc, #16]	; (800c370 <vPortSetupTimerInterrupt+0x34>)
 800c360:	2207      	movs	r2, #7
 800c362:	601a      	str	r2, [r3, #0]
}
 800c364:	bf00      	nop
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	e000e010 	.word	0xe000e010
 800c374:	e000e018 	.word	0xe000e018
 800c378:	20000008 	.word	0x20000008
 800c37c:	10624dd3 	.word	0x10624dd3
 800c380:	e000e014 	.word	0xe000e014

0800c384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c394 <vPortEnableVFP+0x10>
 800c388:	6801      	ldr	r1, [r0, #0]
 800c38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c38e:	6001      	str	r1, [r0, #0]
 800c390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c392:	bf00      	nop
 800c394:	e000ed88 	.word	0xe000ed88

0800c398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c39e:	f3ef 8305 	mrs	r3, IPSR
 800c3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b0f      	cmp	r3, #15
 800c3a8:	d914      	bls.n	800c3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3aa:	4a17      	ldr	r2, [pc, #92]	; (800c408 <vPortValidateInterruptPriority+0x70>)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3b4:	4b15      	ldr	r3, [pc, #84]	; (800c40c <vPortValidateInterruptPriority+0x74>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	7afa      	ldrb	r2, [r7, #11]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d20a      	bcs.n	800c3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	607b      	str	r3, [r7, #4]
}
 800c3d0:	bf00      	nop
 800c3d2:	e7fe      	b.n	800c3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3d4:	4b0e      	ldr	r3, [pc, #56]	; (800c410 <vPortValidateInterruptPriority+0x78>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <vPortValidateInterruptPriority+0x7c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d90a      	bls.n	800c3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	603b      	str	r3, [r7, #0]
}
 800c3f6:	bf00      	nop
 800c3f8:	e7fe      	b.n	800c3f8 <vPortValidateInterruptPriority+0x60>
	}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	e000e3f0 	.word	0xe000e3f0
 800c40c:	20000634 	.word	0x20000634
 800c410:	e000ed0c 	.word	0xe000ed0c
 800c414:	20000638 	.word	0x20000638

0800c418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08a      	sub	sp, #40	; 0x28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c420:	2300      	movs	r3, #0
 800c422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c424:	f7fe ffb4 	bl	800b390 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c428:	4b58      	ldr	r3, [pc, #352]	; (800c58c <pvPortMalloc+0x174>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c430:	f000 f910 	bl	800c654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c434:	4b56      	ldr	r3, [pc, #344]	; (800c590 <pvPortMalloc+0x178>)
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4013      	ands	r3, r2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f040 808e 	bne.w	800c55e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01d      	beq.n	800c484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c448:	2208      	movs	r2, #8
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4413      	add	r3, r2
 800c44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f003 0307 	and.w	r3, r3, #7
 800c456:	2b00      	cmp	r3, #0
 800c458:	d014      	beq.n	800c484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f023 0307 	bic.w	r3, r3, #7
 800c460:	3308      	adds	r3, #8
 800c462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00a      	beq.n	800c484 <pvPortMalloc+0x6c>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	617b      	str	r3, [r7, #20]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d069      	beq.n	800c55e <pvPortMalloc+0x146>
 800c48a:	4b42      	ldr	r3, [pc, #264]	; (800c594 <pvPortMalloc+0x17c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d864      	bhi.n	800c55e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c494:	4b40      	ldr	r3, [pc, #256]	; (800c598 <pvPortMalloc+0x180>)
 800c496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c498:	4b3f      	ldr	r3, [pc, #252]	; (800c598 <pvPortMalloc+0x180>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c49e:	e004      	b.n	800c4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d903      	bls.n	800c4bc <pvPortMalloc+0xa4>
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1f1      	bne.n	800c4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4bc:	4b33      	ldr	r3, [pc, #204]	; (800c58c <pvPortMalloc+0x174>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d04b      	beq.n	800c55e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2208      	movs	r2, #8
 800c4cc:	4413      	add	r3, r2
 800c4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	1ad2      	subs	r2, r2, r3
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d91f      	bls.n	800c528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00a      	beq.n	800c510 <pvPortMalloc+0xf8>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	613b      	str	r3, [r7, #16]
}
 800c50c:	bf00      	nop
 800c50e:	e7fe      	b.n	800c50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	1ad2      	subs	r2, r2, r3
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c522:	69b8      	ldr	r0, [r7, #24]
 800c524:	f000 f8f8 	bl	800c718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c528:	4b1a      	ldr	r3, [pc, #104]	; (800c594 <pvPortMalloc+0x17c>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	4a18      	ldr	r2, [pc, #96]	; (800c594 <pvPortMalloc+0x17c>)
 800c534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c536:	4b17      	ldr	r3, [pc, #92]	; (800c594 <pvPortMalloc+0x17c>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b18      	ldr	r3, [pc, #96]	; (800c59c <pvPortMalloc+0x184>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d203      	bcs.n	800c54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c542:	4b14      	ldr	r3, [pc, #80]	; (800c594 <pvPortMalloc+0x17c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a15      	ldr	r2, [pc, #84]	; (800c59c <pvPortMalloc+0x184>)
 800c548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	4b10      	ldr	r3, [pc, #64]	; (800c590 <pvPortMalloc+0x178>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	431a      	orrs	r2, r3
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c55e:	f7fe ff25 	bl	800b3ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	f003 0307 	and.w	r3, r3, #7
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00a      	beq.n	800c582 <pvPortMalloc+0x16a>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	60fb      	str	r3, [r7, #12]
}
 800c57e:	bf00      	nop
 800c580:	e7fe      	b.n	800c580 <pvPortMalloc+0x168>
	return pvReturn;
 800c582:	69fb      	ldr	r3, [r7, #28]
}
 800c584:	4618      	mov	r0, r3
 800c586:	3728      	adds	r7, #40	; 0x28
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	20001544 	.word	0x20001544
 800c590:	20001550 	.word	0x20001550
 800c594:	20001548 	.word	0x20001548
 800c598:	2000153c 	.word	0x2000153c
 800c59c:	2000154c 	.word	0x2000154c

0800c5a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d048      	beq.n	800c644 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5b2:	2308      	movs	r3, #8
 800c5b4:	425b      	negs	r3, r3
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	4b21      	ldr	r3, [pc, #132]	; (800c64c <vPortFree+0xac>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10a      	bne.n	800c5e4 <vPortFree+0x44>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	60fb      	str	r3, [r7, #12]
}
 800c5e0:	bf00      	nop
 800c5e2:	e7fe      	b.n	800c5e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00a      	beq.n	800c602 <vPortFree+0x62>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	60bb      	str	r3, [r7, #8]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	4b11      	ldr	r3, [pc, #68]	; (800c64c <vPortFree+0xac>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4013      	ands	r3, r2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d019      	beq.n	800c644 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d115      	bne.n	800c644 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	4b0b      	ldr	r3, [pc, #44]	; (800c64c <vPortFree+0xac>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	43db      	mvns	r3, r3
 800c622:	401a      	ands	r2, r3
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c628:	f7fe feb2 	bl	800b390 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	685a      	ldr	r2, [r3, #4]
 800c630:	4b07      	ldr	r3, [pc, #28]	; (800c650 <vPortFree+0xb0>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4413      	add	r3, r2
 800c636:	4a06      	ldr	r2, [pc, #24]	; (800c650 <vPortFree+0xb0>)
 800c638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c63a:	6938      	ldr	r0, [r7, #16]
 800c63c:	f000 f86c 	bl	800c718 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c640:	f7fe feb4 	bl	800b3ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c644:	bf00      	nop
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	20001550 	.word	0x20001550
 800c650:	20001548 	.word	0x20001548

0800c654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c65a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800c65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c660:	4b27      	ldr	r3, [pc, #156]	; (800c700 <prvHeapInit+0xac>)
 800c662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f003 0307 	and.w	r3, r3, #7
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00c      	beq.n	800c688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3307      	adds	r3, #7
 800c672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f023 0307 	bic.w	r3, r3, #7
 800c67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	4a1f      	ldr	r2, [pc, #124]	; (800c700 <prvHeapInit+0xac>)
 800c684:	4413      	add	r3, r2
 800c686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c68c:	4a1d      	ldr	r2, [pc, #116]	; (800c704 <prvHeapInit+0xb0>)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c692:	4b1c      	ldr	r3, [pc, #112]	; (800c704 <prvHeapInit+0xb0>)
 800c694:	2200      	movs	r2, #0
 800c696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	4413      	add	r3, r2
 800c69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6a0:	2208      	movs	r2, #8
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	1a9b      	subs	r3, r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f023 0307 	bic.w	r3, r3, #7
 800c6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	4a15      	ldr	r2, [pc, #84]	; (800c708 <prvHeapInit+0xb4>)
 800c6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6b6:	4b14      	ldr	r3, [pc, #80]	; (800c708 <prvHeapInit+0xb4>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6be:	4b12      	ldr	r3, [pc, #72]	; (800c708 <prvHeapInit+0xb4>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	1ad2      	subs	r2, r2, r3
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6d4:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <prvHeapInit+0xb4>)
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4a0a      	ldr	r2, [pc, #40]	; (800c70c <prvHeapInit+0xb8>)
 800c6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	4a09      	ldr	r2, [pc, #36]	; (800c710 <prvHeapInit+0xbc>)
 800c6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6ec:	4b09      	ldr	r3, [pc, #36]	; (800c714 <prvHeapInit+0xc0>)
 800c6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c6f2:	601a      	str	r2, [r3, #0]
}
 800c6f4:	bf00      	nop
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr
 800c700:	2000063c 	.word	0x2000063c
 800c704:	2000153c 	.word	0x2000153c
 800c708:	20001544 	.word	0x20001544
 800c70c:	2000154c 	.word	0x2000154c
 800c710:	20001548 	.word	0x20001548
 800c714:	20001550 	.word	0x20001550

0800c718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c720:	4b28      	ldr	r3, [pc, #160]	; (800c7c4 <prvInsertBlockIntoFreeList+0xac>)
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	e002      	b.n	800c72c <prvInsertBlockIntoFreeList+0x14>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	60fb      	str	r3, [r7, #12]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	429a      	cmp	r2, r3
 800c734:	d8f7      	bhi.n	800c726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	4413      	add	r3, r2
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	429a      	cmp	r2, r3
 800c746:	d108      	bne.n	800c75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	441a      	add	r2, r3
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	441a      	add	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d118      	bne.n	800c7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b15      	ldr	r3, [pc, #84]	; (800c7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	429a      	cmp	r2, r3
 800c778:	d00d      	beq.n	800c796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	441a      	add	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	601a      	str	r2, [r3, #0]
 800c794:	e008      	b.n	800c7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c796:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	e003      	b.n	800c7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d002      	beq.n	800c7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7b6:	bf00      	nop
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	2000153c 	.word	0x2000153c
 800c7c8:	20001544 	.word	0x20001544

0800c7cc <__errno>:
 800c7cc:	4b01      	ldr	r3, [pc, #4]	; (800c7d4 <__errno+0x8>)
 800c7ce:	6818      	ldr	r0, [r3, #0]
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	2000002c 	.word	0x2000002c

0800c7d8 <__libc_init_array>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	4d0d      	ldr	r5, [pc, #52]	; (800c810 <__libc_init_array+0x38>)
 800c7dc:	4c0d      	ldr	r4, [pc, #52]	; (800c814 <__libc_init_array+0x3c>)
 800c7de:	1b64      	subs	r4, r4, r5
 800c7e0:	10a4      	asrs	r4, r4, #2
 800c7e2:	2600      	movs	r6, #0
 800c7e4:	42a6      	cmp	r6, r4
 800c7e6:	d109      	bne.n	800c7fc <__libc_init_array+0x24>
 800c7e8:	4d0b      	ldr	r5, [pc, #44]	; (800c818 <__libc_init_array+0x40>)
 800c7ea:	4c0c      	ldr	r4, [pc, #48]	; (800c81c <__libc_init_array+0x44>)
 800c7ec:	f000 fd3c 	bl	800d268 <_init>
 800c7f0:	1b64      	subs	r4, r4, r5
 800c7f2:	10a4      	asrs	r4, r4, #2
 800c7f4:	2600      	movs	r6, #0
 800c7f6:	42a6      	cmp	r6, r4
 800c7f8:	d105      	bne.n	800c806 <__libc_init_array+0x2e>
 800c7fa:	bd70      	pop	{r4, r5, r6, pc}
 800c7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c800:	4798      	blx	r3
 800c802:	3601      	adds	r6, #1
 800c804:	e7ee      	b.n	800c7e4 <__libc_init_array+0xc>
 800c806:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80a:	4798      	blx	r3
 800c80c:	3601      	adds	r6, #1
 800c80e:	e7f2      	b.n	800c7f6 <__libc_init_array+0x1e>
 800c810:	0800dcd8 	.word	0x0800dcd8
 800c814:	0800dcd8 	.word	0x0800dcd8
 800c818:	0800dcd8 	.word	0x0800dcd8
 800c81c:	0800dcdc 	.word	0x0800dcdc

0800c820 <__retarget_lock_acquire_recursive>:
 800c820:	4770      	bx	lr

0800c822 <__retarget_lock_release_recursive>:
 800c822:	4770      	bx	lr

0800c824 <malloc>:
 800c824:	4b02      	ldr	r3, [pc, #8]	; (800c830 <malloc+0xc>)
 800c826:	4601      	mov	r1, r0
 800c828:	6818      	ldr	r0, [r3, #0]
 800c82a:	f000 b88d 	b.w	800c948 <_malloc_r>
 800c82e:	bf00      	nop
 800c830:	2000002c 	.word	0x2000002c

0800c834 <free>:
 800c834:	4b02      	ldr	r3, [pc, #8]	; (800c840 <free+0xc>)
 800c836:	4601      	mov	r1, r0
 800c838:	6818      	ldr	r0, [r3, #0]
 800c83a:	f000 b819 	b.w	800c870 <_free_r>
 800c83e:	bf00      	nop
 800c840:	2000002c 	.word	0x2000002c

0800c844 <memcpy>:
 800c844:	440a      	add	r2, r1
 800c846:	4291      	cmp	r1, r2
 800c848:	f100 33ff 	add.w	r3, r0, #4294967295
 800c84c:	d100      	bne.n	800c850 <memcpy+0xc>
 800c84e:	4770      	bx	lr
 800c850:	b510      	push	{r4, lr}
 800c852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c85a:	4291      	cmp	r1, r2
 800c85c:	d1f9      	bne.n	800c852 <memcpy+0xe>
 800c85e:	bd10      	pop	{r4, pc}

0800c860 <memset>:
 800c860:	4402      	add	r2, r0
 800c862:	4603      	mov	r3, r0
 800c864:	4293      	cmp	r3, r2
 800c866:	d100      	bne.n	800c86a <memset+0xa>
 800c868:	4770      	bx	lr
 800c86a:	f803 1b01 	strb.w	r1, [r3], #1
 800c86e:	e7f9      	b.n	800c864 <memset+0x4>

0800c870 <_free_r>:
 800c870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c872:	2900      	cmp	r1, #0
 800c874:	d044      	beq.n	800c900 <_free_r+0x90>
 800c876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c87a:	9001      	str	r0, [sp, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f1a1 0404 	sub.w	r4, r1, #4
 800c882:	bfb8      	it	lt
 800c884:	18e4      	addlt	r4, r4, r3
 800c886:	f000 f9a3 	bl	800cbd0 <__malloc_lock>
 800c88a:	4a1e      	ldr	r2, [pc, #120]	; (800c904 <_free_r+0x94>)
 800c88c:	9801      	ldr	r0, [sp, #4]
 800c88e:	6813      	ldr	r3, [r2, #0]
 800c890:	b933      	cbnz	r3, 800c8a0 <_free_r+0x30>
 800c892:	6063      	str	r3, [r4, #4]
 800c894:	6014      	str	r4, [r2, #0]
 800c896:	b003      	add	sp, #12
 800c898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c89c:	f000 b99e 	b.w	800cbdc <__malloc_unlock>
 800c8a0:	42a3      	cmp	r3, r4
 800c8a2:	d908      	bls.n	800c8b6 <_free_r+0x46>
 800c8a4:	6825      	ldr	r5, [r4, #0]
 800c8a6:	1961      	adds	r1, r4, r5
 800c8a8:	428b      	cmp	r3, r1
 800c8aa:	bf01      	itttt	eq
 800c8ac:	6819      	ldreq	r1, [r3, #0]
 800c8ae:	685b      	ldreq	r3, [r3, #4]
 800c8b0:	1949      	addeq	r1, r1, r5
 800c8b2:	6021      	streq	r1, [r4, #0]
 800c8b4:	e7ed      	b.n	800c892 <_free_r+0x22>
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	685b      	ldr	r3, [r3, #4]
 800c8ba:	b10b      	cbz	r3, 800c8c0 <_free_r+0x50>
 800c8bc:	42a3      	cmp	r3, r4
 800c8be:	d9fa      	bls.n	800c8b6 <_free_r+0x46>
 800c8c0:	6811      	ldr	r1, [r2, #0]
 800c8c2:	1855      	adds	r5, r2, r1
 800c8c4:	42a5      	cmp	r5, r4
 800c8c6:	d10b      	bne.n	800c8e0 <_free_r+0x70>
 800c8c8:	6824      	ldr	r4, [r4, #0]
 800c8ca:	4421      	add	r1, r4
 800c8cc:	1854      	adds	r4, r2, r1
 800c8ce:	42a3      	cmp	r3, r4
 800c8d0:	6011      	str	r1, [r2, #0]
 800c8d2:	d1e0      	bne.n	800c896 <_free_r+0x26>
 800c8d4:	681c      	ldr	r4, [r3, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	6053      	str	r3, [r2, #4]
 800c8da:	4421      	add	r1, r4
 800c8dc:	6011      	str	r1, [r2, #0]
 800c8de:	e7da      	b.n	800c896 <_free_r+0x26>
 800c8e0:	d902      	bls.n	800c8e8 <_free_r+0x78>
 800c8e2:	230c      	movs	r3, #12
 800c8e4:	6003      	str	r3, [r0, #0]
 800c8e6:	e7d6      	b.n	800c896 <_free_r+0x26>
 800c8e8:	6825      	ldr	r5, [r4, #0]
 800c8ea:	1961      	adds	r1, r4, r5
 800c8ec:	428b      	cmp	r3, r1
 800c8ee:	bf04      	itt	eq
 800c8f0:	6819      	ldreq	r1, [r3, #0]
 800c8f2:	685b      	ldreq	r3, [r3, #4]
 800c8f4:	6063      	str	r3, [r4, #4]
 800c8f6:	bf04      	itt	eq
 800c8f8:	1949      	addeq	r1, r1, r5
 800c8fa:	6021      	streq	r1, [r4, #0]
 800c8fc:	6054      	str	r4, [r2, #4]
 800c8fe:	e7ca      	b.n	800c896 <_free_r+0x26>
 800c900:	b003      	add	sp, #12
 800c902:	bd30      	pop	{r4, r5, pc}
 800c904:	20001558 	.word	0x20001558

0800c908 <sbrk_aligned>:
 800c908:	b570      	push	{r4, r5, r6, lr}
 800c90a:	4e0e      	ldr	r6, [pc, #56]	; (800c944 <sbrk_aligned+0x3c>)
 800c90c:	460c      	mov	r4, r1
 800c90e:	6831      	ldr	r1, [r6, #0]
 800c910:	4605      	mov	r5, r0
 800c912:	b911      	cbnz	r1, 800c91a <sbrk_aligned+0x12>
 800c914:	f000 f8fe 	bl	800cb14 <_sbrk_r>
 800c918:	6030      	str	r0, [r6, #0]
 800c91a:	4621      	mov	r1, r4
 800c91c:	4628      	mov	r0, r5
 800c91e:	f000 f8f9 	bl	800cb14 <_sbrk_r>
 800c922:	1c43      	adds	r3, r0, #1
 800c924:	d00a      	beq.n	800c93c <sbrk_aligned+0x34>
 800c926:	1cc4      	adds	r4, r0, #3
 800c928:	f024 0403 	bic.w	r4, r4, #3
 800c92c:	42a0      	cmp	r0, r4
 800c92e:	d007      	beq.n	800c940 <sbrk_aligned+0x38>
 800c930:	1a21      	subs	r1, r4, r0
 800c932:	4628      	mov	r0, r5
 800c934:	f000 f8ee 	bl	800cb14 <_sbrk_r>
 800c938:	3001      	adds	r0, #1
 800c93a:	d101      	bne.n	800c940 <sbrk_aligned+0x38>
 800c93c:	f04f 34ff 	mov.w	r4, #4294967295
 800c940:	4620      	mov	r0, r4
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	2000155c 	.word	0x2000155c

0800c948 <_malloc_r>:
 800c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94c:	1ccd      	adds	r5, r1, #3
 800c94e:	f025 0503 	bic.w	r5, r5, #3
 800c952:	3508      	adds	r5, #8
 800c954:	2d0c      	cmp	r5, #12
 800c956:	bf38      	it	cc
 800c958:	250c      	movcc	r5, #12
 800c95a:	2d00      	cmp	r5, #0
 800c95c:	4607      	mov	r7, r0
 800c95e:	db01      	blt.n	800c964 <_malloc_r+0x1c>
 800c960:	42a9      	cmp	r1, r5
 800c962:	d905      	bls.n	800c970 <_malloc_r+0x28>
 800c964:	230c      	movs	r3, #12
 800c966:	603b      	str	r3, [r7, #0]
 800c968:	2600      	movs	r6, #0
 800c96a:	4630      	mov	r0, r6
 800c96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c970:	4e2e      	ldr	r6, [pc, #184]	; (800ca2c <_malloc_r+0xe4>)
 800c972:	f000 f92d 	bl	800cbd0 <__malloc_lock>
 800c976:	6833      	ldr	r3, [r6, #0]
 800c978:	461c      	mov	r4, r3
 800c97a:	bb34      	cbnz	r4, 800c9ca <_malloc_r+0x82>
 800c97c:	4629      	mov	r1, r5
 800c97e:	4638      	mov	r0, r7
 800c980:	f7ff ffc2 	bl	800c908 <sbrk_aligned>
 800c984:	1c43      	adds	r3, r0, #1
 800c986:	4604      	mov	r4, r0
 800c988:	d14d      	bne.n	800ca26 <_malloc_r+0xde>
 800c98a:	6834      	ldr	r4, [r6, #0]
 800c98c:	4626      	mov	r6, r4
 800c98e:	2e00      	cmp	r6, #0
 800c990:	d140      	bne.n	800ca14 <_malloc_r+0xcc>
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	4631      	mov	r1, r6
 800c996:	4638      	mov	r0, r7
 800c998:	eb04 0803 	add.w	r8, r4, r3
 800c99c:	f000 f8ba 	bl	800cb14 <_sbrk_r>
 800c9a0:	4580      	cmp	r8, r0
 800c9a2:	d13a      	bne.n	800ca1a <_malloc_r+0xd2>
 800c9a4:	6821      	ldr	r1, [r4, #0]
 800c9a6:	3503      	adds	r5, #3
 800c9a8:	1a6d      	subs	r5, r5, r1
 800c9aa:	f025 0503 	bic.w	r5, r5, #3
 800c9ae:	3508      	adds	r5, #8
 800c9b0:	2d0c      	cmp	r5, #12
 800c9b2:	bf38      	it	cc
 800c9b4:	250c      	movcc	r5, #12
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	f7ff ffa5 	bl	800c908 <sbrk_aligned>
 800c9be:	3001      	adds	r0, #1
 800c9c0:	d02b      	beq.n	800ca1a <_malloc_r+0xd2>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	442b      	add	r3, r5
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	e00e      	b.n	800c9e8 <_malloc_r+0xa0>
 800c9ca:	6822      	ldr	r2, [r4, #0]
 800c9cc:	1b52      	subs	r2, r2, r5
 800c9ce:	d41e      	bmi.n	800ca0e <_malloc_r+0xc6>
 800c9d0:	2a0b      	cmp	r2, #11
 800c9d2:	d916      	bls.n	800ca02 <_malloc_r+0xba>
 800c9d4:	1961      	adds	r1, r4, r5
 800c9d6:	42a3      	cmp	r3, r4
 800c9d8:	6025      	str	r5, [r4, #0]
 800c9da:	bf18      	it	ne
 800c9dc:	6059      	strne	r1, [r3, #4]
 800c9de:	6863      	ldr	r3, [r4, #4]
 800c9e0:	bf08      	it	eq
 800c9e2:	6031      	streq	r1, [r6, #0]
 800c9e4:	5162      	str	r2, [r4, r5]
 800c9e6:	604b      	str	r3, [r1, #4]
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	f104 060b 	add.w	r6, r4, #11
 800c9ee:	f000 f8f5 	bl	800cbdc <__malloc_unlock>
 800c9f2:	f026 0607 	bic.w	r6, r6, #7
 800c9f6:	1d23      	adds	r3, r4, #4
 800c9f8:	1af2      	subs	r2, r6, r3
 800c9fa:	d0b6      	beq.n	800c96a <_malloc_r+0x22>
 800c9fc:	1b9b      	subs	r3, r3, r6
 800c9fe:	50a3      	str	r3, [r4, r2]
 800ca00:	e7b3      	b.n	800c96a <_malloc_r+0x22>
 800ca02:	6862      	ldr	r2, [r4, #4]
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	bf0c      	ite	eq
 800ca08:	6032      	streq	r2, [r6, #0]
 800ca0a:	605a      	strne	r2, [r3, #4]
 800ca0c:	e7ec      	b.n	800c9e8 <_malloc_r+0xa0>
 800ca0e:	4623      	mov	r3, r4
 800ca10:	6864      	ldr	r4, [r4, #4]
 800ca12:	e7b2      	b.n	800c97a <_malloc_r+0x32>
 800ca14:	4634      	mov	r4, r6
 800ca16:	6876      	ldr	r6, [r6, #4]
 800ca18:	e7b9      	b.n	800c98e <_malloc_r+0x46>
 800ca1a:	230c      	movs	r3, #12
 800ca1c:	603b      	str	r3, [r7, #0]
 800ca1e:	4638      	mov	r0, r7
 800ca20:	f000 f8dc 	bl	800cbdc <__malloc_unlock>
 800ca24:	e7a1      	b.n	800c96a <_malloc_r+0x22>
 800ca26:	6025      	str	r5, [r4, #0]
 800ca28:	e7de      	b.n	800c9e8 <_malloc_r+0xa0>
 800ca2a:	bf00      	nop
 800ca2c:	20001558 	.word	0x20001558

0800ca30 <realloc>:
 800ca30:	4b02      	ldr	r3, [pc, #8]	; (800ca3c <realloc+0xc>)
 800ca32:	460a      	mov	r2, r1
 800ca34:	4601      	mov	r1, r0
 800ca36:	6818      	ldr	r0, [r3, #0]
 800ca38:	f000 b8d6 	b.w	800cbe8 <_realloc_r>
 800ca3c:	2000002c 	.word	0x2000002c

0800ca40 <cleanup_glue>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	460c      	mov	r4, r1
 800ca44:	6809      	ldr	r1, [r1, #0]
 800ca46:	4605      	mov	r5, r0
 800ca48:	b109      	cbz	r1, 800ca4e <cleanup_glue+0xe>
 800ca4a:	f7ff fff9 	bl	800ca40 <cleanup_glue>
 800ca4e:	4621      	mov	r1, r4
 800ca50:	4628      	mov	r0, r5
 800ca52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca56:	f7ff bf0b 	b.w	800c870 <_free_r>
	...

0800ca5c <_reclaim_reent>:
 800ca5c:	4b2c      	ldr	r3, [pc, #176]	; (800cb10 <_reclaim_reent+0xb4>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4283      	cmp	r3, r0
 800ca62:	b570      	push	{r4, r5, r6, lr}
 800ca64:	4604      	mov	r4, r0
 800ca66:	d051      	beq.n	800cb0c <_reclaim_reent+0xb0>
 800ca68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ca6a:	b143      	cbz	r3, 800ca7e <_reclaim_reent+0x22>
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d14a      	bne.n	800cb08 <_reclaim_reent+0xac>
 800ca72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca74:	6819      	ldr	r1, [r3, #0]
 800ca76:	b111      	cbz	r1, 800ca7e <_reclaim_reent+0x22>
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f7ff fef9 	bl	800c870 <_free_r>
 800ca7e:	6961      	ldr	r1, [r4, #20]
 800ca80:	b111      	cbz	r1, 800ca88 <_reclaim_reent+0x2c>
 800ca82:	4620      	mov	r0, r4
 800ca84:	f7ff fef4 	bl	800c870 <_free_r>
 800ca88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ca8a:	b111      	cbz	r1, 800ca92 <_reclaim_reent+0x36>
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f7ff feef 	bl	800c870 <_free_r>
 800ca92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ca94:	b111      	cbz	r1, 800ca9c <_reclaim_reent+0x40>
 800ca96:	4620      	mov	r0, r4
 800ca98:	f7ff feea 	bl	800c870 <_free_r>
 800ca9c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ca9e:	b111      	cbz	r1, 800caa6 <_reclaim_reent+0x4a>
 800caa0:	4620      	mov	r0, r4
 800caa2:	f7ff fee5 	bl	800c870 <_free_r>
 800caa6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800caa8:	b111      	cbz	r1, 800cab0 <_reclaim_reent+0x54>
 800caaa:	4620      	mov	r0, r4
 800caac:	f7ff fee0 	bl	800c870 <_free_r>
 800cab0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cab2:	b111      	cbz	r1, 800caba <_reclaim_reent+0x5e>
 800cab4:	4620      	mov	r0, r4
 800cab6:	f7ff fedb 	bl	800c870 <_free_r>
 800caba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cabc:	b111      	cbz	r1, 800cac4 <_reclaim_reent+0x68>
 800cabe:	4620      	mov	r0, r4
 800cac0:	f7ff fed6 	bl	800c870 <_free_r>
 800cac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cac6:	b111      	cbz	r1, 800cace <_reclaim_reent+0x72>
 800cac8:	4620      	mov	r0, r4
 800caca:	f7ff fed1 	bl	800c870 <_free_r>
 800cace:	69a3      	ldr	r3, [r4, #24]
 800cad0:	b1e3      	cbz	r3, 800cb0c <_reclaim_reent+0xb0>
 800cad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cad4:	4620      	mov	r0, r4
 800cad6:	4798      	blx	r3
 800cad8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cada:	b1b9      	cbz	r1, 800cb0c <_reclaim_reent+0xb0>
 800cadc:	4620      	mov	r0, r4
 800cade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cae2:	f7ff bfad 	b.w	800ca40 <cleanup_glue>
 800cae6:	5949      	ldr	r1, [r1, r5]
 800cae8:	b941      	cbnz	r1, 800cafc <_reclaim_reent+0xa0>
 800caea:	3504      	adds	r5, #4
 800caec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caee:	2d80      	cmp	r5, #128	; 0x80
 800caf0:	68d9      	ldr	r1, [r3, #12]
 800caf2:	d1f8      	bne.n	800cae6 <_reclaim_reent+0x8a>
 800caf4:	4620      	mov	r0, r4
 800caf6:	f7ff febb 	bl	800c870 <_free_r>
 800cafa:	e7ba      	b.n	800ca72 <_reclaim_reent+0x16>
 800cafc:	680e      	ldr	r6, [r1, #0]
 800cafe:	4620      	mov	r0, r4
 800cb00:	f7ff feb6 	bl	800c870 <_free_r>
 800cb04:	4631      	mov	r1, r6
 800cb06:	e7ef      	b.n	800cae8 <_reclaim_reent+0x8c>
 800cb08:	2500      	movs	r5, #0
 800cb0a:	e7ef      	b.n	800caec <_reclaim_reent+0x90>
 800cb0c:	bd70      	pop	{r4, r5, r6, pc}
 800cb0e:	bf00      	nop
 800cb10:	2000002c 	.word	0x2000002c

0800cb14 <_sbrk_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4d06      	ldr	r5, [pc, #24]	; (800cb30 <_sbrk_r+0x1c>)
 800cb18:	2300      	movs	r3, #0
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	4608      	mov	r0, r1
 800cb1e:	602b      	str	r3, [r5, #0]
 800cb20:	f7f4 fee8 	bl	80018f4 <_sbrk>
 800cb24:	1c43      	adds	r3, r0, #1
 800cb26:	d102      	bne.n	800cb2e <_sbrk_r+0x1a>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	b103      	cbz	r3, 800cb2e <_sbrk_r+0x1a>
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}
 800cb30:	20001560 	.word	0x20001560

0800cb34 <strchr>:
 800cb34:	b2c9      	uxtb	r1, r1
 800cb36:	4603      	mov	r3, r0
 800cb38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb3c:	b11a      	cbz	r2, 800cb46 <strchr+0x12>
 800cb3e:	428a      	cmp	r2, r1
 800cb40:	d1f9      	bne.n	800cb36 <strchr+0x2>
 800cb42:	4618      	mov	r0, r3
 800cb44:	4770      	bx	lr
 800cb46:	2900      	cmp	r1, #0
 800cb48:	bf18      	it	ne
 800cb4a:	2300      	movne	r3, #0
 800cb4c:	e7f9      	b.n	800cb42 <strchr+0xe>

0800cb4e <strcpy>:
 800cb4e:	4603      	mov	r3, r0
 800cb50:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb54:	f803 2b01 	strb.w	r2, [r3], #1
 800cb58:	2a00      	cmp	r2, #0
 800cb5a:	d1f9      	bne.n	800cb50 <strcpy+0x2>
 800cb5c:	4770      	bx	lr

0800cb5e <_vsniprintf_r>:
 800cb5e:	b530      	push	{r4, r5, lr}
 800cb60:	4614      	mov	r4, r2
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	b09b      	sub	sp, #108	; 0x6c
 800cb66:	4605      	mov	r5, r0
 800cb68:	461a      	mov	r2, r3
 800cb6a:	da05      	bge.n	800cb78 <_vsniprintf_r+0x1a>
 800cb6c:	238b      	movs	r3, #139	; 0x8b
 800cb6e:	6003      	str	r3, [r0, #0]
 800cb70:	f04f 30ff 	mov.w	r0, #4294967295
 800cb74:	b01b      	add	sp, #108	; 0x6c
 800cb76:	bd30      	pop	{r4, r5, pc}
 800cb78:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cb7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cb80:	bf14      	ite	ne
 800cb82:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb86:	4623      	moveq	r3, r4
 800cb88:	9302      	str	r3, [sp, #8]
 800cb8a:	9305      	str	r3, [sp, #20]
 800cb8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb90:	9100      	str	r1, [sp, #0]
 800cb92:	9104      	str	r1, [sp, #16]
 800cb94:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cb98:	4669      	mov	r1, sp
 800cb9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cb9c:	f000 f8ae 	bl	800ccfc <_svfiprintf_r>
 800cba0:	1c43      	adds	r3, r0, #1
 800cba2:	bfbc      	itt	lt
 800cba4:	238b      	movlt	r3, #139	; 0x8b
 800cba6:	602b      	strlt	r3, [r5, #0]
 800cba8:	2c00      	cmp	r4, #0
 800cbaa:	d0e3      	beq.n	800cb74 <_vsniprintf_r+0x16>
 800cbac:	9b00      	ldr	r3, [sp, #0]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	e7df      	b.n	800cb74 <_vsniprintf_r+0x16>

0800cbb4 <vsniprintf>:
 800cbb4:	b507      	push	{r0, r1, r2, lr}
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	460a      	mov	r2, r1
 800cbbc:	4601      	mov	r1, r0
 800cbbe:	4803      	ldr	r0, [pc, #12]	; (800cbcc <vsniprintf+0x18>)
 800cbc0:	6800      	ldr	r0, [r0, #0]
 800cbc2:	f7ff ffcc 	bl	800cb5e <_vsniprintf_r>
 800cbc6:	b003      	add	sp, #12
 800cbc8:	f85d fb04 	ldr.w	pc, [sp], #4
 800cbcc:	2000002c 	.word	0x2000002c

0800cbd0 <__malloc_lock>:
 800cbd0:	4801      	ldr	r0, [pc, #4]	; (800cbd8 <__malloc_lock+0x8>)
 800cbd2:	f7ff be25 	b.w	800c820 <__retarget_lock_acquire_recursive>
 800cbd6:	bf00      	nop
 800cbd8:	20001554 	.word	0x20001554

0800cbdc <__malloc_unlock>:
 800cbdc:	4801      	ldr	r0, [pc, #4]	; (800cbe4 <__malloc_unlock+0x8>)
 800cbde:	f7ff be20 	b.w	800c822 <__retarget_lock_release_recursive>
 800cbe2:	bf00      	nop
 800cbe4:	20001554 	.word	0x20001554

0800cbe8 <_realloc_r>:
 800cbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbec:	4680      	mov	r8, r0
 800cbee:	4614      	mov	r4, r2
 800cbf0:	460e      	mov	r6, r1
 800cbf2:	b921      	cbnz	r1, 800cbfe <_realloc_r+0x16>
 800cbf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	f7ff bea5 	b.w	800c948 <_malloc_r>
 800cbfe:	b92a      	cbnz	r2, 800cc0c <_realloc_r+0x24>
 800cc00:	f7ff fe36 	bl	800c870 <_free_r>
 800cc04:	4625      	mov	r5, r4
 800cc06:	4628      	mov	r0, r5
 800cc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc0c:	f000 fb24 	bl	800d258 <_malloc_usable_size_r>
 800cc10:	4284      	cmp	r4, r0
 800cc12:	4607      	mov	r7, r0
 800cc14:	d802      	bhi.n	800cc1c <_realloc_r+0x34>
 800cc16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc1a:	d812      	bhi.n	800cc42 <_realloc_r+0x5a>
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	4640      	mov	r0, r8
 800cc20:	f7ff fe92 	bl	800c948 <_malloc_r>
 800cc24:	4605      	mov	r5, r0
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d0ed      	beq.n	800cc06 <_realloc_r+0x1e>
 800cc2a:	42bc      	cmp	r4, r7
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	4631      	mov	r1, r6
 800cc30:	bf28      	it	cs
 800cc32:	463a      	movcs	r2, r7
 800cc34:	f7ff fe06 	bl	800c844 <memcpy>
 800cc38:	4631      	mov	r1, r6
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	f7ff fe18 	bl	800c870 <_free_r>
 800cc40:	e7e1      	b.n	800cc06 <_realloc_r+0x1e>
 800cc42:	4635      	mov	r5, r6
 800cc44:	e7df      	b.n	800cc06 <_realloc_r+0x1e>

0800cc46 <__ssputs_r>:
 800cc46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc4a:	688e      	ldr	r6, [r1, #8]
 800cc4c:	429e      	cmp	r6, r3
 800cc4e:	4682      	mov	sl, r0
 800cc50:	460c      	mov	r4, r1
 800cc52:	4690      	mov	r8, r2
 800cc54:	461f      	mov	r7, r3
 800cc56:	d838      	bhi.n	800ccca <__ssputs_r+0x84>
 800cc58:	898a      	ldrh	r2, [r1, #12]
 800cc5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc5e:	d032      	beq.n	800ccc6 <__ssputs_r+0x80>
 800cc60:	6825      	ldr	r5, [r4, #0]
 800cc62:	6909      	ldr	r1, [r1, #16]
 800cc64:	eba5 0901 	sub.w	r9, r5, r1
 800cc68:	6965      	ldr	r5, [r4, #20]
 800cc6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc72:	3301      	adds	r3, #1
 800cc74:	444b      	add	r3, r9
 800cc76:	106d      	asrs	r5, r5, #1
 800cc78:	429d      	cmp	r5, r3
 800cc7a:	bf38      	it	cc
 800cc7c:	461d      	movcc	r5, r3
 800cc7e:	0553      	lsls	r3, r2, #21
 800cc80:	d531      	bpl.n	800cce6 <__ssputs_r+0xa0>
 800cc82:	4629      	mov	r1, r5
 800cc84:	f7ff fe60 	bl	800c948 <_malloc_r>
 800cc88:	4606      	mov	r6, r0
 800cc8a:	b950      	cbnz	r0, 800cca2 <__ssputs_r+0x5c>
 800cc8c:	230c      	movs	r3, #12
 800cc8e:	f8ca 3000 	str.w	r3, [sl]
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc98:	81a3      	strh	r3, [r4, #12]
 800cc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cca2:	6921      	ldr	r1, [r4, #16]
 800cca4:	464a      	mov	r2, r9
 800cca6:	f7ff fdcd 	bl	800c844 <memcpy>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccb4:	81a3      	strh	r3, [r4, #12]
 800ccb6:	6126      	str	r6, [r4, #16]
 800ccb8:	6165      	str	r5, [r4, #20]
 800ccba:	444e      	add	r6, r9
 800ccbc:	eba5 0509 	sub.w	r5, r5, r9
 800ccc0:	6026      	str	r6, [r4, #0]
 800ccc2:	60a5      	str	r5, [r4, #8]
 800ccc4:	463e      	mov	r6, r7
 800ccc6:	42be      	cmp	r6, r7
 800ccc8:	d900      	bls.n	800cccc <__ssputs_r+0x86>
 800ccca:	463e      	mov	r6, r7
 800cccc:	6820      	ldr	r0, [r4, #0]
 800ccce:	4632      	mov	r2, r6
 800ccd0:	4641      	mov	r1, r8
 800ccd2:	f000 faa7 	bl	800d224 <memmove>
 800ccd6:	68a3      	ldr	r3, [r4, #8]
 800ccd8:	1b9b      	subs	r3, r3, r6
 800ccda:	60a3      	str	r3, [r4, #8]
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	4433      	add	r3, r6
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	2000      	movs	r0, #0
 800cce4:	e7db      	b.n	800cc9e <__ssputs_r+0x58>
 800cce6:	462a      	mov	r2, r5
 800cce8:	f7ff ff7e 	bl	800cbe8 <_realloc_r>
 800ccec:	4606      	mov	r6, r0
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d1e1      	bne.n	800ccb6 <__ssputs_r+0x70>
 800ccf2:	6921      	ldr	r1, [r4, #16]
 800ccf4:	4650      	mov	r0, sl
 800ccf6:	f7ff fdbb 	bl	800c870 <_free_r>
 800ccfa:	e7c7      	b.n	800cc8c <__ssputs_r+0x46>

0800ccfc <_svfiprintf_r>:
 800ccfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd00:	4698      	mov	r8, r3
 800cd02:	898b      	ldrh	r3, [r1, #12]
 800cd04:	061b      	lsls	r3, r3, #24
 800cd06:	b09d      	sub	sp, #116	; 0x74
 800cd08:	4607      	mov	r7, r0
 800cd0a:	460d      	mov	r5, r1
 800cd0c:	4614      	mov	r4, r2
 800cd0e:	d50e      	bpl.n	800cd2e <_svfiprintf_r+0x32>
 800cd10:	690b      	ldr	r3, [r1, #16]
 800cd12:	b963      	cbnz	r3, 800cd2e <_svfiprintf_r+0x32>
 800cd14:	2140      	movs	r1, #64	; 0x40
 800cd16:	f7ff fe17 	bl	800c948 <_malloc_r>
 800cd1a:	6028      	str	r0, [r5, #0]
 800cd1c:	6128      	str	r0, [r5, #16]
 800cd1e:	b920      	cbnz	r0, 800cd2a <_svfiprintf_r+0x2e>
 800cd20:	230c      	movs	r3, #12
 800cd22:	603b      	str	r3, [r7, #0]
 800cd24:	f04f 30ff 	mov.w	r0, #4294967295
 800cd28:	e0d1      	b.n	800cece <_svfiprintf_r+0x1d2>
 800cd2a:	2340      	movs	r3, #64	; 0x40
 800cd2c:	616b      	str	r3, [r5, #20]
 800cd2e:	2300      	movs	r3, #0
 800cd30:	9309      	str	r3, [sp, #36]	; 0x24
 800cd32:	2320      	movs	r3, #32
 800cd34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd38:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd3c:	2330      	movs	r3, #48	; 0x30
 800cd3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cee8 <_svfiprintf_r+0x1ec>
 800cd42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd46:	f04f 0901 	mov.w	r9, #1
 800cd4a:	4623      	mov	r3, r4
 800cd4c:	469a      	mov	sl, r3
 800cd4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd52:	b10a      	cbz	r2, 800cd58 <_svfiprintf_r+0x5c>
 800cd54:	2a25      	cmp	r2, #37	; 0x25
 800cd56:	d1f9      	bne.n	800cd4c <_svfiprintf_r+0x50>
 800cd58:	ebba 0b04 	subs.w	fp, sl, r4
 800cd5c:	d00b      	beq.n	800cd76 <_svfiprintf_r+0x7a>
 800cd5e:	465b      	mov	r3, fp
 800cd60:	4622      	mov	r2, r4
 800cd62:	4629      	mov	r1, r5
 800cd64:	4638      	mov	r0, r7
 800cd66:	f7ff ff6e 	bl	800cc46 <__ssputs_r>
 800cd6a:	3001      	adds	r0, #1
 800cd6c:	f000 80aa 	beq.w	800cec4 <_svfiprintf_r+0x1c8>
 800cd70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd72:	445a      	add	r2, fp
 800cd74:	9209      	str	r2, [sp, #36]	; 0x24
 800cd76:	f89a 3000 	ldrb.w	r3, [sl]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f000 80a2 	beq.w	800cec4 <_svfiprintf_r+0x1c8>
 800cd80:	2300      	movs	r3, #0
 800cd82:	f04f 32ff 	mov.w	r2, #4294967295
 800cd86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd8a:	f10a 0a01 	add.w	sl, sl, #1
 800cd8e:	9304      	str	r3, [sp, #16]
 800cd90:	9307      	str	r3, [sp, #28]
 800cd92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd96:	931a      	str	r3, [sp, #104]	; 0x68
 800cd98:	4654      	mov	r4, sl
 800cd9a:	2205      	movs	r2, #5
 800cd9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda0:	4851      	ldr	r0, [pc, #324]	; (800cee8 <_svfiprintf_r+0x1ec>)
 800cda2:	f7f3 fa25 	bl	80001f0 <memchr>
 800cda6:	9a04      	ldr	r2, [sp, #16]
 800cda8:	b9d8      	cbnz	r0, 800cde2 <_svfiprintf_r+0xe6>
 800cdaa:	06d0      	lsls	r0, r2, #27
 800cdac:	bf44      	itt	mi
 800cdae:	2320      	movmi	r3, #32
 800cdb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb4:	0711      	lsls	r1, r2, #28
 800cdb6:	bf44      	itt	mi
 800cdb8:	232b      	movmi	r3, #43	; 0x2b
 800cdba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdbe:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc2:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc4:	d015      	beq.n	800cdf2 <_svfiprintf_r+0xf6>
 800cdc6:	9a07      	ldr	r2, [sp, #28]
 800cdc8:	4654      	mov	r4, sl
 800cdca:	2000      	movs	r0, #0
 800cdcc:	f04f 0c0a 	mov.w	ip, #10
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd6:	3b30      	subs	r3, #48	; 0x30
 800cdd8:	2b09      	cmp	r3, #9
 800cdda:	d94e      	bls.n	800ce7a <_svfiprintf_r+0x17e>
 800cddc:	b1b0      	cbz	r0, 800ce0c <_svfiprintf_r+0x110>
 800cdde:	9207      	str	r2, [sp, #28]
 800cde0:	e014      	b.n	800ce0c <_svfiprintf_r+0x110>
 800cde2:	eba0 0308 	sub.w	r3, r0, r8
 800cde6:	fa09 f303 	lsl.w	r3, r9, r3
 800cdea:	4313      	orrs	r3, r2
 800cdec:	9304      	str	r3, [sp, #16]
 800cdee:	46a2      	mov	sl, r4
 800cdf0:	e7d2      	b.n	800cd98 <_svfiprintf_r+0x9c>
 800cdf2:	9b03      	ldr	r3, [sp, #12]
 800cdf4:	1d19      	adds	r1, r3, #4
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	9103      	str	r1, [sp, #12]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bfbb      	ittet	lt
 800cdfe:	425b      	neglt	r3, r3
 800ce00:	f042 0202 	orrlt.w	r2, r2, #2
 800ce04:	9307      	strge	r3, [sp, #28]
 800ce06:	9307      	strlt	r3, [sp, #28]
 800ce08:	bfb8      	it	lt
 800ce0a:	9204      	strlt	r2, [sp, #16]
 800ce0c:	7823      	ldrb	r3, [r4, #0]
 800ce0e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce10:	d10c      	bne.n	800ce2c <_svfiprintf_r+0x130>
 800ce12:	7863      	ldrb	r3, [r4, #1]
 800ce14:	2b2a      	cmp	r3, #42	; 0x2a
 800ce16:	d135      	bne.n	800ce84 <_svfiprintf_r+0x188>
 800ce18:	9b03      	ldr	r3, [sp, #12]
 800ce1a:	1d1a      	adds	r2, r3, #4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	9203      	str	r2, [sp, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	bfb8      	it	lt
 800ce24:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce28:	3402      	adds	r4, #2
 800ce2a:	9305      	str	r3, [sp, #20]
 800ce2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cef8 <_svfiprintf_r+0x1fc>
 800ce30:	7821      	ldrb	r1, [r4, #0]
 800ce32:	2203      	movs	r2, #3
 800ce34:	4650      	mov	r0, sl
 800ce36:	f7f3 f9db 	bl	80001f0 <memchr>
 800ce3a:	b140      	cbz	r0, 800ce4e <_svfiprintf_r+0x152>
 800ce3c:	2340      	movs	r3, #64	; 0x40
 800ce3e:	eba0 000a 	sub.w	r0, r0, sl
 800ce42:	fa03 f000 	lsl.w	r0, r3, r0
 800ce46:	9b04      	ldr	r3, [sp, #16]
 800ce48:	4303      	orrs	r3, r0
 800ce4a:	3401      	adds	r4, #1
 800ce4c:	9304      	str	r3, [sp, #16]
 800ce4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce52:	4826      	ldr	r0, [pc, #152]	; (800ceec <_svfiprintf_r+0x1f0>)
 800ce54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce58:	2206      	movs	r2, #6
 800ce5a:	f7f3 f9c9 	bl	80001f0 <memchr>
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d038      	beq.n	800ced4 <_svfiprintf_r+0x1d8>
 800ce62:	4b23      	ldr	r3, [pc, #140]	; (800cef0 <_svfiprintf_r+0x1f4>)
 800ce64:	bb1b      	cbnz	r3, 800ceae <_svfiprintf_r+0x1b2>
 800ce66:	9b03      	ldr	r3, [sp, #12]
 800ce68:	3307      	adds	r3, #7
 800ce6a:	f023 0307 	bic.w	r3, r3, #7
 800ce6e:	3308      	adds	r3, #8
 800ce70:	9303      	str	r3, [sp, #12]
 800ce72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce74:	4433      	add	r3, r6
 800ce76:	9309      	str	r3, [sp, #36]	; 0x24
 800ce78:	e767      	b.n	800cd4a <_svfiprintf_r+0x4e>
 800ce7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce7e:	460c      	mov	r4, r1
 800ce80:	2001      	movs	r0, #1
 800ce82:	e7a5      	b.n	800cdd0 <_svfiprintf_r+0xd4>
 800ce84:	2300      	movs	r3, #0
 800ce86:	3401      	adds	r4, #1
 800ce88:	9305      	str	r3, [sp, #20]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	f04f 0c0a 	mov.w	ip, #10
 800ce90:	4620      	mov	r0, r4
 800ce92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce96:	3a30      	subs	r2, #48	; 0x30
 800ce98:	2a09      	cmp	r2, #9
 800ce9a:	d903      	bls.n	800cea4 <_svfiprintf_r+0x1a8>
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d0c5      	beq.n	800ce2c <_svfiprintf_r+0x130>
 800cea0:	9105      	str	r1, [sp, #20]
 800cea2:	e7c3      	b.n	800ce2c <_svfiprintf_r+0x130>
 800cea4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cea8:	4604      	mov	r4, r0
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e7f0      	b.n	800ce90 <_svfiprintf_r+0x194>
 800ceae:	ab03      	add	r3, sp, #12
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	4b0f      	ldr	r3, [pc, #60]	; (800cef4 <_svfiprintf_r+0x1f8>)
 800ceb6:	a904      	add	r1, sp, #16
 800ceb8:	4638      	mov	r0, r7
 800ceba:	f3af 8000 	nop.w
 800cebe:	1c42      	adds	r2, r0, #1
 800cec0:	4606      	mov	r6, r0
 800cec2:	d1d6      	bne.n	800ce72 <_svfiprintf_r+0x176>
 800cec4:	89ab      	ldrh	r3, [r5, #12]
 800cec6:	065b      	lsls	r3, r3, #25
 800cec8:	f53f af2c 	bmi.w	800cd24 <_svfiprintf_r+0x28>
 800cecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cece:	b01d      	add	sp, #116	; 0x74
 800ced0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced4:	ab03      	add	r3, sp, #12
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	462a      	mov	r2, r5
 800ceda:	4b06      	ldr	r3, [pc, #24]	; (800cef4 <_svfiprintf_r+0x1f8>)
 800cedc:	a904      	add	r1, sp, #16
 800cede:	4638      	mov	r0, r7
 800cee0:	f000 f87a 	bl	800cfd8 <_printf_i>
 800cee4:	e7eb      	b.n	800cebe <_svfiprintf_r+0x1c2>
 800cee6:	bf00      	nop
 800cee8:	0800dca4 	.word	0x0800dca4
 800ceec:	0800dcae 	.word	0x0800dcae
 800cef0:	00000000 	.word	0x00000000
 800cef4:	0800cc47 	.word	0x0800cc47
 800cef8:	0800dcaa 	.word	0x0800dcaa

0800cefc <_printf_common>:
 800cefc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf00:	4616      	mov	r6, r2
 800cf02:	4699      	mov	r9, r3
 800cf04:	688a      	ldr	r2, [r1, #8]
 800cf06:	690b      	ldr	r3, [r1, #16]
 800cf08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	bfb8      	it	lt
 800cf10:	4613      	movlt	r3, r2
 800cf12:	6033      	str	r3, [r6, #0]
 800cf14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf18:	4607      	mov	r7, r0
 800cf1a:	460c      	mov	r4, r1
 800cf1c:	b10a      	cbz	r2, 800cf22 <_printf_common+0x26>
 800cf1e:	3301      	adds	r3, #1
 800cf20:	6033      	str	r3, [r6, #0]
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	0699      	lsls	r1, r3, #26
 800cf26:	bf42      	ittt	mi
 800cf28:	6833      	ldrmi	r3, [r6, #0]
 800cf2a:	3302      	addmi	r3, #2
 800cf2c:	6033      	strmi	r3, [r6, #0]
 800cf2e:	6825      	ldr	r5, [r4, #0]
 800cf30:	f015 0506 	ands.w	r5, r5, #6
 800cf34:	d106      	bne.n	800cf44 <_printf_common+0x48>
 800cf36:	f104 0a19 	add.w	sl, r4, #25
 800cf3a:	68e3      	ldr	r3, [r4, #12]
 800cf3c:	6832      	ldr	r2, [r6, #0]
 800cf3e:	1a9b      	subs	r3, r3, r2
 800cf40:	42ab      	cmp	r3, r5
 800cf42:	dc26      	bgt.n	800cf92 <_printf_common+0x96>
 800cf44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf48:	1e13      	subs	r3, r2, #0
 800cf4a:	6822      	ldr	r2, [r4, #0]
 800cf4c:	bf18      	it	ne
 800cf4e:	2301      	movne	r3, #1
 800cf50:	0692      	lsls	r2, r2, #26
 800cf52:	d42b      	bmi.n	800cfac <_printf_common+0xb0>
 800cf54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf58:	4649      	mov	r1, r9
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	47c0      	blx	r8
 800cf5e:	3001      	adds	r0, #1
 800cf60:	d01e      	beq.n	800cfa0 <_printf_common+0xa4>
 800cf62:	6823      	ldr	r3, [r4, #0]
 800cf64:	68e5      	ldr	r5, [r4, #12]
 800cf66:	6832      	ldr	r2, [r6, #0]
 800cf68:	f003 0306 	and.w	r3, r3, #6
 800cf6c:	2b04      	cmp	r3, #4
 800cf6e:	bf08      	it	eq
 800cf70:	1aad      	subeq	r5, r5, r2
 800cf72:	68a3      	ldr	r3, [r4, #8]
 800cf74:	6922      	ldr	r2, [r4, #16]
 800cf76:	bf0c      	ite	eq
 800cf78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf7c:	2500      	movne	r5, #0
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	bfc4      	itt	gt
 800cf82:	1a9b      	subgt	r3, r3, r2
 800cf84:	18ed      	addgt	r5, r5, r3
 800cf86:	2600      	movs	r6, #0
 800cf88:	341a      	adds	r4, #26
 800cf8a:	42b5      	cmp	r5, r6
 800cf8c:	d11a      	bne.n	800cfc4 <_printf_common+0xc8>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e008      	b.n	800cfa4 <_printf_common+0xa8>
 800cf92:	2301      	movs	r3, #1
 800cf94:	4652      	mov	r2, sl
 800cf96:	4649      	mov	r1, r9
 800cf98:	4638      	mov	r0, r7
 800cf9a:	47c0      	blx	r8
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	d103      	bne.n	800cfa8 <_printf_common+0xac>
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfa8:	3501      	adds	r5, #1
 800cfaa:	e7c6      	b.n	800cf3a <_printf_common+0x3e>
 800cfac:	18e1      	adds	r1, r4, r3
 800cfae:	1c5a      	adds	r2, r3, #1
 800cfb0:	2030      	movs	r0, #48	; 0x30
 800cfb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfb6:	4422      	add	r2, r4
 800cfb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfc0:	3302      	adds	r3, #2
 800cfc2:	e7c7      	b.n	800cf54 <_printf_common+0x58>
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	4622      	mov	r2, r4
 800cfc8:	4649      	mov	r1, r9
 800cfca:	4638      	mov	r0, r7
 800cfcc:	47c0      	blx	r8
 800cfce:	3001      	adds	r0, #1
 800cfd0:	d0e6      	beq.n	800cfa0 <_printf_common+0xa4>
 800cfd2:	3601      	adds	r6, #1
 800cfd4:	e7d9      	b.n	800cf8a <_printf_common+0x8e>
	...

0800cfd8 <_printf_i>:
 800cfd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfdc:	7e0f      	ldrb	r7, [r1, #24]
 800cfde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfe0:	2f78      	cmp	r7, #120	; 0x78
 800cfe2:	4691      	mov	r9, r2
 800cfe4:	4680      	mov	r8, r0
 800cfe6:	460c      	mov	r4, r1
 800cfe8:	469a      	mov	sl, r3
 800cfea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfee:	d807      	bhi.n	800d000 <_printf_i+0x28>
 800cff0:	2f62      	cmp	r7, #98	; 0x62
 800cff2:	d80a      	bhi.n	800d00a <_printf_i+0x32>
 800cff4:	2f00      	cmp	r7, #0
 800cff6:	f000 80d8 	beq.w	800d1aa <_printf_i+0x1d2>
 800cffa:	2f58      	cmp	r7, #88	; 0x58
 800cffc:	f000 80a3 	beq.w	800d146 <_printf_i+0x16e>
 800d000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d008:	e03a      	b.n	800d080 <_printf_i+0xa8>
 800d00a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d00e:	2b15      	cmp	r3, #21
 800d010:	d8f6      	bhi.n	800d000 <_printf_i+0x28>
 800d012:	a101      	add	r1, pc, #4	; (adr r1, 800d018 <_printf_i+0x40>)
 800d014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d018:	0800d071 	.word	0x0800d071
 800d01c:	0800d085 	.word	0x0800d085
 800d020:	0800d001 	.word	0x0800d001
 800d024:	0800d001 	.word	0x0800d001
 800d028:	0800d001 	.word	0x0800d001
 800d02c:	0800d001 	.word	0x0800d001
 800d030:	0800d085 	.word	0x0800d085
 800d034:	0800d001 	.word	0x0800d001
 800d038:	0800d001 	.word	0x0800d001
 800d03c:	0800d001 	.word	0x0800d001
 800d040:	0800d001 	.word	0x0800d001
 800d044:	0800d191 	.word	0x0800d191
 800d048:	0800d0b5 	.word	0x0800d0b5
 800d04c:	0800d173 	.word	0x0800d173
 800d050:	0800d001 	.word	0x0800d001
 800d054:	0800d001 	.word	0x0800d001
 800d058:	0800d1b3 	.word	0x0800d1b3
 800d05c:	0800d001 	.word	0x0800d001
 800d060:	0800d0b5 	.word	0x0800d0b5
 800d064:	0800d001 	.word	0x0800d001
 800d068:	0800d001 	.word	0x0800d001
 800d06c:	0800d17b 	.word	0x0800d17b
 800d070:	682b      	ldr	r3, [r5, #0]
 800d072:	1d1a      	adds	r2, r3, #4
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	602a      	str	r2, [r5, #0]
 800d078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d07c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d080:	2301      	movs	r3, #1
 800d082:	e0a3      	b.n	800d1cc <_printf_i+0x1f4>
 800d084:	6820      	ldr	r0, [r4, #0]
 800d086:	6829      	ldr	r1, [r5, #0]
 800d088:	0606      	lsls	r6, r0, #24
 800d08a:	f101 0304 	add.w	r3, r1, #4
 800d08e:	d50a      	bpl.n	800d0a6 <_printf_i+0xce>
 800d090:	680e      	ldr	r6, [r1, #0]
 800d092:	602b      	str	r3, [r5, #0]
 800d094:	2e00      	cmp	r6, #0
 800d096:	da03      	bge.n	800d0a0 <_printf_i+0xc8>
 800d098:	232d      	movs	r3, #45	; 0x2d
 800d09a:	4276      	negs	r6, r6
 800d09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0a0:	485e      	ldr	r0, [pc, #376]	; (800d21c <_printf_i+0x244>)
 800d0a2:	230a      	movs	r3, #10
 800d0a4:	e019      	b.n	800d0da <_printf_i+0x102>
 800d0a6:	680e      	ldr	r6, [r1, #0]
 800d0a8:	602b      	str	r3, [r5, #0]
 800d0aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d0ae:	bf18      	it	ne
 800d0b0:	b236      	sxthne	r6, r6
 800d0b2:	e7ef      	b.n	800d094 <_printf_i+0xbc>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	6820      	ldr	r0, [r4, #0]
 800d0b8:	1d19      	adds	r1, r3, #4
 800d0ba:	6029      	str	r1, [r5, #0]
 800d0bc:	0601      	lsls	r1, r0, #24
 800d0be:	d501      	bpl.n	800d0c4 <_printf_i+0xec>
 800d0c0:	681e      	ldr	r6, [r3, #0]
 800d0c2:	e002      	b.n	800d0ca <_printf_i+0xf2>
 800d0c4:	0646      	lsls	r6, r0, #25
 800d0c6:	d5fb      	bpl.n	800d0c0 <_printf_i+0xe8>
 800d0c8:	881e      	ldrh	r6, [r3, #0]
 800d0ca:	4854      	ldr	r0, [pc, #336]	; (800d21c <_printf_i+0x244>)
 800d0cc:	2f6f      	cmp	r7, #111	; 0x6f
 800d0ce:	bf0c      	ite	eq
 800d0d0:	2308      	moveq	r3, #8
 800d0d2:	230a      	movne	r3, #10
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0da:	6865      	ldr	r5, [r4, #4]
 800d0dc:	60a5      	str	r5, [r4, #8]
 800d0de:	2d00      	cmp	r5, #0
 800d0e0:	bfa2      	ittt	ge
 800d0e2:	6821      	ldrge	r1, [r4, #0]
 800d0e4:	f021 0104 	bicge.w	r1, r1, #4
 800d0e8:	6021      	strge	r1, [r4, #0]
 800d0ea:	b90e      	cbnz	r6, 800d0f0 <_printf_i+0x118>
 800d0ec:	2d00      	cmp	r5, #0
 800d0ee:	d04d      	beq.n	800d18c <_printf_i+0x1b4>
 800d0f0:	4615      	mov	r5, r2
 800d0f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0f6:	fb03 6711 	mls	r7, r3, r1, r6
 800d0fa:	5dc7      	ldrb	r7, [r0, r7]
 800d0fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d100:	4637      	mov	r7, r6
 800d102:	42bb      	cmp	r3, r7
 800d104:	460e      	mov	r6, r1
 800d106:	d9f4      	bls.n	800d0f2 <_printf_i+0x11a>
 800d108:	2b08      	cmp	r3, #8
 800d10a:	d10b      	bne.n	800d124 <_printf_i+0x14c>
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	07de      	lsls	r6, r3, #31
 800d110:	d508      	bpl.n	800d124 <_printf_i+0x14c>
 800d112:	6923      	ldr	r3, [r4, #16]
 800d114:	6861      	ldr	r1, [r4, #4]
 800d116:	4299      	cmp	r1, r3
 800d118:	bfde      	ittt	le
 800d11a:	2330      	movle	r3, #48	; 0x30
 800d11c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d120:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d124:	1b52      	subs	r2, r2, r5
 800d126:	6122      	str	r2, [r4, #16]
 800d128:	f8cd a000 	str.w	sl, [sp]
 800d12c:	464b      	mov	r3, r9
 800d12e:	aa03      	add	r2, sp, #12
 800d130:	4621      	mov	r1, r4
 800d132:	4640      	mov	r0, r8
 800d134:	f7ff fee2 	bl	800cefc <_printf_common>
 800d138:	3001      	adds	r0, #1
 800d13a:	d14c      	bne.n	800d1d6 <_printf_i+0x1fe>
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
 800d140:	b004      	add	sp, #16
 800d142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d146:	4835      	ldr	r0, [pc, #212]	; (800d21c <_printf_i+0x244>)
 800d148:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d14c:	6829      	ldr	r1, [r5, #0]
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	f851 6b04 	ldr.w	r6, [r1], #4
 800d154:	6029      	str	r1, [r5, #0]
 800d156:	061d      	lsls	r5, r3, #24
 800d158:	d514      	bpl.n	800d184 <_printf_i+0x1ac>
 800d15a:	07df      	lsls	r7, r3, #31
 800d15c:	bf44      	itt	mi
 800d15e:	f043 0320 	orrmi.w	r3, r3, #32
 800d162:	6023      	strmi	r3, [r4, #0]
 800d164:	b91e      	cbnz	r6, 800d16e <_printf_i+0x196>
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	f023 0320 	bic.w	r3, r3, #32
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	2310      	movs	r3, #16
 800d170:	e7b0      	b.n	800d0d4 <_printf_i+0xfc>
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	f043 0320 	orr.w	r3, r3, #32
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	2378      	movs	r3, #120	; 0x78
 800d17c:	4828      	ldr	r0, [pc, #160]	; (800d220 <_printf_i+0x248>)
 800d17e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d182:	e7e3      	b.n	800d14c <_printf_i+0x174>
 800d184:	0659      	lsls	r1, r3, #25
 800d186:	bf48      	it	mi
 800d188:	b2b6      	uxthmi	r6, r6
 800d18a:	e7e6      	b.n	800d15a <_printf_i+0x182>
 800d18c:	4615      	mov	r5, r2
 800d18e:	e7bb      	b.n	800d108 <_printf_i+0x130>
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	6826      	ldr	r6, [r4, #0]
 800d194:	6961      	ldr	r1, [r4, #20]
 800d196:	1d18      	adds	r0, r3, #4
 800d198:	6028      	str	r0, [r5, #0]
 800d19a:	0635      	lsls	r5, r6, #24
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	d501      	bpl.n	800d1a4 <_printf_i+0x1cc>
 800d1a0:	6019      	str	r1, [r3, #0]
 800d1a2:	e002      	b.n	800d1aa <_printf_i+0x1d2>
 800d1a4:	0670      	lsls	r0, r6, #25
 800d1a6:	d5fb      	bpl.n	800d1a0 <_printf_i+0x1c8>
 800d1a8:	8019      	strh	r1, [r3, #0]
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	6123      	str	r3, [r4, #16]
 800d1ae:	4615      	mov	r5, r2
 800d1b0:	e7ba      	b.n	800d128 <_printf_i+0x150>
 800d1b2:	682b      	ldr	r3, [r5, #0]
 800d1b4:	1d1a      	adds	r2, r3, #4
 800d1b6:	602a      	str	r2, [r5, #0]
 800d1b8:	681d      	ldr	r5, [r3, #0]
 800d1ba:	6862      	ldr	r2, [r4, #4]
 800d1bc:	2100      	movs	r1, #0
 800d1be:	4628      	mov	r0, r5
 800d1c0:	f7f3 f816 	bl	80001f0 <memchr>
 800d1c4:	b108      	cbz	r0, 800d1ca <_printf_i+0x1f2>
 800d1c6:	1b40      	subs	r0, r0, r5
 800d1c8:	6060      	str	r0, [r4, #4]
 800d1ca:	6863      	ldr	r3, [r4, #4]
 800d1cc:	6123      	str	r3, [r4, #16]
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1d4:	e7a8      	b.n	800d128 <_printf_i+0x150>
 800d1d6:	6923      	ldr	r3, [r4, #16]
 800d1d8:	462a      	mov	r2, r5
 800d1da:	4649      	mov	r1, r9
 800d1dc:	4640      	mov	r0, r8
 800d1de:	47d0      	blx	sl
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	d0ab      	beq.n	800d13c <_printf_i+0x164>
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	079b      	lsls	r3, r3, #30
 800d1e8:	d413      	bmi.n	800d212 <_printf_i+0x23a>
 800d1ea:	68e0      	ldr	r0, [r4, #12]
 800d1ec:	9b03      	ldr	r3, [sp, #12]
 800d1ee:	4298      	cmp	r0, r3
 800d1f0:	bfb8      	it	lt
 800d1f2:	4618      	movlt	r0, r3
 800d1f4:	e7a4      	b.n	800d140 <_printf_i+0x168>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	4632      	mov	r2, r6
 800d1fa:	4649      	mov	r1, r9
 800d1fc:	4640      	mov	r0, r8
 800d1fe:	47d0      	blx	sl
 800d200:	3001      	adds	r0, #1
 800d202:	d09b      	beq.n	800d13c <_printf_i+0x164>
 800d204:	3501      	adds	r5, #1
 800d206:	68e3      	ldr	r3, [r4, #12]
 800d208:	9903      	ldr	r1, [sp, #12]
 800d20a:	1a5b      	subs	r3, r3, r1
 800d20c:	42ab      	cmp	r3, r5
 800d20e:	dcf2      	bgt.n	800d1f6 <_printf_i+0x21e>
 800d210:	e7eb      	b.n	800d1ea <_printf_i+0x212>
 800d212:	2500      	movs	r5, #0
 800d214:	f104 0619 	add.w	r6, r4, #25
 800d218:	e7f5      	b.n	800d206 <_printf_i+0x22e>
 800d21a:	bf00      	nop
 800d21c:	0800dcb5 	.word	0x0800dcb5
 800d220:	0800dcc6 	.word	0x0800dcc6

0800d224 <memmove>:
 800d224:	4288      	cmp	r0, r1
 800d226:	b510      	push	{r4, lr}
 800d228:	eb01 0402 	add.w	r4, r1, r2
 800d22c:	d902      	bls.n	800d234 <memmove+0x10>
 800d22e:	4284      	cmp	r4, r0
 800d230:	4623      	mov	r3, r4
 800d232:	d807      	bhi.n	800d244 <memmove+0x20>
 800d234:	1e43      	subs	r3, r0, #1
 800d236:	42a1      	cmp	r1, r4
 800d238:	d008      	beq.n	800d24c <memmove+0x28>
 800d23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d242:	e7f8      	b.n	800d236 <memmove+0x12>
 800d244:	4402      	add	r2, r0
 800d246:	4601      	mov	r1, r0
 800d248:	428a      	cmp	r2, r1
 800d24a:	d100      	bne.n	800d24e <memmove+0x2a>
 800d24c:	bd10      	pop	{r4, pc}
 800d24e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d256:	e7f7      	b.n	800d248 <memmove+0x24>

0800d258 <_malloc_usable_size_r>:
 800d258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d25c:	1f18      	subs	r0, r3, #4
 800d25e:	2b00      	cmp	r3, #0
 800d260:	bfbc      	itt	lt
 800d262:	580b      	ldrlt	r3, [r1, r0]
 800d264:	18c0      	addlt	r0, r0, r3
 800d266:	4770      	bx	lr

0800d268 <_init>:
 800d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26a:	bf00      	nop
 800d26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d26e:	bc08      	pop	{r3}
 800d270:	469e      	mov	lr, r3
 800d272:	4770      	bx	lr

0800d274 <_fini>:
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	bf00      	nop
 800d278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d27a:	bc08      	pop	{r3}
 800d27c:	469e      	mov	lr, r3
 800d27e:	4770      	bx	lr
