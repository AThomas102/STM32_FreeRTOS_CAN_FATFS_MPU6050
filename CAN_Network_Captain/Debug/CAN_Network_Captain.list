
CAN_Network_Captain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010388  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  08010528  08010528  00020528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c00  08010c00  00030128  2**0
                  CONTENTS
  4 .ARM          00000000  08010c00  08010c00  00030128  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010c00  08010c00  00030128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c00  08010c00  00020c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c04  08010c04  00020c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08010c08  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030128  2**0
                  CONTENTS
 10 .bss          000044fc  20000128  20000128  00030128  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004624  20004624  00030128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 13 .debug_info   000222d6  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049f4  00000000  00000000  0005242e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d28  00000000  00000000  00056e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b30  00000000  00000000  00058b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b27  00000000  00000000  0005a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000271e5  00000000  00000000  000811a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db1de  00000000  00000000  000a838c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018356a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008440  00000000  00000000  001835bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000128 	.word	0x20000128
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010510 	.word	0x08010510

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000012c 	.word	0x2000012c
 80001dc:	08010510 	.word	0x08010510

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <add_char>:
 * Returns:
 * 0: success
 * 1: realloc failure
 */
static int add_char(char **string, int *c, char ch)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4613      	mov	r3, r2
 8000c64:	71fb      	strb	r3, [r7, #7]
    char *tmp = NULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
    (*c)++;
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	601a      	str	r2, [r3, #0]
    tmp = realloc(*string, (*c)+1);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4610      	mov	r0, r2
 8000c82:	f00e fcb5 	bl	800f5f0 <realloc>
 8000c86:	6178      	str	r0, [r7, #20]
    if (tmp == NULL)
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <add_char+0x3a>
        return 1;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e012      	b.n	8000cb8 <add_char+0x60>
    *string = tmp;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	601a      	str	r2, [r3, #0]
    (*string)[(*c)-1] = ch;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	701a      	strb	r2, [r3, #0]
    (*string)[*c] = '\0';
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]

    return 0;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <create_field>:
 * memory for the field. Length is set to 0 and text to NULL
 *
 * Returns NULL on error via malloc.
 */
static CSV_FIELD *create_field()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
    CSV_FIELD *field = malloc(sizeof(CSV_FIELD));
 8000cc6:	2008      	movs	r0, #8
 8000cc8:	f00e fb8c 	bl	800f3e4 <malloc>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	607b      	str	r3, [r7, #4]
    field->length = 0;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
    field->text = NULL;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    set_field(field, "\0");
 8000cdc:	4904      	ldr	r1, [pc, #16]	; (8000cf0 <create_field+0x30>)
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 f821 	bl	8000d26 <set_field>
    return field;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	08010528 	.word	0x08010528

08000cf4 <destroy_field>:
 * Returns:
 * 0: success
 * 1: error realloc'ing field's char array
 */
static void destroy_field(CSV_FIELD *field)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    if (field->text != NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d007      	beq.n	8000d14 <destroy_field+0x20>
	{
		free(field->text);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00e fb73 	bl	800f3f4 <free>
		field->text = NULL;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
    }
    free(field);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f00e fb6d 	bl	800f3f4 <free>
    field = NULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <set_field>:
 * Returns:
 *  0: success
 *  1: error allocating space to the string
 */
static int set_field(CSV_FIELD *field, char *text)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
    char *tmp;

    field->length = strlen(text) + 1;
 8000d30:	6838      	ldr	r0, [r7, #0]
 8000d32:	f7ff fa55 	bl	80001e0 <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	605a      	str	r2, [r3, #4]
    tmp = realloc(field->text, field->length);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4619      	mov	r1, r3
 8000d48:	4610      	mov	r0, r2
 8000d4a:	f00e fc51 	bl	800f5f0 <realloc>
 8000d4e:	60f8      	str	r0, [r7, #12]
    if (tmp == NULL)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <set_field+0x34>
        return 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e009      	b.n	8000d6e <set_field+0x48>
    field->text = tmp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	601a      	str	r2, [r3, #0]
    strcpy(field->text, text);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6839      	ldr	r1, [r7, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00e fcf1 	bl	800f74e <strcpy>

    return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <read_next_field>:
 *  0: Moved successfully to the next entry in this row
 *  1: The next entry is on a new row
 *  2: There is no next entry (EOF)
 */
static int read_next_field(FIL *csv_fp, char field_delim, char text_delim, CSV_FIELD *field)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b08c      	sub	sp, #48	; 0x30
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	72fb      	strb	r3, [r7, #11]
 8000d84:	4613      	mov	r3, r2
 8000d86:	72bb      	strb	r3, [r7, #10]
	char ch = 'a';
 8000d88:	2361      	movs	r3, #97	; 0x61
 8000d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    bool done = false;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool in_text = false;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool esc = false;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	UINT n;
    int c = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
    char *tmp = malloc(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f00e fb1d 	bl	800f3e4 <malloc>
 8000daa:	4603      	mov	r3, r0
 8000dac:	617b      	str	r3, [r7, #20]
    tmp[0] = '\0';
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]

	while (!done)
 8000db4:	e086      	b.n	8000ec4 <read_next_field+0x14e>
	{
		f_read(csv_fp, &ch, 1, &n);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f00a fa6e 	bl	800b2a2 <f_read>

		if (f_eof(csv_fp))
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d105      	bne.n	8000de6 <read_next_field+0x70>
		{
			c = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
			done = true;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000de4:	e06e      	b.n	8000ec4 <read_next_field+0x14e>
		}
		else if (!in_text)
 8000de6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000dea:	f083 0301 	eor.w	r3, r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d029      	beq.n	8000e48 <read_next_field+0xd2>
		{
			if (ch == text_delim)
 8000df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000df8:	7aba      	ldrb	r2, [r7, #10]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d105      	bne.n	8000e0a <read_next_field+0x94>
			{
				in_text = true;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				c = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	e05c      	b.n	8000ec4 <read_next_field+0x14e>
			}
			else if (ch == field_delim)
 8000e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e0e:	7afa      	ldrb	r2, [r7, #11]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d103      	bne.n	8000e1c <read_next_field+0xa6>
			{
				done = true;
 8000e14:	2301      	movs	r3, #1
 8000e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e1a:	e053      	b.n	8000ec4 <read_next_field+0x14e>
			}
			else if (ch == '\n')
 8000e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e20:	2b0a      	cmp	r3, #10
 8000e22:	d103      	bne.n	8000e2c <read_next_field+0xb6>
			{
				done = true;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e2a:	e04b      	b.n	8000ec4 <read_next_field+0x14e>
			}
			else if (ch != '\r')
 8000e2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e30:	2b0d      	cmp	r3, #13
 8000e32:	d047      	beq.n	8000ec4 <read_next_field+0x14e>
			{
				add_char(&tmp, &c, ch);
 8000e34:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e38:	f107 0118 	add.w	r1, r7, #24
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff09 	bl	8000c58 <add_char>
 8000e46:	e03d      	b.n	8000ec4 <read_next_field+0x14e>
			}
		}
		else
		{ /* in_text == true */
			if (esc)
 8000e48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d018      	beq.n	8000e82 <read_next_field+0x10c>
			{
				if (ch == text_delim)
 8000e50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e54:	7aba      	ldrb	r2, [r7, #10]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d10c      	bne.n	8000e74 <read_next_field+0xfe>
				{
					add_char(&tmp, &c, ch);
 8000e5a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e5e:	f107 0118 	add.w	r1, r7, #24
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fef6 	bl	8000c58 <add_char>
					esc = false;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000e72:	e027      	b.n	8000ec4 <read_next_field+0x14e>
				}
				else
				{
					esc = false;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					done = true;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e80:	e020      	b.n	8000ec4 <read_next_field+0x14e>
				}
			}
			else
			{ /* !esc */
				if (ch == text_delim)
 8000e82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e86:	7aba      	ldrb	r2, [r7, #10]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d103      	bne.n	8000e94 <read_next_field+0x11e>
				{
					esc = true;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000e92:	e017      	b.n	8000ec4 <read_next_field+0x14e>
				} else if (ch == field_delim)
 8000e94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e98:	7afa      	ldrb	r2, [r7, #11]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d109      	bne.n	8000eb2 <read_next_field+0x13c>
				{
					add_char(&tmp, &c, ch);
 8000e9e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ea2:	f107 0118 	add.w	r1, r7, #24
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fed4 	bl	8000c58 <add_char>
 8000eb0:	e008      	b.n	8000ec4 <read_next_field+0x14e>
				}
				else
				{
					add_char(&tmp, &c, ch);
 8000eb2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000eb6:	f107 0118 	add.w	r1, r7, #24
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff feca 	bl	8000c58 <add_char>
	while (!done)
 8000ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ec8:	f083 0301 	eor.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f47f af71 	bne.w	8000db6 <read_next_field+0x40>
				}
			}
		}
    }

    if (field != NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <read_next_field+0x16e>
	{
        set_field(field, tmp);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	4619      	mov	r1, r3
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff21 	bl	8000d26 <set_field>
    }

    if (tmp != NULL)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <read_next_field+0x17c>
        free(tmp);
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00e fa81 	bl	800f3f4 <free>
    tmp = NULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Moving the fp to the beginning of the next field and peeking
        * to see if it is a new line or if there is in fact no next field.
        */
    int pos;
    int retval;
    done = false;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (!done)
 8000efc:	e04b      	b.n	8000f96 <read_next_field+0x220>
	{
		if (ch == field_delim)
 8000efe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f02:	7afa      	ldrb	r2, [r7, #11]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d105      	bne.n	8000f14 <read_next_field+0x19e>
		{
			retval = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f12:	e040      	b.n	8000f96 <read_next_field+0x220>
		}
		else if (ch == '\n')
 8000f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f18:	2b0a      	cmp	r3, #10
 8000f1a:	d124      	bne.n	8000f66 <read_next_field+0x1f0>
		{
			/* Checking to see if this \n is the one that UNIX
				* sometimes includes before the EOF */
			pos = csv_fp->fptr;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
			f_read(csv_fp, &ch, 1, &n);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000f2e:	2201      	movs	r2, #1
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f00a f9b6 	bl	800b2a2 <f_read>

			if (f_eof(csv_fp))
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d102      	bne.n	8000f50 <read_next_field+0x1da>
				retval = 2;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4e:	e001      	b.n	8000f54 <read_next_field+0x1de>
			else
				retval = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28

			f_lseek(csv_fp, pos);
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f00a ff80 	bl	800be5e <f_lseek>
			done = true;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f64:	e017      	b.n	8000f96 <read_next_field+0x220>
		}
		else if (f_eof(csv_fp))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d105      	bne.n	8000f86 <read_next_field+0x210>
		{
			retval = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f84:	e007      	b.n	8000f96 <read_next_field+0x220>
		}
		else
		{
			f_read(csv_fp, &ch, 1, &n);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000f8e:	2201      	movs	r2, #1
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f00a f986 	bl	800b2a2 <f_read>
    while (!done)
 8000f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f9a:	f083 0301 	eor.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1ac      	bne.n	8000efe <read_next_field+0x188>
		}
    }

    return retval;
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3730      	adds	r7, #48	; 0x30
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <append_field>:
 * 0: success
 * 1: the given row does not exist
 * 2: memory allocation error
 */
static int append_field(CSV_BUFFER *buffer, size_t row)
{
 8000fae:	b590      	push	{r4, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]

	CSV_FIELD **temp_field;

	if (buffer->rows < row + 1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d201      	bcs.n	8000fc8 <append_field+0x1a>
		return 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e036      	b.n	8001036 <append_field+0x88>

	/* Set col equal to the index of the new field */
	int col = buffer->width[row];
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]

	temp_field = realloc(buffer->field[row], (col + 1) * sizeof(CSV_FIELD*));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f00e fb00 	bl	800f5f0 <realloc>
 8000ff0:	60b8      	str	r0, [r7, #8]
	if (temp_field == NULL)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <append_field+0x4e>
	{
		return 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e01c      	b.n	8001036 <append_field+0x88>
	}
	else
	{
		buffer->field[row] = temp_field;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	601a      	str	r2, [r3, #0]
		buffer->field[row][col] = create_field();
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	18d4      	adds	r4, r2, r3
 800101c:	f7ff fe50 	bl	8000cc0 <create_field>
 8001020:	4603      	mov	r3, r0
 8001022:	6023      	str	r3, [r4, #0]
		buffer->width[row]++;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	3201      	adds	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}

0800103e <append_row>:
 * 0: success
 * 1: error allocating width memory
 * 2: error allocating field memory
 */
static int append_row(CSV_BUFFER *buffer)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
    size_t *temp_width;
    CSV_FIELD ***temp_field;

    size_t row  = buffer->rows;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	617b      	str	r3, [r7, #20]

    temp_width = realloc(buffer->width, (buffer->rows + 1) * sizeof(size_t));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	3301      	adds	r3, #1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4619      	mov	r1, r3
 800105a:	4610      	mov	r0, r2
 800105c:	f00e fac8 	bl	800f5f0 <realloc>
 8001060:	6138      	str	r0, [r7, #16]
    if (temp_width != NULL)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d018      	beq.n	800109a <append_row+0x5c>
	{
        buffer->width = temp_width;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	609a      	str	r2, [r3, #8]
        buffer->width[row] = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
	else
	{
        return 1;
    }

    temp_field = realloc(buffer->field, (buffer->rows + 1) * sizeof(CSV_FIELD**));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	3301      	adds	r3, #1
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f00e fab0 	bl	800f5f0 <realloc>
 8001090:	60f8      	str	r0, [r7, #12]
    if (temp_field != NULL)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d017      	beq.n	80010c8 <append_row+0x8a>
 8001098:	e001      	b.n	800109e <append_row+0x60>
        return 1;
 800109a:	2301      	movs	r3, #1
 800109c:	e018      	b.n	80010d0 <append_row+0x92>
	{
        buffer->field = temp_field;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	601a      	str	r2, [r3, #0]
        buffer->field[row] = NULL;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
	{
        free(temp_width);
        return 2;
    }

    buffer->rows++;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
    append_field(buffer, row);
 80010bc:	6979      	ldr	r1, [r7, #20]
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff75 	bl	8000fae <append_field>
    return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e003      	b.n	80010d0 <append_row+0x92>
        free(temp_width);
 80010c8:	6938      	ldr	r0, [r7, #16]
 80010ca:	f00e f993 	bl	800f3f4 <free>
        return 2;
 80010ce:	2302      	movs	r3, #2
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <csv_create_buffer>:

    return 0;
}

CSV_BUFFER *csv_create_buffer()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
    CSV_BUFFER *buffer = malloc(sizeof(CSV_BUFFER));
 80010de:	2010      	movs	r0, #16
 80010e0:	f00e f980 	bl	800f3e4 <malloc>
 80010e4:	4603      	mov	r3, r0
 80010e6:	607b      	str	r3, [r7, #4]

    if (buffer != NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00e      	beq.n	800110c <csv_create_buffer+0x34>
	{
	    buffer->field = NULL;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
	    buffer->rows = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
	    buffer->width = NULL;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
	    buffer->field_delim = ',';
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	222c      	movs	r2, #44	; 0x2c
 8001104:	731a      	strb	r2, [r3, #12]
	    buffer->text_delim = '"';
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2222      	movs	r2, #34	; 0x22
 800110a:	735a      	strb	r2, [r3, #13]
    }

    return buffer;
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <csv_destroy_buffer>:

void csv_destroy_buffer(CSV_BUFFER *buffer)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
    int i, j;

    for (i = 0; i < buffer->rows; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e02e      	b.n	8001182 <csv_destroy_buffer+0x6c>
	{
        for (j = 0; j < buffer->width[i]; j++)
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	e00f      	b.n	800114a <csv_destroy_buffer+0x34>
		{
            destroy_field(buffer->field[i][j]);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fdd8 	bl	8000cf4 <destroy_field>
        for (j = 0; j < buffer->width[i]; j++)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	3301      	adds	r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8e6      	bhi.n	800112a <csv_destroy_buffer+0x14>
        }
        free(buffer->field[i]);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f00e f943 	bl	800f3f4 <free>
        buffer->field[i] = NULL;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->rows; i++)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3301      	adds	r3, #1
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8cb      	bhi.n	8001124 <csv_destroy_buffer+0xe>
    }

    if (buffer->field != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d004      	beq.n	800119e <csv_destroy_buffer+0x88>
        free(buffer->field);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f00e f92b 	bl	800f3f4 <free>

    if (buffer->width != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <csv_destroy_buffer+0x9a>
        free(buffer->width);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00e f922 	bl	800f3f4 <free>

    free(buffer);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f00e f91f 	bl	800f3f4 <free>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <csv_load>:

int csv_load(CSV_BUFFER *buffer, FIL *csv_fp)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b088      	sub	sp, #32
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 80011c8:	2100      	movs	r1, #0
 80011ca:	6838      	ldr	r0, [r7, #0]
 80011cc:	f00a fe47 	bl	800be5e <f_lseek>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK)
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <csv_load+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 80011da:	2301      	movs	r3, #1
 80011dc:	e059      	b.n	8001292 <csv_load+0xd4>
	}

	int next = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
	bool end = false;
 80011e2:	2300      	movs	r3, #0
 80011e4:	76fb      	strb	r3, [r7, #27]
	bool first = true;
 80011e6:	2301      	movs	r3, #1
 80011e8:	76bb      	strb	r3, [r7, #26]
	int i = -1, j = -1;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	613b      	str	r3, [r7, #16]

	while (!end)
 80011f6:	e045      	b.n	8001284 <csv_load+0xc6>
	{
		if (!first)
 80011f8:	7ebb      	ldrb	r3, [r7, #26]
 80011fa:	f083 0301 	eor.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d015      	beq.n	8001230 <csv_load+0x72>
		{
			next = read_next_field(csv_fp, buffer->field_delim, buffer->text_delim, buffer->field[i][j-1]);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7b19      	ldrb	r1, [r3, #12]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7b58      	ldrb	r0, [r3, #13]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800121e:	3b01      	subs	r3, #1
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4602      	mov	r2, r0
 8001228:	6838      	ldr	r0, [r7, #0]
 800122a:	f7ff fda4 	bl	8000d76 <read_next_field>
 800122e:	61f8      	str	r0, [r7, #28]
		}

		if (next == 2)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d101      	bne.n	800123a <csv_load+0x7c>
			end = true;
 8001236:	2301      	movs	r3, #1
 8001238:	76fb      	strb	r3, [r7, #27]

		if (next == 1)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10c      	bne.n	800125a <csv_load+0x9c>
		{
			if (append_row(buffer) != 0)
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fefc 	bl	800103e <append_row>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <csv_load+0x92>
				return 2;
 800124c:	2302      	movs	r3, #2
 800124e:	e020      	b.n	8001292 <csv_load+0xd4>
			j = 1;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
			i++;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
		}

		if (next == 0)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10c      	bne.n	800127a <csv_load+0xbc>
		{
			if (append_field(buffer, i) != 0)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fea2 	bl	8000fae <append_field>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <csv_load+0xb6>
				return 2;
 8001270:	2302      	movs	r3, #2
 8001272:	e00e      	b.n	8001292 <csv_load+0xd4>
			j++;
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	3301      	adds	r3, #1
 8001278:	613b      	str	r3, [r7, #16]
		}

		if (first) first = false;
 800127a:	7ebb      	ldrb	r3, [r7, #26]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <csv_load+0xc6>
 8001280:	2300      	movs	r3, #0
 8001282:	76bb      	strb	r3, [r7, #26]
	while (!end)
 8001284:	7efb      	ldrb	r3, [r7, #27]
 8001286:	f083 0301 	eor.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1b3      	bne.n	80011f8 <csv_load+0x3a>
	}

	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <csv_save>:

int csv_save(FIL *csv_fp, CSV_BUFFER *buffer)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b088      	sub	sp, #32
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]

	UINT n;
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 80012a4:	2100      	movs	r1, #0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f00a fdd9 	bl	800be5e <f_lseek>
 80012ac:	4603      	mov	r3, r0
 80012ae:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <csv_save+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e0d8      	b.n	800146c <csv_save+0x1d2>
	}

    char text_delim = buffer->text_delim;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	7b5b      	ldrb	r3, [r3, #13]
 80012be:	72fb      	strb	r3, [r7, #11]
    char field_delim = buffer->field_delim;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	7b1b      	ldrb	r3, [r3, #12]
 80012c4:	72bb      	strb	r3, [r7, #10]
	char new_line = '\n';
 80012c6:	230a      	movs	r3, #10
 80012c8:	727b      	strb	r3, [r7, #9]
    for(i = 0; i < buffer->rows; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	e0b9      	b.n	8001444 <csv_save+0x1aa>
	{
        for(j = 0; j < buffer->width[i]; j++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	e0a9      	b.n	800142a <csv_save+0x190>
		{
            chloc = strchr(buffer->field[i][j]->text, text_delim);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	7afa      	ldrb	r2, [r7, #11]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00e fa1f 	bl	800f734 <strchr>
 80012f6:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d110      	bne.n	8001320 <csv_save+0x86>
                chloc = strchr(buffer->field[i][j]->text, field_delim);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	7aba      	ldrb	r2, [r7, #10]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f00e fa0b 	bl	800f734 <strchr>
 800131e:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10f      	bne.n	8001346 <csv_save+0xac>
                chloc = strchr(buffer->field[i][j]->text, '\n');
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	210a      	movs	r1, #10
 800133e:	4618      	mov	r0, r3
 8001340:	f00e f9f8 	bl	800f734 <strchr>
 8001344:	6178      	str	r0, [r7, #20]
            // if any of the above characters are found, chloc will be set
            // and we must use text delimiters.
            if(chloc != NULL)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d02e      	beq.n	80013aa <csv_save+0x110>
			{
				f_write(csv_fp, &text_delim, 1, &n);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	f107 010b 	add.w	r1, r7, #11
 8001354:	2201      	movs	r2, #1
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f00a f9e0 	bl	800b71c <f_write>
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6819      	ldr	r1, [r3, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	1e5a      	subs	r2, r3, #1
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f00a f9c4 	bl	800b71c <f_write>
				f_write(csv_fp, &text_delim, 1, &n);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	f107 010b 	add.w	r1, r7, #11
 800139c:	2201      	movs	r2, #1
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f00a f9bc 	bl	800b71c <f_write>
                chloc = NULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e01b      	b.n	80013e2 <csv_save+0x148>
            }
			else
			{
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6819      	ldr	r1, [r3, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	1e5a      	subs	r2, r3, #1
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f00a f99d 	bl	800b71c <f_write>
            }
            if(j < buffer->width[i] - 1)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1e5a      	subs	r2, r3, #1
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d908      	bls.n	8001408 <csv_save+0x16e>
				f_write(csv_fp, &field_delim, 1, &n);
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	f107 010a 	add.w	r1, r7, #10
 80013fe:	2201      	movs	r2, #1
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f00a f98b 	bl	800b71c <f_write>
 8001406:	e00d      	b.n	8001424 <csv_save+0x18a>
            else if (i < buffer->rows - 1)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	1e5a      	subs	r2, r3, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	429a      	cmp	r2, r3
 8001412:	d907      	bls.n	8001424 <csv_save+0x18a>
				f_write(csv_fp, &new_line, 1, &n);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	f107 0109 	add.w	r1, r7, #9
 800141c:	2201      	movs	r2, #1
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f00a f97c 	bl	800b71c <f_write>
        for(j = 0; j < buffer->width[i]; j++)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	3301      	adds	r3, #1
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	429a      	cmp	r2, r3
 800143a:	f63f af4c 	bhi.w	80012d6 <csv_save+0x3c>
    for(i = 0; i < buffer->rows; i++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	429a      	cmp	r2, r3
 800144c:	f63f af40 	bhi.w	80012d0 <csv_save+0x36>
        }
    }
	f_truncate(csv_fp);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f00b f8f1 	bl	800c638 <f_truncate>

	// Sync (just in case)
	res = f_sync(csv_fp);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f00a fbee 	bl	800bc38 <f_sync>
 800145c:	4603      	mov	r3, r0
 800145e:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 8001460:	7cfb      	ldrb	r3, [r7, #19]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <csv_save+0x1d0>
	{
		//log_error("f_sync pb: %d", res);
		return 0;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <csv_save+0x1d2>
	}

    return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <csv_set_field>:
    else
        return buffer->field[row][entry]->length - 1;
}

int csv_set_field(CSV_BUFFER *buffer, size_t row, size_t entry, char *field)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
    while (row >= buffer->rows)
 8001482:	e002      	b.n	800148a <csv_set_field+0x16>
	{
        append_row(buffer);
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7ff fdda 	bl	800103e <append_row>
    while (row >= buffer->rows)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	429a      	cmp	r2, r3
 8001492:	d2f7      	bcs.n	8001484 <csv_set_field+0x10>
    }
    while (entry >= buffer->width[row])
 8001494:	e003      	b.n	800149e <csv_set_field+0x2a>
        append_field(buffer, row);
 8001496:	68b9      	ldr	r1, [r7, #8]
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff fd88 	bl	8000fae <append_field>
    while (entry >= buffer->width[row])
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d2f2      	bcs.n	8001496 <csv_set_field+0x22>

    if (set_field(buffer->field[row][entry], field) == 0)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6839      	ldr	r1, [r7, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc2d 	bl	8000d26 <set_field>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <csv_set_field+0x62>
        return 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <csv_set_field+0x64>
    else
        return 1;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <SELECT+0x14>)
 80014ea:	f003 fa37 	bl	800495c <HAL_GPIO_WritePin>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	48000400 	.word	0x48000400

080014f8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2140      	movs	r1, #64	; 0x40
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <DESELECT+0x14>)
 8001502:	f003 fa2b 	bl	800495c <HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	48000400 	.word	0x48000400

08001510 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800151a:	bf00      	nop
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <SPI_TxByte+0x30>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b02      	cmp	r3, #2
 8001528:	d1f8      	bne.n	800151c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800152a:	1df9      	adds	r1, r7, #7
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	2201      	movs	r2, #1
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <SPI_TxByte+0x30>)
 8001532:	f005 fd6a 	bl	800700a <HAL_SPI_Transmit>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001c0 	.word	0x200001c0

08001544 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001550:	bf00      	nop
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SPI_TxBuffer+0x30>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b02      	cmp	r3, #2
 800155e:	d1f8      	bne.n	8001552 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001560:	887a      	ldrh	r2, [r7, #2]
 8001562:	2364      	movs	r3, #100	; 0x64
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <SPI_TxBuffer+0x30>)
 8001568:	f005 fd4f 	bl	800700a <HAL_SPI_Transmit>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200001c0 	.word	0x200001c0

08001578 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800157e:	23ff      	movs	r3, #255	; 0xff
 8001580:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001582:	bf00      	nop
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <SPI_RxByte+0x34>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b02      	cmp	r3, #2
 8001590:	d1f8      	bne.n	8001584 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001592:	1dba      	adds	r2, r7, #6
 8001594:	1df9      	adds	r1, r7, #7
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <SPI_RxByte+0x34>)
 800159e:	f005 fea2 	bl	80072e6 <HAL_SPI_TransmitReceive>

  return data;
 80015a2:	79bb      	ldrb	r3, [r7, #6]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001c0 	.word	0x200001c0

080015b0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80015b8:	f7ff ffde 	bl	8001578 <SPI_RxByte>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	701a      	strb	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <SD_ReadyWait+0x3c>)
 80015d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015d8:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80015da:	f7ff ffcd 	bl	8001578 <SPI_RxByte>
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
    Timer2 = Timer2 - 1;
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <SD_ReadyWait+0x3c>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <SD_ReadyWait+0x3c>)
 80015ec:	801a      	strh	r2, [r3, #0]
  } while ((res != 0xFF) && Timer2);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	d003      	beq.n	80015fc <SD_ReadyWait+0x30>
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SD_ReadyWait+0x3c>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ee      	bne.n	80015da <SD_ReadyWait+0xe>

  return res;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000146 	.word	0x20000146

0800160c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8001612:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001616:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8001618:	f7ff ff6e 	bl	80014f8 <DESELECT>
  for(int i = 0; i < 10; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	e005      	b.n	800162e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001622:	20ff      	movs	r0, #255	; 0xff
 8001624:	f7ff ff74 	bl	8001510 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3301      	adds	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b09      	cmp	r3, #9
 8001632:	ddf6      	ble.n	8001622 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8001634:	f7ff ff54 	bl	80014e0 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8001638:	2340      	movs	r3, #64	; 0x40
 800163a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 800164c:	2395      	movs	r3, #149	; 0x95
 800164e:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8001650:	463b      	mov	r3, r7
 8001652:	2106      	movs	r1, #6
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff75 	bl	8001544 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800165a:	e002      	b.n	8001662 <SD_PowerOn+0x56>
  {
    cnt--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8001662:	f7ff ff89 	bl	8001578 <SPI_RxByte>
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	d002      	beq.n	8001672 <SD_PowerOn+0x66>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f4      	bne.n	800165c <SD_PowerOn+0x50>
  }

  DESELECT();
 8001672:	f7ff ff41 	bl	80014f8 <DESELECT>
  SPI_TxByte(0XFF);
 8001676:	20ff      	movs	r0, #255	; 0xff
 8001678:	f7ff ff4a 	bl	8001510 <SPI_TxByte>

  PowerFlag = 1;
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <SD_PowerOn+0x80>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000149 	.word	0x20000149

08001690 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <SD_PowerOff+0x14>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20000149 	.word	0x20000149

080016a8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return PowerFlag;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SD_CheckPower+0x14>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000149 	.word	0x20000149

080016c0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <SD_RxDataBlock+0x64>)
 80016cc:	22c8      	movs	r2, #200	; 0xc8
 80016ce:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80016d0:	f7ff ff52 	bl	8001578 <SPI_RxByte>
 80016d4:	4603      	mov	r3, r0
 80016d6:	73fb      	strb	r3, [r7, #15]
    Timer1 = Timer1 - 1;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <SD_RxDataBlock+0x64>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <SD_RxDataBlock+0x64>)
 80016e2:	801a      	strh	r2, [r3, #0]
  } while((token == 0xFF) && Timer1);
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	2bff      	cmp	r3, #255	; 0xff
 80016e8:	d103      	bne.n	80016f2 <SD_RxDataBlock+0x32>
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <SD_RxDataBlock+0x64>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ee      	bne.n	80016d0 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	2bfe      	cmp	r3, #254	; 0xfe
 80016f6:	d001      	beq.n	80016fc <SD_RxDataBlock+0x3c>
 80016f8:	2300      	movs	r3, #0
 80016fa:	e00f      	b.n	800171c <SD_RxDataBlock+0x5c>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff54 	bl	80015b0 <SPI_RxBytePtr>
  } while(len--);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	1e5a      	subs	r2, r3, #1
 800170c:	603a      	str	r2, [r7, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f4      	bne.n	80016fc <SD_RxDataBlock+0x3c>

  /* discard CRC */
  SPI_RxByte();
 8001712:	f7ff ff31 	bl	8001578 <SPI_RxByte>
  SPI_RxByte();
 8001716:	f7ff ff2f 	bl	8001578 <SPI_RxByte>

  return TRUE;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000144 	.word	0x20000144

08001728 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8001738:	f7ff ff48 	bl	80015cc <SD_ReadyWait>
 800173c:	4603      	mov	r3, r0
 800173e:	2bff      	cmp	r3, #255	; 0xff
 8001740:	d001      	beq.n	8001746 <SD_TxDataBlock+0x1e>
 8001742:	2300      	movs	r3, #0
 8001744:	e02f      	b.n	80017a6 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fee1 	bl	8001510 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	2bfd      	cmp	r3, #253	; 0xfd
 8001752:	d020      	beq.n	8001796 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8001754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fef3 	bl	8001544 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800175e:	f7ff ff0b 	bl	8001578 <SPI_RxByte>
    SPI_RxByte();
 8001762:	f7ff ff09 	bl	8001578 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8001766:	e00b      	b.n	8001780 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8001768:	f7ff ff06 	bl	8001578 <SPI_RxByte>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	2b05      	cmp	r3, #5
 8001778:	d006      	beq.n	8001788 <SD_TxDataBlock+0x60>
      i++;
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	3301      	adds	r3, #1
 800177e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	2b40      	cmp	r3, #64	; 0x40
 8001784:	d9f0      	bls.n	8001768 <SD_TxDataBlock+0x40>
 8001786:	e000      	b.n	800178a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8001788:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800178a:	bf00      	nop
 800178c:	f7ff fef4 	bl	8001578 <SPI_RxByte>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0fa      	beq.n	800178c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	2b05      	cmp	r3, #5
 800179e:	d101      	bne.n	80017a4 <SD_TxDataBlock+0x7c>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <SD_TxDataBlock+0x7e>

  return FALSE;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	6039      	str	r1, [r7, #0]
 80017b8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80017ba:	f7ff ff07 	bl	80015cc <SD_ReadyWait>
 80017be:	4603      	mov	r3, r0
 80017c0:	2bff      	cmp	r3, #255	; 0xff
 80017c2:	d001      	beq.n	80017c8 <SD_SendCmd+0x1a>
 80017c4:	23ff      	movs	r3, #255	; 0xff
 80017c6:	e042      	b.n	800184e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fea0 	bl	8001510 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	0e1b      	lsrs	r3, r3, #24
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fe9a 	bl	8001510 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	0c1b      	lsrs	r3, r3, #16
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe94 	bl	8001510 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff fe8e 	bl	8001510 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fe89 	bl	8001510 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b40      	cmp	r3, #64	; 0x40
 8001802:	d102      	bne.n	800180a <SD_SendCmd+0x5c>
 8001804:	2395      	movs	r3, #149	; 0x95
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e007      	b.n	800181a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b48      	cmp	r3, #72	; 0x48
 800180e:	d102      	bne.n	8001816 <SD_SendCmd+0x68>
 8001810:	2387      	movs	r3, #135	; 0x87
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <SD_SendCmd+0x6c>
  else crc = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe77 	bl	8001510 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b4c      	cmp	r3, #76	; 0x4c
 8001826:	d101      	bne.n	800182c <SD_SendCmd+0x7e>
 8001828:	f7ff fea6 	bl	8001578 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800182c:	230a      	movs	r3, #10
 800182e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8001830:	f7ff fea2 	bl	8001578 <SPI_RxByte>
 8001834:	4603      	mov	r3, r0
 8001836:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001838:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800183c:	2b00      	cmp	r3, #0
 800183e:	da05      	bge.n	800184c <SD_SendCmd+0x9e>
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	3b01      	subs	r3, #1
 8001844:	73bb      	strb	r3, [r7, #14]
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f1      	bne.n	8001830 <SD_SendCmd+0x82>

  return res;
 800184c:	7b7b      	ldrb	r3, [r7, #13]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SD_disk_initialize+0x14>
 8001868:	2301      	movs	r3, #1
 800186a:	e0df      	b.n	8001a2c <SD_disk_initialize+0x1d4>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800186c:	4b71      	ldr	r3, [pc, #452]	; (8001a34 <SD_disk_initialize+0x1dc>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <SD_disk_initialize+0x2a>
 800187a:	4b6e      	ldr	r3, [pc, #440]	; (8001a34 <SD_disk_initialize+0x1dc>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	e0d4      	b.n	8001a2c <SD_disk_initialize+0x1d4>

  /* power on */
  SD_PowerOn();
 8001882:	f7ff fec3 	bl	800160c <SD_PowerOn>

  /* slave select */
  SELECT();
 8001886:	f7ff fe2b 	bl	80014e0 <SELECT>

  /* check disk type */
  type = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800188e:	2100      	movs	r1, #0
 8001890:	2040      	movs	r0, #64	; 0x40
 8001892:	f7ff ff8c 	bl	80017ae <SD_SendCmd>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	f040 80af 	bne.w	80019fc <SD_disk_initialize+0x1a4>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800189e:	4b66      	ldr	r3, [pc, #408]	; (8001a38 <SD_disk_initialize+0x1e0>)
 80018a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018a4:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80018a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80018aa:	2048      	movs	r0, #72	; 0x48
 80018ac:	f7ff ff7f 	bl	80017ae <SD_SendCmd>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d15d      	bne.n	8001972 <SD_disk_initialize+0x11a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e00c      	b.n	80018d6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80018bc:	7bfc      	ldrb	r4, [r7, #15]
 80018be:	f7ff fe5b 	bl	8001578 <SPI_RxByte>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	f104 0310 	add.w	r3, r4, #16
 80018ca:	443b      	add	r3, r7
 80018cc:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	3301      	adds	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d9ef      	bls.n	80018bc <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80018dc:	7abb      	ldrb	r3, [r7, #10]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f040 808c 	bne.w	80019fc <SD_disk_initialize+0x1a4>
 80018e4:	7afb      	ldrb	r3, [r7, #11]
 80018e6:	2baa      	cmp	r3, #170	; 0xaa
 80018e8:	f040 8088 	bne.w	80019fc <SD_disk_initialize+0x1a4>
      {
        /* ACMD41 with HCS bit */
        do {
        	Timer1 = Timer1 - 1;
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <SD_disk_initialize+0x1e0>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <SD_disk_initialize+0x1e0>)
 80018f6:	801a      	strh	r2, [r3, #0]
        	if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80018f8:	2100      	movs	r1, #0
 80018fa:	2077      	movs	r0, #119	; 0x77
 80018fc:	f7ff ff57 	bl	80017ae <SD_SendCmd>
 8001900:	4603      	mov	r3, r0
 8001902:	2b01      	cmp	r3, #1
 8001904:	d807      	bhi.n	8001916 <SD_disk_initialize+0xbe>
 8001906:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800190a:	2069      	movs	r0, #105	; 0x69
 800190c:	f7ff ff4f 	bl	80017ae <SD_SendCmd>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d004      	beq.n	8001920 <SD_disk_initialize+0xc8>
        } while (Timer1);
 8001916:	4b48      	ldr	r3, [pc, #288]	; (8001a38 <SD_disk_initialize+0x1e0>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1e6      	bne.n	80018ec <SD_disk_initialize+0x94>
 800191e:	e000      	b.n	8001922 <SD_disk_initialize+0xca>
        	if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001920:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001922:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <SD_disk_initialize+0x1e0>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d068      	beq.n	80019fc <SD_disk_initialize+0x1a4>
 800192a:	2100      	movs	r1, #0
 800192c:	207a      	movs	r0, #122	; 0x7a
 800192e:	f7ff ff3e 	bl	80017ae <SD_SendCmd>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d161      	bne.n	80019fc <SD_disk_initialize+0x1a4>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e00c      	b.n	8001958 <SD_disk_initialize+0x100>
          {
            ocr[n] = SPI_RxByte();
 800193e:	7bfc      	ldrb	r4, [r7, #15]
 8001940:	f7ff fe1a 	bl	8001578 <SPI_RxByte>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	f104 0310 	add.w	r3, r4, #16
 800194c:	443b      	add	r3, r7
 800194e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3301      	adds	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d9ef      	bls.n	800193e <SD_disk_initialize+0xe6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800195e:	7a3b      	ldrb	r3, [r7, #8]
 8001960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SD_disk_initialize+0x114>
 8001968:	230c      	movs	r3, #12
 800196a:	e000      	b.n	800196e <SD_disk_initialize+0x116>
 800196c:	2304      	movs	r3, #4
 800196e:	73bb      	strb	r3, [r7, #14]
 8001970:	e044      	b.n	80019fc <SD_disk_initialize+0x1a4>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001972:	2100      	movs	r1, #0
 8001974:	2077      	movs	r0, #119	; 0x77
 8001976:	f7ff ff1a 	bl	80017ae <SD_SendCmd>
 800197a:	4603      	mov	r3, r0
 800197c:	2b01      	cmp	r3, #1
 800197e:	d808      	bhi.n	8001992 <SD_disk_initialize+0x13a>
 8001980:	2100      	movs	r1, #0
 8001982:	2069      	movs	r0, #105	; 0x69
 8001984:	f7ff ff13 	bl	80017ae <SD_SendCmd>
 8001988:	4603      	mov	r3, r0
 800198a:	2b01      	cmp	r3, #1
 800198c:	d801      	bhi.n	8001992 <SD_disk_initialize+0x13a>
 800198e:	2302      	movs	r3, #2
 8001990:	e000      	b.n	8001994 <SD_disk_initialize+0x13c>
 8001992:	2301      	movs	r3, #1
 8001994:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001996:	7bbb      	ldrb	r3, [r7, #14]
 8001998:	2b02      	cmp	r3, #2
 800199a:	d10e      	bne.n	80019ba <SD_disk_initialize+0x162>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800199c:	2100      	movs	r1, #0
 800199e:	2077      	movs	r0, #119	; 0x77
 80019a0:	f7ff ff05 	bl	80017ae <SD_SendCmd>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d80e      	bhi.n	80019c8 <SD_disk_initialize+0x170>
 80019aa:	2100      	movs	r1, #0
 80019ac:	2069      	movs	r0, #105	; 0x69
 80019ae:	f7ff fefe 	bl	80017ae <SD_SendCmd>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <SD_disk_initialize+0x170>
 80019b8:	e012      	b.n	80019e0 <SD_disk_initialize+0x188>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80019ba:	2100      	movs	r1, #0
 80019bc:	2041      	movs	r0, #65	; 0x41
 80019be:	f7ff fef6 	bl	80017ae <SD_SendCmd>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00a      	beq.n	80019de <SD_disk_initialize+0x186>
        }
        Timer1 = Timer1 - 1;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <SD_disk_initialize+0x1e0>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <SD_disk_initialize+0x1e0>)
 80019d2:	801a      	strh	r2, [r3, #0]
      } while (Timer1);
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <SD_disk_initialize+0x1e0>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1dc      	bne.n	8001996 <SD_disk_initialize+0x13e>
 80019dc:	e000      	b.n	80019e0 <SD_disk_initialize+0x188>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80019de:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <SD_disk_initialize+0x1e0>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d007      	beq.n	80019f8 <SD_disk_initialize+0x1a0>
 80019e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ec:	2050      	movs	r0, #80	; 0x50
 80019ee:	f7ff fede 	bl	80017ae <SD_SendCmd>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SD_disk_initialize+0x1a4>
 80019f8:	2300      	movs	r3, #0
 80019fa:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <SD_disk_initialize+0x1e4>)
 80019fe:	7bbb      	ldrb	r3, [r7, #14]
 8001a00:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001a02:	f7ff fd79 	bl	80014f8 <DESELECT>
  SPI_RxByte();
 8001a06:	f7ff fdb7 	bl	8001578 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8001a0a:	7bbb      	ldrb	r3, [r7, #14]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <SD_disk_initialize+0x1ca>
  {
    Stat &= ~STA_NOINIT;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <SD_disk_initialize+0x1dc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <SD_disk_initialize+0x1dc>)
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e001      	b.n	8001a26 <SD_disk_initialize+0x1ce>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001a22:	f7ff fe35 	bl	8001690 <SD_PowerOff>
  }

  return Stat;
 8001a26:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <SD_disk_initialize+0x1dc>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	b2db      	uxtb	r3, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000144 	.word	0x20000144
 8001a3c:	20000148 	.word	0x20000148

08001a40 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SD_disk_status+0x14>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e002      	b.n	8001a5a <SD_disk_status+0x1a>
  return Stat;
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SD_disk_status+0x28>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b2db      	uxtb	r3, r3
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000000 	.word	0x20000000

08001a6c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <SD_disk_read+0x1c>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <SD_disk_read+0x20>
 8001a88:	2304      	movs	r3, #4
 8001a8a:	e051      	b.n	8001b30 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <SD_disk_read+0xcc>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SD_disk_read+0x32>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e048      	b.n	8001b30 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <SD_disk_read+0xd0>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <SD_disk_read+0x44>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	025b      	lsls	r3, r3, #9
 8001aae:	607b      	str	r3, [r7, #4]

  SELECT();
 8001ab0:	f7ff fd16 	bl	80014e0 <SELECT>

  if (count == 1)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d111      	bne.n	8001ade <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	2051      	movs	r0, #81	; 0x51
 8001abe:	f7ff fe76 	bl	80017ae <SD_SendCmd>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d129      	bne.n	8001b1c <SD_disk_read+0xb0>
 8001ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001acc:	68b8      	ldr	r0, [r7, #8]
 8001ace:	f7ff fdf7 	bl	80016c0 <SD_RxDataBlock>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d021      	beq.n	8001b1c <SD_disk_read+0xb0>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	e01e      	b.n	8001b1c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	2052      	movs	r0, #82	; 0x52
 8001ae2:	f7ff fe64 	bl	80017ae <SD_SendCmd>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d117      	bne.n	8001b1c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af0:	68b8      	ldr	r0, [r7, #8]
 8001af2:	f7ff fde5 	bl	80016c0 <SD_RxDataBlock>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00a      	beq.n	8001b12 <SD_disk_read+0xa6>
        buff += 512;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001b02:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ed      	bne.n	8001aec <SD_disk_read+0x80>
 8001b10:	e000      	b.n	8001b14 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001b12:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001b14:	2100      	movs	r1, #0
 8001b16:	204c      	movs	r0, #76	; 0x4c
 8001b18:	f7ff fe49 	bl	80017ae <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001b1c:	f7ff fcec 	bl	80014f8 <DESELECT>
  SPI_RxByte();
 8001b20:	f7ff fd2a 	bl	8001578 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf14      	ite	ne
 8001b2a:	2301      	movne	r3, #1
 8001b2c:	2300      	moveq	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000148 	.word	0x20000148

08001b40 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <SD_disk_write+0x1c>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <SD_disk_write+0x20>
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	e06b      	b.n	8001c38 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b60:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <SD_disk_write+0x100>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <SD_disk_write+0x32>
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e062      	b.n	8001c38 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001b72:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <SD_disk_write+0x100>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <SD_disk_write+0x44>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e059      	b.n	8001c38 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <SD_disk_write+0x104>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <SD_disk_write+0x56>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	025b      	lsls	r3, r3, #9
 8001b94:	607b      	str	r3, [r7, #4]

  SELECT();
 8001b96:	f7ff fca3 	bl	80014e0 <SELECT>

  if (count == 1)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d110      	bne.n	8001bc2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	2058      	movs	r0, #88	; 0x58
 8001ba4:	f7ff fe03 	bl	80017ae <SD_SendCmd>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d13a      	bne.n	8001c24 <SD_disk_write+0xe4>
 8001bae:	21fe      	movs	r1, #254	; 0xfe
 8001bb0:	68b8      	ldr	r0, [r7, #8]
 8001bb2:	f7ff fdb9 	bl	8001728 <SD_TxDataBlock>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d033      	beq.n	8001c24 <SD_disk_write+0xe4>
      count = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	e030      	b.n	8001c24 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <SD_disk_write+0x104>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2077      	movs	r0, #119	; 0x77
 8001bd2:	f7ff fdec 	bl	80017ae <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	2057      	movs	r0, #87	; 0x57
 8001bda:	f7ff fde8 	bl	80017ae <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	2059      	movs	r0, #89	; 0x59
 8001be2:	f7ff fde4 	bl	80017ae <SD_SendCmd>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d11b      	bne.n	8001c24 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001bec:	21fc      	movs	r1, #252	; 0xfc
 8001bee:	68b8      	ldr	r0, [r7, #8]
 8001bf0:	f7ff fd9a 	bl	8001728 <SD_TxDataBlock>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <SD_disk_write+0xd0>
        buff += 512;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c00:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ee      	bne.n	8001bec <SD_disk_write+0xac>
 8001c0e:	e000      	b.n	8001c12 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001c10:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001c12:	21fd      	movs	r1, #253	; 0xfd
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fd87 	bl	8001728 <SD_TxDataBlock>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <SD_disk_write+0xe4>
      {
        count = 1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001c24:	f7ff fc68 	bl	80014f8 <DESELECT>
  SPI_RxByte();
 8001c28:	f7ff fca6 	bl	8001578 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf14      	ite	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	2300      	moveq	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000148 	.word	0x20000148

08001c48 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b08b      	sub	sp, #44	; 0x2c
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	603a      	str	r2, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	460b      	mov	r3, r1
 8001c56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SD_disk_ioctl+0x1e>
 8001c62:	2304      	movs	r3, #4
 8001c64:	e115      	b.n	8001e92 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001c6c:	79bb      	ldrb	r3, [r7, #6]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d124      	bne.n	8001cbc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d012      	beq.n	8001ca0 <SD_disk_ioctl+0x58>
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	dc1a      	bgt.n	8001cb4 <SD_disk_ioctl+0x6c>
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <SD_disk_ioctl+0x40>
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d006      	beq.n	8001c94 <SD_disk_ioctl+0x4c>
 8001c86:	e015      	b.n	8001cb4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001c88:	f7ff fd02 	bl	8001690 <SD_PowerOff>
      res = RES_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c92:	e0fc      	b.n	8001e8e <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001c94:	f7ff fcba 	bl	800160c <SD_PowerOn>
      res = RES_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001c9e:	e0f6      	b.n	8001e8e <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	1c5c      	adds	r4, r3, #1
 8001ca4:	f7ff fd00 	bl	80016a8 <SD_CheckPower>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001cb2:	e0ec      	b.n	8001e8e <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cba:	e0e8      	b.n	8001e8e <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001cbc:	4b77      	ldr	r3, [pc, #476]	; (8001e9c <SD_disk_ioctl+0x254>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SD_disk_ioctl+0x86>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e0e1      	b.n	8001e92 <SD_disk_ioctl+0x24a>

    SELECT();
 8001cce:	f7ff fc07 	bl	80014e0 <SELECT>

    switch (ctrl)
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	2b0d      	cmp	r3, #13
 8001cd6:	f200 80cb 	bhi.w	8001e70 <SD_disk_ioctl+0x228>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <SD_disk_ioctl+0x98>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001ddb 	.word	0x08001ddb
 8001ce4:	08001d19 	.word	0x08001d19
 8001ce8:	08001dcb 	.word	0x08001dcb
 8001cec:	08001e71 	.word	0x08001e71
 8001cf0:	08001e71 	.word	0x08001e71
 8001cf4:	08001e71 	.word	0x08001e71
 8001cf8:	08001e71 	.word	0x08001e71
 8001cfc:	08001e71 	.word	0x08001e71
 8001d00:	08001e71 	.word	0x08001e71
 8001d04:	08001e71 	.word	0x08001e71
 8001d08:	08001e71 	.word	0x08001e71
 8001d0c:	08001ded 	.word	0x08001ded
 8001d10:	08001e11 	.word	0x08001e11
 8001d14:	08001e35 	.word	0x08001e35
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2049      	movs	r0, #73	; 0x49
 8001d1c:	f7ff fd47 	bl	80017ae <SD_SendCmd>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 80a8 	bne.w	8001e78 <SD_disk_ioctl+0x230>
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	2110      	movs	r1, #16
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fcc6 	bl	80016c0 <SD_RxDataBlock>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 809e 	beq.w	8001e78 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001d3c:	7b3b      	ldrb	r3, [r7, #12]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001d46:	7d7b      	ldrb	r3, [r7, #21]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	7d3b      	ldrb	r3, [r7, #20]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001d5a:	8bfb      	ldrh	r3, [r7, #30]
 8001d5c:	029a      	lsls	r2, r3, #10
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e02e      	b.n	8001dc2 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001d64:	7c7b      	ldrb	r3, [r7, #17]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	7dbb      	ldrb	r3, [r7, #22]
 8001d6e:	09db      	lsrs	r3, r3, #7
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	7d7b      	ldrb	r3, [r7, #21]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f003 0306 	and.w	r3, r3, #6
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	3302      	adds	r3, #2
 8001d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001d8c:	7d3b      	ldrb	r3, [r7, #20]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	7cfb      	ldrb	r3, [r7, #19]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	7cbb      	ldrb	r3, [r7, #18]
 8001da2:	029b      	lsls	r3, r3, #10
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001db4:	8bfa      	ldrh	r2, [r7, #30]
 8001db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001dba:	3b09      	subs	r3, #9
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001dc8:	e056      	b.n	8001e78 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001dd8:	e055      	b.n	8001e86 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001dda:	f7ff fbf7 	bl	80015cc <SD_ReadyWait>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2bff      	cmp	r3, #255	; 0xff
 8001de2:	d14b      	bne.n	8001e7c <SD_disk_ioctl+0x234>
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001dea:	e047      	b.n	8001e7c <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001dec:	2100      	movs	r1, #0
 8001dee:	2049      	movs	r0, #73	; 0x49
 8001df0:	f7ff fcdd 	bl	80017ae <SD_SendCmd>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d142      	bne.n	8001e80 <SD_disk_ioctl+0x238>
 8001dfa:	2110      	movs	r1, #16
 8001dfc:	6a38      	ldr	r0, [r7, #32]
 8001dfe:	f7ff fc5f 	bl	80016c0 <SD_RxDataBlock>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d03b      	beq.n	8001e80 <SD_disk_ioctl+0x238>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e0e:	e037      	b.n	8001e80 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001e10:	2100      	movs	r1, #0
 8001e12:	204a      	movs	r0, #74	; 0x4a
 8001e14:	f7ff fccb 	bl	80017ae <SD_SendCmd>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d132      	bne.n	8001e84 <SD_disk_ioctl+0x23c>
 8001e1e:	2110      	movs	r1, #16
 8001e20:	6a38      	ldr	r0, [r7, #32]
 8001e22:	f7ff fc4d 	bl	80016c0 <SD_RxDataBlock>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d02b      	beq.n	8001e84 <SD_disk_ioctl+0x23c>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e32:	e027      	b.n	8001e84 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001e34:	2100      	movs	r1, #0
 8001e36:	207a      	movs	r0, #122	; 0x7a
 8001e38:	f7ff fcb9 	bl	80017ae <SD_SendCmd>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e48:	e00b      	b.n	8001e62 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001e4a:	6a3c      	ldr	r4, [r7, #32]
 8001e4c:	1c63      	adds	r3, r4, #1
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	f7ff fb92 	bl	8001578 <SPI_RxByte>
 8001e54:	4603      	mov	r3, r0
 8001e56:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001e58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001e62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d9ef      	bls.n	8001e4a <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001e70:	2304      	movs	r3, #4
 8001e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e76:	e006      	b.n	8001e86 <SD_disk_ioctl+0x23e>
      break;
 8001e78:	bf00      	nop
 8001e7a:	e004      	b.n	8001e86 <SD_disk_ioctl+0x23e>
      break;
 8001e7c:	bf00      	nop
 8001e7e:	e002      	b.n	8001e86 <SD_disk_ioctl+0x23e>
      break;
 8001e80:	bf00      	nop
 8001e82:	e000      	b.n	8001e86 <SD_disk_ioctl+0x23e>
      break;
 8001e84:	bf00      	nop
    }

    DESELECT();
 8001e86:	f7ff fb37 	bl	80014f8 <DESELECT>
    SPI_RxByte();
 8001e8a:	f7ff fb75 	bl	8001578 <SPI_RxByte>
  }

  return res;
 8001e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	372c      	adds	r7, #44	; 0x2c
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	int stackoverflow = 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b5b0      	push	{r4, r5, r7, lr}
 8001ebe:	b0a0      	sub	sp, #128	; 0x80
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec2:	f001 fe2f 	bl	8003b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec6:	f000 f903 	bl	80020d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eca:	f000 fa4d 	bl	8002368 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ece:	f000 fa1b 	bl	8002308 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8001ed2:	f000 f965 	bl	80021a0 <MX_CAN_Init>
  MX_FATFS_Init();
 8001ed6:	f006 fcbb 	bl	8008850 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001eda:	f000 f9d7 	bl	800228c <MX_SPI1_Init>
  MX_I2C3_Init();
 8001ede:	f000 f997 	bl	8002210 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  myprintf("------- CAN Captain Controller ----------\r\n");
 8001ee2:	4865      	ldr	r0, [pc, #404]	; (8002078 <main+0x1bc>)
 8001ee4:	f000 fa96 	bl	8002414 <myprintf>

  canfil.FilterBank = 0;
 8001ee8:	4b64      	ldr	r3, [pc, #400]	; (800207c <main+0x1c0>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <main+0x1c0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001ef4:	4b61      	ldr	r3, [pc, #388]	; (800207c <main+0x1c0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <main+0x1c0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <main+0x1c0>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <main+0x1c0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8001f0c:	4b5b      	ldr	r3, [pc, #364]	; (800207c <main+0x1c0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f12:	4b5a      	ldr	r3, [pc, #360]	; (800207c <main+0x1c0>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8001f18:	4b58      	ldr	r3, [pc, #352]	; (800207c <main+0x1c0>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 8001f1e:	4b57      	ldr	r3, [pc, #348]	; (800207c <main+0x1c0>)
 8001f20:	220e      	movs	r2, #14
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan,&canfil) != HAL_OK){
 8001f24:	4955      	ldr	r1, [pc, #340]	; (800207c <main+0x1c0>)
 8001f26:	4856      	ldr	r0, [pc, #344]	; (8002080 <main+0x1c4>)
 8001f28:	f001 ff2d 	bl	8003d86 <HAL_CAN_ConfigFilter>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <main+0x7a>
	Error_Handler();
 8001f32:	f000 ffed 	bl	8002f10 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan) != HAL_OK){
 8001f36:	4852      	ldr	r0, [pc, #328]	; (8002080 <main+0x1c4>)
 8001f38:	f001 ffef 	bl	8003f1a <HAL_CAN_Start>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <main+0x8a>
	Error_Handler();
 8001f42:	f000 ffe5 	bl	8002f10 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8001f46:	2102      	movs	r1, #2
 8001f48:	484d      	ldr	r0, [pc, #308]	; (8002080 <main+0x1c4>)
 8001f4a:	f002 fa74 	bl	8004436 <HAL_CAN_ActivateNotification>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <main+0x9c>
	Error_Handler();
 8001f54:	f000 ffdc 	bl	8002f10 <Error_Handler>
  }


  myprintf("SD Card Connecting\r\n");
 8001f58:	484a      	ldr	r0, [pc, #296]	; (8002084 <main+0x1c8>)
 8001f5a:	f000 fa5b 	bl	8002414 <myprintf>
  fres = f_mount(&FatFs, "0", 1);    //1=mount now
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4949      	ldr	r1, [pc, #292]	; (8002088 <main+0x1cc>)
 8001f62:	484a      	ldr	r0, [pc, #296]	; (800208c <main+0x1d0>)
 8001f64:	f008 fe1e 	bl	800aba4 <f_mount>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <main+0x1d4>)
 8001f6e:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8001f70:	4b47      	ldr	r3, [pc, #284]	; (8002090 <main+0x1d4>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <main+0xca>
  {
  myprintf("No SD Card found : (%i)\r\n", fres);
 8001f78:	4b45      	ldr	r3, [pc, #276]	; (8002090 <main+0x1d4>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4845      	ldr	r0, [pc, #276]	; (8002094 <main+0x1d8>)
 8001f80:	f000 fa48 	bl	8002414 <myprintf>
 8001f84:	e002      	b.n	8001f8c <main+0xd0>
  }
  else {
  myprintf("SD Card Mounted Successfully!!!\r\n");
 8001f86:	4844      	ldr	r0, [pc, #272]	; (8002098 <main+0x1dc>)
 8001f88:	f000 fa44 	bl	8002414 <myprintf>
  }
  f_mount(NULL, "0", 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	493e      	ldr	r1, [pc, #248]	; (8002088 <main+0x1cc>)
 8001f90:	2000      	movs	r0, #0
 8001f92:	f008 fe07 	bl	800aba4 <f_mount>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of canTelemetryMutex */
  osMutexDef(canTelemetryMutex);
 8001f96:	2300      	movs	r3, #0
 8001f98:	67fb      	str	r3, [r7, #124]	; 0x7c
  canTelemetryMutexHandle = osMutexCreate(osMutex(canTelemetryMutex));
 8001f9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00a fd3f 	bl	800ca22 <osMutexCreate>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	; (800209c <main+0x1e0>)
 8001fa8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <main+0x1e4>)
 8001fac:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001fb0:	461d      	mov	r5, r3
 8001fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00a fcf3 	bl	800c9ac <osThreadCreate>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a36      	ldr	r2, [pc, #216]	; (80020a4 <main+0x1e8>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDCardSaveTask */
  osThreadDef(SDCardSaveTask, StartSDCardSaveTask, osPriorityHigh, 0, 256);
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <main+0x1ec>)
 8001fce:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	6023      	str	r3, [r4, #0]
  SDCardSaveTaskHandle = osThreadCreate(osThread(SDCardSaveTask), NULL);
 8001fdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f00a fce2 	bl	800c9ac <osThreadCreate>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4a30      	ldr	r2, [pc, #192]	; (80020ac <main+0x1f0>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData1 */
  osThreadDef(GetData1, StartGetData1, osPriorityBelowNormal, 0, 256);
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <main+0x1f4>)
 8001ff0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffa:	682b      	ldr	r3, [r5, #0]
 8001ffc:	6023      	str	r3, [r4, #0]
  GetData1Handle = osThreadCreate(osThread(GetData1), NULL);
 8001ffe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f00a fcd1 	bl	800c9ac <osThreadCreate>
 800200a:	4603      	mov	r3, r0
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <main+0x1f8>)
 800200e:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData2 */
  osThreadDef(GetData2, StartGetData2, osPriorityBelowNormal, 0, 128);
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <main+0x1fc>)
 8002012:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002016:	461d      	mov	r5, r3
 8002018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	6023      	str	r3, [r4, #0]
  GetData2Handle = osThreadCreate(osThread(GetData2), NULL);
 8002020:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f00a fcc0 	bl	800c9ac <osThreadCreate>
 800202c:	4603      	mov	r3, r0
 800202e:	4a23      	ldr	r2, [pc, #140]	; (80020bc <main+0x200>)
 8002030:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadCAN */
  osThreadDef(ReadCAN, StartReadCAN, osPriorityNormal, 0, 128);
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <main+0x204>)
 8002034:	f107 0418 	add.w	r4, r7, #24
 8002038:	461d      	mov	r5, r3
 800203a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203e:	682b      	ldr	r3, [r5, #0]
 8002040:	6023      	str	r3, [r4, #0]
  ReadCANHandle = osThreadCreate(osThread(ReadCAN), NULL);
 8002042:	f107 0318 	add.w	r3, r7, #24
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f00a fcaf 	bl	800c9ac <osThreadCreate>
 800204e:	4603      	mov	r3, r0
 8002050:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <main+0x208>)
 8002052:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetAccelTask */
  osThreadDef(GetAccelTask, StartGetAccelTask, osPriorityBelowNormal, 0, 256);
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <main+0x20c>)
 8002056:	1d3c      	adds	r4, r7, #4
 8002058:	461d      	mov	r5, r3
 800205a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800205c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205e:	682b      	ldr	r3, [r5, #0]
 8002060:	6023      	str	r3, [r4, #0]
  GetAccelTaskHandle = osThreadCreate(osThread(GetAccelTask), NULL);
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f00a fca0 	bl	800c9ac <osThreadCreate>
 800206c:	4603      	mov	r3, r0
 800206e:	4a17      	ldr	r2, [pc, #92]	; (80020cc <main+0x210>)
 8002070:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002072:	f00a fc94 	bl	800c99e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002076:	e7fe      	b.n	8002076 <main+0x1ba>
 8002078:	08010578 	.word	0x08010578
 800207c:	200023b8 	.word	0x200023b8
 8002080:	2000014c 	.word	0x2000014c
 8002084:	080105a4 	.word	0x080105a4
 8002088:	080105bc 	.word	0x080105bc
 800208c:	20000320 	.word	0x20000320
 8002090:	20002384 	.word	0x20002384
 8002094:	080105c0 	.word	0x080105c0
 8002098:	080105dc 	.word	0x080105dc
 800209c:	200002c0 	.word	0x200002c0
 80020a0:	08010600 	.word	0x08010600
 80020a4:	200002a8 	.word	0x200002a8
 80020a8:	08010614 	.word	0x08010614
 80020ac:	200002ac 	.word	0x200002ac
 80020b0:	08010628 	.word	0x08010628
 80020b4:	200002b0 	.word	0x200002b0
 80020b8:	0801063c 	.word	0x0801063c
 80020bc:	200002b4 	.word	0x200002b4
 80020c0:	08010650 	.word	0x08010650
 80020c4:	200002b8 	.word	0x200002b8
 80020c8:	08010664 	.word	0x08010664
 80020cc:	200002bc 	.word	0x200002bc

080020d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b0a6      	sub	sp, #152	; 0x98
 80020d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020da:	2228      	movs	r2, #40	; 0x28
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f00d f99e 	bl	800f420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2258      	movs	r2, #88	; 0x58
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00d f990 	bl	800f420 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002100:	2303      	movs	r3, #3
 8002102:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002108:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800210a:	2301      	movs	r3, #1
 800210c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800210e:	2310      	movs	r3, #16
 8002110:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002114:	2302      	movs	r3, #2
 8002116:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800211a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800211e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002122:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002130:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002134:	4618      	mov	r0, r3
 8002136:	f003 f9ab 	bl	8005490 <HAL_RCC_OscConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002140:	f000 fee6 	bl	8002f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002144:	230f      	movs	r3, #15
 8002146:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002148:	2302      	movs	r3, #2
 800214a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800214c:	2300      	movs	r3, #0
 800214e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002154:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002156:	2300      	movs	r3, #0
 8002158:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800215a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800215e:	2102      	movs	r1, #2
 8002160:	4618      	mov	r0, r3
 8002162:	f004 f9e9 	bl	8006538 <HAL_RCC_ClockConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800216c:	f000 fed0 	bl	8002f10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C3;
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <SystemClock_Config+0xcc>)
 8002172:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fc7a 	bl	8006a78 <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800218a:	f000 fec1 	bl	8002f10 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800218e:	f004 fb4f 	bl	8006830 <HAL_RCC_EnableCSS>
}
 8002192:	bf00      	nop
 8002194:	3798      	adds	r7, #152	; 0x98
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	00040002 	.word	0x00040002

080021a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <MX_CAN_Init+0x68>)
 80021a6:	4a19      	ldr	r2, [pc, #100]	; (800220c <MX_CAN_Init+0x6c>)
 80021a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <MX_CAN_Init+0x68>)
 80021ac:	2208      	movs	r2, #8
 80021ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <MX_CAN_Init+0x68>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_CAN_Init+0x68>)
 80021b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021bc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_CAN_Init+0x68>)
 80021c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021c4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <MX_CAN_Init+0x68>)
 80021c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021cc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_CAN_Init+0x68>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_CAN_Init+0x68>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <MX_CAN_Init+0x68>)
 80021dc:	2200      	movs	r2, #0
 80021de:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_CAN_Init+0x68>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <MX_CAN_Init+0x68>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_CAN_Init+0x68>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_CAN_Init+0x68>)
 80021f4:	f001 fccc 	bl	8003b90 <HAL_CAN_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80021fe:	f000 fe87 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	2000014c 	.word	0x2000014c
 800220c:	40006400 	.word	0x40006400

08002210 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_I2C3_Init+0x74>)
 8002216:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <MX_I2C3_Init+0x78>)
 8002218:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0000020B;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <MX_I2C3_Init+0x74>)
 800221c:	f240 220b 	movw	r2, #523	; 0x20b
 8002220:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <MX_I2C3_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_I2C3_Init+0x74>)
 800222a:	2201      	movs	r2, #1
 800222c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <MX_I2C3_Init+0x74>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <MX_I2C3_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <MX_I2C3_Init+0x74>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_I2C3_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_I2C3_Init+0x74>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800224c:	480d      	ldr	r0, [pc, #52]	; (8002284 <MX_I2C3_Init+0x74>)
 800224e:	f002 fb9d 	bl	800498c <HAL_I2C_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002258:	f000 fe5a 	bl	8002f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <MX_I2C3_Init+0x74>)
 8002260:	f003 f87e 	bl	8005360 <HAL_I2CEx_ConfigAnalogFilter>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800226a:	f000 fe51 	bl	8002f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800226e:	2100      	movs	r1, #0
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <MX_I2C3_Init+0x74>)
 8002272:	f003 f8c0 	bl	80053f6 <HAL_I2CEx_ConfigDigitalFilter>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800227c:	f000 fe48 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000174 	.word	0x20000174
 8002288:	40007800 	.word	0x40007800

0800228c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <MX_SPI1_Init+0x74>)
 8002292:	4a1c      	ldr	r2, [pc, #112]	; (8002304 <MX_SPI1_Init+0x78>)
 8002294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <MX_SPI1_Init+0x74>)
 8002298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800229c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800229e:	4b18      	ldr	r3, [pc, #96]	; (8002300 <MX_SPI1_Init+0x74>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <MX_SPI1_Init+0x74>)
 80022a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <MX_SPI1_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <MX_SPI1_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <MX_SPI1_Init+0x74>)
 80022ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_SPI1_Init+0x74>)
 80022c2:	2210      	movs	r2, #16
 80022c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <MX_SPI1_Init+0x74>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <MX_SPI1_Init+0x74>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <MX_SPI1_Init+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <MX_SPI1_Init+0x74>)
 80022da:	2207      	movs	r2, #7
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <MX_SPI1_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <MX_SPI1_Init+0x74>)
 80022e6:	2208      	movs	r2, #8
 80022e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022ea:	4805      	ldr	r0, [pc, #20]	; (8002300 <MX_SPI1_Init+0x74>)
 80022ec:	f004 fde2 	bl	8006eb4 <HAL_SPI_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022f6:	f000 fe0b 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200001c0 	.word	0x200001c0
 8002304:	40013000 	.word	0x40013000

08002308 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800230c:	4b14      	ldr	r3, [pc, #80]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800230e:	4a15      	ldr	r2, [pc, #84]	; (8002364 <MX_USART2_UART_Init+0x5c>)
 8002310:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002314:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002318:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_USART2_UART_Init+0x58>)
 8002346:	2200      	movs	r2, #0
 8002348:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <MX_USART2_UART_Init+0x58>)
 800234c:	f005 fe18 	bl	8007f80 <HAL_UART_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002356:	f000 fddb 	bl	8002f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000224 	.word	0x20000224
 8002364:	40004400 	.word	0x40004400

08002368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <MX_GPIO_Init+0xa4>)
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	4a22      	ldr	r2, [pc, #136]	; (800240c <MX_GPIO_Init+0xa4>)
 8002384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002388:	6153      	str	r3, [r2, #20]
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <MX_GPIO_Init+0xa4>)
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_GPIO_Init+0xa4>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <MX_GPIO_Init+0xa4>)
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	6153      	str	r3, [r2, #20]
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_GPIO_Init+0xa4>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_GPIO_Init+0xa4>)
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	4a16      	ldr	r2, [pc, #88]	; (800240c <MX_GPIO_Init+0xa4>)
 80023b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023b8:	6153      	str	r3, [r2, #20]
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <MX_GPIO_Init+0xa4>)
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_GPIO_Init+0xa4>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <MX_GPIO_Init+0xa4>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d0:	6153      	str	r3, [r2, #20]
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_GPIO_Init+0xa4>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	480b      	ldr	r0, [pc, #44]	; (8002410 <MX_GPIO_Init+0xa8>)
 80023e4:	f002 faba 	bl	800495c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SP1_CS_Pin */
  GPIO_InitStruct.Pin = SP1_CS_Pin;
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SP1_CS_GPIO_Port, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	4804      	ldr	r0, [pc, #16]	; (8002410 <MX_GPIO_Init+0xa8>)
 8002400:	f002 f922 	bl	8004648 <HAL_GPIO_Init>

}
 8002404:	bf00      	nop
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	48000400 	.word	0x48000400

08002414 <myprintf>:
/* USER CODE BEGIN 4 */

int dataShift = 10;
int dataPacket = 1;

void myprintf(const char *fmt, ...) {
 8002414:	b40f      	push	{r0, r1, r2, r3}
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0

	char *buffer = malloc(100);
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	f00c ffe1 	bl	800f3e4 <malloc>
 8002422:	4603      	mov	r3, r0
 8002424:	60fb      	str	r3, [r7, #12]

	va_list args;
	va_start(args, fmt);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, 100, fmt, args);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	2164      	movs	r1, #100	; 0x64
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f00d f9be 	bl	800f7b4 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7fd fed1 	bl	80001e0 <strlen>
 800243e:	4603      	mov	r3, r0
 8002440:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	b29a      	uxth	r2, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244a:	68f9      	ldr	r1, [r7, #12]
 800244c:	4806      	ldr	r0, [pc, #24]	; (8002468 <myprintf+0x54>)
 800244e:	f005 fde5 	bl	800801c <HAL_UART_Transmit>
	free(buffer);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f00c ffce 	bl	800f3f4 <free>
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002462:	b004      	add	sp, #16
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000224 	.word	0x20000224

0800246c <printCANMessage>:
    char* str = malloc(len + 1);
    snprintf(str, len + 1, "%.10d", num);
    return str;
}

void printCANMessage(CAN_RxHeaderTypeDef Header, uint8_t data[]){
 800246c:	b084      	sub	sp, #16
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	f107 0c20 	add.w	ip, r7, #32
 8002478:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char dataStr[20];
	myprintf("canMsg = 0x%lx %li", Header.StdId, Header.DLC);
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002480:	4619      	mov	r1, r3
 8002482:	4810      	ldr	r0, [pc, #64]	; (80024c4 <printCANMessage+0x58>)
 8002484:	f7ff ffc6 	bl	8002414 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e00c      	b.n	80024a8 <printCANMessage+0x3c>
		myprintf(dataStr, " %x", data[i]);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002492:	4413      	add	r3, r2
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	463b      	mov	r3, r7
 800249a:	490b      	ldr	r1, [pc, #44]	; (80024c8 <printCANMessage+0x5c>)
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ffb9 	bl	8002414 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d8ee      	bhi.n	800248e <printCANMessage+0x22>
	}
	myprintf("\r\n");
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <printCANMessage+0x60>)
 80024b2:	f7ff ffaf 	bl	8002414 <myprintf>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024c0:	b004      	add	sp, #16
 80024c2:	4770      	bx	lr
 80024c4:	08010680 	.word	0x08010680
 80024c8:	08010694 	.word	0x08010694
 80024cc:	08010698 	.word	0x08010698

080024d0 <print_buffer>:

void print_buffer(CSV_BUFFER *buffer){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	6078      	str	r0, [r7, #4]
	int i, j;
	myprintf("\n");
 80024d8:	481f      	ldr	r0, [pc, #124]	; (8002558 <print_buffer+0x88>)
 80024da:	f7ff ff9b 	bl	8002414 <myprintf>
	for (i = 0; i < buffer->rows; i++) {
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e02c      	b.n	800253e <print_buffer+0x6e>
		for (j = 0; j < buffer->width[i]; j++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	e01a      	b.n	8002520 <print_buffer+0x50>
			myprintf("%c%s%c%c", buffer->text_delim, buffer->field[i][j]->text, buffer->text_delim, buffer->field_delim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7b5b      	ldrb	r3, [r3, #13]
 80024ee:	4619      	mov	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7b5b      	ldrb	r3, [r3, #13]
 800250a:	4618      	mov	r0, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7b1b      	ldrb	r3, [r3, #12]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	4603      	mov	r3, r0
 8002514:	4811      	ldr	r0, [pc, #68]	; (800255c <print_buffer+0x8c>)
 8002516:	f7ff ff7d 	bl	8002414 <myprintf>
		for (j = 0; j < buffer->width[i]; j++) {
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	d8db      	bhi.n	80024ea <print_buffer+0x1a>
		}
		myprintf("\r\n");
 8002532:	480b      	ldr	r0, [pc, #44]	; (8002560 <print_buffer+0x90>)
 8002534:	f7ff ff6e 	bl	8002414 <myprintf>
	for (i = 0; i < buffer->rows; i++) {
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8cd      	bhi.n	80024e4 <print_buffer+0x14>
	}
	myprintf("\r\n");
 8002548:	4805      	ldr	r0, [pc, #20]	; (8002560 <print_buffer+0x90>)
 800254a:	f7ff ff63 	bl	8002414 <myprintf>
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	0801069c 	.word	0x0801069c
 800255c:	080106a0 	.word	0x080106a0
 8002560:	08010698 	.word	0x08010698

08002564 <ftstr>:

// float to string
void ftstr(char* str, float num) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	ed87 0a00 	vstr	s0, [r7]
	int whole = (int)num;
 8002570:	edd7 7a00 	vldr	s15, [r7]
 8002574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002578:	ee17 3a90 	vmov	r3, s15
 800257c:	60bb      	str	r3, [r7, #8]
	int dec = (int)((num - whole) * 1000 + 0.5); // 3 decimal places
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002588:	ed97 7a00 	vldr	s14, [r7]
 800258c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002590:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80025e4 <ftstr+0x80>
 8002594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002598:	ee17 0a90 	vmov	r0, s15
 800259c:	f7fd ffdc 	bl	8000558 <__aeabi_f2d>
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <ftstr+0x84>)
 80025a6:	f7fd fe79 	bl	800029c <__adddf3>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4610      	mov	r0, r2
 80025b0:	4619      	mov	r1, r3
 80025b2:	f7fe fad9 	bl	8000b68 <__aeabi_d2iz>
 80025b6:	4603      	mov	r3, r0
 80025b8:	60fb      	str	r3, [r7, #12]
	if (dec < 0) {
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da02      	bge.n	80025c6 <ftstr+0x62>
	        dec = -dec;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	425b      	negs	r3, r3
 80025c4:	60fb      	str	r3, [r7, #12]
	    }
	if (whole < 99999){
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4a08      	ldr	r2, [pc, #32]	; (80025ec <ftstr+0x88>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	dc05      	bgt.n	80025da <ftstr+0x76>
		sprintf(str, "%d.%d", whole, dec);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	4907      	ldr	r1, [pc, #28]	; (80025f0 <ftstr+0x8c>)
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f00d f88d 	bl	800f6f4 <siprintf>
	}
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	447a0000 	.word	0x447a0000
 80025e8:	3fe00000 	.word	0x3fe00000
 80025ec:	0001869e 	.word	0x0001869e
 80025f0:	080106ac 	.word	0x080106ac

080025f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08c      	sub	sp, #48	; 0x30
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	CAN_TxHeaderTypeDef   TxHeader;

	// CAN default data
	TxHeader.StdId = 0x222;
 80025fc:	f240 2322 	movw	r3, #546	; 0x222
 8002600:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = 0x00;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.IDE = CAN_ID_STD;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 4;
 800260e:	2304      	movs	r3, #4
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t freeMailboxs;
	uint8_t data[10] = "bcad";
 8002618:	4a0c      	ldr	r2, [pc, #48]	; (800264c <StartDefaultTask+0x58>)
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002622:	6018      	str	r0, [r3, #0]
 8002624:	3304      	adds	r3, #4
 8002626:	7019      	strb	r1, [r3, #0]
 8002628:	f107 0311 	add.w	r3, r7, #17
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for(;;)
	{
		//myprintf(" -- STARTING thread DefaultTask -- \r\n");
		DefaultProfiler++;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <StartDefaultTask+0x5c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	4a05      	ldr	r2, [pc, #20]	; (8002650 <StartDefaultTask+0x5c>)
 800263a:	6013      	str	r3, [r2, #0]
//		myprintf("packet sent: %s\r\n", data);
//		myprintf("num free mailboxs: %i\r\n", freeMailboxs);
//		myprintf("text mailbox used: %ld\r\n", TxMailbox);

		//myprintf(" -- ENDING thread DefaultTask -- \r\n");
		osDelay(DefaultTask_delay);	// Task is put to sleep for 500ms
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <StartDefaultTask+0x60>)
 800263e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002642:	4618      	mov	r0, r3
 8002644:	f00a f9d9 	bl	800c9fa <osDelay>
		DefaultProfiler++;
 8002648:	e7f3      	b.n	8002632 <StartDefaultTask+0x3e>
 800264a:	bf00      	nop
 800264c:	080106b4 	.word	0x080106b4
 8002650:	20002388 	.word	0x20002388
 8002654:	20000002 	.word	0x20000002

08002658 <StartSDCardSaveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDCardSaveTask */
void StartSDCardSaveTask(void const * argument)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b092      	sub	sp, #72	; 0x48
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDCardSaveTask */
  uint16_t current_row = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint8_t file_number = 1;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  TCHAR file_path[30];
  char string_value[20] = {0};
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]

  sprintf(file_path, "0:/csv/test%hu.csv", file_number);
 800267e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002682:	f107 0320 	add.w	r3, r7, #32
 8002686:	495e      	ldr	r1, [pc, #376]	; (8002800 <StartSDCardSaveTask+0x1a8>)
 8002688:	4618      	mov	r0, r3
 800268a:	f00d f833 	bl	800f6f4 <siprintf>
  /* Infinite loop */
  for(;;)
  {
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 800268e:	485d      	ldr	r0, [pc, #372]	; (8002804 <StartSDCardSaveTask+0x1ac>)
 8002690:	f7ff fec0 	bl	8002414 <myprintf>

	myprintf("Mounting SD card\r\n");
 8002694:	485c      	ldr	r0, [pc, #368]	; (8002808 <StartSDCardSaveTask+0x1b0>)
 8002696:	f7ff febd 	bl	8002414 <myprintf>
		fres = f_mount(&FatFs, "0", 1);
 800269a:	2201      	movs	r2, #1
 800269c:	495b      	ldr	r1, [pc, #364]	; (800280c <StartSDCardSaveTask+0x1b4>)
 800269e:	485c      	ldr	r0, [pc, #368]	; (8002810 <StartSDCardSaveTask+0x1b8>)
 80026a0:	f008 fa80 	bl	800aba4 <f_mount>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b5a      	ldr	r3, [pc, #360]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 80026aa:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK){
 80026ac:	4b59      	ldr	r3, [pc, #356]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <StartSDCardSaveTask+0x6a>
			myprintf("f_mount problem: %d\r\n", fres);
 80026b4:	4b57      	ldr	r3, [pc, #348]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4857      	ldr	r0, [pc, #348]	; (8002818 <StartSDCardSaveTask+0x1c0>)
 80026bc:	f7ff feaa 	bl	8002414 <myprintf>
 80026c0:	e1ae      	b.n	8002a20 <StartSDCardSaveTask+0x3c8>
		}
		else if (file_number < 10){
 80026c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80026c6:	2b09      	cmp	r3, #9
 80026c8:	f200 81a7 	bhi.w	8002a1a <StartSDCardSaveTask+0x3c2>
			myprintf("SD Card Mounted!\r\n");
 80026cc:	4853      	ldr	r0, [pc, #332]	; (800281c <StartSDCardSaveTask+0x1c4>)
 80026ce:	f7ff fea1 	bl	8002414 <myprintf>

			if (current_row > 10 || file_number == 1){
 80026d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026d6:	2b0a      	cmp	r3, #10
 80026d8:	d803      	bhi.n	80026e2 <StartSDCardSaveTask+0x8a>
 80026da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d12f      	bne.n	8002742 <StartSDCardSaveTask+0xea>
				current_row = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				do {
					sprintf(file_path, "0:/csv/test%hu.csv", file_number);
 80026e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80026ec:	f107 0320 	add.w	r3, r7, #32
 80026f0:	4943      	ldr	r1, [pc, #268]	; (8002800 <StartSDCardSaveTask+0x1a8>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	f00c fffe 	bl	800f6f4 <siprintf>
					fres = f_stat(file_path, filInfo);
 80026f8:	4b49      	ldr	r3, [pc, #292]	; (8002820 <StartSDCardSaveTask+0x1c8>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f107 0320 	add.w	r3, r7, #32
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f009 ff1c 	bl	800c540 <f_stat>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	4b41      	ldr	r3, [pc, #260]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 800270e:	701a      	strb	r2, [r3, #0]
					file_number++;
 8002710:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002714:	3301      	adds	r3, #1
 8002716:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					if (fres != FR_OK) break;
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10e      	bne.n	8002740 <StartSDCardSaveTask+0xe8>
					myprintf("filepath exists: %s\r\n",file_path);
 8002722:	f107 0320 	add.w	r3, r7, #32
 8002726:	4619      	mov	r1, r3
 8002728:	483e      	ldr	r0, [pc, #248]	; (8002824 <StartSDCardSaveTask+0x1cc>)
 800272a:	f7ff fe73 	bl	8002414 <myprintf>
				} while(fres != FR_NO_FILE && !OVERWRITE);
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b04      	cmp	r3, #4
 8002734:	d005      	beq.n	8002742 <StartSDCardSaveTask+0xea>
 8002736:	4b3c      	ldr	r3, [pc, #240]	; (8002828 <StartSDCardSaveTask+0x1d0>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0d4      	beq.n	80026e8 <StartSDCardSaveTask+0x90>
 800273e:	e000      	b.n	8002742 <StartSDCardSaveTask+0xea>
					if (fres != FR_OK) break;
 8002740:	bf00      	nop
			}

			myprintf("using filepath: %s\r\n",file_path);
 8002742:	f107 0320 	add.w	r3, r7, #32
 8002746:	4619      	mov	r1, r3
 8002748:	4838      	ldr	r0, [pc, #224]	; (800282c <StartSDCardSaveTask+0x1d4>)
 800274a:	f7ff fe63 	bl	8002414 <myprintf>

			// read file, else if doesnt exist create new file
			fres = f_open(&rwfile, file_path, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800274e:	f107 0320 	add.w	r3, r7, #32
 8002752:	2213      	movs	r2, #19
 8002754:	4619      	mov	r1, r3
 8002756:	4836      	ldr	r0, [pc, #216]	; (8002830 <StartSDCardSaveTask+0x1d8>)
 8002758:	f008 fa90 	bl	800ac7c <f_open>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 8002762:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK)
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <StartSDCardSaveTask+0x122>
			{
				myprintf("f_open problem: %d\r\n", fres);
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <StartSDCardSaveTask+0x1bc>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	4830      	ldr	r0, [pc, #192]	; (8002834 <StartSDCardSaveTask+0x1dc>)
 8002774:	f7ff fe4e 	bl	8002414 <myprintf>
 8002778:	e152      	b.n	8002a20 <StartSDCardSaveTask+0x3c8>
			}
			else{
				myprintf("Creating buffer\r\n");
 800277a:	482f      	ldr	r0, [pc, #188]	; (8002838 <StartSDCardSaveTask+0x1e0>)
 800277c:	f7ff fe4a 	bl	8002414 <myprintf>
				CSV_BUFFER *buffer = csv_create_buffer();
 8002780:	f7fe fcaa 	bl	80010d8 <csv_create_buffer>
 8002784:	6438      	str	r0, [r7, #64]	; 0x40

				if (current_row == 0){
 8002786:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800278a:	2b00      	cmp	r3, #0
 800278c:	d168      	bne.n	8002860 <StartSDCardSaveTask+0x208>
					// first write to the file requires the data headings to be defined
					myprintf("Writing data headings \r\n");
 800278e:	482b      	ldr	r0, [pc, #172]	; (800283c <StartSDCardSaveTask+0x1e4>)
 8002790:	f7ff fe40 	bl	8002414 <myprintf>
					csv_set_field(buffer, 0, 0, "Time (ms)");
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <StartSDCardSaveTask+0x1e8>)
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800279c:	f7fe fe6a 	bl	8001474 <csv_set_field>
					csv_set_field(buffer, 0, 1, "Accel x (m/s2)");
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <StartSDCardSaveTask+0x1ec>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	2100      	movs	r1, #0
 80027a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027a8:	f7fe fe64 	bl	8001474 <csv_set_field>
					csv_set_field(buffer, 0, 2, "Accel y (m/s2)");
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <StartSDCardSaveTask+0x1f0>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	2100      	movs	r1, #0
 80027b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027b4:	f7fe fe5e 	bl	8001474 <csv_set_field>
					csv_set_field(buffer, 0, 3, "Accel z (m/s2)");
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <StartSDCardSaveTask+0x1f4>)
 80027ba:	2203      	movs	r2, #3
 80027bc:	2100      	movs	r1, #0
 80027be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027c0:	f7fe fe58 	bl	8001474 <csv_set_field>
					csv_set_field(buffer, 0, 4, "Roll x (m/s2)");
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <StartSDCardSaveTask+0x1f8>)
 80027c6:	2204      	movs	r2, #4
 80027c8:	2100      	movs	r1, #0
 80027ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027cc:	f7fe fe52 	bl	8001474 <csv_set_field>
					csv_set_field(buffer, 0, 5, "Roll y (m/s2)");
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <StartSDCardSaveTask+0x1fc>)
 80027d2:	2205      	movs	r2, #5
 80027d4:	2100      	movs	r1, #0
 80027d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027d8:	f7fe fe4c 	bl	8001474 <csv_set_field>
					csv_set_field(buffer, 0, 6, "Roll z (m/s2)");
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <StartSDCardSaveTask+0x200>)
 80027de:	2206      	movs	r2, #6
 80027e0:	2100      	movs	r1, #0
 80027e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027e4:	f7fe fe46 	bl	8001474 <csv_set_field>
					csv_set_field(buffer, 0, 7, "Temp (C)\r");
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <StartSDCardSaveTask+0x204>)
 80027ea:	2207      	movs	r2, #7
 80027ec:	2100      	movs	r1, #0
 80027ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027f0:	f7fe fe40 	bl	8001474 <csv_set_field>
					current_row++;
 80027f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80027f8:	3301      	adds	r3, #1
 80027fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80027fe:	e036      	b.n	800286e <StartSDCardSaveTask+0x216>
 8002800:	080106c0 	.word	0x080106c0
 8002804:	080106d4 	.word	0x080106d4
 8002808:	080106fc 	.word	0x080106fc
 800280c:	080105bc 	.word	0x080105bc
 8002810:	20000320 	.word	0x20000320
 8002814:	20002384 	.word	0x20002384
 8002818:	08010710 	.word	0x08010710
 800281c:	08010728 	.word	0x08010728
 8002820:	20002380 	.word	0x20002380
 8002824:	0801073c 	.word	0x0801073c
 8002828:	20000001 	.word	0x20000001
 800282c:	08010754 	.word	0x08010754
 8002830:	20001354 	.word	0x20001354
 8002834:	0801076c 	.word	0x0801076c
 8002838:	08010784 	.word	0x08010784
 800283c:	08010798 	.word	0x08010798
 8002840:	080107b4 	.word	0x080107b4
 8002844:	080107c0 	.word	0x080107c0
 8002848:	080107d0 	.word	0x080107d0
 800284c:	080107e0 	.word	0x080107e0
 8002850:	080107f0 	.word	0x080107f0
 8002854:	08010800 	.word	0x08010800
 8002858:	08010810 	.word	0x08010810
 800285c:	08010820 	.word	0x08010820
				}
				else{
					myprintf("Loading csv\r\n");
 8002860:	487d      	ldr	r0, [pc, #500]	; (8002a58 <StartSDCardSaveTask+0x400>)
 8002862:	f7ff fdd7 	bl	8002414 <myprintf>
					csv_load(buffer, &rwfile);
 8002866:	497d      	ldr	r1, [pc, #500]	; (8002a5c <StartSDCardSaveTask+0x404>)
 8002868:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800286a:	f7fe fca8 	bl	80011be <csv_load>
				}

				myprintf("editing csv\r\n");
 800286e:	487c      	ldr	r0, [pc, #496]	; (8002a60 <StartSDCardSaveTask+0x408>)
 8002870:	f7ff fdd0 	bl	8002414 <myprintf>
				// add a row of measurement values
				if(accel_data_collected){			// set MPU6050 values
 8002874:	4b7b      	ldr	r3, [pc, #492]	; (8002a64 <StartSDCardSaveTask+0x40c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80bb 	beq.w	80029f4 <StartSDCardSaveTask+0x39c>
					memset(string_value, 0, sizeof(string_value));
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	2214      	movs	r2, #20
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f00c fdca 	bl	800f420 <memset>
					sprintf(string_value, "%li", accel_data_time);
 800288c:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <StartSDCardSaveTask+0x410>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	4975      	ldr	r1, [pc, #468]	; (8002a6c <StartSDCardSaveTask+0x414>)
 8002896:	4618      	mov	r0, r3
 8002898:	f00c ff2c 	bl	800f6f4 <siprintf>
					csv_set_field(buffer, current_row, 0, string_value);
 800289c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	2200      	movs	r2, #0
 80028a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028a8:	f7fe fde4 	bl	8001474 <csv_set_field>
					memset(string_value, 0, sizeof(string_value));
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	2214      	movs	r2, #20
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00c fdb3 	bl	800f420 <memset>
					ftstr(string_value, Ax);
 80028ba:	4b6d      	ldr	r3, [pc, #436]	; (8002a70 <StartSDCardSaveTask+0x418>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	eeb0 0a67 	vmov.f32	s0, s15
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fe4b 	bl	8002564 <ftstr>
					csv_set_field(buffer, current_row, 1, string_value);
 80028ce:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80028d2:	f107 030c 	add.w	r3, r7, #12
 80028d6:	2201      	movs	r2, #1
 80028d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028da:	f7fe fdcb 	bl	8001474 <csv_set_field>
					memset(string_value, 0, sizeof(string_value));
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	2214      	movs	r2, #20
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f00c fd9a 	bl	800f420 <memset>
					ftstr(string_value, Ay);
 80028ec:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <StartSDCardSaveTask+0x41c>)
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	f107 030c 	add.w	r3, r7, #12
 80028f6:	eeb0 0a67 	vmov.f32	s0, s15
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fe32 	bl	8002564 <ftstr>
					csv_set_field(buffer, current_row, 2, string_value);
 8002900:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	2202      	movs	r2, #2
 800290a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800290c:	f7fe fdb2 	bl	8001474 <csv_set_field>
					memset(string_value, 0, sizeof(string_value));
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	2214      	movs	r2, #20
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f00c fd81 	bl	800f420 <memset>
					ftstr(string_value, Az);
 800291e:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <StartSDCardSaveTask+0x420>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	eeb0 0a67 	vmov.f32	s0, s15
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fe19 	bl	8002564 <ftstr>
					csv_set_field(buffer, current_row, 3, string_value);
 8002932:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	2203      	movs	r2, #3
 800293c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800293e:	f7fe fd99 	bl	8001474 <csv_set_field>
					memset(string_value, 0, sizeof(string_value));
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	2214      	movs	r2, #20
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f00c fd68 	bl	800f420 <memset>
					ftstr(string_value, Gx);
 8002950:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <StartSDCardSaveTask+0x424>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe00 	bl	8002564 <ftstr>
					csv_set_field(buffer, current_row, 4, string_value);
 8002964:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	2204      	movs	r2, #4
 800296e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002970:	f7fe fd80 	bl	8001474 <csv_set_field>
					memset(string_value, 0, sizeof(string_value));
 8002974:	f107 030c 	add.w	r3, r7, #12
 8002978:	2214      	movs	r2, #20
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f00c fd4f 	bl	800f420 <memset>
					ftstr(string_value, Gy);
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <StartSDCardSaveTask+0x428>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	eeb0 0a67 	vmov.f32	s0, s15
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fde7 	bl	8002564 <ftstr>
					csv_set_field(buffer, current_row, 5, string_value);
 8002996:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800299a:	f107 030c 	add.w	r3, r7, #12
 800299e:	2205      	movs	r2, #5
 80029a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80029a2:	f7fe fd67 	bl	8001474 <csv_set_field>
					memset(string_value, 0, sizeof(string_value));
 80029a6:	f107 030c 	add.w	r3, r7, #12
 80029aa:	2214      	movs	r2, #20
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f00c fd36 	bl	800f420 <memset>
					ftstr(string_value, Gz);
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <StartSDCardSaveTask+0x42c>)
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	eeb0 0a67 	vmov.f32	s0, s15
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fdce 	bl	8002564 <ftstr>
					csv_set_field(buffer, current_row, 6, string_value);
 80029c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	2206      	movs	r2, #6
 80029d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80029d4:	f7fe fd4e 	bl	8001474 <csv_set_field>
					// final character placeholder
					// the \r is needed for csv_set_field termination of the row
					csv_set_field(buffer, current_row+1, 0, "end\r");
 80029d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029dc:	3301      	adds	r3, #1
 80029de:	4619      	mov	r1, r3
 80029e0:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <StartSDCardSaveTask+0x430>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80029e6:	f7fe fd45 	bl	8001474 <csv_set_field>
					current_row++;
 80029ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				}
				print_buffer(buffer);
 80029f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80029f6:	f7ff fd6b 	bl	80024d0 <print_buffer>
				csv_save(&rwfile, buffer);
 80029fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029fc:	4817      	ldr	r0, [pc, #92]	; (8002a5c <StartSDCardSaveTask+0x404>)
 80029fe:	f7fe fc4c 	bl	800129a <csv_save>

				f_mount(NULL, "0", 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	4921      	ldr	r1, [pc, #132]	; (8002a8c <StartSDCardSaveTask+0x434>)
 8002a06:	2000      	movs	r0, #0
 8002a08:	f008 f8cc 	bl	800aba4 <f_mount>

				f_close(&rwfile);
 8002a0c:	4813      	ldr	r0, [pc, #76]	; (8002a5c <StartSDCardSaveTask+0x404>)
 8002a0e:	f009 f9f2 	bl	800bdf6 <f_close>
				csv_destroy_buffer(buffer);
 8002a12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002a14:	f7fe fb7f 	bl	8001116 <csv_destroy_buffer>
 8002a18:	e002      	b.n	8002a20 <StartSDCardSaveTask+0x3c8>
				}
			}
		else{
			myprintf("file write completed\r\n");
 8002a1a:	481d      	ldr	r0, [pc, #116]	; (8002a90 <StartSDCardSaveTask+0x438>)
 8002a1c:	f7ff fcfa 	bl	8002414 <myprintf>
		}

	// restart CAN telemetry threads
	//myprintf(" -- RESUMING thread GetData1 -- \r\n");
	osThreadResume(GetData1Handle);
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <StartSDCardSaveTask+0x43c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00a f8cb 	bl	800cbc0 <osThreadResume>
	//myprintf(" -- RESUMING thread GetData2 -- \r\n");
	osThreadResume(GetData2Handle);
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <StartSDCardSaveTask+0x440>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f00a f8c6 	bl	800cbc0 <osThreadResume>
	// reset data collection
	//myprintf(" -- RESUMING thread GetAccel -- \r\n");
	osThreadResume(GetAccelTaskHandle);
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <StartSDCardSaveTask+0x444>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f00a f8c1 	bl	800cbc0 <osThreadResume>
	accel_data_collected = 0;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <StartSDCardSaveTask+0x40c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
	myprintf(" -- ENDING thread SDCardSave -- \r\n");
 8002a44:	4816      	ldr	r0, [pc, #88]	; (8002aa0 <StartSDCardSaveTask+0x448>)
 8002a46:	f7ff fce5 	bl	8002414 <myprintf>
	osDelay(SDCardSave_delay);
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <StartSDCardSaveTask+0x44c>)
 8002a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f009 ffd2 	bl	800c9fa <osDelay>
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 8002a56:	e61a      	b.n	800268e <StartSDCardSaveTask+0x36>
 8002a58:	0801082c 	.word	0x0801082c
 8002a5c:	20001354 	.word	0x20001354
 8002a60:	0801083c 	.word	0x0801083c
 8002a64:	200023e0 	.word	0x200023e0
 8002a68:	20002390 	.word	0x20002390
 8002a6c:	0801084c 	.word	0x0801084c
 8002a70:	200023e4 	.word	0x200023e4
 8002a74:	200023e8 	.word	0x200023e8
 8002a78:	200023ec 	.word	0x200023ec
 8002a7c:	200023f0 	.word	0x200023f0
 8002a80:	200023f4 	.word	0x200023f4
 8002a84:	200023f8 	.word	0x200023f8
 8002a88:	08010850 	.word	0x08010850
 8002a8c:	080105bc 	.word	0x080105bc
 8002a90:	08010858 	.word	0x08010858
 8002a94:	200002b0 	.word	0x200002b0
 8002a98:	200002b4 	.word	0x200002b4
 8002a9c:	200002bc 	.word	0x200002bc
 8002aa0:	08010870 	.word	0x08010870
 8002aa4:	20000004 	.word	0x20000004

08002aa8 <StartGetData1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData1 */
void StartGetData1(void const * argument)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData1 */
	CAN_TxHeaderTypeDef   TxHeader1;

	// can transmission 1
	TxHeader1.StdId = 0x201;
 8002ab0:	f240 2301 	movw	r3, #513	; 0x201
 8002ab4:	61bb      	str	r3, [r7, #24]
	TxHeader1.ExtId = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
	TxHeader1.RTR = CAN_RTR_DATA;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader1.IDE = CAN_ID_STD;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
	TxHeader1.DLC = 4;
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader1.TransmitGlobalTime = DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c


	uint8_t TransmissionData1[8] = "dat1";
 8002acc:	4a36      	ldr	r2, [pc, #216]	; (8002ba8 <StartGetData1+0x100>)
 8002ace:	f107 0310 	add.w	r3, r7, #16
 8002ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ad6:	6018      	str	r0, [r3, #0]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	7019      	strb	r1, [r3, #0]
 8002adc:	f107 0315 	add.w	r3, r7, #21
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	801a      	strh	r2, [r3, #0]
 8002ae4:	709a      	strb	r2, [r3, #2]
	uint8_t node1req[4] = {0x77, 0x6f, 0x6f, 0x66};
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <StartGetData1+0x104>)
 8002ae8:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
  for(;;)
  {
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 8002aea:	4831      	ldr	r0, [pc, #196]	; (8002bb0 <StartGetData1+0x108>)
 8002aec:	f7ff fc92 	bl	8002414 <myprintf>
	  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002af0:	4830      	ldr	r0, [pc, #192]	; (8002bb4 <StartGetData1+0x10c>)
 8002af2:	f001 fb31 	bl	8004158 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d010      	beq.n	8002b1e <StartGetData1+0x76>
		  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader1, TransmissionData1, &TxMailbox) == HAL_OK){
 8002afc:	f107 0210 	add.w	r2, r7, #16
 8002b00:	f107 0118 	add.w	r1, r7, #24
 8002b04:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <StartGetData1+0x110>)
 8002b06:	482b      	ldr	r0, [pc, #172]	; (8002bb4 <StartGetData1+0x10c>)
 8002b08:	f001 fa4b 	bl	8003fa2 <HAL_CAN_AddTxMessage>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <StartGetData1+0x72>
			  myprintf("CAN message sent to data1\r\n");}
 8002b12:	482a      	ldr	r0, [pc, #168]	; (8002bbc <StartGetData1+0x114>)
 8002b14:	f7ff fc7e 	bl	8002414 <myprintf>
 8002b18:	e001      	b.n	8002b1e <StartGetData1+0x76>
		  else{
			  Error_Handler();
 8002b1a:	f000 f9f9 	bl	8002f10 <Error_Handler>
		  }
	  }
	  osDelay(10);	// response delay
 8002b1e:	200a      	movs	r0, #10
 8002b20:	f009 ff6b 	bl	800c9fa <osDelay>
	  // continue retransmission until data1 is collected
	  // change this to wait for a flag change from ReadCAN
	  if (RxHeader.StdId == 0x206 &&
 8002b24:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <StartGetData1+0x118>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f240 2206 	movw	r2, #518	; 0x206
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d122      	bne.n	8002b76 <StartGetData1+0xce>
		  RxData[0] == node1req[0] &&
 8002b30:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <StartGetData1+0x11c>)
 8002b32:	781a      	ldrb	r2, [r3, #0]
 8002b34:	7b3b      	ldrb	r3, [r7, #12]
	  if (RxHeader.StdId == 0x206 &&
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d11d      	bne.n	8002b76 <StartGetData1+0xce>
		  RxData[1] == node1req[1] &&
 8002b3a:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <StartGetData1+0x11c>)
 8002b3c:	785a      	ldrb	r2, [r3, #1]
 8002b3e:	7b7b      	ldrb	r3, [r7, #13]
		  RxData[0] == node1req[0] &&
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d118      	bne.n	8002b76 <StartGetData1+0xce>
	      RxData[2] == node1req[2] &&
 8002b44:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <StartGetData1+0x11c>)
 8002b46:	789a      	ldrb	r2, [r3, #2]
 8002b48:	7bbb      	ldrb	r3, [r7, #14]
		  RxData[1] == node1req[1] &&
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d113      	bne.n	8002b76 <StartGetData1+0xce>
		  RxData[3] == node1req[3]){
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <StartGetData1+0x11c>)
 8002b50:	78da      	ldrb	r2, [r3, #3]
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
	      RxData[2] == node1req[2] &&
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d10e      	bne.n	8002b76 <StartGetData1+0xce>
		  // process data1...
		  myprintf("CAN response from node1\r\n");
 8002b58:	481b      	ldr	r0, [pc, #108]	; (8002bc8 <StartGetData1+0x120>)
 8002b5a:	f7ff fc5b 	bl	8002414 <myprintf>
		  myprintf("processing...\r\n");
 8002b5e:	481b      	ldr	r0, [pc, #108]	; (8002bcc <StartGetData1+0x124>)
 8002b60:	f7ff fc58 	bl	8002414 <myprintf>
		  myprintf(" -- SUSPENDING thread GetData1 -- \r\n");
 8002b64:	481a      	ldr	r0, [pc, #104]	; (8002bd0 <StartGetData1+0x128>)
 8002b66:	f7ff fc55 	bl	8002414 <myprintf>
		  osThreadSuspend(GetData1Handle);
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <StartGetData1+0x12c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00a f819 	bl	800cba6 <osThreadSuspend>
 8002b74:	e016      	b.n	8002ba4 <StartGetData1+0xfc>
	  }
	  else{
		  myprintf("no CAN response, delaying thread GetData1\r\n");
 8002b76:	4818      	ldr	r0, [pc, #96]	; (8002bd8 <StartGetData1+0x130>)
 8002b78:	f7ff fc4c 	bl	8002414 <myprintf>
		  current_time = HAL_GetTick();
 8002b7c:	f000 fffc 	bl	8003b78 <HAL_GetTick>
 8002b80:	4603      	mov	r3, r0
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <StartGetData1+0x134>)
 8002b84:	6013      	str	r3, [r2, #0]
		  myprintf("current time: %lu\r\n", current_time);
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <StartGetData1+0x134>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4814      	ldr	r0, [pc, #80]	; (8002be0 <StartGetData1+0x138>)
 8002b8e:	f7ff fc41 	bl	8002414 <myprintf>
		  myprintf(" -- ENDING thread GetData1 -- \r\n");
 8002b92:	4814      	ldr	r0, [pc, #80]	; (8002be4 <StartGetData1+0x13c>)
 8002b94:	f7ff fc3e 	bl	8002414 <myprintf>
		  osDelay(retransmit_delay);
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <StartGetData1+0x140>)
 8002b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f009 ff2b 	bl	800c9fa <osDelay>
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 8002ba4:	e7a1      	b.n	8002aea <StartGetData1+0x42>
 8002ba6:	bf00      	nop
 8002ba8:	0801098c 	.word	0x0801098c
 8002bac:	666f6f77 	.word	0x666f6f77
 8002bb0:	08010894 	.word	0x08010894
 8002bb4:	2000014c 	.word	0x2000014c
 8002bb8:	200023b4 	.word	0x200023b4
 8002bbc:	080108b8 	.word	0x080108b8
 8002bc0:	20002394 	.word	0x20002394
 8002bc4:	200023b0 	.word	0x200023b0
 8002bc8:	080108d4 	.word	0x080108d4
 8002bcc:	080108f0 	.word	0x080108f0
 8002bd0:	08010900 	.word	0x08010900
 8002bd4:	200002b0 	.word	0x200002b0
 8002bd8:	08010928 	.word	0x08010928
 8002bdc:	2000238c 	.word	0x2000238c
 8002be0:	08010954 	.word	0x08010954
 8002be4:	08010968 	.word	0x08010968
 8002be8:	2000000a 	.word	0x2000000a

08002bec <StartGetData2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData2 */
void StartGetData2(void const * argument)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(retransmit_delay);
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <StartGetData2+0x18>)
 8002bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f009 fefd 	bl	800c9fa <osDelay>
 8002c00:	e7f8      	b.n	8002bf4 <StartGetData2+0x8>
 8002c02:	bf00      	nop
 8002c04:	2000000a 	.word	0x2000000a

08002c08 <StartReadCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCAN */
void StartReadCAN(void const * argument)
{
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af04      	add	r7, sp, #16
 8002c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCAN */
	/* Infinite loop */
	for(;;)
	{
		//myprintf(" -- STARTING thread ReadCAN -- \r\n");
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8002c10:	2100      	movs	r1, #0
 8002c12:	480f      	ldr	r0, [pc, #60]	; (8002c50 <StartReadCAN+0x48>)
 8002c14:	f001 fbe7 	bl	80043e6 <HAL_CAN_GetRxFifoFillLevel>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d011      	beq.n	8002c42 <StartReadCAN+0x3a>
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <StartReadCAN+0x4c>)
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <StartReadCAN+0x50>)
 8002c22:	2100      	movs	r1, #0
 8002c24:	480a      	ldr	r0, [pc, #40]	; (8002c50 <StartReadCAN+0x48>)
 8002c26:	f001 facc 	bl	80041c2 <HAL_CAN_GetRxMessage>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	//LED shows a CAN message read
			printCANMessage(RxHeader, RxData);
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <StartReadCAN+0x50>)
 8002c2c:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <StartReadCAN+0x4c>)
 8002c2e:	9203      	str	r2, [sp, #12]
 8002c30:	466c      	mov	r4, sp
 8002c32:	f103 0210 	add.w	r2, r3, #16
 8002c36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c3e:	f7ff fc15 	bl	800246c <printCANMessage>
//				myprintf("data request response from node1 of id 0x206\r\n");
//				data1collected = 1;	// can be changed into thread signal/flag
//			}
		}
		//myprintf(" -- ENDING thread ReadCAN -- \r\n");
		osDelay(read_delay);
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <StartReadCAN+0x54>)
 8002c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f009 fed6 	bl	800c9fa <osDelay>
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8002c4e:	e7df      	b.n	8002c10 <StartReadCAN+0x8>
 8002c50:	2000014c 	.word	0x2000014c
 8002c54:	200023b0 	.word	0x200023b0
 8002c58:	20002394 	.word	0x20002394
 8002c5c:	20000006 	.word	0x20000006

08002c60 <StartGetAccelTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetAccelTask */
void StartGetAccelTask(void const * argument)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetAccelTask */
  /* Infinite loop */
	uint8_t accel_cnt = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
	MPU6050_Init(&hi2c3);
 8002c6c:	4890      	ldr	r0, [pc, #576]	; (8002eb0 <StartGetAccelTask+0x250>)
 8002c6e:	f000 f959 	bl	8002f24 <MPU6050_Init>
  /* Infinite loop */
  for(;;)
  {
	myprintf(" -- running MPU6050 measurement task -- \r\n");
 8002c72:	4890      	ldr	r0, [pc, #576]	; (8002eb4 <StartGetAccelTask+0x254>)
 8002c74:	f7ff fbce 	bl	8002414 <myprintf>
	Ax = 0;
 8002c78:	4b8f      	ldr	r3, [pc, #572]	; (8002eb8 <StartGetAccelTask+0x258>)
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
	Ay = 0;
 8002c80:	4b8e      	ldr	r3, [pc, #568]	; (8002ebc <StartGetAccelTask+0x25c>)
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
	Az = 0;
 8002c88:	4b8d      	ldr	r3, [pc, #564]	; (8002ec0 <StartGetAccelTask+0x260>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
	Gx = 0;
 8002c90:	4b8c      	ldr	r3, [pc, #560]	; (8002ec4 <StartGetAccelTask+0x264>)
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
	Gy = 0;
 8002c98:	4b8b      	ldr	r3, [pc, #556]	; (8002ec8 <StartGetAccelTask+0x268>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
	Gz = 0;
 8002ca0:	4b8a      	ldr	r3, [pc, #552]	; (8002ecc <StartGetAccelTask+0x26c>)
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
	// take 4 accel_cnt to average out the value
	for(int i = 0; i < 4; i++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	e081      	b.n	8002db2 <StartGetAccelTask+0x152>
		if (!MPU6050_Read_All(&hi2c3, &MPU6050)){
 8002cae:	4988      	ldr	r1, [pc, #544]	; (8002ed0 <StartGetAccelTask+0x270>)
 8002cb0:	487f      	ldr	r0, [pc, #508]	; (8002eb0 <StartGetAccelTask+0x250>)
 8002cb2:	f000 f991 	bl	8002fd8 <MPU6050_Read_All>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d177      	bne.n	8002dac <StartGetAccelTask+0x14c>
			myprintf("fetching.. ");
 8002cbc:	4885      	ldr	r0, [pc, #532]	; (8002ed4 <StartGetAccelTask+0x274>)
 8002cbe:	f7ff fba9 	bl	8002414 <myprintf>
			Ax += MPU6050.Ax;
 8002cc2:	4b7d      	ldr	r3, [pc, #500]	; (8002eb8 <StartGetAccelTask+0x258>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fc46 	bl	8000558 <__aeabi_f2d>
 8002ccc:	4b80      	ldr	r3, [pc, #512]	; (8002ed0 <StartGetAccelTask+0x270>)
 8002cce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cd2:	f7fd fae3 	bl	800029c <__adddf3>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4610      	mov	r0, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f7fd ff6b 	bl	8000bb8 <__aeabi_d2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a74      	ldr	r2, [pc, #464]	; (8002eb8 <StartGetAccelTask+0x258>)
 8002ce6:	6013      	str	r3, [r2, #0]
			Ay += MPU6050.Ay;
 8002ce8:	4b74      	ldr	r3, [pc, #464]	; (8002ebc <StartGetAccelTask+0x25c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fc33 	bl	8000558 <__aeabi_f2d>
 8002cf2:	4b77      	ldr	r3, [pc, #476]	; (8002ed0 <StartGetAccelTask+0x270>)
 8002cf4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cf8:	f7fd fad0 	bl	800029c <__adddf3>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7fd ff58 	bl	8000bb8 <__aeabi_d2f>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a6c      	ldr	r2, [pc, #432]	; (8002ebc <StartGetAccelTask+0x25c>)
 8002d0c:	6013      	str	r3, [r2, #0]
			Az += MPU6050.Az;
 8002d0e:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <StartGetAccelTask+0x260>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fc20 	bl	8000558 <__aeabi_f2d>
 8002d18:	4b6d      	ldr	r3, [pc, #436]	; (8002ed0 <StartGetAccelTask+0x270>)
 8002d1a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d1e:	f7fd fabd 	bl	800029c <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd ff45 	bl	8000bb8 <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <StartGetAccelTask+0x260>)
 8002d32:	6013      	str	r3, [r2, #0]
			Gx += MPU6050.Gx;
 8002d34:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <StartGetAccelTask+0x264>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fc0d 	bl	8000558 <__aeabi_f2d>
 8002d3e:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <StartGetAccelTask+0x270>)
 8002d40:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002d44:	f7fd faaa 	bl	800029c <__adddf3>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7fd ff32 	bl	8000bb8 <__aeabi_d2f>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4a5b      	ldr	r2, [pc, #364]	; (8002ec4 <StartGetAccelTask+0x264>)
 8002d58:	6013      	str	r3, [r2, #0]
			Gy += MPU6050.Gy;
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <StartGetAccelTask+0x268>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fbfa 	bl	8000558 <__aeabi_f2d>
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <StartGetAccelTask+0x270>)
 8002d66:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002d6a:	f7fd fa97 	bl	800029c <__adddf3>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd ff1f 	bl	8000bb8 <__aeabi_d2f>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4a52      	ldr	r2, [pc, #328]	; (8002ec8 <StartGetAccelTask+0x268>)
 8002d7e:	6013      	str	r3, [r2, #0]
			Gz += MPU6050.Gz;
 8002d80:	4b52      	ldr	r3, [pc, #328]	; (8002ecc <StartGetAccelTask+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fbe7 	bl	8000558 <__aeabi_f2d>
 8002d8a:	4b51      	ldr	r3, [pc, #324]	; (8002ed0 <StartGetAccelTask+0x270>)
 8002d8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d90:	f7fd fa84 	bl	800029c <__adddf3>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f7fd ff0c 	bl	8000bb8 <__aeabi_d2f>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4a4a      	ldr	r2, [pc, #296]	; (8002ecc <StartGetAccelTask+0x26c>)
 8002da4:	6013      	str	r3, [r2, #0]
			accel_cnt++;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	3301      	adds	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 4; i++){
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3301      	adds	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	f77f af7a 	ble.w	8002cae <StartGetAccelTask+0x4e>
		}
	}
	if(accel_cnt == 4){
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d16a      	bne.n	8002e96 <StartGetAccelTask+0x236>
		myprintf(" Data collected.\r\n");
 8002dc0:	4845      	ldr	r0, [pc, #276]	; (8002ed8 <StartGetAccelTask+0x278>)
 8002dc2:	f7ff fb27 	bl	8002414 <myprintf>
		accel_data_collected = 1;
 8002dc6:	4b45      	ldr	r3, [pc, #276]	; (8002edc <StartGetAccelTask+0x27c>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
		accel_data_time = HAL_GetTick();
 8002dcc:	f000 fed4 	bl	8003b78 <HAL_GetTick>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4a43      	ldr	r2, [pc, #268]	; (8002ee0 <StartGetAccelTask+0x280>)
 8002dd4:	6013      	str	r3, [r2, #0]
		Ax += Ax/4;
 8002dd6:	4b38      	ldr	r3, [pc, #224]	; (8002eb8 <StartGetAccelTask+0x258>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002de0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002de4:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <StartGetAccelTask+0x258>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dee:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <StartGetAccelTask+0x258>)
 8002df0:	edc3 7a00 	vstr	s15, [r3]
		Ay += Ay/4;
 8002df4:	4b31      	ldr	r3, [pc, #196]	; (8002ebc <StartGetAccelTask+0x25c>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002dfe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e02:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <StartGetAccelTask+0x25c>)
 8002e04:	edd3 7a00 	vldr	s15, [r3]
 8002e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	; (8002ebc <StartGetAccelTask+0x25c>)
 8002e0e:	edc3 7a00 	vstr	s15, [r3]
		Az += Az/4;
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <StartGetAccelTask+0x260>)
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002e1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <StartGetAccelTask+0x260>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <StartGetAccelTask+0x260>)
 8002e2c:	edc3 7a00 	vstr	s15, [r3]
		Gx += Gx/4;
 8002e30:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <StartGetAccelTask+0x264>)
 8002e32:	edd3 7a00 	vldr	s15, [r3]
 8002e36:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002e3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <StartGetAccelTask+0x264>)
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <StartGetAccelTask+0x264>)
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
		Gy += Gy/4;
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <StartGetAccelTask+0x268>)
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002e58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <StartGetAccelTask+0x268>)
 8002e5e:	edd3 7a00 	vldr	s15, [r3]
 8002e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <StartGetAccelTask+0x268>)
 8002e68:	edc3 7a00 	vstr	s15, [r3]
		Gz += Gz/4;
 8002e6c:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <StartGetAccelTask+0x26c>)
 8002e6e:	edd3 7a00 	vldr	s15, [r3]
 8002e72:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002e76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <StartGetAccelTask+0x26c>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <StartGetAccelTask+0x26c>)
 8002e86:	edc3 7a00 	vstr	s15, [r3]
		osThreadSuspend(GetAccelTaskHandle);
 8002e8a:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <StartGetAccelTask+0x284>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f009 fe89 	bl	800cba6 <osThreadSuspend>
 8002e94:	e002      	b.n	8002e9c <StartGetAccelTask+0x23c>
	}
	else{
		MPU6050_Init(&hi2c3);
 8002e96:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <StartGetAccelTask+0x250>)
 8002e98:	f000 f844 	bl	8002f24 <MPU6050_Init>
	}
	accel_cnt = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
	osDelay(accel_read_delay);
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <StartGetAccelTask+0x288>)
 8002ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f009 fda7 	bl	800c9fa <osDelay>
	myprintf(" -- running MPU6050 measurement task -- \r\n");
 8002eac:	e6e1      	b.n	8002c72 <StartGetAccelTask+0x12>
 8002eae:	bf00      	nop
 8002eb0:	20000174 	.word	0x20000174
 8002eb4:	08010994 	.word	0x08010994
 8002eb8:	200023e4 	.word	0x200023e4
 8002ebc:	200023e8 	.word	0x200023e8
 8002ec0:	200023ec 	.word	0x200023ec
 8002ec4:	200023f0 	.word	0x200023f0
 8002ec8:	200023f4 	.word	0x200023f4
 8002ecc:	200023f8 	.word	0x200023f8
 8002ed0:	200002c8 	.word	0x200002c8
 8002ed4:	080109c0 	.word	0x080109c0
 8002ed8:	080109cc 	.word	0x080109cc
 8002edc:	200023e0 	.word	0x200023e0
 8002ee0:	20002390 	.word	0x20002390
 8002ee4:	200002bc 	.word	0x200002bc
 8002ee8:	20000008 	.word	0x20000008

08002eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a04      	ldr	r2, [pc, #16]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002efe:	f000 fe27 	bl	8003b50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40001000 	.word	0x40001000

08002f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f14:	b672      	cpsid	i
}
 8002f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  myprintf("HAL error occurred!\r\n"); // print
 8002f18:	4801      	ldr	r0, [pc, #4]	; (8002f20 <Error_Handler+0x10>)
 8002f1a:	f7ff fa7b 	bl	8002414 <myprintf>
 8002f1e:	e7fb      	b.n	8002f18 <Error_Handler+0x8>
 8002f20:	080109e0 	.word	0x080109e0

08002f24 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af04      	add	r7, sp, #16
 8002f2a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002f2c:	2364      	movs	r3, #100	; 0x64
 8002f2e:	9302      	str	r3, [sp, #8]
 8002f30:	2301      	movs	r3, #1
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	f107 030f 	add.w	r3, r7, #15
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	2275      	movs	r2, #117	; 0x75
 8002f3e:	21d0      	movs	r1, #208	; 0xd0
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f001 fec7 	bl	8004cd4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b68      	cmp	r3, #104	; 0x68
 8002f4a:	d13d      	bne.n	8002fc8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002f50:	2364      	movs	r3, #100	; 0x64
 8002f52:	9302      	str	r3, [sp, #8]
 8002f54:	2301      	movs	r3, #1
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	f107 030e 	add.w	r3, r7, #14
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	226b      	movs	r2, #107	; 0x6b
 8002f62:	21d0      	movs	r1, #208	; 0xd0
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f001 fda1 	bl	8004aac <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002f6e:	2364      	movs	r3, #100	; 0x64
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	2301      	movs	r3, #1
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	f107 030e 	add.w	r3, r7, #14
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2219      	movs	r2, #25
 8002f80:	21d0      	movs	r1, #208	; 0xd0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f001 fd92 	bl	8004aac <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002f8c:	2364      	movs	r3, #100	; 0x64
 8002f8e:	9302      	str	r3, [sp, #8]
 8002f90:	2301      	movs	r3, #1
 8002f92:	9301      	str	r3, [sp, #4]
 8002f94:	f107 030e 	add.w	r3, r7, #14
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	221c      	movs	r2, #28
 8002f9e:	21d0      	movs	r1, #208	; 0xd0
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f001 fd83 	bl	8004aac <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002faa:	2364      	movs	r3, #100	; 0x64
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	2301      	movs	r3, #1
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	f107 030e 	add.w	r3, r7, #14
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2301      	movs	r3, #1
 8002fba:	221b      	movs	r2, #27
 8002fbc:	21d0      	movs	r1, #208	; 0xd0
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f001 fd74 	bl	8004aac <HAL_I2C_Mem_Write>
        return 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e000      	b.n	8002fca <MPU6050_Init+0xa6>
    }
    return 1;
 8002fc8:	2301      	movs	r3, #1
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	0000      	movs	r0, r0
 8002fd4:	0000      	movs	r0, r0
	...

08002fd8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

uint8_t MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b094      	sub	sp, #80	; 0x50
 8002fde:	af04      	add	r7, sp, #16
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    if (HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG,
 8002fe4:	2364      	movs	r3, #100	; 0x64
 8002fe6:	9302      	str	r3, [sp, #8]
 8002fe8:	230e      	movs	r3, #14
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	f107 0308 	add.w	r3, r7, #8
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	223b      	movs	r2, #59	; 0x3b
 8002ff6:	21d0      	movs	r1, #208	; 0xd0
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f001 fe6b 	bl	8004cd4 <HAL_I2C_Mem_Read>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MPU6050_Read_All+0x30>
    		1, Rec_Data, 14, i2c_timeout) != HAL_OK){
    	return 1;
 8003004:	2301      	movs	r3, #1
 8003006:	e1ae      	b.n	8003366 <MPU6050_Read_All+0x38e>
    }

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003008:	7a3b      	ldrb	r3, [r7, #8]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	b21a      	sxth	r2, r3
 800300e:	7a7b      	ldrb	r3, [r7, #9]
 8003010:	b21b      	sxth	r3, r3
 8003012:	4313      	orrs	r3, r2
 8003014:	b21a      	sxth	r2, r3
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800301a:	7abb      	ldrb	r3, [r7, #10]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	b21a      	sxth	r2, r3
 8003020:	7afb      	ldrb	r3, [r7, #11]
 8003022:	b21b      	sxth	r3, r3
 8003024:	4313      	orrs	r3, r2
 8003026:	b21a      	sxth	r2, r3
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800302c:	7b3b      	ldrb	r3, [r7, #12]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	b21a      	sxth	r2, r3
 8003032:	7b7b      	ldrb	r3, [r7, #13]
 8003034:	b21b      	sxth	r3, r3
 8003036:	4313      	orrs	r3, r2
 8003038:	b21a      	sxth	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 800303e:	7bbb      	ldrb	r3, [r7, #14]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	b21a      	sxth	r2, r3
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	b21b      	sxth	r3, r3
 8003048:	4313      	orrs	r3, r2
 800304a:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 800304c:	7c3b      	ldrb	r3, [r7, #16]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	b21a      	sxth	r2, r3
 8003052:	7c7b      	ldrb	r3, [r7, #17]
 8003054:	b21b      	sxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b21a      	sxth	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 800305e:	7cbb      	ldrb	r3, [r7, #18]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	b21a      	sxth	r2, r3
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	b21b      	sxth	r3, r3
 8003068:	4313      	orrs	r3, r2
 800306a:	b21a      	sxth	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003070:	7d3b      	ldrb	r3, [r7, #20]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	b21a      	sxth	r2, r3
 8003076:	7d7b      	ldrb	r3, [r7, #21]
 8003078:	b21b      	sxth	r3, r3
 800307a:	4313      	orrs	r3, r2
 800307c:	b21a      	sxth	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa53 	bl	8000534 <__aeabi_i2d>
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4bbd      	ldr	r3, [pc, #756]	; (8003388 <MPU6050_Read_All+0x3b0>)
 8003094:	f7fd fbe2 	bl	800085c <__aeabi_ddiv>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fa43 	bl	8000534 <__aeabi_i2d>
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	4bb5      	ldr	r3, [pc, #724]	; (8003388 <MPU6050_Read_All+0x3b0>)
 80030b4:	f7fd fbd2 	bl	800085c <__aeabi_ddiv>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	6839      	ldr	r1, [r7, #0]
 80030be:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa33 	bl	8000534 <__aeabi_i2d>
 80030ce:	a3a8      	add	r3, pc, #672	; (adr r3, 8003370 <MPU6050_Read_All+0x398>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd fbc2 	bl	800085c <__aeabi_ddiv>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80030e2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ee:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800338c <MPU6050_Read_All+0x3b4>
 80030f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030f6:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003390 <MPU6050_Read_All+0x3b8>
 80030fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fa12 	bl	8000534 <__aeabi_i2d>
 8003110:	a399      	add	r3, pc, #612	; (adr r3, 8003378 <MPU6050_Read_All+0x3a0>)
 8003112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003116:	f7fd fba1 	bl	800085c <__aeabi_ddiv>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	6839      	ldr	r1, [r7, #0]
 8003120:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd fa02 	bl	8000534 <__aeabi_i2d>
 8003130:	a391      	add	r3, pc, #580	; (adr r3, 8003378 <MPU6050_Read_All+0x3a0>)
 8003132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003136:	f7fd fb91 	bl	800085c <__aeabi_ddiv>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	6839      	ldr	r1, [r7, #0]
 8003140:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd f9f2 	bl	8000534 <__aeabi_i2d>
 8003150:	a389      	add	r3, pc, #548	; (adr r3, 8003378 <MPU6050_Read_All+0x3a0>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd fb81 	bl	800085c <__aeabi_ddiv>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8003164:	f000 fd08 	bl	8003b78 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	4b8a      	ldr	r3, [pc, #552]	; (8003394 <MPU6050_Read_All+0x3bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd f9cf 	bl	8000514 <__aeabi_ui2d>
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	4b87      	ldr	r3, [pc, #540]	; (8003398 <MPU6050_Read_All+0x3c0>)
 800317c:	f7fd fb6e 	bl	800085c <__aeabi_ddiv>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8003188:	f000 fcf6 	bl	8003b78 <HAL_GetTick>
 800318c:	4603      	mov	r3, r0
 800318e:	4a81      	ldr	r2, [pc, #516]	; (8003394 <MPU6050_Read_All+0x3bc>)
 8003190:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003198:	461a      	mov	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a0:	fb03 f202 	mul.w	r2, r3, r2
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031aa:	4619      	mov	r1, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f9bb 	bl	8000534 <__aeabi_i2d>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	ec43 2b10 	vmov	d0, r2, r3
 80031c6:	f00c fffa 	bl	80101be <sqrt>
 80031ca:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031da:	f7fd fc7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11f      	bne.n	8003224 <MPU6050_Read_All+0x24c>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd f9a2 	bl	8000534 <__aeabi_i2d>
 80031f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031f4:	f7fd fb32 	bl	800085c <__aeabi_ddiv>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	ec43 2b17 	vmov	d7, r2, r3
 8003200:	eeb0 0a47 	vmov.f32	s0, s14
 8003204:	eef0 0a67 	vmov.f32	s1, s15
 8003208:	f00c fe2e 	bl	800fe68 <atan>
 800320c:	ec51 0b10 	vmov	r0, r1, d0
 8003210:	a35b      	add	r3, pc, #364	; (adr r3, 8003380 <MPU6050_Read_All+0x3a8>)
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	f7fd f9f7 	bl	8000608 <__aeabi_dmul>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003222:	e005      	b.n	8003230 <MPU6050_Read_All+0x258>
    }
    else
    {
        roll = 0.0;
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003236:	425b      	negs	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd f97b 	bl	8000534 <__aeabi_i2d>
 800323e:	4682      	mov	sl, r0
 8003240:	468b      	mov	fp, r1
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f973 	bl	8000534 <__aeabi_i2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	ec43 2b11 	vmov	d1, r2, r3
 8003256:	ec4b ab10 	vmov	d0, sl, fp
 800325a:	f00c ffae 	bl	80101ba <atan2>
 800325e:	ec51 0b10 	vmov	r0, r1, d0
 8003262:	a347      	add	r3, pc, #284	; (adr r3, 8003380 <MPU6050_Read_All+0x3a8>)
 8003264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003268:	f7fd f9ce 	bl	8000608 <__aeabi_dmul>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	4b48      	ldr	r3, [pc, #288]	; (800339c <MPU6050_Read_All+0x3c4>)
 800327a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800327e:	f7fd fc35 	bl	8000aec <__aeabi_dcmplt>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <MPU6050_Read_All+0x2c6>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <MPU6050_Read_All+0x3c8>)
 8003294:	f7fd fc48 	bl	8000b28 <__aeabi_dcmpgt>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d114      	bne.n	80032c8 <MPU6050_Read_All+0x2f0>
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <MPU6050_Read_All+0x3c8>)
 80032a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032a8:	f7fd fc3e 	bl	8000b28 <__aeabi_dcmpgt>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d015      	beq.n	80032de <MPU6050_Read_All+0x306>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	4b37      	ldr	r3, [pc, #220]	; (800339c <MPU6050_Read_All+0x3c4>)
 80032be:	f7fd fc15 	bl	8000aec <__aeabi_dcmplt>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <MPU6050_Read_All+0x306>
    {
        KalmanY.angle = pitch;
 80032c8:	4936      	ldr	r1, [pc, #216]	; (80033a4 <MPU6050_Read_All+0x3cc>)
 80032ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ce:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80032dc:	e014      	b.n	8003308 <MPU6050_Read_All+0x330>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80032e4:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80032e8:	eeb0 1a47 	vmov.f32	s2, s14
 80032ec:	eef0 1a67 	vmov.f32	s3, s15
 80032f0:	ed97 0b06 	vldr	d0, [r7, #24]
 80032f4:	482b      	ldr	r0, [pc, #172]	; (80033a4 <MPU6050_Read_All+0x3cc>)
 80032f6:	f000 f859 	bl	80033ac <Kalman_getAngle>
 80032fa:	eeb0 7a40 	vmov.f32	s14, s0
 80032fe:	eef0 7a60 	vmov.f32	s15, s1
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800330e:	4690      	mov	r8, r2
 8003310:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <MPU6050_Read_All+0x3c8>)
 800331a:	4640      	mov	r0, r8
 800331c:	4649      	mov	r1, r9
 800331e:	f7fd fc03 	bl	8000b28 <__aeabi_dcmpgt>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <MPU6050_Read_All+0x362>
        DataStruct->Gx = -DataStruct->Gx;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800332e:	4614      	mov	r4, r2
 8003330:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8003340:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003344:	eeb0 1a47 	vmov.f32	s2, s14
 8003348:	eef0 1a67 	vmov.f32	s3, s15
 800334c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003350:	4815      	ldr	r0, [pc, #84]	; (80033a8 <MPU6050_Read_All+0x3d0>)
 8003352:	f000 f82b 	bl	80033ac <Kalman_getAngle>
 8003356:	eeb0 7a40 	vmov.f32	s14, s0
 800335a:	eef0 7a60 	vmov.f32	s15, s1
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
    return 0;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3740      	adds	r7, #64	; 0x40
 800336a:	46bd      	mov	sp, r7
 800336c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003370:	00000000 	.word	0x00000000
 8003374:	40cc2900 	.word	0x40cc2900
 8003378:	00000000 	.word	0x00000000
 800337c:	40606000 	.word	0x40606000
 8003380:	1a63c1f8 	.word	0x1a63c1f8
 8003384:	404ca5dc 	.word	0x404ca5dc
 8003388:	40d00000 	.word	0x40d00000
 800338c:	43aa0000 	.word	0x43aa0000
 8003390:	42121eb8 	.word	0x42121eb8
 8003394:	200023fc 	.word	0x200023fc
 8003398:	408f4000 	.word	0x408f4000
 800339c:	c0568000 	.word	0xc0568000
 80033a0:	40568000 	.word	0x40568000
 80033a4:	20000058 	.word	0x20000058
 80033a8:	20000010 	.word	0x20000010

080033ac <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b096      	sub	sp, #88	; 0x58
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	61f8      	str	r0, [r7, #28]
 80033b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80033b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80033bc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033ca:	f7fc ff65 	bl	8000298 <__aeabi_dsub>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80033dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033e4:	f7fd f910 	bl	8000608 <__aeabi_dmul>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4620      	mov	r0, r4
 80033ee:	4629      	mov	r1, r5
 80033f0:	f7fc ff54 	bl	800029c <__adddf3>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	69f9      	ldr	r1, [r7, #28]
 80033fa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800340a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800340e:	f7fd f8fb 	bl	8000608 <__aeabi_dmul>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003420:	f7fc ff3a 	bl	8000298 <__aeabi_dsub>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003432:	f7fc ff31 	bl	8000298 <__aeabi_dsub>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f7fc ff2a 	bl	800029c <__adddf3>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003454:	f7fd f8d8 	bl	8000608 <__aeabi_dmul>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4620      	mov	r0, r4
 800345e:	4629      	mov	r1, r5
 8003460:	f7fc ff1c 	bl	800029c <__adddf3>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	69f9      	ldr	r1, [r7, #28]
 800346a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800347a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800347e:	f7fd f8c3 	bl	8000608 <__aeabi_dmul>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4620      	mov	r0, r4
 8003488:	4629      	mov	r1, r5
 800348a:	f7fc ff05 	bl	8000298 <__aeabi_dsub>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	69f9      	ldr	r1, [r7, #28]
 8003494:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80034a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034a8:	f7fd f8ae 	bl	8000608 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4620      	mov	r0, r4
 80034b2:	4629      	mov	r1, r5
 80034b4:	f7fc fef0 	bl	8000298 <__aeabi_dsub>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	69f9      	ldr	r1, [r7, #28]
 80034be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80034ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034d2:	f7fd f899 	bl	8000608 <__aeabi_dmul>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f7fc fedd 	bl	800029c <__adddf3>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	69f9      	ldr	r1, [r7, #28]
 80034e8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034f8:	f7fc fed0 	bl	800029c <__adddf3>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800350a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800350e:	f7fd f9a5 	bl	800085c <__aeabi_ddiv>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003520:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003524:	f7fd f99a 	bl	800085c <__aeabi_ddiv>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003536:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800353a:	f7fc fead 	bl	8000298 <__aeabi_dsub>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800354c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003550:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003554:	f7fd f858 	bl	8000608 <__aeabi_dmul>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4620      	mov	r0, r4
 800355e:	4629      	mov	r1, r5
 8003560:	f7fc fe9c 	bl	800029c <__adddf3>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	69f9      	ldr	r1, [r7, #28]
 800356a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003574:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003578:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800357c:	f7fd f844 	bl	8000608 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4620      	mov	r0, r4
 8003586:	4629      	mov	r1, r5
 8003588:	f7fc fe88 	bl	800029c <__adddf3>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	69f9      	ldr	r1, [r7, #28]
 8003592:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800359c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80035a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80035b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035b8:	f7fd f826 	bl	8000608 <__aeabi_dmul>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4620      	mov	r0, r4
 80035c2:	4629      	mov	r1, r5
 80035c4:	f7fc fe68 	bl	8000298 <__aeabi_dsub>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	69f9      	ldr	r1, [r7, #28]
 80035ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80035d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035e0:	f7fd f812 	bl	8000608 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4620      	mov	r0, r4
 80035ea:	4629      	mov	r1, r5
 80035ec:	f7fc fe54 	bl	8000298 <__aeabi_dsub>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	69f9      	ldr	r1, [r7, #28]
 80035f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003600:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003608:	f7fc fffe 	bl	8000608 <__aeabi_dmul>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4620      	mov	r0, r4
 8003612:	4629      	mov	r1, r5
 8003614:	f7fc fe40 	bl	8000298 <__aeabi_dsub>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	69f9      	ldr	r1, [r7, #28]
 800361e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003628:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800362c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003630:	f7fc ffea 	bl	8000608 <__aeabi_dmul>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4620      	mov	r0, r4
 800363a:	4629      	mov	r1, r5
 800363c:	f7fc fe2c 	bl	8000298 <__aeabi_dsub>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	69f9      	ldr	r1, [r7, #28]
 8003646:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003650:	ec43 2b17 	vmov	d7, r2, r3
};
 8003654:	eeb0 0a47 	vmov.f32	s0, s14
 8003658:	eef0 0a67 	vmov.f32	s1, s15
 800365c:	3758      	adds	r7, #88	; 0x58
 800365e:	46bd      	mov	sp, r7
 8003660:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <HAL_MspInit+0x4c>)
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <HAL_MspInit+0x4c>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6193      	str	r3, [r2, #24]
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_MspInit+0x4c>)
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	607b      	str	r3, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_MspInit+0x4c>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <HAL_MspInit+0x4c>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_MspInit+0x4c>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	210f      	movs	r1, #15
 800369e:	f06f 0001 	mvn.w	r0, #1
 80036a2:	f000 ffa7 	bl	80045f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000

080036b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	; 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a18      	ldr	r2, [pc, #96]	; (8003734 <HAL_CAN_MspInit+0x80>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d129      	bne.n	800372a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <HAL_CAN_MspInit+0x84>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4a17      	ldr	r2, [pc, #92]	; (8003738 <HAL_CAN_MspInit+0x84>)
 80036dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036e0:	61d3      	str	r3, [r2, #28]
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_CAN_MspInit+0x84>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_CAN_MspInit+0x84>)
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_CAN_MspInit+0x84>)
 80036f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f8:	6153      	str	r3, [r2, #20]
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <HAL_CAN_MspInit+0x84>)
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800370a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370c:	2302      	movs	r3, #2
 800370e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003714:	2303      	movs	r3, #3
 8003716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003718:	2309      	movs	r3, #9
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4619      	mov	r1, r3
 8003722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003726:	f000 ff8f 	bl	8004648 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800372a:	bf00      	nop
 800372c:	3728      	adds	r7, #40	; 0x28
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40006400 	.word	0x40006400
 8003738:	40021000 	.word	0x40021000

0800373c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	; 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <HAL_I2C_MspInit+0xb8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d146      	bne.n	80037ec <HAL_I2C_MspInit+0xb0>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 8003764:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003768:	6153      	str	r3, [r2, #20]
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	6153      	str	r3, [r2, #20]
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800378e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003794:	2312      	movs	r3, #18
 8003796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800379c:	2303      	movs	r3, #3
 800379e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80037a0:	2303      	movs	r3, #3
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	4619      	mov	r1, r3
 80037aa:	4814      	ldr	r0, [pc, #80]	; (80037fc <HAL_I2C_MspInit+0xc0>)
 80037ac:	f000 ff4c 	bl	8004648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b6:	2312      	movs	r3, #18
 80037b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037be:	2303      	movs	r3, #3
 80037c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C3;
 80037c2:	2303      	movs	r3, #3
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c6:	f107 0314 	add.w	r3, r7, #20
 80037ca:	4619      	mov	r1, r3
 80037cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d0:	f000 ff3a 	bl	8004648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 80037da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037de:	61d3      	str	r3, [r2, #28]
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_I2C_MspInit+0xbc>)
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80037ec:	bf00      	nop
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40007800 	.word	0x40007800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	48000800 	.word	0x48000800

08003800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_SPI_MspInit+0x7c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d128      	bne.n	8003874 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003822:	4b17      	ldr	r3, [pc, #92]	; (8003880 <HAL_SPI_MspInit+0x80>)
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	4a16      	ldr	r2, [pc, #88]	; (8003880 <HAL_SPI_MspInit+0x80>)
 8003828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800382c:	6193      	str	r3, [r2, #24]
 800382e:	4b14      	ldr	r3, [pc, #80]	; (8003880 <HAL_SPI_MspInit+0x80>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	4b11      	ldr	r3, [pc, #68]	; (8003880 <HAL_SPI_MspInit+0x80>)
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	4a10      	ldr	r2, [pc, #64]	; (8003880 <HAL_SPI_MspInit+0x80>)
 8003840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003844:	6153      	str	r3, [r2, #20]
 8003846:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <HAL_SPI_MspInit+0x80>)
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003852:	23e0      	movs	r3, #224	; 0xe0
 8003854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003856:	2302      	movs	r3, #2
 8003858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800385e:	2303      	movs	r3, #3
 8003860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003862:	2305      	movs	r3, #5
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	4619      	mov	r1, r3
 800386c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003870:	f000 feea 	bl	8004648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003874:	bf00      	nop
 8003876:	3728      	adds	r7, #40	; 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40013000 	.word	0x40013000
 8003880:	40021000 	.word	0x40021000

08003884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a17      	ldr	r2, [pc, #92]	; (8003900 <HAL_UART_MspInit+0x7c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d128      	bne.n	80038f8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_UART_MspInit+0x80>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4a16      	ldr	r2, [pc, #88]	; (8003904 <HAL_UART_MspInit+0x80>)
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b0:	61d3      	str	r3, [r2, #28]
 80038b2:	4b14      	ldr	r3, [pc, #80]	; (8003904 <HAL_UART_MspInit+0x80>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <HAL_UART_MspInit+0x80>)
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_UART_MspInit+0x80>)
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	6153      	str	r3, [r2, #20]
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_UART_MspInit+0x80>)
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038d6:	230c      	movs	r3, #12
 80038d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038da:	2302      	movs	r3, #2
 80038dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038e2:	2303      	movs	r3, #3
 80038e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038e6:	2307      	movs	r3, #7
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ea:	f107 0314 	add.w	r3, r7, #20
 80038ee:	4619      	mov	r1, r3
 80038f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038f4:	f000 fea8 	bl	8004648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038f8:	bf00      	nop
 80038fa:	3728      	adds	r7, #40	; 0x28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40004400 	.word	0x40004400
 8003904:	40021000 	.word	0x40021000

08003908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08e      	sub	sp, #56	; 0x38
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003918:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <HAL_InitTick+0xe0>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <HAL_InitTick+0xe0>)
 800391e:	f043 0310 	orr.w	r3, r3, #16
 8003922:	61d3      	str	r3, [r2, #28]
 8003924:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <HAL_InitTick+0xe0>)
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003930:	f107 0210 	add.w	r2, r7, #16
 8003934:	f107 0314 	add.w	r3, r7, #20
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f003 f84e 	bl	80069dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800394a:	f003 f803 	bl	8006954 <HAL_RCC_GetPCLK1Freq>
 800394e:	6378      	str	r0, [r7, #52]	; 0x34
 8003950:	e004      	b.n	800395c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003952:	f002 ffff 	bl	8006954 <HAL_RCC_GetPCLK1Freq>
 8003956:	4603      	mov	r3, r0
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395e:	4a23      	ldr	r2, [pc, #140]	; (80039ec <HAL_InitTick+0xe4>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	0c9b      	lsrs	r3, r3, #18
 8003966:	3b01      	subs	r3, #1
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800396a:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <HAL_InitTick+0xe8>)
 800396c:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <HAL_InitTick+0xec>)
 800396e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003970:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <HAL_InitTick+0xe8>)
 8003972:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003976:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <HAL_InitTick+0xe8>)
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <HAL_InitTick+0xe8>)
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003984:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <HAL_InitTick+0xe8>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_InitTick+0xe8>)
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003990:	4817      	ldr	r0, [pc, #92]	; (80039f0 <HAL_InitTick+0xe8>)
 8003992:	f004 f81f 	bl	80079d4 <HAL_TIM_Base_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800399c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d11b      	bne.n	80039dc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80039a4:	4812      	ldr	r0, [pc, #72]	; (80039f0 <HAL_InitTick+0xe8>)
 80039a6:	f004 f877 	bl	8007a98 <HAL_TIM_Base_Start_IT>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80039b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d111      	bne.n	80039dc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039b8:	2036      	movs	r0, #54	; 0x36
 80039ba:	f000 fe37 	bl	800462c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b0f      	cmp	r3, #15
 80039c2:	d808      	bhi.n	80039d6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80039c4:	2200      	movs	r2, #0
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	2036      	movs	r0, #54	; 0x36
 80039ca:	f000 fe13 	bl	80045f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039ce:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <HAL_InitTick+0xf0>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e002      	b.n	80039dc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80039dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3738      	adds	r7, #56	; 0x38
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	431bde83 	.word	0x431bde83
 80039f0:	20002400 	.word	0x20002400
 80039f4:	40001000 	.word	0x40001000
 80039f8:	200000a4 	.word	0x200000a4

080039fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003a00:	f003 f81e 	bl	8006a40 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <NMI_Handler+0x8>

08003a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a0a:	e7fe      	b.n	8003a0a <HardFault_Handler+0x4>

08003a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <MemManage_Handler+0x4>

08003a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a16:	e7fe      	b.n	8003a16 <BusFault_Handler+0x4>

08003a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <UsageFault_Handler+0x4>

08003a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <TIM6_DAC_IRQHandler+0x10>)
 8003a32:	f004 f8a1 	bl	8007b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20002400 	.word	0x20002400

08003a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <_sbrk+0x5c>)
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <_sbrk+0x60>)
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <_sbrk+0x64>)
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <_sbrk+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d207      	bcs.n	8003a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a70:	f00b fc8c 	bl	800f38c <__errno>
 8003a74:	4603      	mov	r3, r0
 8003a76:	220c      	movs	r2, #12
 8003a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e009      	b.n	8003a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_sbrk+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <_sbrk+0x64>)
 8003a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20010000 	.word	0x20010000
 8003aa0:	00000400 	.word	0x00000400
 8003aa4:	2000244c 	.word	0x2000244c
 8003aa8:	20004628 	.word	0x20004628

08003aac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <SystemInit+0x20>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <SystemInit+0x20>)
 8003ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ad4:	480d      	ldr	r0, [pc, #52]	; (8003b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8003ad6:	490e      	ldr	r1, [pc, #56]	; (8003b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ad8:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <LoopForever+0xe>)
  movs r3, #0
 8003ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003adc:	e002      	b.n	8003ae4 <LoopCopyDataInit>

08003ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ae2:	3304      	adds	r3, #4

08003ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae8:	d3f9      	bcc.n	8003ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aea:	4a0b      	ldr	r2, [pc, #44]	; (8003b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003aec:	4c0b      	ldr	r4, [pc, #44]	; (8003b1c <LoopForever+0x16>)
  movs r3, #0
 8003aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af0:	e001      	b.n	8003af6 <LoopFillZerobss>

08003af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af4:	3204      	adds	r2, #4

08003af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af8:	d3fb      	bcc.n	8003af2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003afa:	f7ff ffd7 	bl	8003aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003afe:	f00b fc4b 	bl	800f398 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b02:	f7fe f9db 	bl	8001ebc <main>

08003b06 <LoopForever>:

LoopForever:
    b LoopForever
 8003b06:	e7fe      	b.n	8003b06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b10:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8003b14:	08010c08 	.word	0x08010c08
  ldr r2, =_sbss
 8003b18:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8003b1c:	20004624 	.word	0x20004624

08003b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b20:	e7fe      	b.n	8003b20 <ADC1_2_IRQHandler>
	...

08003b24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b28:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <HAL_Init+0x28>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <HAL_Init+0x28>)
 8003b2e:	f043 0310 	orr.w	r3, r3, #16
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b34:	2003      	movs	r0, #3
 8003b36:	f000 fd52 	bl	80045de <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b3a:	200f      	movs	r0, #15
 8003b3c:	f7ff fee4 	bl	8003908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b40:	f7ff fd90 	bl	8003664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40022000 	.word	0x40022000

08003b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_IncTick+0x20>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_IncTick+0x24>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <HAL_IncTick+0x24>)
 8003b62:	6013      	str	r3, [r2, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	200000a8 	.word	0x200000a8
 8003b74:	20002450 	.word	0x20002450

08003b78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <HAL_GetTick+0x14>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	20002450 	.word	0x20002450

08003b90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0ed      	b.n	8003d7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fd80 	bl	80036b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bc4:	f7ff ffd8 	bl	8003b78 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bca:	e012      	b.n	8003bf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003bcc:	f7ff ffd4 	bl	8003b78 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b0a      	cmp	r3, #10
 8003bd8:	d90b      	bls.n	8003bf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2205      	movs	r2, #5
 8003bea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e0c5      	b.n	8003d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0e5      	beq.n	8003bcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0202 	bic.w	r2, r2, #2
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c10:	f7ff ffb2 	bl	8003b78 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c16:	e012      	b.n	8003c3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c18:	f7ff ffae 	bl	8003b78 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b0a      	cmp	r3, #10
 8003c24:	d90b      	bls.n	8003c3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2205      	movs	r2, #5
 8003c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e09f      	b.n	8003d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7e1b      	ldrb	r3, [r3, #24]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d108      	bne.n	8003c66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e007      	b.n	8003c76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7e5b      	ldrb	r3, [r3, #25]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d108      	bne.n	8003c90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e007      	b.n	8003ca0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	7e9b      	ldrb	r3, [r3, #26]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d108      	bne.n	8003cba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0220 	orr.w	r2, r2, #32
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e007      	b.n	8003cca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0220 	bic.w	r2, r2, #32
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7edb      	ldrb	r3, [r3, #27]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d108      	bne.n	8003ce4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0210 	bic.w	r2, r2, #16
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e007      	b.n	8003cf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0210 	orr.w	r2, r2, #16
 8003cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7f1b      	ldrb	r3, [r3, #28]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d108      	bne.n	8003d0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e007      	b.n	8003d1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0208 	bic.w	r2, r2, #8
 8003d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	7f5b      	ldrb	r3, [r3, #29]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d108      	bne.n	8003d38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0204 	orr.w	r2, r2, #4
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e007      	b.n	8003d48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	ea42 0103 	orr.w	r1, r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b087      	sub	sp, #28
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d9c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d9e:	7cfb      	ldrb	r3, [r7, #19]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d003      	beq.n	8003dac <HAL_CAN_ConfigFilter+0x26>
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	f040 80aa 	bne.w	8003f00 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d123      	bne.n	8003e2e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	401a      	ands	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e08:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3248      	adds	r2, #72	; 0x48
 8003e0e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e22:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e24:	6979      	ldr	r1, [r7, #20]
 8003e26:	3348      	adds	r3, #72	; 0x48
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	440b      	add	r3, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d122      	bne.n	8003e7c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3248      	adds	r2, #72	; 0x48
 8003e5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	3348      	adds	r3, #72	; 0x48
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	401a      	ands	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e96:	e007      	b.n	8003ea8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003ec2:	e007      	b.n	8003ed4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ef2:	f023 0201 	bic.w	r2, r3, #1
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e006      	b.n	8003f0e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d12e      	bne.n	8003f8c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2202      	movs	r2, #2
 8003f32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f46:	f7ff fe17 	bl	8003b78 <HAL_GetTick>
 8003f4a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f4c:	e012      	b.n	8003f74 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f4e:	f7ff fe13 	bl	8003b78 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b0a      	cmp	r3, #10
 8003f5a:	d90b      	bls.n	8003f74 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2205      	movs	r2, #5
 8003f6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e012      	b.n	8003f9a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e006      	b.n	8003f9a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b089      	sub	sp, #36	; 0x24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d003      	beq.n	8003fce <HAL_CAN_AddTxMessage+0x2c>
 8003fc6:	7ffb      	ldrb	r3, [r7, #31]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	f040 80b8 	bne.w	800413e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80a0 	beq.w	800412e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	0e1b      	lsrs	r3, r3, #24
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d907      	bls.n	800400e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e09e      	b.n	800414c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800400e:	2201      	movs	r2, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	409a      	lsls	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10d      	bne.n	800403c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	6809      	ldr	r1, [r1, #0]
 800402e:	431a      	orrs	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	3318      	adds	r3, #24
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	440b      	add	r3, r1
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e00f      	b.n	800405c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004046:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800404c:	68f9      	ldr	r1, [r7, #12]
 800404e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004050:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3318      	adds	r3, #24
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	440b      	add	r3, r1
 800405a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3318      	adds	r3, #24
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	440b      	add	r3, r1
 800406c:	3304      	adds	r3, #4
 800406e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	7d1b      	ldrb	r3, [r3, #20]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d111      	bne.n	800409c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3318      	adds	r3, #24
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	4413      	add	r3, r2
 8004084:	3304      	adds	r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	6811      	ldr	r1, [r2, #0]
 800408c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3318      	adds	r3, #24
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	440b      	add	r3, r1
 8004098:	3304      	adds	r3, #4
 800409a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3307      	adds	r3, #7
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	061a      	lsls	r2, r3, #24
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3306      	adds	r3, #6
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3305      	adds	r3, #5
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4313      	orrs	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	3204      	adds	r2, #4
 80040bc:	7812      	ldrb	r2, [r2, #0]
 80040be:	4610      	mov	r0, r2
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	6811      	ldr	r1, [r2, #0]
 80040c4:	ea43 0200 	orr.w	r2, r3, r0
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	440b      	add	r3, r1
 80040ce:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80040d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3303      	adds	r3, #3
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	061a      	lsls	r2, r3, #24
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3302      	adds	r3, #2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	041b      	lsls	r3, r3, #16
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3301      	adds	r3, #1
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	4313      	orrs	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	4610      	mov	r0, r2
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	6811      	ldr	r1, [r2, #0]
 80040fa:	ea43 0200 	orr.w	r2, r3, r0
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	440b      	add	r3, r1
 8004104:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004108:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3318      	adds	r3, #24
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4413      	add	r3, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	6811      	ldr	r1, [r2, #0]
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	3318      	adds	r3, #24
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	440b      	add	r3, r1
 8004128:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e00e      	b.n	800414c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e006      	b.n	800414c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3724      	adds	r7, #36	; 0x24
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800416a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800416c:	7afb      	ldrb	r3, [r7, #11]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d002      	beq.n	8004178 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004172:	7afb      	ldrb	r3, [r7, #11]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d11d      	bne.n	80041b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3301      	adds	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80041b4:	68fb      	ldr	r3, [r7, #12]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041c2:	b480      	push	{r7}
 80041c4:	b087      	sub	sp, #28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d003      	beq.n	80041e6 <HAL_CAN_GetRxMessage+0x24>
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	f040 80f3 	bne.w	80043cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10e      	bne.n	800420a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d116      	bne.n	8004228 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0e7      	b.n	80043da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d107      	bne.n	8004228 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0d8      	b.n	80043da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	331b      	adds	r3, #27
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	4413      	add	r3, r2
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0204 	and.w	r2, r3, #4
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	331b      	adds	r3, #27
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4413      	add	r3, r2
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0d5b      	lsrs	r3, r3, #21
 8004256:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e00b      	b.n	8004278 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	331b      	adds	r3, #27
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	4413      	add	r3, r2
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	08db      	lsrs	r3, r3, #3
 8004270:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	331b      	adds	r3, #27
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	4413      	add	r3, r2
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0202 	and.w	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	331b      	adds	r3, #27
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 020f 	and.w	r2, r3, #15
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	331b      	adds	r3, #27
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4413      	add	r3, r2
 80042b2:	3304      	adds	r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	331b      	adds	r3, #27
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	4413      	add	r3, r2
 80042ca:	3304      	adds	r3, #4
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	4413      	add	r3, r2
 80042e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	0a1a      	lsrs	r2, r3, #8
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	4413      	add	r3, r2
 8004310:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	0c1a      	lsrs	r2, r3, #16
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	3302      	adds	r3, #2
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0e1a      	lsrs	r2, r3, #24
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	3303      	adds	r3, #3
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4413      	add	r3, r2
 8004344:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	3304      	adds	r3, #4
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	4413      	add	r3, r2
 800435c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	0a1a      	lsrs	r2, r3, #8
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	3305      	adds	r3, #5
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	4413      	add	r3, r2
 8004376:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0c1a      	lsrs	r2, r3, #16
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3306      	adds	r3, #6
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	4413      	add	r3, r2
 8004390:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	0e1a      	lsrs	r2, r3, #24
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	3307      	adds	r3, #7
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d108      	bne.n	80043b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0220 	orr.w	r2, r2, #32
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	e007      	b.n	80043c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0220 	orr.w	r2, r2, #32
 80043c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e006      	b.n	80043da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043fa:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80043fc:	7afb      	ldrb	r3, [r7, #11]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d002      	beq.n	8004408 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8004402:	7afb      	ldrb	r3, [r7, #11]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d10f      	bne.n	8004428 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e005      	b.n	8004428 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8004428:	68fb      	ldr	r3, [r7, #12]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004446:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d002      	beq.n	8004454 <HAL_CAN_ActivateNotification+0x1e>
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d109      	bne.n	8004468 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6959      	ldr	r1, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	e006      	b.n	8004476 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a0:	4013      	ands	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <__NVIC_GetPriorityGrouping+0x18>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 0307 	and.w	r3, r3, #7
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	db0b      	blt.n	8004512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4907      	ldr	r1, [pc, #28]	; (8004520 <__NVIC_EnableIRQ+0x38>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2001      	movs	r0, #1
 800450a:	fa00 f202 	lsl.w	r2, r0, r2
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db0a      	blt.n	800454e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	490c      	ldr	r1, [pc, #48]	; (8004570 <__NVIC_SetPriority+0x4c>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	440b      	add	r3, r1
 8004548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800454c:	e00a      	b.n	8004564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4908      	ldr	r1, [pc, #32]	; (8004574 <__NVIC_SetPriority+0x50>)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3b04      	subs	r3, #4
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	440b      	add	r3, r1
 8004562:	761a      	strb	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000e100 	.word	0xe000e100
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f1c3 0307 	rsb	r3, r3, #7
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf28      	it	cs
 8004596:	2304      	movcs	r3, #4
 8004598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3304      	adds	r3, #4
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d902      	bls.n	80045a8 <NVIC_EncodePriority+0x30>
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3b03      	subs	r3, #3
 80045a6:	e000      	b.n	80045aa <NVIC_EncodePriority+0x32>
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	401a      	ands	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c0:	f04f 31ff 	mov.w	r1, #4294967295
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	4313      	orrs	r3, r2
         );
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff ff4c 	bl	8004484 <__NVIC_SetPriorityGrouping>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004606:	f7ff ff61 	bl	80044cc <__NVIC_GetPriorityGrouping>
 800460a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	6978      	ldr	r0, [r7, #20]
 8004612:	f7ff ffb1 	bl	8004578 <NVIC_EncodePriority>
 8004616:	4602      	mov	r2, r0
 8004618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800461c:	4611      	mov	r1, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff80 	bl	8004524 <__NVIC_SetPriority>
}
 8004624:	bf00      	nop
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ff54 	bl	80044e8 <__NVIC_EnableIRQ>
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004656:	e160      	b.n	800491a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	2101      	movs	r1, #1
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	fa01 f303 	lsl.w	r3, r1, r3
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 8152 	beq.w	8004914 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	2b01      	cmp	r3, #1
 800467a:	d005      	beq.n	8004688 <HAL_GPIO_Init+0x40>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d130      	bne.n	80046ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	2203      	movs	r2, #3
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046be:	2201      	movs	r2, #1
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4013      	ands	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 0201 	and.w	r2, r3, #1
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d017      	beq.n	8004726 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	2203      	movs	r2, #3
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d123      	bne.n	800477a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	08da      	lsrs	r2, r3, #3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3208      	adds	r2, #8
 800473a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	220f      	movs	r2, #15
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4013      	ands	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	08da      	lsrs	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3208      	adds	r2, #8
 8004774:	6939      	ldr	r1, [r7, #16]
 8004776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	2203      	movs	r2, #3
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 0203 	and.w	r2, r3, #3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80ac 	beq.w	8004914 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047bc:	4b5e      	ldr	r3, [pc, #376]	; (8004938 <HAL_GPIO_Init+0x2f0>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	4a5d      	ldr	r2, [pc, #372]	; (8004938 <HAL_GPIO_Init+0x2f0>)
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	6193      	str	r3, [r2, #24]
 80047c8:	4b5b      	ldr	r3, [pc, #364]	; (8004938 <HAL_GPIO_Init+0x2f0>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047d4:	4a59      	ldr	r2, [pc, #356]	; (800493c <HAL_GPIO_Init+0x2f4>)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	089b      	lsrs	r3, r3, #2
 80047da:	3302      	adds	r3, #2
 80047dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f003 0303 	and.w	r3, r3, #3
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	220f      	movs	r2, #15
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	43db      	mvns	r3, r3
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4013      	ands	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047fe:	d025      	beq.n	800484c <HAL_GPIO_Init+0x204>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a4f      	ldr	r2, [pc, #316]	; (8004940 <HAL_GPIO_Init+0x2f8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d01f      	beq.n	8004848 <HAL_GPIO_Init+0x200>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a4e      	ldr	r2, [pc, #312]	; (8004944 <HAL_GPIO_Init+0x2fc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d019      	beq.n	8004844 <HAL_GPIO_Init+0x1fc>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a4d      	ldr	r2, [pc, #308]	; (8004948 <HAL_GPIO_Init+0x300>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d013      	beq.n	8004840 <HAL_GPIO_Init+0x1f8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a4c      	ldr	r2, [pc, #304]	; (800494c <HAL_GPIO_Init+0x304>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00d      	beq.n	800483c <HAL_GPIO_Init+0x1f4>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a4b      	ldr	r2, [pc, #300]	; (8004950 <HAL_GPIO_Init+0x308>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <HAL_GPIO_Init+0x1f0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a4a      	ldr	r2, [pc, #296]	; (8004954 <HAL_GPIO_Init+0x30c>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_GPIO_Init+0x1ec>
 8004830:	2306      	movs	r3, #6
 8004832:	e00c      	b.n	800484e <HAL_GPIO_Init+0x206>
 8004834:	2307      	movs	r3, #7
 8004836:	e00a      	b.n	800484e <HAL_GPIO_Init+0x206>
 8004838:	2305      	movs	r3, #5
 800483a:	e008      	b.n	800484e <HAL_GPIO_Init+0x206>
 800483c:	2304      	movs	r3, #4
 800483e:	e006      	b.n	800484e <HAL_GPIO_Init+0x206>
 8004840:	2303      	movs	r3, #3
 8004842:	e004      	b.n	800484e <HAL_GPIO_Init+0x206>
 8004844:	2302      	movs	r3, #2
 8004846:	e002      	b.n	800484e <HAL_GPIO_Init+0x206>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <HAL_GPIO_Init+0x206>
 800484c:	2300      	movs	r3, #0
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	f002 0203 	and.w	r2, r2, #3
 8004854:	0092      	lsls	r2, r2, #2
 8004856:	4093      	lsls	r3, r2
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800485e:	4937      	ldr	r1, [pc, #220]	; (800493c <HAL_GPIO_Init+0x2f4>)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	3302      	adds	r3, #2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800486c:	4b3a      	ldr	r3, [pc, #232]	; (8004958 <HAL_GPIO_Init+0x310>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	43db      	mvns	r3, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004890:	4a31      	ldr	r2, [pc, #196]	; (8004958 <HAL_GPIO_Init+0x310>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004896:	4b30      	ldr	r3, [pc, #192]	; (8004958 <HAL_GPIO_Init+0x310>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	43db      	mvns	r3, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80048ba:	4a27      	ldr	r2, [pc, #156]	; (8004958 <HAL_GPIO_Init+0x310>)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048c0:	4b25      	ldr	r3, [pc, #148]	; (8004958 <HAL_GPIO_Init+0x310>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048e4:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <HAL_GPIO_Init+0x310>)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048ea:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_GPIO_Init+0x310>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <HAL_GPIO_Init+0x310>)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3301      	adds	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f ae97 	bne.w	8004658 <HAL_GPIO_Init+0x10>
  }
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40021000 	.word	0x40021000
 800493c:	40010000 	.word	0x40010000
 8004940:	48000400 	.word	0x48000400
 8004944:	48000800 	.word	0x48000800
 8004948:	48000c00 	.word	0x48000c00
 800494c:	48001000 	.word	0x48001000
 8004950:	48001400 	.word	0x48001400
 8004954:	48001800 	.word	0x48001800
 8004958:	40010400 	.word	0x40010400

0800495c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
 8004968:	4613      	mov	r3, r2
 800496a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800496c:	787b      	ldrb	r3, [r7, #1]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004972:	887a      	ldrh	r2, [r7, #2]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004978:	e002      	b.n	8004980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800497a:	887a      	ldrh	r2, [r7, #2]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e081      	b.n	8004aa2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7fe fec2 	bl	800373c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2224      	movs	r2, #36	; 0x24
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	e006      	b.n	8004a14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d104      	bne.n	8004a26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69d9      	ldr	r1, [r3, #28]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	817b      	strh	r3, [r7, #10]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	813b      	strh	r3, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	f040 80f9 	bne.w	8004cc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_I2C_Mem_Write+0x34>
 8004ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0ed      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_I2C_Mem_Write+0x4e>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e0e6      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x21c>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b02:	f7ff f839 	bl	8003b78 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	2319      	movs	r3, #25
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fac3 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0d1      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2221      	movs	r2, #33	; 0x21
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2240      	movs	r2, #64	; 0x40
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a3a      	ldr	r2, [r7, #32]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b4c:	88f8      	ldrh	r0, [r7, #6]
 8004b4e:	893a      	ldrh	r2, [r7, #8]
 8004b50:	8979      	ldrh	r1, [r7, #10]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f9d3 	bl	8004f08 <I2C_RequestMemoryWrite>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0a9      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2bff      	cmp	r3, #255	; 0xff
 8004b7c:	d90e      	bls.n	8004b9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	22ff      	movs	r2, #255	; 0xff
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	8979      	ldrh	r1, [r7, #10]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fbb5 	bl	8005304 <I2C_TransferConfig>
 8004b9a:	e00f      	b.n	8004bbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	8979      	ldrh	r1, [r7, #10]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 fba4 	bl	8005304 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 faad 	bl	8005120 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e07b      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d034      	beq.n	8004c74 <HAL_I2C_Mem_Write+0x1c8>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d130      	bne.n	8004c74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fa3f 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e04d      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2bff      	cmp	r3, #255	; 0xff
 8004c34:	d90e      	bls.n	8004c54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	22ff      	movs	r2, #255	; 0xff
 8004c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	8979      	ldrh	r1, [r7, #10]
 8004c44:	2300      	movs	r3, #0
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fb59 	bl	8005304 <I2C_TransferConfig>
 8004c52:	e00f      	b.n	8004c74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	8979      	ldrh	r1, [r7, #10]
 8004c66:	2300      	movs	r3, #0
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fb48 	bl	8005304 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d19e      	bne.n	8004bbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fa8c 	bl	80051a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e01a      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2220      	movs	r2, #32
 8004c98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6859      	ldr	r1, [r3, #4]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_I2C_Mem_Write+0x224>)
 8004ca6:	400b      	ands	r3, r1
 8004ca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	fe00e800 	.word	0xfe00e800

08004cd4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	817b      	strh	r3, [r7, #10]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	813b      	strh	r3, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	f040 80fd 	bne.w	8004ef6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_I2C_Mem_Read+0x34>
 8004d02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0f1      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2C_Mem_Read+0x4e>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e0ea      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x224>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fe ff25 	bl	8003b78 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	2319      	movs	r3, #25
 8004d36:	2201      	movs	r2, #1
 8004d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f9af 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0d5      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2222      	movs	r2, #34	; 0x22
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a3a      	ldr	r2, [r7, #32]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d74:	88f8      	ldrh	r0, [r7, #6]
 8004d76:	893a      	ldrh	r2, [r7, #8]
 8004d78:	8979      	ldrh	r1, [r7, #10]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	4603      	mov	r3, r0
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f913 	bl	8004fb0 <I2C_RequestMemoryRead>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0ad      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2bff      	cmp	r3, #255	; 0xff
 8004da4:	d90e      	bls.n	8004dc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	8979      	ldrh	r1, [r7, #10]
 8004db4:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <HAL_I2C_Mem_Read+0x22c>)
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 faa1 	bl	8005304 <I2C_TransferConfig>
 8004dc2:	e00f      	b.n	8004de4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	8979      	ldrh	r1, [r7, #10]
 8004dd6:	4b4a      	ldr	r3, [pc, #296]	; (8004f00 <HAL_I2C_Mem_Read+0x22c>)
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fa90 	bl	8005304 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	2200      	movs	r2, #0
 8004dec:	2104      	movs	r1, #4
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f000 f956 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e07c      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d034      	beq.n	8004ea4 <HAL_I2C_Mem_Read+0x1d0>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d130      	bne.n	8004ea4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2180      	movs	r1, #128	; 0x80
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f927 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e04d      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2bff      	cmp	r3, #255	; 0xff
 8004e64:	d90e      	bls.n	8004e84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	22ff      	movs	r2, #255	; 0xff
 8004e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	8979      	ldrh	r1, [r7, #10]
 8004e74:	2300      	movs	r3, #0
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 fa41 	bl	8005304 <I2C_TransferConfig>
 8004e82:	e00f      	b.n	8004ea4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	8979      	ldrh	r1, [r7, #10]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fa30 	bl	8005304 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d19a      	bne.n	8004de4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f974 	bl	80051a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e01a      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_I2C_Mem_Read+0x230>)
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
  }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	80002400 	.word	0x80002400
 8004f04:	fe00e800 	.word	0xfe00e800

08004f08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	4608      	mov	r0, r1
 8004f12:	4611      	mov	r1, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	817b      	strh	r3, [r7, #10]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	813b      	strh	r3, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	8979      	ldrh	r1, [r7, #10]
 8004f28:	4b20      	ldr	r3, [pc, #128]	; (8004fac <I2C_RequestMemoryWrite+0xa4>)
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f9e7 	bl	8005304 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	69b9      	ldr	r1, [r7, #24]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f8f0 	bl	8005120 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e02c      	b.n	8004fa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d105      	bne.n	8004f5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f50:	893b      	ldrh	r3, [r7, #8]
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	629a      	str	r2, [r3, #40]	; 0x28
 8004f5a:	e015      	b.n	8004f88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f5c:	893b      	ldrh	r3, [r7, #8]
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	69b9      	ldr	r1, [r7, #24]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f8d6 	bl	8005120 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e012      	b.n	8004fa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f7e:	893b      	ldrh	r3, [r7, #8]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2180      	movs	r1, #128	; 0x80
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f884 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	80002000 	.word	0x80002000

08004fb0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	817b      	strh	r3, [r7, #10]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	813b      	strh	r3, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	8979      	ldrh	r1, [r7, #10]
 8004fd0:	4b20      	ldr	r3, [pc, #128]	; (8005054 <I2C_RequestMemoryRead+0xa4>)
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f000 f994 	bl	8005304 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	69b9      	ldr	r1, [r7, #24]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f89d 	bl	8005120 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e02c      	b.n	800504a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d105      	bne.n	8005002 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff6:	893b      	ldrh	r3, [r7, #8]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8005000:	e015      	b.n	800502e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005002:	893b      	ldrh	r3, [r7, #8]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	b29b      	uxth	r3, r3
 8005008:	b2da      	uxtb	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	69b9      	ldr	r1, [r7, #24]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f883 	bl	8005120 <I2C_WaitOnTXISFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e012      	b.n	800504a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005024:	893b      	ldrh	r3, [r7, #8]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2200      	movs	r2, #0
 8005036:	2140      	movs	r1, #64	; 0x40
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f831 	bl	80050a0 <I2C_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	80002000 	.word	0x80002000

08005058 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d103      	bne.n	8005076 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d007      	beq.n	8005094 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	619a      	str	r2, [r3, #24]
  }
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b0:	e022      	b.n	80050f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b8:	d01e      	beq.n	80050f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fe fd5d 	bl	8003b78 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d113      	bne.n	80050f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e00f      	b.n	8005118 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4013      	ands	r3, r2
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	429a      	cmp	r2, r3
 8005106:	bf0c      	ite	eq
 8005108:	2301      	moveq	r3, #1
 800510a:	2300      	movne	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	429a      	cmp	r2, r3
 8005114:	d0cd      	beq.n	80050b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800512c:	e02c      	b.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f870 	bl	8005218 <I2C_IsAcknowledgeFailed>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e02a      	b.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d01e      	beq.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514a:	f7fe fd15 	bl	8003b78 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	d302      	bcc.n	8005160 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d113      	bne.n	8005188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e007      	b.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d1cb      	bne.n	800512e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ac:	e028      	b.n	8005200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f830 	bl	8005218 <I2C_IsAcknowledgeFailed>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e026      	b.n	8005210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fe fcd9 	bl	8003b78 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d113      	bne.n	8005200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051dc:	f043 0220 	orr.w	r2, r3, #32
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e007      	b.n	8005210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b20      	cmp	r3, #32
 800520c:	d1cf      	bne.n	80051ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b10      	cmp	r3, #16
 8005230:	d161      	bne.n	80052f6 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005240:	d02b      	beq.n	800529a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005250:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005252:	e022      	b.n	800529a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	d01e      	beq.n	800529a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525c:	f7fe fc8c 	bl	8003b78 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <I2C_IsAcknowledgeFailed+0x5a>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d113      	bne.n	800529a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e02e      	b.n	80052f8 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d1d5      	bne.n	8005254 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2210      	movs	r2, #16
 80052ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2220      	movs	r2, #32
 80052b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fecd 	bl	8005058 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <I2C_IsAcknowledgeFailed+0xe8>)
 80052ca:	400b      	ands	r3, r1
 80052cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	f043 0204 	orr.w	r2, r3, #4
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	fe00e800 	.word	0xfe00e800

08005304 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	607b      	str	r3, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	817b      	strh	r3, [r7, #10]
 8005312:	4613      	mov	r3, r2
 8005314:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	0d5b      	lsrs	r3, r3, #21
 8005320:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005324:	4b0d      	ldr	r3, [pc, #52]	; (800535c <I2C_TransferConfig+0x58>)
 8005326:	430b      	orrs	r3, r1
 8005328:	43db      	mvns	r3, r3
 800532a:	ea02 0103 	and.w	r1, r2, r3
 800532e:	897b      	ldrh	r3, [r7, #10]
 8005330:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005334:	7a7b      	ldrb	r3, [r7, #9]
 8005336:	041b      	lsls	r3, r3, #16
 8005338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	431a      	orrs	r2, r3
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	03ff63ff 	.word	0x03ff63ff

08005360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b20      	cmp	r3, #32
 8005374:	d138      	bne.n	80053e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005380:	2302      	movs	r3, #2
 8005382:	e032      	b.n	80053ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2224      	movs	r2, #36	; 0x24
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6819      	ldr	r1, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e000      	b.n	80053ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053e8:	2302      	movs	r3, #2
  }
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b20      	cmp	r3, #32
 800540a:	d139      	bne.n	8005480 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005416:	2302      	movs	r3, #2
 8005418:	e033      	b.n	8005482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2224      	movs	r2, #36	; 0x24
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005448:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005480:	2302      	movs	r3, #2
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
	...

08005490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005496:	af00      	add	r7, sp, #0
 8005498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800549c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054a0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f001 b83a 	b.w	800652a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 816f 	beq.w	80057aa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80054cc:	4bb5      	ldr	r3, [pc, #724]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d00c      	beq.n	80054f2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054d8:	4bb2      	ldr	r3, [pc, #712]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 030c 	and.w	r3, r3, #12
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d15c      	bne.n	800559e <HAL_RCC_OscConfig+0x10e>
 80054e4:	4baf      	ldr	r3, [pc, #700]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d155      	bne.n	800559e <HAL_RCC_OscConfig+0x10e>
 80054f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80054fe:	fa93 f3a3 	rbit	r3, r3
 8005502:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005506:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800550a:	fab3 f383 	clz	r3, r3
 800550e:	b2db      	uxtb	r3, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	d102      	bne.n	8005524 <HAL_RCC_OscConfig+0x94>
 800551e:	4ba1      	ldr	r3, [pc, #644]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	e015      	b.n	8005550 <HAL_RCC_OscConfig+0xc0>
 8005524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005528:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005530:	fa93 f3a3 	rbit	r3, r3
 8005534:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005538:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800553c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005540:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800554c:	4b95      	ldr	r3, [pc, #596]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005554:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005558:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800555c:	fa92 f2a2 	rbit	r2, r2
 8005560:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005564:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005568:	fab2 f282 	clz	r2, r2
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	f042 0220 	orr.w	r2, r2, #32
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	f002 021f 	and.w	r2, r2, #31
 8005578:	2101      	movs	r1, #1
 800557a:	fa01 f202 	lsl.w	r2, r1, r2
 800557e:	4013      	ands	r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8111 	beq.w	80057a8 <HAL_RCC_OscConfig+0x318>
 8005586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800558a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 8108 	bne.w	80057a8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	f000 bfc6 	b.w	800652a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800559e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	d106      	bne.n	80055be <HAL_RCC_OscConfig+0x12e>
 80055b0:	4b7c      	ldr	r3, [pc, #496]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a7b      	ldr	r2, [pc, #492]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80055b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e036      	b.n	800562c <HAL_RCC_OscConfig+0x19c>
 80055be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x158>
 80055ce:	4b75      	ldr	r3, [pc, #468]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a74      	ldr	r2, [pc, #464]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80055d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	4b72      	ldr	r3, [pc, #456]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a71      	ldr	r2, [pc, #452]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80055e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	e021      	b.n	800562c <HAL_RCC_OscConfig+0x19c>
 80055e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0x184>
 80055fa:	4b6a      	ldr	r3, [pc, #424]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a69      	ldr	r2, [pc, #420]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 8005600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b67      	ldr	r3, [pc, #412]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a66      	ldr	r2, [pc, #408]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 800560c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e00b      	b.n	800562c <HAL_RCC_OscConfig+0x19c>
 8005614:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a62      	ldr	r2, [pc, #392]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 800561a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4b60      	ldr	r3, [pc, #384]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5f      	ldr	r2, [pc, #380]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 8005626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800562c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005630:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d059      	beq.n	80056f0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fe fa9c 	bl	8003b78 <HAL_GetTick>
 8005640:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005644:	e00a      	b.n	800565c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005646:	f7fe fa97 	bl	8003b78 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b64      	cmp	r3, #100	; 0x64
 8005654:	d902      	bls.n	800565c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	f000 bf67 	b.w	800652a <HAL_RCC_OscConfig+0x109a>
 800565c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005660:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005668:	fa93 f3a3 	rbit	r3, r3
 800566c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005670:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005674:	fab3 f383 	clz	r3, r3
 8005678:	b2db      	uxtb	r3, r3
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <HAL_RCC_OscConfig+0x1fe>
 8005688:	4b46      	ldr	r3, [pc, #280]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	e015      	b.n	80056ba <HAL_RCC_OscConfig+0x22a>
 800568e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005692:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800569a:	fa93 f3a3 	rbit	r3, r3
 800569e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80056a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80056aa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80056b6:	4b3b      	ldr	r3, [pc, #236]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056be:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80056c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80056c6:	fa92 f2a2 	rbit	r2, r2
 80056ca:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80056ce:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80056d2:	fab2 f282 	clz	r2, r2
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	f042 0220 	orr.w	r2, r2, #32
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	f002 021f 	and.w	r2, r2, #31
 80056e2:	2101      	movs	r1, #1
 80056e4:	fa01 f202 	lsl.w	r2, r1, r2
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ab      	beq.n	8005646 <HAL_RCC_OscConfig+0x1b6>
 80056ee:	e05c      	b.n	80057aa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fe fa42 	bl	8003b78 <HAL_GetTick>
 80056f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056f8:	e00a      	b.n	8005710 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056fa:	f7fe fa3d 	bl	8003b78 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	; 0x64
 8005708:	d902      	bls.n	8005710 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	f000 bf0d 	b.w	800652a <HAL_RCC_OscConfig+0x109a>
 8005710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005714:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005724:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005728:	fab3 f383 	clz	r3, r3
 800572c:	b2db      	uxtb	r3, r3
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d102      	bne.n	8005742 <HAL_RCC_OscConfig+0x2b2>
 800573c:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	e015      	b.n	800576e <HAL_RCC_OscConfig+0x2de>
 8005742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005746:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005756:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800575a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800575e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005762:	fa93 f3a3 	rbit	r3, r3
 8005766:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800576a:	4b0e      	ldr	r3, [pc, #56]	; (80057a4 <HAL_RCC_OscConfig+0x314>)
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005772:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005776:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800577a:	fa92 f2a2 	rbit	r2, r2
 800577e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8005782:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005786:	fab2 f282 	clz	r2, r2
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	f042 0220 	orr.w	r2, r2, #32
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	f002 021f 	and.w	r2, r2, #31
 8005796:	2101      	movs	r1, #1
 8005798:	fa01 f202 	lsl.w	r2, r1, r2
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1ab      	bne.n	80056fa <HAL_RCC_OscConfig+0x26a>
 80057a2:	e002      	b.n	80057aa <HAL_RCC_OscConfig+0x31a>
 80057a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 817f 	beq.w	8005abe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80057c0:	4ba7      	ldr	r3, [pc, #668]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00c      	beq.n	80057e6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80057cc:	4ba4      	ldr	r3, [pc, #656]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 030c 	and.w	r3, r3, #12
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d173      	bne.n	80058c0 <HAL_RCC_OscConfig+0x430>
 80057d8:	4ba1      	ldr	r3, [pc, #644]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	d16c      	bne.n	80058c0 <HAL_RCC_OscConfig+0x430>
 80057e6:	2302      	movs	r3, #2
 80057e8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80057f0:	fa93 f3a3 	rbit	r3, r3
 80057f4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80057f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fc:	fab3 f383 	clz	r3, r3
 8005800:	b2db      	uxtb	r3, r3
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	b2db      	uxtb	r3, r3
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d102      	bne.n	8005816 <HAL_RCC_OscConfig+0x386>
 8005810:	4b93      	ldr	r3, [pc, #588]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	e013      	b.n	800583e <HAL_RCC_OscConfig+0x3ae>
 8005816:	2302      	movs	r3, #2
 8005818:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005820:	fa93 f3a3 	rbit	r3, r3
 8005824:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005828:	2302      	movs	r3, #2
 800582a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800582e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005832:	fa93 f3a3 	rbit	r3, r3
 8005836:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800583a:	4b89      	ldr	r3, [pc, #548]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2202      	movs	r2, #2
 8005840:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005844:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005848:	fa92 f2a2 	rbit	r2, r2
 800584c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005850:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005854:	fab2 f282 	clz	r2, r2
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	f042 0220 	orr.w	r2, r2, #32
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	f002 021f 	and.w	r2, r2, #31
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f202 	lsl.w	r2, r1, r2
 800586a:	4013      	ands	r3, r2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <HAL_RCC_OscConfig+0x3f6>
 8005870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005874:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d002      	beq.n	8005886 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	f000 be52 	b.w	800652a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005886:	4b76      	ldr	r3, [pc, #472]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800588e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005892:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	21f8      	movs	r1, #248	; 0xf8
 800589c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80058a4:	fa91 f1a1 	rbit	r1, r1
 80058a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80058ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80058b0:	fab1 f181 	clz	r1, r1
 80058b4:	b2c9      	uxtb	r1, r1
 80058b6:	408b      	lsls	r3, r1
 80058b8:	4969      	ldr	r1, [pc, #420]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	e0fe      	b.n	8005abe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8088 	beq.w	80059e2 <HAL_RCC_OscConfig+0x552>
 80058d2:	2301      	movs	r3, #1
 80058d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80058dc:	fa93 f3a3 	rbit	r3, r3
 80058e0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80058e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e8:	fab3 f383 	clz	r3, r3
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	461a      	mov	r2, r3
 80058fa:	2301      	movs	r3, #1
 80058fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fe f93b 	bl	8003b78 <HAL_GetTick>
 8005902:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005906:	e00a      	b.n	800591e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005908:	f7fe f936 	bl	8003b78 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d902      	bls.n	800591e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	f000 be06 	b.w	800652a <HAL_RCC_OscConfig+0x109a>
 800591e:	2302      	movs	r3, #2
 8005920:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005928:	fa93 f3a3 	rbit	r3, r3
 800592c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005930:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005934:	fab3 f383 	clz	r3, r3
 8005938:	b2db      	uxtb	r3, r3
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d102      	bne.n	800594e <HAL_RCC_OscConfig+0x4be>
 8005948:	4b45      	ldr	r3, [pc, #276]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	e013      	b.n	8005976 <HAL_RCC_OscConfig+0x4e6>
 800594e:	2302      	movs	r3, #2
 8005950:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005954:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005958:	fa93 f3a3 	rbit	r3, r3
 800595c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005960:	2302      	movs	r3, #2
 8005962:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005966:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800596a:	fa93 f3a3 	rbit	r3, r3
 800596e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005972:	4b3b      	ldr	r3, [pc, #236]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2202      	movs	r2, #2
 8005978:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800597c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005980:	fa92 f2a2 	rbit	r2, r2
 8005984:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005988:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800598c:	fab2 f282 	clz	r2, r2
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	f042 0220 	orr.w	r2, r2, #32
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	f002 021f 	and.w	r2, r2, #31
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f202 	lsl.w	r2, r1, r2
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0af      	beq.n	8005908 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a8:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	21f8      	movs	r1, #248	; 0xf8
 80059be:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80059c6:	fa91 f1a1 	rbit	r1, r1
 80059ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80059ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80059d2:	fab1 f181 	clz	r1, r1
 80059d6:	b2c9      	uxtb	r1, r1
 80059d8:	408b      	lsls	r3, r1
 80059da:	4921      	ldr	r1, [pc, #132]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]
 80059e0:	e06d      	b.n	8005abe <HAL_RCC_OscConfig+0x62e>
 80059e2:	2301      	movs	r3, #1
 80059e4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80059ec:	fa93 f3a3 	rbit	r3, r3
 80059f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80059f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059f8:	fab3 f383 	clz	r3, r3
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0e:	f7fe f8b3 	bl	8003b78 <HAL_GetTick>
 8005a12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a18:	f7fe f8ae 	bl	8003b78 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d902      	bls.n	8005a2e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	f000 bd7e 	b.w	800652a <HAL_RCC_OscConfig+0x109a>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a38:	fa93 f3a3 	rbit	r3, r3
 8005a3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005a40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a44:	fab3 f383 	clz	r3, r3
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <HAL_RCC_OscConfig+0x5d4>
 8005a58:	4b01      	ldr	r3, [pc, #4]	; (8005a60 <HAL_RCC_OscConfig+0x5d0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	e016      	b.n	8005a8c <HAL_RCC_OscConfig+0x5fc>
 8005a5e:	bf00      	nop
 8005a60:	40021000 	.word	0x40021000
 8005a64:	2302      	movs	r3, #2
 8005a66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a76:	2302      	movs	r3, #2
 8005a78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a80:	fa93 f3a3 	rbit	r3, r3
 8005a84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005a88:	4bbf      	ldr	r3, [pc, #764]	; (8005d88 <HAL_RCC_OscConfig+0x8f8>)
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005a92:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005a96:	fa92 f2a2 	rbit	r2, r2
 8005a9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005a9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005aa2:	fab2 f282 	clz	r2, r2
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	f042 0220 	orr.w	r2, r2, #32
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	f002 021f 	and.w	r2, r2, #31
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1ac      	bne.n	8005a18 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ac2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8113 	beq.w	8005cfa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d07c      	beq.n	8005bde <HAL_RCC_OscConfig+0x74e>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aee:	fa93 f3a3 	rbit	r3, r3
 8005af2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005af6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afa:	fab3 f383 	clz	r3, r3
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	4ba2      	ldr	r3, [pc, #648]	; (8005d8c <HAL_RCC_OscConfig+0x8fc>)
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0e:	f7fe f833 	bl	8003b78 <HAL_GetTick>
 8005b12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b16:	e00a      	b.n	8005b2e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b18:	f7fe f82e 	bl	8003b78 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d902      	bls.n	8005b2e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	f000 bcfe 	b.w	800652a <HAL_RCC_OscConfig+0x109a>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b38:	fa93 f2a3 	rbit	r2, r3
 8005b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b4e:	2202      	movs	r2, #2
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	fa93 f2a3 	rbit	r2, r3
 8005b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b72:	2202      	movs	r2, #2
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	fa93 f2a3 	rbit	r2, r3
 8005b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b8e:	4b7e      	ldr	r3, [pc, #504]	; (8005d88 <HAL_RCC_OscConfig+0x8f8>)
 8005b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	6019      	str	r1, [r3, #0]
 8005b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ba2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	fa93 f1a3 	rbit	r1, r3
 8005bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005bb4:	6019      	str	r1, [r3, #0]
  return result;
 8005bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	fab3 f383 	clz	r3, r3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 031f 	and.w	r3, r3, #31
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d09d      	beq.n	8005b18 <HAL_RCC_OscConfig+0x688>
 8005bdc:	e08d      	b.n	8005cfa <HAL_RCC_OscConfig+0x86a>
 8005bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005be2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	fa93 f2a3 	rbit	r2, r3
 8005bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bfc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c00:	601a      	str	r2, [r3, #0]
  return result;
 8005c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005c0a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c0c:	fab3 f383 	clz	r3, r3
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	4b5d      	ldr	r3, [pc, #372]	; (8005d8c <HAL_RCC_OscConfig+0x8fc>)
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c20:	f7fd ffaa 	bl	8003b78 <HAL_GetTick>
 8005c24:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c28:	e00a      	b.n	8005c40 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c2a:	f7fd ffa5 	bl	8003b78 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d902      	bls.n	8005c40 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	f000 bc75 	b.w	800652a <HAL_RCC_OscConfig+0x109a>
 8005c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c48:	2202      	movs	r2, #2
 8005c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c50:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	fa93 f2a3 	rbit	r2, r3
 8005c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	fa93 f2a3 	rbit	r2, r3
 8005c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005c90:	2202      	movs	r2, #2
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	fa93 f2a3 	rbit	r2, r3
 8005ca2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ca6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005caa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cac:	4b36      	ldr	r3, [pc, #216]	; (8005d88 <HAL_RCC_OscConfig+0x8f8>)
 8005cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005cb8:	2102      	movs	r1, #2
 8005cba:	6019      	str	r1, [r3, #0]
 8005cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	fa93 f1a3 	rbit	r1, r3
 8005cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cce:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005cd2:	6019      	str	r1, [r3, #0]
  return result;
 8005cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cd8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	fab3 f383 	clz	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2101      	movs	r1, #1
 8005cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d197      	bne.n	8005c2a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 81a5 	beq.w	800605a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d10:	2300      	movs	r3, #0
 8005d12:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d16:	4b1c      	ldr	r3, [pc, #112]	; (8005d88 <HAL_RCC_OscConfig+0x8f8>)
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d116      	bne.n	8005d50 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d22:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <HAL_RCC_OscConfig+0x8f8>)
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <HAL_RCC_OscConfig+0x8f8>)
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	61d3      	str	r3, [r2, #28]
 8005d2e:	4b16      	ldr	r3, [pc, #88]	; (8005d88 <HAL_RCC_OscConfig+0x8f8>)
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d48:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4b0f      	ldr	r3, [pc, #60]	; (8005d90 <HAL_RCC_OscConfig+0x900>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d121      	bne.n	8005da0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <HAL_RCC_OscConfig+0x900>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0b      	ldr	r2, [pc, #44]	; (8005d90 <HAL_RCC_OscConfig+0x900>)
 8005d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d66:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d68:	f7fd ff06 	bl	8003b78 <HAL_GetTick>
 8005d6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d70:	e010      	b.n	8005d94 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d72:	f7fd ff01 	bl	8003b78 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b64      	cmp	r3, #100	; 0x64
 8005d80:	d908      	bls.n	8005d94 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e3d1      	b.n	800652a <HAL_RCC_OscConfig+0x109a>
 8005d86:	bf00      	nop
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	10908120 	.word	0x10908120
 8005d90:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d94:	4b8d      	ldr	r3, [pc, #564]	; (8005fcc <HAL_RCC_OscConfig+0xb3c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0e8      	beq.n	8005d72 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005da4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d106      	bne.n	8005dbe <HAL_RCC_OscConfig+0x92e>
 8005db0:	4b87      	ldr	r3, [pc, #540]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	4a86      	ldr	r2, [pc, #536]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6213      	str	r3, [r2, #32]
 8005dbc:	e035      	b.n	8005e2a <HAL_RCC_OscConfig+0x99a>
 8005dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10c      	bne.n	8005de8 <HAL_RCC_OscConfig+0x958>
 8005dce:	4b80      	ldr	r3, [pc, #512]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	4a7f      	ldr	r2, [pc, #508]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	6213      	str	r3, [r2, #32]
 8005dda:	4b7d      	ldr	r3, [pc, #500]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	4a7c      	ldr	r2, [pc, #496]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005de0:	f023 0304 	bic.w	r3, r3, #4
 8005de4:	6213      	str	r3, [r2, #32]
 8005de6:	e020      	b.n	8005e2a <HAL_RCC_OscConfig+0x99a>
 8005de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	d10c      	bne.n	8005e12 <HAL_RCC_OscConfig+0x982>
 8005df8:	4b75      	ldr	r3, [pc, #468]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	4a74      	ldr	r2, [pc, #464]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005dfe:	f043 0304 	orr.w	r3, r3, #4
 8005e02:	6213      	str	r3, [r2, #32]
 8005e04:	4b72      	ldr	r3, [pc, #456]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	4a71      	ldr	r2, [pc, #452]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6213      	str	r3, [r2, #32]
 8005e10:	e00b      	b.n	8005e2a <HAL_RCC_OscConfig+0x99a>
 8005e12:	4b6f      	ldr	r3, [pc, #444]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	4a6e      	ldr	r2, [pc, #440]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	6213      	str	r3, [r2, #32]
 8005e1e:	4b6c      	ldr	r3, [pc, #432]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	4a6b      	ldr	r2, [pc, #428]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005e24:	f023 0304 	bic.w	r3, r3, #4
 8005e28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8081 	beq.w	8005f3e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e3c:	f7fd fe9c 	bl	8003b78 <HAL_GetTick>
 8005e40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e44:	e00b      	b.n	8005e5e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e46:	f7fd fe97 	bl	8003b78 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e365      	b.n	800652a <HAL_RCC_OscConfig+0x109a>
 8005e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005e66:	2202      	movs	r2, #2
 8005e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e6e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	fa93 f2a3 	rbit	r2, r3
 8005e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005e80:	601a      	str	r2, [r3, #0]
 8005e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e92:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	fa93 f2a3 	rbit	r2, r3
 8005e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ea0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005ea4:	601a      	str	r2, [r3, #0]
  return result;
 8005ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005eaa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005eae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb0:	fab3 f383 	clz	r3, r3
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	095b      	lsrs	r3, r3, #5
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f043 0302 	orr.w	r3, r3, #2
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d102      	bne.n	8005eca <HAL_RCC_OscConfig+0xa3a>
 8005ec4:	4b42      	ldr	r3, [pc, #264]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	e013      	b.n	8005ef2 <HAL_RCC_OscConfig+0xa62>
 8005eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ece:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005eda:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	fa93 f2a3 	rbit	r2, r3
 8005ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ee8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	4b38      	ldr	r3, [pc, #224]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005ef6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005efa:	2102      	movs	r1, #2
 8005efc:	6011      	str	r1, [r2, #0]
 8005efe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f02:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	fa92 f1a2 	rbit	r1, r2
 8005f0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f10:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005f14:	6011      	str	r1, [r2, #0]
  return result;
 8005f16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f1a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005f1e:	6812      	ldr	r2, [r2, #0]
 8005f20:	fab2 f282 	clz	r2, r2
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	f002 021f 	and.w	r2, r2, #31
 8005f30:	2101      	movs	r1, #1
 8005f32:	fa01 f202 	lsl.w	r2, r1, r2
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d084      	beq.n	8005e46 <HAL_RCC_OscConfig+0x9b6>
 8005f3c:	e083      	b.n	8006046 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3e:	f7fd fe1b 	bl	8003b78 <HAL_GetTick>
 8005f42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f46:	e00b      	b.n	8005f60 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f48:	f7fd fe16 	bl	8003b78 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e2e4      	b.n	800652a <HAL_RCC_OscConfig+0x109a>
 8005f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005f68:	2202      	movs	r2, #2
 8005f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f70:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	fa93 f2a3 	rbit	r2, r3
 8005f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f94:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	fa93 f2a3 	rbit	r2, r3
 8005f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fa2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005fa6:	601a      	str	r2, [r3, #0]
  return result;
 8005fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fac:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005fb0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb2:	fab3 f383 	clz	r3, r3
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d106      	bne.n	8005fd4 <HAL_RCC_OscConfig+0xb44>
 8005fc6:	4b02      	ldr	r3, [pc, #8]	; (8005fd0 <HAL_RCC_OscConfig+0xb40>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	e017      	b.n	8005ffc <HAL_RCC_OscConfig+0xb6c>
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005fdc:	2202      	movs	r2, #2
 8005fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fe4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	fa93 f2a3 	rbit	r2, r3
 8005fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ff2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	4bb3      	ldr	r3, [pc, #716]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006000:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006004:	2102      	movs	r1, #2
 8006006:	6011      	str	r1, [r2, #0]
 8006008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800600c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	fa92 f1a2 	rbit	r1, r2
 8006016:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800601a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800601e:	6011      	str	r1, [r2, #0]
  return result;
 8006020:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006024:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006028:	6812      	ldr	r2, [r2, #0]
 800602a:	fab2 f282 	clz	r2, r2
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	f002 021f 	and.w	r2, r2, #31
 800603a:	2101      	movs	r1, #1
 800603c:	fa01 f202 	lsl.w	r2, r1, r2
 8006040:	4013      	ands	r3, r2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d180      	bne.n	8005f48 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006046:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800604a:	2b01      	cmp	r3, #1
 800604c:	d105      	bne.n	800605a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800604e:	4b9e      	ldr	r3, [pc, #632]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	4a9d      	ldr	r2, [pc, #628]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 8006054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006058:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800605a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800605e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 825e 	beq.w	8006528 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800606c:	4b96      	ldr	r3, [pc, #600]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b08      	cmp	r3, #8
 8006076:	f000 821f 	beq.w	80064b8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800607a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800607e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	2b02      	cmp	r3, #2
 8006088:	f040 8170 	bne.w	800636c <HAL_RCC_OscConfig+0xedc>
 800608c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006090:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800609e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	fa93 f2a3 	rbit	r2, r3
 80060a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80060b0:	601a      	str	r2, [r3, #0]
  return result;
 80060b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80060ba:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060bc:	fab3 f383 	clz	r3, r3
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	461a      	mov	r2, r3
 80060ce:	2300      	movs	r3, #0
 80060d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d2:	f7fd fd51 	bl	8003b78 <HAL_GetTick>
 80060d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060da:	e009      	b.n	80060f0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fd fd4c 	bl	8003b78 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e21c      	b.n	800652a <HAL_RCC_OscConfig+0x109a>
 80060f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80060f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006102:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	fa93 f2a3 	rbit	r2, r3
 800610c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006110:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006114:	601a      	str	r2, [r3, #0]
  return result;
 8006116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800611a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800611e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006120:	fab3 f383 	clz	r3, r3
 8006124:	b2db      	uxtb	r3, r3
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f043 0301 	orr.w	r3, r3, #1
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d102      	bne.n	800613a <HAL_RCC_OscConfig+0xcaa>
 8006134:	4b64      	ldr	r3, [pc, #400]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	e027      	b.n	800618a <HAL_RCC_OscConfig+0xcfa>
 800613a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800613e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006142:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800614c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	fa93 f2a3 	rbit	r2, r3
 8006156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800615a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006164:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006168:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006172:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	fa93 f2a3 	rbit	r2, r3
 800617c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006180:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	4b50      	ldr	r3, [pc, #320]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800618e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006192:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006196:	6011      	str	r1, [r2, #0]
 8006198:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800619c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	fa92 f1a2 	rbit	r1, r2
 80061a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80061aa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80061ae:	6011      	str	r1, [r2, #0]
  return result;
 80061b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80061b4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	fab2 f282 	clz	r2, r2
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	f042 0220 	orr.w	r2, r2, #32
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	f002 021f 	and.w	r2, r2, #31
 80061ca:	2101      	movs	r1, #1
 80061cc:	fa01 f202 	lsl.w	r2, r1, r2
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d182      	bne.n	80060dc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d6:	4b3c      	ldr	r3, [pc, #240]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	f023 020f 	bic.w	r2, r3, #15
 80061de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	4937      	ldr	r1, [pc, #220]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 80061f0:	4b35      	ldr	r3, [pc, #212]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80061f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a19      	ldr	r1, [r3, #32]
 8006204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006208:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	430b      	orrs	r3, r1
 8006212:	492d      	ldr	r1, [pc, #180]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 8006214:	4313      	orrs	r3, r2
 8006216:	604b      	str	r3, [r1, #4]
 8006218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800621c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800622a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	fa93 f2a3 	rbit	r2, r3
 8006234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006238:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800623c:	601a      	str	r2, [r3, #0]
  return result;
 800623e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006242:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006246:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006248:	fab3 f383 	clz	r3, r3
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006252:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	461a      	mov	r2, r3
 800625a:	2301      	movs	r3, #1
 800625c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625e:	f7fd fc8b 	bl	8003b78 <HAL_GetTick>
 8006262:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006266:	e009      	b.n	800627c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006268:	f7fd fc86 	bl	8003b78 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e156      	b.n	800652a <HAL_RCC_OscConfig+0x109a>
 800627c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006280:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006284:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006288:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800628e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	fa93 f2a3 	rbit	r2, r3
 8006298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800629c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80062a0:	601a      	str	r2, [r3, #0]
  return result;
 80062a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062a6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80062aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062ac:	fab3 f383 	clz	r3, r3
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d105      	bne.n	80062cc <HAL_RCC_OscConfig+0xe3c>
 80062c0:	4b01      	ldr	r3, [pc, #4]	; (80062c8 <HAL_RCC_OscConfig+0xe38>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	e02a      	b.n	800631c <HAL_RCC_OscConfig+0xe8c>
 80062c6:	bf00      	nop
 80062c8:	40021000 	.word	0x40021000
 80062cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80062d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062de:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	fa93 f2a3 	rbit	r2, r3
 80062e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062ec:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80062fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006304:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	fa93 f2a3 	rbit	r2, r3
 800630e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006312:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	4b86      	ldr	r3, [pc, #536]	; (8006534 <HAL_RCC_OscConfig+0x10a4>)
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006320:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006324:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006328:	6011      	str	r1, [r2, #0]
 800632a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800632e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	fa92 f1a2 	rbit	r1, r2
 8006338:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800633c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006340:	6011      	str	r1, [r2, #0]
  return result;
 8006342:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006346:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	fab2 f282 	clz	r2, r2
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	f042 0220 	orr.w	r2, r2, #32
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	f002 021f 	and.w	r2, r2, #31
 800635c:	2101      	movs	r1, #1
 800635e:	fa01 f202 	lsl.w	r2, r1, r2
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	f43f af7f 	beq.w	8006268 <HAL_RCC_OscConfig+0xdd8>
 800636a:	e0dd      	b.n	8006528 <HAL_RCC_OscConfig+0x1098>
 800636c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006370:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800637e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	fa93 f2a3 	rbit	r2, r3
 8006388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800638c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006390:	601a      	str	r2, [r3, #0]
  return result;
 8006392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006396:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800639a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639c:	fab3 f383 	clz	r3, r3
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	461a      	mov	r2, r3
 80063ae:	2300      	movs	r3, #0
 80063b0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b2:	f7fd fbe1 	bl	8003b78 <HAL_GetTick>
 80063b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063ba:	e009      	b.n	80063d0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063bc:	f7fd fbdc 	bl	8003b78 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0ac      	b.n	800652a <HAL_RCC_OscConfig+0x109a>
 80063d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80063d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	fa93 f2a3 	rbit	r2, r3
 80063ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063f0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80063f4:	601a      	str	r2, [r3, #0]
  return result;
 80063f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063fa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80063fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006400:	fab3 f383 	clz	r3, r3
 8006404:	b2db      	uxtb	r3, r3
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	b2db      	uxtb	r3, r3
 800640a:	f043 0301 	orr.w	r3, r3, #1
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b01      	cmp	r3, #1
 8006412:	d102      	bne.n	800641a <HAL_RCC_OscConfig+0xf8a>
 8006414:	4b47      	ldr	r3, [pc, #284]	; (8006534 <HAL_RCC_OscConfig+0x10a4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	e027      	b.n	800646a <HAL_RCC_OscConfig+0xfda>
 800641a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800641e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800642c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	fa93 f2a3 	rbit	r2, r3
 8006436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800643a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006444:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006452:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	fa93 f2a3 	rbit	r2, r3
 800645c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006460:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	4b33      	ldr	r3, [pc, #204]	; (8006534 <HAL_RCC_OscConfig+0x10a4>)
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800646e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006472:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006476:	6011      	str	r1, [r2, #0]
 8006478:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800647c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006480:	6812      	ldr	r2, [r2, #0]
 8006482:	fa92 f1a2 	rbit	r1, r2
 8006486:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800648a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800648e:	6011      	str	r1, [r2, #0]
  return result;
 8006490:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006494:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	fab2 f282 	clz	r2, r2
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	f042 0220 	orr.w	r2, r2, #32
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	f002 021f 	and.w	r2, r2, #31
 80064aa:	2101      	movs	r1, #1
 80064ac:	fa01 f202 	lsl.w	r2, r1, r2
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d182      	bne.n	80063bc <HAL_RCC_OscConfig+0xf2c>
 80064b6:	e037      	b.n	8006528 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e02e      	b.n	800652a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80064cc:	4b19      	ldr	r3, [pc, #100]	; (8006534 <HAL_RCC_OscConfig+0x10a4>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80064d4:	4b17      	ldr	r3, [pc, #92]	; (8006534 <HAL_RCC_OscConfig+0x10a4>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80064dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80064e0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80064e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d117      	bne.n	8006524 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80064f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80064f8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80064fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006500:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006508:	429a      	cmp	r2, r3
 800650a:	d10b      	bne.n	8006524 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800650c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006510:	f003 020f 	and.w	r2, r3, #15
 8006514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006518:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006520:	429a      	cmp	r2, r3
 8006522:	d001      	beq.n	8006528 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	40021000 	.word	0x40021000

08006538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b09e      	sub	sp, #120	; 0x78
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e162      	b.n	8006816 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006550:	4b90      	ldr	r3, [pc, #576]	; (8006794 <HAL_RCC_ClockConfig+0x25c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d910      	bls.n	8006580 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b8d      	ldr	r3, [pc, #564]	; (8006794 <HAL_RCC_ClockConfig+0x25c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f023 0207 	bic.w	r2, r3, #7
 8006566:	498b      	ldr	r1, [pc, #556]	; (8006794 <HAL_RCC_ClockConfig+0x25c>)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	4313      	orrs	r3, r2
 800656c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656e:	4b89      	ldr	r3, [pc, #548]	; (8006794 <HAL_RCC_ClockConfig+0x25c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	d001      	beq.n	8006580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e14a      	b.n	8006816 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d008      	beq.n	800659e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800658c:	4b82      	ldr	r3, [pc, #520]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	497f      	ldr	r1, [pc, #508]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 800659a:	4313      	orrs	r3, r2
 800659c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80dc 	beq.w	8006764 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d13c      	bne.n	800662e <HAL_RCC_ClockConfig+0xf6>
 80065b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065bc:	fa93 f3a3 	rbit	r3, r3
 80065c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80065c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c4:	fab3 f383 	clz	r3, r3
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d102      	bne.n	80065de <HAL_RCC_ClockConfig+0xa6>
 80065d8:	4b6f      	ldr	r3, [pc, #444]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	e00f      	b.n	80065fe <HAL_RCC_ClockConfig+0xc6>
 80065de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065e6:	fa93 f3a3 	rbit	r3, r3
 80065ea:	667b      	str	r3, [r7, #100]	; 0x64
 80065ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065f0:	663b      	str	r3, [r7, #96]	; 0x60
 80065f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f4:	fa93 f3a3 	rbit	r3, r3
 80065f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065fa:	4b67      	ldr	r3, [pc, #412]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006602:	65ba      	str	r2, [r7, #88]	; 0x58
 8006604:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006606:	fa92 f2a2 	rbit	r2, r2
 800660a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800660c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800660e:	fab2 f282 	clz	r2, r2
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	f042 0220 	orr.w	r2, r2, #32
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	f002 021f 	and.w	r2, r2, #31
 800661e:	2101      	movs	r1, #1
 8006620:	fa01 f202 	lsl.w	r2, r1, r2
 8006624:	4013      	ands	r3, r2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d17b      	bne.n	8006722 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e0f3      	b.n	8006816 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d13c      	bne.n	80066b0 <HAL_RCC_ClockConfig+0x178>
 8006636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800663a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663e:	fa93 f3a3 	rbit	r3, r3
 8006642:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006646:	fab3 f383 	clz	r3, r3
 800664a:	b2db      	uxtb	r3, r3
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f043 0301 	orr.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b01      	cmp	r3, #1
 8006658:	d102      	bne.n	8006660 <HAL_RCC_ClockConfig+0x128>
 800665a:	4b4f      	ldr	r3, [pc, #316]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	e00f      	b.n	8006680 <HAL_RCC_ClockConfig+0x148>
 8006660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006668:	fa93 f3a3 	rbit	r3, r3
 800666c:	647b      	str	r3, [r7, #68]	; 0x44
 800666e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006672:	643b      	str	r3, [r7, #64]	; 0x40
 8006674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006676:	fa93 f3a3 	rbit	r3, r3
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667c:	4b46      	ldr	r3, [pc, #280]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006684:	63ba      	str	r2, [r7, #56]	; 0x38
 8006686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006688:	fa92 f2a2 	rbit	r2, r2
 800668c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800668e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006690:	fab2 f282 	clz	r2, r2
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	f042 0220 	orr.w	r2, r2, #32
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	f002 021f 	and.w	r2, r2, #31
 80066a0:	2101      	movs	r1, #1
 80066a2:	fa01 f202 	lsl.w	r2, r1, r2
 80066a6:	4013      	ands	r3, r2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d13a      	bne.n	8006722 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0b2      	b.n	8006816 <HAL_RCC_ClockConfig+0x2de>
 80066b0:	2302      	movs	r3, #2
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	fa93 f3a3 	rbit	r3, r3
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066be:	fab3 f383 	clz	r3, r3
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d102      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x1a0>
 80066d2:	4b31      	ldr	r3, [pc, #196]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	e00d      	b.n	80066f4 <HAL_RCC_ClockConfig+0x1bc>
 80066d8:	2302      	movs	r3, #2
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	fa93 f3a3 	rbit	r3, r3
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
 80066e4:	2302      	movs	r3, #2
 80066e6:	623b      	str	r3, [r7, #32]
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	fa93 f3a3 	rbit	r3, r3
 80066ee:	61fb      	str	r3, [r7, #28]
 80066f0:	4b29      	ldr	r3, [pc, #164]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2202      	movs	r2, #2
 80066f6:	61ba      	str	r2, [r7, #24]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	fa92 f2a2 	rbit	r2, r2
 80066fe:	617a      	str	r2, [r7, #20]
  return result;
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	fab2 f282 	clz	r2, r2
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	f042 0220 	orr.w	r2, r2, #32
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	f002 021f 	and.w	r2, r2, #31
 8006712:	2101      	movs	r1, #1
 8006714:	fa01 f202 	lsl.w	r2, r1, r2
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e079      	b.n	8006816 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006722:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f023 0203 	bic.w	r2, r3, #3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	491a      	ldr	r1, [pc, #104]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 8006730:	4313      	orrs	r3, r2
 8006732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006734:	f7fd fa20 	bl	8003b78 <HAL_GetTick>
 8006738:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673a:	e00a      	b.n	8006752 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800673c:	f7fd fa1c 	bl	8003b78 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	; 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e061      	b.n	8006816 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006752:	4b11      	ldr	r3, [pc, #68]	; (8006798 <HAL_RCC_ClockConfig+0x260>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f003 020c 	and.w	r2, r3, #12
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	429a      	cmp	r2, r3
 8006762:	d1eb      	bne.n	800673c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <HAL_RCC_ClockConfig+0x25c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0307 	and.w	r3, r3, #7
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d214      	bcs.n	800679c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006772:	4b08      	ldr	r3, [pc, #32]	; (8006794 <HAL_RCC_ClockConfig+0x25c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f023 0207 	bic.w	r2, r3, #7
 800677a:	4906      	ldr	r1, [pc, #24]	; (8006794 <HAL_RCC_ClockConfig+0x25c>)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4313      	orrs	r3, r2
 8006780:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <HAL_RCC_ClockConfig+0x25c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d005      	beq.n	800679c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e040      	b.n	8006816 <HAL_RCC_ClockConfig+0x2de>
 8006794:	40022000 	.word	0x40022000
 8006798:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067a8:	4b1d      	ldr	r3, [pc, #116]	; (8006820 <HAL_RCC_ClockConfig+0x2e8>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	491a      	ldr	r1, [pc, #104]	; (8006820 <HAL_RCC_ClockConfig+0x2e8>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067c6:	4b16      	ldr	r3, [pc, #88]	; (8006820 <HAL_RCC_ClockConfig+0x2e8>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	4912      	ldr	r1, [pc, #72]	; (8006820 <HAL_RCC_ClockConfig+0x2e8>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80067da:	f000 f845 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 80067de:	4601      	mov	r1, r0
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <HAL_RCC_ClockConfig+0x2e8>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067e8:	22f0      	movs	r2, #240	; 0xf0
 80067ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	fa92 f2a2 	rbit	r2, r2
 80067f2:	60fa      	str	r2, [r7, #12]
  return result;
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	fab2 f282 	clz	r2, r2
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	40d3      	lsrs	r3, r2
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <HAL_RCC_ClockConfig+0x2ec>)
 8006800:	5cd3      	ldrb	r3, [r2, r3]
 8006802:	fa21 f303 	lsr.w	r3, r1, r3
 8006806:	4a08      	ldr	r2, [pc, #32]	; (8006828 <HAL_RCC_ClockConfig+0x2f0>)
 8006808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800680a:	4b08      	ldr	r3, [pc, #32]	; (800682c <HAL_RCC_ClockConfig+0x2f4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fd f87a 	bl	8003908 <HAL_InitTick>
  
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3778      	adds	r7, #120	; 0x78
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	40021000 	.word	0x40021000
 8006824:	08010a44 	.word	0x08010a44
 8006828:	200000a0 	.word	0x200000a0
 800682c:	200000a4 	.word	0x200000a4

08006830 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800683a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	fa93 f3a3 	rbit	r3, r3
 8006842:	603b      	str	r3, [r7, #0]
  return result;
 8006844:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006846:	fab3 f383 	clz	r3, r3
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006850:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	461a      	mov	r2, r3
 8006858:	2301      	movs	r3, #1
 800685a:	6013      	str	r3, [r2, #0]
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006868:	b480      	push	{r7}
 800686a:	b08b      	sub	sp, #44	; 0x2c
 800686c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	61fb      	str	r3, [r7, #28]
 8006872:	2300      	movs	r3, #0
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006882:	4b2a      	ldr	r3, [pc, #168]	; (800692c <HAL_RCC_GetSysClockFreq+0xc4>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f003 030c 	and.w	r3, r3, #12
 800688e:	2b04      	cmp	r3, #4
 8006890:	d002      	beq.n	8006898 <HAL_RCC_GetSysClockFreq+0x30>
 8006892:	2b08      	cmp	r3, #8
 8006894:	d003      	beq.n	800689e <HAL_RCC_GetSysClockFreq+0x36>
 8006896:	e03f      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006898:	4b25      	ldr	r3, [pc, #148]	; (8006930 <HAL_RCC_GetSysClockFreq+0xc8>)
 800689a:	623b      	str	r3, [r7, #32]
      break;
 800689c:	e03f      	b.n	800691e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80068a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80068a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	fa92 f2a2 	rbit	r2, r2
 80068b0:	607a      	str	r2, [r7, #4]
  return result;
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	fab2 f282 	clz	r2, r2
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	40d3      	lsrs	r3, r2
 80068bc:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <HAL_RCC_GetSysClockFreq+0xcc>)
 80068be:	5cd3      	ldrb	r3, [r2, r3]
 80068c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80068c2:	4b1a      	ldr	r3, [pc, #104]	; (800692c <HAL_RCC_GetSysClockFreq+0xc4>)
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	220f      	movs	r2, #15
 80068cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	fa92 f2a2 	rbit	r2, r2
 80068d4:	60fa      	str	r2, [r7, #12]
  return result;
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	fab2 f282 	clz	r2, r2
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	40d3      	lsrs	r3, r2
 80068e0:	4a15      	ldr	r2, [pc, #84]	; (8006938 <HAL_RCC_GetSysClockFreq+0xd0>)
 80068e2:	5cd3      	ldrb	r3, [r2, r3]
 80068e4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068f0:	4a0f      	ldr	r2, [pc, #60]	; (8006930 <HAL_RCC_GetSysClockFreq+0xc8>)
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	e007      	b.n	8006912 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006902:	4a0b      	ldr	r2, [pc, #44]	; (8006930 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	fbb2 f2f3 	udiv	r2, r2, r3
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	623b      	str	r3, [r7, #32]
      break;
 8006916:	e002      	b.n	800691e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006918:	4b05      	ldr	r3, [pc, #20]	; (8006930 <HAL_RCC_GetSysClockFreq+0xc8>)
 800691a:	623b      	str	r3, [r7, #32]
      break;
 800691c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800691e:	6a3b      	ldr	r3, [r7, #32]
}
 8006920:	4618      	mov	r0, r3
 8006922:	372c      	adds	r7, #44	; 0x2c
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40021000 	.word	0x40021000
 8006930:	007a1200 	.word	0x007a1200
 8006934:	08010a5c 	.word	0x08010a5c
 8006938:	08010a6c 	.word	0x08010a6c

0800693c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006940:	4b03      	ldr	r3, [pc, #12]	; (8006950 <HAL_RCC_GetHCLKFreq+0x14>)
 8006942:	681b      	ldr	r3, [r3, #0]
}
 8006944:	4618      	mov	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	200000a0 	.word	0x200000a0

08006954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800695a:	f7ff ffef 	bl	800693c <HAL_RCC_GetHCLKFreq>
 800695e:	4601      	mov	r1, r0
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006968:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800696c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	fa92 f2a2 	rbit	r2, r2
 8006974:	603a      	str	r2, [r7, #0]
  return result;
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	fab2 f282 	clz	r2, r2
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	40d3      	lsrs	r3, r2
 8006980:	4a04      	ldr	r2, [pc, #16]	; (8006994 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006982:	5cd3      	ldrb	r3, [r2, r3]
 8006984:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40021000 	.word	0x40021000
 8006994:	08010a54 	.word	0x08010a54

08006998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800699e:	f7ff ffcd 	bl	800693c <HAL_RCC_GetHCLKFreq>
 80069a2:	4601      	mov	r1, r0
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80069ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80069b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	fa92 f2a2 	rbit	r2, r2
 80069b8:	603a      	str	r2, [r7, #0]
  return result;
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	fab2 f282 	clz	r2, r2
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	40d3      	lsrs	r3, r2
 80069c4:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80069c6:	5cd3      	ldrb	r3, [r2, r3]
 80069c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40021000 	.word	0x40021000
 80069d8:	08010a54 	.word	0x08010a54

080069dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	220f      	movs	r2, #15
 80069ea:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80069ec:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <HAL_RCC_GetClockConfig+0x5c>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f003 0203 	and.w	r2, r3, #3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80069f8:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <HAL_RCC_GetClockConfig+0x5c>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <HAL_RCC_GetClockConfig+0x5c>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a10:	4b09      	ldr	r3, [pc, #36]	; (8006a38 <HAL_RCC_GetClockConfig+0x5c>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	08db      	lsrs	r3, r3, #3
 8006a16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8006a1e:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <HAL_RCC_GetClockConfig+0x60>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0207 	and.w	r2, r3, #7
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40022000 	.word	0x40022000

08006a40 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4c:	2b80      	cmp	r3, #128	; 0x80
 8006a4e:	d104      	bne.n	8006a5a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006a50:	f000 f80a 	bl	8006a68 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006a54:	4b03      	ldr	r3, [pc, #12]	; (8006a64 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006a56:	2280      	movs	r2, #128	; 0x80
 8006a58:	701a      	strb	r2, [r3, #0]
  }
}
 8006a5a:	bf00      	nop
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40021000 	.word	0x40021000
 8006a64:	4002100a 	.word	0x4002100a

08006a68 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8006a6c:	bf00      	nop
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b092      	sub	sp, #72	; 0x48
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 80d4 	beq.w	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a9c:	4b4e      	ldr	r3, [pc, #312]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10e      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aa8:	4b4b      	ldr	r3, [pc, #300]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	4a4a      	ldr	r2, [pc, #296]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab2:	61d3      	str	r3, [r2, #28]
 8006ab4:	4b48      	ldr	r3, [pc, #288]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006abc:	60bb      	str	r3, [r7, #8]
 8006abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac6:	4b45      	ldr	r3, [pc, #276]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d118      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad2:	4b42      	ldr	r3, [pc, #264]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a41      	ldr	r2, [pc, #260]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006adc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ade:	f7fd f84b 	bl	8003b78 <HAL_GetTick>
 8006ae2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae4:	e008      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ae6:	f7fd f847 	bl	8003b78 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b64      	cmp	r3, #100	; 0x64
 8006af2:	d901      	bls.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e1d6      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af8:	4b38      	ldr	r3, [pc, #224]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d0f0      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b04:	4b34      	ldr	r3, [pc, #208]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 8084 	beq.w	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d07c      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b24:	4b2c      	ldr	r3, [pc, #176]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	fa93 f3a3 	rbit	r3, r3
 8006b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b3e:	fab3 f383 	clz	r3, r3
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	2301      	movs	r3, #1
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	fa93 f3a3 	rbit	r3, r3
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b62:	fab3 f383 	clz	r3, r3
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	461a      	mov	r2, r3
 8006b72:	2300      	movs	r3, #0
 8006b74:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b76:	4a18      	ldr	r2, [pc, #96]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d04b      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b86:	f7fc fff7 	bl	8003b78 <HAL_GetTick>
 8006b8a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b8c:	e00a      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b8e:	f7fc fff3 	bl	8003b78 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e180      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	fa93 f3a3 	rbit	r3, r3
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	623b      	str	r3, [r7, #32]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	fa93 f3a3 	rbit	r3, r3
 8006bba:	61fb      	str	r3, [r7, #28]
  return result;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bbe:	fab3 f383 	clz	r3, r3
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f043 0302 	orr.w	r3, r3, #2
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d108      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006bd2:	4b01      	ldr	r3, [pc, #4]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	e00d      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	40007000 	.word	0x40007000
 8006be0:	10908100 	.word	0x10908100
 8006be4:	2302      	movs	r3, #2
 8006be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	fa93 f3a3 	rbit	r3, r3
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	4b9a      	ldr	r3, [pc, #616]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	613a      	str	r2, [r7, #16]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	fa92 f2a2 	rbit	r2, r2
 8006bfe:	60fa      	str	r2, [r7, #12]
  return result;
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	fab2 f282 	clz	r2, r2
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	f002 021f 	and.w	r2, r2, #31
 8006c12:	2101      	movs	r1, #1
 8006c14:	fa01 f202 	lsl.w	r2, r1, r2
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0b7      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006c1e:	4b8f      	ldr	r3, [pc, #572]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	498c      	ldr	r1, [pc, #560]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d105      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c38:	4b88      	ldr	r3, [pc, #544]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	4a87      	ldr	r2, [pc, #540]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c50:	4b82      	ldr	r3, [pc, #520]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	f023 0203 	bic.w	r2, r3, #3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	497f      	ldr	r1, [pc, #508]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d008      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c6e:	4b7b      	ldr	r3, [pc, #492]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	4978      	ldr	r1, [pc, #480]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d008      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c8c:	4b73      	ldr	r3, [pc, #460]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	4970      	ldr	r1, [pc, #448]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d008      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006caa:	4b6c      	ldr	r3, [pc, #432]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	f023 0210 	bic.w	r2, r3, #16
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	4969      	ldr	r1, [pc, #420]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006cc8:	4b64      	ldr	r3, [pc, #400]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd4:	4961      	ldr	r1, [pc, #388]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ce6:	4b5d      	ldr	r3, [pc, #372]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	f023 0220 	bic.w	r2, r3, #32
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	495a      	ldr	r1, [pc, #360]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d04:	4b55      	ldr	r3, [pc, #340]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	4952      	ldr	r1, [pc, #328]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d22:	4b4e      	ldr	r3, [pc, #312]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	494b      	ldr	r1, [pc, #300]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d40:	4b46      	ldr	r3, [pc, #280]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	4943      	ldr	r1, [pc, #268]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d008      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006d5e:	4b3f      	ldr	r3, [pc, #252]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	493c      	ldr	r1, [pc, #240]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d008      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d7c:	4b37      	ldr	r3, [pc, #220]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d88:	4934      	ldr	r1, [pc, #208]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d008      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006d9a:	4b30      	ldr	r3, [pc, #192]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	492d      	ldr	r1, [pc, #180]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d008      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006db8:	4b28      	ldr	r3, [pc, #160]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	4925      	ldr	r1, [pc, #148]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d008      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006dd6:	4b21      	ldr	r3, [pc, #132]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dda:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	491e      	ldr	r1, [pc, #120]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d008      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006df4:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	4916      	ldr	r1, [pc, #88]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d008      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006e12:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	490f      	ldr	r1, [pc, #60]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3c:	4907      	ldr	r1, [pc, #28]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00c      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006e4e:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	e002      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006e5a:	bf00      	nop
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e62:	4913      	ldr	r1, [pc, #76]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e80:	490b      	ldr	r1, [pc, #44]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9e:	4904      	ldr	r1, [pc, #16]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3748      	adds	r7, #72	; 0x48
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	40021000 	.word	0x40021000

08006eb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e09d      	b.n	8007002 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d108      	bne.n	8006ee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed6:	d009      	beq.n	8006eec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	61da      	str	r2, [r3, #28]
 8006ede:	e005      	b.n	8006eec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fc fc7a 	bl	8003800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f2c:	d902      	bls.n	8006f34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	e002      	b.n	8006f3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f42:	d007      	beq.n	8006f54 <HAL_SPI_Init+0xa0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f4c:	d002      	beq.n	8006f54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	ea42 0103 	orr.w	r1, r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	0c1b      	lsrs	r3, r3, #16
 8006fb0:	f003 0204 	and.w	r2, r3, #4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	f003 0310 	and.w	r3, r3, #16
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006fd0:	ea42 0103 	orr.w	r1, r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69da      	ldr	r2, [r3, #28]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b088      	sub	sp, #32
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_Transmit+0x22>
 8007028:	2302      	movs	r3, #2
 800702a:	e158      	b.n	80072de <HAL_SPI_Transmit+0x2d4>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007034:	f7fc fda0 	bl	8003b78 <HAL_GetTick>
 8007038:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d002      	beq.n	8007050 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800704e:	e13d      	b.n	80072cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_SPI_Transmit+0x52>
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007060:	e134      	b.n	80072cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2203      	movs	r2, #3
 8007066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	88fa      	ldrh	r2, [r7, #6]
 800707a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	88fa      	ldrh	r2, [r7, #6]
 8007080:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ac:	d10f      	bne.n	80070ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b40      	cmp	r3, #64	; 0x40
 80070da:	d007      	beq.n	80070ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070f4:	d94b      	bls.n	800718e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_SPI_Transmit+0xfa>
 80070fe:	8afb      	ldrh	r3, [r7, #22]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d13e      	bne.n	8007182 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	881a      	ldrh	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	1c9a      	adds	r2, r3, #2
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007128:	e02b      	b.n	8007182 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b02      	cmp	r3, #2
 8007136:	d112      	bne.n	800715e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	881a      	ldrh	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	1c9a      	adds	r2, r3, #2
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007152:	b29b      	uxth	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800715c:	e011      	b.n	8007182 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800715e:	f7fc fd0b 	bl	8003b78 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d803      	bhi.n	8007176 <HAL_SPI_Transmit+0x16c>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007174:	d102      	bne.n	800717c <HAL_SPI_Transmit+0x172>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d102      	bne.n	8007182 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007180:	e0a4      	b.n	80072cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007186:	b29b      	uxth	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ce      	bne.n	800712a <HAL_SPI_Transmit+0x120>
 800718c:	e07c      	b.n	8007288 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <HAL_SPI_Transmit+0x192>
 8007196:	8afb      	ldrh	r3, [r7, #22]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d170      	bne.n	800727e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d912      	bls.n	80071cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	881a      	ldrh	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	1c9a      	adds	r2, r3, #2
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	3b02      	subs	r3, #2
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071ca:	e058      	b.n	800727e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	7812      	ldrb	r2, [r2, #0]
 80071d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80071f2:	e044      	b.n	800727e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d12b      	bne.n	800725a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d912      	bls.n	8007232 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	881a      	ldrh	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	1c9a      	adds	r2, r3, #2
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b02      	subs	r3, #2
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007230:	e025      	b.n	800727e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	330c      	adds	r3, #12
 800723c:	7812      	ldrb	r2, [r2, #0]
 800723e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800724e:	b29b      	uxth	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	b29a      	uxth	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007258:	e011      	b.n	800727e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800725a:	f7fc fc8d 	bl	8003b78 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d803      	bhi.n	8007272 <HAL_SPI_Transmit+0x268>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d102      	bne.n	8007278 <HAL_SPI_Transmit+0x26e>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d102      	bne.n	800727e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800727c:	e026      	b.n	80072cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1b5      	bne.n	80071f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fb5b 	bl	8007948 <SPI_EndRxTxTransaction>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	77fb      	strb	r3, [r7, #31]
 80072c8:	e000      	b.n	80072cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80072ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80072dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b08a      	sub	sp, #40	; 0x28
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072f4:	2301      	movs	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_SPI_TransmitReceive+0x26>
 8007308:	2302      	movs	r3, #2
 800730a:	e1fb      	b.n	8007704 <HAL_SPI_TransmitReceive+0x41e>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007314:	f7fc fc30 	bl	8003b78 <HAL_GetTick>
 8007318:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007320:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007328:	887b      	ldrh	r3, [r7, #2]
 800732a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800732c:	887b      	ldrh	r3, [r7, #2]
 800732e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007330:	7efb      	ldrb	r3, [r7, #27]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d00e      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x6e>
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800733c:	d106      	bne.n	800734c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <HAL_SPI_TransmitReceive+0x66>
 8007346:	7efb      	ldrb	r3, [r7, #27]
 8007348:	2b04      	cmp	r3, #4
 800734a:	d003      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800734c:	2302      	movs	r3, #2
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007352:	e1cd      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_SPI_TransmitReceive+0x80>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SPI_TransmitReceive+0x80>
 8007360:	887b      	ldrh	r3, [r7, #2]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800736c:	e1c0      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b04      	cmp	r3, #4
 8007378:	d003      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2205      	movs	r2, #5
 800737e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	887a      	ldrh	r2, [r7, #2]
 8007392:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	887a      	ldrh	r2, [r7, #2]
 800739a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	887a      	ldrh	r2, [r7, #2]
 80073a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	887a      	ldrh	r2, [r7, #2]
 80073ae:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073c4:	d802      	bhi.n	80073cc <HAL_SPI_TransmitReceive+0xe6>
 80073c6:	8a3b      	ldrh	r3, [r7, #16]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d908      	bls.n	80073de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073da:	605a      	str	r2, [r3, #4]
 80073dc:	e007      	b.n	80073ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d007      	beq.n	800740c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800740a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007414:	d97c      	bls.n	8007510 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <HAL_SPI_TransmitReceive+0x13e>
 800741e:	8a7b      	ldrh	r3, [r7, #18]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d169      	bne.n	80074f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	881a      	ldrh	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	1c9a      	adds	r2, r3, #2
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007448:	e056      	b.n	80074f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b02      	cmp	r3, #2
 8007456:	d11b      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x1aa>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d016      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x1aa>
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	2b01      	cmp	r3, #1
 8007466:	d113      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	1c9a      	adds	r2, r3, #2
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b01      	cmp	r3, #1
 800749c:	d11c      	bne.n	80074d8 <HAL_SPI_TransmitReceive+0x1f2>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d016      	beq.n	80074d8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	b292      	uxth	r2, r2
 80074b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074d4:	2301      	movs	r3, #1
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074d8:	f7fc fb4e 	bl	8003b78 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d807      	bhi.n	80074f8 <HAL_SPI_TransmitReceive+0x212>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d003      	beq.n	80074f8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80074f6:	e0fb      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1a3      	bne.n	800744a <HAL_SPI_TransmitReceive+0x164>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d19d      	bne.n	800744a <HAL_SPI_TransmitReceive+0x164>
 800750e:	e0df      	b.n	80076d0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x23a>
 8007518:	8a7b      	ldrh	r3, [r7, #18]
 800751a:	2b01      	cmp	r3, #1
 800751c:	f040 80cb 	bne.w	80076b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d912      	bls.n	8007550 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	881a      	ldrh	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	1c9a      	adds	r2, r3, #2
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007544:	b29b      	uxth	r3, r3
 8007546:	3b02      	subs	r3, #2
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800754e:	e0b2      	b.n	80076b6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	330c      	adds	r3, #12
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756c:	b29b      	uxth	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007576:	e09e      	b.n	80076b6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b02      	cmp	r3, #2
 8007584:	d134      	bne.n	80075f0 <HAL_SPI_TransmitReceive+0x30a>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d02f      	beq.n	80075f0 <HAL_SPI_TransmitReceive+0x30a>
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	2b01      	cmp	r3, #1
 8007594:	d12c      	bne.n	80075f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	d912      	bls.n	80075c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b02      	subs	r3, #2
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075c4:	e012      	b.n	80075ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ec:	2300      	movs	r3, #0
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d148      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x3aa>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d042      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b01      	cmp	r3, #1
 8007614:	d923      	bls.n	800765e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	b292      	uxth	r2, r2
 8007622:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	1c9a      	adds	r2, r3, #2
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007634:	b29b      	uxth	r3, r3
 8007636:	3b02      	subs	r3, #2
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	d81f      	bhi.n	800768c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800765a:	605a      	str	r2, [r3, #4]
 800765c:	e016      	b.n	800768c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f103 020c 	add.w	r2, r3, #12
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	7812      	ldrb	r2, [r2, #0]
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800768c:	2301      	movs	r3, #1
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007690:	f7fc fa72 	bl	8003b78 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800769c:	429a      	cmp	r2, r3
 800769e:	d803      	bhi.n	80076a8 <HAL_SPI_TransmitReceive+0x3c2>
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a6:	d102      	bne.n	80076ae <HAL_SPI_TransmitReceive+0x3c8>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80076b4:	e01c      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f47f af5b 	bne.w	8007578 <HAL_SPI_TransmitReceive+0x292>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f47f af54 	bne.w	8007578 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f937 	bl	8007948 <SPI_EndRxTxTransaction>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d006      	beq.n	80076ee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	661a      	str	r2, [r3, #96]	; 0x60
 80076ec:	e000      	b.n	80076f0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80076ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007704:	4618      	mov	r0, r3
 8007706:	3728      	adds	r7, #40	; 0x28
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800771c:	f7fc fa2c 	bl	8003b78 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	4413      	add	r3, r2
 800772a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800772c:	f7fc fa24 	bl	8003b78 <HAL_GetTick>
 8007730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007732:	4b39      	ldr	r3, [pc, #228]	; (8007818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	015b      	lsls	r3, r3, #5
 8007738:	0d1b      	lsrs	r3, r3, #20
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007742:	e054      	b.n	80077ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774a:	d050      	beq.n	80077ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800774c:	f7fc fa14 	bl	8003b78 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	429a      	cmp	r2, r3
 800775a:	d902      	bls.n	8007762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d13d      	bne.n	80077de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800777a:	d111      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007784:	d004      	beq.n	8007790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778e:	d107      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800779e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a8:	d10f      	bne.n	80077ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e017      	b.n	800780e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4013      	ands	r3, r2
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	bf0c      	ite	eq
 80077fe:	2301      	moveq	r3, #1
 8007800:	2300      	movne	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	429a      	cmp	r2, r3
 800780a:	d19b      	bne.n	8007744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200000a0 	.word	0x200000a0

0800781c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800782e:	f7fc f9a3 	bl	8003b78 <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	4413      	add	r3, r2
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800783e:	f7fc f99b 	bl	8003b78 <HAL_GetTick>
 8007842:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	330c      	adds	r3, #12
 800784a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800784c:	4b3d      	ldr	r3, [pc, #244]	; (8007944 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	00da      	lsls	r2, r3, #3
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	0d1b      	lsrs	r3, r3, #20
 800785c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785e:	fb02 f303 	mul.w	r3, r2, r3
 8007862:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007864:	e060      	b.n	8007928 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800786c:	d107      	bne.n	800787e <SPI_WaitFifoStateUntilTimeout+0x62>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d104      	bne.n	800787e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800787c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d050      	beq.n	8007928 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007886:	f7fc f977 	bl	8003b78 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007892:	429a      	cmp	r2, r3
 8007894:	d902      	bls.n	800789c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d13d      	bne.n	8007918 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b4:	d111      	bne.n	80078da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078be:	d004      	beq.n	80078ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c8:	d107      	bne.n	80078da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078e2:	d10f      	bne.n	8007904 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e010      	b.n	800793a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3b01      	subs	r3, #1
 8007926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	4013      	ands	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d196      	bne.n	8007866 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	; 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	200000a0 	.word	0x200000a0

08007948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2200      	movs	r2, #0
 800795c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7ff ff5b 	bl	800781c <SPI_WaitFifoStateUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e027      	b.n	80079cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff fec0 	bl	800770c <SPI_WaitFlagStateUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007996:	f043 0220 	orr.w	r2, r3, #32
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e014      	b.n	80079cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7ff ff34 	bl	800781c <SPI_WaitFifoStateUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079be:	f043 0220 	orr.w	r2, r3, #32
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e000      	b.n	80079cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e049      	b.n	8007a7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f841 	bl	8007a82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4619      	mov	r1, r3
 8007a12:	4610      	mov	r0, r2
 8007a14:	f000 f9f8 	bl	8007e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d001      	beq.n	8007ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e04f      	b.n	8007b50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68da      	ldr	r2, [r3, #12]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0201 	orr.w	r2, r2, #1
 8007ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a23      	ldr	r2, [pc, #140]	; (8007b5c <HAL_TIM_Base_Start_IT+0xc4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d01d      	beq.n	8007b0e <HAL_TIM_Base_Start_IT+0x76>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ada:	d018      	beq.n	8007b0e <HAL_TIM_Base_Start_IT+0x76>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1f      	ldr	r2, [pc, #124]	; (8007b60 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <HAL_TIM_Base_Start_IT+0x76>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1e      	ldr	r2, [pc, #120]	; (8007b64 <HAL_TIM_Base_Start_IT+0xcc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00e      	beq.n	8007b0e <HAL_TIM_Base_Start_IT+0x76>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d009      	beq.n	8007b0e <HAL_TIM_Base_Start_IT+0x76>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a1b      	ldr	r2, [pc, #108]	; (8007b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d004      	beq.n	8007b0e <HAL_TIM_Base_Start_IT+0x76>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a19      	ldr	r2, [pc, #100]	; (8007b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d115      	bne.n	8007b3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	4b17      	ldr	r3, [pc, #92]	; (8007b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d015      	beq.n	8007b4c <HAL_TIM_Base_Start_IT+0xb4>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b26:	d011      	beq.n	8007b4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b38:	e008      	b.n	8007b4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f042 0201 	orr.w	r2, r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e000      	b.n	8007b4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	40012c00 	.word	0x40012c00
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800
 8007b68:	40013400 	.word	0x40013400
 8007b6c:	40014000 	.word	0x40014000
 8007b70:	40015000 	.word	0x40015000
 8007b74:	00010007 	.word	0x00010007

08007b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d122      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d11b      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f06f 0202 	mvn.w	r2, #2
 8007ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f905 	bl	8007dca <HAL_TIM_IC_CaptureCallback>
 8007bc0:	e005      	b.n	8007bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8f7 	bl	8007db6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f908 	bl	8007dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	f003 0304 	and.w	r3, r3, #4
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d122      	bne.n	8007c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d11b      	bne.n	8007c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f06f 0204 	mvn.w	r2, #4
 8007bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8db 	bl	8007dca <HAL_TIM_IC_CaptureCallback>
 8007c14:	e005      	b.n	8007c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8cd 	bl	8007db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f8de 	bl	8007dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	f003 0308 	and.w	r3, r3, #8
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d122      	bne.n	8007c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	f003 0308 	and.w	r3, r3, #8
 8007c40:	2b08      	cmp	r3, #8
 8007c42:	d11b      	bne.n	8007c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f06f 0208 	mvn.w	r2, #8
 8007c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2204      	movs	r2, #4
 8007c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8b1 	bl	8007dca <HAL_TIM_IC_CaptureCallback>
 8007c68:	e005      	b.n	8007c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f8a3 	bl	8007db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f8b4 	bl	8007dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	f003 0310 	and.w	r3, r3, #16
 8007c86:	2b10      	cmp	r3, #16
 8007c88:	d122      	bne.n	8007cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f003 0310 	and.w	r3, r3, #16
 8007c94:	2b10      	cmp	r3, #16
 8007c96:	d11b      	bne.n	8007cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f06f 0210 	mvn.w	r2, #16
 8007ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2208      	movs	r2, #8
 8007ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f887 	bl	8007dca <HAL_TIM_IC_CaptureCallback>
 8007cbc:	e005      	b.n	8007cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f879 	bl	8007db6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f88a 	bl	8007dde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d10e      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d107      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f06f 0201 	mvn.w	r2, #1
 8007cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7fb f8f8 	bl	8002eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d10e      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d14:	2b80      	cmp	r3, #128	; 0x80
 8007d16:	d107      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f918 	bl	8007f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d36:	d10e      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d42:	2b80      	cmp	r3, #128	; 0x80
 8007d44:	d107      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f90b 	bl	8007f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d10e      	bne.n	8007d82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	d107      	bne.n	8007d82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f838 	bl	8007df2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	d10e      	bne.n	8007dae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d107      	bne.n	8007dae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f06f 0220 	mvn.w	r2, #32
 8007da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f8cb 	bl	8007f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b083      	sub	sp, #12
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a42      	ldr	r2, [pc, #264]	; (8007f24 <TIM_Base_SetConfig+0x11c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d013      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e26:	d00f      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3f      	ldr	r2, [pc, #252]	; (8007f28 <TIM_Base_SetConfig+0x120>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00b      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3e      	ldr	r2, [pc, #248]	; (8007f2c <TIM_Base_SetConfig+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d007      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a3d      	ldr	r2, [pc, #244]	; (8007f30 <TIM_Base_SetConfig+0x128>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d003      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a3c      	ldr	r2, [pc, #240]	; (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d108      	bne.n	8007e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a31      	ldr	r2, [pc, #196]	; (8007f24 <TIM_Base_SetConfig+0x11c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01f      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e68:	d01b      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2e      	ldr	r2, [pc, #184]	; (8007f28 <TIM_Base_SetConfig+0x120>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d017      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2d      	ldr	r2, [pc, #180]	; (8007f2c <TIM_Base_SetConfig+0x124>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d013      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2c      	ldr	r2, [pc, #176]	; (8007f30 <TIM_Base_SetConfig+0x128>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00f      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2c      	ldr	r2, [pc, #176]	; (8007f38 <TIM_Base_SetConfig+0x130>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00b      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2b      	ldr	r2, [pc, #172]	; (8007f3c <TIM_Base_SetConfig+0x134>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d007      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <TIM_Base_SetConfig+0x138>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d003      	beq.n	8007ea2 <TIM_Base_SetConfig+0x9a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a25      	ldr	r2, [pc, #148]	; (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d108      	bne.n	8007eb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a12      	ldr	r2, [pc, #72]	; (8007f24 <TIM_Base_SetConfig+0x11c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d013      	beq.n	8007f08 <TIM_Base_SetConfig+0x100>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a13      	ldr	r2, [pc, #76]	; (8007f30 <TIM_Base_SetConfig+0x128>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00f      	beq.n	8007f08 <TIM_Base_SetConfig+0x100>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a13      	ldr	r2, [pc, #76]	; (8007f38 <TIM_Base_SetConfig+0x130>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00b      	beq.n	8007f08 <TIM_Base_SetConfig+0x100>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a12      	ldr	r2, [pc, #72]	; (8007f3c <TIM_Base_SetConfig+0x134>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d007      	beq.n	8007f08 <TIM_Base_SetConfig+0x100>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a11      	ldr	r2, [pc, #68]	; (8007f40 <TIM_Base_SetConfig+0x138>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d003      	beq.n	8007f08 <TIM_Base_SetConfig+0x100>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a0c      	ldr	r2, [pc, #48]	; (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d103      	bne.n	8007f10 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	615a      	str	r2, [r3, #20]
}
 8007f16:	bf00      	nop
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40000400 	.word	0x40000400
 8007f2c:	40000800 	.word	0x40000800
 8007f30:	40013400 	.word	0x40013400
 8007f34:	40015000 	.word	0x40015000
 8007f38:	40014000 	.word	0x40014000
 8007f3c:	40014400 	.word	0x40014400
 8007f40:	40014800 	.word	0x40014800

08007f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e040      	b.n	8008014 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d106      	bne.n	8007fa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fb fc6e 	bl	8003884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2224      	movs	r2, #36	; 0x24
 8007fac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f8c0 	bl	8008144 <UART_SetConfig>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d101      	bne.n	8007fce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e022      	b.n	8008014 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fa8a 	bl	80084f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689a      	ldr	r2, [r3, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fb11 	bl	8008634 <UART_CheckIdleState>
 8008012:	4603      	mov	r3, r0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	4613      	mov	r3, r2
 800802a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008030:	2b20      	cmp	r3, #32
 8008032:	f040 8082 	bne.w	800813a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <HAL_UART_Transmit+0x26>
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e07a      	b.n	800813c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_UART_Transmit+0x38>
 8008050:	2302      	movs	r3, #2
 8008052:	e073      	b.n	800813c <HAL_UART_Transmit+0x120>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2221      	movs	r2, #33	; 0x21
 8008068:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800806a:	f7fb fd85 	bl	8003b78 <HAL_GetTick>
 800806e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	88fa      	ldrh	r2, [r7, #6]
 8008074:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	88fa      	ldrh	r2, [r7, #6]
 800807c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008088:	d108      	bne.n	800809c <HAL_UART_Transmit+0x80>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d104      	bne.n	800809c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	61bb      	str	r3, [r7, #24]
 800809a:	e003      	b.n	80080a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80080ac:	e02d      	b.n	800810a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2200      	movs	r2, #0
 80080b6:	2180      	movs	r1, #128	; 0x80
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fb04 	bl	80086c6 <UART_WaitOnFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e039      	b.n	800813c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10b      	bne.n	80080e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	881a      	ldrh	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080da:	b292      	uxth	r2, r2
 80080dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	3302      	adds	r3, #2
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	e008      	b.n	80080f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	b292      	uxth	r2, r2
 80080f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	3301      	adds	r3, #1
 80080f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080fe:	b29b      	uxth	r3, r3
 8008100:	3b01      	subs	r3, #1
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008110:	b29b      	uxth	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1cb      	bne.n	80080ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2200      	movs	r2, #0
 800811e:	2140      	movs	r1, #64	; 0x40
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fad0 	bl	80086c6 <UART_WaitOnFlagUntilTimeout>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d001      	beq.n	8008130 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e005      	b.n	800813c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2220      	movs	r2, #32
 8008134:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	e000      	b.n	800813c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800813a:	2302      	movs	r3, #2
  }
}
 800813c:	4618      	mov	r0, r3
 800813e:	3720      	adds	r7, #32
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	431a      	orrs	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	4313      	orrs	r3, r2
 8008166:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4b92      	ldr	r3, [pc, #584]	; (80083b8 <UART_SetConfig+0x274>)
 8008170:	4013      	ands	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	6979      	ldr	r1, [r7, #20]
 8008178:	430b      	orrs	r3, r1
 800817a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	4313      	orrs	r3, r2
 80081a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a80      	ldr	r2, [pc, #512]	; (80083bc <UART_SetConfig+0x278>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d120      	bne.n	8008202 <UART_SetConfig+0xbe>
 80081c0:	4b7f      	ldr	r3, [pc, #508]	; (80083c0 <UART_SetConfig+0x27c>)
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d817      	bhi.n	80081fc <UART_SetConfig+0xb8>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <UART_SetConfig+0x90>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	080081e5 	.word	0x080081e5
 80081d8:	080081f1 	.word	0x080081f1
 80081dc:	080081f7 	.word	0x080081f7
 80081e0:	080081eb 	.word	0x080081eb
 80081e4:	2301      	movs	r3, #1
 80081e6:	77fb      	strb	r3, [r7, #31]
 80081e8:	e0b5      	b.n	8008356 <UART_SetConfig+0x212>
 80081ea:	2302      	movs	r3, #2
 80081ec:	77fb      	strb	r3, [r7, #31]
 80081ee:	e0b2      	b.n	8008356 <UART_SetConfig+0x212>
 80081f0:	2304      	movs	r3, #4
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e0af      	b.n	8008356 <UART_SetConfig+0x212>
 80081f6:	2308      	movs	r3, #8
 80081f8:	77fb      	strb	r3, [r7, #31]
 80081fa:	e0ac      	b.n	8008356 <UART_SetConfig+0x212>
 80081fc:	2310      	movs	r3, #16
 80081fe:	77fb      	strb	r3, [r7, #31]
 8008200:	e0a9      	b.n	8008356 <UART_SetConfig+0x212>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a6f      	ldr	r2, [pc, #444]	; (80083c4 <UART_SetConfig+0x280>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d124      	bne.n	8008256 <UART_SetConfig+0x112>
 800820c:	4b6c      	ldr	r3, [pc, #432]	; (80083c0 <UART_SetConfig+0x27c>)
 800820e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008214:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008218:	d011      	beq.n	800823e <UART_SetConfig+0xfa>
 800821a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800821e:	d817      	bhi.n	8008250 <UART_SetConfig+0x10c>
 8008220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008224:	d011      	beq.n	800824a <UART_SetConfig+0x106>
 8008226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800822a:	d811      	bhi.n	8008250 <UART_SetConfig+0x10c>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <UART_SetConfig+0xf4>
 8008230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008234:	d006      	beq.n	8008244 <UART_SetConfig+0x100>
 8008236:	e00b      	b.n	8008250 <UART_SetConfig+0x10c>
 8008238:	2300      	movs	r3, #0
 800823a:	77fb      	strb	r3, [r7, #31]
 800823c:	e08b      	b.n	8008356 <UART_SetConfig+0x212>
 800823e:	2302      	movs	r3, #2
 8008240:	77fb      	strb	r3, [r7, #31]
 8008242:	e088      	b.n	8008356 <UART_SetConfig+0x212>
 8008244:	2304      	movs	r3, #4
 8008246:	77fb      	strb	r3, [r7, #31]
 8008248:	e085      	b.n	8008356 <UART_SetConfig+0x212>
 800824a:	2308      	movs	r3, #8
 800824c:	77fb      	strb	r3, [r7, #31]
 800824e:	e082      	b.n	8008356 <UART_SetConfig+0x212>
 8008250:	2310      	movs	r3, #16
 8008252:	77fb      	strb	r3, [r7, #31]
 8008254:	e07f      	b.n	8008356 <UART_SetConfig+0x212>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a5b      	ldr	r2, [pc, #364]	; (80083c8 <UART_SetConfig+0x284>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d124      	bne.n	80082aa <UART_SetConfig+0x166>
 8008260:	4b57      	ldr	r3, [pc, #348]	; (80083c0 <UART_SetConfig+0x27c>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008268:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800826c:	d011      	beq.n	8008292 <UART_SetConfig+0x14e>
 800826e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008272:	d817      	bhi.n	80082a4 <UART_SetConfig+0x160>
 8008274:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008278:	d011      	beq.n	800829e <UART_SetConfig+0x15a>
 800827a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800827e:	d811      	bhi.n	80082a4 <UART_SetConfig+0x160>
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <UART_SetConfig+0x148>
 8008284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008288:	d006      	beq.n	8008298 <UART_SetConfig+0x154>
 800828a:	e00b      	b.n	80082a4 <UART_SetConfig+0x160>
 800828c:	2300      	movs	r3, #0
 800828e:	77fb      	strb	r3, [r7, #31]
 8008290:	e061      	b.n	8008356 <UART_SetConfig+0x212>
 8008292:	2302      	movs	r3, #2
 8008294:	77fb      	strb	r3, [r7, #31]
 8008296:	e05e      	b.n	8008356 <UART_SetConfig+0x212>
 8008298:	2304      	movs	r3, #4
 800829a:	77fb      	strb	r3, [r7, #31]
 800829c:	e05b      	b.n	8008356 <UART_SetConfig+0x212>
 800829e:	2308      	movs	r3, #8
 80082a0:	77fb      	strb	r3, [r7, #31]
 80082a2:	e058      	b.n	8008356 <UART_SetConfig+0x212>
 80082a4:	2310      	movs	r3, #16
 80082a6:	77fb      	strb	r3, [r7, #31]
 80082a8:	e055      	b.n	8008356 <UART_SetConfig+0x212>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a47      	ldr	r2, [pc, #284]	; (80083cc <UART_SetConfig+0x288>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d124      	bne.n	80082fe <UART_SetConfig+0x1ba>
 80082b4:	4b42      	ldr	r3, [pc, #264]	; (80083c0 <UART_SetConfig+0x27c>)
 80082b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80082bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082c0:	d011      	beq.n	80082e6 <UART_SetConfig+0x1a2>
 80082c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082c6:	d817      	bhi.n	80082f8 <UART_SetConfig+0x1b4>
 80082c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082cc:	d011      	beq.n	80082f2 <UART_SetConfig+0x1ae>
 80082ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d2:	d811      	bhi.n	80082f8 <UART_SetConfig+0x1b4>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <UART_SetConfig+0x19c>
 80082d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082dc:	d006      	beq.n	80082ec <UART_SetConfig+0x1a8>
 80082de:	e00b      	b.n	80082f8 <UART_SetConfig+0x1b4>
 80082e0:	2300      	movs	r3, #0
 80082e2:	77fb      	strb	r3, [r7, #31]
 80082e4:	e037      	b.n	8008356 <UART_SetConfig+0x212>
 80082e6:	2302      	movs	r3, #2
 80082e8:	77fb      	strb	r3, [r7, #31]
 80082ea:	e034      	b.n	8008356 <UART_SetConfig+0x212>
 80082ec:	2304      	movs	r3, #4
 80082ee:	77fb      	strb	r3, [r7, #31]
 80082f0:	e031      	b.n	8008356 <UART_SetConfig+0x212>
 80082f2:	2308      	movs	r3, #8
 80082f4:	77fb      	strb	r3, [r7, #31]
 80082f6:	e02e      	b.n	8008356 <UART_SetConfig+0x212>
 80082f8:	2310      	movs	r3, #16
 80082fa:	77fb      	strb	r3, [r7, #31]
 80082fc:	e02b      	b.n	8008356 <UART_SetConfig+0x212>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a33      	ldr	r2, [pc, #204]	; (80083d0 <UART_SetConfig+0x28c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d124      	bne.n	8008352 <UART_SetConfig+0x20e>
 8008308:	4b2d      	ldr	r3, [pc, #180]	; (80083c0 <UART_SetConfig+0x27c>)
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008310:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008314:	d011      	beq.n	800833a <UART_SetConfig+0x1f6>
 8008316:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800831a:	d817      	bhi.n	800834c <UART_SetConfig+0x208>
 800831c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008320:	d011      	beq.n	8008346 <UART_SetConfig+0x202>
 8008322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008326:	d811      	bhi.n	800834c <UART_SetConfig+0x208>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <UART_SetConfig+0x1f0>
 800832c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008330:	d006      	beq.n	8008340 <UART_SetConfig+0x1fc>
 8008332:	e00b      	b.n	800834c <UART_SetConfig+0x208>
 8008334:	2300      	movs	r3, #0
 8008336:	77fb      	strb	r3, [r7, #31]
 8008338:	e00d      	b.n	8008356 <UART_SetConfig+0x212>
 800833a:	2302      	movs	r3, #2
 800833c:	77fb      	strb	r3, [r7, #31]
 800833e:	e00a      	b.n	8008356 <UART_SetConfig+0x212>
 8008340:	2304      	movs	r3, #4
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e007      	b.n	8008356 <UART_SetConfig+0x212>
 8008346:	2308      	movs	r3, #8
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e004      	b.n	8008356 <UART_SetConfig+0x212>
 800834c:	2310      	movs	r3, #16
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e001      	b.n	8008356 <UART_SetConfig+0x212>
 8008352:	2310      	movs	r3, #16
 8008354:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800835e:	d16c      	bne.n	800843a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8008360:	7ffb      	ldrb	r3, [r7, #31]
 8008362:	2b08      	cmp	r3, #8
 8008364:	d838      	bhi.n	80083d8 <UART_SetConfig+0x294>
 8008366:	a201      	add	r2, pc, #4	; (adr r2, 800836c <UART_SetConfig+0x228>)
 8008368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836c:	08008391 	.word	0x08008391
 8008370:	08008399 	.word	0x08008399
 8008374:	080083a1 	.word	0x080083a1
 8008378:	080083d9 	.word	0x080083d9
 800837c:	080083a7 	.word	0x080083a7
 8008380:	080083d9 	.word	0x080083d9
 8008384:	080083d9 	.word	0x080083d9
 8008388:	080083d9 	.word	0x080083d9
 800838c:	080083af 	.word	0x080083af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008390:	f7fe fae0 	bl	8006954 <HAL_RCC_GetPCLK1Freq>
 8008394:	61b8      	str	r0, [r7, #24]
        break;
 8008396:	e024      	b.n	80083e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008398:	f7fe fafe 	bl	8006998 <HAL_RCC_GetPCLK2Freq>
 800839c:	61b8      	str	r0, [r7, #24]
        break;
 800839e:	e020      	b.n	80083e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a0:	4b0c      	ldr	r3, [pc, #48]	; (80083d4 <UART_SetConfig+0x290>)
 80083a2:	61bb      	str	r3, [r7, #24]
        break;
 80083a4:	e01d      	b.n	80083e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083a6:	f7fe fa5f 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 80083aa:	61b8      	str	r0, [r7, #24]
        break;
 80083ac:	e019      	b.n	80083e2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083b2:	61bb      	str	r3, [r7, #24]
        break;
 80083b4:	e015      	b.n	80083e2 <UART_SetConfig+0x29e>
 80083b6:	bf00      	nop
 80083b8:	efff69f3 	.word	0xefff69f3
 80083bc:	40013800 	.word	0x40013800
 80083c0:	40021000 	.word	0x40021000
 80083c4:	40004400 	.word	0x40004400
 80083c8:	40004800 	.word	0x40004800
 80083cc:	40004c00 	.word	0x40004c00
 80083d0:	40005000 	.word	0x40005000
 80083d4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	77bb      	strb	r3, [r7, #30]
        break;
 80083e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d075      	beq.n	80084d4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	005a      	lsls	r2, r3, #1
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	085b      	lsrs	r3, r3, #1
 80083f2:	441a      	add	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2b0f      	cmp	r3, #15
 8008404:	d916      	bls.n	8008434 <UART_SetConfig+0x2f0>
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840c:	d212      	bcs.n	8008434 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	b29b      	uxth	r3, r3
 8008412:	f023 030f 	bic.w	r3, r3, #15
 8008416:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	085b      	lsrs	r3, r3, #1
 800841c:	b29b      	uxth	r3, r3
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	b29a      	uxth	r2, r3
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	4313      	orrs	r3, r2
 8008428:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	89fa      	ldrh	r2, [r7, #14]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e04f      	b.n	80084d4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	77bb      	strb	r3, [r7, #30]
 8008438:	e04c      	b.n	80084d4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800843a:	7ffb      	ldrb	r3, [r7, #31]
 800843c:	2b08      	cmp	r3, #8
 800843e:	d828      	bhi.n	8008492 <UART_SetConfig+0x34e>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <UART_SetConfig+0x304>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	0800846d 	.word	0x0800846d
 800844c:	08008475 	.word	0x08008475
 8008450:	0800847d 	.word	0x0800847d
 8008454:	08008493 	.word	0x08008493
 8008458:	08008483 	.word	0x08008483
 800845c:	08008493 	.word	0x08008493
 8008460:	08008493 	.word	0x08008493
 8008464:	08008493 	.word	0x08008493
 8008468:	0800848b 	.word	0x0800848b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800846c:	f7fe fa72 	bl	8006954 <HAL_RCC_GetPCLK1Freq>
 8008470:	61b8      	str	r0, [r7, #24]
        break;
 8008472:	e013      	b.n	800849c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008474:	f7fe fa90 	bl	8006998 <HAL_RCC_GetPCLK2Freq>
 8008478:	61b8      	str	r0, [r7, #24]
        break;
 800847a:	e00f      	b.n	800849c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800847c:	4b1b      	ldr	r3, [pc, #108]	; (80084ec <UART_SetConfig+0x3a8>)
 800847e:	61bb      	str	r3, [r7, #24]
        break;
 8008480:	e00c      	b.n	800849c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008482:	f7fe f9f1 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8008486:	61b8      	str	r0, [r7, #24]
        break;
 8008488:	e008      	b.n	800849c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800848a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800848e:	61bb      	str	r3, [r7, #24]
        break;
 8008490:	e004      	b.n	800849c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	77bb      	strb	r3, [r7, #30]
        break;
 800849a:	bf00      	nop
    }

    if (pclk != 0U)
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d018      	beq.n	80084d4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	085a      	lsrs	r2, r3, #1
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	441a      	add	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b0f      	cmp	r3, #15
 80084bc:	d908      	bls.n	80084d0 <UART_SetConfig+0x38c>
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c4:	d204      	bcs.n	80084d0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	e001      	b.n	80084d4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80084e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3720      	adds	r7, #32
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	007a1200 	.word	0x007a1200

080084f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	f003 0302 	and.w	r3, r3, #2
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	f003 0308 	and.w	r3, r3, #8
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	f003 0310 	and.w	r3, r3, #16
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d01a      	beq.n	8008606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ee:	d10a      	bne.n	8008606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	605a      	str	r2, [r3, #4]
  }
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af02      	add	r7, sp, #8
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008644:	f7fb fa98 	bl	8003b78 <HAL_GetTick>
 8008648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b08      	cmp	r3, #8
 8008656:	d10e      	bne.n	8008676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f82d 	bl	80086c6 <UART_WaitOnFlagUntilTimeout>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e023      	b.n	80086be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b04      	cmp	r3, #4
 8008682:	d10e      	bne.n	80086a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f817 	bl	80086c6 <UART_WaitOnFlagUntilTimeout>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e00d      	b.n	80086be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b09c      	sub	sp, #112	; 0x70
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	603b      	str	r3, [r7, #0]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d6:	e0a5      	b.n	8008824 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086de:	f000 80a1 	beq.w	8008824 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e2:	f7fb fa49 	bl	8003b78 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d302      	bcc.n	80086f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80086f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d13e      	bne.n	8008776 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008708:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800870c:	667b      	str	r3, [r7, #100]	; 0x64
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008718:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800871c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800871e:	e841 2300 	strex	r3, r2, [r1]
 8008722:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1e6      	bne.n	80086f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3308      	adds	r3, #8
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008734:	e853 3f00 	ldrex	r3, [r3]
 8008738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	f023 0301 	bic.w	r3, r3, #1
 8008740:	663b      	str	r3, [r7, #96]	; 0x60
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	3308      	adds	r3, #8
 8008748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800874a:	64ba      	str	r2, [r7, #72]	; 0x48
 800874c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e5      	bne.n	800872a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2220      	movs	r2, #32
 8008762:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e067      	b.n	8008846 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d04f      	beq.n	8008824 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800878e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008792:	d147      	bne.n	8008824 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800879c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087bc:	637b      	str	r3, [r7, #52]	; 0x34
 80087be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	613b      	str	r3, [r7, #16]
   return(result);
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087f0:	623a      	str	r2, [r7, #32]
 80087f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	69f9      	ldr	r1, [r7, #28]
 80087f6:	6a3a      	ldr	r2, [r7, #32]
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e5      	bne.n	80087d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2220      	movs	r2, #32
 8008808:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2220      	movs	r2, #32
 800880e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2220      	movs	r2, #32
 8008814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e010      	b.n	8008846 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	69da      	ldr	r2, [r3, #28]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	4013      	ands	r3, r2
 800882e:	68ba      	ldr	r2, [r7, #8]
 8008830:	429a      	cmp	r2, r3
 8008832:	bf0c      	ite	eq
 8008834:	2301      	moveq	r3, #1
 8008836:	2300      	movne	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	461a      	mov	r2, r3
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	429a      	cmp	r2, r3
 8008840:	f43f af4a 	beq.w	80086d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3770      	adds	r7, #112	; 0x70
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008854:	4904      	ldr	r1, [pc, #16]	; (8008868 <MX_FATFS_Init+0x18>)
 8008856:	4805      	ldr	r0, [pc, #20]	; (800886c <MX_FATFS_Init+0x1c>)
 8008858:	f004 f81e 	bl	800c898 <FATFS_LinkDriver>
 800885c:	4603      	mov	r3, r0
 800885e:	461a      	mov	r2, r3
 8008860:	4b03      	ldr	r3, [pc, #12]	; (8008870 <MX_FATFS_Init+0x20>)
 8008862:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008864:	bf00      	nop
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20002458 	.word	0x20002458
 800886c:	200000ac 	.word	0x200000ac
 8008870:	20002454 	.word	0x20002454

08008874 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008878:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800887a:	4618      	mov	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	4618      	mov	r0, r3
 8008892:	f7f8 ffe1 	bl	8001858 <SD_disk_initialize>
 8008896:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7f9 f8c7 	bl	8001a40 <SD_disk_status>
 80088b2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80088cc:	7bf8      	ldrb	r0, [r7, #15]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	f7f9 f8ca 	bl	8001a6c <SD_disk_read>
 80088d8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	603b      	str	r3, [r7, #0]
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80088f2:	7bf8      	ldrb	r0, [r7, #15]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	f7f9 f921 	bl	8001b40 <SD_disk_write>
 80088fe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	603a      	str	r2, [r7, #0]
 8008912:	71fb      	strb	r3, [r7, #7]
 8008914:	460b      	mov	r3, r1
 8008916:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8008918:	79b9      	ldrb	r1, [r7, #6]
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	683a      	ldr	r2, [r7, #0]
 800891e:	4618      	mov	r0, r3
 8008920:	f7f9 f992 	bl	8001c48 <SD_disk_ioctl>
 8008924:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008926:	4618      	mov	r0, r3
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	4a08      	ldr	r2, [pc, #32]	; (8008960 <disk_status+0x30>)
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	79fa      	ldrb	r2, [r7, #7]
 8008948:	4905      	ldr	r1, [pc, #20]	; (8008960 <disk_status+0x30>)
 800894a:	440a      	add	r2, r1
 800894c:	7a12      	ldrb	r2, [r2, #8]
 800894e:	4610      	mov	r0, r2
 8008950:	4798      	blx	r3
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008956:	7bfb      	ldrb	r3, [r7, #15]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	2000247c 	.word	0x2000247c

08008964 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	4a0d      	ldr	r2, [pc, #52]	; (80089ac <disk_initialize+0x48>)
 8008976:	5cd3      	ldrb	r3, [r2, r3]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d111      	bne.n	80089a0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	4a0b      	ldr	r2, [pc, #44]	; (80089ac <disk_initialize+0x48>)
 8008980:	2101      	movs	r1, #1
 8008982:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	4a09      	ldr	r2, [pc, #36]	; (80089ac <disk_initialize+0x48>)
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	79fa      	ldrb	r2, [r7, #7]
 8008992:	4906      	ldr	r1, [pc, #24]	; (80089ac <disk_initialize+0x48>)
 8008994:	440a      	add	r2, r1
 8008996:	7a12      	ldrb	r2, [r2, #8]
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	4603      	mov	r3, r0
 800899e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	2000247c 	.word	0x2000247c

080089b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	4603      	mov	r3, r0
 80089be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	4a0a      	ldr	r2, [pc, #40]	; (80089ec <disk_read+0x3c>)
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	689c      	ldr	r4, [r3, #8]
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	4a07      	ldr	r2, [pc, #28]	; (80089ec <disk_read+0x3c>)
 80089d0:	4413      	add	r3, r2
 80089d2:	7a18      	ldrb	r0, [r3, #8]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68b9      	ldr	r1, [r7, #8]
 80089da:	47a0      	blx	r4
 80089dc:	4603      	mov	r3, r0
 80089de:	75fb      	strb	r3, [r7, #23]
  return res;
 80089e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd90      	pop	{r4, r7, pc}
 80089ea:	bf00      	nop
 80089ec:	2000247c 	.word	0x2000247c

080089f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80089f0:	b590      	push	{r4, r7, lr}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	4a0a      	ldr	r2, [pc, #40]	; (8008a2c <disk_write+0x3c>)
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	68dc      	ldr	r4, [r3, #12]
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4a07      	ldr	r2, [pc, #28]	; (8008a2c <disk_write+0x3c>)
 8008a10:	4413      	add	r3, r2
 8008a12:	7a18      	ldrb	r0, [r3, #8]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	47a0      	blx	r4
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd90      	pop	{r4, r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	2000247c 	.word	0x2000247c

08008a30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	603a      	str	r2, [r7, #0]
 8008a3a:	71fb      	strb	r3, [r7, #7]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	4a09      	ldr	r2, [pc, #36]	; (8008a68 <disk_ioctl+0x38>)
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	79fa      	ldrb	r2, [r7, #7]
 8008a4e:	4906      	ldr	r1, [pc, #24]	; (8008a68 <disk_ioctl+0x38>)
 8008a50:	440a      	add	r2, r1
 8008a52:	7a10      	ldrb	r0, [r2, #8]
 8008a54:	79b9      	ldrb	r1, [r7, #6]
 8008a56:	683a      	ldr	r2, [r7, #0]
 8008a58:	4798      	blx	r3
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	2000247c 	.word	0x2000247c

08008a6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008a80:	e007      	b.n	8008a92 <mem_cpy+0x26>
		*d++ = *s++;
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	1c53      	adds	r3, r2, #1
 8008a86:	613b      	str	r3, [r7, #16]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	1c59      	adds	r1, r3, #1
 8008a8c:	6179      	str	r1, [r7, #20]
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	1e5a      	subs	r2, r3, #1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1f2      	bne.n	8008a82 <mem_cpy+0x16>
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008aaa:	b480      	push	{r7}
 8008aac:	b087      	sub	sp, #28
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	60f8      	str	r0, [r7, #12]
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008aba:	e005      	b.n	8008ac8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	617a      	str	r2, [r7, #20]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	b2d2      	uxtb	r2, r2
 8008ac6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	1e5a      	subs	r2, r3, #1
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f4      	bne.n	8008abc <mem_set+0x12>
}
 8008ad2:	bf00      	nop
 8008ad4:	bf00      	nop
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008ae0:	b480      	push	{r7}
 8008ae2:	b089      	sub	sp, #36	; 0x24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008af4:	2300      	movs	r3, #0
 8008af6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008af8:	bf00      	nop
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	1e5a      	subs	r2, r3, #1
 8008afe:	607a      	str	r2, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00d      	beq.n	8008b20 <mem_cmp+0x40>
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	61fa      	str	r2, [r7, #28]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	61ba      	str	r2, [r7, #24]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	1acb      	subs	r3, r1, r3
 8008b18:	617b      	str	r3, [r7, #20]
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0ec      	beq.n	8008afa <mem_cmp+0x1a>
	return r;
 8008b20:	697b      	ldr	r3, [r7, #20]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3724      	adds	r7, #36	; 0x24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008b38:	e002      	b.n	8008b40 <chk_chr+0x12>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	607b      	str	r3, [r7, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <chk_chr+0x26>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d1f2      	bne.n	8008b3a <chk_chr+0xc>
	return *str;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	781b      	ldrb	r3, [r3, #0]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f003 fec8 	bl	800c90a <ff_req_grant>
 8008b7a:	4603      	mov	r3, r0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d012      	beq.n	8008bbc <unlock_fs+0x38>
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	2b0c      	cmp	r3, #12
 8008b9a:	d00f      	beq.n	8008bbc <unlock_fs+0x38>
		res != FR_NOT_ENABLED &&
 8008b9c:	78fb      	ldrb	r3, [r7, #3]
 8008b9e:	2b0b      	cmp	r3, #11
 8008ba0:	d00c      	beq.n	8008bbc <unlock_fs+0x38>
		res != FR_INVALID_DRIVE &&
 8008ba2:	78fb      	ldrb	r3, [r7, #3]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	d009      	beq.n	8008bbc <unlock_fs+0x38>
		res != FR_INVALID_OBJECT &&
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	2b0f      	cmp	r3, #15
 8008bac:	d006      	beq.n	8008bbc <unlock_fs+0x38>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f003 febc 	bl	800c934 <ff_rel_grant>
	}
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60bb      	str	r3, [r7, #8]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	60fb      	str	r3, [r7, #12]
 8008bd6:	e03b      	b.n	8008c50 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8008bd8:	4931      	ldr	r1, [pc, #196]	; (8008ca0 <chk_lock+0xdc>)
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	005b      	lsls	r3, r3, #1
 8008be0:	4413      	add	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	440b      	add	r3, r1
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d02c      	beq.n	8008c46 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008bec:	492c      	ldr	r1, [pc, #176]	; (8008ca0 <chk_lock+0xdc>)
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	4413      	add	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d120      	bne.n	8008c4a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8008c08:	4925      	ldr	r1, [pc, #148]	; (8008ca0 <chk_lock+0xdc>)
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	3304      	adds	r3, #4
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c20:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d111      	bne.n	8008c4a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8008c26:	491e      	ldr	r1, [pc, #120]	; (8008ca0 <chk_lock+0xdc>)
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	4413      	add	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	440b      	add	r3, r1
 8008c34:	3308      	adds	r3, #8
 8008c36:	881a      	ldrh	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c3e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d102      	bne.n	8008c4a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8008c44:	e007      	b.n	8008c56 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8008c46:	2301      	movs	r3, #1
 8008c48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d9c0      	bls.n	8008bd8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d109      	bne.n	8008c70 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <chk_lock+0xa4>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d101      	bne.n	8008c6c <chk_lock+0xa8>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	e013      	b.n	8008c94 <chk_lock+0xd0>
 8008c6c:	2312      	movs	r3, #18
 8008c6e:	e011      	b.n	8008c94 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10b      	bne.n	8008c8e <chk_lock+0xca>
 8008c76:	490a      	ldr	r1, [pc, #40]	; (8008ca0 <chk_lock+0xdc>)
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	330a      	adds	r3, #10
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c8c:	d101      	bne.n	8008c92 <chk_lock+0xce>
 8008c8e:	2310      	movs	r3, #16
 8008c90:	e000      	b.n	8008c94 <chk_lock+0xd0>
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	20002464 	.word	0x20002464

08008ca4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	e002      	b.n	8008cb6 <enq_lock+0x12>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	607b      	str	r3, [r7, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d809      	bhi.n	8008cd0 <enq_lock+0x2c>
 8008cbc:	490a      	ldr	r1, [pc, #40]	; (8008ce8 <enq_lock+0x44>)
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1ef      	bne.n	8008cb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	bf14      	ite	ne
 8008cd6:	2301      	movne	r3, #1
 8008cd8:	2300      	moveq	r3, #0
 8008cda:	b2db      	uxtb	r3, r3
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	20002464 	.word	0x20002464

08008cec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b085      	sub	sp, #20
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
 8008cfa:	e02e      	b.n	8008d5a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8008cfc:	4959      	ldr	r1, [pc, #356]	; (8008e64 <inc_lock+0x178>)
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	4613      	mov	r3, r2
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d11d      	bne.n	8008d54 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8008d18:	4952      	ldr	r1, [pc, #328]	; (8008e64 <inc_lock+0x178>)
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	005b      	lsls	r3, r3, #1
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	3304      	adds	r3, #4
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d10e      	bne.n	8008d54 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8008d36:	494b      	ldr	r1, [pc, #300]	; (8008e64 <inc_lock+0x178>)
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	3308      	adds	r3, #8
 8008d46:	881a      	ldrh	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d4e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d006      	beq.n	8008d62 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	3301      	adds	r3, #1
 8008d58:	60fb      	str	r3, [r7, #12]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d9cd      	bls.n	8008cfc <inc_lock+0x10>
 8008d60:	e000      	b.n	8008d64 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8008d62:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d148      	bne.n	8008dfc <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	e002      	b.n	8008d76 <inc_lock+0x8a>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d809      	bhi.n	8008d90 <inc_lock+0xa4>
 8008d7c:	4939      	ldr	r1, [pc, #228]	; (8008e64 <inc_lock+0x178>)
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4613      	mov	r3, r2
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	440b      	add	r3, r1
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1ef      	bne.n	8008d70 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d101      	bne.n	8008d9a <inc_lock+0xae>
 8008d96:	2300      	movs	r3, #0
 8008d98:	e05d      	b.n	8008e56 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da0:	6819      	ldr	r1, [r3, #0]
 8008da2:	4830      	ldr	r0, [pc, #192]	; (8008e64 <inc_lock+0x178>)
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	4613      	mov	r3, r2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4403      	add	r3, r0
 8008db0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db8:	6899      	ldr	r1, [r3, #8]
 8008dba:	482a      	ldr	r0, [pc, #168]	; (8008e64 <inc_lock+0x178>)
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	005b      	lsls	r3, r3, #1
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4403      	add	r3, r0
 8008dc8:	3304      	adds	r3, #4
 8008dca:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd2:	88d8      	ldrh	r0, [r3, #6]
 8008dd4:	4923      	ldr	r1, [pc, #140]	; (8008e64 <inc_lock+0x178>)
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	005b      	lsls	r3, r3, #1
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	3308      	adds	r3, #8
 8008de4:	4602      	mov	r2, r0
 8008de6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008de8:	491e      	ldr	r1, [pc, #120]	; (8008e64 <inc_lock+0x178>)
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4613      	mov	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	330a      	adds	r3, #10
 8008df8:	2200      	movs	r2, #0
 8008dfa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00c      	beq.n	8008e1c <inc_lock+0x130>
 8008e02:	4918      	ldr	r1, [pc, #96]	; (8008e64 <inc_lock+0x178>)
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	330a      	adds	r3, #10
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <inc_lock+0x130>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	e01c      	b.n	8008e56 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10b      	bne.n	8008e3a <inc_lock+0x14e>
 8008e22:	4910      	ldr	r1, [pc, #64]	; (8008e64 <inc_lock+0x178>)
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	4613      	mov	r3, r2
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	330a      	adds	r3, #10
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	b299      	uxth	r1, r3
 8008e38:	e001      	b.n	8008e3e <inc_lock+0x152>
 8008e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e3e:	4809      	ldr	r0, [pc, #36]	; (8008e64 <inc_lock+0x178>)
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	4613      	mov	r3, r2
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4403      	add	r3, r0
 8008e4c:	330a      	adds	r3, #10
 8008e4e:	460a      	mov	r2, r1
 8008e50:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3714      	adds	r7, #20
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20002464 	.word	0x20002464

08008e68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	607b      	str	r3, [r7, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d82e      	bhi.n	8008eda <dec_lock+0x72>
		n = Files[i].ctr;
 8008e7c:	491b      	ldr	r1, [pc, #108]	; (8008eec <dec_lock+0x84>)
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	4613      	mov	r3, r2
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	440b      	add	r3, r1
 8008e8a:	330a      	adds	r3, #10
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008e90:	89fb      	ldrh	r3, [r7, #14]
 8008e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e96:	d101      	bne.n	8008e9c <dec_lock+0x34>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008e9c:	89fb      	ldrh	r3, [r7, #14]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <dec_lock+0x40>
 8008ea2:	89fb      	ldrh	r3, [r7, #14]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008ea8:	4910      	ldr	r1, [pc, #64]	; (8008eec <dec_lock+0x84>)
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4613      	mov	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	330a      	adds	r3, #10
 8008eb8:	89fa      	ldrh	r2, [r7, #14]
 8008eba:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d108      	bne.n	8008ed4 <dec_lock+0x6c>
 8008ec2:	490a      	ldr	r1, [pc, #40]	; (8008eec <dec_lock+0x84>)
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	4413      	add	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	440b      	add	r3, r1
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	737b      	strb	r3, [r7, #13]
 8008ed8:	e001      	b.n	8008ede <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008eda:	2302      	movs	r3, #2
 8008edc:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008ede:	7b7b      	ldrb	r3, [r7, #13]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr
 8008eec:	20002464 	.word	0x20002464

08008ef0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e016      	b.n	8008f2c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008efe:	4910      	ldr	r1, [pc, #64]	; (8008f40 <clear_lock+0x50>)
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4613      	mov	r3, r2
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	440b      	add	r3, r1
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d108      	bne.n	8008f26 <clear_lock+0x36>
 8008f14:	490a      	ldr	r1, [pc, #40]	; (8008f40 <clear_lock+0x50>)
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	4413      	add	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	440b      	add	r3, r1
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d9e5      	bls.n	8008efe <clear_lock+0xe>
	}
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20002464 	.word	0x20002464

08008f44 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f56:	791b      	ldrb	r3, [r3, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d040      	beq.n	8008fde <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6c:	7858      	ldrb	r0, [r3, #1]
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	2301      	movs	r3, #1
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	f7ff fd3c 	bl	80089f0 <disk_write>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <sync_window+0x40>
			res = FR_DISK_ERR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	73fb      	strb	r3, [r7, #15]
 8008f82:	e02c      	b.n	8008fde <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	1ad2      	subs	r2, r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d21b      	bcs.n	8008fde <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fac:	78db      	ldrb	r3, [r3, #3]
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	e012      	b.n	8008fd8 <sync_window+0x94>
					wsect += fs->fsize;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc6:	7858      	ldrb	r0, [r3, #1]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	2301      	movs	r3, #1
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	f7ff fd0f 	bl	80089f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d8e9      	bhi.n	8008fb2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d01e      	beq.n	8009042 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff ff9d 	bl	8008f44 <sync_window>
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d116      	bne.n	8009042 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	7858      	ldrb	r0, [r3, #1]
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	2301      	movs	r3, #1
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	f7ff fcc5 	bl	80089b0 <disk_read>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d004      	beq.n	8009036 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800902c:	f04f 33ff 	mov.w	r3, #4294967295
 8009030:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009032:	2301      	movs	r3, #1
 8009034:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800903c:	461a      	mov	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}
	return res;
 8009042:	7bfb      	ldrb	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff ff75 	bl	8008f44 <sync_window>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 80ad 	bne.w	80091c0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	2b03      	cmp	r3, #3
 8009070:	f040 8098 	bne.w	80091a4 <sync_fs+0x158>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907a:	795b      	ldrb	r3, [r3, #5]
 800907c:	2b01      	cmp	r3, #1
 800907e:	f040 8091 	bne.w	80091a4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800908a:	895b      	ldrh	r3, [r3, #10]
 800908c:	461a      	mov	r2, r3
 800908e:	2100      	movs	r1, #0
 8009090:	f7ff fd0b 	bl	8008aaa <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2255      	movs	r2, #85	; 0x55
 8009098:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	22aa      	movs	r2, #170	; 0xaa
 80090a0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2252      	movs	r2, #82	; 0x52
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2252      	movs	r2, #82	; 0x52
 80090ae:	705a      	strb	r2, [r3, #1]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2261      	movs	r2, #97	; 0x61
 80090b4:	709a      	strb	r2, [r3, #2]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2241      	movs	r2, #65	; 0x41
 80090ba:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2272      	movs	r2, #114	; 0x72
 80090c0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2272      	movs	r2, #114	; 0x72
 80090c8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2241      	movs	r2, #65	; 0x41
 80090d0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2261      	movs	r2, #97	; 0x61
 80090d8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e2:	695b      	ldr	r3, [r3, #20]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	0a1b      	lsrs	r3, r3, #8
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	0c1b      	lsrs	r3, r3, #16
 800910c:	b2da      	uxtb	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	0e1b      	lsrs	r3, r3, #24
 800911e:	b2da      	uxtb	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	b2da      	uxtb	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	b29b      	uxth	r3, r3
 8009140:	0a1b      	lsrs	r3, r3, #8
 8009142:	b29b      	uxth	r3, r3
 8009144:	b2da      	uxtb	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	0c1b      	lsrs	r3, r3, #16
 8009156:	b2da      	uxtb	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	0e1b      	lsrs	r3, r3, #24
 8009168:	b2da      	uxtb	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	3301      	adds	r3, #1
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009180:	6313      	str	r3, [r2, #48]	; 0x30
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009188:	7858      	ldrb	r0, [r3, #1]
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009194:	2301      	movs	r3, #1
 8009196:	f7ff fc2b 	bl	80089f0 <disk_write>
			fs->fsi_flag = 0;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a0:	2200      	movs	r2, #0
 80091a2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2100      	movs	r1, #0
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff fc3d 	bl	8008a30 <disk_ioctl>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b083      	sub	sp, #12
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	3b02      	subs	r3, #2
 80091d8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	3b02      	subs	r3, #2
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d301      	bcc.n	80091ee <clust2sect+0x24>
 80091ea:	2300      	movs	r3, #0
 80091ec:	e00c      	b.n	8009208 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f4:	789b      	ldrb	r3, [r3, #2]
 80091f6:	461a      	mov	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	fb03 f202 	mul.w	r2, r3, r2
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	4413      	add	r3, r2
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d906      	bls.n	8009232 <get_fat+0x1e>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	429a      	cmp	r2, r3
 8009230:	d302      	bcc.n	8009238 <get_fat+0x24>
		val = 1;	/* Internal error */
 8009232:	2301      	movs	r3, #1
 8009234:	617b      	str	r3, [r7, #20]
 8009236:	e0e4      	b.n	8009402 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b03      	cmp	r3, #3
 8009248:	f000 8098 	beq.w	800937c <get_fat+0x168>
 800924c:	2b03      	cmp	r3, #3
 800924e:	f300 80ce 	bgt.w	80093ee <get_fat+0x1da>
 8009252:	2b01      	cmp	r3, #1
 8009254:	d002      	beq.n	800925c <get_fat+0x48>
 8009256:	2b02      	cmp	r3, #2
 8009258:	d05f      	beq.n	800931a <get_fat+0x106>
 800925a:	e0c8      	b.n	80093ee <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	085b      	lsrs	r3, r3, #1
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009278:	895b      	ldrh	r3, [r3, #10]
 800927a:	4619      	mov	r1, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009282:	4413      	add	r3, r2
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f7ff feae 	bl	8008fe8 <move_window>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	f040 80b0 	bne.w	80093f4 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	60fa      	str	r2, [r7, #12]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092a0:	8952      	ldrh	r2, [r2, #10]
 80092a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80092a6:	fb01 f202 	mul.w	r2, r1, r2
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	5cd3      	ldrb	r3, [r2, r3]
 80092b0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c0:	895b      	ldrh	r3, [r3, #10]
 80092c2:	4619      	mov	r1, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ca:	4413      	add	r3, r2
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff fe8a 	bl	8008fe8 <move_window>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f040 808e 	bne.w	80093f8 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e2:	895b      	ldrh	r3, [r3, #10]
 80092e4:	461a      	mov	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ec:	fb01 f202 	mul.w	r2, r1, r2
 80092f0:	1a9b      	subs	r3, r3, r2
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	5cd3      	ldrb	r3, [r2, r3]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	461a      	mov	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <get_fat+0xfc>
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	e002      	b.n	8009316 <get_fat+0x102>
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009316:	617b      	str	r3, [r7, #20]
			break;
 8009318:	e073      	b.n	8009402 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009328:	895b      	ldrh	r3, [r3, #10]
 800932a:	085b      	lsrs	r3, r3, #1
 800932c:	b29b      	uxth	r3, r3
 800932e:	4619      	mov	r1, r3
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	fbb3 f3f1 	udiv	r3, r3, r1
 8009336:	4413      	add	r3, r2
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7ff fe54 	bl	8008fe8 <move_window>
 8009340:	4603      	mov	r3, r0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d15a      	bne.n	80093fc <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009350:	8952      	ldrh	r2, [r2, #10]
 8009352:	fbb3 f1f2 	udiv	r1, r3, r2
 8009356:	fb01 f202 	mul.w	r2, r1, r2
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	4413      	add	r3, r2
 8009360:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	3301      	adds	r3, #1
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	b21a      	sxth	r2, r3
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	b21b      	sxth	r3, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	b21b      	sxth	r3, r3
 8009376:	b29b      	uxth	r3, r3
 8009378:	617b      	str	r3, [r7, #20]
			break;
 800937a:	e042      	b.n	8009402 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800938a:	895b      	ldrh	r3, [r3, #10]
 800938c:	089b      	lsrs	r3, r3, #2
 800938e:	b29b      	uxth	r3, r3
 8009390:	4619      	mov	r1, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	fbb3 f3f1 	udiv	r3, r3, r1
 8009398:	4413      	add	r3, r2
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff fe23 	bl	8008fe8 <move_window>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d12b      	bne.n	8009400 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093b2:	8952      	ldrh	r2, [r2, #10]
 80093b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80093b8:	fb01 f202 	mul.w	r2, r1, r2
 80093bc:	1a9b      	subs	r3, r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	4413      	add	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	3303      	adds	r3, #3
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	061a      	lsls	r2, r3, #24
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	3302      	adds	r3, #2
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	041b      	lsls	r3, r3, #16
 80093d4:	4313      	orrs	r3, r2
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	3201      	adds	r2, #1
 80093da:	7812      	ldrb	r2, [r2, #0]
 80093dc:	0212      	lsls	r2, r2, #8
 80093de:	4313      	orrs	r3, r2
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	7812      	ldrb	r2, [r2, #0]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80093ea:	617b      	str	r3, [r7, #20]
			break;
 80093ec:	e009      	b.n	8009402 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80093ee:	2301      	movs	r3, #1
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	e006      	b.n	8009402 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093f4:	bf00      	nop
 80093f6:	e004      	b.n	8009402 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093f8:	bf00      	nop
 80093fa:	e002      	b.n	8009402 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093fc:	bf00      	nop
 80093fe:	e000      	b.n	8009402 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009400:	bf00      	nop
		}
	}

	return val;
 8009402:	697b      	ldr	r3, [r7, #20]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d906      	bls.n	800942c <put_fat+0x20>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	429a      	cmp	r2, r3
 800942a:	d302      	bcc.n	8009432 <put_fat+0x26>
		res = FR_INT_ERR;
 800942c:	2302      	movs	r3, #2
 800942e:	77fb      	strb	r3, [r7, #31]
 8009430:	e13a      	b.n	80096a8 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b03      	cmp	r3, #3
 800943c:	f000 80d0 	beq.w	80095e0 <put_fat+0x1d4>
 8009440:	2b03      	cmp	r3, #3
 8009442:	f300 8127 	bgt.w	8009694 <put_fat+0x288>
 8009446:	2b01      	cmp	r3, #1
 8009448:	d003      	beq.n	8009452 <put_fat+0x46>
 800944a:	2b02      	cmp	r3, #2
 800944c:	f000 808f 	beq.w	800956e <put_fat+0x162>
 8009450:	e120      	b.n	8009694 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	617b      	str	r3, [r7, #20]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	085b      	lsrs	r3, r3, #1
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4413      	add	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946e:	895b      	ldrh	r3, [r3, #10]
 8009470:	4619      	mov	r1, r3
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	fbb3 f3f1 	udiv	r3, r3, r1
 8009478:	4413      	add	r3, r2
 800947a:	4619      	mov	r1, r3
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff fdb3 	bl	8008fe8 <move_window>
 8009482:	4603      	mov	r3, r0
 8009484:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009486:	7ffb      	ldrb	r3, [r7, #31]
 8009488:	2b00      	cmp	r3, #0
 800948a:	f040 8106 	bne.w	800969a <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	617a      	str	r2, [r7, #20]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800949a:	8952      	ldrh	r2, [r2, #10]
 800949c:	fbb3 f1f2 	udiv	r1, r3, r2
 80094a0:	fb01 f202 	mul.w	r2, r1, r2
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <put_fat+0xc6>
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	b25b      	sxtb	r3, r3
 80094bc:	f003 030f 	and.w	r3, r3, #15
 80094c0:	b25a      	sxtb	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	b25b      	sxtb	r3, r3
 80094ca:	4313      	orrs	r3, r2
 80094cc:	b25b      	sxtb	r3, r3
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	e001      	b.n	80094d6 <put_fat+0xca>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e0:	2201      	movs	r2, #1
 80094e2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f2:	895b      	ldrh	r3, [r3, #10]
 80094f4:	4619      	mov	r1, r3
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80094fc:	4413      	add	r3, r2
 80094fe:	4619      	mov	r1, r3
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff fd71 	bl	8008fe8 <move_window>
 8009506:	4603      	mov	r3, r0
 8009508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800950a:	7ffb      	ldrb	r3, [r7, #31]
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 80c6 	bne.w	800969e <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009518:	895b      	ldrh	r3, [r3, #10]
 800951a:	461a      	mov	r2, r3
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009522:	fb01 f202 	mul.w	r2, r1, r2
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <put_fat+0x134>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	091b      	lsrs	r3, r3, #4
 800953c:	b2db      	uxtb	r3, r3
 800953e:	e00e      	b.n	800955e <put_fat+0x152>
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	b25b      	sxtb	r3, r3
 8009546:	f023 030f 	bic.w	r3, r3, #15
 800954a:	b25a      	sxtb	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	0a1b      	lsrs	r3, r3, #8
 8009550:	b25b      	sxtb	r3, r3
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	b25b      	sxtb	r3, r3
 8009558:	4313      	orrs	r3, r2
 800955a:	b25b      	sxtb	r3, r3
 800955c:	b2db      	uxtb	r3, r3
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009568:	2201      	movs	r2, #1
 800956a:	711a      	strb	r2, [r3, #4]
			break;
 800956c:	e09c      	b.n	80096a8 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	895b      	ldrh	r3, [r3, #10]
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	b29b      	uxth	r3, r3
 8009582:	4619      	mov	r1, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	fbb3 f3f1 	udiv	r3, r3, r1
 800958a:	4413      	add	r3, r2
 800958c:	4619      	mov	r1, r3
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fd2a 	bl	8008fe8 <move_window>
 8009594:	4603      	mov	r3, r0
 8009596:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009598:	7ffb      	ldrb	r3, [r7, #31]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f040 8081 	bne.w	80096a2 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	005b      	lsls	r3, r3, #1
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095aa:	8952      	ldrh	r2, [r2, #10]
 80095ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80095b0:	fb01 f202 	mul.w	r2, r1, r2
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	4413      	add	r3, r2
 80095ba:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	701a      	strb	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	0a1b      	lsrs	r3, r3, #8
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	3301      	adds	r3, #1
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095da:	2201      	movs	r2, #1
 80095dc:	711a      	strb	r2, [r3, #4]
			break;
 80095de:	e063      	b.n	80096a8 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ee:	895b      	ldrh	r3, [r3, #10]
 80095f0:	089b      	lsrs	r3, r3, #2
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	4619      	mov	r1, r3
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80095fc:	4413      	add	r3, r2
 80095fe:	4619      	mov	r1, r3
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff fcf1 	bl	8008fe8 <move_window>
 8009606:	4603      	mov	r3, r0
 8009608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800960a:	7ffb      	ldrb	r3, [r7, #31]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d14a      	bne.n	80096a6 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800961a:	8952      	ldrh	r2, [r2, #10]
 800961c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009620:	fb01 f202 	mul.w	r2, r1, r2
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	3303      	adds	r3, #3
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	061a      	lsls	r2, r3, #24
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	3302      	adds	r3, #2
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	041b      	lsls	r3, r3, #16
 800963c:	4313      	orrs	r3, r2
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	3201      	adds	r2, #1
 8009642:	7812      	ldrb	r2, [r2, #0]
 8009644:	0212      	lsls	r2, r2, #8
 8009646:	4313      	orrs	r3, r2
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	7812      	ldrb	r2, [r2, #0]
 800964c:	4313      	orrs	r3, r2
 800964e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	4313      	orrs	r3, r2
 8009656:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	b2da      	uxtb	r2, r3
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	701a      	strb	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	b29b      	uxth	r3, r3
 8009664:	0a1b      	lsrs	r3, r3, #8
 8009666:	b29a      	uxth	r2, r3
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	3301      	adds	r3, #1
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	0c1a      	lsrs	r2, r3, #16
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	3302      	adds	r3, #2
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	701a      	strb	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	0e1a      	lsrs	r2, r3, #24
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	3303      	adds	r3, #3
 8009684:	b2d2      	uxtb	r2, r2
 8009686:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800968e:	2201      	movs	r2, #1
 8009690:	711a      	strb	r2, [r3, #4]
			break;
 8009692:	e009      	b.n	80096a8 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8009694:	2302      	movs	r3, #2
 8009696:	77fb      	strb	r3, [r7, #31]
 8009698:	e006      	b.n	80096a8 <put_fat+0x29c>
			if (res != FR_OK) break;
 800969a:	bf00      	nop
 800969c:	e004      	b.n	80096a8 <put_fat+0x29c>
			if (res != FR_OK) break;
 800969e:	bf00      	nop
 80096a0:	e002      	b.n	80096a8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80096a2:	bf00      	nop
 80096a4:	e000      	b.n	80096a8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80096a6:	bf00      	nop
		}
	}

	return res;
 80096a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3720      	adds	r7, #32
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d906      	bls.n	80096d0 <remove_chain+0x1e>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d302      	bcc.n	80096d6 <remove_chain+0x24>
		res = FR_INT_ERR;
 80096d0:	2302      	movs	r3, #2
 80096d2:	73fb      	strb	r3, [r7, #15]
 80096d4:	e049      	b.n	800976a <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80096da:	e03b      	b.n	8009754 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80096dc:	6839      	ldr	r1, [r7, #0]
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f7ff fd98 	bl	8009214 <get_fat>
 80096e4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d03b      	beq.n	8009764 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d102      	bne.n	80096f8 <remove_chain+0x46>
 80096f2:	2302      	movs	r3, #2
 80096f4:	73fb      	strb	r3, [r7, #15]
 80096f6:	e038      	b.n	800976a <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d102      	bne.n	8009706 <remove_chain+0x54>
 8009700:	2301      	movs	r3, #1
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	e031      	b.n	800976a <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8009706:	2200      	movs	r2, #0
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff fe7e 	bl	800940c <put_fat>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d126      	bne.n	8009768 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d013      	beq.n	8009750 <remove_chain+0x9e>
				fs->free_clust++;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	3301      	adds	r3, #1
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009738:	6153      	str	r3, [r2, #20]
				fs->fsi_flag |= 1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009740:	795b      	ldrb	r3, [r3, #5]
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	b2da      	uxtb	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800974e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	d3bc      	bcc.n	80096dc <remove_chain+0x2a>
 8009762:	e002      	b.n	800976a <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <remove_chain+0xb8>
			if (res != FR_OK) break;
 8009768:	bf00      	nop
		}
	}

	return res;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d111      	bne.n	80097a8 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d006      	beq.n	80097a2 <create_chain+0x2e>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d31d      	bcc.n	80097de <create_chain+0x6a>
 80097a2:	2301      	movs	r3, #1
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	e01a      	b.n	80097de <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff fd32 	bl	8009214 <get_fat>
 80097b0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d801      	bhi.n	80097bc <create_chain+0x48>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e07f      	b.n	80098bc <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d101      	bne.n	80097c8 <create_chain+0x54>
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	e079      	b.n	80098bc <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d201      	bcs.n	80097da <create_chain+0x66>
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	e070      	b.n	80098bc <create_chain+0x148>
		scl = clst;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	3301      	adds	r3, #1
 80097e6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d307      	bcc.n	8009806 <create_chain+0x92>
			ncl = 2;
 80097f6:	2302      	movs	r3, #2
 80097f8:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d901      	bls.n	8009806 <create_chain+0x92>
 8009802:	2300      	movs	r3, #0
 8009804:	e05a      	b.n	80098bc <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009806:	6979      	ldr	r1, [r7, #20]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff fd03 	bl	8009214 <get_fat>
 800980e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00e      	beq.n	8009834 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981c:	d002      	beq.n	8009824 <create_chain+0xb0>
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d101      	bne.n	8009828 <create_chain+0xb4>
			return cs;
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	e049      	b.n	80098bc <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	429a      	cmp	r2, r3
 800982e:	d1d8      	bne.n	80097e2 <create_chain+0x6e>
 8009830:	2300      	movs	r3, #0
 8009832:	e043      	b.n	80098bc <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8009834:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009836:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800983a:	6979      	ldr	r1, [r7, #20]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff fde5 	bl	800940c <put_fat>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d109      	bne.n	8009860 <create_chain+0xec>
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d006      	beq.n	8009860 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fdd8 	bl	800940c <put_fat>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d121      	bne.n	80098aa <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986c:	461a      	mov	r2, r3
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	6113      	str	r3, [r2, #16]
		if (fs->free_clust != 0xFFFFFFFF) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987e:	d01c      	beq.n	80098ba <create_chain+0x146>
			fs->free_clust--;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	3b01      	subs	r3, #1
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009890:	6153      	str	r3, [r2, #20]
			fs->fsi_flag |= 1;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009898:	795b      	ldrb	r3, [r3, #5]
 800989a:	f043 0301 	orr.w	r3, r3, #1
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a6:	715a      	strb	r2, [r3, #5]
 80098a8:	e007      	b.n	80098ba <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d102      	bne.n	80098b6 <create_chain+0x142>
 80098b0:	f04f 33ff 	mov.w	r3, #4294967295
 80098b4:	e000      	b.n	80098b8 <create_chain+0x144>
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80098ba:	697b      	ldr	r3, [r7, #20]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	3304      	adds	r3, #4
 80098d8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e6:	895b      	ldrh	r3, [r3, #10]
 80098e8:	461a      	mov	r2, r3
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098fc:	7892      	ldrb	r2, [r2, #2]
 80098fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009902:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	1d1a      	adds	r2, r3, #4
 8009908:	613a      	str	r2, [r7, #16]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <clmt_clust+0x54>
 8009914:	2300      	movs	r3, #0
 8009916:	e010      	b.n	800993a <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	429a      	cmp	r2, r3
 800991e:	d307      	bcc.n	8009930 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	3304      	adds	r3, #4
 800992c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800992e:	e7e9      	b.n	8009904 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8009930:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	4413      	add	r3, r2
}
 800993a:	4618      	mov	r0, r3
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b086      	sub	sp, #24
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800995a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d009      	beq.n	8009980 <dir_sdi+0x3a>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	429a      	cmp	r2, r3
 800997e:	d301      	bcc.n	8009984 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8009980:	2302      	movs	r3, #2
 8009982:	e0aa      	b.n	8009ada <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d110      	bne.n	80099ac <dir_sdi+0x66>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	2b03      	cmp	r3, #3
 800999a:	d107      	bne.n	80099ac <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099aa:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d115      	bne.n	80099de <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099be:	891b      	ldrh	r3, [r3, #8]
 80099c0:	461a      	mov	r2, r3
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d301      	bcc.n	80099cc <dir_sdi+0x86>
			return FR_INT_ERR;
 80099c8:	2302      	movs	r3, #2
 80099ca:	e086      	b.n	8009ada <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099da:	613b      	str	r3, [r7, #16]
 80099dc:	e043      	b.n	8009a66 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ea:	895b      	ldrh	r3, [r3, #10]
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099fe:	789b      	ldrb	r3, [r3, #2]
 8009a00:	fb02 f303 	mul.w	r3, r2, r3
 8009a04:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8009a06:	e021      	b.n	8009a4c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6979      	ldr	r1, [r7, #20]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff fbfe 	bl	8009214 <get_fat>
 8009a18:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a20:	d101      	bne.n	8009a26 <dir_sdi+0xe0>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e059      	b.n	8009ada <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d909      	bls.n	8009a40 <dir_sdi+0xfa>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d301      	bcc.n	8009a44 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8009a40:	2302      	movs	r3, #2
 8009a42:	e04a      	b.n	8009ada <dir_sdi+0x194>
			idx -= ic;
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d2d9      	bcs.n	8009a08 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6979      	ldr	r1, [r7, #20]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff fbb3 	bl	80091ca <clust2sect>
 8009a64:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d101      	bne.n	8009a7c <dir_sdi+0x136>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	e02e      	b.n	8009ada <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a88:	895b      	ldrh	r3, [r3, #10]
 8009a8a:	095b      	lsrs	r3, r3, #5
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	4413      	add	r3, r2
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009aa0:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab8:	895b      	ldrh	r3, [r3, #10]
 8009aba:	095b      	lsrs	r3, r3, #5
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ac6:	fb01 f202 	mul.w	r2, r1, r2
 8009aca:	1a9b      	subs	r3, r3, r2
 8009acc:	015b      	lsls	r3, r3, #5
 8009ace:	4403      	add	r3, r0
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ad6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ae2:	b590      	push	{r4, r7, lr}
 8009ae4:	b087      	sub	sp, #28
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af2:	88db      	ldrh	r3, [r3, #6]
 8009af4:	3301      	adds	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <dir_next+0x2a>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d101      	bne.n	8009b10 <dir_next+0x2e>
		return FR_NO_FILE;
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	e12e      	b.n	8009d6e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b1c:	895b      	ldrh	r3, [r3, #10]
 8009b1e:	095b      	lsrs	r3, r3, #5
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b2a:	fb01 f202 	mul.w	r2, r1, r2
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f040 80fa 	bne.w	8009d2a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b46:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10d      	bne.n	8009b70 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b60:	891b      	ldrh	r3, [r3, #8]
 8009b62:	461a      	mov	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	4293      	cmp	r3, r2
 8009b68:	f0c0 80df 	bcc.w	8009d2a <dir_next+0x248>
				return FR_NO_FILE;
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	e0fe      	b.n	8009d6e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7c:	895b      	ldrh	r3, [r3, #10]
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	461a      	mov	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b96:	7892      	ldrb	r2, [r2, #2]
 8009b98:	3a01      	subs	r2, #1
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f040 80c4 	bne.w	8009d2a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f7ff fb2d 	bl	8009214 <get_fat>
 8009bba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d801      	bhi.n	8009bc6 <dir_next+0xe4>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e0d3      	b.n	8009d6e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bcc:	d101      	bne.n	8009bd2 <dir_next+0xf0>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e0cd      	b.n	8009d6e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	f0c0 808e 	bcc.w	8009d04 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <dir_next+0x110>
 8009bee:	2304      	movs	r3, #4
 8009bf0:	e0bd      	b.n	8009d6e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	4619      	mov	r1, r3
 8009c04:	4610      	mov	r0, r2
 8009c06:	f7ff fdb5 	bl	8009774 <create_chain>
 8009c0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <dir_next+0x134>
 8009c12:	2307      	movs	r3, #7
 8009c14:	e0ab      	b.n	8009d6e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d101      	bne.n	8009c20 <dir_next+0x13e>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e0a6      	b.n	8009d6e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c26:	d101      	bne.n	8009c2c <dir_next+0x14a>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e0a0      	b.n	8009d6e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff f985 	bl	8008f44 <sync_window>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <dir_next+0x162>
 8009c40:	2301      	movs	r3, #1
 8009c42:	e094      	b.n	8009d6e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5a:	895b      	ldrh	r3, [r3, #10]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	2100      	movs	r1, #0
 8009c60:	f7fe ff23 	bl	8008aaa <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c72:	681c      	ldr	r4, [r3, #0]
 8009c74:	6979      	ldr	r1, [r7, #20]
 8009c76:	4610      	mov	r0, r2
 8009c78:	f7ff faa7 	bl	80091ca <clust2sect>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009c82:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009c84:	2300      	movs	r3, #0
 8009c86:	613b      	str	r3, [r7, #16]
 8009c88:	e021      	b.n	8009cce <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c96:	2201      	movs	r2, #1
 8009c98:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff f94e 	bl	8008f44 <sync_window>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <dir_next+0x1d0>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e05d      	b.n	8009d6e <dir_next+0x28c>
						dp->fs->winsect++;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009cbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009cc0:	3201      	adds	r2, #1
 8009cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc6:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cda:	789b      	ldrb	r3, [r3, #2]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d3d2      	bcc.n	8009c8a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	1acb      	subs	r3, r1, r3
 8009cfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d02:	6313      	str	r3, [r2, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6979      	ldr	r1, [r7, #20]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff fa55 	bl	80091ca <clust2sect>
 8009d20:	4602      	mov	r2, r0
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d28:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d34:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4c:	895b      	ldrh	r3, [r3, #10]
 8009d4e:	095b      	lsrs	r3, r3, #5
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	461a      	mov	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d5a:	fb01 f202 	mul.w	r2, r1, r2
 8009d5e:	1a9b      	subs	r3, r3, r2
 8009d60:	015b      	lsls	r3, r3, #5
 8009d62:	4403      	add	r3, r0
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d6a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd90      	pop	{r4, r7, pc}

08009d76 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8009d80:	2100      	movs	r1, #0
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fddf 	bl	8009946 <dir_sdi>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d135      	bne.n	8009dfe <dir_alloc+0x88>
		n = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	4619      	mov	r1, r3
 8009da8:	4610      	mov	r0, r2
 8009daa:	f7ff f91d 	bl	8008fe8 <move_window>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d121      	bne.n	8009dfc <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2be5      	cmp	r3, #229	; 0xe5
 8009dc4:	d006      	beq.n	8009dd4 <dir_alloc+0x5e>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d107      	bne.n	8009de4 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	60bb      	str	r3, [r7, #8]
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d102      	bne.n	8009de8 <dir_alloc+0x72>
 8009de2:	e00c      	b.n	8009dfe <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009de4:	2300      	movs	r3, #0
 8009de6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009de8:	2101      	movs	r1, #1
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff fe79 	bl	8009ae2 <dir_next>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0cd      	beq.n	8009d96 <dir_alloc+0x20>
 8009dfa:	e000      	b.n	8009dfe <dir_alloc+0x88>
			if (res != FR_OK) break;
 8009dfc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d101      	bne.n	8009e08 <dir_alloc+0x92>
 8009e04:	2307      	movs	r3, #7
 8009e06:	73fb      	strb	r3, [r7, #15]
	return res;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	331b      	adds	r3, #27
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	021b      	lsls	r3, r3, #8
 8009e24:	b21a      	sxth	r2, r3
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	331a      	adds	r3, #26
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	b21b      	sxth	r3, r3
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	b21b      	sxth	r3, r3
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d10f      	bne.n	8009e62 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	3315      	adds	r3, #21
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	b21a      	sxth	r2, r3
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	3314      	adds	r3, #20
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b21b      	sxth	r3, r3
 8009e54:	4313      	orrs	r3, r2
 8009e56:	b21b      	sxth	r3, r3
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	041b      	lsls	r3, r3, #16
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]

	return cl;
 8009e62:	68fb      	ldr	r3, [r7, #12]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	331a      	adds	r3, #26
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	0a1b      	lsrs	r3, r3, #8
 8009e8a:	b29a      	uxth	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	331b      	adds	r3, #27
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	0c1a      	lsrs	r2, r3, #16
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3314      	adds	r3, #20
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	701a      	strb	r2, [r3, #0]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	0a1b      	lsrs	r3, r3, #8
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	3315      	adds	r3, #21
 8009eae:	b2d2      	uxtb	r2, r2
 8009eb0:	701a      	strb	r2, [r3, #0]
}
 8009eb2:	bf00      	nop
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff fd3c 	bl	8009946 <dir_sdi>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <dir_find+0x1e>
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	e03f      	b.n	8009f5c <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	4619      	mov	r1, r3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	f7ff f87a 	bl	8008fe8 <move_window>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d12a      	bne.n	8009f54 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d102      	bne.n	8009f1a <dir_find+0x5c>
 8009f14:	2304      	movs	r3, #4
 8009f16:	75fb      	strb	r3, [r7, #23]
 8009f18:	e01f      	b.n	8009f5a <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	330b      	adds	r3, #11
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	f003 0308 	and.w	r3, r3, #8
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10b      	bne.n	8009f40 <dir_find+0x82>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	220b      	movs	r2, #11
 8009f32:	4619      	mov	r1, r3
 8009f34:	6938      	ldr	r0, [r7, #16]
 8009f36:	f7fe fdd3 	bl	8008ae0 <mem_cmp>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8009f40:	2100      	movs	r1, #0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff fdcd 	bl	8009ae2 <dir_next>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0c4      	beq.n	8009edc <dir_find+0x1e>
 8009f52:	e002      	b.n	8009f5a <dir_find+0x9c>
		if (res != FR_OK) break;
 8009f54:	bf00      	nop
 8009f56:	e000      	b.n	8009f5a <dir_find+0x9c>
			break;
 8009f58:	bf00      	nop

	return res;
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff ff01 	bl	8009d76 <dir_alloc>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d12d      	bne.n	8009fda <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7ff f829 	bl	8008fe8 <move_window>
 8009f96:	4603      	mov	r3, r0
 8009f98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d11c      	bne.n	8009fda <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	2220      	movs	r2, #32
 8009faa:	2100      	movs	r1, #0
 8009fac:	4618      	mov	r0, r3
 8009fae:	f7fe fd7c 	bl	8008aaa <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb8:	6958      	ldr	r0, [r3, #20]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	220b      	movs	r2, #11
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f7fe fd51 	bl	8008a6c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	3309      	adds	r3, #9
 8009ff2:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d05b      	beq.n	800a0b8 <get_fileinfo+0xd4>
		dir = dp->dir;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a006:	695b      	ldr	r3, [r3, #20]
 800a008:	60bb      	str	r3, [r7, #8]
		i = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 800a00e:	e01c      	b.n	800a04a <get_fileinfo+0x66>
			c = (TCHAR)dir[i++];
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	617a      	str	r2, [r7, #20]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	4413      	add	r3, r2
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	2b20      	cmp	r3, #32
 800a022:	d100      	bne.n	800a026 <get_fileinfo+0x42>
 800a024:	e011      	b.n	800a04a <get_fileinfo+0x66>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a026:	7bfb      	ldrb	r3, [r7, #15]
 800a028:	2b05      	cmp	r3, #5
 800a02a:	d101      	bne.n	800a030 <get_fileinfo+0x4c>
 800a02c:	23e5      	movs	r3, #229	; 0xe5
 800a02e:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2b09      	cmp	r3, #9
 800a034:	d104      	bne.n	800a040 <get_fileinfo+0x5c>
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	613a      	str	r2, [r7, #16]
 800a03c:	222e      	movs	r2, #46	; 0x2e
 800a03e:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	613a      	str	r2, [r7, #16]
 800a046:	7bfa      	ldrb	r2, [r7, #15]
 800a048:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b0a      	cmp	r3, #10
 800a04e:	d9df      	bls.n	800a010 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	7ada      	ldrb	r2, [r3, #11]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	331f      	adds	r3, #31
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	061a      	lsls	r2, r3, #24
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	331e      	adds	r3, #30
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	041b      	lsls	r3, r3, #16
 800a068:	4313      	orrs	r3, r2
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	321d      	adds	r2, #29
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	0212      	lsls	r2, r2, #8
 800a072:	4313      	orrs	r3, r2
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	321c      	adds	r2, #28
 800a078:	7812      	ldrb	r2, [r2, #0]
 800a07a:	431a      	orrs	r2, r3
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	3319      	adds	r3, #25
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	021b      	lsls	r3, r3, #8
 800a088:	b21a      	sxth	r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	3318      	adds	r3, #24
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	b21b      	sxth	r3, r3
 800a092:	4313      	orrs	r3, r2
 800a094:	b21b      	sxth	r3, r3
 800a096:	b29a      	uxth	r2, r3
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	3317      	adds	r3, #23
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	021b      	lsls	r3, r3, #8
 800a0a4:	b21a      	sxth	r2, r3
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	3316      	adds	r3, #22
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	b21b      	sxth	r3, r3
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	b21b      	sxth	r3, r3
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
	...

0800a0cc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]
 800a0dc:	e002      	b.n	800a0e4 <create_name+0x18>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b2f      	cmp	r3, #47	; 0x2f
 800a0ea:	d0f8      	beq.n	800a0de <create_name+0x12>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	2b5c      	cmp	r3, #92	; 0x5c
 800a0f2:	d0f4      	beq.n	800a0de <create_name+0x12>
	sfn = dp->fn;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a0fe:	220b      	movs	r2, #11
 800a100:	2120      	movs	r1, #32
 800a102:	68b8      	ldr	r0, [r7, #8]
 800a104:	f7fe fcd1 	bl	8008aaa <mem_set>
	si = i = b = 0; ni = 8;
 800a108:	2300      	movs	r3, #0
 800a10a:	77fb      	strb	r3, [r7, #31]
 800a10c:	2300      	movs	r3, #0
 800a10e:	613b      	str	r3, [r7, #16]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	2308      	movs	r3, #8
 800a116:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	617a      	str	r2, [r7, #20]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	4413      	add	r3, r2
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800a126:	7fbb      	ldrb	r3, [r7, #30]
 800a128:	2b20      	cmp	r3, #32
 800a12a:	d953      	bls.n	800a1d4 <create_name+0x108>
 800a12c:	7fbb      	ldrb	r3, [r7, #30]
 800a12e:	2b2f      	cmp	r3, #47	; 0x2f
 800a130:	d050      	beq.n	800a1d4 <create_name+0x108>
 800a132:	7fbb      	ldrb	r3, [r7, #30]
 800a134:	2b5c      	cmp	r3, #92	; 0x5c
 800a136:	d04d      	beq.n	800a1d4 <create_name+0x108>
		if (c == '.' || i >= ni) {
 800a138:	7fbb      	ldrb	r3, [r7, #30]
 800a13a:	2b2e      	cmp	r3, #46	; 0x2e
 800a13c:	d003      	beq.n	800a146 <create_name+0x7a>
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	429a      	cmp	r2, r3
 800a144:	d30f      	bcc.n	800a166 <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	2b08      	cmp	r3, #8
 800a14a:	d102      	bne.n	800a152 <create_name+0x86>
 800a14c:	7fbb      	ldrb	r3, [r7, #30]
 800a14e:	2b2e      	cmp	r3, #46	; 0x2e
 800a150:	d001      	beq.n	800a156 <create_name+0x8a>
 800a152:	2306      	movs	r3, #6
 800a154:	e073      	b.n	800a23e <create_name+0x172>
			i = 8; ni = 11;
 800a156:	2308      	movs	r3, #8
 800a158:	613b      	str	r3, [r7, #16]
 800a15a:	230b      	movs	r3, #11
 800a15c:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800a15e:	7ffb      	ldrb	r3, [r7, #31]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	77fb      	strb	r3, [r7, #31]
 800a164:	e035      	b.n	800a1d2 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a166:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	da08      	bge.n	800a180 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 800a16e:	7ffb      	ldrb	r3, [r7, #31]
 800a170:	f043 0303 	orr.w	r3, r3, #3
 800a174:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a176:	7fbb      	ldrb	r3, [r7, #30]
 800a178:	3b80      	subs	r3, #128	; 0x80
 800a17a:	4a33      	ldr	r2, [pc, #204]	; (800a248 <create_name+0x17c>)
 800a17c:	5cd3      	ldrb	r3, [r2, r3]
 800a17e:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800a180:	7fbb      	ldrb	r3, [r7, #30]
 800a182:	4619      	mov	r1, r3
 800a184:	4831      	ldr	r0, [pc, #196]	; (800a24c <create_name+0x180>)
 800a186:	f7fe fcd2 	bl	8008b2e <chk_chr>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <create_name+0xc8>
				return FR_INVALID_NAME;
 800a190:	2306      	movs	r3, #6
 800a192:	e054      	b.n	800a23e <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800a194:	7fbb      	ldrb	r3, [r7, #30]
 800a196:	2b40      	cmp	r3, #64	; 0x40
 800a198:	d907      	bls.n	800a1aa <create_name+0xde>
 800a19a:	7fbb      	ldrb	r3, [r7, #30]
 800a19c:	2b5a      	cmp	r3, #90	; 0x5a
 800a19e:	d804      	bhi.n	800a1aa <create_name+0xde>
				b |= 2;
 800a1a0:	7ffb      	ldrb	r3, [r7, #31]
 800a1a2:	f043 0302 	orr.w	r3, r3, #2
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e00c      	b.n	800a1c4 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800a1aa:	7fbb      	ldrb	r3, [r7, #30]
 800a1ac:	2b60      	cmp	r3, #96	; 0x60
 800a1ae:	d909      	bls.n	800a1c4 <create_name+0xf8>
 800a1b0:	7fbb      	ldrb	r3, [r7, #30]
 800a1b2:	2b7a      	cmp	r3, #122	; 0x7a
 800a1b4:	d806      	bhi.n	800a1c4 <create_name+0xf8>
					b |= 1; c -= 0x20;
 800a1b6:	7ffb      	ldrb	r3, [r7, #31]
 800a1b8:	f043 0301 	orr.w	r3, r3, #1
 800a1bc:	77fb      	strb	r3, [r7, #31]
 800a1be:	7fbb      	ldrb	r3, [r7, #30]
 800a1c0:	3b20      	subs	r3, #32
 800a1c2:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	613a      	str	r2, [r7, #16]
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	7fba      	ldrb	r2, [r7, #30]
 800a1d0:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a1d2:	e7a1      	b.n	800a118 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	441a      	add	r2, r3
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a1de:	7fbb      	ldrb	r3, [r7, #30]
 800a1e0:	2b20      	cmp	r3, #32
 800a1e2:	d801      	bhi.n	800a1e8 <create_name+0x11c>
 800a1e4:	2304      	movs	r3, #4
 800a1e6:	e000      	b.n	800a1ea <create_name+0x11e>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <create_name+0x12a>
 800a1f2:	2306      	movs	r3, #6
 800a1f4:	e023      	b.n	800a23e <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	2be5      	cmp	r3, #229	; 0xe5
 800a1fc:	d102      	bne.n	800a204 <create_name+0x138>
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2205      	movs	r2, #5
 800a202:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	2b08      	cmp	r3, #8
 800a208:	d102      	bne.n	800a210 <create_name+0x144>
 800a20a:	7ffb      	ldrb	r3, [r7, #31]
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800a210:	7ffb      	ldrb	r3, [r7, #31]
 800a212:	f003 0303 	and.w	r3, r3, #3
 800a216:	2b01      	cmp	r3, #1
 800a218:	d103      	bne.n	800a222 <create_name+0x156>
 800a21a:	7fbb      	ldrb	r3, [r7, #30]
 800a21c:	f043 0310 	orr.w	r3, r3, #16
 800a220:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800a222:	7ffb      	ldrb	r3, [r7, #31]
 800a224:	f003 030c 	and.w	r3, r3, #12
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d103      	bne.n	800a234 <create_name+0x168>
 800a22c:	7fbb      	ldrb	r3, [r7, #30]
 800a22e:	f043 0308 	orr.w	r3, r3, #8
 800a232:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	330b      	adds	r3, #11
 800a238:	7fba      	ldrb	r2, [r7, #30]
 800a23a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a23c:	2300      	movs	r3, #0
#endif
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3720      	adds	r7, #32
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	08010a7c 	.word	0x08010a7c
 800a24c:	080109f8 	.word	0x080109f8

0800a250 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	2b2f      	cmp	r3, #47	; 0x2f
 800a260:	d003      	beq.n	800a26a <follow_path+0x1a>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b5c      	cmp	r3, #92	; 0x5c
 800a268:	d102      	bne.n	800a270 <follow_path+0x20>
		path++;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	3301      	adds	r3, #1
 800a26e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a276:	461a      	mov	r2, r3
 800a278:	2300      	movs	r3, #0
 800a27a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	2b1f      	cmp	r3, #31
 800a282:	d80c      	bhi.n	800a29e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800a284:	2100      	movs	r1, #0
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7ff fb5d 	bl	8009946 <dir_sdi>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a296:	461a      	mov	r2, r3
 800a298:	2300      	movs	r3, #0
 800a29a:	6153      	str	r3, [r2, #20]
 800a29c:	e049      	b.n	800a332 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a29e:	463b      	mov	r3, r7
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7ff ff12 	bl	800a0cc <create_name>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d13a      	bne.n	800a328 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fe03 	bl	8009ebe <dir_find>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	7adb      	ldrb	r3, [r3, #11]
 800a2c6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d12b      	bne.n	800a32c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	f003 0304 	and.w	r3, r3, #4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d126      	bne.n	800a32c <follow_path+0xdc>
 800a2de:	2305      	movs	r3, #5
 800a2e0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800a2e2:	e023      	b.n	800a32c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	f003 0304 	and.w	r3, r3, #4
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d120      	bne.n	800a330 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	330b      	adds	r3, #11
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	f003 0310 	and.w	r3, r3, #16
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800a306:	2305      	movs	r3, #5
 800a308:	73fb      	strb	r3, [r7, #15]
 800a30a:	e012      	b.n	800a332 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68b9      	ldr	r1, [r7, #8]
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff fd7b 	bl	8009e12 <ld_clust>
 800a31c:	4602      	mov	r2, r0
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a324:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a326:	e7ba      	b.n	800a29e <follow_path+0x4e>
			if (res != FR_OK) break;
 800a328:	bf00      	nop
 800a32a:	e002      	b.n	800a332 <follow_path+0xe2>
				break;
 800a32c:	bf00      	nop
 800a32e:	e000      	b.n	800a332 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a330:	bf00      	nop
		}
	}

	return res;
 800a332:	7bfb      	ldrb	r3, [r7, #15]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a344:	f04f 33ff 	mov.w	r3, #4294967295
 800a348:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d031      	beq.n	800a3b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	617b      	str	r3, [r7, #20]
 800a358:	e002      	b.n	800a360 <get_ldnumber+0x24>
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	3301      	adds	r3, #1
 800a35e:	617b      	str	r3, [r7, #20]
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	2b20      	cmp	r3, #32
 800a366:	d903      	bls.n	800a370 <get_ldnumber+0x34>
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b3a      	cmp	r3, #58	; 0x3a
 800a36e:	d1f4      	bne.n	800a35a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	2b3a      	cmp	r3, #58	; 0x3a
 800a376:	d11c      	bne.n	800a3b2 <get_ldnumber+0x76>
			tp = *path;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	1c5a      	adds	r2, r3, #1
 800a382:	60fa      	str	r2, [r7, #12]
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	3b30      	subs	r3, #48	; 0x30
 800a388:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b09      	cmp	r3, #9
 800a38e:	d80e      	bhi.n	800a3ae <get_ldnumber+0x72>
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	429a      	cmp	r2, r3
 800a396:	d10a      	bne.n	800a3ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d107      	bne.n	800a3ae <get_ldnumber+0x72>
					vol = (int)i;
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	617b      	str	r3, [r7, #20]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	e002      	b.n	800a3b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a3b6:	693b      	ldr	r3, [r7, #16]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	371c      	adds	r7, #28
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	711a      	strb	r2, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e4:	6313      	str	r3, [r2, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fe fdfd 	bl	8008fe8 <move_window>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <check_fs+0x34>
		return 3;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e04a      	b.n	800a48e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3fe:	3301      	adds	r3, #1
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	b21a      	sxth	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800a40c:	b21b      	sxth	r3, r3
 800a40e:	4313      	orrs	r3, r2
 800a410:	b21b      	sxth	r3, r3
 800a412:	4a21      	ldr	r2, [pc, #132]	; (800a498 <check_fs+0xd4>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d001      	beq.n	800a41c <check_fs+0x58>
		return 2;
 800a418:	2302      	movs	r3, #2
 800a41a:	e038      	b.n	800a48e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3336      	adds	r3, #54	; 0x36
 800a420:	3303      	adds	r3, #3
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	061a      	lsls	r2, r3, #24
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3336      	adds	r3, #54	; 0x36
 800a42a:	3302      	adds	r3, #2
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	041b      	lsls	r3, r3, #16
 800a430:	4313      	orrs	r3, r2
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	3236      	adds	r2, #54	; 0x36
 800a436:	3201      	adds	r2, #1
 800a438:	7812      	ldrb	r2, [r2, #0]
 800a43a:	0212      	lsls	r2, r2, #8
 800a43c:	4313      	orrs	r3, r2
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800a444:	4313      	orrs	r3, r2
 800a446:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a44a:	4a14      	ldr	r2, [pc, #80]	; (800a49c <check_fs+0xd8>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d101      	bne.n	800a454 <check_fs+0x90>
		return 0;
 800a450:	2300      	movs	r3, #0
 800a452:	e01c      	b.n	800a48e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3352      	adds	r3, #82	; 0x52
 800a458:	3303      	adds	r3, #3
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	061a      	lsls	r2, r3, #24
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3352      	adds	r3, #82	; 0x52
 800a462:	3302      	adds	r3, #2
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	041b      	lsls	r3, r3, #16
 800a468:	4313      	orrs	r3, r2
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	3252      	adds	r2, #82	; 0x52
 800a46e:	3201      	adds	r2, #1
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	0212      	lsls	r2, r2, #8
 800a474:	4313      	orrs	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800a47c:	4313      	orrs	r3, r2
 800a47e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a482:	4a06      	ldr	r2, [pc, #24]	; (800a49c <check_fs+0xd8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d101      	bne.n	800a48c <check_fs+0xc8>
		return 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	e000      	b.n	800a48e <check_fs+0xca>

	return 1;
 800a48c:	2301      	movs	r3, #1
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	ffffaa55 	.word	0xffffaa55
 800a49c:	00544146 	.word	0x00544146

0800a4a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b096      	sub	sp, #88	; 0x58
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a4b4:	68b8      	ldr	r0, [r7, #8]
 800a4b6:	f7ff ff41 	bl	800a33c <get_ldnumber>
 800a4ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	da01      	bge.n	800a4c6 <find_volume+0x26>
 800a4c2:	230b      	movs	r3, #11
 800a4c4:	e319      	b.n	800aafa <find_volume+0x65a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a4c6:	4a9c      	ldr	r2, [pc, #624]	; (800a738 <find_volume+0x298>)
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <find_volume+0x3a>
 800a4d6:	230c      	movs	r3, #12
 800a4d8:	e30f      	b.n	800aafa <find_volume+0x65a>

	ENTER_FF(fs);						/* Lock the volume */
 800a4da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4dc:	f7fe fb42 	bl	8008b64 <lock_fs>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <find_volume+0x4a>
 800a4e6:	230f      	movs	r3, #15
 800a4e8:	e307      	b.n	800aafa <find_volume+0x65a>
	*rfs = fs;							/* Return pointer to the file system object */
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4ee:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01c      	beq.n	800a536 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a502:	785b      	ldrb	r3, [r3, #1]
 800a504:	4618      	mov	r0, r3
 800a506:	f7fe fa13 	bl	8008930 <disk_status>
 800a50a:	4603      	mov	r3, r0
 800a50c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a510:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10c      	bne.n	800a536 <find_volume+0x96>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d007      	beq.n	800a532 <find_volume+0x92>
 800a522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a526:	f003 0304 	and.w	r3, r3, #4
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a52e:	230a      	movs	r3, #10
 800a530:	e2e3      	b.n	800aafa <find_volume+0x65a>
			return FR_OK;				/* The file system object is valid */
 800a532:	2300      	movs	r3, #0
 800a534:	e2e1      	b.n	800aafa <find_volume+0x65a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a53c:	2200      	movs	r2, #0
 800a53e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a542:	b2da      	uxtb	r2, r3
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a54a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a552:	785b      	ldrb	r3, [r3, #1]
 800a554:	4618      	mov	r0, r3
 800a556:	f7fe fa05 	bl	8008964 <disk_initialize>
 800a55a:	4603      	mov	r3, r0
 800a55c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800a560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a564:	f003 0301 	and.w	r3, r3, #1
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <find_volume+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a56c:	2303      	movs	r3, #3
 800a56e:	e2c4      	b.n	800aafa <find_volume+0x65a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d007      	beq.n	800a586 <find_volume+0xe6>
 800a576:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a57a:	f003 0304 	and.w	r3, r3, #4
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 800a582:	230a      	movs	r3, #10
 800a584:	e2b9      	b.n	800aafa <find_volume+0x65a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a58c:	7858      	ldrb	r0, [r3, #1]
 800a58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a594:	330a      	adds	r3, #10
 800a596:	461a      	mov	r2, r3
 800a598:	2102      	movs	r1, #2
 800a59a:	f7fe fa49 	bl	8008a30 <disk_ioctl>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10d      	bne.n	800a5c0 <find_volume+0x120>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5aa:	895b      	ldrh	r3, [r3, #10]
 800a5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b0:	d306      	bcc.n	800a5c0 <find_volume+0x120>
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b8:	895b      	ldrh	r3, [r3, #10]
 800a5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5be:	d901      	bls.n	800a5c4 <find_volume+0x124>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e29a      	b.n	800aafa <find_volume+0x65a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800a5c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5cc:	f7ff fefa 	bl	800a3c4 <check_fs>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800a5d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d153      	bne.n	800a686 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a5de:	2300      	movs	r3, #0
 800a5e0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5e2:	e028      	b.n	800a636 <find_volume+0x196>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800a5e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5e8:	011b      	lsls	r3, r3, #4
 800a5ea:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a5ee:	4413      	add	r3, r2
 800a5f0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d012      	beq.n	800a622 <find_volume+0x182>
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fe:	330b      	adds	r3, #11
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	061a      	lsls	r2, r3, #24
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	330a      	adds	r3, #10
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	041b      	lsls	r3, r3, #16
 800a60c:	4313      	orrs	r3, r2
 800a60e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a610:	3209      	adds	r2, #9
 800a612:	7812      	ldrb	r2, [r2, #0]
 800a614:	0212      	lsls	r2, r2, #8
 800a616:	4313      	orrs	r3, r2
 800a618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a61a:	3208      	adds	r2, #8
 800a61c:	7812      	ldrb	r2, [r2, #0]
 800a61e:	431a      	orrs	r2, r3
 800a620:	e000      	b.n	800a624 <find_volume+0x184>
 800a622:	2200      	movs	r2, #0
 800a624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	3358      	adds	r3, #88	; 0x58
 800a62a:	443b      	add	r3, r7
 800a62c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800a630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a632:	3301      	adds	r3, #1
 800a634:	643b      	str	r3, [r7, #64]	; 0x40
 800a636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a638:	2b03      	cmp	r3, #3
 800a63a:	d9d3      	bls.n	800a5e4 <find_volume+0x144>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800a63c:	2300      	movs	r3, #0
 800a63e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <find_volume+0x1ac>
 800a646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a648:	3b01      	subs	r3, #1
 800a64a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800a64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	3358      	adds	r3, #88	; 0x58
 800a652:	443b      	add	r3, r7
 800a654:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a658:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800a65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <find_volume+0x1cc>
 800a660:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a662:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a664:	f7ff feae 	bl	800a3c4 <check_fs>
 800a668:	4603      	mov	r3, r0
 800a66a:	e000      	b.n	800a66e <find_volume+0x1ce>
 800a66c:	2302      	movs	r3, #2
 800a66e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800a672:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <find_volume+0x1e6>
 800a67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a67c:	3301      	adds	r3, #1
 800a67e:	643b      	str	r3, [r7, #64]	; 0x40
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	2b03      	cmp	r3, #3
 800a684:	d9e2      	bls.n	800a64c <find_volume+0x1ac>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d101      	bne.n	800a692 <find_volume+0x1f2>
 800a68e:	2301      	movs	r3, #1
 800a690:	e233      	b.n	800aafa <find_volume+0x65a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800a692:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <find_volume+0x1fe>
 800a69a:	230d      	movs	r3, #13
 800a69c:	e22d      	b.n	800aafa <find_volume+0x65a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a0:	7b1b      	ldrb	r3, [r3, #12]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	b21a      	sxth	r2, r3
 800a6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a8:	7adb      	ldrb	r3, [r3, #11]
 800a6aa:	b21b      	sxth	r3, r3
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	b21a      	sxth	r2, r3
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b6:	895b      	ldrh	r3, [r3, #10]
 800a6b8:	b21b      	sxth	r3, r3
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d001      	beq.n	800a6c2 <find_volume+0x222>
		return FR_NO_FILESYSTEM;
 800a6be:	230d      	movs	r3, #13
 800a6c0:	e21b      	b.n	800aafa <find_volume+0x65a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	7ddb      	ldrb	r3, [r3, #23]
 800a6c6:	021b      	lsls	r3, r3, #8
 800a6c8:	b21a      	sxth	r2, r3
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6cc:	7d9b      	ldrb	r3, [r3, #22]
 800a6ce:	b21b      	sxth	r3, r3
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	b21b      	sxth	r3, r3
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800a6d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d112      	bne.n	800a704 <find_volume+0x264>
 800a6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800a6e4:	061a      	lsls	r2, r3, #24
 800a6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800a6ec:	041b      	lsls	r3, r3, #16
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6f2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800a6f6:	0212      	lsls	r2, r2, #8
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6fc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a700:	4313      	orrs	r3, r2
 800a702:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a70a:	461a      	mov	r2, r3
 800a70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a70e:	61d3      	str	r3, [r2, #28]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	7c1a      	ldrb	r2, [r3, #16]
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a71a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800a71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a722:	78db      	ldrb	r3, [r3, #3]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d009      	beq.n	800a73c <find_volume+0x29c>
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a72e:	78db      	ldrb	r3, [r3, #3]
 800a730:	2b02      	cmp	r3, #2
 800a732:	d003      	beq.n	800a73c <find_volume+0x29c>
		return FR_NO_FILESYSTEM;
 800a734:	230d      	movs	r3, #13
 800a736:	e1e0      	b.n	800aafa <find_volume+0x65a>
 800a738:	2000245c 	.word	0x2000245c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a742:	78db      	ldrb	r3, [r3, #3]
 800a744:	461a      	mov	r2, r3
 800a746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a748:	fb02 f303 	mul.w	r3, r2, r3
 800a74c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	7b5a      	ldrb	r2, [r3, #13]
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a758:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a760:	789b      	ldrb	r3, [r3, #2]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00c      	beq.n	800a780 <find_volume+0x2e0>
 800a766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a76c:	789b      	ldrb	r3, [r3, #2]
 800a76e:	461a      	mov	r2, r3
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a776:	789b      	ldrb	r3, [r3, #2]
 800a778:	3b01      	subs	r3, #1
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <find_volume+0x2e4>
		return FR_NO_FILESYSTEM;
 800a780:	230d      	movs	r3, #13
 800a782:	e1ba      	b.n	800aafa <find_volume+0x65a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	7c9b      	ldrb	r3, [r3, #18]
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	b21a      	sxth	r2, r3
 800a78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78e:	7c5b      	ldrb	r3, [r3, #17]
 800a790:	b21b      	sxth	r3, r3
 800a792:	4313      	orrs	r3, r2
 800a794:	b21b      	sxth	r3, r3
 800a796:	b29a      	uxth	r2, r3
 800a798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a6:	891b      	ldrh	r3, [r3, #8]
 800a7a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7ae:	8952      	ldrh	r2, [r2, #10]
 800a7b0:	0952      	lsrs	r2, r2, #5
 800a7b2:	b292      	uxth	r2, r2
 800a7b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7b8:	fb01 f202 	mul.w	r2, r1, r2
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <find_volume+0x328>
		return FR_NO_FILESYSTEM;
 800a7c4:	230d      	movs	r3, #13
 800a7c6:	e198      	b.n	800aafa <find_volume+0x65a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	7d1b      	ldrb	r3, [r3, #20]
 800a7cc:	021b      	lsls	r3, r3, #8
 800a7ce:	b21a      	sxth	r2, r3
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	7cdb      	ldrb	r3, [r3, #19]
 800a7d4:	b21b      	sxth	r3, r3
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	b21b      	sxth	r3, r3
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800a7de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d112      	bne.n	800a80a <find_volume+0x36a>
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a7ea:	061a      	lsls	r2, r3, #24
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a7f2:	041b      	lsls	r3, r3, #16
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7f8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800a7fc:	0212      	lsls	r2, r2, #8
 800a7fe:	4313      	orrs	r3, r2
 800a800:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a802:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a806:	4313      	orrs	r3, r2
 800a808:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	7bdb      	ldrb	r3, [r3, #15]
 800a80e:	021b      	lsls	r3, r3, #8
 800a810:	b21a      	sxth	r2, r3
 800a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a814:	7b9b      	ldrb	r3, [r3, #14]
 800a816:	b21b      	sxth	r3, r3
 800a818:	4313      	orrs	r3, r2
 800a81a:	b21b      	sxth	r3, r3
 800a81c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800a81e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <find_volume+0x388>
 800a824:	230d      	movs	r3, #13
 800a826:	e168      	b.n	800aafa <find_volume+0x65a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800a828:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a82a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a82c:	4413      	add	r3, r2
 800a82e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a830:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a834:	8911      	ldrh	r1, [r2, #8]
 800a836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a83c:	8952      	ldrh	r2, [r2, #10]
 800a83e:	0952      	lsrs	r2, r2, #5
 800a840:	b292      	uxth	r2, r2
 800a842:	fbb1 f2f2 	udiv	r2, r1, r2
 800a846:	b292      	uxth	r2, r2
 800a848:	4413      	add	r3, r2
 800a84a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a84c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a850:	429a      	cmp	r2, r3
 800a852:	d201      	bcs.n	800a858 <find_volume+0x3b8>
 800a854:	230d      	movs	r3, #13
 800a856:	e150      	b.n	800aafa <find_volume+0x65a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800a858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a864:	7892      	ldrb	r2, [r2, #2]
 800a866:	fbb3 f3f2 	udiv	r3, r3, r2
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d101      	bne.n	800a876 <find_volume+0x3d6>
 800a872:	230d      	movs	r3, #13
 800a874:	e141      	b.n	800aafa <find_volume+0x65a>
	fmt = FS_FAT12;
 800a876:	2301      	movs	r3, #1
 800a878:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a882:	4293      	cmp	r3, r2
 800a884:	d902      	bls.n	800a88c <find_volume+0x3ec>
 800a886:	2302      	movs	r3, #2
 800a888:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a892:	4293      	cmp	r3, r2
 800a894:	d902      	bls.n	800a89c <find_volume+0x3fc>
 800a896:	2303      	movs	r3, #3
 800a898:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	3302      	adds	r3, #2
 800a8a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8a6:	6193      	str	r3, [r2, #24]
	fs->volbase = bsect;								/* Volume start sector */
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b2:	6213      	str	r3, [r2, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800a8b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b8:	4413      	add	r3, r2
 800a8ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8c0:	6253      	str	r3, [r2, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 800a8c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c6:	4413      	add	r3, r2
 800a8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a8ce:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 800a8d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d124      	bne.n	800a922 <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8de:	891b      	ldrh	r3, [r3, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <find_volume+0x448>
 800a8e4:	230d      	movs	r3, #13
 800a8e6:	e108      	b.n	800aafa <find_volume+0x65a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a8ee:	061a      	lsls	r2, r3, #24
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800a8f6:	041b      	lsls	r3, r3, #16
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8fc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800a900:	0212      	lsls	r2, r2, #8
 800a902:	4313      	orrs	r3, r2
 800a904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a906:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a90a:	4313      	orrs	r3, r2
 800a90c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a90e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a912:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	647b      	str	r3, [r7, #68]	; 0x44
 800a920:	e02b      	b.n	800a97a <find_volume+0x4da>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a928:	891b      	ldrh	r3, [r3, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <find_volume+0x492>
 800a92e:	230d      	movs	r3, #13
 800a930:	e0e3      	b.n	800aafa <find_volume+0x65a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a93c:	4413      	add	r3, r2
 800a93e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a940:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a944:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a946:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d105      	bne.n	800a95a <find_volume+0x4ba>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	e00e      	b.n	800a978 <find_volume+0x4d8>
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a960:	699a      	ldr	r2, [r3, #24]
 800a962:	4613      	mov	r3, r2
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	4413      	add	r3, r2
 800a968:	085a      	lsrs	r2, r3, #1
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800a978:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800a97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a980:	69da      	ldr	r2, [r3, #28]
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a988:	895b      	ldrh	r3, [r3, #10]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a98e:	440b      	add	r3, r1
 800a990:	3b01      	subs	r3, #1
 800a992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a994:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800a998:	8949      	ldrh	r1, [r1, #10]
 800a99a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d201      	bcs.n	800a9a6 <find_volume+0x506>
		return FR_NO_FILESYSTEM;
 800a9a2:	230d      	movs	r3, #13
 800a9a4:	e0a9      	b.n	800aafa <find_volume+0x65a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b2:	6153      	str	r3, [r2, #20]
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9c2:	6113      	str	r3, [r2, #16]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ca:	2280      	movs	r2, #128	; 0x80
 800a9cc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800a9ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d17a      	bne.n	800aacc <find_volume+0x62c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	b21a      	sxth	r2, r3
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a9e6:	b21b      	sxth	r3, r3
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	b21b      	sxth	r3, r3
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d16d      	bne.n	800aacc <find_volume+0x62c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800a9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9f8:	f7fe faf6 	bl	8008fe8 <move_window>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d164      	bne.n	800aacc <find_volume+0x62c>
	{
		fs->fsi_flag = 0;
 800aa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa08:	2200      	movs	r2, #0
 800aa0a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800aa12:	021b      	lsls	r3, r3, #8
 800aa14:	b21a      	sxth	r2, r3
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800aa1c:	b21b      	sxth	r3, r3
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	b21b      	sxth	r3, r3
 800aa22:	4a38      	ldr	r2, [pc, #224]	; (800ab04 <find_volume+0x664>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d151      	bne.n	800aacc <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2a:	78db      	ldrb	r3, [r3, #3]
 800aa2c:	061a      	lsls	r2, r3, #24
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	789b      	ldrb	r3, [r3, #2]
 800aa32:	041b      	lsls	r3, r3, #16
 800aa34:	4313      	orrs	r3, r2
 800aa36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa38:	7852      	ldrb	r2, [r2, #1]
 800aa3a:	0212      	lsls	r2, r2, #8
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa40:	7812      	ldrb	r2, [r2, #0]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	4a30      	ldr	r2, [pc, #192]	; (800ab08 <find_volume+0x668>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d140      	bne.n	800aacc <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800aa50:	061a      	lsls	r2, r3, #24
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800aa58:	041b      	lsls	r3, r3, #16
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa5e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800aa62:	0212      	lsls	r2, r2, #8
 800aa64:	4313      	orrs	r3, r2
 800aa66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa68:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	4a27      	ldr	r2, [pc, #156]	; (800ab0c <find_volume+0x66c>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d12b      	bne.n	800aacc <find_volume+0x62c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800aa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa76:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800aa7a:	061a      	lsls	r2, r3, #24
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800aa82:	041b      	lsls	r3, r3, #16
 800aa84:	4313      	orrs	r3, r2
 800aa86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa88:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800aa8c:	0212      	lsls	r2, r2, #8
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa92:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800aa96:	4313      	orrs	r3, r2
 800aa98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa9e:	6153      	str	r3, [r2, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800aaa6:	061a      	lsls	r2, r3, #24
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaaa:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800aaae:	041b      	lsls	r3, r3, #16
 800aab0:	4313      	orrs	r3, r2
 800aab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aab4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800aab8:	0212      	lsls	r2, r2, #8
 800aaba:	4313      	orrs	r3, r2
 800aabc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aabe:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800aac2:	4313      	orrs	r3, r2
 800aac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aac6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aaca:	6113      	str	r3, [r2, #16]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800aacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aad2:	461a      	mov	r2, r3
 800aad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aad8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800aada:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <find_volume+0x670>)
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	3301      	adds	r3, #1
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <find_volume+0x670>)
 800aae4:	801a      	strh	r2, [r3, #0]
 800aae6:	4b0a      	ldr	r3, [pc, #40]	; (800ab10 <find_volume+0x670>)
 800aae8:	881a      	ldrh	r2, [r3, #0]
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800aaf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aaf4:	f7fe f9fc 	bl	8008ef0 <clear_lock>
#endif

	return FR_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3758      	adds	r7, #88	; 0x58
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	ffffaa55 	.word	0xffffaa55
 800ab08:	41615252 	.word	0x41615252
 800ab0c:	61417272 	.word	0x61417272
 800ab10:	20002460 	.word	0x20002460

0800ab14 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d02a      	beq.n	800ab7c <validate+0x68>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d024      	beq.n	800ab7c <validate+0x68>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d01b      	beq.n	800ab7c <validate+0x68>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab50:	88da      	ldrh	r2, [r3, #6]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab58:	889b      	ldrh	r3, [r3, #4]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d10e      	bne.n	800ab7c <validate+0x68>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab6a:	785b      	ldrb	r3, [r3, #1]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fd fedf 	bl	8008930 <disk_status>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800ab7c:	2309      	movs	r3, #9
 800ab7e:	e00c      	b.n	800ab9a <validate+0x86>

	ENTER_FF(fil->fs);		/* Lock file system */
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fd ffeb 	bl	8008b64 <lock_fs>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <validate+0x84>
 800ab94:	230f      	movs	r3, #15
 800ab96:	e000      	b.n	800ab9a <validate+0x86>

	return FR_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b088      	sub	sp, #32
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	4613      	mov	r3, r2
 800abb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800abb6:	f107 0310 	add.w	r3, r7, #16
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fbbe 	bl	800a33c <get_ldnumber>
 800abc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	da01      	bge.n	800abcc <f_mount+0x28>
 800abc8:	230b      	movs	r3, #11
 800abca:	e050      	b.n	800ac6e <f_mount+0xca>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800abcc:	4a2a      	ldr	r2, [pc, #168]	; (800ac78 <f_mount+0xd4>)
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d013      	beq.n	800ac04 <f_mount+0x60>
#if _FS_LOCK
		clear_lock(cfs);
 800abdc:	69b8      	ldr	r0, [r7, #24]
 800abde:	f7fe f987 	bl	8008ef0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800abe2:	69bb      	ldr	r3, [r7, #24]
 800abe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	4618      	mov	r0, r3
 800abec:	f001 fe81 	bl	800c8f2 <ff_del_syncobj>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <f_mount+0x56>
 800abf6:	2302      	movs	r3, #2
 800abf8:	e039      	b.n	800ac6e <f_mount+0xca>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac00:	2200      	movs	r2, #0
 800ac02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d013      	beq.n	800ac32 <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac10:	2200      	movs	r2, #0
 800ac12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac1e:	330c      	adds	r3, #12
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f001 fe47 	bl	800c8b6 <ff_cre_syncobj>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <f_mount+0x8e>
 800ac2e:	2302      	movs	r3, #2
 800ac30:	e01d      	b.n	800ac6e <f_mount+0xca>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	4910      	ldr	r1, [pc, #64]	; (800ac78 <f_mount+0xd4>)
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <f_mount+0xa4>
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d001      	beq.n	800ac4c <f_mount+0xa8>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	e010      	b.n	800ac6e <f_mount+0xca>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	f107 030c 	add.w	r3, r7, #12
 800ac54:	2200      	movs	r2, #0
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff fc22 	bl	800a4a0 <find_volume>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	7dfa      	ldrb	r2, [r7, #23]
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fd ff8c 	bl	8008b84 <unlock_fs>
 800ac6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3720      	adds	r7, #32
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	2000245c 	.word	0x2000245c

0800ac7c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac8a:	f843 0c44 	str.w	r0, [r3, #-68]
 800ac8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac92:	f843 1c48 	str.w	r1, [r3, #-72]
 800ac96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac9a:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800ac9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aca2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <f_open+0x32>
 800acaa:	2309      	movs	r3, #9
 800acac:	e2f3      	b.n	800b296 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 800acae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800acb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acba:	461a      	mov	r2, r3
 800acbc:	2300      	movs	r3, #0
 800acbe:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800acc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acc4:	461a      	mov	r2, r3
 800acc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acca:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800acce:	f003 031f 	and.w	r3, r3, #31
 800acd2:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800acd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800acda:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800acde:	f023 0301 	bic.w	r3, r3, #1
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	f107 0110 	add.w	r1, r7, #16
 800ace8:	3908      	subs	r1, #8
 800acea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acee:	3b10      	subs	r3, #16
 800acf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff fbd3 	bl	800a4a0 <find_volume>
 800acfa:	4603      	mov	r3, r0
 800acfc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ad00:	f102 020f 	add.w	r2, r2, #15
 800ad04:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800ad06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ad0a:	f103 030f 	add.w	r3, r3, #15
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f040 82ae 	bne.w	800b272 <f_open+0x5f6>
		INIT_BUF(dj);
 800ad16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad20:	3b1c      	subs	r3, #28
 800ad22:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800ad26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ad2a:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800ad2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad32:	3b10      	subs	r3, #16
 800ad34:	4611      	mov	r1, r2
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7ff fa8a 	bl	800a250 <follow_path>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ad42:	f102 020f 	add.w	r2, r2, #15
 800ad46:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800ad48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ad4c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 800ad50:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ad54:	f102 0208 	add.w	r2, r2, #8
 800ad58:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ad5a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ad5e:	f103 030f 	add.w	r3, r3, #15
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d126      	bne.n	800adb6 <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 800ad68:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ad6c:	f103 0308 	add.w	r3, r3, #8
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <f_open+0x108>
				res = FR_INVALID_NAME;
 800ad76:	2306      	movs	r3, #6
 800ad78:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ad7c:	f102 020f 	add.w	r2, r2, #15
 800ad80:	7013      	strb	r3, [r2, #0]
 800ad82:	e018      	b.n	800adb6 <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ad88:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ad8c:	f023 0301 	bic.w	r3, r3, #1
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bf14      	ite	ne
 800ad94:	2301      	movne	r3, #1
 800ad96:	2300      	moveq	r3, #0
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ada0:	3b10      	subs	r3, #16
 800ada2:	4611      	mov	r1, r2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fd ff0d 	bl	8008bc4 <chk_lock>
 800adaa:	4603      	mov	r3, r0
 800adac:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800adb0:	f102 020f 	add.w	r2, r2, #15
 800adb4:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800adb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800adba:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800adbe:	f003 031c 	and.w	r3, r3, #28
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 8134 	beq.w	800b030 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 800adc8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800adcc:	f103 030f 	add.w	r3, r3, #15
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d02e      	beq.n	800ae34 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800add6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800adda:	f103 030f 	add.w	r3, r3, #15
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b04      	cmp	r3, #4
 800ade2:	d112      	bne.n	800ae0a <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ade4:	f7fd ff5e 	bl	8008ca4 <enq_lock>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d007      	beq.n	800adfe <f_open+0x182>
 800adee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800adf2:	3b10      	subs	r3, #16
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff f8b5 	bl	8009f64 <dir_register>
 800adfa:	4603      	mov	r3, r0
 800adfc:	e000      	b.n	800ae00 <f_open+0x184>
 800adfe:	2312      	movs	r3, #18
 800ae00:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ae04:	f102 020f 	add.w	r2, r2, #15
 800ae08:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ae0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ae0e:	461a      	mov	r2, r3
 800ae10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ae14:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ae18:	f043 0308 	orr.w	r3, r3, #8
 800ae1c:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 800ae20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ae24:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 800ae28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ae2c:	f102 0208 	add.w	r2, r2, #8
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	e01f      	b.n	800ae74 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ae34:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ae38:	f103 0308 	add.w	r3, r3, #8
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	330b      	adds	r3, #11
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	f003 0311 	and.w	r3, r3, #17
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d006      	beq.n	800ae58 <f_open+0x1dc>
					res = FR_DENIED;
 800ae4a:	2307      	movs	r3, #7
 800ae4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ae50:	f102 020f 	add.w	r2, r2, #15
 800ae54:	7013      	strb	r3, [r2, #0]
 800ae56:	e00d      	b.n	800ae74 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800ae58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ae5c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <f_open+0x1f8>
						res = FR_EXIST;
 800ae68:	2308      	movs	r3, #8
 800ae6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ae6e:	f102 020f 	add.w	r2, r2, #15
 800ae72:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ae74:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ae78:	f103 030f 	add.w	r3, r3, #15
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f040 8108 	bne.w	800b094 <f_open+0x418>
 800ae84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ae88:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800ae8c:	f003 0308 	and.w	r3, r3, #8
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f000 80ff 	beq.w	800b094 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 800ae96:	f7fd fced 	bl	8008874 <get_fattime>
 800ae9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ae9e:	f103 0304 	add.w	r3, r3, #4
 800aea2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800aea4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aea8:	f103 0308 	add.w	r3, r3, #8
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	330e      	adds	r3, #14
 800aeb0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800aeb4:	f102 0204 	add.w	r2, r2, #4
 800aeb8:	6812      	ldr	r2, [r2, #0]
 800aeba:	b2d2      	uxtb	r2, r2
 800aebc:	701a      	strb	r2, [r3, #0]
 800aebe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aec2:	f103 0304 	add.w	r3, r3, #4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	0a1b      	lsrs	r3, r3, #8
 800aecc:	b29a      	uxth	r2, r3
 800aece:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aed2:	f103 0308 	add.w	r3, r3, #8
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	330f      	adds	r3, #15
 800aeda:	b2d2      	uxtb	r2, r2
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aee2:	f103 0304 	add.w	r3, r3, #4
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	0c1a      	lsrs	r2, r3, #16
 800aeea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aeee:	f103 0308 	add.w	r3, r3, #8
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	3310      	adds	r3, #16
 800aef6:	b2d2      	uxtb	r2, r2
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800aefe:	f103 0304 	add.w	r3, r3, #4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	0e1a      	lsrs	r2, r3, #24
 800af06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af0a:	f103 0308 	add.w	r3, r3, #8
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3311      	adds	r3, #17
 800af12:	b2d2      	uxtb	r2, r2
 800af14:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800af16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af1a:	f103 0308 	add.w	r3, r3, #8
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	330b      	adds	r3, #11
 800af22:	2200      	movs	r2, #0
 800af24:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800af26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af2a:	f103 0308 	add.w	r3, r3, #8
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	331c      	adds	r3, #28
 800af32:	2200      	movs	r2, #0
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af3a:	f103 0308 	add.w	r3, r3, #8
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	331d      	adds	r3, #29
 800af42:	2200      	movs	r2, #0
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af4a:	f103 0308 	add.w	r3, r3, #8
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	331e      	adds	r3, #30
 800af52:	2200      	movs	r2, #0
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af5a:	f103 0308 	add.w	r3, r3, #8
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	331f      	adds	r3, #31
 800af62:	2200      	movs	r2, #0
 800af64:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800af66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800af6a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800af6e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800af72:	f102 0208 	add.w	r2, r2, #8
 800af76:	6811      	ldr	r1, [r2, #0]
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fe ff4a 	bl	8009e12 <ld_clust>
 800af7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af82:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800af84:	2100      	movs	r1, #0
 800af86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800af8a:	f103 0308 	add.w	r3, r3, #8
 800af8e:	6818      	ldr	r0, [r3, #0]
 800af90:	f7fe ff6e 	bl	8009e70 <st_clust>
				dj.fs->wflag = 1;
 800af94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800af98:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800af9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa0:	2201      	movs	r2, #1
 800afa2:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800afa4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d072      	beq.n	800b094 <f_open+0x418>
					dw = dj.fs->winsect;
 800afae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800afb2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800afb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afbc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800afc0:	f102 0204 	add.w	r2, r2, #4
 800afc4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800afc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800afca:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800afce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800afd2:	6811      	ldr	r1, [r2, #0]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fe fb6c 	bl	80096b2 <remove_chain>
 800afda:	4603      	mov	r3, r0
 800afdc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800afe0:	f102 020f 	add.w	r2, r2, #15
 800afe4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800afe6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800afea:	f103 030f 	add.w	r3, r3, #15
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d14f      	bne.n	800b094 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800aff4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aff8:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 800affc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3b01      	subs	r3, #1
 800b004:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b008:	6113      	str	r3, [r2, #16]
						res = move_window(dj.fs, dw);
 800b00a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b00e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b012:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b016:	f102 0204 	add.w	r2, r2, #4
 800b01a:	6811      	ldr	r1, [r2, #0]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fd ffe3 	bl	8008fe8 <move_window>
 800b022:	4603      	mov	r3, r0
 800b024:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b028:	f102 020f 	add.w	r2, r2, #15
 800b02c:	7013      	strb	r3, [r2, #0]
 800b02e:	e031      	b.n	800b094 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b030:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b034:	f103 030f 	add.w	r3, r3, #15
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d12a      	bne.n	800b094 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b03e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b042:	f103 0308 	add.w	r3, r3, #8
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	330b      	adds	r3, #11
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	f003 0310 	and.w	r3, r3, #16
 800b050:	2b00      	cmp	r3, #0
 800b052:	d006      	beq.n	800b062 <f_open+0x3e6>
					res = FR_NO_FILE;
 800b054:	2304      	movs	r3, #4
 800b056:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b05a:	f102 020f 	add.w	r2, r2, #15
 800b05e:	7013      	strb	r3, [r2, #0]
 800b060:	e018      	b.n	800b094 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b062:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b066:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b06a:	f003 0302 	and.w	r3, r3, #2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d010      	beq.n	800b094 <f_open+0x418>
 800b072:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b076:	f103 0308 	add.w	r3, r3, #8
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	330b      	adds	r3, #11
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d005      	beq.n	800b094 <f_open+0x418>
						res = FR_DENIED;
 800b088:	2307      	movs	r3, #7
 800b08a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b08e:	f102 020f 	add.w	r2, r2, #15
 800b092:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800b094:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b098:	f103 030f 	add.w	r3, r3, #15
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d157      	bne.n	800b152 <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b0a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b0a6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b0aa:	f003 0308 	and.w	r3, r3, #8
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00a      	beq.n	800b0c8 <f_open+0x44c>
				mode |= FA__WRITTEN;
 800b0b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b0bc:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b0c0:	f043 0320 	orr.w	r3, r3, #32
 800b0c4:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b0c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b0cc:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b0da:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800b0de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b0e2:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800b0e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b0e8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b0ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b0f6:	f103 0308 	add.w	r3, r3, #8
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b0fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b102:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b106:	f023 0301 	bic.w	r3, r3, #1
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bf14      	ite	ne
 800b10e:	2301      	movne	r3, #1
 800b110:	2300      	moveq	r3, #0
 800b112:	b2db      	uxtb	r3, r3
 800b114:	461a      	mov	r2, r3
 800b116:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b11a:	3b10      	subs	r3, #16
 800b11c:	4611      	mov	r1, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fd fde4 	bl	8008cec <inc_lock>
 800b124:	4602      	mov	r2, r0
 800b126:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b12a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b132:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800b134:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b138:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b13c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b142:	2b00      	cmp	r3, #0
 800b144:	d105      	bne.n	800b152 <f_open+0x4d6>
 800b146:	2302      	movs	r3, #2
 800b148:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b14c:	f102 020f 	add.w	r2, r2, #15
 800b150:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b152:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b156:	f103 030f 	add.w	r3, r3, #15
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f040 8088 	bne.w	800b272 <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 800b162:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b166:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b16a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b16e:	461a      	mov	r2, r3
 800b170:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b174:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800b178:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800b17a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b17e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b186:	2200      	movs	r2, #0
 800b188:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b18a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b18e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b192:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b196:	f102 0208 	add.w	r2, r2, #8
 800b19a:	6811      	ldr	r1, [r2, #0]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fe fe38 	bl	8009e12 <ld_clust>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b1a8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b1ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1b0:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b1b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b1b6:	f103 0308 	add.w	r3, r3, #8
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	331f      	adds	r3, #31
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	061a      	lsls	r2, r3, #24
 800b1c2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b1c6:	f103 0308 	add.w	r3, r3, #8
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	331e      	adds	r3, #30
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	041b      	lsls	r3, r3, #16
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b1d8:	f102 0208 	add.w	r2, r2, #8
 800b1dc:	6812      	ldr	r2, [r2, #0]
 800b1de:	321d      	adds	r2, #29
 800b1e0:	7812      	ldrb	r2, [r2, #0]
 800b1e2:	0212      	lsls	r2, r2, #8
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b1ea:	f102 0208 	add.w	r2, r2, #8
 800b1ee:	6812      	ldr	r2, [r2, #0]
 800b1f0:	321c      	adds	r2, #28
 800b1f2:	7812      	ldrb	r2, [r2, #0]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b1fa:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800b1fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b202:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800b204:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b208:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b210:	461a      	mov	r2, r3
 800b212:	2300      	movs	r3, #0
 800b214:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800b216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b21a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b21e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b222:	461a      	mov	r2, r3
 800b224:	2300      	movs	r3, #0
 800b226:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b228:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b22c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b234:	461a      	mov	r2, r3
 800b236:	2300      	movs	r3, #0
 800b238:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b23a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b23e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b242:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b246:	f852 2c44 	ldr.w	r2, [r2, #-68]
 800b24a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b24e:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800b250:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b254:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b262:	88da      	ldrh	r2, [r3, #6]
 800b264:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b268:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b26c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b270:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800b272:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b276:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 800b27a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b27e:	f102 020f 	add.w	r2, r2, #15
 800b282:	7812      	ldrb	r2, [r2, #0]
 800b284:	4611      	mov	r1, r2
 800b286:	4618      	mov	r0, r3
 800b288:	f7fd fc7c 	bl	8008b84 <unlock_fs>
 800b28c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b290:	f103 030f 	add.w	r3, r3, #15
 800b294:	781b      	ldrb	r3, [r3, #0]
}
 800b296:	4618      	mov	r0, r3
 800b298:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b08c      	sub	sp, #48	; 0x30
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	60b9      	str	r1, [r7, #8]
 800b2ac:	607a      	str	r2, [r7, #4]
 800b2ae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff fc2a 	bl	800ab14 <validate>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b2c4:	7ffb      	ldrb	r3, [r7, #31]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00a      	beq.n	800b2e0 <f_read+0x3e>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	7ffa      	ldrb	r2, [r7, #31]
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fd fc54 	bl	8008b84 <unlock_fs>
 800b2dc:	7ffb      	ldrb	r3, [r7, #31]
 800b2de:	e219      	b.n	800b714 <f_read+0x472>
	if (fp->err)								/* Check error */
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2e6:	79db      	ldrb	r3, [r3, #7]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d010      	beq.n	800b30e <f_read+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2fa:	79db      	ldrb	r3, [r3, #7]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4610      	mov	r0, r2
 800b300:	f7fd fc40 	bl	8008b84 <unlock_fs>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b30a:	79db      	ldrb	r3, [r3, #7]
 800b30c:	e202      	b.n	800b714 <f_read+0x472>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b314:	799b      	ldrb	r3, [r3, #6]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d109      	bne.n	800b332 <f_read+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2107      	movs	r1, #7
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fd fc2b 	bl	8008b84 <unlock_fs>
 800b32e:	2307      	movs	r3, #7
 800b330:	e1f0      	b.n	800b714 <f_read+0x472>
	remain = fp->fsize - fp->fptr;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b338:	68da      	ldr	r2, [r3, #12]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	f240 81d5 	bls.w	800b6fa <f_read+0x458>
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b354:	e1d1      	b.n	800b6fa <f_read+0x458>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b364:	6812      	ldr	r2, [r2, #0]
 800b366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b36a:	8952      	ldrh	r2, [r2, #10]
 800b36c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b370:	fb01 f202 	mul.w	r2, r1, r2
 800b374:	1a9b      	subs	r3, r3, r2
 800b376:	2b00      	cmp	r3, #0
 800b378:	f040 8170 	bne.w	800b65c <f_read+0x3ba>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b390:	8952      	ldrh	r2, [r2, #10]
 800b392:	fbb3 f3f2 	udiv	r3, r3, r2
 800b396:	b2da      	uxtb	r2, r3
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3a4:	789b      	ldrb	r3, [r3, #2]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d153      	bne.n	800b45c <f_read+0x1ba>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d105      	bne.n	800b3cc <f_read+0x12a>
					clst = fp->sclust;			/* Follow from the origin */
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3ca:	e01c      	b.n	800b406 <f_read+0x164>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d009      	beq.n	800b3ec <f_read+0x14a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f7fe fa6e 	bl	80098c4 <clmt_clust>
 800b3e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b3ea:	e00c      	b.n	800b406 <f_read+0x164>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fa:	695b      	ldr	r3, [r3, #20]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	4610      	mov	r0, r2
 800b400:	f7fd ff08 	bl	8009214 <get_fat>
 800b404:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d80e      	bhi.n	800b42a <f_read+0x188>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b412:	2202      	movs	r2, #2
 800b414:	71da      	strb	r2, [r3, #7]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2102      	movs	r1, #2
 800b420:	4618      	mov	r0, r3
 800b422:	f7fd fbaf 	bl	8008b84 <unlock_fs>
 800b426:	2302      	movs	r3, #2
 800b428:	e174      	b.n	800b714 <f_read+0x472>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b430:	d10e      	bne.n	800b450 <f_read+0x1ae>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b438:	2201      	movs	r2, #1
 800b43a:	71da      	strb	r2, [r3, #7]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2101      	movs	r1, #1
 800b446:	4618      	mov	r0, r3
 800b448:	f7fd fb9c 	bl	8008b84 <unlock_fs>
 800b44c:	2301      	movs	r3, #1
 800b44e:	e161      	b.n	800b714 <f_read+0x472>
				fp->clust = clst;				/* Update current cluster */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b456:	461a      	mov	r2, r3
 800b458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45a:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	4619      	mov	r1, r3
 800b46e:	4610      	mov	r0, r2
 800b470:	f7fd feab 	bl	80091ca <clust2sect>
 800b474:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10e      	bne.n	800b49a <f_read+0x1f8>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b482:	2202      	movs	r2, #2
 800b484:	71da      	strb	r2, [r3, #7]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2102      	movs	r1, #2
 800b490:	4618      	mov	r0, r3
 800b492:	f7fd fb77 	bl	8008b84 <unlock_fs>
 800b496:	2302      	movs	r3, #2
 800b498:	e13c      	b.n	800b714 <f_read+0x472>
			sect += csect;
 800b49a:	7dfb      	ldrb	r3, [r7, #23]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	4413      	add	r3, r2
 800b4a0:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4ae:	895b      	ldrh	r3, [r3, #10]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4b8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d06e      	beq.n	800b59e <f_read+0x2fc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b4c0:	7dfa      	ldrb	r2, [r7, #23]
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c4:	4413      	add	r3, r2
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b4cc:	6812      	ldr	r2, [r2, #0]
 800b4ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b4d2:	7892      	ldrb	r2, [r2, #2]
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d90a      	bls.n	800b4ee <f_read+0x24c>
					cc = fp->fs->csize - csect;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4e4:	789b      	ldrb	r3, [r3, #2]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4fa:	7858      	ldrb	r0, [r3, #1]
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	6a39      	ldr	r1, [r7, #32]
 800b502:	f7fd fa55 	bl	80089b0 <disk_read>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00e      	beq.n	800b52a <f_read+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b512:	2201      	movs	r2, #1
 800b514:	71da      	strb	r2, [r3, #7]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2101      	movs	r1, #1
 800b520:	4618      	mov	r0, r3
 800b522:	f7fd fb2f 	bl	8008b84 <unlock_fs>
 800b526:	2301      	movs	r3, #1
 800b528:	e0f4      	b.n	800b714 <f_read+0x472>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b530:	799b      	ldrb	r3, [r3, #6]
 800b532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b536:	2b00      	cmp	r3, #0
 800b538:	d024      	beq.n	800b584 <f_read+0x2e2>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b540:	699a      	ldr	r2, [r3, #24]
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b548:	429a      	cmp	r2, r3
 800b54a:	d91b      	bls.n	800b584 <f_read+0x2e2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b552:	699a      	ldr	r2, [r3, #24]
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b55e:	6812      	ldr	r2, [r2, #0]
 800b560:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b564:	8952      	ldrh	r2, [r2, #10]
 800b566:	fb02 f303 	mul.w	r3, r2, r3
 800b56a:	6a3a      	ldr	r2, [r7, #32]
 800b56c:	18d0      	adds	r0, r2, r3
 800b56e:	68f9      	ldr	r1, [r7, #12]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b57c:	895b      	ldrh	r3, [r3, #10]
 800b57e:	461a      	mov	r2, r3
 800b580:	f7fd fa74 	bl	8008a6c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b590:	895b      	ldrh	r3, [r3, #10]
 800b592:	461a      	mov	r2, r3
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	fb02 f303 	mul.w	r3, r2, r3
 800b59a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800b59c:	e095      	b.n	800b6ca <f_read+0x428>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d051      	beq.n	800b650 <f_read+0x3ae>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5b2:	799b      	ldrb	r3, [r3, #6]
 800b5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d02b      	beq.n	800b614 <f_read+0x372>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5c8:	7858      	ldrb	r0, [r3, #1]
 800b5ca:	68f9      	ldr	r1, [r7, #12]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f7fd fa0b 	bl	80089f0 <disk_write>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00e      	beq.n	800b5fe <f_read+0x35c>
						ABORT(fp->fs, FR_DISK_ERR);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	71da      	strb	r2, [r3, #7]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fd fac5 	bl	8008b84 <unlock_fs>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e08a      	b.n	800b714 <f_read+0x472>
					fp->flag &= ~FA__DIRTY;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b604:	799b      	ldrb	r3, [r3, #6]
 800b606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b612:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b620:	7858      	ldrb	r0, [r3, #1]
 800b622:	68f9      	ldr	r1, [r7, #12]
 800b624:	2301      	movs	r3, #1
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	f7fd f9c2 	bl	80089b0 <disk_read>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00e      	beq.n	800b650 <f_read+0x3ae>
					ABORT(fp->fs, FR_DISK_ERR);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b638:	2201      	movs	r2, #1
 800b63a:	71da      	strb	r2, [r3, #7]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2101      	movs	r1, #1
 800b646:	4618      	mov	r0, r3
 800b648:	f7fd fa9c 	bl	8008b84 <unlock_fs>
 800b64c:	2301      	movs	r3, #1
 800b64e:	e061      	b.n	800b714 <f_read+0x472>
			}
#endif
			fp->dsect = sect;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b656:	461a      	mov	r2, r3
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b668:	895b      	ldrh	r3, [r3, #10]
 800b66a:	4618      	mov	r0, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b67a:	6812      	ldr	r2, [r2, #0]
 800b67c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b680:	8952      	ldrh	r2, [r2, #10]
 800b682:	fbb3 f1f2 	udiv	r1, r3, r2
 800b686:	fb01 f202 	mul.w	r2, r1, r2
 800b68a:	1a9b      	subs	r3, r3, r2
 800b68c:	1ac3      	subs	r3, r0, r3
 800b68e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800b690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	429a      	cmp	r2, r3
 800b696:	d901      	bls.n	800b69c <f_read+0x3fa>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b6aa:	6812      	ldr	r2, [r2, #0]
 800b6ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b6b0:	8952      	ldrh	r2, [r2, #10]
 800b6b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6b6:	fb01 f202 	mul.w	r2, r1, r2
 800b6ba:	1a9b      	subs	r3, r3, r2
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6a38      	ldr	r0, [r7, #32]
 800b6c6:	f7fd f9d1 	bl	8008a6c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b6ca:	6a3a      	ldr	r2, [r7, #32]
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	4413      	add	r3, r2
 800b6d0:	623b      	str	r3, [r7, #32]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6d8:	689a      	ldr	r2, [r3, #8]
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	4413      	add	r3, r2
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b6e4:	6093      	str	r3, [r2, #8]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ec:	441a      	add	r2, r3
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f47f ae2a 	bne.w	800b356 <f_read+0xb4>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2100      	movs	r1, #0
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fd fa39 	bl	8008b84 <unlock_fs>
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3730      	adds	r7, #48	; 0x30
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08a      	sub	sp, #40	; 0x28
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2200      	movs	r2, #0
 800b732:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7ff f9ed 	bl	800ab14 <validate>
 800b73a:	4603      	mov	r3, r0
 800b73c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b73e:	7dfb      	ldrb	r3, [r7, #23]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00a      	beq.n	800b75a <f_write+0x3e>
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	7dfa      	ldrb	r2, [r7, #23]
 800b74e:	4611      	mov	r1, r2
 800b750:	4618      	mov	r0, r3
 800b752:	f7fd fa17 	bl	8008b84 <unlock_fs>
 800b756:	7dfb      	ldrb	r3, [r7, #23]
 800b758:	e26a      	b.n	800bc30 <f_write+0x514>
	if (fp->err)							/* Check error */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b760:	79db      	ldrb	r3, [r3, #7]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d010      	beq.n	800b788 <f_write+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b774:	79db      	ldrb	r3, [r3, #7]
 800b776:	4619      	mov	r1, r3
 800b778:	4610      	mov	r0, r2
 800b77a:	f7fd fa03 	bl	8008b84 <unlock_fs>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b784:	79db      	ldrb	r3, [r3, #7]
 800b786:	e253      	b.n	800bc30 <f_write+0x514>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b78e:	799b      	ldrb	r3, [r3, #6]
 800b790:	f003 0302 	and.w	r3, r3, #2
 800b794:	2b00      	cmp	r3, #0
 800b796:	d109      	bne.n	800b7ac <f_write+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2107      	movs	r1, #7
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd f9ee 	bl	8008b84 <unlock_fs>
 800b7a8:	2307      	movs	r3, #7
 800b7aa:	e241      	b.n	800bc30 <f_write+0x514>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7b2:	689a      	ldr	r2, [r3, #8]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	441a      	add	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	f080 8209 	bcs.w	800bbd8 <f_write+0x4bc>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800b7ca:	e205      	b.n	800bbd8 <f_write+0x4bc>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b7da:	6812      	ldr	r2, [r2, #0]
 800b7dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b7e0:	8952      	ldrh	r2, [r2, #10]
 800b7e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7e6:	fb01 f202 	mul.w	r2, r1, r2
 800b7ea:	1a9b      	subs	r3, r3, r2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f040 8199 	bne.w	800bb24 <f_write+0x408>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b800:	6812      	ldr	r2, [r2, #0]
 800b802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b806:	8952      	ldrh	r2, [r2, #10]
 800b808:	fbb3 f3f2 	udiv	r3, r3, r2
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b81a:	789b      	ldrb	r3, [r3, #2]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	4013      	ands	r3, r2
 800b822:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800b824:	7dbb      	ldrb	r3, [r7, #22]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d16f      	bne.n	800b90a <f_write+0x1ee>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d111      	bne.n	800b85a <f_write+0x13e>
					clst = fp->sclust;		/* Follow from the origin */
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	2b00      	cmp	r3, #0
 800b844:	d126      	bne.n	800b894 <f_write+0x178>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2100      	movs	r1, #0
 800b850:	4618      	mov	r0, r3
 800b852:	f7fd ff8f 	bl	8009774 <create_chain>
 800b856:	6278      	str	r0, [r7, #36]	; 0x24
 800b858:	e01c      	b.n	800b894 <f_write+0x178>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	2b00      	cmp	r3, #0
 800b864:	d009      	beq.n	800b87a <f_write+0x15e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	4619      	mov	r1, r3
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7fe f827 	bl	80098c4 <clmt_clust>
 800b876:	6278      	str	r0, [r7, #36]	; 0x24
 800b878:	e00c      	b.n	800b894 <f_write+0x178>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f7fd ff71 	bl	8009774 <create_chain>
 800b892:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 81a3 	beq.w	800bbe2 <f_write+0x4c6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d10e      	bne.n	800b8c0 <f_write+0x1a4>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	71da      	strb	r2, [r3, #7]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2102      	movs	r1, #2
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fd f964 	bl	8008b84 <unlock_fs>
 800b8bc:	2302      	movs	r3, #2
 800b8be:	e1b7      	b.n	800bc30 <f_write+0x514>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c6:	d10e      	bne.n	800b8e6 <f_write+0x1ca>
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	71da      	strb	r2, [r3, #7]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2101      	movs	r1, #1
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fd f951 	bl	8008b84 <unlock_fs>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e1a4      	b.n	800bc30 <f_write+0x514>
				fp->clust = clst;			/* Update current cluster */
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d105      	bne.n	800b90a <f_write+0x1ee>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b904:	461a      	mov	r2, r3
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b910:	799b      	ldrb	r3, [r3, #6]
 800b912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b916:	2b00      	cmp	r3, #0
 800b918:	d02b      	beq.n	800b972 <f_write+0x256>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b926:	7858      	ldrb	r0, [r3, #1]
 800b928:	68f9      	ldr	r1, [r7, #12]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b930:	699a      	ldr	r2, [r3, #24]
 800b932:	2301      	movs	r3, #1
 800b934:	f7fd f85c 	bl	80089f0 <disk_write>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00e      	beq.n	800b95c <f_write+0x240>
					ABORT(fp->fs, FR_DISK_ERR);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b944:	2201      	movs	r2, #1
 800b946:	71da      	strb	r2, [r3, #7]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2101      	movs	r1, #1
 800b952:	4618      	mov	r0, r3
 800b954:	f7fd f916 	bl	8008b84 <unlock_fs>
 800b958:	2301      	movs	r3, #1
 800b95a:	e169      	b.n	800bc30 <f_write+0x514>
				fp->flag &= ~FA__DIRTY;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b962:	799b      	ldrb	r3, [r3, #6]
 800b964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b970:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	4619      	mov	r1, r3
 800b984:	4610      	mov	r0, r2
 800b986:	f7fd fc20 	bl	80091ca <clust2sect>
 800b98a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10e      	bne.n	800b9b0 <f_write+0x294>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b998:	2202      	movs	r2, #2
 800b99a:	71da      	strb	r2, [r3, #7]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2102      	movs	r1, #2
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fd f8ec 	bl	8008b84 <unlock_fs>
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	e13f      	b.n	800bc30 <f_write+0x514>
			sect += csect;
 800b9b0:	7dbb      	ldrb	r3, [r7, #22]
 800b9b2:	693a      	ldr	r2, [r7, #16]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c4:	895b      	ldrh	r3, [r3, #10]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9ce:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d071      	beq.n	800baba <f_write+0x39e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800b9d6:	7dba      	ldrb	r2, [r7, #22]
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	4413      	add	r3, r2
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9e2:	6812      	ldr	r2, [r2, #0]
 800b9e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b9e8:	7892      	ldrb	r2, [r2, #2]
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d90a      	bls.n	800ba04 <f_write+0x2e8>
					cc = fp->fs->csize - csect;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9fa:	789b      	ldrb	r3, [r3, #2]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	7dbb      	ldrb	r3, [r7, #22]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba10:	7858      	ldrb	r0, [r3, #1]
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	69b9      	ldr	r1, [r7, #24]
 800ba18:	f7fc ffea 	bl	80089f0 <disk_write>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00e      	beq.n	800ba40 <f_write+0x324>
					ABORT(fp->fs, FR_DISK_ERR);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba28:	2201      	movs	r2, #1
 800ba2a:	71da      	strb	r2, [r3, #7]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2101      	movs	r1, #1
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fd f8a4 	bl	8008b84 <unlock_fs>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e0f7      	b.n	800bc30 <f_write+0x514>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba46:	699a      	ldr	r2, [r3, #24]
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	69fa      	ldr	r2, [r7, #28]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d926      	bls.n	800baa0 <f_write+0x384>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba5a:	699a      	ldr	r2, [r3, #24]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba66:	6812      	ldr	r2, [r2, #0]
 800ba68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba6c:	8952      	ldrh	r2, [r2, #10]
 800ba6e:	fb02 f303 	mul.w	r3, r2, r3
 800ba72:	69ba      	ldr	r2, [r7, #24]
 800ba74:	18d1      	adds	r1, r2, r3
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba82:	895b      	ldrh	r3, [r3, #10]
 800ba84:	461a      	mov	r2, r3
 800ba86:	f7fc fff1 	bl	8008a6c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba90:	799b      	ldrb	r3, [r3, #6]
 800ba92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba9e:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baac:	895b      	ldrh	r3, [r3, #10]
 800baae:	461a      	mov	r2, r3
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	fb02 f303 	mul.w	r3, r2, r3
 800bab6:	623b      	str	r3, [r7, #32]
				continue;
 800bab8:	e076      	b.n	800bba8 <f_write+0x48c>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	693a      	ldr	r2, [r7, #16]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d027      	beq.n	800bb18 <f_write+0x3fc>
				if (fp->fptr < fp->fsize &&
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bace:	689a      	ldr	r2, [r3, #8]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d21d      	bcs.n	800bb18 <f_write+0x3fc>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bae8:	7858      	ldrb	r0, [r3, #1]
 800baea:	68f9      	ldr	r1, [r7, #12]
 800baec:	2301      	movs	r3, #1
 800baee:	693a      	ldr	r2, [r7, #16]
 800baf0:	f7fc ff5e 	bl	80089b0 <disk_read>
 800baf4:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00e      	beq.n	800bb18 <f_write+0x3fc>
						ABORT(fp->fs, FR_DISK_ERR);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb00:	2201      	movs	r2, #1
 800bb02:	71da      	strb	r2, [r3, #7]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fd f838 	bl	8008b84 <unlock_fs>
 800bb14:	2301      	movs	r3, #1
 800bb16:	e08b      	b.n	800bc30 <f_write+0x514>
			}
#endif
			fp->dsect = sect;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb1e:	461a      	mov	r2, r3
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb30:	895b      	ldrh	r3, [r3, #10]
 800bb32:	4618      	mov	r0, r3
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb42:	6812      	ldr	r2, [r2, #0]
 800bb44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb48:	8952      	ldrh	r2, [r2, #10]
 800bb4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb4e:	fb01 f202 	mul.w	r2, r1, r2
 800bb52:	1a9b      	subs	r3, r3, r2
 800bb54:	1ac3      	subs	r3, r0, r3
 800bb56:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bb58:	6a3a      	ldr	r2, [r7, #32]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d901      	bls.n	800bb64 <f_write+0x448>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb72:	6812      	ldr	r2, [r2, #0]
 800bb74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb78:	8952      	ldrh	r2, [r2, #10]
 800bb7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb7e:	fb01 f202 	mul.w	r2, r1, r2
 800bb82:	1a9b      	subs	r3, r3, r2
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	6a3a      	ldr	r2, [r7, #32]
 800bb8a:	69b9      	ldr	r1, [r7, #24]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fc ff6d 	bl	8008a6c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb98:	799b      	ldrb	r3, [r3, #6]
 800bb9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bba6:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bba8:	69ba      	ldr	r2, [r7, #24]
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	4413      	add	r3, r2
 800bbae:	61bb      	str	r3, [r7, #24]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	4413      	add	r3, r2
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbc2:	6093      	str	r3, [r2, #8]
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	441a      	add	r2, r3
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f47f adf6 	bne.w	800b7cc <f_write+0xb0>
 800bbe0:	e000      	b.n	800bbe4 <f_write+0x4c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbe2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbea:	689a      	ldr	r2, [r3, #8]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d907      	bls.n	800bc08 <f_write+0x4ec>
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bc06:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc0e:	799b      	ldrb	r3, [r3, #6]
 800bc10:	f043 0320 	orr.w	r3, r3, #32
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2100      	movs	r1, #0
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fc ffab 	bl	8008b84 <unlock_fs>
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3728      	adds	r7, #40	; 0x28
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7fe ff67 	bl	800ab14 <validate>
 800bc46:	4603      	mov	r3, r0
 800bc48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f040 80c4 	bne.w	800bdda <f_sync+0x1a2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc58:	799b      	ldrb	r3, [r3, #6]
 800bc5a:	f003 0320 	and.w	r3, r3, #32
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f000 80bb 	beq.w	800bdda <f_sync+0x1a2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc6a:	799b      	ldrb	r3, [r3, #6]
 800bc6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d026      	beq.n	800bcc2 <f_sync+0x8a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc80:	7858      	ldrb	r0, [r3, #1]
 800bc82:	6879      	ldr	r1, [r7, #4]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc8a:	699a      	ldr	r2, [r3, #24]
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	f7fc feaf 	bl	80089f0 <disk_write>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d009      	beq.n	800bcac <f_sync+0x74>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2101      	movs	r1, #1
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fc ff6e 	bl	8008b84 <unlock_fs>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e0a0      	b.n	800bdee <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcb2:	799b      	ldrb	r3, [r3, #6]
 800bcb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcb8:	b2da      	uxtb	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcc0:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f7fd f987 	bl	8008fe8 <move_window>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d17a      	bne.n	800bdda <f_sync+0x1a2>
				dir = fp->dir_ptr;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcea:	6a1b      	ldr	r3, [r3, #32]
 800bcec:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	330b      	adds	r3, #11
 800bcf2:	781a      	ldrb	r2, [r3, #0]
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	330b      	adds	r3, #11
 800bcf8:	f042 0220 	orr.w	r2, r2, #32
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd06:	68da      	ldr	r2, [r3, #12]
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	331c      	adds	r3, #28
 800bd0c:	b2d2      	uxtb	r2, r2
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	0a1b      	lsrs	r3, r3, #8
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	331d      	adds	r3, #29
 800bd22:	b2d2      	uxtb	r2, r2
 800bd24:	701a      	strb	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	0c1a      	lsrs	r2, r3, #16
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	331e      	adds	r3, #30
 800bd34:	b2d2      	uxtb	r2, r2
 800bd36:	701a      	strb	r2, [r3, #0]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	0e1a      	lsrs	r2, r3, #24
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	331f      	adds	r3, #31
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6938      	ldr	r0, [r7, #16]
 800bd56:	f7fe f88b 	bl	8009e70 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800bd5a:	f7fc fd8b 	bl	8008874 <get_fattime>
 800bd5e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	3316      	adds	r3, #22
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	b2d2      	uxtb	r2, r2
 800bd68:	701a      	strb	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	0a1b      	lsrs	r3, r3, #8
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	3317      	adds	r3, #23
 800bd76:	b2d2      	uxtb	r2, r2
 800bd78:	701a      	strb	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	0c1a      	lsrs	r2, r3, #16
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	3318      	adds	r3, #24
 800bd82:	b2d2      	uxtb	r2, r2
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	0e1a      	lsrs	r2, r3, #24
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	3319      	adds	r3, #25
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	3312      	adds	r3, #18
 800bd96:	2200      	movs	r2, #0
 800bd98:	701a      	strb	r2, [r3, #0]
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	3313      	adds	r3, #19
 800bd9e:	2200      	movs	r2, #0
 800bda0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda8:	799b      	ldrb	r3, [r3, #6]
 800bdaa:	f023 0320 	bic.w	r3, r3, #32
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdb6:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fd f93b 	bl	800904c <sync_fs>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	7dfa      	ldrb	r2, [r7, #23]
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fc fecc 	bl	8008b84 <unlock_fs>
 800bdec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3718      	adds	r7, #24
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff ff1a 	bl	800bc38 <f_sync>
 800be04:	4603      	mov	r3, r0
 800be06:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d122      	bne.n	800be54 <f_close+0x5e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7fe fe80 	bl	800ab14 <validate>
 800be14:	4603      	mov	r3, r0
 800be16:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800be18:	7bfb      	ldrb	r3, [r7, #15]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d11a      	bne.n	800be54 <f_close+0x5e>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be30:	4618      	mov	r0, r3
 800be32:	f7fd f819 	bl	8008e68 <dec_lock>
 800be36:	4603      	mov	r3, r0
 800be38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d105      	bne.n	800be4c <f_close+0x56>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be46:	461a      	mov	r2, r3
 800be48:	2300      	movs	r3, #0
 800be4a:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800be4c:	2100      	movs	r1, #0
 800be4e:	68b8      	ldr	r0, [r7, #8]
 800be50:	f7fc fe98 	bl	8008b84 <unlock_fs>
#endif
		}
	}
	return res;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b090      	sub	sp, #64	; 0x40
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7fe fe53 	bl	800ab14 <validate>
 800be6e:	4603      	mov	r3, r0
 800be70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800be74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00c      	beq.n	800be96 <f_lseek+0x38>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800be88:	4611      	mov	r1, r2
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fc fe7a 	bl	8008b84 <unlock_fs>
 800be90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be94:	e350      	b.n	800c538 <f_lseek+0x6da>
	if (fp->err)						/* Check error */
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9c:	79db      	ldrb	r3, [r3, #7]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d010      	beq.n	800bec4 <f_lseek+0x66>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beb0:	79db      	ldrb	r3, [r3, #7]
 800beb2:	4619      	mov	r1, r3
 800beb4:	4610      	mov	r0, r2
 800beb6:	f7fc fe65 	bl	8008b84 <unlock_fs>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bec0:	79db      	ldrb	r3, [r3, #7]
 800bec2:	e339      	b.n	800c538 <f_lseek+0x6da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800beca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 814c 	beq.w	800c16a <f_lseek+0x30c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed8:	d17c      	bne.n	800bfd4 <f_lseek+0x176>
			tbl = fp->cltbl;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	1d1a      	adds	r2, r3, #4
 800bee8:	627a      	str	r2, [r7, #36]	; 0x24
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	617b      	str	r3, [r7, #20]
 800beee:	2302      	movs	r3, #2
 800bef0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d056      	beq.n	800bfb0 <f_lseek+0x152>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	613b      	str	r3, [r7, #16]
 800bf06:	2300      	movs	r3, #0
 800bf08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	3302      	adds	r3, #2
 800bf0e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	60fb      	str	r3, [r7, #12]
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	3301      	adds	r3, #1
 800bf18:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fd f975 	bl	8009214 <get_fat>
 800bf2a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d80e      	bhi.n	800bf50 <f_lseek+0xf2>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf38:	2202      	movs	r2, #2
 800bf3a:	71da      	strb	r2, [r3, #7]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2102      	movs	r1, #2
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fc fe1c 	bl	8008b84 <unlock_fs>
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	e2f3      	b.n	800c538 <f_lseek+0x6da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf56:	d10e      	bne.n	800bf76 <f_lseek+0x118>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf5e:	2201      	movs	r2, #1
 800bf60:	71da      	strb	r2, [r3, #7]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fc fe09 	bl	8008b84 <unlock_fs>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e2e0      	b.n	800c538 <f_lseek+0x6da>
					} while (cl == pcl + 1);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d0c7      	beq.n	800bf10 <f_lseek+0xb2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bf80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d809      	bhi.n	800bf9c <f_lseek+0x13e>
						*tbl++ = ncl; *tbl++ = tcl;
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	1d1a      	adds	r2, r3, #4
 800bf8c:	627a      	str	r2, [r7, #36]	; 0x24
 800bf8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	1d1a      	adds	r2, r3, #4
 800bf96:	627a      	str	r2, [r7, #36]	; 0x24
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d3a8      	bcc.n	800bf02 <f_lseek+0xa4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800bfbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d803      	bhi.n	800bfcc <f_lseek+0x16e>
				*tbl = 0;		/* Terminate table */
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	e2a9      	b.n	800c520 <f_lseek+0x6c2>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bfcc:	2311      	movs	r3, #17
 800bfce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bfd2:	e2a5      	b.n	800c520 <f_lseek+0x6c2>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d904      	bls.n	800bfec <f_lseek+0x18e>
				ofs = fp->fsize;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bff2:	461a      	mov	r2, r3
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8290 	beq.w	800c520 <f_lseek+0x6c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	3b01      	subs	r3, #1
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7fd fc5c 	bl	80098c4 <clmt_clust>
 800c00c:	4602      	mov	r2, r0
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c014:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7fd f8ce 	bl	80091ca <clust2sect>
 800c02e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10e      	bne.n	800c054 <f_lseek+0x1f6>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c03c:	2202      	movs	r2, #2
 800c03e:	71da      	strb	r2, [r3, #7]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2102      	movs	r1, #2
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fc fd9a 	bl	8008b84 <unlock_fs>
 800c050:	2302      	movs	r3, #2
 800c052:	e271      	b.n	800c538 <f_lseek+0x6da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	3b01      	subs	r3, #1
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c05e:	6812      	ldr	r2, [r2, #0]
 800c060:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c064:	8952      	ldrh	r2, [r2, #10]
 800c066:	fbb3 f3f2 	udiv	r3, r3, r2
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c070:	6812      	ldr	r2, [r2, #0]
 800c072:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c076:	7892      	ldrb	r2, [r2, #2]
 800c078:	3a01      	subs	r2, #1
 800c07a:	4013      	ands	r3, r2
 800c07c:	69ba      	ldr	r2, [r7, #24]
 800c07e:	4413      	add	r3, r2
 800c080:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c090:	6812      	ldr	r2, [r2, #0]
 800c092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c096:	8952      	ldrh	r2, [r2, #10]
 800c098:	fbb3 f1f2 	udiv	r1, r3, r2
 800c09c:	fb01 f202 	mul.w	r2, r1, r2
 800c0a0:	1a9b      	subs	r3, r3, r2
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 823c 	beq.w	800c520 <f_lseek+0x6c2>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	f000 8234 	beq.w	800c520 <f_lseek+0x6c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0be:	799b      	ldrb	r3, [r3, #6]
 800c0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d02b      	beq.n	800c120 <f_lseek+0x2c2>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0d4:	7858      	ldrb	r0, [r3, #1]
 800c0d6:	6879      	ldr	r1, [r7, #4]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0de:	699a      	ldr	r2, [r3, #24]
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f7fc fc85 	bl	80089f0 <disk_write>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00e      	beq.n	800c10a <f_lseek+0x2ac>
							ABORT(fp->fs, FR_DISK_ERR);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	71da      	strb	r2, [r3, #7]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2101      	movs	r1, #1
 800c100:	4618      	mov	r0, r3
 800c102:	f7fc fd3f 	bl	8008b84 <unlock_fs>
 800c106:	2301      	movs	r3, #1
 800c108:	e216      	b.n	800c538 <f_lseek+0x6da>
						fp->flag &= ~FA__DIRTY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c110:	799b      	ldrb	r3, [r3, #6]
 800c112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c116:	b2da      	uxtb	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c11e:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c12c:	7858      	ldrb	r0, [r3, #1]
 800c12e:	6879      	ldr	r1, [r7, #4]
 800c130:	2301      	movs	r3, #1
 800c132:	69ba      	ldr	r2, [r7, #24]
 800c134:	f7fc fc3c 	bl	80089b0 <disk_read>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00e      	beq.n	800c15c <f_lseek+0x2fe>
						ABORT(fp->fs, FR_DISK_ERR);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c144:	2201      	movs	r2, #1
 800c146:	71da      	strb	r2, [r3, #7]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2101      	movs	r1, #1
 800c152:	4618      	mov	r0, r3
 800c154:	f7fc fd16 	bl	8008b84 <unlock_fs>
 800c158:	2301      	movs	r3, #1
 800c15a:	e1ed      	b.n	800c538 <f_lseek+0x6da>
#endif
					fp->dsect = dsc;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c162:	461a      	mov	r2, r3
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	6193      	str	r3, [r2, #24]
 800c168:	e1da      	b.n	800c520 <f_lseek+0x6c2>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	683a      	ldr	r2, [r7, #0]
 800c174:	429a      	cmp	r2, r3
 800c176:	d90c      	bls.n	800c192 <f_lseek+0x334>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c17e:	799b      	ldrb	r3, [r3, #6]
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d104      	bne.n	800c192 <f_lseek+0x334>
#endif
			) ofs = fp->fsize;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c19c:	2300      	movs	r3, #0
 800c19e:	637b      	str	r3, [r7, #52]	; 0x34
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1aa:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 8128 	beq.w	800c404 <f_lseek+0x5a6>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1c0:	789b      	ldrb	r3, [r3, #2]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1d0:	895b      	ldrh	r3, [r3, #10]
 800c1d2:	fb02 f303 	mul.w	r3, r2, r3
 800c1d6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c1d8:	6a3b      	ldr	r3, [r7, #32]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d021      	beq.n	800c222 <f_lseek+0x3c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	1e5a      	subs	r2, r3, #1
 800c1e2:	69fb      	ldr	r3, [r7, #28]
 800c1e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	1e59      	subs	r1, r3, #1
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d315      	bcc.n	800c222 <f_lseek+0x3c4>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	1e5a      	subs	r2, r3, #1
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	425b      	negs	r3, r3
 800c1fe:	4013      	ands	r3, r2
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c206:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c220:	e041      	b.n	800c2a6 <f_lseek+0x448>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d133      	bne.n	800c29a <f_lseek+0x43c>
					clst = create_chain(fp->fs, 0);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2100      	movs	r1, #0
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fd fa99 	bl	8009774 <create_chain>
 800c242:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	2b01      	cmp	r3, #1
 800c248:	d10e      	bne.n	800c268 <f_lseek+0x40a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c250:	2202      	movs	r2, #2
 800c252:	71da      	strb	r2, [r3, #7]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2102      	movs	r1, #2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fc fc90 	bl	8008b84 <unlock_fs>
 800c264:	2302      	movs	r3, #2
 800c266:	e167      	b.n	800c538 <f_lseek+0x6da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c26e:	d10e      	bne.n	800c28e <f_lseek+0x430>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c276:	2201      	movs	r2, #1
 800c278:	71da      	strb	r2, [r3, #7]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2101      	movs	r1, #1
 800c284:	4618      	mov	r0, r3
 800c286:	f7fc fc7d 	bl	8008b84 <unlock_fs>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e154      	b.n	800c538 <f_lseek+0x6da>
					fp->sclust = clst;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c294:	461a      	mov	r2, r3
 800c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c298:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a4:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 80ab 	beq.w	800c404 <f_lseek+0x5a6>
				while (ofs > bcs) {						/* Cluster following loop */
 800c2ae:	e062      	b.n	800c376 <f_lseek+0x518>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2b6:	799b      	ldrb	r3, [r3, #6]
 800c2b8:	f003 0302 	and.w	r3, r3, #2
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00e      	beq.n	800c2de <f_lseek+0x480>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fd fa52 	bl	8009774 <create_chain>
 800c2d0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10b      	bne.n	800c2f0 <f_lseek+0x492>
							ofs = bcs; break;
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	e04f      	b.n	800c37e <f_lseek+0x520>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fc ff93 	bl	8009214 <get_fat>
 800c2ee:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f6:	d10e      	bne.n	800c316 <f_lseek+0x4b8>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2fe:	2201      	movs	r2, #1
 800c300:	71da      	strb	r2, [r3, #7]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2101      	movs	r1, #1
 800c30c:	4618      	mov	r0, r3
 800c30e:	f7fc fc39 	bl	8008b84 <unlock_fs>
 800c312:	2301      	movs	r3, #1
 800c314:	e110      	b.n	800c538 <f_lseek+0x6da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d909      	bls.n	800c330 <f_lseek+0x4d2>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d30e      	bcc.n	800c34e <f_lseek+0x4f0>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c336:	2202      	movs	r2, #2
 800c338:	71da      	strb	r2, [r3, #7]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2102      	movs	r1, #2
 800c344:	4618      	mov	r0, r3
 800c346:	f7fc fc1d 	bl	8008b84 <unlock_fs>
 800c34a:	2302      	movs	r3, #2
 800c34c:	e0f4      	b.n	800c538 <f_lseek+0x6da>
					fp->clust = clst;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c354:	461a      	mov	r2, r3
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c360:	689a      	ldr	r2, [r3, #8]
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	4413      	add	r3, r2
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c36c:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d898      	bhi.n	800c2b0 <f_lseek+0x452>
				}
				fp->fptr += ofs;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c384:	689a      	ldr	r2, [r3, #8]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	4413      	add	r3, r2
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c390:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c39e:	895b      	ldrh	r3, [r3, #10]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3a8:	fb01 f202 	mul.w	r2, r1, r2
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d028      	beq.n	800c404 <f_lseek+0x5a6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fc ff04 	bl	80091ca <clust2sect>
 800c3c2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800c3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10e      	bne.n	800c3e8 <f_lseek+0x58a>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	71da      	strb	r2, [r3, #7]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2102      	movs	r1, #2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fc fbd0 	bl	8008b84 <unlock_fs>
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	e0a7      	b.n	800c538 <f_lseek+0x6da>
					nsect += ofs / SS(fp->fs);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3f4:	895b      	ldrh	r3, [r3, #10]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c400:	4413      	add	r3, r2
 800c402:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c412:	6812      	ldr	r2, [r2, #0]
 800c414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c418:	8952      	ldrh	r2, [r2, #10]
 800c41a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c41e:	fb01 f202 	mul.w	r2, r1, r2
 800c422:	1a9b      	subs	r3, r3, r2
 800c424:	2b00      	cmp	r3, #0
 800c426:	d05e      	beq.n	800c4e6 <f_lseek+0x688>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c432:	429a      	cmp	r2, r3
 800c434:	d057      	beq.n	800c4e6 <f_lseek+0x688>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c43c:	799b      	ldrb	r3, [r3, #6]
 800c43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c442:	2b00      	cmp	r3, #0
 800c444:	d02b      	beq.n	800c49e <f_lseek+0x640>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c452:	7858      	ldrb	r0, [r3, #1]
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c45c:	699a      	ldr	r2, [r3, #24]
 800c45e:	2301      	movs	r3, #1
 800c460:	f7fc fac6 	bl	80089f0 <disk_write>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00e      	beq.n	800c488 <f_lseek+0x62a>
					ABORT(fp->fs, FR_DISK_ERR);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c470:	2201      	movs	r2, #1
 800c472:	71da      	strb	r2, [r3, #7]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2101      	movs	r1, #1
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fc fb80 	bl	8008b84 <unlock_fs>
 800c484:	2301      	movs	r3, #1
 800c486:	e057      	b.n	800c538 <f_lseek+0x6da>
				fp->flag &= ~FA__DIRTY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c48e:	799b      	ldrb	r3, [r3, #6]
 800c490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c494:	b2da      	uxtb	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c49c:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4aa:	7858      	ldrb	r0, [r3, #1]
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4b2:	f7fc fa7d 	bl	80089b0 <disk_read>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00e      	beq.n	800c4da <f_lseek+0x67c>
				ABORT(fp->fs, FR_DISK_ERR);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	71da      	strb	r2, [r3, #7]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fc fb57 	bl	8008b84 <unlock_fs>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e02e      	b.n	800c538 <f_lseek+0x6da>
#endif
			fp->dsect = nsect;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e4:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4ec:	689a      	ldr	r2, [r3, #8]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d912      	bls.n	800c520 <f_lseek+0x6c2>
			fp->fsize = fp->fptr;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c508:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c510:	799b      	ldrb	r3, [r3, #6]
 800c512:	f043 0320 	orr.w	r3, r3, #32
 800c516:	b2da      	uxtb	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c51e:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c52c:	4611      	mov	r1, r2
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fc fb28 	bl	8008b84 <unlock_fs>
 800c534:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3740      	adds	r7, #64	; 0x40
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c54e:	f843 0c34 	str.w	r0, [r3, #-52]
 800c552:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c556:	f843 1c38 	str.w	r1, [r3, #-56]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 800c55a:	f107 0118 	add.w	r1, r7, #24
 800c55e:	3914      	subs	r1, #20
 800c560:	f107 0318 	add.w	r3, r7, #24
 800c564:	3b04      	subs	r3, #4
 800c566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c56a:	2200      	movs	r2, #0
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fd ff97 	bl	800a4a0 <find_volume>
 800c572:	4603      	mov	r3, r0
 800c574:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c578:	f102 0217 	add.w	r2, r2, #23
 800c57c:	7013      	strb	r3, [r2, #0]
	if (res == FR_OK) {
 800c57e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c582:	f103 0317 	add.w	r3, r3, #23
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d13d      	bne.n	800c608 <f_stat+0xc8>
		INIT_BUF(dj);
 800c58c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c590:	461a      	mov	r2, r3
 800c592:	f107 0318 	add.w	r3, r7, #24
 800c596:	3b10      	subs	r3, #16
 800c598:	f8c2 3ff4 	str.w	r3, [r2, #4084]	; 0xff4
		res = follow_path(&dj, path);	/* Follow the file path */
 800c59c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c5a0:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800c5a4:	f107 0318 	add.w	r3, r7, #24
 800c5a8:	3b04      	subs	r3, #4
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fd fe4f 	bl	800a250 <follow_path>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c5b8:	f102 0217 	add.w	r2, r2, #23
 800c5bc:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {				/* Follow completed */
 800c5be:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c5c2:	f103 0317 	add.w	r3, r3, #23
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d11d      	bne.n	800c608 <f_stat+0xc8>
			if (dj.dir) {		/* Found an object */
 800c5cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c5d0:	f8d3 3ff0 	ldr.w	r3, [r3, #4080]	; 0xff0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d011      	beq.n	800c5fc <f_stat+0xbc>
				if (fno) get_fileinfo(&dj, fno);
 800c5d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c5dc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d011      	beq.n	800c608 <f_stat+0xc8>
 800c5e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	f107 0318 	add.w	r3, r7, #24
 800c5ee:	3b04      	subs	r3, #4
 800c5f0:	f852 1c38 	ldr.w	r1, [r2, #-56]
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fd fcf5 	bl	8009fe4 <get_fileinfo>
 800c5fa:	e005      	b.n	800c608 <f_stat+0xc8>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 800c5fc:	2306      	movs	r3, #6
 800c5fe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c602:	f102 0217 	add.w	r2, r2, #23
 800c606:	7013      	strb	r3, [r2, #0]
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800c608:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c60c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800c610:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800c614:	f102 0217 	add.w	r2, r2, #23
 800c618:	7812      	ldrb	r2, [r2, #0]
 800c61a:	4611      	mov	r1, r2
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fc fab1 	bl	8008b84 <unlock_fs>
 800c622:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800c626:	f103 0317 	add.w	r3, r3, #23
 800c62a:	781b      	ldrb	r3, [r3, #0]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7fe fa67 	bl	800ab14 <validate>
 800c646:	4603      	mov	r3, r0
 800c648:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d115      	bne.n	800c67c <f_truncate+0x44>
		if (fp->err) {						/* Check error */
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c656:	79db      	ldrb	r3, [r3, #7]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <f_truncate+0x30>
			res = (FRESULT)fp->err;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c662:	79db      	ldrb	r3, [r3, #7]
 800c664:	73fb      	strb	r3, [r7, #15]
 800c666:	e009      	b.n	800c67c <f_truncate+0x44>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c66e:	799b      	ldrb	r3, [r3, #6]
 800c670:	f003 0302 	and.w	r3, r3, #2
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <f_truncate+0x44>
				res = FR_DENIED;
 800c678:	2307      	movs	r3, #7
 800c67a:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f040 80b0 	bne.w	800c7e4 <f_truncate+0x1ac>
		if (fp->fsize > fp->fptr) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c68a:	68da      	ldr	r2, [r3, #12]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	429a      	cmp	r2, r3
 800c696:	f240 809c 	bls.w	800c7d2 <f_truncate+0x19a>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c6a8:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b0:	799b      	ldrb	r3, [r3, #6]
 800c6b2:	f043 0320 	orr.w	r3, r3, #32
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6be:	719a      	strb	r2, [r3, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d114      	bne.n	800c6f6 <f_truncate+0xbe>
				res = remove_chain(fp->fs, fp->sclust);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	4610      	mov	r0, r2
 800c6e0:	f7fc ffe7 	bl	80096b2 <remove_chain>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	6113      	str	r3, [r2, #16]
 800c6f4:	e042      	b.n	800c77c <f_truncate+0x144>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f7fc fd83 	bl	8009214 <get_fat>
 800c70e:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 800c710:	2300      	movs	r3, #0
 800c712:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71a:	d101      	bne.n	800c720 <f_truncate+0xe8>
 800c71c:	2301      	movs	r3, #1
 800c71e:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d101      	bne.n	800c72a <f_truncate+0xf2>
 800c726:	2302      	movs	r3, #2
 800c728:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d125      	bne.n	800c77c <f_truncate+0x144>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	68ba      	ldr	r2, [r7, #8]
 800c740:	429a      	cmp	r2, r3
 800c742:	d21b      	bcs.n	800c77c <f_truncate+0x144>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c74a:	6818      	ldr	r0, [r3, #0]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800c758:	4619      	mov	r1, r3
 800c75a:	f7fc fe57 	bl	800940c <put_fat>
 800c75e:	4603      	mov	r3, r0
 800c760:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 800c762:	7bfb      	ldrb	r3, [r7, #15]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d109      	bne.n	800c77c <f_truncate+0x144>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	68b9      	ldr	r1, [r7, #8]
 800c772:	4618      	mov	r0, r3
 800c774:	f7fc ff9d 	bl	80096b2 <remove_chain>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d127      	bne.n	800c7d2 <f_truncate+0x19a>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c788:	799b      	ldrb	r3, [r3, #6]
 800c78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d01f      	beq.n	800c7d2 <f_truncate+0x19a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c79e:	7858      	ldrb	r0, [r3, #1]
 800c7a0:	6879      	ldr	r1, [r7, #4]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7a8:	699a      	ldr	r2, [r3, #24]
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	f7fc f920 	bl	80089f0 <disk_write>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d002      	beq.n	800c7bc <f_truncate+0x184>
					res = FR_DISK_ERR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	73fb      	strb	r3, [r7, #15]
 800c7ba:	e00a      	b.n	800c7d2 <f_truncate+0x19a>
				else
					fp->flag &= ~FA__DIRTY;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7c2:	799b      	ldrb	r3, [r3, #6]
 800c7c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7c8:	b2da      	uxtb	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7d0:	719a      	strb	r2, [r3, #6]
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 800c7d2:	7bfb      	ldrb	r3, [r7, #15]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d005      	beq.n	800c7e4 <f_truncate+0x1ac>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7de:	461a      	mov	r2, r3
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	71d3      	strb	r3, [r2, #7]
	}

	LEAVE_FF(fp->fs, res);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	7bfa      	ldrb	r2, [r7, #15]
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fc f9c7 	bl	8008b84 <unlock_fs>
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	4613      	mov	r3, r2
 800c80c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c80e:	2301      	movs	r3, #1
 800c810:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c816:	4b1f      	ldr	r3, [pc, #124]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c818:	7a5b      	ldrb	r3, [r3, #9]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d831      	bhi.n	800c884 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c820:	4b1c      	ldr	r3, [pc, #112]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c822:	7a5b      	ldrb	r3, [r3, #9]
 800c824:	b2db      	uxtb	r3, r3
 800c826:	461a      	mov	r2, r3
 800c828:	4b1a      	ldr	r3, [pc, #104]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c82a:	2100      	movs	r1, #0
 800c82c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c82e:	4b19      	ldr	r3, [pc, #100]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c830:	7a5b      	ldrb	r3, [r3, #9]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	4a17      	ldr	r2, [pc, #92]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c83e:	4b15      	ldr	r3, [pc, #84]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c840:	7a5b      	ldrb	r3, [r3, #9]
 800c842:	b2db      	uxtb	r3, r3
 800c844:	461a      	mov	r2, r3
 800c846:	4b13      	ldr	r3, [pc, #76]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c848:	4413      	add	r3, r2
 800c84a:	79fa      	ldrb	r2, [r7, #7]
 800c84c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c84e:	4b11      	ldr	r3, [pc, #68]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c850:	7a5b      	ldrb	r3, [r3, #9]
 800c852:	b2db      	uxtb	r3, r3
 800c854:	1c5a      	adds	r2, r3, #1
 800c856:	b2d1      	uxtb	r1, r2
 800c858:	4a0e      	ldr	r2, [pc, #56]	; (800c894 <FATFS_LinkDriverEx+0x94>)
 800c85a:	7251      	strb	r1, [r2, #9]
 800c85c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c85e:	7dbb      	ldrb	r3, [r7, #22]
 800c860:	3330      	adds	r3, #48	; 0x30
 800c862:	b2da      	uxtb	r2, r3
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	3301      	adds	r3, #1
 800c86c:	223a      	movs	r2, #58	; 0x3a
 800c86e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	3302      	adds	r3, #2
 800c874:	222f      	movs	r2, #47	; 0x2f
 800c876:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	3303      	adds	r3, #3
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c884:	7dfb      	ldrb	r3, [r7, #23]
}
 800c886:	4618      	mov	r0, r3
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	2000247c 	.word	0x2000247c

0800c898 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	6839      	ldr	r1, [r7, #0]
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7ff ffaa 	bl	800c800 <FATFS_LinkDriverEx>
 800c8ac:	4603      	mov	r3, r0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	4603      	mov	r3, r0
 800c8be:	6039      	str	r1, [r7, #0]
 800c8c0:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	60bb      	str	r3, [r7, #8]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800c8c6:	f107 0308 	add.w	r3, r7, #8
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 f8b4 	bl	800ca3a <osSemaphoreCreate>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	bf14      	ite	ne
 800c8e0:	2301      	movne	r3, #1
 800c8e2:	2300      	moveq	r3, #0
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	60fb      	str	r3, [r7, #12]
  
  return ret;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 f940 	bl	800cb80 <osSemaphoreDelete>
  return 1;
 800c900:	2301      	movs	r3, #1
}
 800c902:	4618      	mov	r0, r3
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c912:	2300      	movs	r3, #0
 800c914:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c916:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f8ac 	bl	800ca78 <osSemaphoreWait>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d101      	bne.n	800c92a <ff_req_grant+0x20>
  {
    ret = 1;
 800c926:	2301      	movs	r3, #1
 800c928:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800c92a:	68fb      	ldr	r3, [r7, #12]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f8e9 	bl	800cb14 <osSemaphoreRelease>
}
 800c942:	bf00      	nop
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c94a:	b480      	push	{r7}
 800c94c:	b085      	sub	sp, #20
 800c94e:	af00      	add	r7, sp, #0
 800c950:	4603      	mov	r3, r0
 800c952:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c95c:	2b84      	cmp	r3, #132	; 0x84
 800c95e:	d005      	beq.n	800c96c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c960:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	4413      	add	r3, r2
 800c968:	3303      	adds	r3, #3
 800c96a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c96c:	68fb      	ldr	r3, [r7, #12]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr

0800c97a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b083      	sub	sp, #12
 800c97e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c980:	f3ef 8305 	mrs	r3, IPSR
 800c984:	607b      	str	r3, [r7, #4]
  return(result);
 800c986:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c988:	2b00      	cmp	r3, #0
 800c98a:	bf14      	ite	ne
 800c98c:	2301      	movne	r3, #1
 800c98e:	2300      	moveq	r3, #0
 800c990:	b2db      	uxtb	r3, r3
}
 800c992:	4618      	mov	r0, r3
 800c994:	370c      	adds	r7, #12
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr

0800c99e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c9a2:	f001 fa7b 	bl	800de9c <vTaskStartScheduler>
  
  return osOK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af02      	add	r7, sp, #8
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	685c      	ldr	r4, [r3, #4]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c9c2:	b29e      	uxth	r6, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff ffbd 	bl	800c94a <makeFreeRtosPriority>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	f107 030c 	add.w	r3, r7, #12
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	9200      	str	r2, [sp, #0]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	4632      	mov	r2, r6
 800c9de:	4629      	mov	r1, r5
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f000 ff3f 	bl	800d864 <xTaskCreate>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d001      	beq.n	800c9f0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e000      	b.n	800c9f2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3714      	adds	r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b084      	sub	sp, #16
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d001      	beq.n	800ca10 <osDelay+0x16>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	e000      	b.n	800ca12 <osDelay+0x18>
 800ca10:	2301      	movs	r3, #1
 800ca12:	4618      	mov	r0, r3
 800ca14:	f001 f870 	bl	800daf8 <vTaskDelay>
  
  return osOK;
 800ca18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	f000 fa79 	bl	800cf22 <xQueueCreateMutex>
 800ca30:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d110      	bne.n	800ca6c <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800ca4a:	2203      	movs	r2, #3
 800ca4c:	2100      	movs	r1, #0
 800ca4e:	2001      	movs	r0, #1
 800ca50:	f000 f9f4 	bl	800ce3c <xQueueGenericCreate>
 800ca54:	60f8      	str	r0, [r7, #12]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d005      	beq.n	800ca68 <osSemaphoreCreate+0x2e>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	2200      	movs	r2, #0
 800ca60:	2100      	movs	r1, #0
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f000 fa76 	bl	800cf54 <xQueueGenericSend>
    return sema;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	e000      	b.n	800ca6e <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800ca6c:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
	...

0800ca78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ca82:	2300      	movs	r3, #0
 800ca84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d101      	bne.n	800ca90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ca8c:	2380      	movs	r3, #128	; 0x80
 800ca8e:	e03a      	b.n	800cb06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9a:	d103      	bne.n	800caa4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ca9c:	f04f 33ff 	mov.w	r3, #4294967295
 800caa0:	60fb      	str	r3, [r7, #12]
 800caa2:	e009      	b.n	800cab8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d006      	beq.n	800cab8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d101      	bne.n	800cab8 <osSemaphoreWait+0x40>
      ticks = 1;
 800cab4:	2301      	movs	r3, #1
 800cab6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cab8:	f7ff ff5f 	bl	800c97a <inHandlerMode>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d017      	beq.n	800caf2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cac2:	f107 0308 	add.w	r3, r7, #8
 800cac6:	461a      	mov	r2, r3
 800cac8:	2100      	movs	r1, #0
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fcda 	bl	800d484 <xQueueReceiveFromISR>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d001      	beq.n	800cada <osSemaphoreWait+0x62>
      return osErrorOS;
 800cad6:	23ff      	movs	r3, #255	; 0xff
 800cad8:	e015      	b.n	800cb06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d011      	beq.n	800cb04 <osSemaphoreWait+0x8c>
 800cae0:	4b0b      	ldr	r3, [pc, #44]	; (800cb10 <osSemaphoreWait+0x98>)
 800cae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cae6:	601a      	str	r2, [r3, #0]
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	e008      	b.n	800cb04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800caf2:	68f9      	ldr	r1, [r7, #12]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fbb9 	bl	800d26c <xQueueSemaphoreTake>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d001      	beq.n	800cb04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800cb00:	23ff      	movs	r3, #255	; 0xff
 800cb02:	e000      	b.n	800cb06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	e000ed04 	.word	0xe000ed04

0800cb14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cb20:	2300      	movs	r3, #0
 800cb22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800cb24:	f7ff ff29 	bl	800c97a <inHandlerMode>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d016      	beq.n	800cb5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cb2e:	f107 0308 	add.w	r3, r7, #8
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 fb0b 	bl	800d150 <xQueueGiveFromISR>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d001      	beq.n	800cb44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800cb40:	23ff      	movs	r3, #255	; 0xff
 800cb42:	e017      	b.n	800cb74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d013      	beq.n	800cb72 <osSemaphoreRelease+0x5e>
 800cb4a:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <osSemaphoreRelease+0x68>)
 800cb4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	e00a      	b.n	800cb72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2100      	movs	r1, #0
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f9f6 	bl	800cf54 <xQueueGenericSend>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d001      	beq.n	800cb72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800cb6e:	23ff      	movs	r3, #255	; 0xff
 800cb70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800cb72:	68fb      	ldr	r3, [r7, #12]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	e000ed04 	.word	0xe000ed04

0800cb80 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cb88:	f7ff fef7 	bl	800c97a <inHandlerMode>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d001      	beq.n	800cb96 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800cb92:	2382      	movs	r3, #130	; 0x82
 800cb94:	e003      	b.n	800cb9e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 fcf4 	bl	800d584 <vQueueDelete>

  return osOK; 
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 ffd6 	bl	800db60 <vTaskSuspend>
  
  return osOK;
 800cbb4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
	...

0800cbc0 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800cbc8:	f7ff fed7 	bl	800c97a <inHandlerMode>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00e      	beq.n	800cbf0 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f001 f8f0 	bl	800ddb8 <xTaskResumeFromISR>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d10b      	bne.n	800cbf6 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800cbde:	4b08      	ldr	r3, [pc, #32]	; (800cc00 <osThreadResume+0x40>)
 800cbe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	e002      	b.n	800cbf6 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f001 f883 	bl	800dcfc <vTaskResume>
  }
  return osOK;
 800cbf6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	e000ed04 	.word	0xe000ed04

0800cc04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f103 0208 	add.w	r2, r3, #8
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f04f 32ff 	mov.w	r2, #4294967295
 800cc1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f103 0208 	add.w	r2, r3, #8
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f103 0208 	add.w	r2, r3, #8
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc52:	bf00      	nop
 800cc54:	370c      	adds	r7, #12
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b085      	sub	sp, #20
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	689a      	ldr	r2, [r3, #8]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	601a      	str	r2, [r3, #0]
}
 800cc9a:	bf00      	nop
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbc:	d103      	bne.n	800ccc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	60fb      	str	r3, [r7, #12]
 800ccc4:	e00c      	b.n	800cce0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	3308      	adds	r3, #8
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	e002      	b.n	800ccd4 <vListInsert+0x2e>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	60fb      	str	r3, [r7, #12]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d2f6      	bcs.n	800ccce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	683a      	ldr	r2, [r7, #0]
 800ccee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	683a      	ldr	r2, [r7, #0]
 800ccfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	601a      	str	r2, [r3, #0]
}
 800cd0c:	bf00      	nop
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	691b      	ldr	r3, [r3, #16]
 800cd24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	6892      	ldr	r2, [r2, #8]
 800cd2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	6852      	ldr	r2, [r2, #4]
 800cd38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d103      	bne.n	800cd4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	689a      	ldr	r2, [r3, #8]
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	1e5a      	subs	r2, r3, #1
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10a      	bne.n	800cd96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cd96:	f001 fffd 	bl	800ed94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cda2:	68f9      	ldr	r1, [r7, #12]
 800cda4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cda6:	fb01 f303 	mul.w	r3, r1, r3
 800cdaa:	441a      	add	r2, r3
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	68f9      	ldr	r1, [r7, #12]
 800cdca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cdcc:	fb01 f303 	mul.w	r3, r1, r3
 800cdd0:	441a      	add	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	22ff      	movs	r2, #255	; 0xff
 800cdda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	22ff      	movs	r2, #255	; 0xff
 800cde2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d114      	bne.n	800ce16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d01a      	beq.n	800ce2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3310      	adds	r3, #16
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f001 fab3 	bl	800e364 <xTaskRemoveFromEventList>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d012      	beq.n	800ce2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <xQueueGenericReset+0xcc>)
 800ce06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	e009      	b.n	800ce2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3310      	adds	r3, #16
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fef2 	bl	800cc04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	3324      	adds	r3, #36	; 0x24
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff feed 	bl	800cc04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ce2a:	f001 ffe3 	bl	800edf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ce2e:	2301      	movs	r3, #1
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	e000ed04 	.word	0xe000ed04

0800ce3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08a      	sub	sp, #40	; 0x28
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	4613      	mov	r3, r2
 800ce48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d10a      	bne.n	800ce66 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ce50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce54:	f383 8811 	msr	BASEPRI, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	613b      	str	r3, [r7, #16]
}
 800ce62:	bf00      	nop
 800ce64:	e7fe      	b.n	800ce64 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d102      	bne.n	800ce72 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	61fb      	str	r3, [r7, #28]
 800ce70:	e004      	b.n	800ce7c <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	fb02 f303 	mul.w	r3, r2, r3
 800ce7a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	3348      	adds	r3, #72	; 0x48
 800ce80:	4618      	mov	r0, r3
 800ce82:	f002 f8a9 	bl	800efd8 <pvPortMalloc>
 800ce86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00b      	beq.n	800cea6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	3348      	adds	r3, #72	; 0x48
 800ce92:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce94:	79fa      	ldrb	r2, [r7, #7]
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	697a      	ldr	r2, [r7, #20]
 800ce9e:	68b9      	ldr	r1, [r7, #8]
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 f805 	bl	800ceb0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800cea6:	69bb      	ldr	r3, [r7, #24]
	}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3720      	adds	r7, #32
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d103      	bne.n	800cecc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	69ba      	ldr	r2, [r7, #24]
 800cec8:	601a      	str	r2, [r3, #0]
 800ceca:	e002      	b.n	800ced2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cede:	2101      	movs	r1, #1
 800cee0:	69b8      	ldr	r0, [r7, #24]
 800cee2:	f7ff ff43 	bl	800cd6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cee6:	bf00      	nop
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00e      	beq.n	800cf1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cf0e:	2300      	movs	r3, #0
 800cf10:	2200      	movs	r2, #0
 800cf12:	2100      	movs	r1, #0
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 f81d 	bl	800cf54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cf1a:	bf00      	nop
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}

0800cf22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b086      	sub	sp, #24
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	4603      	mov	r3, r0
 800cf2a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	2300      	movs	r3, #0
 800cf32:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	461a      	mov	r2, r3
 800cf38:	6939      	ldr	r1, [r7, #16]
 800cf3a:	6978      	ldr	r0, [r7, #20]
 800cf3c:	f7ff ff7e 	bl	800ce3c <xQueueGenericCreate>
 800cf40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff ffd3 	bl	800ceee <prvInitialiseMutex>

		return pxNewQueue;
 800cf48:	68fb      	ldr	r3, [r7, #12]
	}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3718      	adds	r7, #24
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08e      	sub	sp, #56	; 0x38
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cf62:	2300      	movs	r3, #0
 800cf64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10a      	bne.n	800cf86 <xQueueGenericSend+0x32>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf82:	bf00      	nop
 800cf84:	e7fe      	b.n	800cf84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d103      	bne.n	800cf94 <xQueueGenericSend+0x40>
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d101      	bne.n	800cf98 <xQueueGenericSend+0x44>
 800cf94:	2301      	movs	r3, #1
 800cf96:	e000      	b.n	800cf9a <xQueueGenericSend+0x46>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10a      	bne.n	800cfb4 <xQueueGenericSend+0x60>
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfb0:	bf00      	nop
 800cfb2:	e7fe      	b.n	800cfb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b02      	cmp	r3, #2
 800cfb8:	d103      	bne.n	800cfc2 <xQueueGenericSend+0x6e>
 800cfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d101      	bne.n	800cfc6 <xQueueGenericSend+0x72>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e000      	b.n	800cfc8 <xQueueGenericSend+0x74>
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10a      	bne.n	800cfe2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	623b      	str	r3, [r7, #32]
}
 800cfde:	bf00      	nop
 800cfe0:	e7fe      	b.n	800cfe0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfe2:	f001 fb67 	bl	800e6b4 <xTaskGetSchedulerState>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d102      	bne.n	800cff2 <xQueueGenericSend+0x9e>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d101      	bne.n	800cff6 <xQueueGenericSend+0xa2>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <xQueueGenericSend+0xa4>
 800cff6:	2300      	movs	r3, #0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <xQueueGenericSend+0xbe>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	61fb      	str	r3, [r7, #28]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d012:	f001 febf 	bl	800ed94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01e:	429a      	cmp	r2, r3
 800d020:	d302      	bcc.n	800d028 <xQueueGenericSend+0xd4>
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2b02      	cmp	r3, #2
 800d026:	d129      	bne.n	800d07c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	68b9      	ldr	r1, [r7, #8]
 800d02c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d02e:	f000 fadf 	bl	800d5f0 <prvCopyDataToQueue>
 800d032:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d010      	beq.n	800d05e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03e:	3324      	adds	r3, #36	; 0x24
 800d040:	4618      	mov	r0, r3
 800d042:	f001 f98f 	bl	800e364 <xTaskRemoveFromEventList>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d013      	beq.n	800d074 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d04c:	4b3f      	ldr	r3, [pc, #252]	; (800d14c <xQueueGenericSend+0x1f8>)
 800d04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	e00a      	b.n	800d074 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d007      	beq.n	800d074 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d064:	4b39      	ldr	r3, [pc, #228]	; (800d14c <xQueueGenericSend+0x1f8>)
 800d066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06a:	601a      	str	r2, [r3, #0]
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d074:	f001 febe 	bl	800edf4 <vPortExitCritical>
				return pdPASS;
 800d078:	2301      	movs	r3, #1
 800d07a:	e063      	b.n	800d144 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d103      	bne.n	800d08a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d082:	f001 feb7 	bl	800edf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d086:	2300      	movs	r3, #0
 800d088:	e05c      	b.n	800d144 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d106      	bne.n	800d09e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d090:	f107 0314 	add.w	r3, r7, #20
 800d094:	4618      	mov	r0, r3
 800d096:	f001 f9c7 	bl	800e428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d09a:	2301      	movs	r3, #1
 800d09c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d09e:	f001 fea9 	bl	800edf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0a2:	f000 ff4b 	bl	800df3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0a6:	f001 fe75 	bl	800ed94 <vPortEnterCritical>
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0b0:	b25b      	sxtb	r3, r3
 800d0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b6:	d103      	bne.n	800d0c0 <xQueueGenericSend+0x16c>
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0c6:	b25b      	sxtb	r3, r3
 800d0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0cc:	d103      	bne.n	800d0d6 <xQueueGenericSend+0x182>
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0d6:	f001 fe8d 	bl	800edf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0da:	1d3a      	adds	r2, r7, #4
 800d0dc:	f107 0314 	add.w	r3, r7, #20
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f001 f9b6 	bl	800e454 <xTaskCheckForTimeOut>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d124      	bne.n	800d138 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d0ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0f0:	f000 fb76 	bl	800d7e0 <prvIsQueueFull>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d018      	beq.n	800d12c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fc:	3310      	adds	r3, #16
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4611      	mov	r1, r2
 800d102:	4618      	mov	r0, r3
 800d104:	f001 f90a 	bl	800e31c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d10a:	f000 fb01 	bl	800d710 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d10e:	f000 ff23 	bl	800df58 <xTaskResumeAll>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	f47f af7c 	bne.w	800d012 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d11a:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <xQueueGenericSend+0x1f8>)
 800d11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d120:	601a      	str	r2, [r3, #0]
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	e772      	b.n	800d012 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d12c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d12e:	f000 faef 	bl	800d710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d132:	f000 ff11 	bl	800df58 <xTaskResumeAll>
 800d136:	e76c      	b.n	800d012 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d13a:	f000 fae9 	bl	800d710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d13e:	f000 ff0b 	bl	800df58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d142:	2300      	movs	r3, #0
		}
	}
}
 800d144:	4618      	mov	r0, r3
 800d146:	3738      	adds	r7, #56	; 0x38
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	e000ed04 	.word	0xe000ed04

0800d150 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08e      	sub	sp, #56	; 0x38
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10a      	bne.n	800d17a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d168:	f383 8811 	msr	BASEPRI, r3
 800d16c:	f3bf 8f6f 	isb	sy
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	623b      	str	r3, [r7, #32]
}
 800d176:	bf00      	nop
 800d178:	e7fe      	b.n	800d178 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00a      	beq.n	800d198 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	61fb      	str	r3, [r7, #28]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d103      	bne.n	800d1a8 <xQueueGiveFromISR+0x58>
 800d1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <xQueueGiveFromISR+0x5c>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e000      	b.n	800d1ae <xQueueGiveFromISR+0x5e>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10a      	bne.n	800d1c8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b6:	f383 8811 	msr	BASEPRI, r3
 800d1ba:	f3bf 8f6f 	isb	sy
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	61bb      	str	r3, [r7, #24]
}
 800d1c4:	bf00      	nop
 800d1c6:	e7fe      	b.n	800d1c6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d1c8:	f001 fec6 	bl	800ef58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d1cc:	f3ef 8211 	mrs	r2, BASEPRI
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	617a      	str	r2, [r7, #20]
 800d1e2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d22b      	bcs.n	800d250 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d20a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d212:	d112      	bne.n	800d23a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d016      	beq.n	800d24a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d21e:	3324      	adds	r3, #36	; 0x24
 800d220:	4618      	mov	r0, r3
 800d222:	f001 f89f 	bl	800e364 <xTaskRemoveFromEventList>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00e      	beq.n	800d24a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00b      	beq.n	800d24a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2201      	movs	r2, #1
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	e007      	b.n	800d24a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d23e:	3301      	adds	r3, #1
 800d240:	b2db      	uxtb	r3, r3
 800d242:	b25a      	sxtb	r2, r3
 800d244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d24a:	2301      	movs	r3, #1
 800d24c:	637b      	str	r3, [r7, #52]	; 0x34
 800d24e:	e001      	b.n	800d254 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d250:	2300      	movs	r3, #0
 800d252:	637b      	str	r3, [r7, #52]	; 0x34
 800d254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d256:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d25e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d262:	4618      	mov	r0, r3
 800d264:	3738      	adds	r7, #56	; 0x38
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
	...

0800d26c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b08e      	sub	sp, #56	; 0x38
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d276:	2300      	movs	r3, #0
 800d278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d27e:	2300      	movs	r3, #0
 800d280:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d284:	2b00      	cmp	r3, #0
 800d286:	d10a      	bne.n	800d29e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	623b      	str	r3, [r7, #32]
}
 800d29a:	bf00      	nop
 800d29c:	e7fe      	b.n	800d29c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00a      	beq.n	800d2bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2aa:	f383 8811 	msr	BASEPRI, r3
 800d2ae:	f3bf 8f6f 	isb	sy
 800d2b2:	f3bf 8f4f 	dsb	sy
 800d2b6:	61fb      	str	r3, [r7, #28]
}
 800d2b8:	bf00      	nop
 800d2ba:	e7fe      	b.n	800d2ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d2bc:	f001 f9fa 	bl	800e6b4 <xTaskGetSchedulerState>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d102      	bne.n	800d2cc <xQueueSemaphoreTake+0x60>
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <xQueueSemaphoreTake+0x64>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e000      	b.n	800d2d2 <xQueueSemaphoreTake+0x66>
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10a      	bne.n	800d2ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	61bb      	str	r3, [r7, #24]
}
 800d2e8:	bf00      	nop
 800d2ea:	e7fe      	b.n	800d2ea <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2ec:	f001 fd52 	bl	800ed94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d024      	beq.n	800d346 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fe:	1e5a      	subs	r2, r3, #1
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d104      	bne.n	800d316 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d30c:	f001 fb9c 	bl	800ea48 <pvTaskIncrementMutexHeldCount>
 800d310:	4602      	mov	r2, r0
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00f      	beq.n	800d33e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	3310      	adds	r3, #16
 800d322:	4618      	mov	r0, r3
 800d324:	f001 f81e 	bl	800e364 <xTaskRemoveFromEventList>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d007      	beq.n	800d33e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d32e:	4b54      	ldr	r3, [pc, #336]	; (800d480 <xQueueSemaphoreTake+0x214>)
 800d330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d334:	601a      	str	r2, [r3, #0]
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d33e:	f001 fd59 	bl	800edf4 <vPortExitCritical>
				return pdPASS;
 800d342:	2301      	movs	r3, #1
 800d344:	e097      	b.n	800d476 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d111      	bne.n	800d370 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00a      	beq.n	800d368 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d356:	f383 8811 	msr	BASEPRI, r3
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	f3bf 8f4f 	dsb	sy
 800d362:	617b      	str	r3, [r7, #20]
}
 800d364:	bf00      	nop
 800d366:	e7fe      	b.n	800d366 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d368:	f001 fd44 	bl	800edf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d36c:	2300      	movs	r3, #0
 800d36e:	e082      	b.n	800d476 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d372:	2b00      	cmp	r3, #0
 800d374:	d106      	bne.n	800d384 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d376:	f107 030c 	add.w	r3, r7, #12
 800d37a:	4618      	mov	r0, r3
 800d37c:	f001 f854 	bl	800e428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d380:	2301      	movs	r3, #1
 800d382:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d384:	f001 fd36 	bl	800edf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d388:	f000 fdd8 	bl	800df3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d38c:	f001 fd02 	bl	800ed94 <vPortEnterCritical>
 800d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d396:	b25b      	sxtb	r3, r3
 800d398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d39c:	d103      	bne.n	800d3a6 <xQueueSemaphoreTake+0x13a>
 800d39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3ac:	b25b      	sxtb	r3, r3
 800d3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3b2:	d103      	bne.n	800d3bc <xQueueSemaphoreTake+0x150>
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d3bc:	f001 fd1a 	bl	800edf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3c0:	463a      	mov	r2, r7
 800d3c2:	f107 030c 	add.w	r3, r7, #12
 800d3c6:	4611      	mov	r1, r2
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f001 f843 	bl	800e454 <xTaskCheckForTimeOut>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d132      	bne.n	800d43a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d6:	f000 f9ed 	bl	800d7b4 <prvIsQueueEmpty>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d026      	beq.n	800d42e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d109      	bne.n	800d3fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d3e8:	f001 fcd4 	bl	800ed94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f001 f97d 	bl	800e6f0 <xTaskPriorityInherit>
 800d3f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d3f8:	f001 fcfc 	bl	800edf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fe:	3324      	adds	r3, #36	; 0x24
 800d400:	683a      	ldr	r2, [r7, #0]
 800d402:	4611      	mov	r1, r2
 800d404:	4618      	mov	r0, r3
 800d406:	f000 ff89 	bl	800e31c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d40a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d40c:	f000 f980 	bl	800d710 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d410:	f000 fda2 	bl	800df58 <xTaskResumeAll>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	f47f af68 	bne.w	800d2ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d41c:	4b18      	ldr	r3, [pc, #96]	; (800d480 <xQueueSemaphoreTake+0x214>)
 800d41e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d422:	601a      	str	r2, [r3, #0]
 800d424:	f3bf 8f4f 	dsb	sy
 800d428:	f3bf 8f6f 	isb	sy
 800d42c:	e75e      	b.n	800d2ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d42e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d430:	f000 f96e 	bl	800d710 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d434:	f000 fd90 	bl	800df58 <xTaskResumeAll>
 800d438:	e758      	b.n	800d2ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d43a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d43c:	f000 f968 	bl	800d710 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d440:	f000 fd8a 	bl	800df58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d446:	f000 f9b5 	bl	800d7b4 <prvIsQueueEmpty>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f43f af4d 	beq.w	800d2ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00d      	beq.n	800d474 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d458:	f001 fc9c 	bl	800ed94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d45c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d45e:	f000 f8af 	bl	800d5c0 <prvGetDisinheritPriorityAfterTimeout>
 800d462:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800d464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d46a:	4618      	mov	r0, r3
 800d46c:	f001 fa4c 	bl	800e908 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d470:	f001 fcc0 	bl	800edf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d474:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800d476:	4618      	mov	r0, r3
 800d478:	3738      	adds	r7, #56	; 0x38
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	e000ed04 	.word	0xe000ed04

0800d484 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b08e      	sub	sp, #56	; 0x38
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10a      	bne.n	800d4b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49e:	f383 8811 	msr	BASEPRI, r3
 800d4a2:	f3bf 8f6f 	isb	sy
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	623b      	str	r3, [r7, #32]
}
 800d4ac:	bf00      	nop
 800d4ae:	e7fe      	b.n	800d4ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d103      	bne.n	800d4be <xQueueReceiveFromISR+0x3a>
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <xQueueReceiveFromISR+0x3e>
 800d4be:	2301      	movs	r3, #1
 800d4c0:	e000      	b.n	800d4c4 <xQueueReceiveFromISR+0x40>
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10a      	bne.n	800d4de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	61fb      	str	r3, [r7, #28]
}
 800d4da:	bf00      	nop
 800d4dc:	e7fe      	b.n	800d4dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4de:	f001 fd3b 	bl	800ef58 <vPortValidateInterruptPriority>
	__asm volatile
 800d4e2:	f3ef 8211 	mrs	r2, BASEPRI
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	61ba      	str	r2, [r7, #24]
 800d4f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d502:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d506:	2b00      	cmp	r3, #0
 800d508:	d02f      	beq.n	800d56a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d514:	68b9      	ldr	r1, [r7, #8]
 800d516:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d518:	f000 f8d4 	bl	800d6c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51e:	1e5a      	subs	r2, r3, #1
 800d520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d522:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52c:	d112      	bne.n	800d554 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	691b      	ldr	r3, [r3, #16]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d016      	beq.n	800d564 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	3310      	adds	r3, #16
 800d53a:	4618      	mov	r0, r3
 800d53c:	f000 ff12 	bl	800e364 <xTaskRemoveFromEventList>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00e      	beq.n	800d564 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00b      	beq.n	800d564 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	e007      	b.n	800d564 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d558:	3301      	adds	r3, #1
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	b25a      	sxtb	r2, r3
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d564:	2301      	movs	r3, #1
 800d566:	637b      	str	r3, [r7, #52]	; 0x34
 800d568:	e001      	b.n	800d56e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d56a:	2300      	movs	r3, #0
 800d56c:	637b      	str	r3, [r7, #52]	; 0x34
 800d56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d570:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	f383 8811 	msr	BASEPRI, r3
}
 800d578:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3738      	adds	r7, #56	; 0x38
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10a      	bne.n	800d5ac <vQueueDelete+0x28>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	60bb      	str	r3, [r7, #8]
}
 800d5a8:	bf00      	nop
 800d5aa:	e7fe      	b.n	800d5aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d5ac:	68f8      	ldr	r0, [r7, #12]
 800d5ae:	f000 f92f 	bl	800d810 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f001 fdd4 	bl	800f160 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d5b8:	bf00      	nop
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b085      	sub	sp, #20
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d006      	beq.n	800d5de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f1c3 0307 	rsb	r3, r3, #7
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	e001      	b.n	800d5e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
	}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3714      	adds	r7, #20
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d604:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10d      	bne.n	800d62a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d14d      	bne.n	800d6b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f001 f8ee 	bl	800e7fc <xTaskPriorityDisinherit>
 800d620:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2200      	movs	r2, #0
 800d626:	605a      	str	r2, [r3, #4]
 800d628:	e043      	b.n	800d6b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d119      	bne.n	800d664 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6898      	ldr	r0, [r3, #8]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d638:	461a      	mov	r2, r3
 800d63a:	68b9      	ldr	r1, [r7, #8]
 800d63c:	f001 fee2 	bl	800f404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	689a      	ldr	r2, [r3, #8]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d648:	441a      	add	r2, r3
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	689a      	ldr	r2, [r3, #8]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	429a      	cmp	r2, r3
 800d658:	d32b      	bcc.n	800d6b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	609a      	str	r2, [r3, #8]
 800d662:	e026      	b.n	800d6b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	68d8      	ldr	r0, [r3, #12]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66c:	461a      	mov	r2, r3
 800d66e:	68b9      	ldr	r1, [r7, #8]
 800d670:	f001 fec8 	bl	800f404 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	68da      	ldr	r2, [r3, #12]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67c:	425b      	negs	r3, r3
 800d67e:	441a      	add	r2, r3
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	68da      	ldr	r2, [r3, #12]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d207      	bcs.n	800d6a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d698:	425b      	negs	r3, r3
 800d69a:	441a      	add	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d105      	bne.n	800d6b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d6ba:	697b      	ldr	r3, [r7, #20]
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3718      	adds	r7, #24
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d018      	beq.n	800d708 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	68da      	ldr	r2, [r3, #12]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6de:	441a      	add	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68da      	ldr	r2, [r3, #12]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d303      	bcc.n	800d6f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68d9      	ldr	r1, [r3, #12]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d700:	461a      	mov	r2, r3
 800d702:	6838      	ldr	r0, [r7, #0]
 800d704:	f001 fe7e 	bl	800f404 <memcpy>
	}
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d718:	f001 fb3c 	bl	800ed94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d722:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d724:	e011      	b.n	800d74a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d012      	beq.n	800d754 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	3324      	adds	r3, #36	; 0x24
 800d732:	4618      	mov	r0, r3
 800d734:	f000 fe16 	bl	800e364 <xTaskRemoveFromEventList>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d73e:	f000 feeb 	bl	800e518 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	3b01      	subs	r3, #1
 800d746:	b2db      	uxtb	r3, r3
 800d748:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	dce9      	bgt.n	800d726 <prvUnlockQueue+0x16>
 800d752:	e000      	b.n	800d756 <prvUnlockQueue+0x46>
					break;
 800d754:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	22ff      	movs	r2, #255	; 0xff
 800d75a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d75e:	f001 fb49 	bl	800edf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d762:	f001 fb17 	bl	800ed94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d76c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d76e:	e011      	b.n	800d794 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	691b      	ldr	r3, [r3, #16]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d012      	beq.n	800d79e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3310      	adds	r3, #16
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 fdf1 	bl	800e364 <xTaskRemoveFromEventList>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d001      	beq.n	800d78c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d788:	f000 fec6 	bl	800e518 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
 800d78e:	3b01      	subs	r3, #1
 800d790:	b2db      	uxtb	r3, r3
 800d792:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	dce9      	bgt.n	800d770 <prvUnlockQueue+0x60>
 800d79c:	e000      	b.n	800d7a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d79e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	22ff      	movs	r2, #255	; 0xff
 800d7a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d7a8:	f001 fb24 	bl	800edf4 <vPortExitCritical>
}
 800d7ac:	bf00      	nop
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7bc:	f001 faea 	bl	800ed94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d102      	bne.n	800d7ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	e001      	b.n	800d7d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d7d2:	f001 fb0f 	bl	800edf4 <vPortExitCritical>

	return xReturn;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d7e8:	f001 fad4 	bl	800ed94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d102      	bne.n	800d7fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	e001      	b.n	800d802 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d7fe:	2300      	movs	r3, #0
 800d800:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d802:	f001 faf7 	bl	800edf4 <vPortExitCritical>

	return xReturn;
 800d806:	68fb      	ldr	r3, [r7, #12]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d818:	2300      	movs	r3, #0
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	e016      	b.n	800d84c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d81e:	4a10      	ldr	r2, [pc, #64]	; (800d860 <vQueueUnregisterQueue+0x50>)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	4413      	add	r3, r2
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d10b      	bne.n	800d846 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d82e:	4a0c      	ldr	r2, [pc, #48]	; (800d860 <vQueueUnregisterQueue+0x50>)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2100      	movs	r1, #0
 800d834:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d838:	4a09      	ldr	r2, [pc, #36]	; (800d860 <vQueueUnregisterQueue+0x50>)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	00db      	lsls	r3, r3, #3
 800d83e:	4413      	add	r3, r2
 800d840:	2200      	movs	r2, #0
 800d842:	605a      	str	r2, [r3, #4]
				break;
 800d844:	e006      	b.n	800d854 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	3301      	adds	r3, #1
 800d84a:	60fb      	str	r3, [r7, #12]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2b07      	cmp	r3, #7
 800d850:	d9e5      	bls.n	800d81e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d852:	bf00      	nop
 800d854:	bf00      	nop
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	20002488 	.word	0x20002488

0800d864 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d864:	b580      	push	{r7, lr}
 800d866:	b08c      	sub	sp, #48	; 0x30
 800d868:	af04      	add	r7, sp, #16
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	603b      	str	r3, [r7, #0]
 800d870:	4613      	mov	r3, r2
 800d872:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d874:	88fb      	ldrh	r3, [r7, #6]
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4618      	mov	r0, r3
 800d87a:	f001 fbad 	bl	800efd8 <pvPortMalloc>
 800d87e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00e      	beq.n	800d8a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d886:	20b4      	movs	r0, #180	; 0xb4
 800d888:	f001 fba6 	bl	800efd8 <pvPortMalloc>
 800d88c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d003      	beq.n	800d89c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	631a      	str	r2, [r3, #48]	; 0x30
 800d89a:	e005      	b.n	800d8a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d89c:	6978      	ldr	r0, [r7, #20]
 800d89e:	f001 fc5f 	bl	800f160 <vPortFree>
 800d8a2:	e001      	b.n	800d8a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d013      	beq.n	800d8d6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d8ae:	88fa      	ldrh	r2, [r7, #6]
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	9303      	str	r3, [sp, #12]
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	9302      	str	r3, [sp, #8]
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	9301      	str	r3, [sp, #4]
 800d8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	68b9      	ldr	r1, [r7, #8]
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f000 f80f 	bl	800d8e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8ca:	69f8      	ldr	r0, [r7, #28]
 800d8cc:	f000 f8aa 	bl	800da24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	61bb      	str	r3, [r7, #24]
 800d8d4:	e002      	b.n	800d8dc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d8dc:	69bb      	ldr	r3, [r7, #24]
	}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3720      	adds	r7, #32
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
	...

0800d8e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b088      	sub	sp, #32
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	461a      	mov	r2, r3
 800d900:	21a5      	movs	r1, #165	; 0xa5
 800d902:	f001 fd8d 	bl	800f420 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d910:	3b01      	subs	r3, #1
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	4413      	add	r3, r2
 800d916:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	f023 0307 	bic.w	r3, r3, #7
 800d91e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	f003 0307 	and.w	r3, r3, #7
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00a      	beq.n	800d940 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	617b      	str	r3, [r7, #20]
}
 800d93c:	bf00      	nop
 800d93e:	e7fe      	b.n	800d93e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d940:	2300      	movs	r3, #0
 800d942:	61fb      	str	r3, [r7, #28]
 800d944:	e012      	b.n	800d96c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	4413      	add	r3, r2
 800d94c:	7819      	ldrb	r1, [r3, #0]
 800d94e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	4413      	add	r3, r2
 800d954:	3334      	adds	r3, #52	; 0x34
 800d956:	460a      	mov	r2, r1
 800d958:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	69fb      	ldr	r3, [r7, #28]
 800d95e:	4413      	add	r3, r2
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d006      	beq.n	800d974 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	3301      	adds	r3, #1
 800d96a:	61fb      	str	r3, [r7, #28]
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	2b0f      	cmp	r3, #15
 800d970:	d9e9      	bls.n	800d946 <prvInitialiseNewTask+0x5e>
 800d972:	e000      	b.n	800d976 <prvInitialiseNewTask+0x8e>
		{
			break;
 800d974:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d980:	2b06      	cmp	r3, #6
 800d982:	d901      	bls.n	800d988 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d984:	2306      	movs	r3, #6
 800d986:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d98c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d992:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d996:	2200      	movs	r2, #0
 800d998:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99c:	3304      	adds	r3, #4
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff f950 	bl	800cc44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a6:	3318      	adds	r3, #24
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7ff f94b 	bl	800cc44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b6:	f1c3 0207 	rsb	r2, r3, #7
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	334c      	adds	r3, #76	; 0x4c
 800d9d8:	2260      	movs	r2, #96	; 0x60
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f001 fd1f 	bl	800f420 <memset>
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	4a0c      	ldr	r2, [pc, #48]	; (800da18 <prvInitialiseNewTask+0x130>)
 800d9e6:	651a      	str	r2, [r3, #80]	; 0x50
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	4a0c      	ldr	r2, [pc, #48]	; (800da1c <prvInitialiseNewTask+0x134>)
 800d9ec:	655a      	str	r2, [r3, #84]	; 0x54
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f0:	4a0b      	ldr	r2, [pc, #44]	; (800da20 <prvInitialiseNewTask+0x138>)
 800d9f2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d9f4:	683a      	ldr	r2, [r7, #0]
 800d9f6:	68f9      	ldr	r1, [r7, #12]
 800d9f8:	69b8      	ldr	r0, [r7, #24]
 800d9fa:	f001 f89f 	bl	800eb3c <pxPortInitialiseStack>
 800d9fe:	4602      	mov	r2, r0
 800da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da02:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800da04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da06:	2b00      	cmp	r3, #0
 800da08:	d002      	beq.n	800da10 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da10:	bf00      	nop
 800da12:	3720      	adds	r7, #32
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	08010b1c 	.word	0x08010b1c
 800da1c:	08010b3c 	.word	0x08010b3c
 800da20:	08010afc 	.word	0x08010afc

0800da24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da2c:	f001 f9b2 	bl	800ed94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da30:	4b2a      	ldr	r3, [pc, #168]	; (800dadc <prvAddNewTaskToReadyList+0xb8>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	3301      	adds	r3, #1
 800da36:	4a29      	ldr	r2, [pc, #164]	; (800dadc <prvAddNewTaskToReadyList+0xb8>)
 800da38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800da3a:	4b29      	ldr	r3, [pc, #164]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d109      	bne.n	800da56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800da42:	4a27      	ldr	r2, [pc, #156]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800da48:	4b24      	ldr	r3, [pc, #144]	; (800dadc <prvAddNewTaskToReadyList+0xb8>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d110      	bne.n	800da72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da50:	f000 fd86 	bl	800e560 <prvInitialiseTaskLists>
 800da54:	e00d      	b.n	800da72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da56:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <prvAddNewTaskToReadyList+0xc0>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d109      	bne.n	800da72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da5e:	4b20      	ldr	r3, [pc, #128]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da68:	429a      	cmp	r2, r3
 800da6a:	d802      	bhi.n	800da72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da6c:	4a1c      	ldr	r2, [pc, #112]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da72:	4b1d      	ldr	r3, [pc, #116]	; (800dae8 <prvAddNewTaskToReadyList+0xc4>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	3301      	adds	r3, #1
 800da78:	4a1b      	ldr	r2, [pc, #108]	; (800dae8 <prvAddNewTaskToReadyList+0xc4>)
 800da7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da80:	2201      	movs	r2, #1
 800da82:	409a      	lsls	r2, r3
 800da84:	4b19      	ldr	r3, [pc, #100]	; (800daec <prvAddNewTaskToReadyList+0xc8>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4313      	orrs	r3, r2
 800da8a:	4a18      	ldr	r2, [pc, #96]	; (800daec <prvAddNewTaskToReadyList+0xc8>)
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da92:	4613      	mov	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	4413      	add	r3, r2
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4a15      	ldr	r2, [pc, #84]	; (800daf0 <prvAddNewTaskToReadyList+0xcc>)
 800da9c:	441a      	add	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4619      	mov	r1, r3
 800daa4:	4610      	mov	r0, r2
 800daa6:	f7ff f8da 	bl	800cc5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800daaa:	f001 f9a3 	bl	800edf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800daae:	4b0d      	ldr	r3, [pc, #52]	; (800dae4 <prvAddNewTaskToReadyList+0xc0>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00e      	beq.n	800dad4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dab6:	4b0a      	ldr	r3, [pc, #40]	; (800dae0 <prvAddNewTaskToReadyList+0xbc>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d207      	bcs.n	800dad4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dac4:	4b0b      	ldr	r3, [pc, #44]	; (800daf4 <prvAddNewTaskToReadyList+0xd0>)
 800dac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	200025c8 	.word	0x200025c8
 800dae0:	200024c8 	.word	0x200024c8
 800dae4:	200025d4 	.word	0x200025d4
 800dae8:	200025e4 	.word	0x200025e4
 800daec:	200025d0 	.word	0x200025d0
 800daf0:	200024cc 	.word	0x200024cc
 800daf4:	e000ed04 	.word	0xe000ed04

0800daf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db00:	2300      	movs	r3, #0
 800db02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d017      	beq.n	800db3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db0a:	4b13      	ldr	r3, [pc, #76]	; (800db58 <vTaskDelay+0x60>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00a      	beq.n	800db28 <vTaskDelay+0x30>
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	60bb      	str	r3, [r7, #8]
}
 800db24:	bf00      	nop
 800db26:	e7fe      	b.n	800db26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db28:	f000 fa08 	bl	800df3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db2c:	2100      	movs	r1, #0
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 ff9e 	bl	800ea70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db34:	f000 fa10 	bl	800df58 <xTaskResumeAll>
 800db38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d107      	bne.n	800db50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800db40:	4b06      	ldr	r3, [pc, #24]	; (800db5c <vTaskDelay+0x64>)
 800db42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	200025f0 	.word	0x200025f0
 800db5c:	e000ed04 	.word	0xe000ed04

0800db60 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800db68:	f001 f914 	bl	800ed94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d102      	bne.n	800db78 <vTaskSuspend+0x18>
 800db72:	4b3c      	ldr	r3, [pc, #240]	; (800dc64 <vTaskSuspend+0x104>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	e000      	b.n	800db7a <vTaskSuspend+0x1a>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	3304      	adds	r3, #4
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff f8c9 	bl	800cd18 <uxListRemove>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d115      	bne.n	800dbb8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db90:	4935      	ldr	r1, [pc, #212]	; (800dc68 <vTaskSuspend+0x108>)
 800db92:	4613      	mov	r3, r2
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	4413      	add	r3, r2
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	440b      	add	r3, r1
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d10a      	bne.n	800dbb8 <vTaskSuspend+0x58>
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba6:	2201      	movs	r2, #1
 800dba8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbac:	43da      	mvns	r2, r3
 800dbae:	4b2f      	ldr	r3, [pc, #188]	; (800dc6c <vTaskSuspend+0x10c>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	4a2d      	ldr	r2, [pc, #180]	; (800dc6c <vTaskSuspend+0x10c>)
 800dbb6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d004      	beq.n	800dbca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3318      	adds	r3, #24
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff f8a7 	bl	800cd18 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4827      	ldr	r0, [pc, #156]	; (800dc70 <vTaskSuspend+0x110>)
 800dbd2:	f7ff f844 	bl	800cc5e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d103      	bne.n	800dbea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dbea:	f001 f903 	bl	800edf4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dbee:	4b21      	ldr	r3, [pc, #132]	; (800dc74 <vTaskSuspend+0x114>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d005      	beq.n	800dc02 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dbf6:	f001 f8cd 	bl	800ed94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dbfa:	f000 fd35 	bl	800e668 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dbfe:	f001 f8f9 	bl	800edf4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dc02:	4b18      	ldr	r3, [pc, #96]	; (800dc64 <vTaskSuspend+0x104>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	68fa      	ldr	r2, [r7, #12]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d127      	bne.n	800dc5c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800dc0c:	4b19      	ldr	r3, [pc, #100]	; (800dc74 <vTaskSuspend+0x114>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d017      	beq.n	800dc44 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dc14:	4b18      	ldr	r3, [pc, #96]	; (800dc78 <vTaskSuspend+0x118>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00a      	beq.n	800dc32 <vTaskSuspend+0xd2>
	__asm volatile
 800dc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc20:	f383 8811 	msr	BASEPRI, r3
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	f3bf 8f4f 	dsb	sy
 800dc2c:	60bb      	str	r3, [r7, #8]
}
 800dc2e:	bf00      	nop
 800dc30:	e7fe      	b.n	800dc30 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800dc32:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <vTaskSuspend+0x11c>)
 800dc34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc38:	601a      	str	r2, [r3, #0]
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc42:	e00b      	b.n	800dc5c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800dc44:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <vTaskSuspend+0x110>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	4b0d      	ldr	r3, [pc, #52]	; (800dc80 <vTaskSuspend+0x120>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d103      	bne.n	800dc58 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800dc50:	4b04      	ldr	r3, [pc, #16]	; (800dc64 <vTaskSuspend+0x104>)
 800dc52:	2200      	movs	r2, #0
 800dc54:	601a      	str	r2, [r3, #0]
	}
 800dc56:	e001      	b.n	800dc5c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800dc58:	f000 fad8 	bl	800e20c <vTaskSwitchContext>
	}
 800dc5c:	bf00      	nop
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	200024c8 	.word	0x200024c8
 800dc68:	200024cc 	.word	0x200024cc
 800dc6c:	200025d0 	.word	0x200025d0
 800dc70:	200025b4 	.word	0x200025b4
 800dc74:	200025d4 	.word	0x200025d4
 800dc78:	200025f0 	.word	0x200025f0
 800dc7c:	e000ed04 	.word	0xe000ed04
 800dc80:	200025c8 	.word	0x200025c8

0800dc84 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800dc84:	b480      	push	{r7}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d10a      	bne.n	800dcb0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800dc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc9e:	f383 8811 	msr	BASEPRI, r3
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	f3bf 8f4f 	dsb	sy
 800dcaa:	60fb      	str	r3, [r7, #12]
}
 800dcac:	bf00      	nop
 800dcae:	e7fe      	b.n	800dcae <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	695b      	ldr	r3, [r3, #20]
 800dcb4:	4a0f      	ldr	r2, [pc, #60]	; (800dcf4 <prvTaskIsTaskSuspended+0x70>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d101      	bne.n	800dcbe <prvTaskIsTaskSuspended+0x3a>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e000      	b.n	800dcc0 <prvTaskIsTaskSuspended+0x3c>
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00f      	beq.n	800dce4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcc8:	4a0b      	ldr	r2, [pc, #44]	; (800dcf8 <prvTaskIsTaskSuspended+0x74>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d00a      	beq.n	800dce4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <prvTaskIsTaskSuspended+0x56>
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e000      	b.n	800dcdc <prvTaskIsTaskSuspended+0x58>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800dce0:	2301      	movs	r3, #1
 800dce2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dce4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dce6:	4618      	mov	r0, r3
 800dce8:	371c      	adds	r7, #28
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	200025b4 	.word	0x200025b4
 800dcf8:	20002588 	.word	0x20002588

0800dcfc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10a      	bne.n	800dd24 <vTaskResume+0x28>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	60bb      	str	r3, [r7, #8]
}
 800dd20:	bf00      	nop
 800dd22:	e7fe      	b.n	800dd22 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d039      	beq.n	800dd9e <vTaskResume+0xa2>
 800dd2a:	4b1f      	ldr	r3, [pc, #124]	; (800dda8 <vTaskResume+0xac>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d034      	beq.n	800dd9e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800dd34:	f001 f82e 	bl	800ed94 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f7ff ffa3 	bl	800dc84 <prvTaskIsTaskSuspended>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d02a      	beq.n	800dd9a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3304      	adds	r3, #4
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fe ffe5 	bl	800cd18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd52:	2201      	movs	r2, #1
 800dd54:	409a      	lsls	r2, r3
 800dd56:	4b15      	ldr	r3, [pc, #84]	; (800ddac <vTaskResume+0xb0>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	4a13      	ldr	r2, [pc, #76]	; (800ddac <vTaskResume+0xb0>)
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd64:	4613      	mov	r3, r2
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	4413      	add	r3, r2
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	4a10      	ldr	r2, [pc, #64]	; (800ddb0 <vTaskResume+0xb4>)
 800dd6e:	441a      	add	r2, r3
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	3304      	adds	r3, #4
 800dd74:	4619      	mov	r1, r3
 800dd76:	4610      	mov	r0, r2
 800dd78:	f7fe ff71 	bl	800cc5e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd80:	4b09      	ldr	r3, [pc, #36]	; (800dda8 <vTaskResume+0xac>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d307      	bcc.n	800dd9a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dd8a:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <vTaskResume+0xb8>)
 800dd8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800dd9a:	f001 f82b 	bl	800edf4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd9e:	bf00      	nop
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	200024c8 	.word	0x200024c8
 800ddac:	200025d0 	.word	0x200025d0
 800ddb0:	200024cc 	.word	0x200024cc
 800ddb4:	e000ed04 	.word	0xe000ed04

0800ddb8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b08a      	sub	sp, #40	; 0x28
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10a      	bne.n	800dde4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800ddce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd2:	f383 8811 	msr	BASEPRI, r3
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	f3bf 8f4f 	dsb	sy
 800ddde:	61bb      	str	r3, [r7, #24]
}
 800dde0:	bf00      	nop
 800dde2:	e7fe      	b.n	800dde2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dde4:	f001 f8b8 	bl	800ef58 <vPortValidateInterruptPriority>
	__asm volatile
 800dde8:	f3ef 8211 	mrs	r2, BASEPRI
 800ddec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	617a      	str	r2, [r7, #20]
 800ddfe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800de00:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de02:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800de04:	6a38      	ldr	r0, [r7, #32]
 800de06:	f7ff ff3d 	bl	800dc84 <prvTaskIsTaskSuspended>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d02f      	beq.n	800de70 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de10:	4b1d      	ldr	r3, [pc, #116]	; (800de88 <xTaskResumeFromISR+0xd0>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d125      	bne.n	800de64 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de18:	6a3b      	ldr	r3, [r7, #32]
 800de1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de1c:	4b1b      	ldr	r3, [pc, #108]	; (800de8c <xTaskResumeFromISR+0xd4>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de22:	429a      	cmp	r2, r3
 800de24:	d301      	bcc.n	800de2a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800de26:	2301      	movs	r3, #1
 800de28:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de2a:	6a3b      	ldr	r3, [r7, #32]
 800de2c:	3304      	adds	r3, #4
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fe ff72 	bl	800cd18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de34:	6a3b      	ldr	r3, [r7, #32]
 800de36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de38:	2201      	movs	r2, #1
 800de3a:	409a      	lsls	r2, r3
 800de3c:	4b14      	ldr	r3, [pc, #80]	; (800de90 <xTaskResumeFromISR+0xd8>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4313      	orrs	r3, r2
 800de42:	4a13      	ldr	r2, [pc, #76]	; (800de90 <xTaskResumeFromISR+0xd8>)
 800de44:	6013      	str	r3, [r2, #0]
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4a:	4613      	mov	r3, r2
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	4413      	add	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4a10      	ldr	r2, [pc, #64]	; (800de94 <xTaskResumeFromISR+0xdc>)
 800de54:	441a      	add	r2, r3
 800de56:	6a3b      	ldr	r3, [r7, #32]
 800de58:	3304      	adds	r3, #4
 800de5a:	4619      	mov	r1, r3
 800de5c:	4610      	mov	r0, r2
 800de5e:	f7fe fefe 	bl	800cc5e <vListInsertEnd>
 800de62:	e005      	b.n	800de70 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	3318      	adds	r3, #24
 800de68:	4619      	mov	r1, r3
 800de6a:	480b      	ldr	r0, [pc, #44]	; (800de98 <xTaskResumeFromISR+0xe0>)
 800de6c:	f7fe fef7 	bl	800cc5e <vListInsertEnd>
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f383 8811 	msr	BASEPRI, r3
}
 800de7a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800de7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800de7e:	4618      	mov	r0, r3
 800de80:	3728      	adds	r7, #40	; 0x28
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	200025f0 	.word	0x200025f0
 800de8c:	200024c8 	.word	0x200024c8
 800de90:	200025d0 	.word	0x200025d0
 800de94:	200024cc 	.word	0x200024cc
 800de98:	20002588 	.word	0x20002588

0800de9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b086      	sub	sp, #24
 800dea0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800dea2:	4b1e      	ldr	r3, [pc, #120]	; (800df1c <vTaskStartScheduler+0x80>)
 800dea4:	9301      	str	r3, [sp, #4]
 800dea6:	2300      	movs	r3, #0
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	2300      	movs	r3, #0
 800deac:	2280      	movs	r2, #128	; 0x80
 800deae:	491c      	ldr	r1, [pc, #112]	; (800df20 <vTaskStartScheduler+0x84>)
 800deb0:	481c      	ldr	r0, [pc, #112]	; (800df24 <vTaskStartScheduler+0x88>)
 800deb2:	f7ff fcd7 	bl	800d864 <xTaskCreate>
 800deb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2b01      	cmp	r3, #1
 800debc:	d11b      	bne.n	800def6 <vTaskStartScheduler+0x5a>
	__asm volatile
 800debe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec2:	f383 8811 	msr	BASEPRI, r3
 800dec6:	f3bf 8f6f 	isb	sy
 800deca:	f3bf 8f4f 	dsb	sy
 800dece:	60bb      	str	r3, [r7, #8]
}
 800ded0:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ded2:	4b15      	ldr	r3, [pc, #84]	; (800df28 <vTaskStartScheduler+0x8c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	334c      	adds	r3, #76	; 0x4c
 800ded8:	4a14      	ldr	r2, [pc, #80]	; (800df2c <vTaskStartScheduler+0x90>)
 800deda:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dedc:	4b14      	ldr	r3, [pc, #80]	; (800df30 <vTaskStartScheduler+0x94>)
 800dede:	f04f 32ff 	mov.w	r2, #4294967295
 800dee2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dee4:	4b13      	ldr	r3, [pc, #76]	; (800df34 <vTaskStartScheduler+0x98>)
 800dee6:	2201      	movs	r2, #1
 800dee8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800deea:	4b13      	ldr	r3, [pc, #76]	; (800df38 <vTaskStartScheduler+0x9c>)
 800deec:	2200      	movs	r2, #0
 800deee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800def0:	f000 feae 	bl	800ec50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800def4:	e00e      	b.n	800df14 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800defc:	d10a      	bne.n	800df14 <vTaskStartScheduler+0x78>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	607b      	str	r3, [r7, #4]
}
 800df10:	bf00      	nop
 800df12:	e7fe      	b.n	800df12 <vTaskStartScheduler+0x76>
}
 800df14:	bf00      	nop
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	200025ec 	.word	0x200025ec
 800df20:	08010a3c 	.word	0x08010a3c
 800df24:	0800e531 	.word	0x0800e531
 800df28:	200024c8 	.word	0x200024c8
 800df2c:	200000c4 	.word	0x200000c4
 800df30:	200025e8 	.word	0x200025e8
 800df34:	200025d4 	.word	0x200025d4
 800df38:	200025cc 	.word	0x200025cc

0800df3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df3c:	b480      	push	{r7}
 800df3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800df40:	4b04      	ldr	r3, [pc, #16]	; (800df54 <vTaskSuspendAll+0x18>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	4a03      	ldr	r2, [pc, #12]	; (800df54 <vTaskSuspendAll+0x18>)
 800df48:	6013      	str	r3, [r2, #0]
}
 800df4a:	bf00      	nop
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr
 800df54:	200025f0 	.word	0x200025f0

0800df58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df5e:	2300      	movs	r3, #0
 800df60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df62:	2300      	movs	r3, #0
 800df64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df66:	4b41      	ldr	r3, [pc, #260]	; (800e06c <xTaskResumeAll+0x114>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d10a      	bne.n	800df84 <xTaskResumeAll+0x2c>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	603b      	str	r3, [r7, #0]
}
 800df80:	bf00      	nop
 800df82:	e7fe      	b.n	800df82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df84:	f000 ff06 	bl	800ed94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df88:	4b38      	ldr	r3, [pc, #224]	; (800e06c <xTaskResumeAll+0x114>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3b01      	subs	r3, #1
 800df8e:	4a37      	ldr	r2, [pc, #220]	; (800e06c <xTaskResumeAll+0x114>)
 800df90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df92:	4b36      	ldr	r3, [pc, #216]	; (800e06c <xTaskResumeAll+0x114>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d161      	bne.n	800e05e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df9a:	4b35      	ldr	r3, [pc, #212]	; (800e070 <xTaskResumeAll+0x118>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d05d      	beq.n	800e05e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dfa2:	e02e      	b.n	800e002 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800dfa4:	4b33      	ldr	r3, [pc, #204]	; (800e074 <xTaskResumeAll+0x11c>)
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3318      	adds	r3, #24
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fe feb1 	bl	800cd18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	3304      	adds	r3, #4
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe feac 	bl	800cd18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	409a      	lsls	r2, r3
 800dfc8:	4b2b      	ldr	r3, [pc, #172]	; (800e078 <xTaskResumeAll+0x120>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	4a2a      	ldr	r2, [pc, #168]	; (800e078 <xTaskResumeAll+0x120>)
 800dfd0:	6013      	str	r3, [r2, #0]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfd6:	4613      	mov	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4a27      	ldr	r2, [pc, #156]	; (800e07c <xTaskResumeAll+0x124>)
 800dfe0:	441a      	add	r2, r3
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3304      	adds	r3, #4
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	4610      	mov	r0, r2
 800dfea:	f7fe fe38 	bl	800cc5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dff2:	4b23      	ldr	r3, [pc, #140]	; (800e080 <xTaskResumeAll+0x128>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d302      	bcc.n	800e002 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dffc:	4b21      	ldr	r3, [pc, #132]	; (800e084 <xTaskResumeAll+0x12c>)
 800dffe:	2201      	movs	r2, #1
 800e000:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e002:	4b1c      	ldr	r3, [pc, #112]	; (800e074 <xTaskResumeAll+0x11c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1cc      	bne.n	800dfa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e010:	f000 fb2a 	bl	800e668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e014:	4b1c      	ldr	r3, [pc, #112]	; (800e088 <xTaskResumeAll+0x130>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d010      	beq.n	800e042 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e020:	f000 f836 	bl	800e090 <xTaskIncrementTick>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e02a:	4b16      	ldr	r3, [pc, #88]	; (800e084 <xTaskResumeAll+0x12c>)
 800e02c:	2201      	movs	r2, #1
 800e02e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3b01      	subs	r3, #1
 800e034:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1f1      	bne.n	800e020 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e03c:	4b12      	ldr	r3, [pc, #72]	; (800e088 <xTaskResumeAll+0x130>)
 800e03e:	2200      	movs	r2, #0
 800e040:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e042:	4b10      	ldr	r3, [pc, #64]	; (800e084 <xTaskResumeAll+0x12c>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d009      	beq.n	800e05e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e04a:	2301      	movs	r3, #1
 800e04c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e04e:	4b0f      	ldr	r3, [pc, #60]	; (800e08c <xTaskResumeAll+0x134>)
 800e050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e05e:	f000 fec9 	bl	800edf4 <vPortExitCritical>

	return xAlreadyYielded;
 800e062:	68bb      	ldr	r3, [r7, #8]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	200025f0 	.word	0x200025f0
 800e070:	200025c8 	.word	0x200025c8
 800e074:	20002588 	.word	0x20002588
 800e078:	200025d0 	.word	0x200025d0
 800e07c:	200024cc 	.word	0x200024cc
 800e080:	200024c8 	.word	0x200024c8
 800e084:	200025dc 	.word	0x200025dc
 800e088:	200025d8 	.word	0x200025d8
 800e08c:	e000ed04 	.word	0xe000ed04

0800e090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e096:	2300      	movs	r3, #0
 800e098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e09a:	4b51      	ldr	r3, [pc, #324]	; (800e1e0 <xTaskIncrementTick+0x150>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f040 808d 	bne.w	800e1be <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e0a4:	4b4f      	ldr	r3, [pc, #316]	; (800e1e4 <xTaskIncrementTick+0x154>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e0ac:	4a4d      	ldr	r2, [pc, #308]	; (800e1e4 <xTaskIncrementTick+0x154>)
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d120      	bne.n	800e0fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e0b8:	4b4b      	ldr	r3, [pc, #300]	; (800e1e8 <xTaskIncrementTick+0x158>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00a      	beq.n	800e0d8 <xTaskIncrementTick+0x48>
	__asm volatile
 800e0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c6:	f383 8811 	msr	BASEPRI, r3
 800e0ca:	f3bf 8f6f 	isb	sy
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	603b      	str	r3, [r7, #0]
}
 800e0d4:	bf00      	nop
 800e0d6:	e7fe      	b.n	800e0d6 <xTaskIncrementTick+0x46>
 800e0d8:	4b43      	ldr	r3, [pc, #268]	; (800e1e8 <xTaskIncrementTick+0x158>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60fb      	str	r3, [r7, #12]
 800e0de:	4b43      	ldr	r3, [pc, #268]	; (800e1ec <xTaskIncrementTick+0x15c>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a41      	ldr	r2, [pc, #260]	; (800e1e8 <xTaskIncrementTick+0x158>)
 800e0e4:	6013      	str	r3, [r2, #0]
 800e0e6:	4a41      	ldr	r2, [pc, #260]	; (800e1ec <xTaskIncrementTick+0x15c>)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6013      	str	r3, [r2, #0]
 800e0ec:	4b40      	ldr	r3, [pc, #256]	; (800e1f0 <xTaskIncrementTick+0x160>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	4a3f      	ldr	r2, [pc, #252]	; (800e1f0 <xTaskIncrementTick+0x160>)
 800e0f4:	6013      	str	r3, [r2, #0]
 800e0f6:	f000 fab7 	bl	800e668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0fa:	4b3e      	ldr	r3, [pc, #248]	; (800e1f4 <xTaskIncrementTick+0x164>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	693a      	ldr	r2, [r7, #16]
 800e100:	429a      	cmp	r2, r3
 800e102:	d34d      	bcc.n	800e1a0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e104:	4b38      	ldr	r3, [pc, #224]	; (800e1e8 <xTaskIncrementTick+0x158>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d101      	bne.n	800e112 <xTaskIncrementTick+0x82>
 800e10e:	2301      	movs	r3, #1
 800e110:	e000      	b.n	800e114 <xTaskIncrementTick+0x84>
 800e112:	2300      	movs	r3, #0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d004      	beq.n	800e122 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e118:	4b36      	ldr	r3, [pc, #216]	; (800e1f4 <xTaskIncrementTick+0x164>)
 800e11a:	f04f 32ff 	mov.w	r2, #4294967295
 800e11e:	601a      	str	r2, [r3, #0]
					break;
 800e120:	e03e      	b.n	800e1a0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e122:	4b31      	ldr	r3, [pc, #196]	; (800e1e8 <xTaskIncrementTick+0x158>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e132:	693a      	ldr	r2, [r7, #16]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	429a      	cmp	r2, r3
 800e138:	d203      	bcs.n	800e142 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e13a:	4a2e      	ldr	r2, [pc, #184]	; (800e1f4 <xTaskIncrementTick+0x164>)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6013      	str	r3, [r2, #0]
						break;
 800e140:	e02e      	b.n	800e1a0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	3304      	adds	r3, #4
 800e146:	4618      	mov	r0, r3
 800e148:	f7fe fde6 	bl	800cd18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e150:	2b00      	cmp	r3, #0
 800e152:	d004      	beq.n	800e15e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	3318      	adds	r3, #24
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fe fddd 	bl	800cd18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e162:	2201      	movs	r2, #1
 800e164:	409a      	lsls	r2, r3
 800e166:	4b24      	ldr	r3, [pc, #144]	; (800e1f8 <xTaskIncrementTick+0x168>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4313      	orrs	r3, r2
 800e16c:	4a22      	ldr	r2, [pc, #136]	; (800e1f8 <xTaskIncrementTick+0x168>)
 800e16e:	6013      	str	r3, [r2, #0]
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e174:	4613      	mov	r3, r2
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	4a1f      	ldr	r2, [pc, #124]	; (800e1fc <xTaskIncrementTick+0x16c>)
 800e17e:	441a      	add	r2, r3
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	3304      	adds	r3, #4
 800e184:	4619      	mov	r1, r3
 800e186:	4610      	mov	r0, r2
 800e188:	f7fe fd69 	bl	800cc5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e190:	4b1b      	ldr	r3, [pc, #108]	; (800e200 <xTaskIncrementTick+0x170>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e196:	429a      	cmp	r2, r3
 800e198:	d3b4      	bcc.n	800e104 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e19a:	2301      	movs	r3, #1
 800e19c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e19e:	e7b1      	b.n	800e104 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e1a0:	4b17      	ldr	r3, [pc, #92]	; (800e200 <xTaskIncrementTick+0x170>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a6:	4915      	ldr	r1, [pc, #84]	; (800e1fc <xTaskIncrementTick+0x16c>)
 800e1a8:	4613      	mov	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	4413      	add	r3, r2
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	440b      	add	r3, r1
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d907      	bls.n	800e1c8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	617b      	str	r3, [r7, #20]
 800e1bc:	e004      	b.n	800e1c8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e1be:	4b11      	ldr	r3, [pc, #68]	; (800e204 <xTaskIncrementTick+0x174>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	4a0f      	ldr	r2, [pc, #60]	; (800e204 <xTaskIncrementTick+0x174>)
 800e1c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e1c8:	4b0f      	ldr	r3, [pc, #60]	; (800e208 <xTaskIncrementTick+0x178>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e1d4:	697b      	ldr	r3, [r7, #20]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	200025f0 	.word	0x200025f0
 800e1e4:	200025cc 	.word	0x200025cc
 800e1e8:	20002580 	.word	0x20002580
 800e1ec:	20002584 	.word	0x20002584
 800e1f0:	200025e0 	.word	0x200025e0
 800e1f4:	200025e8 	.word	0x200025e8
 800e1f8:	200025d0 	.word	0x200025d0
 800e1fc:	200024cc 	.word	0x200024cc
 800e200:	200024c8 	.word	0x200024c8
 800e204:	200025d8 	.word	0x200025d8
 800e208:	200025dc 	.word	0x200025dc

0800e20c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e212:	4b3c      	ldr	r3, [pc, #240]	; (800e304 <vTaskSwitchContext+0xf8>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d003      	beq.n	800e222 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e21a:	4b3b      	ldr	r3, [pc, #236]	; (800e308 <vTaskSwitchContext+0xfc>)
 800e21c:	2201      	movs	r2, #1
 800e21e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e220:	e06b      	b.n	800e2fa <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800e222:	4b39      	ldr	r3, [pc, #228]	; (800e308 <vTaskSwitchContext+0xfc>)
 800e224:	2200      	movs	r2, #0
 800e226:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800e228:	4b38      	ldr	r3, [pc, #224]	; (800e30c <vTaskSwitchContext+0x100>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22e:	61fb      	str	r3, [r7, #28]
 800e230:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800e234:	61bb      	str	r3, [r7, #24]
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	69ba      	ldr	r2, [r7, #24]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d111      	bne.n	800e264 <vTaskSwitchContext+0x58>
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	3304      	adds	r3, #4
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	69ba      	ldr	r2, [r7, #24]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d10b      	bne.n	800e264 <vTaskSwitchContext+0x58>
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	3308      	adds	r3, #8
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	69ba      	ldr	r2, [r7, #24]
 800e254:	429a      	cmp	r2, r3
 800e256:	d105      	bne.n	800e264 <vTaskSwitchContext+0x58>
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	330c      	adds	r3, #12
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	69ba      	ldr	r2, [r7, #24]
 800e260:	429a      	cmp	r2, r3
 800e262:	d008      	beq.n	800e276 <vTaskSwitchContext+0x6a>
 800e264:	4b29      	ldr	r3, [pc, #164]	; (800e30c <vTaskSwitchContext+0x100>)
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	4b28      	ldr	r3, [pc, #160]	; (800e30c <vTaskSwitchContext+0x100>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	3334      	adds	r3, #52	; 0x34
 800e26e:	4619      	mov	r1, r3
 800e270:	4610      	mov	r0, r2
 800e272:	f7f3 fe15 	bl	8001ea0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e276:	4b26      	ldr	r3, [pc, #152]	; (800e310 <vTaskSwitchContext+0x104>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	fab3 f383 	clz	r3, r3
 800e282:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e284:	7afb      	ldrb	r3, [r7, #11]
 800e286:	f1c3 031f 	rsb	r3, r3, #31
 800e28a:	617b      	str	r3, [r7, #20]
 800e28c:	4921      	ldr	r1, [pc, #132]	; (800e314 <vTaskSwitchContext+0x108>)
 800e28e:	697a      	ldr	r2, [r7, #20]
 800e290:	4613      	mov	r3, r2
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	4413      	add	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	440b      	add	r3, r1
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10a      	bne.n	800e2b6 <vTaskSwitchContext+0xaa>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	607b      	str	r3, [r7, #4]
}
 800e2b2:	bf00      	nop
 800e2b4:	e7fe      	b.n	800e2b4 <vTaskSwitchContext+0xa8>
 800e2b6:	697a      	ldr	r2, [r7, #20]
 800e2b8:	4613      	mov	r3, r2
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4a14      	ldr	r2, [pc, #80]	; (800e314 <vTaskSwitchContext+0x108>)
 800e2c2:	4413      	add	r3, r2
 800e2c4:	613b      	str	r3, [r7, #16]
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	685a      	ldr	r2, [r3, #4]
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	605a      	str	r2, [r3, #4]
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	3308      	adds	r3, #8
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d104      	bne.n	800e2e6 <vTaskSwitchContext+0xda>
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	685a      	ldr	r2, [r3, #4]
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	605a      	str	r2, [r3, #4]
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	4a07      	ldr	r2, [pc, #28]	; (800e30c <vTaskSwitchContext+0x100>)
 800e2ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2f0:	4b06      	ldr	r3, [pc, #24]	; (800e30c <vTaskSwitchContext+0x100>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	334c      	adds	r3, #76	; 0x4c
 800e2f6:	4a08      	ldr	r2, [pc, #32]	; (800e318 <vTaskSwitchContext+0x10c>)
 800e2f8:	6013      	str	r3, [r2, #0]
}
 800e2fa:	bf00      	nop
 800e2fc:	3720      	adds	r7, #32
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	200025f0 	.word	0x200025f0
 800e308:	200025dc 	.word	0x200025dc
 800e30c:	200024c8 	.word	0x200024c8
 800e310:	200025d0 	.word	0x200025d0
 800e314:	200024cc 	.word	0x200024cc
 800e318:	200000c4 	.word	0x200000c4

0800e31c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d10a      	bne.n	800e342 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e330:	f383 8811 	msr	BASEPRI, r3
 800e334:	f3bf 8f6f 	isb	sy
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	60fb      	str	r3, [r7, #12]
}
 800e33e:	bf00      	nop
 800e340:	e7fe      	b.n	800e340 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e342:	4b07      	ldr	r3, [pc, #28]	; (800e360 <vTaskPlaceOnEventList+0x44>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	3318      	adds	r3, #24
 800e348:	4619      	mov	r1, r3
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f7fe fcab 	bl	800cca6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e350:	2101      	movs	r1, #1
 800e352:	6838      	ldr	r0, [r7, #0]
 800e354:	f000 fb8c 	bl	800ea70 <prvAddCurrentTaskToDelayedList>
}
 800e358:	bf00      	nop
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	200024c8 	.word	0x200024c8

0800e364 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b086      	sub	sp, #24
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	68db      	ldr	r3, [r3, #12]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d10a      	bne.n	800e390 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37e:	f383 8811 	msr	BASEPRI, r3
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	f3bf 8f4f 	dsb	sy
 800e38a:	60fb      	str	r3, [r7, #12]
}
 800e38c:	bf00      	nop
 800e38e:	e7fe      	b.n	800e38e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	3318      	adds	r3, #24
 800e394:	4618      	mov	r0, r3
 800e396:	f7fe fcbf 	bl	800cd18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e39a:	4b1d      	ldr	r3, [pc, #116]	; (800e410 <xTaskRemoveFromEventList+0xac>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d11c      	bne.n	800e3dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	3304      	adds	r3, #4
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fe fcb6 	bl	800cd18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	409a      	lsls	r2, r3
 800e3b4:	4b17      	ldr	r3, [pc, #92]	; (800e414 <xTaskRemoveFromEventList+0xb0>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	4a16      	ldr	r2, [pc, #88]	; (800e414 <xTaskRemoveFromEventList+0xb0>)
 800e3bc:	6013      	str	r3, [r2, #0]
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4413      	add	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4a13      	ldr	r2, [pc, #76]	; (800e418 <xTaskRemoveFromEventList+0xb4>)
 800e3cc:	441a      	add	r2, r3
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	4610      	mov	r0, r2
 800e3d6:	f7fe fc42 	bl	800cc5e <vListInsertEnd>
 800e3da:	e005      	b.n	800e3e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	3318      	adds	r3, #24
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	480e      	ldr	r0, [pc, #56]	; (800e41c <xTaskRemoveFromEventList+0xb8>)
 800e3e4:	f7fe fc3b 	bl	800cc5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ec:	4b0c      	ldr	r3, [pc, #48]	; (800e420 <xTaskRemoveFromEventList+0xbc>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d905      	bls.n	800e402 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e3fa:	4b0a      	ldr	r3, [pc, #40]	; (800e424 <xTaskRemoveFromEventList+0xc0>)
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	601a      	str	r2, [r3, #0]
 800e400:	e001      	b.n	800e406 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e402:	2300      	movs	r3, #0
 800e404:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800e406:	697b      	ldr	r3, [r7, #20]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3718      	adds	r7, #24
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	200025f0 	.word	0x200025f0
 800e414:	200025d0 	.word	0x200025d0
 800e418:	200024cc 	.word	0x200024cc
 800e41c:	20002588 	.word	0x20002588
 800e420:	200024c8 	.word	0x200024c8
 800e424:	200025dc 	.word	0x200025dc

0800e428 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e430:	4b06      	ldr	r3, [pc, #24]	; (800e44c <vTaskInternalSetTimeOutState+0x24>)
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e438:	4b05      	ldr	r3, [pc, #20]	; (800e450 <vTaskInternalSetTimeOutState+0x28>)
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	605a      	str	r2, [r3, #4]
}
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr
 800e44c:	200025e0 	.word	0x200025e0
 800e450:	200025cc 	.word	0x200025cc

0800e454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10a      	bne.n	800e47a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	613b      	str	r3, [r7, #16]
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10a      	bne.n	800e496 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e484:	f383 8811 	msr	BASEPRI, r3
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	f3bf 8f4f 	dsb	sy
 800e490:	60fb      	str	r3, [r7, #12]
}
 800e492:	bf00      	nop
 800e494:	e7fe      	b.n	800e494 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e496:	f000 fc7d 	bl	800ed94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e49a:	4b1d      	ldr	r3, [pc, #116]	; (800e510 <xTaskCheckForTimeOut+0xbc>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	69ba      	ldr	r2, [r7, #24]
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b2:	d102      	bne.n	800e4ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	61fb      	str	r3, [r7, #28]
 800e4b8:	e023      	b.n	800e502 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	4b15      	ldr	r3, [pc, #84]	; (800e514 <xTaskCheckForTimeOut+0xc0>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d007      	beq.n	800e4d6 <xTaskCheckForTimeOut+0x82>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	69ba      	ldr	r2, [r7, #24]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d302      	bcc.n	800e4d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	61fb      	str	r3, [r7, #28]
 800e4d4:	e015      	b.n	800e502 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d20b      	bcs.n	800e4f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	1ad2      	subs	r2, r2, r3
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f7ff ff9b 	bl	800e428 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	61fb      	str	r3, [r7, #28]
 800e4f6:	e004      	b.n	800e502 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e4fe:	2301      	movs	r3, #1
 800e500:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e502:	f000 fc77 	bl	800edf4 <vPortExitCritical>

	return xReturn;
 800e506:	69fb      	ldr	r3, [r7, #28]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3720      	adds	r7, #32
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	200025cc 	.word	0x200025cc
 800e514:	200025e0 	.word	0x200025e0

0800e518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e518:	b480      	push	{r7}
 800e51a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e51c:	4b03      	ldr	r3, [pc, #12]	; (800e52c <vTaskMissedYield+0x14>)
 800e51e:	2201      	movs	r2, #1
 800e520:	601a      	str	r2, [r3, #0]
}
 800e522:	bf00      	nop
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	200025dc 	.word	0x200025dc

0800e530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e538:	f000 f852 	bl	800e5e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e53c:	4b06      	ldr	r3, [pc, #24]	; (800e558 <prvIdleTask+0x28>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b01      	cmp	r3, #1
 800e542:	d9f9      	bls.n	800e538 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e544:	4b05      	ldr	r3, [pc, #20]	; (800e55c <prvIdleTask+0x2c>)
 800e546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e554:	e7f0      	b.n	800e538 <prvIdleTask+0x8>
 800e556:	bf00      	nop
 800e558:	200024cc 	.word	0x200024cc
 800e55c:	e000ed04 	.word	0xe000ed04

0800e560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e566:	2300      	movs	r3, #0
 800e568:	607b      	str	r3, [r7, #4]
 800e56a:	e00c      	b.n	800e586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	4613      	mov	r3, r2
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4413      	add	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4a12      	ldr	r2, [pc, #72]	; (800e5c0 <prvInitialiseTaskLists+0x60>)
 800e578:	4413      	add	r3, r2
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fe fb42 	bl	800cc04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	3301      	adds	r3, #1
 800e584:	607b      	str	r3, [r7, #4]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2b06      	cmp	r3, #6
 800e58a:	d9ef      	bls.n	800e56c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e58c:	480d      	ldr	r0, [pc, #52]	; (800e5c4 <prvInitialiseTaskLists+0x64>)
 800e58e:	f7fe fb39 	bl	800cc04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e592:	480d      	ldr	r0, [pc, #52]	; (800e5c8 <prvInitialiseTaskLists+0x68>)
 800e594:	f7fe fb36 	bl	800cc04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e598:	480c      	ldr	r0, [pc, #48]	; (800e5cc <prvInitialiseTaskLists+0x6c>)
 800e59a:	f7fe fb33 	bl	800cc04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e59e:	480c      	ldr	r0, [pc, #48]	; (800e5d0 <prvInitialiseTaskLists+0x70>)
 800e5a0:	f7fe fb30 	bl	800cc04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5a4:	480b      	ldr	r0, [pc, #44]	; (800e5d4 <prvInitialiseTaskLists+0x74>)
 800e5a6:	f7fe fb2d 	bl	800cc04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e5aa:	4b0b      	ldr	r3, [pc, #44]	; (800e5d8 <prvInitialiseTaskLists+0x78>)
 800e5ac:	4a05      	ldr	r2, [pc, #20]	; (800e5c4 <prvInitialiseTaskLists+0x64>)
 800e5ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e5b0:	4b0a      	ldr	r3, [pc, #40]	; (800e5dc <prvInitialiseTaskLists+0x7c>)
 800e5b2:	4a05      	ldr	r2, [pc, #20]	; (800e5c8 <prvInitialiseTaskLists+0x68>)
 800e5b4:	601a      	str	r2, [r3, #0]
}
 800e5b6:	bf00      	nop
 800e5b8:	3708      	adds	r7, #8
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	200024cc 	.word	0x200024cc
 800e5c4:	20002558 	.word	0x20002558
 800e5c8:	2000256c 	.word	0x2000256c
 800e5cc:	20002588 	.word	0x20002588
 800e5d0:	2000259c 	.word	0x2000259c
 800e5d4:	200025b4 	.word	0x200025b4
 800e5d8:	20002580 	.word	0x20002580
 800e5dc:	20002584 	.word	0x20002584

0800e5e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e5e6:	e019      	b.n	800e61c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e5e8:	f000 fbd4 	bl	800ed94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800e5ec:	4b10      	ldr	r3, [pc, #64]	; (800e630 <prvCheckTasksWaitingTermination+0x50>)
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	3304      	adds	r3, #4
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fe fb8d 	bl	800cd18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e5fe:	4b0d      	ldr	r3, [pc, #52]	; (800e634 <prvCheckTasksWaitingTermination+0x54>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3b01      	subs	r3, #1
 800e604:	4a0b      	ldr	r2, [pc, #44]	; (800e634 <prvCheckTasksWaitingTermination+0x54>)
 800e606:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e608:	4b0b      	ldr	r3, [pc, #44]	; (800e638 <prvCheckTasksWaitingTermination+0x58>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3b01      	subs	r3, #1
 800e60e:	4a0a      	ldr	r2, [pc, #40]	; (800e638 <prvCheckTasksWaitingTermination+0x58>)
 800e610:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e612:	f000 fbef 	bl	800edf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 f810 	bl	800e63c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e61c:	4b06      	ldr	r3, [pc, #24]	; (800e638 <prvCheckTasksWaitingTermination+0x58>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1e1      	bne.n	800e5e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e624:	bf00      	nop
 800e626:	bf00      	nop
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	2000259c 	.word	0x2000259c
 800e634:	200025c8 	.word	0x200025c8
 800e638:	200025b0 	.word	0x200025b0

0800e63c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	334c      	adds	r3, #76	; 0x4c
 800e648:	4618      	mov	r0, r3
 800e64a:	f000 ffe7 	bl	800f61c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e652:	4618      	mov	r0, r3
 800e654:	f000 fd84 	bl	800f160 <vPortFree>
			vPortFree( pxTCB );
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 fd81 	bl	800f160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e65e:	bf00      	nop
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
	...

0800e668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e66e:	4b0f      	ldr	r3, [pc, #60]	; (800e6ac <prvResetNextTaskUnblockTime+0x44>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d101      	bne.n	800e67c <prvResetNextTaskUnblockTime+0x14>
 800e678:	2301      	movs	r3, #1
 800e67a:	e000      	b.n	800e67e <prvResetNextTaskUnblockTime+0x16>
 800e67c:	2300      	movs	r3, #0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d004      	beq.n	800e68c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e682:	4b0b      	ldr	r3, [pc, #44]	; (800e6b0 <prvResetNextTaskUnblockTime+0x48>)
 800e684:	f04f 32ff 	mov.w	r2, #4294967295
 800e688:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e68a:	e008      	b.n	800e69e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e68c:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <prvResetNextTaskUnblockTime+0x44>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	4a05      	ldr	r2, [pc, #20]	; (800e6b0 <prvResetNextTaskUnblockTime+0x48>)
 800e69c:	6013      	str	r3, [r2, #0]
}
 800e69e:	bf00      	nop
 800e6a0:	370c      	adds	r7, #12
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop
 800e6ac:	20002580 	.word	0x20002580
 800e6b0:	200025e8 	.word	0x200025e8

0800e6b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e6ba:	4b0b      	ldr	r3, [pc, #44]	; (800e6e8 <xTaskGetSchedulerState+0x34>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d102      	bne.n	800e6c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	607b      	str	r3, [r7, #4]
 800e6c6:	e008      	b.n	800e6da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c8:	4b08      	ldr	r3, [pc, #32]	; (800e6ec <xTaskGetSchedulerState+0x38>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d102      	bne.n	800e6d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e6d0:	2302      	movs	r3, #2
 800e6d2:	607b      	str	r3, [r7, #4]
 800e6d4:	e001      	b.n	800e6da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e6da:	687b      	ldr	r3, [r7, #4]
	}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	200025d4 	.word	0x200025d4
 800e6ec:	200025f0 	.word	0x200025f0

0800e6f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d06e      	beq.n	800e7e4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e70a:	4b39      	ldr	r3, [pc, #228]	; (800e7f0 <xTaskPriorityInherit+0x100>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e710:	429a      	cmp	r2, r3
 800e712:	d25e      	bcs.n	800e7d2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	699b      	ldr	r3, [r3, #24]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	db06      	blt.n	800e72a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e71c:	4b34      	ldr	r3, [pc, #208]	; (800e7f0 <xTaskPriorityInherit+0x100>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e722:	f1c3 0207 	rsb	r2, r3, #7
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6959      	ldr	r1, [r3, #20]
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e732:	4613      	mov	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	4a2e      	ldr	r2, [pc, #184]	; (800e7f4 <xTaskPriorityInherit+0x104>)
 800e73c:	4413      	add	r3, r2
 800e73e:	4299      	cmp	r1, r3
 800e740:	d101      	bne.n	800e746 <xTaskPriorityInherit+0x56>
 800e742:	2301      	movs	r3, #1
 800e744:	e000      	b.n	800e748 <xTaskPriorityInherit+0x58>
 800e746:	2300      	movs	r3, #0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d03a      	beq.n	800e7c2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	3304      	adds	r3, #4
 800e750:	4618      	mov	r0, r3
 800e752:	f7fe fae1 	bl	800cd18 <uxListRemove>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d115      	bne.n	800e788 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e760:	4924      	ldr	r1, [pc, #144]	; (800e7f4 <xTaskPriorityInherit+0x104>)
 800e762:	4613      	mov	r3, r2
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	440b      	add	r3, r1
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d10a      	bne.n	800e788 <xTaskPriorityInherit+0x98>
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e776:	2201      	movs	r2, #1
 800e778:	fa02 f303 	lsl.w	r3, r2, r3
 800e77c:	43da      	mvns	r2, r3
 800e77e:	4b1e      	ldr	r3, [pc, #120]	; (800e7f8 <xTaskPriorityInherit+0x108>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	4013      	ands	r3, r2
 800e784:	4a1c      	ldr	r2, [pc, #112]	; (800e7f8 <xTaskPriorityInherit+0x108>)
 800e786:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e788:	4b19      	ldr	r3, [pc, #100]	; (800e7f0 <xTaskPriorityInherit+0x100>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e796:	2201      	movs	r2, #1
 800e798:	409a      	lsls	r2, r3
 800e79a:	4b17      	ldr	r3, [pc, #92]	; (800e7f8 <xTaskPriorityInherit+0x108>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	4a15      	ldr	r2, [pc, #84]	; (800e7f8 <xTaskPriorityInherit+0x108>)
 800e7a2:	6013      	str	r3, [r2, #0]
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	009b      	lsls	r3, r3, #2
 800e7ac:	4413      	add	r3, r2
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	4a10      	ldr	r2, [pc, #64]	; (800e7f4 <xTaskPriorityInherit+0x104>)
 800e7b2:	441a      	add	r2, r3
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	f7fe fa4f 	bl	800cc5e <vListInsertEnd>
 800e7c0:	e004      	b.n	800e7cc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e7c2:	4b0b      	ldr	r3, [pc, #44]	; (800e7f0 <xTaskPriorityInherit+0x100>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	60fb      	str	r3, [r7, #12]
 800e7d0:	e008      	b.n	800e7e4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7d6:	4b06      	ldr	r3, [pc, #24]	; (800e7f0 <xTaskPriorityInherit+0x100>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d201      	bcs.n	800e7e4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
	}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	200024c8 	.word	0x200024c8
 800e7f4:	200024cc 	.word	0x200024cc
 800e7f8:	200025d0 	.word	0x200025d0

0800e7fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b086      	sub	sp, #24
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e808:	2300      	movs	r3, #0
 800e80a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d06e      	beq.n	800e8f0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e812:	4b3a      	ldr	r3, [pc, #232]	; (800e8fc <xTaskPriorityDisinherit+0x100>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d00a      	beq.n	800e832 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e820:	f383 8811 	msr	BASEPRI, r3
 800e824:	f3bf 8f6f 	isb	sy
 800e828:	f3bf 8f4f 	dsb	sy
 800e82c:	60fb      	str	r3, [r7, #12]
}
 800e82e:	bf00      	nop
 800e830:	e7fe      	b.n	800e830 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10a      	bne.n	800e850 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83e:	f383 8811 	msr	BASEPRI, r3
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	60bb      	str	r3, [r7, #8]
}
 800e84c:	bf00      	nop
 800e84e:	e7fe      	b.n	800e84e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e854:	1e5a      	subs	r2, r3, #1
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e862:	429a      	cmp	r2, r3
 800e864:	d044      	beq.n	800e8f0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d140      	bne.n	800e8f0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	3304      	adds	r3, #4
 800e872:	4618      	mov	r0, r3
 800e874:	f7fe fa50 	bl	800cd18 <uxListRemove>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d115      	bne.n	800e8aa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e882:	491f      	ldr	r1, [pc, #124]	; (800e900 <xTaskPriorityDisinherit+0x104>)
 800e884:	4613      	mov	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4413      	add	r3, r2
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	440b      	add	r3, r1
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10a      	bne.n	800e8aa <xTaskPriorityDisinherit+0xae>
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e898:	2201      	movs	r2, #1
 800e89a:	fa02 f303 	lsl.w	r3, r2, r3
 800e89e:	43da      	mvns	r2, r3
 800e8a0:	4b18      	ldr	r3, [pc, #96]	; (800e904 <xTaskPriorityDisinherit+0x108>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4013      	ands	r3, r2
 800e8a6:	4a17      	ldr	r2, [pc, #92]	; (800e904 <xTaskPriorityDisinherit+0x108>)
 800e8a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8b6:	f1c3 0207 	rsb	r2, r3, #7
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	409a      	lsls	r2, r3
 800e8c6:	4b0f      	ldr	r3, [pc, #60]	; (800e904 <xTaskPriorityDisinherit+0x108>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	4a0d      	ldr	r2, [pc, #52]	; (800e904 <xTaskPriorityDisinherit+0x108>)
 800e8ce:	6013      	str	r3, [r2, #0]
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	4a08      	ldr	r2, [pc, #32]	; (800e900 <xTaskPriorityDisinherit+0x104>)
 800e8de:	441a      	add	r2, r3
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	f7fe f9b9 	bl	800cc5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e8f0:	697b      	ldr	r3, [r7, #20]
	}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3718      	adds	r7, #24
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	200024c8 	.word	0x200024c8
 800e900:	200024cc 	.word	0x200024cc
 800e904:	200025d0 	.word	0x200025d0

0800e908 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b088      	sub	sp, #32
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e916:	2301      	movs	r3, #1
 800e918:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 8088 	beq.w	800ea32 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e926:	2b00      	cmp	r3, #0
 800e928:	d10a      	bne.n	800e940 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	60fb      	str	r3, [r7, #12]
}
 800e93c:	bf00      	nop
 800e93e:	e7fe      	b.n	800e93e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d902      	bls.n	800e950 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	61fb      	str	r3, [r7, #28]
 800e94e:	e002      	b.n	800e956 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e954:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e95a:	69fa      	ldr	r2, [r7, #28]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d068      	beq.n	800ea32 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	429a      	cmp	r2, r3
 800e968:	d163      	bne.n	800ea32 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e96a:	4b34      	ldr	r3, [pc, #208]	; (800ea3c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	429a      	cmp	r2, r3
 800e972:	d10a      	bne.n	800e98a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800e974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	60bb      	str	r3, [r7, #8]
}
 800e986:	bf00      	nop
 800e988:	e7fe      	b.n	800e988 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e98e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	69fa      	ldr	r2, [r7, #28]
 800e994:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	699b      	ldr	r3, [r3, #24]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	db04      	blt.n	800e9a8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	f1c3 0207 	rsb	r2, r3, #7
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	6959      	ldr	r1, [r3, #20]
 800e9ac:	693a      	ldr	r2, [r7, #16]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	009b      	lsls	r3, r3, #2
 800e9b2:	4413      	add	r3, r2
 800e9b4:	009b      	lsls	r3, r3, #2
 800e9b6:	4a22      	ldr	r2, [pc, #136]	; (800ea40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e9b8:	4413      	add	r3, r2
 800e9ba:	4299      	cmp	r1, r3
 800e9bc:	d101      	bne.n	800e9c2 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800e9be:	2301      	movs	r3, #1
 800e9c0:	e000      	b.n	800e9c4 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d034      	beq.n	800ea32 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7fe f9a3 	bl	800cd18 <uxListRemove>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d115      	bne.n	800ea04 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9dc:	4918      	ldr	r1, [pc, #96]	; (800ea40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e9de:	4613      	mov	r3, r2
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	4413      	add	r3, r2
 800e9e4:	009b      	lsls	r3, r3, #2
 800e9e6:	440b      	add	r3, r1
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d10a      	bne.n	800ea04 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e9f8:	43da      	mvns	r2, r3
 800e9fa:	4b12      	ldr	r3, [pc, #72]	; (800ea44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4013      	ands	r3, r2
 800ea00:	4a10      	ldr	r2, [pc, #64]	; (800ea44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ea02:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea08:	2201      	movs	r2, #1
 800ea0a:	409a      	lsls	r2, r3
 800ea0c:	4b0d      	ldr	r3, [pc, #52]	; (800ea44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4313      	orrs	r3, r2
 800ea12:	4a0c      	ldr	r2, [pc, #48]	; (800ea44 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	4413      	add	r3, r2
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	4a07      	ldr	r2, [pc, #28]	; (800ea40 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ea24:	441a      	add	r2, r3
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	3304      	adds	r3, #4
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	f7fe f916 	bl	800cc5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ea32:	bf00      	nop
 800ea34:	3720      	adds	r7, #32
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	200024c8 	.word	0x200024c8
 800ea40:	200024cc 	.word	0x200024cc
 800ea44:	200025d0 	.word	0x200025d0

0800ea48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ea48:	b480      	push	{r7}
 800ea4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ea4c:	4b07      	ldr	r3, [pc, #28]	; (800ea6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d004      	beq.n	800ea5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ea54:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea5a:	3201      	adds	r2, #1
 800ea5c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ea5e:	4b03      	ldr	r3, [pc, #12]	; (800ea6c <pvTaskIncrementMutexHeldCount+0x24>)
 800ea60:	681b      	ldr	r3, [r3, #0]
	}
 800ea62:	4618      	mov	r0, r3
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	200024c8 	.word	0x200024c8

0800ea70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ea7a:	4b29      	ldr	r3, [pc, #164]	; (800eb20 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea80:	4b28      	ldr	r3, [pc, #160]	; (800eb24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	3304      	adds	r3, #4
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fe f946 	bl	800cd18 <uxListRemove>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10b      	bne.n	800eaaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ea92:	4b24      	ldr	r3, [pc, #144]	; (800eb24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea98:	2201      	movs	r2, #1
 800ea9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea9e:	43da      	mvns	r2, r3
 800eaa0:	4b21      	ldr	r3, [pc, #132]	; (800eb28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	4a20      	ldr	r2, [pc, #128]	; (800eb28 <prvAddCurrentTaskToDelayedList+0xb8>)
 800eaa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab0:	d10a      	bne.n	800eac8 <prvAddCurrentTaskToDelayedList+0x58>
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d007      	beq.n	800eac8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eab8:	4b1a      	ldr	r3, [pc, #104]	; (800eb24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	3304      	adds	r3, #4
 800eabe:	4619      	mov	r1, r3
 800eac0:	481a      	ldr	r0, [pc, #104]	; (800eb2c <prvAddCurrentTaskToDelayedList+0xbc>)
 800eac2:	f7fe f8cc 	bl	800cc5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eac6:	e026      	b.n	800eb16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4413      	add	r3, r2
 800eace:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ead0:	4b14      	ldr	r3, [pc, #80]	; (800eb24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d209      	bcs.n	800eaf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eae0:	4b13      	ldr	r3, [pc, #76]	; (800eb30 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	4b0f      	ldr	r3, [pc, #60]	; (800eb24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	3304      	adds	r3, #4
 800eaea:	4619      	mov	r1, r3
 800eaec:	4610      	mov	r0, r2
 800eaee:	f7fe f8da 	bl	800cca6 <vListInsert>
}
 800eaf2:	e010      	b.n	800eb16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eaf4:	4b0f      	ldr	r3, [pc, #60]	; (800eb34 <prvAddCurrentTaskToDelayedList+0xc4>)
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	4b0a      	ldr	r3, [pc, #40]	; (800eb24 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	3304      	adds	r3, #4
 800eafe:	4619      	mov	r1, r3
 800eb00:	4610      	mov	r0, r2
 800eb02:	f7fe f8d0 	bl	800cca6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eb06:	4b0c      	ldr	r3, [pc, #48]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	68ba      	ldr	r2, [r7, #8]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d202      	bcs.n	800eb16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800eb10:	4a09      	ldr	r2, [pc, #36]	; (800eb38 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	6013      	str	r3, [r2, #0]
}
 800eb16:	bf00      	nop
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	200025cc 	.word	0x200025cc
 800eb24:	200024c8 	.word	0x200024c8
 800eb28:	200025d0 	.word	0x200025d0
 800eb2c:	200025b4 	.word	0x200025b4
 800eb30:	20002584 	.word	0x20002584
 800eb34:	20002580 	.word	0x20002580
 800eb38:	200025e8 	.word	0x200025e8

0800eb3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	3b04      	subs	r3, #4
 800eb4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eb54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	3b04      	subs	r3, #4
 800eb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	f023 0201 	bic.w	r2, r3, #1
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	3b04      	subs	r3, #4
 800eb6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eb6c:	4a0c      	ldr	r2, [pc, #48]	; (800eba0 <pxPortInitialiseStack+0x64>)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	3b14      	subs	r3, #20
 800eb76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eb78:	687a      	ldr	r2, [r7, #4]
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	3b04      	subs	r3, #4
 800eb82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f06f 0202 	mvn.w	r2, #2
 800eb8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	3b20      	subs	r3, #32
 800eb90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eb92:	68fb      	ldr	r3, [r7, #12]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3714      	adds	r7, #20
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr
 800eba0:	0800eba5 	.word	0x0800eba5

0800eba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ebae:	4b12      	ldr	r3, [pc, #72]	; (800ebf8 <prvTaskExitError+0x54>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb6:	d00a      	beq.n	800ebce <prvTaskExitError+0x2a>
	__asm volatile
 800ebb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	60fb      	str	r3, [r7, #12]
}
 800ebca:	bf00      	nop
 800ebcc:	e7fe      	b.n	800ebcc <prvTaskExitError+0x28>
	__asm volatile
 800ebce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd2:	f383 8811 	msr	BASEPRI, r3
 800ebd6:	f3bf 8f6f 	isb	sy
 800ebda:	f3bf 8f4f 	dsb	sy
 800ebde:	60bb      	str	r3, [r7, #8]
}
 800ebe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ebe2:	bf00      	nop
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d0fc      	beq.n	800ebe4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ebea:	bf00      	nop
 800ebec:	bf00      	nop
 800ebee:	3714      	adds	r7, #20
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr
 800ebf8:	200000c0 	.word	0x200000c0
 800ebfc:	00000000 	.word	0x00000000

0800ec00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <pxCurrentTCBConst2>)
 800ec02:	6819      	ldr	r1, [r3, #0]
 800ec04:	6808      	ldr	r0, [r1, #0]
 800ec06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0a:	f380 8809 	msr	PSP, r0
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f04f 0000 	mov.w	r0, #0
 800ec16:	f380 8811 	msr	BASEPRI, r0
 800ec1a:	4770      	bx	lr
 800ec1c:	f3af 8000 	nop.w

0800ec20 <pxCurrentTCBConst2>:
 800ec20:	200024c8 	.word	0x200024c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ec24:	bf00      	nop
 800ec26:	bf00      	nop

0800ec28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ec28:	4808      	ldr	r0, [pc, #32]	; (800ec4c <prvPortStartFirstTask+0x24>)
 800ec2a:	6800      	ldr	r0, [r0, #0]
 800ec2c:	6800      	ldr	r0, [r0, #0]
 800ec2e:	f380 8808 	msr	MSP, r0
 800ec32:	f04f 0000 	mov.w	r0, #0
 800ec36:	f380 8814 	msr	CONTROL, r0
 800ec3a:	b662      	cpsie	i
 800ec3c:	b661      	cpsie	f
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	df00      	svc	0
 800ec48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ec4a:	bf00      	nop
 800ec4c:	e000ed08 	.word	0xe000ed08

0800ec50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ec56:	4b46      	ldr	r3, [pc, #280]	; (800ed70 <xPortStartScheduler+0x120>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4a46      	ldr	r2, [pc, #280]	; (800ed74 <xPortStartScheduler+0x124>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d10a      	bne.n	800ec76 <xPortStartScheduler+0x26>
	__asm volatile
 800ec60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	613b      	str	r3, [r7, #16]
}
 800ec72:	bf00      	nop
 800ec74:	e7fe      	b.n	800ec74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ec76:	4b3e      	ldr	r3, [pc, #248]	; (800ed70 <xPortStartScheduler+0x120>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a3f      	ldr	r2, [pc, #252]	; (800ed78 <xPortStartScheduler+0x128>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d10a      	bne.n	800ec96 <xPortStartScheduler+0x46>
	__asm volatile
 800ec80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec84:	f383 8811 	msr	BASEPRI, r3
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	f3bf 8f4f 	dsb	sy
 800ec90:	60fb      	str	r3, [r7, #12]
}
 800ec92:	bf00      	nop
 800ec94:	e7fe      	b.n	800ec94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ec96:	4b39      	ldr	r3, [pc, #228]	; (800ed7c <xPortStartScheduler+0x12c>)
 800ec98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	b2db      	uxtb	r3, r3
 800eca0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	22ff      	movs	r2, #255	; 0xff
 800eca6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ecb0:	78fb      	ldrb	r3, [r7, #3]
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ecb8:	b2da      	uxtb	r2, r3
 800ecba:	4b31      	ldr	r3, [pc, #196]	; (800ed80 <xPortStartScheduler+0x130>)
 800ecbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ecbe:	4b31      	ldr	r3, [pc, #196]	; (800ed84 <xPortStartScheduler+0x134>)
 800ecc0:	2207      	movs	r2, #7
 800ecc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecc4:	e009      	b.n	800ecda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ecc6:	4b2f      	ldr	r3, [pc, #188]	; (800ed84 <xPortStartScheduler+0x134>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	3b01      	subs	r3, #1
 800eccc:	4a2d      	ldr	r2, [pc, #180]	; (800ed84 <xPortStartScheduler+0x134>)
 800ecce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ecd0:	78fb      	ldrb	r3, [r7, #3]
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	005b      	lsls	r3, r3, #1
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ecda:	78fb      	ldrb	r3, [r7, #3]
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece2:	2b80      	cmp	r3, #128	; 0x80
 800ece4:	d0ef      	beq.n	800ecc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ece6:	4b27      	ldr	r3, [pc, #156]	; (800ed84 <xPortStartScheduler+0x134>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f1c3 0307 	rsb	r3, r3, #7
 800ecee:	2b04      	cmp	r3, #4
 800ecf0:	d00a      	beq.n	800ed08 <xPortStartScheduler+0xb8>
	__asm volatile
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	60bb      	str	r3, [r7, #8]
}
 800ed04:	bf00      	nop
 800ed06:	e7fe      	b.n	800ed06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ed08:	4b1e      	ldr	r3, [pc, #120]	; (800ed84 <xPortStartScheduler+0x134>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	021b      	lsls	r3, r3, #8
 800ed0e:	4a1d      	ldr	r2, [pc, #116]	; (800ed84 <xPortStartScheduler+0x134>)
 800ed10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ed12:	4b1c      	ldr	r3, [pc, #112]	; (800ed84 <xPortStartScheduler+0x134>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ed1a:	4a1a      	ldr	r2, [pc, #104]	; (800ed84 <xPortStartScheduler+0x134>)
 800ed1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	b2da      	uxtb	r2, r3
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ed26:	4b18      	ldr	r3, [pc, #96]	; (800ed88 <xPortStartScheduler+0x138>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a17      	ldr	r2, [pc, #92]	; (800ed88 <xPortStartScheduler+0x138>)
 800ed2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ed30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ed32:	4b15      	ldr	r3, [pc, #84]	; (800ed88 <xPortStartScheduler+0x138>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	4a14      	ldr	r2, [pc, #80]	; (800ed88 <xPortStartScheduler+0x138>)
 800ed38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ed3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ed3e:	f000 f8dd 	bl	800eefc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ed42:	4b12      	ldr	r3, [pc, #72]	; (800ed8c <xPortStartScheduler+0x13c>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ed48:	f000 f8fc 	bl	800ef44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ed4c:	4b10      	ldr	r3, [pc, #64]	; (800ed90 <xPortStartScheduler+0x140>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a0f      	ldr	r2, [pc, #60]	; (800ed90 <xPortStartScheduler+0x140>)
 800ed52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ed56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ed58:	f7ff ff66 	bl	800ec28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ed5c:	f7ff fa56 	bl	800e20c <vTaskSwitchContext>
	prvTaskExitError();
 800ed60:	f7ff ff20 	bl	800eba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3718      	adds	r7, #24
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	e000ed00 	.word	0xe000ed00
 800ed74:	410fc271 	.word	0x410fc271
 800ed78:	410fc270 	.word	0x410fc270
 800ed7c:	e000e400 	.word	0xe000e400
 800ed80:	200025f4 	.word	0x200025f4
 800ed84:	200025f8 	.word	0x200025f8
 800ed88:	e000ed20 	.word	0xe000ed20
 800ed8c:	200000c0 	.word	0x200000c0
 800ed90:	e000ef34 	.word	0xe000ef34

0800ed94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ed94:	b480      	push	{r7}
 800ed96:	b083      	sub	sp, #12
 800ed98:	af00      	add	r7, sp, #0
	__asm volatile
 800ed9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9e:	f383 8811 	msr	BASEPRI, r3
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	f3bf 8f4f 	dsb	sy
 800edaa:	607b      	str	r3, [r7, #4]
}
 800edac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800edae:	4b0f      	ldr	r3, [pc, #60]	; (800edec <vPortEnterCritical+0x58>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	3301      	adds	r3, #1
 800edb4:	4a0d      	ldr	r2, [pc, #52]	; (800edec <vPortEnterCritical+0x58>)
 800edb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800edb8:	4b0c      	ldr	r3, [pc, #48]	; (800edec <vPortEnterCritical+0x58>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	d10f      	bne.n	800ede0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800edc0:	4b0b      	ldr	r3, [pc, #44]	; (800edf0 <vPortEnterCritical+0x5c>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00a      	beq.n	800ede0 <vPortEnterCritical+0x4c>
	__asm volatile
 800edca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edce:	f383 8811 	msr	BASEPRI, r3
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	603b      	str	r3, [r7, #0]
}
 800eddc:	bf00      	nop
 800edde:	e7fe      	b.n	800edde <vPortEnterCritical+0x4a>
	}
}
 800ede0:	bf00      	nop
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	200000c0 	.word	0x200000c0
 800edf0:	e000ed04 	.word	0xe000ed04

0800edf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800edfa:	4b12      	ldr	r3, [pc, #72]	; (800ee44 <vPortExitCritical+0x50>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10a      	bne.n	800ee18 <vPortExitCritical+0x24>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	607b      	str	r3, [r7, #4]
}
 800ee14:	bf00      	nop
 800ee16:	e7fe      	b.n	800ee16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ee18:	4b0a      	ldr	r3, [pc, #40]	; (800ee44 <vPortExitCritical+0x50>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3b01      	subs	r3, #1
 800ee1e:	4a09      	ldr	r2, [pc, #36]	; (800ee44 <vPortExitCritical+0x50>)
 800ee20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ee22:	4b08      	ldr	r3, [pc, #32]	; (800ee44 <vPortExitCritical+0x50>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d105      	bne.n	800ee36 <vPortExitCritical+0x42>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	f383 8811 	msr	BASEPRI, r3
}
 800ee34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ee36:	bf00      	nop
 800ee38:	370c      	adds	r7, #12
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop
 800ee44:	200000c0 	.word	0x200000c0
	...

0800ee50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ee50:	f3ef 8009 	mrs	r0, PSP
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	4b15      	ldr	r3, [pc, #84]	; (800eeb0 <pxCurrentTCBConst>)
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	f01e 0f10 	tst.w	lr, #16
 800ee60:	bf08      	it	eq
 800ee62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ee66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6a:	6010      	str	r0, [r2, #0]
 800ee6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ee70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ee74:	f380 8811 	msr	BASEPRI, r0
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f7ff f9c4 	bl	800e20c <vTaskSwitchContext>
 800ee84:	f04f 0000 	mov.w	r0, #0
 800ee88:	f380 8811 	msr	BASEPRI, r0
 800ee8c:	bc09      	pop	{r0, r3}
 800ee8e:	6819      	ldr	r1, [r3, #0]
 800ee90:	6808      	ldr	r0, [r1, #0]
 800ee92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee96:	f01e 0f10 	tst.w	lr, #16
 800ee9a:	bf08      	it	eq
 800ee9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eea0:	f380 8809 	msr	PSP, r0
 800eea4:	f3bf 8f6f 	isb	sy
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	f3af 8000 	nop.w

0800eeb0 <pxCurrentTCBConst>:
 800eeb0:	200024c8 	.word	0x200024c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop

0800eeb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
	__asm volatile
 800eebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	607b      	str	r3, [r7, #4]
}
 800eed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800eed2:	f7ff f8dd 	bl	800e090 <xTaskIncrementTick>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d003      	beq.n	800eee4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800eedc:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <SysTick_Handler+0x40>)
 800eede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eee2:	601a      	str	r2, [r3, #0]
 800eee4:	2300      	movs	r3, #0
 800eee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	f383 8811 	msr	BASEPRI, r3
}
 800eeee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800eef0:	bf00      	nop
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	e000ed04 	.word	0xe000ed04

0800eefc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800eefc:	b480      	push	{r7}
 800eefe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ef00:	4b0b      	ldr	r3, [pc, #44]	; (800ef30 <vPortSetupTimerInterrupt+0x34>)
 800ef02:	2200      	movs	r2, #0
 800ef04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ef06:	4b0b      	ldr	r3, [pc, #44]	; (800ef34 <vPortSetupTimerInterrupt+0x38>)
 800ef08:	2200      	movs	r2, #0
 800ef0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ef0c:	4b0a      	ldr	r3, [pc, #40]	; (800ef38 <vPortSetupTimerInterrupt+0x3c>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	4a0a      	ldr	r2, [pc, #40]	; (800ef3c <vPortSetupTimerInterrupt+0x40>)
 800ef12:	fba2 2303 	umull	r2, r3, r2, r3
 800ef16:	099b      	lsrs	r3, r3, #6
 800ef18:	4a09      	ldr	r2, [pc, #36]	; (800ef40 <vPortSetupTimerInterrupt+0x44>)
 800ef1a:	3b01      	subs	r3, #1
 800ef1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ef1e:	4b04      	ldr	r3, [pc, #16]	; (800ef30 <vPortSetupTimerInterrupt+0x34>)
 800ef20:	2207      	movs	r2, #7
 800ef22:	601a      	str	r2, [r3, #0]
}
 800ef24:	bf00      	nop
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop
 800ef30:	e000e010 	.word	0xe000e010
 800ef34:	e000e018 	.word	0xe000e018
 800ef38:	200000a0 	.word	0x200000a0
 800ef3c:	10624dd3 	.word	0x10624dd3
 800ef40:	e000e014 	.word	0xe000e014

0800ef44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ef44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ef54 <vPortEnableVFP+0x10>
 800ef48:	6801      	ldr	r1, [r0, #0]
 800ef4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ef4e:	6001      	str	r1, [r0, #0]
 800ef50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ef52:	bf00      	nop
 800ef54:	e000ed88 	.word	0xe000ed88

0800ef58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ef58:	b480      	push	{r7}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ef5e:	f3ef 8305 	mrs	r3, IPSR
 800ef62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2b0f      	cmp	r3, #15
 800ef68:	d914      	bls.n	800ef94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ef6a:	4a17      	ldr	r2, [pc, #92]	; (800efc8 <vPortValidateInterruptPriority+0x70>)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	4413      	add	r3, r2
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ef74:	4b15      	ldr	r3, [pc, #84]	; (800efcc <vPortValidateInterruptPriority+0x74>)
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	7afa      	ldrb	r2, [r7, #11]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d20a      	bcs.n	800ef94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ef7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef82:	f383 8811 	msr	BASEPRI, r3
 800ef86:	f3bf 8f6f 	isb	sy
 800ef8a:	f3bf 8f4f 	dsb	sy
 800ef8e:	607b      	str	r3, [r7, #4]
}
 800ef90:	bf00      	nop
 800ef92:	e7fe      	b.n	800ef92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ef94:	4b0e      	ldr	r3, [pc, #56]	; (800efd0 <vPortValidateInterruptPriority+0x78>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ef9c:	4b0d      	ldr	r3, [pc, #52]	; (800efd4 <vPortValidateInterruptPriority+0x7c>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d90a      	bls.n	800efba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800efa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	603b      	str	r3, [r7, #0]
}
 800efb6:	bf00      	nop
 800efb8:	e7fe      	b.n	800efb8 <vPortValidateInterruptPriority+0x60>
	}
 800efba:	bf00      	nop
 800efbc:	3714      	adds	r7, #20
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	e000e3f0 	.word	0xe000e3f0
 800efcc:	200025f4 	.word	0x200025f4
 800efd0:	e000ed0c 	.word	0xe000ed0c
 800efd4:	200025f8 	.word	0x200025f8

0800efd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800efe0:	2300      	movs	r3, #0
 800efe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800efe4:	f7fe ffaa 	bl	800df3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800efe8:	4b58      	ldr	r3, [pc, #352]	; (800f14c <pvPortMalloc+0x174>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d101      	bne.n	800eff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eff0:	f000 f910 	bl	800f214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eff4:	4b56      	ldr	r3, [pc, #344]	; (800f150 <pvPortMalloc+0x178>)
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4013      	ands	r3, r2
 800effc:	2b00      	cmp	r3, #0
 800effe:	f040 808e 	bne.w	800f11e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d01d      	beq.n	800f044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f008:	2208      	movs	r2, #8
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4413      	add	r3, r2
 800f00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f003 0307 	and.w	r3, r3, #7
 800f016:	2b00      	cmp	r3, #0
 800f018:	d014      	beq.n	800f044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f023 0307 	bic.w	r3, r3, #7
 800f020:	3308      	adds	r3, #8
 800f022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f003 0307 	and.w	r3, r3, #7
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00a      	beq.n	800f044 <pvPortMalloc+0x6c>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	617b      	str	r3, [r7, #20]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d069      	beq.n	800f11e <pvPortMalloc+0x146>
 800f04a:	4b42      	ldr	r3, [pc, #264]	; (800f154 <pvPortMalloc+0x17c>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	429a      	cmp	r2, r3
 800f052:	d864      	bhi.n	800f11e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f054:	4b40      	ldr	r3, [pc, #256]	; (800f158 <pvPortMalloc+0x180>)
 800f056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f058:	4b3f      	ldr	r3, [pc, #252]	; (800f158 <pvPortMalloc+0x180>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f05e:	e004      	b.n	800f06a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	429a      	cmp	r2, r3
 800f072:	d903      	bls.n	800f07c <pvPortMalloc+0xa4>
 800f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1f1      	bne.n	800f060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f07c:	4b33      	ldr	r3, [pc, #204]	; (800f14c <pvPortMalloc+0x174>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f082:	429a      	cmp	r2, r3
 800f084:	d04b      	beq.n	800f11e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f086:	6a3b      	ldr	r3, [r7, #32]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2208      	movs	r2, #8
 800f08c:	4413      	add	r3, r2
 800f08e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	6a3b      	ldr	r3, [r7, #32]
 800f096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09a:	685a      	ldr	r2, [r3, #4]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	1ad2      	subs	r2, r2, r3
 800f0a0:	2308      	movs	r3, #8
 800f0a2:	005b      	lsls	r3, r3, #1
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d91f      	bls.n	800f0e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f0b0:	69bb      	ldr	r3, [r7, #24]
 800f0b2:	f003 0307 	and.w	r3, r3, #7
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00a      	beq.n	800f0d0 <pvPortMalloc+0xf8>
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	613b      	str	r3, [r7, #16]
}
 800f0cc:	bf00      	nop
 800f0ce:	e7fe      	b.n	800f0ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	685a      	ldr	r2, [r3, #4]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	1ad2      	subs	r2, r2, r3
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	687a      	ldr	r2, [r7, #4]
 800f0e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f0e2:	69b8      	ldr	r0, [r7, #24]
 800f0e4:	f000 f8f8 	bl	800f2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f0e8:	4b1a      	ldr	r3, [pc, #104]	; (800f154 <pvPortMalloc+0x17c>)
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	4a18      	ldr	r2, [pc, #96]	; (800f154 <pvPortMalloc+0x17c>)
 800f0f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f0f6:	4b17      	ldr	r3, [pc, #92]	; (800f154 <pvPortMalloc+0x17c>)
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	4b18      	ldr	r3, [pc, #96]	; (800f15c <pvPortMalloc+0x184>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d203      	bcs.n	800f10a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f102:	4b14      	ldr	r3, [pc, #80]	; (800f154 <pvPortMalloc+0x17c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4a15      	ldr	r2, [pc, #84]	; (800f15c <pvPortMalloc+0x184>)
 800f108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10c:	685a      	ldr	r2, [r3, #4]
 800f10e:	4b10      	ldr	r3, [pc, #64]	; (800f150 <pvPortMalloc+0x178>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	431a      	orrs	r2, r3
 800f114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	2200      	movs	r2, #0
 800f11c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f11e:	f7fe ff1b 	bl	800df58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	f003 0307 	and.w	r3, r3, #7
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d00a      	beq.n	800f142 <pvPortMalloc+0x16a>
	__asm volatile
 800f12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f130:	f383 8811 	msr	BASEPRI, r3
 800f134:	f3bf 8f6f 	isb	sy
 800f138:	f3bf 8f4f 	dsb	sy
 800f13c:	60fb      	str	r3, [r7, #12]
}
 800f13e:	bf00      	nop
 800f140:	e7fe      	b.n	800f140 <pvPortMalloc+0x168>
	return pvReturn;
 800f142:	69fb      	ldr	r3, [r7, #28]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3728      	adds	r7, #40	; 0x28
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	20004604 	.word	0x20004604
 800f150:	20004610 	.word	0x20004610
 800f154:	20004608 	.word	0x20004608
 800f158:	200045fc 	.word	0x200045fc
 800f15c:	2000460c 	.word	0x2000460c

0800f160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b086      	sub	sp, #24
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d048      	beq.n	800f204 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f172:	2308      	movs	r3, #8
 800f174:	425b      	negs	r3, r3
 800f176:	697a      	ldr	r2, [r7, #20]
 800f178:	4413      	add	r3, r2
 800f17a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	685a      	ldr	r2, [r3, #4]
 800f184:	4b21      	ldr	r3, [pc, #132]	; (800f20c <vPortFree+0xac>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4013      	ands	r3, r2
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d10a      	bne.n	800f1a4 <vPortFree+0x44>
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	60fb      	str	r3, [r7, #12]
}
 800f1a0:	bf00      	nop
 800f1a2:	e7fe      	b.n	800f1a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00a      	beq.n	800f1c2 <vPortFree+0x62>
	__asm volatile
 800f1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	60bb      	str	r3, [r7, #8]
}
 800f1be:	bf00      	nop
 800f1c0:	e7fe      	b.n	800f1c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	685a      	ldr	r2, [r3, #4]
 800f1c6:	4b11      	ldr	r3, [pc, #68]	; (800f20c <vPortFree+0xac>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4013      	ands	r3, r2
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d019      	beq.n	800f204 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d115      	bne.n	800f204 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	4b0b      	ldr	r3, [pc, #44]	; (800f20c <vPortFree+0xac>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	43db      	mvns	r3, r3
 800f1e2:	401a      	ands	r2, r3
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f1e8:	f7fe fea8 	bl	800df3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	685a      	ldr	r2, [r3, #4]
 800f1f0:	4b07      	ldr	r3, [pc, #28]	; (800f210 <vPortFree+0xb0>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	4a06      	ldr	r2, [pc, #24]	; (800f210 <vPortFree+0xb0>)
 800f1f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f1fa:	6938      	ldr	r0, [r7, #16]
 800f1fc:	f000 f86c 	bl	800f2d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f200:	f7fe feaa 	bl	800df58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f204:	bf00      	nop
 800f206:	3718      	adds	r7, #24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	20004610 	.word	0x20004610
 800f210:	20004608 	.word	0x20004608

0800f214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f214:	b480      	push	{r7}
 800f216:	b085      	sub	sp, #20
 800f218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f21a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f220:	4b27      	ldr	r3, [pc, #156]	; (800f2c0 <prvHeapInit+0xac>)
 800f222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f003 0307 	and.w	r3, r3, #7
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00c      	beq.n	800f248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	3307      	adds	r3, #7
 800f232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 0307 	bic.w	r3, r3, #7
 800f23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f23c:	68ba      	ldr	r2, [r7, #8]
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	1ad3      	subs	r3, r2, r3
 800f242:	4a1f      	ldr	r2, [pc, #124]	; (800f2c0 <prvHeapInit+0xac>)
 800f244:	4413      	add	r3, r2
 800f246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f24c:	4a1d      	ldr	r2, [pc, #116]	; (800f2c4 <prvHeapInit+0xb0>)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f252:	4b1c      	ldr	r3, [pc, #112]	; (800f2c4 <prvHeapInit+0xb0>)
 800f254:	2200      	movs	r2, #0
 800f256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	68ba      	ldr	r2, [r7, #8]
 800f25c:	4413      	add	r3, r2
 800f25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f260:	2208      	movs	r2, #8
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	1a9b      	subs	r3, r3, r2
 800f266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f023 0307 	bic.w	r3, r3, #7
 800f26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	4a15      	ldr	r2, [pc, #84]	; (800f2c8 <prvHeapInit+0xb4>)
 800f274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f276:	4b14      	ldr	r3, [pc, #80]	; (800f2c8 <prvHeapInit+0xb4>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2200      	movs	r2, #0
 800f27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f27e:	4b12      	ldr	r3, [pc, #72]	; (800f2c8 <prvHeapInit+0xb4>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	2200      	movs	r2, #0
 800f284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	1ad2      	subs	r2, r2, r3
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f294:	4b0c      	ldr	r3, [pc, #48]	; (800f2c8 <prvHeapInit+0xb4>)
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	4a0a      	ldr	r2, [pc, #40]	; (800f2cc <prvHeapInit+0xb8>)
 800f2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	4a09      	ldr	r2, [pc, #36]	; (800f2d0 <prvHeapInit+0xbc>)
 800f2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f2ac:	4b09      	ldr	r3, [pc, #36]	; (800f2d4 <prvHeapInit+0xc0>)
 800f2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f2b2:	601a      	str	r2, [r3, #0]
}
 800f2b4:	bf00      	nop
 800f2b6:	3714      	adds	r7, #20
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr
 800f2c0:	200025fc 	.word	0x200025fc
 800f2c4:	200045fc 	.word	0x200045fc
 800f2c8:	20004604 	.word	0x20004604
 800f2cc:	2000460c 	.word	0x2000460c
 800f2d0:	20004608 	.word	0x20004608
 800f2d4:	20004610 	.word	0x20004610

0800f2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f2e0:	4b28      	ldr	r3, [pc, #160]	; (800f384 <prvInsertBlockIntoFreeList+0xac>)
 800f2e2:	60fb      	str	r3, [r7, #12]
 800f2e4:	e002      	b.n	800f2ec <prvInsertBlockIntoFreeList+0x14>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	60fb      	str	r3, [r7, #12]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d8f7      	bhi.n	800f2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	68ba      	ldr	r2, [r7, #8]
 800f300:	4413      	add	r3, r2
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	429a      	cmp	r2, r3
 800f306:	d108      	bne.n	800f31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	685a      	ldr	r2, [r3, #4]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	441a      	add	r2, r3
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	68ba      	ldr	r2, [r7, #8]
 800f324:	441a      	add	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d118      	bne.n	800f360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681a      	ldr	r2, [r3, #0]
 800f332:	4b15      	ldr	r3, [pc, #84]	; (800f388 <prvInsertBlockIntoFreeList+0xb0>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	429a      	cmp	r2, r3
 800f338:	d00d      	beq.n	800f356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	685a      	ldr	r2, [r3, #4]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	441a      	add	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	601a      	str	r2, [r3, #0]
 800f354:	e008      	b.n	800f368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f356:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <prvInsertBlockIntoFreeList+0xb0>)
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	601a      	str	r2, [r3, #0]
 800f35e:	e003      	b.n	800f368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d002      	beq.n	800f376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f376:	bf00      	nop
 800f378:	3714      	adds	r7, #20
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
 800f382:	bf00      	nop
 800f384:	200045fc 	.word	0x200045fc
 800f388:	20004604 	.word	0x20004604

0800f38c <__errno>:
 800f38c:	4b01      	ldr	r3, [pc, #4]	; (800f394 <__errno+0x8>)
 800f38e:	6818      	ldr	r0, [r3, #0]
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	200000c4 	.word	0x200000c4

0800f398 <__libc_init_array>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	4d0d      	ldr	r5, [pc, #52]	; (800f3d0 <__libc_init_array+0x38>)
 800f39c:	4c0d      	ldr	r4, [pc, #52]	; (800f3d4 <__libc_init_array+0x3c>)
 800f39e:	1b64      	subs	r4, r4, r5
 800f3a0:	10a4      	asrs	r4, r4, #2
 800f3a2:	2600      	movs	r6, #0
 800f3a4:	42a6      	cmp	r6, r4
 800f3a6:	d109      	bne.n	800f3bc <__libc_init_array+0x24>
 800f3a8:	4d0b      	ldr	r5, [pc, #44]	; (800f3d8 <__libc_init_array+0x40>)
 800f3aa:	4c0c      	ldr	r4, [pc, #48]	; (800f3dc <__libc_init_array+0x44>)
 800f3ac:	f001 f8b0 	bl	8010510 <_init>
 800f3b0:	1b64      	subs	r4, r4, r5
 800f3b2:	10a4      	asrs	r4, r4, #2
 800f3b4:	2600      	movs	r6, #0
 800f3b6:	42a6      	cmp	r6, r4
 800f3b8:	d105      	bne.n	800f3c6 <__libc_init_array+0x2e>
 800f3ba:	bd70      	pop	{r4, r5, r6, pc}
 800f3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3c0:	4798      	blx	r3
 800f3c2:	3601      	adds	r6, #1
 800f3c4:	e7ee      	b.n	800f3a4 <__libc_init_array+0xc>
 800f3c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ca:	4798      	blx	r3
 800f3cc:	3601      	adds	r6, #1
 800f3ce:	e7f2      	b.n	800f3b6 <__libc_init_array+0x1e>
 800f3d0:	08010c00 	.word	0x08010c00
 800f3d4:	08010c00 	.word	0x08010c00
 800f3d8:	08010c00 	.word	0x08010c00
 800f3dc:	08010c04 	.word	0x08010c04

0800f3e0 <__retarget_lock_acquire_recursive>:
 800f3e0:	4770      	bx	lr

0800f3e2 <__retarget_lock_release_recursive>:
 800f3e2:	4770      	bx	lr

0800f3e4 <malloc>:
 800f3e4:	4b02      	ldr	r3, [pc, #8]	; (800f3f0 <malloc+0xc>)
 800f3e6:	4601      	mov	r1, r0
 800f3e8:	6818      	ldr	r0, [r3, #0]
 800f3ea:	f000 b88d 	b.w	800f508 <_malloc_r>
 800f3ee:	bf00      	nop
 800f3f0:	200000c4 	.word	0x200000c4

0800f3f4 <free>:
 800f3f4:	4b02      	ldr	r3, [pc, #8]	; (800f400 <free+0xc>)
 800f3f6:	4601      	mov	r1, r0
 800f3f8:	6818      	ldr	r0, [r3, #0]
 800f3fa:	f000 b819 	b.w	800f430 <_free_r>
 800f3fe:	bf00      	nop
 800f400:	200000c4 	.word	0x200000c4

0800f404 <memcpy>:
 800f404:	440a      	add	r2, r1
 800f406:	4291      	cmp	r1, r2
 800f408:	f100 33ff 	add.w	r3, r0, #4294967295
 800f40c:	d100      	bne.n	800f410 <memcpy+0xc>
 800f40e:	4770      	bx	lr
 800f410:	b510      	push	{r4, lr}
 800f412:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f41a:	4291      	cmp	r1, r2
 800f41c:	d1f9      	bne.n	800f412 <memcpy+0xe>
 800f41e:	bd10      	pop	{r4, pc}

0800f420 <memset>:
 800f420:	4402      	add	r2, r0
 800f422:	4603      	mov	r3, r0
 800f424:	4293      	cmp	r3, r2
 800f426:	d100      	bne.n	800f42a <memset+0xa>
 800f428:	4770      	bx	lr
 800f42a:	f803 1b01 	strb.w	r1, [r3], #1
 800f42e:	e7f9      	b.n	800f424 <memset+0x4>

0800f430 <_free_r>:
 800f430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f432:	2900      	cmp	r1, #0
 800f434:	d044      	beq.n	800f4c0 <_free_r+0x90>
 800f436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f43a:	9001      	str	r0, [sp, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f1a1 0404 	sub.w	r4, r1, #4
 800f442:	bfb8      	it	lt
 800f444:	18e4      	addlt	r4, r4, r3
 800f446:	f000 f9c3 	bl	800f7d0 <__malloc_lock>
 800f44a:	4a1e      	ldr	r2, [pc, #120]	; (800f4c4 <_free_r+0x94>)
 800f44c:	9801      	ldr	r0, [sp, #4]
 800f44e:	6813      	ldr	r3, [r2, #0]
 800f450:	b933      	cbnz	r3, 800f460 <_free_r+0x30>
 800f452:	6063      	str	r3, [r4, #4]
 800f454:	6014      	str	r4, [r2, #0]
 800f456:	b003      	add	sp, #12
 800f458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f45c:	f000 b9be 	b.w	800f7dc <__malloc_unlock>
 800f460:	42a3      	cmp	r3, r4
 800f462:	d908      	bls.n	800f476 <_free_r+0x46>
 800f464:	6825      	ldr	r5, [r4, #0]
 800f466:	1961      	adds	r1, r4, r5
 800f468:	428b      	cmp	r3, r1
 800f46a:	bf01      	itttt	eq
 800f46c:	6819      	ldreq	r1, [r3, #0]
 800f46e:	685b      	ldreq	r3, [r3, #4]
 800f470:	1949      	addeq	r1, r1, r5
 800f472:	6021      	streq	r1, [r4, #0]
 800f474:	e7ed      	b.n	800f452 <_free_r+0x22>
 800f476:	461a      	mov	r2, r3
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	b10b      	cbz	r3, 800f480 <_free_r+0x50>
 800f47c:	42a3      	cmp	r3, r4
 800f47e:	d9fa      	bls.n	800f476 <_free_r+0x46>
 800f480:	6811      	ldr	r1, [r2, #0]
 800f482:	1855      	adds	r5, r2, r1
 800f484:	42a5      	cmp	r5, r4
 800f486:	d10b      	bne.n	800f4a0 <_free_r+0x70>
 800f488:	6824      	ldr	r4, [r4, #0]
 800f48a:	4421      	add	r1, r4
 800f48c:	1854      	adds	r4, r2, r1
 800f48e:	42a3      	cmp	r3, r4
 800f490:	6011      	str	r1, [r2, #0]
 800f492:	d1e0      	bne.n	800f456 <_free_r+0x26>
 800f494:	681c      	ldr	r4, [r3, #0]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	6053      	str	r3, [r2, #4]
 800f49a:	4421      	add	r1, r4
 800f49c:	6011      	str	r1, [r2, #0]
 800f49e:	e7da      	b.n	800f456 <_free_r+0x26>
 800f4a0:	d902      	bls.n	800f4a8 <_free_r+0x78>
 800f4a2:	230c      	movs	r3, #12
 800f4a4:	6003      	str	r3, [r0, #0]
 800f4a6:	e7d6      	b.n	800f456 <_free_r+0x26>
 800f4a8:	6825      	ldr	r5, [r4, #0]
 800f4aa:	1961      	adds	r1, r4, r5
 800f4ac:	428b      	cmp	r3, r1
 800f4ae:	bf04      	itt	eq
 800f4b0:	6819      	ldreq	r1, [r3, #0]
 800f4b2:	685b      	ldreq	r3, [r3, #4]
 800f4b4:	6063      	str	r3, [r4, #4]
 800f4b6:	bf04      	itt	eq
 800f4b8:	1949      	addeq	r1, r1, r5
 800f4ba:	6021      	streq	r1, [r4, #0]
 800f4bc:	6054      	str	r4, [r2, #4]
 800f4be:	e7ca      	b.n	800f456 <_free_r+0x26>
 800f4c0:	b003      	add	sp, #12
 800f4c2:	bd30      	pop	{r4, r5, pc}
 800f4c4:	20004618 	.word	0x20004618

0800f4c8 <sbrk_aligned>:
 800f4c8:	b570      	push	{r4, r5, r6, lr}
 800f4ca:	4e0e      	ldr	r6, [pc, #56]	; (800f504 <sbrk_aligned+0x3c>)
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	6831      	ldr	r1, [r6, #0]
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	b911      	cbnz	r1, 800f4da <sbrk_aligned+0x12>
 800f4d4:	f000 f8fe 	bl	800f6d4 <_sbrk_r>
 800f4d8:	6030      	str	r0, [r6, #0]
 800f4da:	4621      	mov	r1, r4
 800f4dc:	4628      	mov	r0, r5
 800f4de:	f000 f8f9 	bl	800f6d4 <_sbrk_r>
 800f4e2:	1c43      	adds	r3, r0, #1
 800f4e4:	d00a      	beq.n	800f4fc <sbrk_aligned+0x34>
 800f4e6:	1cc4      	adds	r4, r0, #3
 800f4e8:	f024 0403 	bic.w	r4, r4, #3
 800f4ec:	42a0      	cmp	r0, r4
 800f4ee:	d007      	beq.n	800f500 <sbrk_aligned+0x38>
 800f4f0:	1a21      	subs	r1, r4, r0
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	f000 f8ee 	bl	800f6d4 <_sbrk_r>
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	d101      	bne.n	800f500 <sbrk_aligned+0x38>
 800f4fc:	f04f 34ff 	mov.w	r4, #4294967295
 800f500:	4620      	mov	r0, r4
 800f502:	bd70      	pop	{r4, r5, r6, pc}
 800f504:	2000461c 	.word	0x2000461c

0800f508 <_malloc_r>:
 800f508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f50c:	1ccd      	adds	r5, r1, #3
 800f50e:	f025 0503 	bic.w	r5, r5, #3
 800f512:	3508      	adds	r5, #8
 800f514:	2d0c      	cmp	r5, #12
 800f516:	bf38      	it	cc
 800f518:	250c      	movcc	r5, #12
 800f51a:	2d00      	cmp	r5, #0
 800f51c:	4607      	mov	r7, r0
 800f51e:	db01      	blt.n	800f524 <_malloc_r+0x1c>
 800f520:	42a9      	cmp	r1, r5
 800f522:	d905      	bls.n	800f530 <_malloc_r+0x28>
 800f524:	230c      	movs	r3, #12
 800f526:	603b      	str	r3, [r7, #0]
 800f528:	2600      	movs	r6, #0
 800f52a:	4630      	mov	r0, r6
 800f52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f530:	4e2e      	ldr	r6, [pc, #184]	; (800f5ec <_malloc_r+0xe4>)
 800f532:	f000 f94d 	bl	800f7d0 <__malloc_lock>
 800f536:	6833      	ldr	r3, [r6, #0]
 800f538:	461c      	mov	r4, r3
 800f53a:	bb34      	cbnz	r4, 800f58a <_malloc_r+0x82>
 800f53c:	4629      	mov	r1, r5
 800f53e:	4638      	mov	r0, r7
 800f540:	f7ff ffc2 	bl	800f4c8 <sbrk_aligned>
 800f544:	1c43      	adds	r3, r0, #1
 800f546:	4604      	mov	r4, r0
 800f548:	d14d      	bne.n	800f5e6 <_malloc_r+0xde>
 800f54a:	6834      	ldr	r4, [r6, #0]
 800f54c:	4626      	mov	r6, r4
 800f54e:	2e00      	cmp	r6, #0
 800f550:	d140      	bne.n	800f5d4 <_malloc_r+0xcc>
 800f552:	6823      	ldr	r3, [r4, #0]
 800f554:	4631      	mov	r1, r6
 800f556:	4638      	mov	r0, r7
 800f558:	eb04 0803 	add.w	r8, r4, r3
 800f55c:	f000 f8ba 	bl	800f6d4 <_sbrk_r>
 800f560:	4580      	cmp	r8, r0
 800f562:	d13a      	bne.n	800f5da <_malloc_r+0xd2>
 800f564:	6821      	ldr	r1, [r4, #0]
 800f566:	3503      	adds	r5, #3
 800f568:	1a6d      	subs	r5, r5, r1
 800f56a:	f025 0503 	bic.w	r5, r5, #3
 800f56e:	3508      	adds	r5, #8
 800f570:	2d0c      	cmp	r5, #12
 800f572:	bf38      	it	cc
 800f574:	250c      	movcc	r5, #12
 800f576:	4629      	mov	r1, r5
 800f578:	4638      	mov	r0, r7
 800f57a:	f7ff ffa5 	bl	800f4c8 <sbrk_aligned>
 800f57e:	3001      	adds	r0, #1
 800f580:	d02b      	beq.n	800f5da <_malloc_r+0xd2>
 800f582:	6823      	ldr	r3, [r4, #0]
 800f584:	442b      	add	r3, r5
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	e00e      	b.n	800f5a8 <_malloc_r+0xa0>
 800f58a:	6822      	ldr	r2, [r4, #0]
 800f58c:	1b52      	subs	r2, r2, r5
 800f58e:	d41e      	bmi.n	800f5ce <_malloc_r+0xc6>
 800f590:	2a0b      	cmp	r2, #11
 800f592:	d916      	bls.n	800f5c2 <_malloc_r+0xba>
 800f594:	1961      	adds	r1, r4, r5
 800f596:	42a3      	cmp	r3, r4
 800f598:	6025      	str	r5, [r4, #0]
 800f59a:	bf18      	it	ne
 800f59c:	6059      	strne	r1, [r3, #4]
 800f59e:	6863      	ldr	r3, [r4, #4]
 800f5a0:	bf08      	it	eq
 800f5a2:	6031      	streq	r1, [r6, #0]
 800f5a4:	5162      	str	r2, [r4, r5]
 800f5a6:	604b      	str	r3, [r1, #4]
 800f5a8:	4638      	mov	r0, r7
 800f5aa:	f104 060b 	add.w	r6, r4, #11
 800f5ae:	f000 f915 	bl	800f7dc <__malloc_unlock>
 800f5b2:	f026 0607 	bic.w	r6, r6, #7
 800f5b6:	1d23      	adds	r3, r4, #4
 800f5b8:	1af2      	subs	r2, r6, r3
 800f5ba:	d0b6      	beq.n	800f52a <_malloc_r+0x22>
 800f5bc:	1b9b      	subs	r3, r3, r6
 800f5be:	50a3      	str	r3, [r4, r2]
 800f5c0:	e7b3      	b.n	800f52a <_malloc_r+0x22>
 800f5c2:	6862      	ldr	r2, [r4, #4]
 800f5c4:	42a3      	cmp	r3, r4
 800f5c6:	bf0c      	ite	eq
 800f5c8:	6032      	streq	r2, [r6, #0]
 800f5ca:	605a      	strne	r2, [r3, #4]
 800f5cc:	e7ec      	b.n	800f5a8 <_malloc_r+0xa0>
 800f5ce:	4623      	mov	r3, r4
 800f5d0:	6864      	ldr	r4, [r4, #4]
 800f5d2:	e7b2      	b.n	800f53a <_malloc_r+0x32>
 800f5d4:	4634      	mov	r4, r6
 800f5d6:	6876      	ldr	r6, [r6, #4]
 800f5d8:	e7b9      	b.n	800f54e <_malloc_r+0x46>
 800f5da:	230c      	movs	r3, #12
 800f5dc:	603b      	str	r3, [r7, #0]
 800f5de:	4638      	mov	r0, r7
 800f5e0:	f000 f8fc 	bl	800f7dc <__malloc_unlock>
 800f5e4:	e7a1      	b.n	800f52a <_malloc_r+0x22>
 800f5e6:	6025      	str	r5, [r4, #0]
 800f5e8:	e7de      	b.n	800f5a8 <_malloc_r+0xa0>
 800f5ea:	bf00      	nop
 800f5ec:	20004618 	.word	0x20004618

0800f5f0 <realloc>:
 800f5f0:	4b02      	ldr	r3, [pc, #8]	; (800f5fc <realloc+0xc>)
 800f5f2:	460a      	mov	r2, r1
 800f5f4:	4601      	mov	r1, r0
 800f5f6:	6818      	ldr	r0, [r3, #0]
 800f5f8:	f000 b8f6 	b.w	800f7e8 <_realloc_r>
 800f5fc:	200000c4 	.word	0x200000c4

0800f600 <cleanup_glue>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	460c      	mov	r4, r1
 800f604:	6809      	ldr	r1, [r1, #0]
 800f606:	4605      	mov	r5, r0
 800f608:	b109      	cbz	r1, 800f60e <cleanup_glue+0xe>
 800f60a:	f7ff fff9 	bl	800f600 <cleanup_glue>
 800f60e:	4621      	mov	r1, r4
 800f610:	4628      	mov	r0, r5
 800f612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f616:	f7ff bf0b 	b.w	800f430 <_free_r>
	...

0800f61c <_reclaim_reent>:
 800f61c:	4b2c      	ldr	r3, [pc, #176]	; (800f6d0 <_reclaim_reent+0xb4>)
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4283      	cmp	r3, r0
 800f622:	b570      	push	{r4, r5, r6, lr}
 800f624:	4604      	mov	r4, r0
 800f626:	d051      	beq.n	800f6cc <_reclaim_reent+0xb0>
 800f628:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f62a:	b143      	cbz	r3, 800f63e <_reclaim_reent+0x22>
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d14a      	bne.n	800f6c8 <_reclaim_reent+0xac>
 800f632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f634:	6819      	ldr	r1, [r3, #0]
 800f636:	b111      	cbz	r1, 800f63e <_reclaim_reent+0x22>
 800f638:	4620      	mov	r0, r4
 800f63a:	f7ff fef9 	bl	800f430 <_free_r>
 800f63e:	6961      	ldr	r1, [r4, #20]
 800f640:	b111      	cbz	r1, 800f648 <_reclaim_reent+0x2c>
 800f642:	4620      	mov	r0, r4
 800f644:	f7ff fef4 	bl	800f430 <_free_r>
 800f648:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f64a:	b111      	cbz	r1, 800f652 <_reclaim_reent+0x36>
 800f64c:	4620      	mov	r0, r4
 800f64e:	f7ff feef 	bl	800f430 <_free_r>
 800f652:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f654:	b111      	cbz	r1, 800f65c <_reclaim_reent+0x40>
 800f656:	4620      	mov	r0, r4
 800f658:	f7ff feea 	bl	800f430 <_free_r>
 800f65c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f65e:	b111      	cbz	r1, 800f666 <_reclaim_reent+0x4a>
 800f660:	4620      	mov	r0, r4
 800f662:	f7ff fee5 	bl	800f430 <_free_r>
 800f666:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f668:	b111      	cbz	r1, 800f670 <_reclaim_reent+0x54>
 800f66a:	4620      	mov	r0, r4
 800f66c:	f7ff fee0 	bl	800f430 <_free_r>
 800f670:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f672:	b111      	cbz	r1, 800f67a <_reclaim_reent+0x5e>
 800f674:	4620      	mov	r0, r4
 800f676:	f7ff fedb 	bl	800f430 <_free_r>
 800f67a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f67c:	b111      	cbz	r1, 800f684 <_reclaim_reent+0x68>
 800f67e:	4620      	mov	r0, r4
 800f680:	f7ff fed6 	bl	800f430 <_free_r>
 800f684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f686:	b111      	cbz	r1, 800f68e <_reclaim_reent+0x72>
 800f688:	4620      	mov	r0, r4
 800f68a:	f7ff fed1 	bl	800f430 <_free_r>
 800f68e:	69a3      	ldr	r3, [r4, #24]
 800f690:	b1e3      	cbz	r3, 800f6cc <_reclaim_reent+0xb0>
 800f692:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f694:	4620      	mov	r0, r4
 800f696:	4798      	blx	r3
 800f698:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f69a:	b1b9      	cbz	r1, 800f6cc <_reclaim_reent+0xb0>
 800f69c:	4620      	mov	r0, r4
 800f69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6a2:	f7ff bfad 	b.w	800f600 <cleanup_glue>
 800f6a6:	5949      	ldr	r1, [r1, r5]
 800f6a8:	b941      	cbnz	r1, 800f6bc <_reclaim_reent+0xa0>
 800f6aa:	3504      	adds	r5, #4
 800f6ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6ae:	2d80      	cmp	r5, #128	; 0x80
 800f6b0:	68d9      	ldr	r1, [r3, #12]
 800f6b2:	d1f8      	bne.n	800f6a6 <_reclaim_reent+0x8a>
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	f7ff febb 	bl	800f430 <_free_r>
 800f6ba:	e7ba      	b.n	800f632 <_reclaim_reent+0x16>
 800f6bc:	680e      	ldr	r6, [r1, #0]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7ff feb6 	bl	800f430 <_free_r>
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	e7ef      	b.n	800f6a8 <_reclaim_reent+0x8c>
 800f6c8:	2500      	movs	r5, #0
 800f6ca:	e7ef      	b.n	800f6ac <_reclaim_reent+0x90>
 800f6cc:	bd70      	pop	{r4, r5, r6, pc}
 800f6ce:	bf00      	nop
 800f6d0:	200000c4 	.word	0x200000c4

0800f6d4 <_sbrk_r>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	4d06      	ldr	r5, [pc, #24]	; (800f6f0 <_sbrk_r+0x1c>)
 800f6d8:	2300      	movs	r3, #0
 800f6da:	4604      	mov	r4, r0
 800f6dc:	4608      	mov	r0, r1
 800f6de:	602b      	str	r3, [r5, #0]
 800f6e0:	f7f4 f9ae 	bl	8003a40 <_sbrk>
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d102      	bne.n	800f6ee <_sbrk_r+0x1a>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	b103      	cbz	r3, 800f6ee <_sbrk_r+0x1a>
 800f6ec:	6023      	str	r3, [r4, #0]
 800f6ee:	bd38      	pop	{r3, r4, r5, pc}
 800f6f0:	20004620 	.word	0x20004620

0800f6f4 <siprintf>:
 800f6f4:	b40e      	push	{r1, r2, r3}
 800f6f6:	b500      	push	{lr}
 800f6f8:	b09c      	sub	sp, #112	; 0x70
 800f6fa:	ab1d      	add	r3, sp, #116	; 0x74
 800f6fc:	9002      	str	r0, [sp, #8]
 800f6fe:	9006      	str	r0, [sp, #24]
 800f700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f704:	4809      	ldr	r0, [pc, #36]	; (800f72c <siprintf+0x38>)
 800f706:	9107      	str	r1, [sp, #28]
 800f708:	9104      	str	r1, [sp, #16]
 800f70a:	4909      	ldr	r1, [pc, #36]	; (800f730 <siprintf+0x3c>)
 800f70c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f710:	9105      	str	r1, [sp, #20]
 800f712:	6800      	ldr	r0, [r0, #0]
 800f714:	9301      	str	r3, [sp, #4]
 800f716:	a902      	add	r1, sp, #8
 800f718:	f000 f8f0 	bl	800f8fc <_svfiprintf_r>
 800f71c:	9b02      	ldr	r3, [sp, #8]
 800f71e:	2200      	movs	r2, #0
 800f720:	701a      	strb	r2, [r3, #0]
 800f722:	b01c      	add	sp, #112	; 0x70
 800f724:	f85d eb04 	ldr.w	lr, [sp], #4
 800f728:	b003      	add	sp, #12
 800f72a:	4770      	bx	lr
 800f72c:	200000c4 	.word	0x200000c4
 800f730:	ffff0208 	.word	0xffff0208

0800f734 <strchr>:
 800f734:	b2c9      	uxtb	r1, r1
 800f736:	4603      	mov	r3, r0
 800f738:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f73c:	b11a      	cbz	r2, 800f746 <strchr+0x12>
 800f73e:	428a      	cmp	r2, r1
 800f740:	d1f9      	bne.n	800f736 <strchr+0x2>
 800f742:	4618      	mov	r0, r3
 800f744:	4770      	bx	lr
 800f746:	2900      	cmp	r1, #0
 800f748:	bf18      	it	ne
 800f74a:	2300      	movne	r3, #0
 800f74c:	e7f9      	b.n	800f742 <strchr+0xe>

0800f74e <strcpy>:
 800f74e:	4603      	mov	r3, r0
 800f750:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f754:	f803 2b01 	strb.w	r2, [r3], #1
 800f758:	2a00      	cmp	r2, #0
 800f75a:	d1f9      	bne.n	800f750 <strcpy+0x2>
 800f75c:	4770      	bx	lr

0800f75e <_vsniprintf_r>:
 800f75e:	b530      	push	{r4, r5, lr}
 800f760:	4614      	mov	r4, r2
 800f762:	2c00      	cmp	r4, #0
 800f764:	b09b      	sub	sp, #108	; 0x6c
 800f766:	4605      	mov	r5, r0
 800f768:	461a      	mov	r2, r3
 800f76a:	da05      	bge.n	800f778 <_vsniprintf_r+0x1a>
 800f76c:	238b      	movs	r3, #139	; 0x8b
 800f76e:	6003      	str	r3, [r0, #0]
 800f770:	f04f 30ff 	mov.w	r0, #4294967295
 800f774:	b01b      	add	sp, #108	; 0x6c
 800f776:	bd30      	pop	{r4, r5, pc}
 800f778:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f77c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f780:	bf14      	ite	ne
 800f782:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f786:	4623      	moveq	r3, r4
 800f788:	9302      	str	r3, [sp, #8]
 800f78a:	9305      	str	r3, [sp, #20]
 800f78c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f790:	9100      	str	r1, [sp, #0]
 800f792:	9104      	str	r1, [sp, #16]
 800f794:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f798:	4669      	mov	r1, sp
 800f79a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f79c:	f000 f8ae 	bl	800f8fc <_svfiprintf_r>
 800f7a0:	1c43      	adds	r3, r0, #1
 800f7a2:	bfbc      	itt	lt
 800f7a4:	238b      	movlt	r3, #139	; 0x8b
 800f7a6:	602b      	strlt	r3, [r5, #0]
 800f7a8:	2c00      	cmp	r4, #0
 800f7aa:	d0e3      	beq.n	800f774 <_vsniprintf_r+0x16>
 800f7ac:	9b00      	ldr	r3, [sp, #0]
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	701a      	strb	r2, [r3, #0]
 800f7b2:	e7df      	b.n	800f774 <_vsniprintf_r+0x16>

0800f7b4 <vsniprintf>:
 800f7b4:	b507      	push	{r0, r1, r2, lr}
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	460a      	mov	r2, r1
 800f7bc:	4601      	mov	r1, r0
 800f7be:	4803      	ldr	r0, [pc, #12]	; (800f7cc <vsniprintf+0x18>)
 800f7c0:	6800      	ldr	r0, [r0, #0]
 800f7c2:	f7ff ffcc 	bl	800f75e <_vsniprintf_r>
 800f7c6:	b003      	add	sp, #12
 800f7c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f7cc:	200000c4 	.word	0x200000c4

0800f7d0 <__malloc_lock>:
 800f7d0:	4801      	ldr	r0, [pc, #4]	; (800f7d8 <__malloc_lock+0x8>)
 800f7d2:	f7ff be05 	b.w	800f3e0 <__retarget_lock_acquire_recursive>
 800f7d6:	bf00      	nop
 800f7d8:	20004614 	.word	0x20004614

0800f7dc <__malloc_unlock>:
 800f7dc:	4801      	ldr	r0, [pc, #4]	; (800f7e4 <__malloc_unlock+0x8>)
 800f7de:	f7ff be00 	b.w	800f3e2 <__retarget_lock_release_recursive>
 800f7e2:	bf00      	nop
 800f7e4:	20004614 	.word	0x20004614

0800f7e8 <_realloc_r>:
 800f7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ec:	4680      	mov	r8, r0
 800f7ee:	4614      	mov	r4, r2
 800f7f0:	460e      	mov	r6, r1
 800f7f2:	b921      	cbnz	r1, 800f7fe <_realloc_r+0x16>
 800f7f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	f7ff be85 	b.w	800f508 <_malloc_r>
 800f7fe:	b92a      	cbnz	r2, 800f80c <_realloc_r+0x24>
 800f800:	f7ff fe16 	bl	800f430 <_free_r>
 800f804:	4625      	mov	r5, r4
 800f806:	4628      	mov	r0, r5
 800f808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f80c:	f000 fb24 	bl	800fe58 <_malloc_usable_size_r>
 800f810:	4284      	cmp	r4, r0
 800f812:	4607      	mov	r7, r0
 800f814:	d802      	bhi.n	800f81c <_realloc_r+0x34>
 800f816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f81a:	d812      	bhi.n	800f842 <_realloc_r+0x5a>
 800f81c:	4621      	mov	r1, r4
 800f81e:	4640      	mov	r0, r8
 800f820:	f7ff fe72 	bl	800f508 <_malloc_r>
 800f824:	4605      	mov	r5, r0
 800f826:	2800      	cmp	r0, #0
 800f828:	d0ed      	beq.n	800f806 <_realloc_r+0x1e>
 800f82a:	42bc      	cmp	r4, r7
 800f82c:	4622      	mov	r2, r4
 800f82e:	4631      	mov	r1, r6
 800f830:	bf28      	it	cs
 800f832:	463a      	movcs	r2, r7
 800f834:	f7ff fde6 	bl	800f404 <memcpy>
 800f838:	4631      	mov	r1, r6
 800f83a:	4640      	mov	r0, r8
 800f83c:	f7ff fdf8 	bl	800f430 <_free_r>
 800f840:	e7e1      	b.n	800f806 <_realloc_r+0x1e>
 800f842:	4635      	mov	r5, r6
 800f844:	e7df      	b.n	800f806 <_realloc_r+0x1e>

0800f846 <__ssputs_r>:
 800f846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f84a:	688e      	ldr	r6, [r1, #8]
 800f84c:	429e      	cmp	r6, r3
 800f84e:	4682      	mov	sl, r0
 800f850:	460c      	mov	r4, r1
 800f852:	4690      	mov	r8, r2
 800f854:	461f      	mov	r7, r3
 800f856:	d838      	bhi.n	800f8ca <__ssputs_r+0x84>
 800f858:	898a      	ldrh	r2, [r1, #12]
 800f85a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f85e:	d032      	beq.n	800f8c6 <__ssputs_r+0x80>
 800f860:	6825      	ldr	r5, [r4, #0]
 800f862:	6909      	ldr	r1, [r1, #16]
 800f864:	eba5 0901 	sub.w	r9, r5, r1
 800f868:	6965      	ldr	r5, [r4, #20]
 800f86a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f86e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f872:	3301      	adds	r3, #1
 800f874:	444b      	add	r3, r9
 800f876:	106d      	asrs	r5, r5, #1
 800f878:	429d      	cmp	r5, r3
 800f87a:	bf38      	it	cc
 800f87c:	461d      	movcc	r5, r3
 800f87e:	0553      	lsls	r3, r2, #21
 800f880:	d531      	bpl.n	800f8e6 <__ssputs_r+0xa0>
 800f882:	4629      	mov	r1, r5
 800f884:	f7ff fe40 	bl	800f508 <_malloc_r>
 800f888:	4606      	mov	r6, r0
 800f88a:	b950      	cbnz	r0, 800f8a2 <__ssputs_r+0x5c>
 800f88c:	230c      	movs	r3, #12
 800f88e:	f8ca 3000 	str.w	r3, [sl]
 800f892:	89a3      	ldrh	r3, [r4, #12]
 800f894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f898:	81a3      	strh	r3, [r4, #12]
 800f89a:	f04f 30ff 	mov.w	r0, #4294967295
 800f89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8a2:	6921      	ldr	r1, [r4, #16]
 800f8a4:	464a      	mov	r2, r9
 800f8a6:	f7ff fdad 	bl	800f404 <memcpy>
 800f8aa:	89a3      	ldrh	r3, [r4, #12]
 800f8ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8b4:	81a3      	strh	r3, [r4, #12]
 800f8b6:	6126      	str	r6, [r4, #16]
 800f8b8:	6165      	str	r5, [r4, #20]
 800f8ba:	444e      	add	r6, r9
 800f8bc:	eba5 0509 	sub.w	r5, r5, r9
 800f8c0:	6026      	str	r6, [r4, #0]
 800f8c2:	60a5      	str	r5, [r4, #8]
 800f8c4:	463e      	mov	r6, r7
 800f8c6:	42be      	cmp	r6, r7
 800f8c8:	d900      	bls.n	800f8cc <__ssputs_r+0x86>
 800f8ca:	463e      	mov	r6, r7
 800f8cc:	6820      	ldr	r0, [r4, #0]
 800f8ce:	4632      	mov	r2, r6
 800f8d0:	4641      	mov	r1, r8
 800f8d2:	f000 faa7 	bl	800fe24 <memmove>
 800f8d6:	68a3      	ldr	r3, [r4, #8]
 800f8d8:	1b9b      	subs	r3, r3, r6
 800f8da:	60a3      	str	r3, [r4, #8]
 800f8dc:	6823      	ldr	r3, [r4, #0]
 800f8de:	4433      	add	r3, r6
 800f8e0:	6023      	str	r3, [r4, #0]
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	e7db      	b.n	800f89e <__ssputs_r+0x58>
 800f8e6:	462a      	mov	r2, r5
 800f8e8:	f7ff ff7e 	bl	800f7e8 <_realloc_r>
 800f8ec:	4606      	mov	r6, r0
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d1e1      	bne.n	800f8b6 <__ssputs_r+0x70>
 800f8f2:	6921      	ldr	r1, [r4, #16]
 800f8f4:	4650      	mov	r0, sl
 800f8f6:	f7ff fd9b 	bl	800f430 <_free_r>
 800f8fa:	e7c7      	b.n	800f88c <__ssputs_r+0x46>

0800f8fc <_svfiprintf_r>:
 800f8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f900:	4698      	mov	r8, r3
 800f902:	898b      	ldrh	r3, [r1, #12]
 800f904:	061b      	lsls	r3, r3, #24
 800f906:	b09d      	sub	sp, #116	; 0x74
 800f908:	4607      	mov	r7, r0
 800f90a:	460d      	mov	r5, r1
 800f90c:	4614      	mov	r4, r2
 800f90e:	d50e      	bpl.n	800f92e <_svfiprintf_r+0x32>
 800f910:	690b      	ldr	r3, [r1, #16]
 800f912:	b963      	cbnz	r3, 800f92e <_svfiprintf_r+0x32>
 800f914:	2140      	movs	r1, #64	; 0x40
 800f916:	f7ff fdf7 	bl	800f508 <_malloc_r>
 800f91a:	6028      	str	r0, [r5, #0]
 800f91c:	6128      	str	r0, [r5, #16]
 800f91e:	b920      	cbnz	r0, 800f92a <_svfiprintf_r+0x2e>
 800f920:	230c      	movs	r3, #12
 800f922:	603b      	str	r3, [r7, #0]
 800f924:	f04f 30ff 	mov.w	r0, #4294967295
 800f928:	e0d1      	b.n	800face <_svfiprintf_r+0x1d2>
 800f92a:	2340      	movs	r3, #64	; 0x40
 800f92c:	616b      	str	r3, [r5, #20]
 800f92e:	2300      	movs	r3, #0
 800f930:	9309      	str	r3, [sp, #36]	; 0x24
 800f932:	2320      	movs	r3, #32
 800f934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f938:	f8cd 800c 	str.w	r8, [sp, #12]
 800f93c:	2330      	movs	r3, #48	; 0x30
 800f93e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fae8 <_svfiprintf_r+0x1ec>
 800f942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f946:	f04f 0901 	mov.w	r9, #1
 800f94a:	4623      	mov	r3, r4
 800f94c:	469a      	mov	sl, r3
 800f94e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f952:	b10a      	cbz	r2, 800f958 <_svfiprintf_r+0x5c>
 800f954:	2a25      	cmp	r2, #37	; 0x25
 800f956:	d1f9      	bne.n	800f94c <_svfiprintf_r+0x50>
 800f958:	ebba 0b04 	subs.w	fp, sl, r4
 800f95c:	d00b      	beq.n	800f976 <_svfiprintf_r+0x7a>
 800f95e:	465b      	mov	r3, fp
 800f960:	4622      	mov	r2, r4
 800f962:	4629      	mov	r1, r5
 800f964:	4638      	mov	r0, r7
 800f966:	f7ff ff6e 	bl	800f846 <__ssputs_r>
 800f96a:	3001      	adds	r0, #1
 800f96c:	f000 80aa 	beq.w	800fac4 <_svfiprintf_r+0x1c8>
 800f970:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f972:	445a      	add	r2, fp
 800f974:	9209      	str	r2, [sp, #36]	; 0x24
 800f976:	f89a 3000 	ldrb.w	r3, [sl]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	f000 80a2 	beq.w	800fac4 <_svfiprintf_r+0x1c8>
 800f980:	2300      	movs	r3, #0
 800f982:	f04f 32ff 	mov.w	r2, #4294967295
 800f986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f98a:	f10a 0a01 	add.w	sl, sl, #1
 800f98e:	9304      	str	r3, [sp, #16]
 800f990:	9307      	str	r3, [sp, #28]
 800f992:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f996:	931a      	str	r3, [sp, #104]	; 0x68
 800f998:	4654      	mov	r4, sl
 800f99a:	2205      	movs	r2, #5
 800f99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9a0:	4851      	ldr	r0, [pc, #324]	; (800fae8 <_svfiprintf_r+0x1ec>)
 800f9a2:	f7f0 fc25 	bl	80001f0 <memchr>
 800f9a6:	9a04      	ldr	r2, [sp, #16]
 800f9a8:	b9d8      	cbnz	r0, 800f9e2 <_svfiprintf_r+0xe6>
 800f9aa:	06d0      	lsls	r0, r2, #27
 800f9ac:	bf44      	itt	mi
 800f9ae:	2320      	movmi	r3, #32
 800f9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9b4:	0711      	lsls	r1, r2, #28
 800f9b6:	bf44      	itt	mi
 800f9b8:	232b      	movmi	r3, #43	; 0x2b
 800f9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9be:	f89a 3000 	ldrb.w	r3, [sl]
 800f9c2:	2b2a      	cmp	r3, #42	; 0x2a
 800f9c4:	d015      	beq.n	800f9f2 <_svfiprintf_r+0xf6>
 800f9c6:	9a07      	ldr	r2, [sp, #28]
 800f9c8:	4654      	mov	r4, sl
 800f9ca:	2000      	movs	r0, #0
 800f9cc:	f04f 0c0a 	mov.w	ip, #10
 800f9d0:	4621      	mov	r1, r4
 800f9d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9d6:	3b30      	subs	r3, #48	; 0x30
 800f9d8:	2b09      	cmp	r3, #9
 800f9da:	d94e      	bls.n	800fa7a <_svfiprintf_r+0x17e>
 800f9dc:	b1b0      	cbz	r0, 800fa0c <_svfiprintf_r+0x110>
 800f9de:	9207      	str	r2, [sp, #28]
 800f9e0:	e014      	b.n	800fa0c <_svfiprintf_r+0x110>
 800f9e2:	eba0 0308 	sub.w	r3, r0, r8
 800f9e6:	fa09 f303 	lsl.w	r3, r9, r3
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	9304      	str	r3, [sp, #16]
 800f9ee:	46a2      	mov	sl, r4
 800f9f0:	e7d2      	b.n	800f998 <_svfiprintf_r+0x9c>
 800f9f2:	9b03      	ldr	r3, [sp, #12]
 800f9f4:	1d19      	adds	r1, r3, #4
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	9103      	str	r1, [sp, #12]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	bfbb      	ittet	lt
 800f9fe:	425b      	neglt	r3, r3
 800fa00:	f042 0202 	orrlt.w	r2, r2, #2
 800fa04:	9307      	strge	r3, [sp, #28]
 800fa06:	9307      	strlt	r3, [sp, #28]
 800fa08:	bfb8      	it	lt
 800fa0a:	9204      	strlt	r2, [sp, #16]
 800fa0c:	7823      	ldrb	r3, [r4, #0]
 800fa0e:	2b2e      	cmp	r3, #46	; 0x2e
 800fa10:	d10c      	bne.n	800fa2c <_svfiprintf_r+0x130>
 800fa12:	7863      	ldrb	r3, [r4, #1]
 800fa14:	2b2a      	cmp	r3, #42	; 0x2a
 800fa16:	d135      	bne.n	800fa84 <_svfiprintf_r+0x188>
 800fa18:	9b03      	ldr	r3, [sp, #12]
 800fa1a:	1d1a      	adds	r2, r3, #4
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	9203      	str	r2, [sp, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	bfb8      	it	lt
 800fa24:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa28:	3402      	adds	r4, #2
 800fa2a:	9305      	str	r3, [sp, #20]
 800fa2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800faf8 <_svfiprintf_r+0x1fc>
 800fa30:	7821      	ldrb	r1, [r4, #0]
 800fa32:	2203      	movs	r2, #3
 800fa34:	4650      	mov	r0, sl
 800fa36:	f7f0 fbdb 	bl	80001f0 <memchr>
 800fa3a:	b140      	cbz	r0, 800fa4e <_svfiprintf_r+0x152>
 800fa3c:	2340      	movs	r3, #64	; 0x40
 800fa3e:	eba0 000a 	sub.w	r0, r0, sl
 800fa42:	fa03 f000 	lsl.w	r0, r3, r0
 800fa46:	9b04      	ldr	r3, [sp, #16]
 800fa48:	4303      	orrs	r3, r0
 800fa4a:	3401      	adds	r4, #1
 800fa4c:	9304      	str	r3, [sp, #16]
 800fa4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa52:	4826      	ldr	r0, [pc, #152]	; (800faec <_svfiprintf_r+0x1f0>)
 800fa54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa58:	2206      	movs	r2, #6
 800fa5a:	f7f0 fbc9 	bl	80001f0 <memchr>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d038      	beq.n	800fad4 <_svfiprintf_r+0x1d8>
 800fa62:	4b23      	ldr	r3, [pc, #140]	; (800faf0 <_svfiprintf_r+0x1f4>)
 800fa64:	bb1b      	cbnz	r3, 800faae <_svfiprintf_r+0x1b2>
 800fa66:	9b03      	ldr	r3, [sp, #12]
 800fa68:	3307      	adds	r3, #7
 800fa6a:	f023 0307 	bic.w	r3, r3, #7
 800fa6e:	3308      	adds	r3, #8
 800fa70:	9303      	str	r3, [sp, #12]
 800fa72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa74:	4433      	add	r3, r6
 800fa76:	9309      	str	r3, [sp, #36]	; 0x24
 800fa78:	e767      	b.n	800f94a <_svfiprintf_r+0x4e>
 800fa7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa7e:	460c      	mov	r4, r1
 800fa80:	2001      	movs	r0, #1
 800fa82:	e7a5      	b.n	800f9d0 <_svfiprintf_r+0xd4>
 800fa84:	2300      	movs	r3, #0
 800fa86:	3401      	adds	r4, #1
 800fa88:	9305      	str	r3, [sp, #20]
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	f04f 0c0a 	mov.w	ip, #10
 800fa90:	4620      	mov	r0, r4
 800fa92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa96:	3a30      	subs	r2, #48	; 0x30
 800fa98:	2a09      	cmp	r2, #9
 800fa9a:	d903      	bls.n	800faa4 <_svfiprintf_r+0x1a8>
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d0c5      	beq.n	800fa2c <_svfiprintf_r+0x130>
 800faa0:	9105      	str	r1, [sp, #20]
 800faa2:	e7c3      	b.n	800fa2c <_svfiprintf_r+0x130>
 800faa4:	fb0c 2101 	mla	r1, ip, r1, r2
 800faa8:	4604      	mov	r4, r0
 800faaa:	2301      	movs	r3, #1
 800faac:	e7f0      	b.n	800fa90 <_svfiprintf_r+0x194>
 800faae:	ab03      	add	r3, sp, #12
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	462a      	mov	r2, r5
 800fab4:	4b0f      	ldr	r3, [pc, #60]	; (800faf4 <_svfiprintf_r+0x1f8>)
 800fab6:	a904      	add	r1, sp, #16
 800fab8:	4638      	mov	r0, r7
 800faba:	f3af 8000 	nop.w
 800fabe:	1c42      	adds	r2, r0, #1
 800fac0:	4606      	mov	r6, r0
 800fac2:	d1d6      	bne.n	800fa72 <_svfiprintf_r+0x176>
 800fac4:	89ab      	ldrh	r3, [r5, #12]
 800fac6:	065b      	lsls	r3, r3, #25
 800fac8:	f53f af2c 	bmi.w	800f924 <_svfiprintf_r+0x28>
 800facc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800face:	b01d      	add	sp, #116	; 0x74
 800fad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fad4:	ab03      	add	r3, sp, #12
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	462a      	mov	r2, r5
 800fada:	4b06      	ldr	r3, [pc, #24]	; (800faf4 <_svfiprintf_r+0x1f8>)
 800fadc:	a904      	add	r1, sp, #16
 800fade:	4638      	mov	r0, r7
 800fae0:	f000 f87a 	bl	800fbd8 <_printf_i>
 800fae4:	e7eb      	b.n	800fabe <_svfiprintf_r+0x1c2>
 800fae6:	bf00      	nop
 800fae8:	08010b5c 	.word	0x08010b5c
 800faec:	08010b66 	.word	0x08010b66
 800faf0:	00000000 	.word	0x00000000
 800faf4:	0800f847 	.word	0x0800f847
 800faf8:	08010b62 	.word	0x08010b62

0800fafc <_printf_common>:
 800fafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb00:	4616      	mov	r6, r2
 800fb02:	4699      	mov	r9, r3
 800fb04:	688a      	ldr	r2, [r1, #8]
 800fb06:	690b      	ldr	r3, [r1, #16]
 800fb08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	bfb8      	it	lt
 800fb10:	4613      	movlt	r3, r2
 800fb12:	6033      	str	r3, [r6, #0]
 800fb14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb18:	4607      	mov	r7, r0
 800fb1a:	460c      	mov	r4, r1
 800fb1c:	b10a      	cbz	r2, 800fb22 <_printf_common+0x26>
 800fb1e:	3301      	adds	r3, #1
 800fb20:	6033      	str	r3, [r6, #0]
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	0699      	lsls	r1, r3, #26
 800fb26:	bf42      	ittt	mi
 800fb28:	6833      	ldrmi	r3, [r6, #0]
 800fb2a:	3302      	addmi	r3, #2
 800fb2c:	6033      	strmi	r3, [r6, #0]
 800fb2e:	6825      	ldr	r5, [r4, #0]
 800fb30:	f015 0506 	ands.w	r5, r5, #6
 800fb34:	d106      	bne.n	800fb44 <_printf_common+0x48>
 800fb36:	f104 0a19 	add.w	sl, r4, #25
 800fb3a:	68e3      	ldr	r3, [r4, #12]
 800fb3c:	6832      	ldr	r2, [r6, #0]
 800fb3e:	1a9b      	subs	r3, r3, r2
 800fb40:	42ab      	cmp	r3, r5
 800fb42:	dc26      	bgt.n	800fb92 <_printf_common+0x96>
 800fb44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb48:	1e13      	subs	r3, r2, #0
 800fb4a:	6822      	ldr	r2, [r4, #0]
 800fb4c:	bf18      	it	ne
 800fb4e:	2301      	movne	r3, #1
 800fb50:	0692      	lsls	r2, r2, #26
 800fb52:	d42b      	bmi.n	800fbac <_printf_common+0xb0>
 800fb54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb58:	4649      	mov	r1, r9
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	47c0      	blx	r8
 800fb5e:	3001      	adds	r0, #1
 800fb60:	d01e      	beq.n	800fba0 <_printf_common+0xa4>
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	68e5      	ldr	r5, [r4, #12]
 800fb66:	6832      	ldr	r2, [r6, #0]
 800fb68:	f003 0306 	and.w	r3, r3, #6
 800fb6c:	2b04      	cmp	r3, #4
 800fb6e:	bf08      	it	eq
 800fb70:	1aad      	subeq	r5, r5, r2
 800fb72:	68a3      	ldr	r3, [r4, #8]
 800fb74:	6922      	ldr	r2, [r4, #16]
 800fb76:	bf0c      	ite	eq
 800fb78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb7c:	2500      	movne	r5, #0
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	bfc4      	itt	gt
 800fb82:	1a9b      	subgt	r3, r3, r2
 800fb84:	18ed      	addgt	r5, r5, r3
 800fb86:	2600      	movs	r6, #0
 800fb88:	341a      	adds	r4, #26
 800fb8a:	42b5      	cmp	r5, r6
 800fb8c:	d11a      	bne.n	800fbc4 <_printf_common+0xc8>
 800fb8e:	2000      	movs	r0, #0
 800fb90:	e008      	b.n	800fba4 <_printf_common+0xa8>
 800fb92:	2301      	movs	r3, #1
 800fb94:	4652      	mov	r2, sl
 800fb96:	4649      	mov	r1, r9
 800fb98:	4638      	mov	r0, r7
 800fb9a:	47c0      	blx	r8
 800fb9c:	3001      	adds	r0, #1
 800fb9e:	d103      	bne.n	800fba8 <_printf_common+0xac>
 800fba0:	f04f 30ff 	mov.w	r0, #4294967295
 800fba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fba8:	3501      	adds	r5, #1
 800fbaa:	e7c6      	b.n	800fb3a <_printf_common+0x3e>
 800fbac:	18e1      	adds	r1, r4, r3
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	2030      	movs	r0, #48	; 0x30
 800fbb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbb6:	4422      	add	r2, r4
 800fbb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbc0:	3302      	adds	r3, #2
 800fbc2:	e7c7      	b.n	800fb54 <_printf_common+0x58>
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	4622      	mov	r2, r4
 800fbc8:	4649      	mov	r1, r9
 800fbca:	4638      	mov	r0, r7
 800fbcc:	47c0      	blx	r8
 800fbce:	3001      	adds	r0, #1
 800fbd0:	d0e6      	beq.n	800fba0 <_printf_common+0xa4>
 800fbd2:	3601      	adds	r6, #1
 800fbd4:	e7d9      	b.n	800fb8a <_printf_common+0x8e>
	...

0800fbd8 <_printf_i>:
 800fbd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbdc:	7e0f      	ldrb	r7, [r1, #24]
 800fbde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fbe0:	2f78      	cmp	r7, #120	; 0x78
 800fbe2:	4691      	mov	r9, r2
 800fbe4:	4680      	mov	r8, r0
 800fbe6:	460c      	mov	r4, r1
 800fbe8:	469a      	mov	sl, r3
 800fbea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fbee:	d807      	bhi.n	800fc00 <_printf_i+0x28>
 800fbf0:	2f62      	cmp	r7, #98	; 0x62
 800fbf2:	d80a      	bhi.n	800fc0a <_printf_i+0x32>
 800fbf4:	2f00      	cmp	r7, #0
 800fbf6:	f000 80d8 	beq.w	800fdaa <_printf_i+0x1d2>
 800fbfa:	2f58      	cmp	r7, #88	; 0x58
 800fbfc:	f000 80a3 	beq.w	800fd46 <_printf_i+0x16e>
 800fc00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc08:	e03a      	b.n	800fc80 <_printf_i+0xa8>
 800fc0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc0e:	2b15      	cmp	r3, #21
 800fc10:	d8f6      	bhi.n	800fc00 <_printf_i+0x28>
 800fc12:	a101      	add	r1, pc, #4	; (adr r1, 800fc18 <_printf_i+0x40>)
 800fc14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc18:	0800fc71 	.word	0x0800fc71
 800fc1c:	0800fc85 	.word	0x0800fc85
 800fc20:	0800fc01 	.word	0x0800fc01
 800fc24:	0800fc01 	.word	0x0800fc01
 800fc28:	0800fc01 	.word	0x0800fc01
 800fc2c:	0800fc01 	.word	0x0800fc01
 800fc30:	0800fc85 	.word	0x0800fc85
 800fc34:	0800fc01 	.word	0x0800fc01
 800fc38:	0800fc01 	.word	0x0800fc01
 800fc3c:	0800fc01 	.word	0x0800fc01
 800fc40:	0800fc01 	.word	0x0800fc01
 800fc44:	0800fd91 	.word	0x0800fd91
 800fc48:	0800fcb5 	.word	0x0800fcb5
 800fc4c:	0800fd73 	.word	0x0800fd73
 800fc50:	0800fc01 	.word	0x0800fc01
 800fc54:	0800fc01 	.word	0x0800fc01
 800fc58:	0800fdb3 	.word	0x0800fdb3
 800fc5c:	0800fc01 	.word	0x0800fc01
 800fc60:	0800fcb5 	.word	0x0800fcb5
 800fc64:	0800fc01 	.word	0x0800fc01
 800fc68:	0800fc01 	.word	0x0800fc01
 800fc6c:	0800fd7b 	.word	0x0800fd7b
 800fc70:	682b      	ldr	r3, [r5, #0]
 800fc72:	1d1a      	adds	r2, r3, #4
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	602a      	str	r2, [r5, #0]
 800fc78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc80:	2301      	movs	r3, #1
 800fc82:	e0a3      	b.n	800fdcc <_printf_i+0x1f4>
 800fc84:	6820      	ldr	r0, [r4, #0]
 800fc86:	6829      	ldr	r1, [r5, #0]
 800fc88:	0606      	lsls	r6, r0, #24
 800fc8a:	f101 0304 	add.w	r3, r1, #4
 800fc8e:	d50a      	bpl.n	800fca6 <_printf_i+0xce>
 800fc90:	680e      	ldr	r6, [r1, #0]
 800fc92:	602b      	str	r3, [r5, #0]
 800fc94:	2e00      	cmp	r6, #0
 800fc96:	da03      	bge.n	800fca0 <_printf_i+0xc8>
 800fc98:	232d      	movs	r3, #45	; 0x2d
 800fc9a:	4276      	negs	r6, r6
 800fc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fca0:	485e      	ldr	r0, [pc, #376]	; (800fe1c <_printf_i+0x244>)
 800fca2:	230a      	movs	r3, #10
 800fca4:	e019      	b.n	800fcda <_printf_i+0x102>
 800fca6:	680e      	ldr	r6, [r1, #0]
 800fca8:	602b      	str	r3, [r5, #0]
 800fcaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fcae:	bf18      	it	ne
 800fcb0:	b236      	sxthne	r6, r6
 800fcb2:	e7ef      	b.n	800fc94 <_printf_i+0xbc>
 800fcb4:	682b      	ldr	r3, [r5, #0]
 800fcb6:	6820      	ldr	r0, [r4, #0]
 800fcb8:	1d19      	adds	r1, r3, #4
 800fcba:	6029      	str	r1, [r5, #0]
 800fcbc:	0601      	lsls	r1, r0, #24
 800fcbe:	d501      	bpl.n	800fcc4 <_printf_i+0xec>
 800fcc0:	681e      	ldr	r6, [r3, #0]
 800fcc2:	e002      	b.n	800fcca <_printf_i+0xf2>
 800fcc4:	0646      	lsls	r6, r0, #25
 800fcc6:	d5fb      	bpl.n	800fcc0 <_printf_i+0xe8>
 800fcc8:	881e      	ldrh	r6, [r3, #0]
 800fcca:	4854      	ldr	r0, [pc, #336]	; (800fe1c <_printf_i+0x244>)
 800fccc:	2f6f      	cmp	r7, #111	; 0x6f
 800fcce:	bf0c      	ite	eq
 800fcd0:	2308      	moveq	r3, #8
 800fcd2:	230a      	movne	r3, #10
 800fcd4:	2100      	movs	r1, #0
 800fcd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcda:	6865      	ldr	r5, [r4, #4]
 800fcdc:	60a5      	str	r5, [r4, #8]
 800fcde:	2d00      	cmp	r5, #0
 800fce0:	bfa2      	ittt	ge
 800fce2:	6821      	ldrge	r1, [r4, #0]
 800fce4:	f021 0104 	bicge.w	r1, r1, #4
 800fce8:	6021      	strge	r1, [r4, #0]
 800fcea:	b90e      	cbnz	r6, 800fcf0 <_printf_i+0x118>
 800fcec:	2d00      	cmp	r5, #0
 800fcee:	d04d      	beq.n	800fd8c <_printf_i+0x1b4>
 800fcf0:	4615      	mov	r5, r2
 800fcf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fcf6:	fb03 6711 	mls	r7, r3, r1, r6
 800fcfa:	5dc7      	ldrb	r7, [r0, r7]
 800fcfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd00:	4637      	mov	r7, r6
 800fd02:	42bb      	cmp	r3, r7
 800fd04:	460e      	mov	r6, r1
 800fd06:	d9f4      	bls.n	800fcf2 <_printf_i+0x11a>
 800fd08:	2b08      	cmp	r3, #8
 800fd0a:	d10b      	bne.n	800fd24 <_printf_i+0x14c>
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	07de      	lsls	r6, r3, #31
 800fd10:	d508      	bpl.n	800fd24 <_printf_i+0x14c>
 800fd12:	6923      	ldr	r3, [r4, #16]
 800fd14:	6861      	ldr	r1, [r4, #4]
 800fd16:	4299      	cmp	r1, r3
 800fd18:	bfde      	ittt	le
 800fd1a:	2330      	movle	r3, #48	; 0x30
 800fd1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd24:	1b52      	subs	r2, r2, r5
 800fd26:	6122      	str	r2, [r4, #16]
 800fd28:	f8cd a000 	str.w	sl, [sp]
 800fd2c:	464b      	mov	r3, r9
 800fd2e:	aa03      	add	r2, sp, #12
 800fd30:	4621      	mov	r1, r4
 800fd32:	4640      	mov	r0, r8
 800fd34:	f7ff fee2 	bl	800fafc <_printf_common>
 800fd38:	3001      	adds	r0, #1
 800fd3a:	d14c      	bne.n	800fdd6 <_printf_i+0x1fe>
 800fd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd40:	b004      	add	sp, #16
 800fd42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd46:	4835      	ldr	r0, [pc, #212]	; (800fe1c <_printf_i+0x244>)
 800fd48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd4c:	6829      	ldr	r1, [r5, #0]
 800fd4e:	6823      	ldr	r3, [r4, #0]
 800fd50:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd54:	6029      	str	r1, [r5, #0]
 800fd56:	061d      	lsls	r5, r3, #24
 800fd58:	d514      	bpl.n	800fd84 <_printf_i+0x1ac>
 800fd5a:	07df      	lsls	r7, r3, #31
 800fd5c:	bf44      	itt	mi
 800fd5e:	f043 0320 	orrmi.w	r3, r3, #32
 800fd62:	6023      	strmi	r3, [r4, #0]
 800fd64:	b91e      	cbnz	r6, 800fd6e <_printf_i+0x196>
 800fd66:	6823      	ldr	r3, [r4, #0]
 800fd68:	f023 0320 	bic.w	r3, r3, #32
 800fd6c:	6023      	str	r3, [r4, #0]
 800fd6e:	2310      	movs	r3, #16
 800fd70:	e7b0      	b.n	800fcd4 <_printf_i+0xfc>
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	f043 0320 	orr.w	r3, r3, #32
 800fd78:	6023      	str	r3, [r4, #0]
 800fd7a:	2378      	movs	r3, #120	; 0x78
 800fd7c:	4828      	ldr	r0, [pc, #160]	; (800fe20 <_printf_i+0x248>)
 800fd7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd82:	e7e3      	b.n	800fd4c <_printf_i+0x174>
 800fd84:	0659      	lsls	r1, r3, #25
 800fd86:	bf48      	it	mi
 800fd88:	b2b6      	uxthmi	r6, r6
 800fd8a:	e7e6      	b.n	800fd5a <_printf_i+0x182>
 800fd8c:	4615      	mov	r5, r2
 800fd8e:	e7bb      	b.n	800fd08 <_printf_i+0x130>
 800fd90:	682b      	ldr	r3, [r5, #0]
 800fd92:	6826      	ldr	r6, [r4, #0]
 800fd94:	6961      	ldr	r1, [r4, #20]
 800fd96:	1d18      	adds	r0, r3, #4
 800fd98:	6028      	str	r0, [r5, #0]
 800fd9a:	0635      	lsls	r5, r6, #24
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	d501      	bpl.n	800fda4 <_printf_i+0x1cc>
 800fda0:	6019      	str	r1, [r3, #0]
 800fda2:	e002      	b.n	800fdaa <_printf_i+0x1d2>
 800fda4:	0670      	lsls	r0, r6, #25
 800fda6:	d5fb      	bpl.n	800fda0 <_printf_i+0x1c8>
 800fda8:	8019      	strh	r1, [r3, #0]
 800fdaa:	2300      	movs	r3, #0
 800fdac:	6123      	str	r3, [r4, #16]
 800fdae:	4615      	mov	r5, r2
 800fdb0:	e7ba      	b.n	800fd28 <_printf_i+0x150>
 800fdb2:	682b      	ldr	r3, [r5, #0]
 800fdb4:	1d1a      	adds	r2, r3, #4
 800fdb6:	602a      	str	r2, [r5, #0]
 800fdb8:	681d      	ldr	r5, [r3, #0]
 800fdba:	6862      	ldr	r2, [r4, #4]
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	f7f0 fa16 	bl	80001f0 <memchr>
 800fdc4:	b108      	cbz	r0, 800fdca <_printf_i+0x1f2>
 800fdc6:	1b40      	subs	r0, r0, r5
 800fdc8:	6060      	str	r0, [r4, #4]
 800fdca:	6863      	ldr	r3, [r4, #4]
 800fdcc:	6123      	str	r3, [r4, #16]
 800fdce:	2300      	movs	r3, #0
 800fdd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdd4:	e7a8      	b.n	800fd28 <_printf_i+0x150>
 800fdd6:	6923      	ldr	r3, [r4, #16]
 800fdd8:	462a      	mov	r2, r5
 800fdda:	4649      	mov	r1, r9
 800fddc:	4640      	mov	r0, r8
 800fdde:	47d0      	blx	sl
 800fde0:	3001      	adds	r0, #1
 800fde2:	d0ab      	beq.n	800fd3c <_printf_i+0x164>
 800fde4:	6823      	ldr	r3, [r4, #0]
 800fde6:	079b      	lsls	r3, r3, #30
 800fde8:	d413      	bmi.n	800fe12 <_printf_i+0x23a>
 800fdea:	68e0      	ldr	r0, [r4, #12]
 800fdec:	9b03      	ldr	r3, [sp, #12]
 800fdee:	4298      	cmp	r0, r3
 800fdf0:	bfb8      	it	lt
 800fdf2:	4618      	movlt	r0, r3
 800fdf4:	e7a4      	b.n	800fd40 <_printf_i+0x168>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	4632      	mov	r2, r6
 800fdfa:	4649      	mov	r1, r9
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	47d0      	blx	sl
 800fe00:	3001      	adds	r0, #1
 800fe02:	d09b      	beq.n	800fd3c <_printf_i+0x164>
 800fe04:	3501      	adds	r5, #1
 800fe06:	68e3      	ldr	r3, [r4, #12]
 800fe08:	9903      	ldr	r1, [sp, #12]
 800fe0a:	1a5b      	subs	r3, r3, r1
 800fe0c:	42ab      	cmp	r3, r5
 800fe0e:	dcf2      	bgt.n	800fdf6 <_printf_i+0x21e>
 800fe10:	e7eb      	b.n	800fdea <_printf_i+0x212>
 800fe12:	2500      	movs	r5, #0
 800fe14:	f104 0619 	add.w	r6, r4, #25
 800fe18:	e7f5      	b.n	800fe06 <_printf_i+0x22e>
 800fe1a:	bf00      	nop
 800fe1c:	08010b6d 	.word	0x08010b6d
 800fe20:	08010b7e 	.word	0x08010b7e

0800fe24 <memmove>:
 800fe24:	4288      	cmp	r0, r1
 800fe26:	b510      	push	{r4, lr}
 800fe28:	eb01 0402 	add.w	r4, r1, r2
 800fe2c:	d902      	bls.n	800fe34 <memmove+0x10>
 800fe2e:	4284      	cmp	r4, r0
 800fe30:	4623      	mov	r3, r4
 800fe32:	d807      	bhi.n	800fe44 <memmove+0x20>
 800fe34:	1e43      	subs	r3, r0, #1
 800fe36:	42a1      	cmp	r1, r4
 800fe38:	d008      	beq.n	800fe4c <memmove+0x28>
 800fe3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe42:	e7f8      	b.n	800fe36 <memmove+0x12>
 800fe44:	4402      	add	r2, r0
 800fe46:	4601      	mov	r1, r0
 800fe48:	428a      	cmp	r2, r1
 800fe4a:	d100      	bne.n	800fe4e <memmove+0x2a>
 800fe4c:	bd10      	pop	{r4, pc}
 800fe4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe56:	e7f7      	b.n	800fe48 <memmove+0x24>

0800fe58 <_malloc_usable_size_r>:
 800fe58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe5c:	1f18      	subs	r0, r3, #4
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	bfbc      	itt	lt
 800fe62:	580b      	ldrlt	r3, [r1, r0]
 800fe64:	18c0      	addlt	r0, r0, r3
 800fe66:	4770      	bx	lr

0800fe68 <atan>:
 800fe68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6c:	ec55 4b10 	vmov	r4, r5, d0
 800fe70:	4bc3      	ldr	r3, [pc, #780]	; (8010180 <atan+0x318>)
 800fe72:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fe76:	429e      	cmp	r6, r3
 800fe78:	46ab      	mov	fp, r5
 800fe7a:	dd18      	ble.n	800feae <atan+0x46>
 800fe7c:	4bc1      	ldr	r3, [pc, #772]	; (8010184 <atan+0x31c>)
 800fe7e:	429e      	cmp	r6, r3
 800fe80:	dc01      	bgt.n	800fe86 <atan+0x1e>
 800fe82:	d109      	bne.n	800fe98 <atan+0x30>
 800fe84:	b144      	cbz	r4, 800fe98 <atan+0x30>
 800fe86:	4622      	mov	r2, r4
 800fe88:	462b      	mov	r3, r5
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	f7f0 fa05 	bl	800029c <__adddf3>
 800fe92:	4604      	mov	r4, r0
 800fe94:	460d      	mov	r5, r1
 800fe96:	e006      	b.n	800fea6 <atan+0x3e>
 800fe98:	f1bb 0f00 	cmp.w	fp, #0
 800fe9c:	f300 8131 	bgt.w	8010102 <atan+0x29a>
 800fea0:	a59b      	add	r5, pc, #620	; (adr r5, 8010110 <atan+0x2a8>)
 800fea2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fea6:	ec45 4b10 	vmov	d0, r4, r5
 800feaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feae:	4bb6      	ldr	r3, [pc, #728]	; (8010188 <atan+0x320>)
 800feb0:	429e      	cmp	r6, r3
 800feb2:	dc14      	bgt.n	800fede <atan+0x76>
 800feb4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800feb8:	429e      	cmp	r6, r3
 800feba:	dc0d      	bgt.n	800fed8 <atan+0x70>
 800febc:	a396      	add	r3, pc, #600	; (adr r3, 8010118 <atan+0x2b0>)
 800febe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec2:	ee10 0a10 	vmov	r0, s0
 800fec6:	4629      	mov	r1, r5
 800fec8:	f7f0 f9e8 	bl	800029c <__adddf3>
 800fecc:	4baf      	ldr	r3, [pc, #700]	; (801018c <atan+0x324>)
 800fece:	2200      	movs	r2, #0
 800fed0:	f7f0 fe2a 	bl	8000b28 <__aeabi_dcmpgt>
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d1e6      	bne.n	800fea6 <atan+0x3e>
 800fed8:	f04f 3aff 	mov.w	sl, #4294967295
 800fedc:	e02b      	b.n	800ff36 <atan+0xce>
 800fede:	f000 f963 	bl	80101a8 <fabs>
 800fee2:	4bab      	ldr	r3, [pc, #684]	; (8010190 <atan+0x328>)
 800fee4:	429e      	cmp	r6, r3
 800fee6:	ec55 4b10 	vmov	r4, r5, d0
 800feea:	f300 80bf 	bgt.w	801006c <atan+0x204>
 800feee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fef2:	429e      	cmp	r6, r3
 800fef4:	f300 80a0 	bgt.w	8010038 <atan+0x1d0>
 800fef8:	ee10 2a10 	vmov	r2, s0
 800fefc:	ee10 0a10 	vmov	r0, s0
 800ff00:	462b      	mov	r3, r5
 800ff02:	4629      	mov	r1, r5
 800ff04:	f7f0 f9ca 	bl	800029c <__adddf3>
 800ff08:	4ba0      	ldr	r3, [pc, #640]	; (801018c <atan+0x324>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f7f0 f9c4 	bl	8000298 <__aeabi_dsub>
 800ff10:	2200      	movs	r2, #0
 800ff12:	4606      	mov	r6, r0
 800ff14:	460f      	mov	r7, r1
 800ff16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	f7f0 f9bd 	bl	800029c <__adddf3>
 800ff22:	4602      	mov	r2, r0
 800ff24:	460b      	mov	r3, r1
 800ff26:	4630      	mov	r0, r6
 800ff28:	4639      	mov	r1, r7
 800ff2a:	f7f0 fc97 	bl	800085c <__aeabi_ddiv>
 800ff2e:	f04f 0a00 	mov.w	sl, #0
 800ff32:	4604      	mov	r4, r0
 800ff34:	460d      	mov	r5, r1
 800ff36:	4622      	mov	r2, r4
 800ff38:	462b      	mov	r3, r5
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	f7f0 fb63 	bl	8000608 <__aeabi_dmul>
 800ff42:	4602      	mov	r2, r0
 800ff44:	460b      	mov	r3, r1
 800ff46:	4680      	mov	r8, r0
 800ff48:	4689      	mov	r9, r1
 800ff4a:	f7f0 fb5d 	bl	8000608 <__aeabi_dmul>
 800ff4e:	a374      	add	r3, pc, #464	; (adr r3, 8010120 <atan+0x2b8>)
 800ff50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff54:	4606      	mov	r6, r0
 800ff56:	460f      	mov	r7, r1
 800ff58:	f7f0 fb56 	bl	8000608 <__aeabi_dmul>
 800ff5c:	a372      	add	r3, pc, #456	; (adr r3, 8010128 <atan+0x2c0>)
 800ff5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff62:	f7f0 f99b 	bl	800029c <__adddf3>
 800ff66:	4632      	mov	r2, r6
 800ff68:	463b      	mov	r3, r7
 800ff6a:	f7f0 fb4d 	bl	8000608 <__aeabi_dmul>
 800ff6e:	a370      	add	r3, pc, #448	; (adr r3, 8010130 <atan+0x2c8>)
 800ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff74:	f7f0 f992 	bl	800029c <__adddf3>
 800ff78:	4632      	mov	r2, r6
 800ff7a:	463b      	mov	r3, r7
 800ff7c:	f7f0 fb44 	bl	8000608 <__aeabi_dmul>
 800ff80:	a36d      	add	r3, pc, #436	; (adr r3, 8010138 <atan+0x2d0>)
 800ff82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff86:	f7f0 f989 	bl	800029c <__adddf3>
 800ff8a:	4632      	mov	r2, r6
 800ff8c:	463b      	mov	r3, r7
 800ff8e:	f7f0 fb3b 	bl	8000608 <__aeabi_dmul>
 800ff92:	a36b      	add	r3, pc, #428	; (adr r3, 8010140 <atan+0x2d8>)
 800ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff98:	f7f0 f980 	bl	800029c <__adddf3>
 800ff9c:	4632      	mov	r2, r6
 800ff9e:	463b      	mov	r3, r7
 800ffa0:	f7f0 fb32 	bl	8000608 <__aeabi_dmul>
 800ffa4:	a368      	add	r3, pc, #416	; (adr r3, 8010148 <atan+0x2e0>)
 800ffa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffaa:	f7f0 f977 	bl	800029c <__adddf3>
 800ffae:	4642      	mov	r2, r8
 800ffb0:	464b      	mov	r3, r9
 800ffb2:	f7f0 fb29 	bl	8000608 <__aeabi_dmul>
 800ffb6:	a366      	add	r3, pc, #408	; (adr r3, 8010150 <atan+0x2e8>)
 800ffb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbc:	4680      	mov	r8, r0
 800ffbe:	4689      	mov	r9, r1
 800ffc0:	4630      	mov	r0, r6
 800ffc2:	4639      	mov	r1, r7
 800ffc4:	f7f0 fb20 	bl	8000608 <__aeabi_dmul>
 800ffc8:	a363      	add	r3, pc, #396	; (adr r3, 8010158 <atan+0x2f0>)
 800ffca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffce:	f7f0 f963 	bl	8000298 <__aeabi_dsub>
 800ffd2:	4632      	mov	r2, r6
 800ffd4:	463b      	mov	r3, r7
 800ffd6:	f7f0 fb17 	bl	8000608 <__aeabi_dmul>
 800ffda:	a361      	add	r3, pc, #388	; (adr r3, 8010160 <atan+0x2f8>)
 800ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe0:	f7f0 f95a 	bl	8000298 <__aeabi_dsub>
 800ffe4:	4632      	mov	r2, r6
 800ffe6:	463b      	mov	r3, r7
 800ffe8:	f7f0 fb0e 	bl	8000608 <__aeabi_dmul>
 800ffec:	a35e      	add	r3, pc, #376	; (adr r3, 8010168 <atan+0x300>)
 800ffee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff2:	f7f0 f951 	bl	8000298 <__aeabi_dsub>
 800fff6:	4632      	mov	r2, r6
 800fff8:	463b      	mov	r3, r7
 800fffa:	f7f0 fb05 	bl	8000608 <__aeabi_dmul>
 800fffe:	a35c      	add	r3, pc, #368	; (adr r3, 8010170 <atan+0x308>)
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	f7f0 f948 	bl	8000298 <__aeabi_dsub>
 8010008:	4632      	mov	r2, r6
 801000a:	463b      	mov	r3, r7
 801000c:	f7f0 fafc 	bl	8000608 <__aeabi_dmul>
 8010010:	4602      	mov	r2, r0
 8010012:	460b      	mov	r3, r1
 8010014:	4640      	mov	r0, r8
 8010016:	4649      	mov	r1, r9
 8010018:	f7f0 f940 	bl	800029c <__adddf3>
 801001c:	4622      	mov	r2, r4
 801001e:	462b      	mov	r3, r5
 8010020:	f7f0 faf2 	bl	8000608 <__aeabi_dmul>
 8010024:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	d14b      	bne.n	80100c6 <atan+0x25e>
 801002e:	4620      	mov	r0, r4
 8010030:	4629      	mov	r1, r5
 8010032:	f7f0 f931 	bl	8000298 <__aeabi_dsub>
 8010036:	e72c      	b.n	800fe92 <atan+0x2a>
 8010038:	ee10 0a10 	vmov	r0, s0
 801003c:	4b53      	ldr	r3, [pc, #332]	; (801018c <atan+0x324>)
 801003e:	2200      	movs	r2, #0
 8010040:	4629      	mov	r1, r5
 8010042:	f7f0 f929 	bl	8000298 <__aeabi_dsub>
 8010046:	4b51      	ldr	r3, [pc, #324]	; (801018c <atan+0x324>)
 8010048:	4606      	mov	r6, r0
 801004a:	460f      	mov	r7, r1
 801004c:	2200      	movs	r2, #0
 801004e:	4620      	mov	r0, r4
 8010050:	4629      	mov	r1, r5
 8010052:	f7f0 f923 	bl	800029c <__adddf3>
 8010056:	4602      	mov	r2, r0
 8010058:	460b      	mov	r3, r1
 801005a:	4630      	mov	r0, r6
 801005c:	4639      	mov	r1, r7
 801005e:	f7f0 fbfd 	bl	800085c <__aeabi_ddiv>
 8010062:	f04f 0a01 	mov.w	sl, #1
 8010066:	4604      	mov	r4, r0
 8010068:	460d      	mov	r5, r1
 801006a:	e764      	b.n	800ff36 <atan+0xce>
 801006c:	4b49      	ldr	r3, [pc, #292]	; (8010194 <atan+0x32c>)
 801006e:	429e      	cmp	r6, r3
 8010070:	da1d      	bge.n	80100ae <atan+0x246>
 8010072:	ee10 0a10 	vmov	r0, s0
 8010076:	4b48      	ldr	r3, [pc, #288]	; (8010198 <atan+0x330>)
 8010078:	2200      	movs	r2, #0
 801007a:	4629      	mov	r1, r5
 801007c:	f7f0 f90c 	bl	8000298 <__aeabi_dsub>
 8010080:	4b45      	ldr	r3, [pc, #276]	; (8010198 <atan+0x330>)
 8010082:	4606      	mov	r6, r0
 8010084:	460f      	mov	r7, r1
 8010086:	2200      	movs	r2, #0
 8010088:	4620      	mov	r0, r4
 801008a:	4629      	mov	r1, r5
 801008c:	f7f0 fabc 	bl	8000608 <__aeabi_dmul>
 8010090:	4b3e      	ldr	r3, [pc, #248]	; (801018c <atan+0x324>)
 8010092:	2200      	movs	r2, #0
 8010094:	f7f0 f902 	bl	800029c <__adddf3>
 8010098:	4602      	mov	r2, r0
 801009a:	460b      	mov	r3, r1
 801009c:	4630      	mov	r0, r6
 801009e:	4639      	mov	r1, r7
 80100a0:	f7f0 fbdc 	bl	800085c <__aeabi_ddiv>
 80100a4:	f04f 0a02 	mov.w	sl, #2
 80100a8:	4604      	mov	r4, r0
 80100aa:	460d      	mov	r5, r1
 80100ac:	e743      	b.n	800ff36 <atan+0xce>
 80100ae:	462b      	mov	r3, r5
 80100b0:	ee10 2a10 	vmov	r2, s0
 80100b4:	4939      	ldr	r1, [pc, #228]	; (801019c <atan+0x334>)
 80100b6:	2000      	movs	r0, #0
 80100b8:	f7f0 fbd0 	bl	800085c <__aeabi_ddiv>
 80100bc:	f04f 0a03 	mov.w	sl, #3
 80100c0:	4604      	mov	r4, r0
 80100c2:	460d      	mov	r5, r1
 80100c4:	e737      	b.n	800ff36 <atan+0xce>
 80100c6:	4b36      	ldr	r3, [pc, #216]	; (80101a0 <atan+0x338>)
 80100c8:	4e36      	ldr	r6, [pc, #216]	; (80101a4 <atan+0x33c>)
 80100ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80100ce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80100d2:	e9da 2300 	ldrd	r2, r3, [sl]
 80100d6:	f7f0 f8df 	bl	8000298 <__aeabi_dsub>
 80100da:	4622      	mov	r2, r4
 80100dc:	462b      	mov	r3, r5
 80100de:	f7f0 f8db 	bl	8000298 <__aeabi_dsub>
 80100e2:	4602      	mov	r2, r0
 80100e4:	460b      	mov	r3, r1
 80100e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80100ea:	f7f0 f8d5 	bl	8000298 <__aeabi_dsub>
 80100ee:	f1bb 0f00 	cmp.w	fp, #0
 80100f2:	4604      	mov	r4, r0
 80100f4:	460d      	mov	r5, r1
 80100f6:	f6bf aed6 	bge.w	800fea6 <atan+0x3e>
 80100fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100fe:	461d      	mov	r5, r3
 8010100:	e6d1      	b.n	800fea6 <atan+0x3e>
 8010102:	a51d      	add	r5, pc, #116	; (adr r5, 8010178 <atan+0x310>)
 8010104:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010108:	e6cd      	b.n	800fea6 <atan+0x3e>
 801010a:	bf00      	nop
 801010c:	f3af 8000 	nop.w
 8010110:	54442d18 	.word	0x54442d18
 8010114:	bff921fb 	.word	0xbff921fb
 8010118:	8800759c 	.word	0x8800759c
 801011c:	7e37e43c 	.word	0x7e37e43c
 8010120:	e322da11 	.word	0xe322da11
 8010124:	3f90ad3a 	.word	0x3f90ad3a
 8010128:	24760deb 	.word	0x24760deb
 801012c:	3fa97b4b 	.word	0x3fa97b4b
 8010130:	a0d03d51 	.word	0xa0d03d51
 8010134:	3fb10d66 	.word	0x3fb10d66
 8010138:	c54c206e 	.word	0xc54c206e
 801013c:	3fb745cd 	.word	0x3fb745cd
 8010140:	920083ff 	.word	0x920083ff
 8010144:	3fc24924 	.word	0x3fc24924
 8010148:	5555550d 	.word	0x5555550d
 801014c:	3fd55555 	.word	0x3fd55555
 8010150:	2c6a6c2f 	.word	0x2c6a6c2f
 8010154:	bfa2b444 	.word	0xbfa2b444
 8010158:	52defd9a 	.word	0x52defd9a
 801015c:	3fadde2d 	.word	0x3fadde2d
 8010160:	af749a6d 	.word	0xaf749a6d
 8010164:	3fb3b0f2 	.word	0x3fb3b0f2
 8010168:	fe231671 	.word	0xfe231671
 801016c:	3fbc71c6 	.word	0x3fbc71c6
 8010170:	9998ebc4 	.word	0x9998ebc4
 8010174:	3fc99999 	.word	0x3fc99999
 8010178:	54442d18 	.word	0x54442d18
 801017c:	3ff921fb 	.word	0x3ff921fb
 8010180:	440fffff 	.word	0x440fffff
 8010184:	7ff00000 	.word	0x7ff00000
 8010188:	3fdbffff 	.word	0x3fdbffff
 801018c:	3ff00000 	.word	0x3ff00000
 8010190:	3ff2ffff 	.word	0x3ff2ffff
 8010194:	40038000 	.word	0x40038000
 8010198:	3ff80000 	.word	0x3ff80000
 801019c:	bff00000 	.word	0xbff00000
 80101a0:	08010bb0 	.word	0x08010bb0
 80101a4:	08010b90 	.word	0x08010b90

080101a8 <fabs>:
 80101a8:	ec51 0b10 	vmov	r0, r1, d0
 80101ac:	ee10 2a10 	vmov	r2, s0
 80101b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80101b4:	ec43 2b10 	vmov	d0, r2, r3
 80101b8:	4770      	bx	lr

080101ba <atan2>:
 80101ba:	f000 b82d 	b.w	8010218 <__ieee754_atan2>

080101be <sqrt>:
 80101be:	b538      	push	{r3, r4, r5, lr}
 80101c0:	ed2d 8b02 	vpush	{d8}
 80101c4:	ec55 4b10 	vmov	r4, r5, d0
 80101c8:	f000 f8f0 	bl	80103ac <__ieee754_sqrt>
 80101cc:	4622      	mov	r2, r4
 80101ce:	462b      	mov	r3, r5
 80101d0:	4620      	mov	r0, r4
 80101d2:	4629      	mov	r1, r5
 80101d4:	eeb0 8a40 	vmov.f32	s16, s0
 80101d8:	eef0 8a60 	vmov.f32	s17, s1
 80101dc:	f7f0 fcae 	bl	8000b3c <__aeabi_dcmpun>
 80101e0:	b990      	cbnz	r0, 8010208 <sqrt+0x4a>
 80101e2:	2200      	movs	r2, #0
 80101e4:	2300      	movs	r3, #0
 80101e6:	4620      	mov	r0, r4
 80101e8:	4629      	mov	r1, r5
 80101ea:	f7f0 fc7f 	bl	8000aec <__aeabi_dcmplt>
 80101ee:	b158      	cbz	r0, 8010208 <sqrt+0x4a>
 80101f0:	f7ff f8cc 	bl	800f38c <__errno>
 80101f4:	2321      	movs	r3, #33	; 0x21
 80101f6:	6003      	str	r3, [r0, #0]
 80101f8:	2200      	movs	r2, #0
 80101fa:	2300      	movs	r3, #0
 80101fc:	4610      	mov	r0, r2
 80101fe:	4619      	mov	r1, r3
 8010200:	f7f0 fb2c 	bl	800085c <__aeabi_ddiv>
 8010204:	ec41 0b18 	vmov	d8, r0, r1
 8010208:	eeb0 0a48 	vmov.f32	s0, s16
 801020c:	eef0 0a68 	vmov.f32	s1, s17
 8010210:	ecbd 8b02 	vpop	{d8}
 8010214:	bd38      	pop	{r3, r4, r5, pc}
	...

08010218 <__ieee754_atan2>:
 8010218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801021c:	ec57 6b11 	vmov	r6, r7, d1
 8010220:	4273      	negs	r3, r6
 8010222:	f8df e184 	ldr.w	lr, [pc, #388]	; 80103a8 <__ieee754_atan2+0x190>
 8010226:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801022a:	4333      	orrs	r3, r6
 801022c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010230:	4573      	cmp	r3, lr
 8010232:	ec51 0b10 	vmov	r0, r1, d0
 8010236:	ee11 8a10 	vmov	r8, s2
 801023a:	d80a      	bhi.n	8010252 <__ieee754_atan2+0x3a>
 801023c:	4244      	negs	r4, r0
 801023e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010242:	4304      	orrs	r4, r0
 8010244:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010248:	4574      	cmp	r4, lr
 801024a:	ee10 9a10 	vmov	r9, s0
 801024e:	468c      	mov	ip, r1
 8010250:	d907      	bls.n	8010262 <__ieee754_atan2+0x4a>
 8010252:	4632      	mov	r2, r6
 8010254:	463b      	mov	r3, r7
 8010256:	f7f0 f821 	bl	800029c <__adddf3>
 801025a:	ec41 0b10 	vmov	d0, r0, r1
 801025e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010262:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010266:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801026a:	4334      	orrs	r4, r6
 801026c:	d103      	bne.n	8010276 <__ieee754_atan2+0x5e>
 801026e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010272:	f7ff bdf9 	b.w	800fe68 <atan>
 8010276:	17bc      	asrs	r4, r7, #30
 8010278:	f004 0402 	and.w	r4, r4, #2
 801027c:	ea53 0909 	orrs.w	r9, r3, r9
 8010280:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010284:	d107      	bne.n	8010296 <__ieee754_atan2+0x7e>
 8010286:	2c02      	cmp	r4, #2
 8010288:	d060      	beq.n	801034c <__ieee754_atan2+0x134>
 801028a:	2c03      	cmp	r4, #3
 801028c:	d1e5      	bne.n	801025a <__ieee754_atan2+0x42>
 801028e:	a142      	add	r1, pc, #264	; (adr r1, 8010398 <__ieee754_atan2+0x180>)
 8010290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010294:	e7e1      	b.n	801025a <__ieee754_atan2+0x42>
 8010296:	ea52 0808 	orrs.w	r8, r2, r8
 801029a:	d106      	bne.n	80102aa <__ieee754_atan2+0x92>
 801029c:	f1bc 0f00 	cmp.w	ip, #0
 80102a0:	da5f      	bge.n	8010362 <__ieee754_atan2+0x14a>
 80102a2:	a13f      	add	r1, pc, #252	; (adr r1, 80103a0 <__ieee754_atan2+0x188>)
 80102a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102a8:	e7d7      	b.n	801025a <__ieee754_atan2+0x42>
 80102aa:	4572      	cmp	r2, lr
 80102ac:	d10f      	bne.n	80102ce <__ieee754_atan2+0xb6>
 80102ae:	4293      	cmp	r3, r2
 80102b0:	f104 34ff 	add.w	r4, r4, #4294967295
 80102b4:	d107      	bne.n	80102c6 <__ieee754_atan2+0xae>
 80102b6:	2c02      	cmp	r4, #2
 80102b8:	d84c      	bhi.n	8010354 <__ieee754_atan2+0x13c>
 80102ba:	4b35      	ldr	r3, [pc, #212]	; (8010390 <__ieee754_atan2+0x178>)
 80102bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80102c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80102c4:	e7c9      	b.n	801025a <__ieee754_atan2+0x42>
 80102c6:	2c02      	cmp	r4, #2
 80102c8:	d848      	bhi.n	801035c <__ieee754_atan2+0x144>
 80102ca:	4b32      	ldr	r3, [pc, #200]	; (8010394 <__ieee754_atan2+0x17c>)
 80102cc:	e7f6      	b.n	80102bc <__ieee754_atan2+0xa4>
 80102ce:	4573      	cmp	r3, lr
 80102d0:	d0e4      	beq.n	801029c <__ieee754_atan2+0x84>
 80102d2:	1a9b      	subs	r3, r3, r2
 80102d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80102d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80102dc:	da1e      	bge.n	801031c <__ieee754_atan2+0x104>
 80102de:	2f00      	cmp	r7, #0
 80102e0:	da01      	bge.n	80102e6 <__ieee754_atan2+0xce>
 80102e2:	323c      	adds	r2, #60	; 0x3c
 80102e4:	db1e      	blt.n	8010324 <__ieee754_atan2+0x10c>
 80102e6:	4632      	mov	r2, r6
 80102e8:	463b      	mov	r3, r7
 80102ea:	f7f0 fab7 	bl	800085c <__aeabi_ddiv>
 80102ee:	ec41 0b10 	vmov	d0, r0, r1
 80102f2:	f7ff ff59 	bl	80101a8 <fabs>
 80102f6:	f7ff fdb7 	bl	800fe68 <atan>
 80102fa:	ec51 0b10 	vmov	r0, r1, d0
 80102fe:	2c01      	cmp	r4, #1
 8010300:	d013      	beq.n	801032a <__ieee754_atan2+0x112>
 8010302:	2c02      	cmp	r4, #2
 8010304:	d015      	beq.n	8010332 <__ieee754_atan2+0x11a>
 8010306:	2c00      	cmp	r4, #0
 8010308:	d0a7      	beq.n	801025a <__ieee754_atan2+0x42>
 801030a:	a319      	add	r3, pc, #100	; (adr r3, 8010370 <__ieee754_atan2+0x158>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	f7ef ffc2 	bl	8000298 <__aeabi_dsub>
 8010314:	a318      	add	r3, pc, #96	; (adr r3, 8010378 <__ieee754_atan2+0x160>)
 8010316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031a:	e014      	b.n	8010346 <__ieee754_atan2+0x12e>
 801031c:	a118      	add	r1, pc, #96	; (adr r1, 8010380 <__ieee754_atan2+0x168>)
 801031e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010322:	e7ec      	b.n	80102fe <__ieee754_atan2+0xe6>
 8010324:	2000      	movs	r0, #0
 8010326:	2100      	movs	r1, #0
 8010328:	e7e9      	b.n	80102fe <__ieee754_atan2+0xe6>
 801032a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801032e:	4619      	mov	r1, r3
 8010330:	e793      	b.n	801025a <__ieee754_atan2+0x42>
 8010332:	a30f      	add	r3, pc, #60	; (adr r3, 8010370 <__ieee754_atan2+0x158>)
 8010334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010338:	f7ef ffae 	bl	8000298 <__aeabi_dsub>
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	a10d      	add	r1, pc, #52	; (adr r1, 8010378 <__ieee754_atan2+0x160>)
 8010342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010346:	f7ef ffa7 	bl	8000298 <__aeabi_dsub>
 801034a:	e786      	b.n	801025a <__ieee754_atan2+0x42>
 801034c:	a10a      	add	r1, pc, #40	; (adr r1, 8010378 <__ieee754_atan2+0x160>)
 801034e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010352:	e782      	b.n	801025a <__ieee754_atan2+0x42>
 8010354:	a10c      	add	r1, pc, #48	; (adr r1, 8010388 <__ieee754_atan2+0x170>)
 8010356:	e9d1 0100 	ldrd	r0, r1, [r1]
 801035a:	e77e      	b.n	801025a <__ieee754_atan2+0x42>
 801035c:	2000      	movs	r0, #0
 801035e:	2100      	movs	r1, #0
 8010360:	e77b      	b.n	801025a <__ieee754_atan2+0x42>
 8010362:	a107      	add	r1, pc, #28	; (adr r1, 8010380 <__ieee754_atan2+0x168>)
 8010364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010368:	e777      	b.n	801025a <__ieee754_atan2+0x42>
 801036a:	bf00      	nop
 801036c:	f3af 8000 	nop.w
 8010370:	33145c07 	.word	0x33145c07
 8010374:	3ca1a626 	.word	0x3ca1a626
 8010378:	54442d18 	.word	0x54442d18
 801037c:	400921fb 	.word	0x400921fb
 8010380:	54442d18 	.word	0x54442d18
 8010384:	3ff921fb 	.word	0x3ff921fb
 8010388:	54442d18 	.word	0x54442d18
 801038c:	3fe921fb 	.word	0x3fe921fb
 8010390:	08010bd0 	.word	0x08010bd0
 8010394:	08010be8 	.word	0x08010be8
 8010398:	54442d18 	.word	0x54442d18
 801039c:	c00921fb 	.word	0xc00921fb
 80103a0:	54442d18 	.word	0x54442d18
 80103a4:	bff921fb 	.word	0xbff921fb
 80103a8:	7ff00000 	.word	0x7ff00000

080103ac <__ieee754_sqrt>:
 80103ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b0:	ec55 4b10 	vmov	r4, r5, d0
 80103b4:	4e55      	ldr	r6, [pc, #340]	; (801050c <__ieee754_sqrt+0x160>)
 80103b6:	43ae      	bics	r6, r5
 80103b8:	ee10 0a10 	vmov	r0, s0
 80103bc:	ee10 3a10 	vmov	r3, s0
 80103c0:	462a      	mov	r2, r5
 80103c2:	4629      	mov	r1, r5
 80103c4:	d110      	bne.n	80103e8 <__ieee754_sqrt+0x3c>
 80103c6:	ee10 2a10 	vmov	r2, s0
 80103ca:	462b      	mov	r3, r5
 80103cc:	f7f0 f91c 	bl	8000608 <__aeabi_dmul>
 80103d0:	4602      	mov	r2, r0
 80103d2:	460b      	mov	r3, r1
 80103d4:	4620      	mov	r0, r4
 80103d6:	4629      	mov	r1, r5
 80103d8:	f7ef ff60 	bl	800029c <__adddf3>
 80103dc:	4604      	mov	r4, r0
 80103de:	460d      	mov	r5, r1
 80103e0:	ec45 4b10 	vmov	d0, r4, r5
 80103e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e8:	2d00      	cmp	r5, #0
 80103ea:	dc10      	bgt.n	801040e <__ieee754_sqrt+0x62>
 80103ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80103f0:	4330      	orrs	r0, r6
 80103f2:	d0f5      	beq.n	80103e0 <__ieee754_sqrt+0x34>
 80103f4:	b15d      	cbz	r5, 801040e <__ieee754_sqrt+0x62>
 80103f6:	ee10 2a10 	vmov	r2, s0
 80103fa:	462b      	mov	r3, r5
 80103fc:	ee10 0a10 	vmov	r0, s0
 8010400:	f7ef ff4a 	bl	8000298 <__aeabi_dsub>
 8010404:	4602      	mov	r2, r0
 8010406:	460b      	mov	r3, r1
 8010408:	f7f0 fa28 	bl	800085c <__aeabi_ddiv>
 801040c:	e7e6      	b.n	80103dc <__ieee754_sqrt+0x30>
 801040e:	1512      	asrs	r2, r2, #20
 8010410:	d074      	beq.n	80104fc <__ieee754_sqrt+0x150>
 8010412:	07d4      	lsls	r4, r2, #31
 8010414:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010418:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801041c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010420:	bf5e      	ittt	pl
 8010422:	0fda      	lsrpl	r2, r3, #31
 8010424:	005b      	lslpl	r3, r3, #1
 8010426:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801042a:	2400      	movs	r4, #0
 801042c:	0fda      	lsrs	r2, r3, #31
 801042e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010432:	107f      	asrs	r7, r7, #1
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	2516      	movs	r5, #22
 8010438:	4620      	mov	r0, r4
 801043a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801043e:	1886      	adds	r6, r0, r2
 8010440:	428e      	cmp	r6, r1
 8010442:	bfde      	ittt	le
 8010444:	1b89      	suble	r1, r1, r6
 8010446:	18b0      	addle	r0, r6, r2
 8010448:	18a4      	addle	r4, r4, r2
 801044a:	0049      	lsls	r1, r1, #1
 801044c:	3d01      	subs	r5, #1
 801044e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010452:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010456:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801045a:	d1f0      	bne.n	801043e <__ieee754_sqrt+0x92>
 801045c:	462a      	mov	r2, r5
 801045e:	f04f 0e20 	mov.w	lr, #32
 8010462:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010466:	4281      	cmp	r1, r0
 8010468:	eb06 0c05 	add.w	ip, r6, r5
 801046c:	dc02      	bgt.n	8010474 <__ieee754_sqrt+0xc8>
 801046e:	d113      	bne.n	8010498 <__ieee754_sqrt+0xec>
 8010470:	459c      	cmp	ip, r3
 8010472:	d811      	bhi.n	8010498 <__ieee754_sqrt+0xec>
 8010474:	f1bc 0f00 	cmp.w	ip, #0
 8010478:	eb0c 0506 	add.w	r5, ip, r6
 801047c:	da43      	bge.n	8010506 <__ieee754_sqrt+0x15a>
 801047e:	2d00      	cmp	r5, #0
 8010480:	db41      	blt.n	8010506 <__ieee754_sqrt+0x15a>
 8010482:	f100 0801 	add.w	r8, r0, #1
 8010486:	1a09      	subs	r1, r1, r0
 8010488:	459c      	cmp	ip, r3
 801048a:	bf88      	it	hi
 801048c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010490:	eba3 030c 	sub.w	r3, r3, ip
 8010494:	4432      	add	r2, r6
 8010496:	4640      	mov	r0, r8
 8010498:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801049c:	f1be 0e01 	subs.w	lr, lr, #1
 80104a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80104a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80104a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80104ac:	d1db      	bne.n	8010466 <__ieee754_sqrt+0xba>
 80104ae:	430b      	orrs	r3, r1
 80104b0:	d006      	beq.n	80104c0 <__ieee754_sqrt+0x114>
 80104b2:	1c50      	adds	r0, r2, #1
 80104b4:	bf13      	iteet	ne
 80104b6:	3201      	addne	r2, #1
 80104b8:	3401      	addeq	r4, #1
 80104ba:	4672      	moveq	r2, lr
 80104bc:	f022 0201 	bicne.w	r2, r2, #1
 80104c0:	1063      	asrs	r3, r4, #1
 80104c2:	0852      	lsrs	r2, r2, #1
 80104c4:	07e1      	lsls	r1, r4, #31
 80104c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80104ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80104ce:	bf48      	it	mi
 80104d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80104d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80104d8:	4614      	mov	r4, r2
 80104da:	e781      	b.n	80103e0 <__ieee754_sqrt+0x34>
 80104dc:	0ad9      	lsrs	r1, r3, #11
 80104de:	3815      	subs	r0, #21
 80104e0:	055b      	lsls	r3, r3, #21
 80104e2:	2900      	cmp	r1, #0
 80104e4:	d0fa      	beq.n	80104dc <__ieee754_sqrt+0x130>
 80104e6:	02cd      	lsls	r5, r1, #11
 80104e8:	d50a      	bpl.n	8010500 <__ieee754_sqrt+0x154>
 80104ea:	f1c2 0420 	rsb	r4, r2, #32
 80104ee:	fa23 f404 	lsr.w	r4, r3, r4
 80104f2:	1e55      	subs	r5, r2, #1
 80104f4:	4093      	lsls	r3, r2
 80104f6:	4321      	orrs	r1, r4
 80104f8:	1b42      	subs	r2, r0, r5
 80104fa:	e78a      	b.n	8010412 <__ieee754_sqrt+0x66>
 80104fc:	4610      	mov	r0, r2
 80104fe:	e7f0      	b.n	80104e2 <__ieee754_sqrt+0x136>
 8010500:	0049      	lsls	r1, r1, #1
 8010502:	3201      	adds	r2, #1
 8010504:	e7ef      	b.n	80104e6 <__ieee754_sqrt+0x13a>
 8010506:	4680      	mov	r8, r0
 8010508:	e7bd      	b.n	8010486 <__ieee754_sqrt+0xda>
 801050a:	bf00      	nop
 801050c:	7ff00000 	.word	0x7ff00000

08010510 <_init>:
 8010510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010512:	bf00      	nop
 8010514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010516:	bc08      	pop	{r3}
 8010518:	469e      	mov	lr, r3
 801051a:	4770      	bx	lr

0801051c <_fini>:
 801051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801051e:	bf00      	nop
 8010520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010522:	bc08      	pop	{r3}
 8010524:	469e      	mov	lr, r3
 8010526:	4770      	bx	lr
