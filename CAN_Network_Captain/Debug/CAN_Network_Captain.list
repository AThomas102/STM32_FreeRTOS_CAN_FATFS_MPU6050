
CAN_Network_Captain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800db60  0800db60  0001db60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0c0  0800e0c0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800e0c0  0800e0c0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e0c0  0800e0c0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0c0  0800e0c0  0001e0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0c4  0800e0c4  0001e0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800e0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000442c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200044c0  200044c0  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e297  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042ec  00000000  00000000  0003e35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  00042648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001808  00000000  00000000  00044008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e03  00000000  00000000  00045810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021ea2  00000000  00000000  0006b613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9443  00000000  00000000  0008d4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001668f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007220  00000000  00000000  00166948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db48 	.word	0x0800db48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800db48 	.word	0x0800db48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <add_char>:
 * Returns:
 * 0: success
 * 1: realloc failure
 */
static int add_char(char **string, int *c, char ch)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	71fb      	strb	r3, [r7, #7]
    char *tmp = NULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
    (*c)++;
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	1c5a      	adds	r2, r3, #1
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	601a      	str	r2, [r3, #0]
    tmp = realloc(*string, (*c)+1);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	4619      	mov	r1, r3
 80002b8:	4610      	mov	r0, r2
 80002ba:	f00d f809 	bl	800d2d0 <realloc>
 80002be:	6178      	str	r0, [r7, #20]
    if (tmp == NULL)
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <add_char+0x3a>
        return 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e012      	b.n	80002f0 <add_char+0x60>
    *string = tmp;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	601a      	str	r2, [r3, #0]
    (*string)[(*c)-1] = ch;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3b01      	subs	r3, #1
 80002da:	4413      	add	r3, r2
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	701a      	strb	r2, [r3, #0]
    (*string)[*c] = '\0';
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	6812      	ldr	r2, [r2, #0]
 80002e8:	4413      	add	r3, r2
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]

    return 0;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3718      	adds	r7, #24
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <create_field>:
 * memory for the field. Length is set to 0 and text to NULL
 *
 * Returns NULL on error via malloc.
 */
static CSV_FIELD *create_field()
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
    CSV_FIELD *field = malloc(sizeof(CSV_FIELD));
 80002fe:	2008      	movs	r0, #8
 8000300:	f00c fee0 	bl	800d0c4 <malloc>
 8000304:	4603      	mov	r3, r0
 8000306:	607b      	str	r3, [r7, #4]
    field->length = 0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
    field->text = NULL;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
    set_field(field, "\0");
 8000314:	4904      	ldr	r1, [pc, #16]	; (8000328 <create_field+0x30>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f821 	bl	800035e <set_field>
    return field;
 800031c:	687b      	ldr	r3, [r7, #4]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	0800db60 	.word	0x0800db60

0800032c <destroy_field>:
 * Returns:
 * 0: success
 * 1: error realloc'ing field's char array
 */
static void destroy_field(CSV_FIELD *field)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    if (field->text != NULL)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d007      	beq.n	800034c <destroy_field+0x20>
	{
		free(field->text);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f00c fec7 	bl	800d0d4 <free>
		field->text = NULL;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
    }
    free(field);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f00c fec1 	bl	800d0d4 <free>
    field = NULL;
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <set_field>:
 * Returns:
 *  0: success
 *  1: error allocating space to the string
 */
static int set_field(CSV_FIELD *field, char *text)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b084      	sub	sp, #16
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
    char *tmp;

    field->length = strlen(text) + 1;
 8000368:	6838      	ldr	r0, [r7, #0]
 800036a:	f7ff ff39 	bl	80001e0 <strlen>
 800036e:	4603      	mov	r3, r0
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	605a      	str	r2, [r3, #4]
    tmp = realloc(field->text, field->length);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4619      	mov	r1, r3
 8000380:	4610      	mov	r0, r2
 8000382:	f00c ffa5 	bl	800d2d0 <realloc>
 8000386:	60f8      	str	r0, [r7, #12]
    if (tmp == NULL)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <set_field+0x34>
        return 1;
 800038e:	2301      	movs	r3, #1
 8000390:	e009      	b.n	80003a6 <set_field+0x48>
    field->text = tmp;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	601a      	str	r2, [r3, #0]
    strcpy(field->text, text);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f00d f845 	bl	800d42e <strcpy>

    return 0;
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <read_next_field>:
 *  0: Moved successfully to the next entry in this row
 *  1: The next entry is on a new row
 *  2: There is no next entry (EOF)
 */
static int read_next_field(FIL *csv_fp, char field_delim, char text_delim, CSV_FIELD *field)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b08c      	sub	sp, #48	; 0x30
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	72fb      	strb	r3, [r7, #11]
 80003bc:	4613      	mov	r3, r2
 80003be:	72bb      	strb	r3, [r7, #10]
	char ch = 'a';
 80003c0:	2361      	movs	r3, #97	; 0x61
 80003c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    bool done = false;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool in_text = false;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool esc = false;
 80003d2:	2300      	movs	r3, #0
 80003d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	UINT n;
    int c = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
    char *tmp = malloc(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f00c fe71 	bl	800d0c4 <malloc>
 80003e2:	4603      	mov	r3, r0
 80003e4:	617b      	str	r3, [r7, #20]
    tmp[0] = '\0';
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]

	while (!done)
 80003ec:	e086      	b.n	80004fc <read_next_field+0x14e>
	{
		f_read(csv_fp, &ch, 1, &n);
 80003ee:	f107 031c 	add.w	r3, r7, #28
 80003f2:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80003f6:	2201      	movs	r2, #1
 80003f8:	68f8      	ldr	r0, [r7, #12]
 80003fa:	f008 fdda 	bl	8008fb2 <f_read>

		if (f_eof(csv_fp))
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000404:	689a      	ldr	r2, [r3, #8]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	429a      	cmp	r2, r3
 8000410:	d105      	bne.n	800041e <read_next_field+0x70>
		{
			c = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
			done = true;
 8000416:	2301      	movs	r3, #1
 8000418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800041c:	e06e      	b.n	80004fc <read_next_field+0x14e>
		}
		else if (!in_text)
 800041e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000422:	f083 0301 	eor.w	r3, r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d029      	beq.n	8000480 <read_next_field+0xd2>
		{
			if (ch == text_delim)
 800042c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000430:	7aba      	ldrb	r2, [r7, #10]
 8000432:	429a      	cmp	r2, r3
 8000434:	d105      	bne.n	8000442 <read_next_field+0x94>
			{
				in_text = true;
 8000436:	2301      	movs	r3, #1
 8000438:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				c = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
 8000440:	e05c      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch == field_delim)
 8000442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000446:	7afa      	ldrb	r2, [r7, #11]
 8000448:	429a      	cmp	r2, r3
 800044a:	d103      	bne.n	8000454 <read_next_field+0xa6>
			{
				done = true;
 800044c:	2301      	movs	r3, #1
 800044e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000452:	e053      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch == '\n')
 8000454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000458:	2b0a      	cmp	r3, #10
 800045a:	d103      	bne.n	8000464 <read_next_field+0xb6>
			{
				done = true;
 800045c:	2301      	movs	r3, #1
 800045e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000462:	e04b      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch != '\r')
 8000464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000468:	2b0d      	cmp	r3, #13
 800046a:	d047      	beq.n	80004fc <read_next_field+0x14e>
			{
				add_char(&tmp, &c, ch);
 800046c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000470:	f107 0118 	add.w	r1, r7, #24
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff09 	bl	8000290 <add_char>
 800047e:	e03d      	b.n	80004fc <read_next_field+0x14e>
			}
		}
		else
		{ /* in_text == true */
			if (esc)
 8000480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000484:	2b00      	cmp	r3, #0
 8000486:	d018      	beq.n	80004ba <read_next_field+0x10c>
			{
				if (ch == text_delim)
 8000488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800048c:	7aba      	ldrb	r2, [r7, #10]
 800048e:	429a      	cmp	r2, r3
 8000490:	d10c      	bne.n	80004ac <read_next_field+0xfe>
				{
					add_char(&tmp, &c, ch);
 8000492:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000496:	f107 0118 	add.w	r1, r7, #24
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fef6 	bl	8000290 <add_char>
					esc = false;
 80004a4:	2300      	movs	r3, #0
 80004a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80004aa:	e027      	b.n	80004fc <read_next_field+0x14e>
				}
				else
				{
					esc = false;
 80004ac:	2300      	movs	r3, #0
 80004ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					done = true;
 80004b2:	2301      	movs	r3, #1
 80004b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004b8:	e020      	b.n	80004fc <read_next_field+0x14e>
				}
			}
			else
			{ /* !esc */
				if (ch == text_delim)
 80004ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004be:	7aba      	ldrb	r2, [r7, #10]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d103      	bne.n	80004cc <read_next_field+0x11e>
				{
					esc = true;
 80004c4:	2301      	movs	r3, #1
 80004c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80004ca:	e017      	b.n	80004fc <read_next_field+0x14e>
				} else if (ch == field_delim)
 80004cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004d0:	7afa      	ldrb	r2, [r7, #11]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d109      	bne.n	80004ea <read_next_field+0x13c>
				{
					add_char(&tmp, &c, ch);
 80004d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80004da:	f107 0118 	add.w	r1, r7, #24
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff fed4 	bl	8000290 <add_char>
 80004e8:	e008      	b.n	80004fc <read_next_field+0x14e>
				}
				else
				{
					add_char(&tmp, &c, ch);
 80004ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80004ee:	f107 0118 	add.w	r1, r7, #24
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff feca 	bl	8000290 <add_char>
	while (!done)
 80004fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	f47f af71 	bne.w	80003ee <read_next_field+0x40>
				}
			}
		}
    }

    if (field != NULL)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d004      	beq.n	800051c <read_next_field+0x16e>
	{
        set_field(field, tmp);
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff21 	bl	800035e <set_field>
    }

    if (tmp != NULL)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d003      	beq.n	800052a <read_next_field+0x17c>
        free(tmp);
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	4618      	mov	r0, r3
 8000526:	f00c fdd5 	bl	800d0d4 <free>
    tmp = NULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
    /* Moving the fp to the beginning of the next field and peeking
        * to see if it is a new line or if there is in fact no next field.
        */
    int pos;
    int retval;
    done = false;
 800052e:	2300      	movs	r3, #0
 8000530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (!done)
 8000534:	e04b      	b.n	80005ce <read_next_field+0x220>
	{
		if (ch == field_delim)
 8000536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800053a:	7afa      	ldrb	r2, [r7, #11]
 800053c:	429a      	cmp	r2, r3
 800053e:	d105      	bne.n	800054c <read_next_field+0x19e>
		{
			retval = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 8000544:	2301      	movs	r3, #1
 8000546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800054a:	e040      	b.n	80005ce <read_next_field+0x220>
		}
		else if (ch == '\n')
 800054c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000550:	2b0a      	cmp	r3, #10
 8000552:	d124      	bne.n	800059e <read_next_field+0x1f0>
		{
			/* Checking to see if this \n is the one that UNIX
				* sometimes includes before the EOF */
			pos = csv_fp->fptr;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
			f_read(csv_fp, &ch, 1, &n);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000566:	2201      	movs	r2, #1
 8000568:	68f8      	ldr	r0, [r7, #12]
 800056a:	f008 fd22 	bl	8008fb2 <f_read>

			if (f_eof(csv_fp))
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000574:	689a      	ldr	r2, [r3, #8]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	429a      	cmp	r2, r3
 8000580:	d102      	bne.n	8000588 <read_next_field+0x1da>
				retval = 2;
 8000582:	2302      	movs	r3, #2
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
 8000586:	e001      	b.n	800058c <read_next_field+0x1de>
			else
				retval = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28

			f_lseek(csv_fp, pos);
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	4619      	mov	r1, r3
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f009 faec 	bl	8009b6e <f_lseek>
			done = true;
 8000596:	2301      	movs	r3, #1
 8000598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800059c:	e017      	b.n	80005ce <read_next_field+0x220>
		}
		else if (f_eof(csv_fp))
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005a4:	689a      	ldr	r2, [r3, #8]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d105      	bne.n	80005be <read_next_field+0x210>
		{
			retval = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 80005b6:	2301      	movs	r3, #1
 80005b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80005bc:	e007      	b.n	80005ce <read_next_field+0x220>
		}
		else
		{
			f_read(csv_fp, &ch, 1, &n);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80005c6:	2201      	movs	r2, #1
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f008 fcf2 	bl	8008fb2 <f_read>
    while (!done)
 80005ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1ac      	bne.n	8000536 <read_next_field+0x188>
		}
    }

    return retval;
 80005dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3730      	adds	r7, #48	; 0x30
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <append_field>:
 * 0: success
 * 1: the given row does not exist
 * 2: memory allocation error
 */
static int append_field(CSV_BUFFER *buffer, size_t row)
{
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]

	CSV_FIELD **temp_field;

	if (buffer->rows < row + 1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d201      	bcs.n	8000600 <append_field+0x1a>
		return 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e036      	b.n	800066e <append_field+0x88>

	/* Set col equal to the index of the new field */
	int col = buffer->width[row];
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60fb      	str	r3, [r7, #12]

	temp_field = realloc(buffer->field[row], (col + 1) * sizeof(CSV_FIELD*));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4619      	mov	r1, r3
 8000622:	4610      	mov	r0, r2
 8000624:	f00c fe54 	bl	800d2d0 <realloc>
 8000628:	60b8      	str	r0, [r7, #8]
	if (temp_field == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <append_field+0x4e>
	{
		return 2;
 8000630:	2302      	movs	r3, #2
 8000632:	e01c      	b.n	800066e <append_field+0x88>
	}
	else
	{
		buffer->field[row] = temp_field;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	601a      	str	r2, [r3, #0]
		buffer->field[row][col] = create_field();
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	18d4      	adds	r4, r2, r3
 8000654:	f7ff fe50 	bl	80002f8 <create_field>
 8000658:	4603      	mov	r3, r0
 800065a:	6023      	str	r3, [r4, #0]
		buffer->width[row]++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	3201      	adds	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bd90      	pop	{r4, r7, pc}

08000676 <append_row>:
 * 0: success
 * 1: error allocating width memory
 * 2: error allocating field memory
 */
static int append_row(CSV_BUFFER *buffer)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
    size_t *temp_width;
    CSV_FIELD ***temp_field;

    size_t row  = buffer->rows;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	617b      	str	r3, [r7, #20]

    temp_width = realloc(buffer->width, (buffer->rows + 1) * sizeof(size_t));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4619      	mov	r1, r3
 8000692:	4610      	mov	r0, r2
 8000694:	f00c fe1c 	bl	800d2d0 <realloc>
 8000698:	6138      	str	r0, [r7, #16]
    if (temp_width != NULL)
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d018      	beq.n	80006d2 <append_row+0x5c>
	{
        buffer->width = temp_width;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	609a      	str	r2, [r3, #8]
        buffer->width[row] = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	689a      	ldr	r2, [r3, #8]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
	else
	{
        return 1;
    }

    temp_field = realloc(buffer->field, (buffer->rows + 1) * sizeof(CSV_FIELD**));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	3301      	adds	r3, #1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4619      	mov	r1, r3
 80006c2:	4610      	mov	r0, r2
 80006c4:	f00c fe04 	bl	800d2d0 <realloc>
 80006c8:	60f8      	str	r0, [r7, #12]
    if (temp_field != NULL)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d017      	beq.n	8000700 <append_row+0x8a>
 80006d0:	e001      	b.n	80006d6 <append_row+0x60>
        return 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e018      	b.n	8000708 <append_row+0x92>
	{
        buffer->field = temp_field;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	601a      	str	r2, [r3, #0]
        buffer->field[row] = NULL;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	{
        free(temp_width);
        return 2;
    }

    buffer->rows++;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	605a      	str	r2, [r3, #4]
    append_field(buffer, row);
 80006f4:	6979      	ldr	r1, [r7, #20]
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff75 	bl	80005e6 <append_field>
    return 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e003      	b.n	8000708 <append_row+0x92>
        free(temp_width);
 8000700:	6938      	ldr	r0, [r7, #16]
 8000702:	f00c fce7 	bl	800d0d4 <free>
        return 2;
 8000706:	2302      	movs	r3, #2
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <csv_create_buffer>:

    return 0;
}

CSV_BUFFER *csv_create_buffer()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
    CSV_BUFFER *buffer = malloc(sizeof(CSV_BUFFER));
 8000716:	2010      	movs	r0, #16
 8000718:	f00c fcd4 	bl	800d0c4 <malloc>
 800071c:	4603      	mov	r3, r0
 800071e:	607b      	str	r3, [r7, #4]

    if (buffer != NULL)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00e      	beq.n	8000744 <csv_create_buffer+0x34>
	{
	    buffer->field = NULL;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
	    buffer->rows = 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
	    buffer->width = NULL;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	    buffer->field_delim = ',';
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	222c      	movs	r2, #44	; 0x2c
 800073c:	731a      	strb	r2, [r3, #12]
	    buffer->text_delim = '"';
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2222      	movs	r2, #34	; 0x22
 8000742:	735a      	strb	r2, [r3, #13]
    }

    return buffer;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <csv_destroy_buffer>:

void csv_destroy_buffer(CSV_BUFFER *buffer)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
    int i, j;

    for (i = 0; i < buffer->rows; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e02e      	b.n	80007ba <csv_destroy_buffer+0x6c>
	{
        for (j = 0; j < buffer->width[i]; j++)
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	e00f      	b.n	8000782 <csv_destroy_buffer+0x34>
		{
            destroy_field(buffer->field[i][j]);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fdd8 	bl	800032c <destroy_field>
        for (j = 0; j < buffer->width[i]; j++)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	3301      	adds	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	429a      	cmp	r2, r3
 8000792:	d8e6      	bhi.n	8000762 <csv_destroy_buffer+0x14>
        }
        free(buffer->field[i]);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00c fc97 	bl	800d0d4 <free>
        buffer->field[i] = NULL;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->rows; i++)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3301      	adds	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d8cb      	bhi.n	800075c <csv_destroy_buffer+0xe>
    }

    if (buffer->field != NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d004      	beq.n	80007d6 <csv_destroy_buffer+0x88>
        free(buffer->field);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f00c fc7f 	bl	800d0d4 <free>

    if (buffer->width != NULL)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <csv_destroy_buffer+0x9a>
        free(buffer->width);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00c fc76 	bl	800d0d4 <free>

    free(buffer);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f00c fc73 	bl	800d0d4 <free>
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <csv_load>:

int csv_load(CSV_BUFFER *buffer, FIL *csv_fp)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b088      	sub	sp, #32
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 8000800:	2100      	movs	r1, #0
 8000802:	6838      	ldr	r0, [r7, #0]
 8000804:	f009 f9b3 	bl	8009b6e <f_lseek>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <csv_load+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 8000812:	2301      	movs	r3, #1
 8000814:	e059      	b.n	80008ca <csv_load+0xd4>
	}

	int next = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
	bool end = false;
 800081a:	2300      	movs	r3, #0
 800081c:	76fb      	strb	r3, [r7, #27]
	bool first = true;
 800081e:	2301      	movs	r3, #1
 8000820:	76bb      	strb	r3, [r7, #26]
	int i = -1, j = -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	613b      	str	r3, [r7, #16]

	while (!end)
 800082e:	e045      	b.n	80008bc <csv_load+0xc6>
	{
		if (!first)
 8000830:	7ebb      	ldrb	r3, [r7, #26]
 8000832:	f083 0301 	eor.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d015      	beq.n	8000868 <csv_load+0x72>
		{
			next = read_next_field(csv_fp, buffer->field_delim, buffer->text_delim, buffer->field[i][j-1]);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7b19      	ldrb	r1, [r3, #12]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7b58      	ldrb	r0, [r3, #13]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000856:	3b01      	subs	r3, #1
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4602      	mov	r2, r0
 8000860:	6838      	ldr	r0, [r7, #0]
 8000862:	f7ff fda4 	bl	80003ae <read_next_field>
 8000866:	61f8      	str	r0, [r7, #28]
		}

		if (next == 2)
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d101      	bne.n	8000872 <csv_load+0x7c>
			end = true;
 800086e:	2301      	movs	r3, #1
 8000870:	76fb      	strb	r3, [r7, #27]

		if (next == 1)
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d10c      	bne.n	8000892 <csv_load+0x9c>
		{
			if (append_row(buffer) != 0)
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fefc 	bl	8000676 <append_row>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <csv_load+0x92>
				return 2;
 8000884:	2302      	movs	r3, #2
 8000886:	e020      	b.n	80008ca <csv_load+0xd4>
			j = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
			i++;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
		}

		if (next == 0)
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10c      	bne.n	80008b2 <csv_load+0xbc>
		{
			if (append_field(buffer, i) != 0)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	4619      	mov	r1, r3
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fea2 	bl	80005e6 <append_field>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <csv_load+0xb6>
				return 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	e00e      	b.n	80008ca <csv_load+0xd4>
			j++;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	3301      	adds	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
		}

		if (first) first = false;
 80008b2:	7ebb      	ldrb	r3, [r7, #26]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <csv_load+0xc6>
 80008b8:	2300      	movs	r3, #0
 80008ba:	76bb      	strb	r3, [r7, #26]
	while (!end)
 80008bc:	7efb      	ldrb	r3, [r7, #27]
 80008be:	f083 0301 	eor.w	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1b3      	bne.n	8000830 <csv_load+0x3a>
	}

	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <csv_save>:

int csv_save(FIL *csv_fp, CSV_BUFFER *buffer)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b088      	sub	sp, #32
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]

	UINT n;
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 80008dc:	2100      	movs	r1, #0
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f009 f945 	bl	8009b6e <f_lseek>
 80008e4:	4603      	mov	r3, r0
 80008e6:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 80008e8:	7cfb      	ldrb	r3, [r7, #19]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <csv_save+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e0d8      	b.n	8000aa4 <csv_save+0x1d2>
	}

    char text_delim = buffer->text_delim;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	7b5b      	ldrb	r3, [r3, #13]
 80008f6:	72fb      	strb	r3, [r7, #11]
    char field_delim = buffer->field_delim;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	7b1b      	ldrb	r3, [r3, #12]
 80008fc:	72bb      	strb	r3, [r7, #10]
	char new_line = '\n';
 80008fe:	230a      	movs	r3, #10
 8000900:	727b      	strb	r3, [r7, #9]
    for(i = 0; i < buffer->rows; i++)
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	e0b9      	b.n	8000a7c <csv_save+0x1aa>
	{
        for(j = 0; j < buffer->width[i]; j++)
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	e0a9      	b.n	8000a62 <csv_save+0x190>
		{
            chloc = strchr(buffer->field[i][j]->text, text_delim);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	7afa      	ldrb	r2, [r7, #11]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f00c fd73 	bl	800d414 <strchr>
 800092e:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d110      	bne.n	8000958 <csv_save+0x86>
                chloc = strchr(buffer->field[i][j]->text, field_delim);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	7aba      	ldrb	r2, [r7, #10]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f00c fd5f 	bl	800d414 <strchr>
 8000956:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10f      	bne.n	800097e <csv_save+0xac>
                chloc = strchr(buffer->field[i][j]->text, '\n');
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	210a      	movs	r1, #10
 8000976:	4618      	mov	r0, r3
 8000978:	f00c fd4c 	bl	800d414 <strchr>
 800097c:	6178      	str	r0, [r7, #20]
            // if any of the above characters are found, chloc will be set
            // and we must use text delimiters.
            if(chloc != NULL)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d02e      	beq.n	80009e2 <csv_save+0x110>
			{
				f_write(csv_fp, &text_delim, 1, &n);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	f107 010b 	add.w	r1, r7, #11
 800098c:	2201      	movs	r2, #1
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f008 fd4c 	bl	800942c <f_write>
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f008 fd30 	bl	800942c <f_write>
				f_write(csv_fp, &text_delim, 1, &n);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	f107 010b 	add.w	r1, r7, #11
 80009d4:	2201      	movs	r2, #1
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f008 fd28 	bl	800942c <f_write>
                chloc = NULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e01b      	b.n	8000a1a <csv_save+0x148>
            }
			else
			{
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6819      	ldr	r1, [r3, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f008 fd09 	bl	800942c <f_write>
            }
            if(j < buffer->width[i] - 1)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1e5a      	subs	r2, r3, #1
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d908      	bls.n	8000a40 <csv_save+0x16e>
				f_write(csv_fp, &field_delim, 1, &n);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	f107 010a 	add.w	r1, r7, #10
 8000a36:	2201      	movs	r2, #1
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f008 fcf7 	bl	800942c <f_write>
 8000a3e:	e00d      	b.n	8000a5c <csv_save+0x18a>
            else if (i < buffer->rows - 1)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	1e5a      	subs	r2, r3, #1
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d907      	bls.n	8000a5c <csv_save+0x18a>
				f_write(csv_fp, &new_line, 1, &n);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	f107 0109 	add.w	r1, r7, #9
 8000a54:	2201      	movs	r2, #1
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f008 fce8 	bl	800942c <f_write>
        for(j = 0; j < buffer->width[i]; j++)
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f63f af4c 	bhi.w	800090e <csv_save+0x3c>
    for(i = 0; i < buffer->rows; i++)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	f63f af40 	bhi.w	8000908 <csv_save+0x36>
        }
    }
	f_truncate(csv_fp);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f009 fc5d 	bl	800a348 <f_truncate>

	// Sync (just in case)
	res = f_sync(csv_fp);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f008 ff5a 	bl	8009948 <f_sync>
 8000a94:	4603      	mov	r3, r0
 8000a96:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 8000a98:	7cfb      	ldrb	r3, [r7, #19]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <csv_save+0x1d0>
	{
		//log_error("f_sync pb: %d", res);
		return 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <csv_save+0x1d2>
	}

    return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <csv_set_field>:
    else
        return buffer->field[row][entry]->length - 1;
}

int csv_set_field(CSV_BUFFER *buffer, size_t row, size_t entry, char *field)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
    while (row >= buffer->rows)
 8000aba:	e002      	b.n	8000ac2 <csv_set_field+0x16>
	{
        append_row(buffer);
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fdda 	bl	8000676 <append_row>
    while (row >= buffer->rows)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d2f7      	bcs.n	8000abc <csv_set_field+0x10>
    }
    while (entry >= buffer->width[row])
 8000acc:	e003      	b.n	8000ad6 <csv_set_field+0x2a>
        append_field(buffer, row);
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fd88 	bl	80005e6 <append_field>
    while (entry >= buffer->width[row])
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d2f2      	bcs.n	8000ace <csv_set_field+0x22>

    if (set_field(buffer->field[row][entry], field) == 0)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6839      	ldr	r1, [r7, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc2d 	bl	800035e <set_field>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <csv_set_field+0x62>
        return 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <csv_set_field+0x64>
    else
        return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <SELECT+0x14>)
 8000b22:	f002 fb25 	bl	8003170 <HAL_GPIO_WritePin>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	48000400 	.word	0x48000400

08000b30 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DESELECT+0x14>)
 8000b3a:	f002 fb19 	bl	8003170 <HAL_GPIO_WritePin>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	48000400 	.word	0x48000400

08000b48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b52:	bf00      	nop
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <SPI_TxByte+0x30>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d1f8      	bne.n	8000b54 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	2364      	movs	r3, #100	; 0x64
 8000b66:	2201      	movs	r2, #1
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <SPI_TxByte+0x30>)
 8000b6a:	f004 f8d6 	bl	8004d1a <HAL_SPI_Transmit>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000e0 	.word	0x200000e0

08000b7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b88:	bf00      	nop
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <SPI_TxBuffer+0x30>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d1f8      	bne.n	8000b8a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000b98:	887a      	ldrh	r2, [r7, #2]
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <SPI_TxBuffer+0x30>)
 8000ba0:	f004 f8bb 	bl	8004d1a <HAL_SPI_Transmit>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000e0 	.word	0x200000e0

08000bb0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000bb6:	23ff      	movs	r3, #255	; 0xff
 8000bb8:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bba:	bf00      	nop
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <SPI_RxByte+0x34>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d1f8      	bne.n	8000bbc <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000bca:	1dba      	adds	r2, r7, #6
 8000bcc:	1df9      	adds	r1, r7, #7
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <SPI_RxByte+0x34>)
 8000bd6:	f004 fa0e 	bl	8004ff6 <HAL_SPI_TransmitReceive>

  return data;
 8000bda:	79bb      	ldrb	r3, [r7, #6]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000e0 	.word	0x200000e0

08000be8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000bf0:	f7ff ffde 	bl	8000bb0 <SPI_RxByte>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	701a      	strb	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <SD_ReadyWait+0x3c>)
 8000c0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c10:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000c12:	f7ff ffcd 	bl	8000bb0 <SPI_RxByte>
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
    Timer2 = Timer2 - 1;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <SD_ReadyWait+0x3c>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <SD_ReadyWait+0x3c>)
 8000c24:	801a      	strh	r2, [r3, #0]
  } while ((res != 0xFF) && Timer2);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2bff      	cmp	r3, #255	; 0xff
 8000c2a:	d003      	beq.n	8000c34 <SD_ReadyWait+0x30>
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SD_ReadyWait+0x3c>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1ee      	bne.n	8000c12 <SD_ReadyWait+0xe>

  return res;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000b2 	.word	0x200000b2

08000c44 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000c4a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c4e:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000c50:	f7ff ff6e 	bl	8000b30 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	e005      	b.n	8000c66 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	f7ff ff74 	bl	8000b48 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	3301      	adds	r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	2b09      	cmp	r3, #9
 8000c6a:	ddf6      	ble.n	8000c5a <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000c6c:	f7ff ff54 	bl	8000b18 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000c84:	2395      	movs	r3, #149	; 0x95
 8000c86:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2106      	movs	r1, #6
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff75 	bl	8000b7c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000c92:	e002      	b.n	8000c9a <SD_PowerOn+0x56>
  {
    cnt--;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000c9a:	f7ff ff89 	bl	8000bb0 <SPI_RxByte>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d002      	beq.n	8000caa <SD_PowerOn+0x66>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f4      	bne.n	8000c94 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000caa:	f7ff ff41 	bl	8000b30 <DESELECT>
  SPI_TxByte(0XFF);
 8000cae:	20ff      	movs	r0, #255	; 0xff
 8000cb0:	f7ff ff4a 	bl	8000b48 <SPI_TxByte>

  PowerFlag = 1;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <SD_PowerOn+0x80>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000b5 	.word	0x200000b5

08000cc8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <SD_PowerOff+0x14>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	200000b5 	.word	0x200000b5

08000ce0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <SD_CheckPower+0x14>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200000b5 	.word	0x200000b5

08000cf8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <SD_RxDataBlock+0x64>)
 8000d04:	22c8      	movs	r2, #200	; 0xc8
 8000d06:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000d08:	f7ff ff52 	bl	8000bb0 <SPI_RxByte>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	73fb      	strb	r3, [r7, #15]
    Timer1 = Timer1 - 1;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <SD_RxDataBlock+0x64>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <SD_RxDataBlock+0x64>)
 8000d1a:	801a      	strh	r2, [r3, #0]
  } while((token == 0xFF) && Timer1);
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	2bff      	cmp	r3, #255	; 0xff
 8000d20:	d103      	bne.n	8000d2a <SD_RxDataBlock+0x32>
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <SD_RxDataBlock+0x64>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ee      	bne.n	8000d08 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2bfe      	cmp	r3, #254	; 0xfe
 8000d2e:	d001      	beq.n	8000d34 <SD_RxDataBlock+0x3c>
 8000d30:	2300      	movs	r3, #0
 8000d32:	e00f      	b.n	8000d54 <SD_RxDataBlock+0x5c>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff54 	bl	8000be8 <SPI_RxBytePtr>
  } while(len--);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	603a      	str	r2, [r7, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f4      	bne.n	8000d34 <SD_RxDataBlock+0x3c>

  /* discard CRC */
  SPI_RxByte();
 8000d4a:	f7ff ff31 	bl	8000bb0 <SPI_RxByte>
  SPI_RxByte();
 8000d4e:	f7ff ff2f 	bl	8000bb0 <SPI_RxByte>

  return TRUE;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200000b0 	.word	0x200000b0

08000d60 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000d70:	f7ff ff48 	bl	8000c04 <SD_ReadyWait>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2bff      	cmp	r3, #255	; 0xff
 8000d78:	d001      	beq.n	8000d7e <SD_TxDataBlock+0x1e>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e02f      	b.n	8000dde <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fee1 	bl	8000b48 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000d86:	78fb      	ldrb	r3, [r7, #3]
 8000d88:	2bfd      	cmp	r3, #253	; 0xfd
 8000d8a:	d020      	beq.n	8000dce <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fef3 	bl	8000b7c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000d96:	f7ff ff0b 	bl	8000bb0 <SPI_RxByte>
    SPI_RxByte();
 8000d9a:	f7ff ff09 	bl	8000bb0 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000d9e:	e00b      	b.n	8000db8 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000da0:	f7ff ff06 	bl	8000bb0 <SPI_RxByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	d006      	beq.n	8000dc0 <SD_TxDataBlock+0x60>
      i++;
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	3301      	adds	r3, #1
 8000db6:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	2b40      	cmp	r3, #64	; 0x40
 8000dbc:	d9f0      	bls.n	8000da0 <SD_TxDataBlock+0x40>
 8000dbe:	e000      	b.n	8000dc2 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000dc0:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000dc2:	bf00      	nop
 8000dc4:	f7ff fef4 	bl	8000bb0 <SPI_RxByte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0fa      	beq.n	8000dc4 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f003 031f 	and.w	r3, r3, #31
 8000dd4:	2b05      	cmp	r3, #5
 8000dd6:	d101      	bne.n	8000ddc <SD_TxDataBlock+0x7c>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <SD_TxDataBlock+0x7e>

  return FALSE;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	6039      	str	r1, [r7, #0]
 8000df0:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000df2:	f7ff ff07 	bl	8000c04 <SD_ReadyWait>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2bff      	cmp	r3, #255	; 0xff
 8000dfa:	d001      	beq.n	8000e00 <SD_SendCmd+0x1a>
 8000dfc:	23ff      	movs	r3, #255	; 0xff
 8000dfe:	e042      	b.n	8000e86 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fea0 	bl	8000b48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	0e1b      	lsrs	r3, r3, #24
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe9a 	bl	8000b48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fe94 	bl	8000b48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fe8e 	bl	8000b48 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fe89 	bl	8000b48 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b40      	cmp	r3, #64	; 0x40
 8000e3a:	d102      	bne.n	8000e42 <SD_SendCmd+0x5c>
 8000e3c:	2395      	movs	r3, #149	; 0x95
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e007      	b.n	8000e52 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b48      	cmp	r3, #72	; 0x48
 8000e46:	d102      	bne.n	8000e4e <SD_SendCmd+0x68>
 8000e48:	2387      	movs	r3, #135	; 0x87
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e001      	b.n	8000e52 <SD_SendCmd+0x6c>
  else crc = 1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff fe77 	bl	8000b48 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b4c      	cmp	r3, #76	; 0x4c
 8000e5e:	d101      	bne.n	8000e64 <SD_SendCmd+0x7e>
 8000e60:	f7ff fea6 	bl	8000bb0 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000e64:	230a      	movs	r3, #10
 8000e66:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000e68:	f7ff fea2 	bl	8000bb0 <SPI_RxByte>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000e70:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da05      	bge.n	8000e84 <SD_SendCmd+0x9e>
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	73bb      	strb	r3, [r7, #14]
 8000e7e:	7bbb      	ldrb	r3, [r7, #14]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f1      	bne.n	8000e68 <SD_SendCmd+0x82>

  return res;
 8000e84:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SD_disk_initialize+0x14>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0df      	b.n	8001064 <SD_disk_initialize+0x1d4>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000ea4:	4b71      	ldr	r3, [pc, #452]	; (800106c <SD_disk_initialize+0x1dc>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <SD_disk_initialize+0x2a>
 8000eb2:	4b6e      	ldr	r3, [pc, #440]	; (800106c <SD_disk_initialize+0x1dc>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	e0d4      	b.n	8001064 <SD_disk_initialize+0x1d4>

  /* power on */
  SD_PowerOn();
 8000eba:	f7ff fec3 	bl	8000c44 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000ebe:	f7ff fe2b 	bl	8000b18 <SELECT>

  /* check disk type */
  type = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2040      	movs	r0, #64	; 0x40
 8000eca:	f7ff ff8c 	bl	8000de6 <SD_SendCmd>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	f040 80af 	bne.w	8001034 <SD_disk_initialize+0x1a4>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000ed6:	4b66      	ldr	r3, [pc, #408]	; (8001070 <SD_disk_initialize+0x1e0>)
 8000ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000edc:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000ede:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000ee2:	2048      	movs	r0, #72	; 0x48
 8000ee4:	f7ff ff7f 	bl	8000de6 <SD_SendCmd>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d15d      	bne.n	8000faa <SD_disk_initialize+0x11a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e00c      	b.n	8000f0e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000ef4:	7bfc      	ldrb	r4, [r7, #15]
 8000ef6:	f7ff fe5b 	bl	8000bb0 <SPI_RxByte>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	f104 0310 	add.w	r3, r4, #16
 8000f02:	443b      	add	r3, r7
 8000f04:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d9ef      	bls.n	8000ef4 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f14:	7abb      	ldrb	r3, [r7, #10]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	f040 808c 	bne.w	8001034 <SD_disk_initialize+0x1a4>
 8000f1c:	7afb      	ldrb	r3, [r7, #11]
 8000f1e:	2baa      	cmp	r3, #170	; 0xaa
 8000f20:	f040 8088 	bne.w	8001034 <SD_disk_initialize+0x1a4>
      {
        /* ACMD41 with HCS bit */
        do {
        	Timer1 = Timer1 - 1;
 8000f24:	4b52      	ldr	r3, [pc, #328]	; (8001070 <SD_disk_initialize+0x1e0>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b50      	ldr	r3, [pc, #320]	; (8001070 <SD_disk_initialize+0x1e0>)
 8000f2e:	801a      	strh	r2, [r3, #0]
        	if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f30:	2100      	movs	r1, #0
 8000f32:	2077      	movs	r0, #119	; 0x77
 8000f34:	f7ff ff57 	bl	8000de6 <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d807      	bhi.n	8000f4e <SD_disk_initialize+0xbe>
 8000f3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f42:	2069      	movs	r0, #105	; 0x69
 8000f44:	f7ff ff4f 	bl	8000de6 <SD_SendCmd>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d004      	beq.n	8000f58 <SD_disk_initialize+0xc8>
        } while (Timer1);
 8000f4e:	4b48      	ldr	r3, [pc, #288]	; (8001070 <SD_disk_initialize+0x1e0>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1e6      	bne.n	8000f24 <SD_disk_initialize+0x94>
 8000f56:	e000      	b.n	8000f5a <SD_disk_initialize+0xca>
        	if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f58:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f5a:	4b45      	ldr	r3, [pc, #276]	; (8001070 <SD_disk_initialize+0x1e0>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d068      	beq.n	8001034 <SD_disk_initialize+0x1a4>
 8000f62:	2100      	movs	r1, #0
 8000f64:	207a      	movs	r0, #122	; 0x7a
 8000f66:	f7ff ff3e 	bl	8000de6 <SD_SendCmd>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d161      	bne.n	8001034 <SD_disk_initialize+0x1a4>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
 8000f74:	e00c      	b.n	8000f90 <SD_disk_initialize+0x100>
          {
            ocr[n] = SPI_RxByte();
 8000f76:	7bfc      	ldrb	r4, [r7, #15]
 8000f78:	f7ff fe1a 	bl	8000bb0 <SPI_RxByte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	f104 0310 	add.w	r3, r4, #16
 8000f84:	443b      	add	r3, r7
 8000f86:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d9ef      	bls.n	8000f76 <SD_disk_initialize+0xe6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000f96:	7a3b      	ldrb	r3, [r7, #8]
 8000f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SD_disk_initialize+0x114>
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	e000      	b.n	8000fa6 <SD_disk_initialize+0x116>
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	73bb      	strb	r3, [r7, #14]
 8000fa8:	e044      	b.n	8001034 <SD_disk_initialize+0x1a4>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000faa:	2100      	movs	r1, #0
 8000fac:	2077      	movs	r0, #119	; 0x77
 8000fae:	f7ff ff1a 	bl	8000de6 <SD_SendCmd>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d808      	bhi.n	8000fca <SD_disk_initialize+0x13a>
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2069      	movs	r0, #105	; 0x69
 8000fbc:	f7ff ff13 	bl	8000de6 <SD_SendCmd>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d801      	bhi.n	8000fca <SD_disk_initialize+0x13a>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e000      	b.n	8000fcc <SD_disk_initialize+0x13c>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d10e      	bne.n	8000ff2 <SD_disk_initialize+0x162>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2077      	movs	r0, #119	; 0x77
 8000fd8:	f7ff ff05 	bl	8000de6 <SD_SendCmd>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d80e      	bhi.n	8001000 <SD_disk_initialize+0x170>
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2069      	movs	r0, #105	; 0x69
 8000fe6:	f7ff fefe 	bl	8000de6 <SD_SendCmd>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d107      	bne.n	8001000 <SD_disk_initialize+0x170>
 8000ff0:	e012      	b.n	8001018 <SD_disk_initialize+0x188>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2041      	movs	r0, #65	; 0x41
 8000ff6:	f7ff fef6 	bl	8000de6 <SD_SendCmd>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00a      	beq.n	8001016 <SD_disk_initialize+0x186>
        }
        Timer1 = Timer1 - 1;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <SD_disk_initialize+0x1e0>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	3b01      	subs	r3, #1
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <SD_disk_initialize+0x1e0>)
 800100a:	801a      	strh	r2, [r3, #0]
      } while (Timer1);
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <SD_disk_initialize+0x1e0>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1dc      	bne.n	8000fce <SD_disk_initialize+0x13e>
 8001014:	e000      	b.n	8001018 <SD_disk_initialize+0x188>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001016:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <SD_disk_initialize+0x1e0>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <SD_disk_initialize+0x1a0>
 8001020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001024:	2050      	movs	r0, #80	; 0x50
 8001026:	f7ff fede 	bl	8000de6 <SD_SendCmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SD_disk_initialize+0x1a4>
 8001030:	2300      	movs	r3, #0
 8001032:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <SD_disk_initialize+0x1e4>)
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 800103a:	f7ff fd79 	bl	8000b30 <DESELECT>
  SPI_RxByte();
 800103e:	f7ff fdb7 	bl	8000bb0 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <SD_disk_initialize+0x1ca>
  {
    Stat &= ~STA_NOINIT;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <SD_disk_initialize+0x1dc>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SD_disk_initialize+0x1dc>)
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	e001      	b.n	800105e <SD_disk_initialize+0x1ce>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800105a:	f7ff fe35 	bl	8000cc8 <SD_PowerOff>
  }

  return Stat;
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <SD_disk_initialize+0x1dc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	200000b0 	.word	0x200000b0
 8001074:	200000b4 	.word	0x200000b4

08001078 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SD_disk_status+0x14>
 8001088:	2301      	movs	r3, #1
 800108a:	e002      	b.n	8001092 <SD_disk_status+0x1a>
  return Stat;
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SD_disk_status+0x28>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000

080010a4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <SD_disk_read+0x1c>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <SD_disk_read+0x20>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e051      	b.n	8001168 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <SD_disk_read+0xcc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SD_disk_read+0x32>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e048      	b.n	8001168 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <SD_disk_read+0xd0>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d102      	bne.n	80010e8 <SD_disk_read+0x44>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	607b      	str	r3, [r7, #4]

  SELECT();
 80010e8:	f7ff fd16 	bl	8000b18 <SELECT>

  if (count == 1)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d111      	bne.n	8001116 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	2051      	movs	r0, #81	; 0x51
 80010f6:	f7ff fe76 	bl	8000de6 <SD_SendCmd>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d129      	bne.n	8001154 <SD_disk_read+0xb0>
 8001100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001104:	68b8      	ldr	r0, [r7, #8]
 8001106:	f7ff fdf7 	bl	8000cf8 <SD_RxDataBlock>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d021      	beq.n	8001154 <SD_disk_read+0xb0>
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	e01e      	b.n	8001154 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2052      	movs	r0, #82	; 0x52
 800111a:	f7ff fe64 	bl	8000de6 <SD_SendCmd>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d117      	bne.n	8001154 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	68b8      	ldr	r0, [r7, #8]
 800112a:	f7ff fde5 	bl	8000cf8 <SD_RxDataBlock>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00a      	beq.n	800114a <SD_disk_read+0xa6>
        buff += 512;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800113a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1ed      	bne.n	8001124 <SD_disk_read+0x80>
 8001148:	e000      	b.n	800114c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800114a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800114c:	2100      	movs	r1, #0
 800114e:	204c      	movs	r0, #76	; 0x4c
 8001150:	f7ff fe49 	bl	8000de6 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001154:	f7ff fcec 	bl	8000b30 <DESELECT>
  SPI_RxByte();
 8001158:	f7ff fd2a 	bl	8000bb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	200000b4 	.word	0x200000b4

08001178 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <SD_disk_write+0x1c>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <SD_disk_write+0x20>
 8001194:	2304      	movs	r3, #4
 8001196:	e06b      	b.n	8001270 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <SD_disk_write+0x100>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SD_disk_write+0x32>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e062      	b.n	8001270 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <SD_disk_write+0x100>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SD_disk_write+0x44>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e059      	b.n	8001270 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <SD_disk_write+0x104>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <SD_disk_write+0x56>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	025b      	lsls	r3, r3, #9
 80011cc:	607b      	str	r3, [r7, #4]

  SELECT();
 80011ce:	f7ff fca3 	bl	8000b18 <SELECT>

  if (count == 1)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d110      	bne.n	80011fa <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	2058      	movs	r0, #88	; 0x58
 80011dc:	f7ff fe03 	bl	8000de6 <SD_SendCmd>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d13a      	bne.n	800125c <SD_disk_write+0xe4>
 80011e6:	21fe      	movs	r1, #254	; 0xfe
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f7ff fdb9 	bl	8000d60 <SD_TxDataBlock>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d033      	beq.n	800125c <SD_disk_write+0xe4>
      count = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	e030      	b.n	800125c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <SD_disk_write+0x104>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001206:	2100      	movs	r1, #0
 8001208:	2077      	movs	r0, #119	; 0x77
 800120a:	f7ff fdec 	bl	8000de6 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	2057      	movs	r0, #87	; 0x57
 8001212:	f7ff fde8 	bl	8000de6 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	2059      	movs	r0, #89	; 0x59
 800121a:	f7ff fde4 	bl	8000de6 <SD_SendCmd>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d11b      	bne.n	800125c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001224:	21fc      	movs	r1, #252	; 0xfc
 8001226:	68b8      	ldr	r0, [r7, #8]
 8001228:	f7ff fd9a 	bl	8000d60 <SD_TxDataBlock>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <SD_disk_write+0xd0>
        buff += 512;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001238:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3b01      	subs	r3, #1
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1ee      	bne.n	8001224 <SD_disk_write+0xac>
 8001246:	e000      	b.n	800124a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001248:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800124a:	21fd      	movs	r1, #253	; 0xfd
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fd87 	bl	8000d60 <SD_TxDataBlock>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <SD_disk_write+0xe4>
      {
        count = 1;
 8001258:	2301      	movs	r3, #1
 800125a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800125c:	f7ff fc68 	bl	8000b30 <DESELECT>
  SPI_RxByte();
 8001260:	f7ff fca6 	bl	8000bb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	bf14      	ite	ne
 800126a:	2301      	movne	r3, #1
 800126c:	2300      	moveq	r3, #0
 800126e:	b2db      	uxtb	r3, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000000 	.word	0x20000000
 800127c:	200000b4 	.word	0x200000b4

08001280 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b08b      	sub	sp, #44	; 0x2c
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	603a      	str	r2, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	460b      	mov	r3, r1
 800128e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SD_disk_ioctl+0x1e>
 800129a:	2304      	movs	r3, #4
 800129c:	e115      	b.n	80014ca <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	2b05      	cmp	r3, #5
 80012a8:	d124      	bne.n	80012f4 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d012      	beq.n	80012d8 <SD_disk_ioctl+0x58>
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	dc1a      	bgt.n	80012ec <SD_disk_ioctl+0x6c>
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <SD_disk_ioctl+0x40>
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d006      	beq.n	80012cc <SD_disk_ioctl+0x4c>
 80012be:	e015      	b.n	80012ec <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80012c0:	f7ff fd02 	bl	8000cc8 <SD_PowerOff>
      res = RES_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012ca:	e0fc      	b.n	80014c6 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 80012cc:	f7ff fcba 	bl	8000c44 <SD_PowerOn>
      res = RES_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012d6:	e0f6      	b.n	80014c6 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	1c5c      	adds	r4, r3, #1
 80012dc:	f7ff fd00 	bl	8000ce0 <SD_CheckPower>
 80012e0:	4603      	mov	r3, r0
 80012e2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012ea:	e0ec      	b.n	80014c6 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 80012ec:	2304      	movs	r3, #4
 80012ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f2:	e0e8      	b.n	80014c6 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012f4:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <SD_disk_ioctl+0x254>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SD_disk_ioctl+0x86>
 8001302:	2303      	movs	r3, #3
 8001304:	e0e1      	b.n	80014ca <SD_disk_ioctl+0x24a>

    SELECT();
 8001306:	f7ff fc07 	bl	8000b18 <SELECT>

    switch (ctrl)
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	2b0d      	cmp	r3, #13
 800130e:	f200 80cb 	bhi.w	80014a8 <SD_disk_ioctl+0x228>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <SD_disk_ioctl+0x98>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001413 	.word	0x08001413
 800131c:	08001351 	.word	0x08001351
 8001320:	08001403 	.word	0x08001403
 8001324:	080014a9 	.word	0x080014a9
 8001328:	080014a9 	.word	0x080014a9
 800132c:	080014a9 	.word	0x080014a9
 8001330:	080014a9 	.word	0x080014a9
 8001334:	080014a9 	.word	0x080014a9
 8001338:	080014a9 	.word	0x080014a9
 800133c:	080014a9 	.word	0x080014a9
 8001340:	080014a9 	.word	0x080014a9
 8001344:	08001425 	.word	0x08001425
 8001348:	08001449 	.word	0x08001449
 800134c:	0800146d 	.word	0x0800146d
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001350:	2100      	movs	r1, #0
 8001352:	2049      	movs	r0, #73	; 0x49
 8001354:	f7ff fd47 	bl	8000de6 <SD_SendCmd>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 80a8 	bne.w	80014b0 <SD_disk_ioctl+0x230>
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2110      	movs	r1, #16
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fcc6 	bl	8000cf8 <SD_RxDataBlock>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 809e 	beq.w	80014b0 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	099b      	lsrs	r3, r3, #6
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d10e      	bne.n	800139c <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800137e:	7d7b      	ldrb	r3, [r7, #21]
 8001380:	b29a      	uxth	r2, r3
 8001382:	7d3b      	ldrb	r3, [r7, #20]
 8001384:	b29b      	uxth	r3, r3
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	3301      	adds	r3, #1
 8001390:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001392:	8bfb      	ldrh	r3, [r7, #30]
 8001394:	029a      	lsls	r2, r3, #10
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	e02e      	b.n	80013fa <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800139c:	7c7b      	ldrb	r3, [r7, #17]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	09db      	lsrs	r3, r3, #7
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	7d7b      	ldrb	r3, [r7, #21]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f003 0306 	and.w	r3, r3, #6
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3302      	adds	r3, #2
 80013c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80013c4:	7d3b      	ldrb	r3, [r7, #20]
 80013c6:	099b      	lsrs	r3, r3, #6
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	7cfb      	ldrb	r3, [r7, #19]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	7cbb      	ldrb	r3, [r7, #18]
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	b29b      	uxth	r3, r3
 80013de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3301      	adds	r3, #1
 80013ea:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80013ec:	8bfa      	ldrh	r2, [r7, #30]
 80013ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013f2:	3b09      	subs	r3, #9
 80013f4:	409a      	lsls	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001400:	e056      	b.n	80014b0 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001410:	e055      	b.n	80014be <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001412:	f7ff fbf7 	bl	8000c04 <SD_ReadyWait>
 8001416:	4603      	mov	r3, r0
 8001418:	2bff      	cmp	r3, #255	; 0xff
 800141a:	d14b      	bne.n	80014b4 <SD_disk_ioctl+0x234>
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001422:	e047      	b.n	80014b4 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001424:	2100      	movs	r1, #0
 8001426:	2049      	movs	r0, #73	; 0x49
 8001428:	f7ff fcdd 	bl	8000de6 <SD_SendCmd>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d142      	bne.n	80014b8 <SD_disk_ioctl+0x238>
 8001432:	2110      	movs	r1, #16
 8001434:	6a38      	ldr	r0, [r7, #32]
 8001436:	f7ff fc5f 	bl	8000cf8 <SD_RxDataBlock>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d03b      	beq.n	80014b8 <SD_disk_ioctl+0x238>
 8001440:	2300      	movs	r3, #0
 8001442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001446:	e037      	b.n	80014b8 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001448:	2100      	movs	r1, #0
 800144a:	204a      	movs	r0, #74	; 0x4a
 800144c:	f7ff fccb 	bl	8000de6 <SD_SendCmd>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d132      	bne.n	80014bc <SD_disk_ioctl+0x23c>
 8001456:	2110      	movs	r1, #16
 8001458:	6a38      	ldr	r0, [r7, #32]
 800145a:	f7ff fc4d 	bl	8000cf8 <SD_RxDataBlock>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d02b      	beq.n	80014bc <SD_disk_ioctl+0x23c>
 8001464:	2300      	movs	r3, #0
 8001466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800146a:	e027      	b.n	80014bc <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800146c:	2100      	movs	r1, #0
 800146e:	207a      	movs	r0, #122	; 0x7a
 8001470:	f7ff fcb9 	bl	8000de6 <SD_SendCmd>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001480:	e00b      	b.n	800149a <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8001482:	6a3c      	ldr	r4, [r7, #32]
 8001484:	1c63      	adds	r3, r4, #1
 8001486:	623b      	str	r3, [r7, #32]
 8001488:	f7ff fb92 	bl	8000bb0 <SPI_RxByte>
 800148c:	4603      	mov	r3, r0
 800148e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001490:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001494:	3301      	adds	r3, #1
 8001496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800149a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d9ef      	bls.n	8001482 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 80014a8:	2304      	movs	r3, #4
 80014aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014ae:	e006      	b.n	80014be <SD_disk_ioctl+0x23e>
      break;
 80014b0:	bf00      	nop
 80014b2:	e004      	b.n	80014be <SD_disk_ioctl+0x23e>
      break;
 80014b4:	bf00      	nop
 80014b6:	e002      	b.n	80014be <SD_disk_ioctl+0x23e>
      break;
 80014b8:	bf00      	nop
 80014ba:	e000      	b.n	80014be <SD_disk_ioctl+0x23e>
      break;
 80014bc:	bf00      	nop
    }

    DESELECT();
 80014be:	f7ff fb37 	bl	8000b30 <DESELECT>
    SPI_RxByte();
 80014c2:	f7ff fb75 	bl	8000bb0 <SPI_RxByte>
  }

  return res;
 80014c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	372c      	adds	r7, #44	; 0x2c
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000000 	.word	0x20000000

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	b09c      	sub	sp, #112	; 0x70
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configurationte--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014de:	f000 ff2b 	bl	8002338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e2:	f000 f901 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e6:	f000 fa05 	bl	80018f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014ea:	f000 f9d3 	bl	8001894 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80014ee:	f000 f95b 	bl	80017a8 <MX_CAN_Init>
  MX_FATFS_Init();
 80014f2:	f005 f835 	bl	8006560 <MX_FATFS_Init>
  MX_SPI1_Init();
 80014f6:	f000 f98f 	bl	8001818 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  myprintf("------- CAN Captain Controller ----------\r\n");
 80014fa:	4865      	ldr	r0, [pc, #404]	; (8001690 <main+0x1b8>)
 80014fc:	f000 fa44 	bl	8001988 <myprintf>

  canfil.FilterBank = 0;
 8001500:	4b64      	ldr	r3, [pc, #400]	; (8001694 <main+0x1bc>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <main+0x1bc>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 800150c:	4b61      	ldr	r3, [pc, #388]	; (8001694 <main+0x1bc>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8001512:	4b60      	ldr	r3, [pc, #384]	; (8001694 <main+0x1bc>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 8001518:	4b5e      	ldr	r3, [pc, #376]	; (8001694 <main+0x1bc>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 800151e:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <main+0x1bc>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8001524:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <main+0x1bc>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800152a:	4b5a      	ldr	r3, [pc, #360]	; (8001694 <main+0x1bc>)
 800152c:	2201      	movs	r2, #1
 800152e:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8001530:	4b58      	ldr	r3, [pc, #352]	; (8001694 <main+0x1bc>)
 8001532:	2201      	movs	r2, #1
 8001534:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 8001536:	4b57      	ldr	r3, [pc, #348]	; (8001694 <main+0x1bc>)
 8001538:	220e      	movs	r2, #14
 800153a:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan,&canfil) != HAL_OK){
 800153c:	4955      	ldr	r1, [pc, #340]	; (8001694 <main+0x1bc>)
 800153e:	4856      	ldr	r0, [pc, #344]	; (8001698 <main+0x1c0>)
 8001540:	f001 f82b 	bl	800259a <HAL_CAN_ConfigFilter>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <main+0x76>
	Error_Handler();
 800154a:	f000 fced 	bl	8001f28 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan) != HAL_OK){
 800154e:	4852      	ldr	r0, [pc, #328]	; (8001698 <main+0x1c0>)
 8001550:	f001 f8ed 	bl	800272e <HAL_CAN_Start>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <main+0x86>
	Error_Handler();
 800155a:	f000 fce5 	bl	8001f28 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800155e:	2102      	movs	r1, #2
 8001560:	484d      	ldr	r0, [pc, #308]	; (8001698 <main+0x1c0>)
 8001562:	f001 fb72 	bl	8002c4a <HAL_CAN_ActivateNotification>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <main+0x98>
	Error_Handler();
 800156c:	f000 fcdc 	bl	8001f28 <Error_Handler>
  }


  myprintf("SD Card Connecting\r\n");
 8001570:	484a      	ldr	r0, [pc, #296]	; (800169c <main+0x1c4>)
 8001572:	f000 fa09 	bl	8001988 <myprintf>
  fres = f_mount(&FatFs, "0", 1);    //1=mount now
 8001576:	2201      	movs	r2, #1
 8001578:	4949      	ldr	r1, [pc, #292]	; (80016a0 <main+0x1c8>)
 800157a:	484a      	ldr	r0, [pc, #296]	; (80016a4 <main+0x1cc>)
 800157c:	f007 f99a 	bl	80088b4 <f_mount>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <main+0x1d0>)
 8001586:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <main+0x1d0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <main+0xc6>
  {
  myprintf("No SD Card found : (%i)\r\n", fres);
 8001590:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <main+0x1d0>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	4845      	ldr	r0, [pc, #276]	; (80016ac <main+0x1d4>)
 8001598:	f000 f9f6 	bl	8001988 <myprintf>
 800159c:	e002      	b.n	80015a4 <main+0xcc>
  }
  else {
  myprintf("SD Card Mounted Successfully!!!\r\n");
 800159e:	4844      	ldr	r0, [pc, #272]	; (80016b0 <main+0x1d8>)
 80015a0:	f000 f9f2 	bl	8001988 <myprintf>
  }
  f_mount(NULL, "0", 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	493e      	ldr	r1, [pc, #248]	; (80016a0 <main+0x1c8>)
 80015a8:	2000      	movs	r0, #0
 80015aa:	f007 f983 	bl	80088b4 <f_mount>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of canTelemetryMutex */
  osMutexDef(canTelemetryMutex);
 80015ae:	2300      	movs	r3, #0
 80015b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  canTelemetryMutexHandle = osMutexCreate(osMutex(canTelemetryMutex));
 80015b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015b6:	4618      	mov	r0, r3
 80015b8:	f009 f8bb 	bl	800a732 <osMutexCreate>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a3d      	ldr	r2, [pc, #244]	; (80016b4 <main+0x1dc>)
 80015c0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of TelemetryQueue */
  osMessageQDef(TelemetryQueue, 16, uint16_t);
 80015c2:	4a3d      	ldr	r2, [pc, #244]	; (80016b8 <main+0x1e0>)
 80015c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015cc:	e883 0003 	stmia.w	r3, {r0, r1}
  TelemetryQueueHandle = osMessageCreate(osMessageQ(TelemetryQueue), NULL);
 80015d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f009 f96d 	bl	800a8b6 <osMessageCreate>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a37      	ldr	r2, [pc, #220]	; (80016bc <main+0x1e4>)
 80015e0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <main+0x1e8>)
 80015e4:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80015e8:	461d      	mov	r5, r3
 80015ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f009 f85f 	bl	800a6bc <osThreadCreate>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a30      	ldr	r2, [pc, #192]	; (80016c4 <main+0x1ec>)
 8001602:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDCardSaveTask */
  osThreadDef(SDCardSaveTask, StartSDCardSaveTask, osPriorityHigh, 0, 128);
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <main+0x1f0>)
 8001606:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800160a:	461d      	mov	r5, r3
 800160c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	6023      	str	r3, [r4, #0]
  SDCardSaveTaskHandle = osThreadCreate(osThread(SDCardSaveTask), NULL);
 8001614:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f009 f84e 	bl	800a6bc <osThreadCreate>
 8001620:	4603      	mov	r3, r0
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <main+0x1f4>)
 8001624:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData1 */
  osThreadDef(GetData1, StartGetData1, osPriorityBelowNormal, 0, 128);
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <main+0x1f8>)
 8001628:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800162c:	461d      	mov	r5, r3
 800162e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001632:	682b      	ldr	r3, [r5, #0]
 8001634:	6023      	str	r3, [r4, #0]
  GetData1Handle = osThreadCreate(osThread(GetData1), NULL);
 8001636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f009 f83d 	bl	800a6bc <osThreadCreate>
 8001642:	4603      	mov	r3, r0
 8001644:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <main+0x1fc>)
 8001646:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData2 */
  osThreadDef(GetData2, StartGetData2, osPriorityBelowNormal, 0, 128);
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <main+0x200>)
 800164a:	f107 0414 	add.w	r4, r7, #20
 800164e:	461d      	mov	r5, r3
 8001650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	6023      	str	r3, [r4, #0]
  GetData2Handle = osThreadCreate(osThread(GetData2), NULL);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f009 f82c 	bl	800a6bc <osThreadCreate>
 8001664:	4603      	mov	r3, r0
 8001666:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <main+0x204>)
 8001668:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadCAN */
  osThreadDef(ReadCAN, StartReadCAN, osPriorityNormal, 0, 128);
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <main+0x208>)
 800166c:	463c      	mov	r4, r7
 800166e:	461d      	mov	r5, r3
 8001670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	6023      	str	r3, [r4, #0]
  ReadCANHandle = osThreadCreate(osThread(ReadCAN), NULL);
 8001678:	463b      	mov	r3, r7
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f009 f81d 	bl	800a6bc <osThreadCreate>
 8001682:	4603      	mov	r3, r0
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <main+0x20c>)
 8001686:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001688:	f009 f811 	bl	800a6ae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800168c:	e7fe      	b.n	800168c <main+0x1b4>
 800168e:	bf00      	nop
 8001690:	0800dba0 	.word	0x0800dba0
 8001694:	20002270 	.word	0x20002270
 8001698:	200000b8 	.word	0x200000b8
 800169c:	0800dbcc 	.word	0x0800dbcc
 80016a0:	0800dbe4 	.word	0x0800dbe4
 80016a4:	200001e4 	.word	0x200001e4
 80016a8:	20002248 	.word	0x20002248
 80016ac:	0800dbe8 	.word	0x0800dbe8
 80016b0:	0800dc04 	.word	0x0800dc04
 80016b4:	200001e0 	.word	0x200001e0
 80016b8:	0800dc28 	.word	0x0800dc28
 80016bc:	200001dc 	.word	0x200001dc
 80016c0:	0800dc30 	.word	0x0800dc30
 80016c4:	200001c8 	.word	0x200001c8
 80016c8:	0800dc44 	.word	0x0800dc44
 80016cc:	200001cc 	.word	0x200001cc
 80016d0:	0800dc58 	.word	0x0800dc58
 80016d4:	200001d0 	.word	0x200001d0
 80016d8:	0800dc6c 	.word	0x0800dc6c
 80016dc:	200001d4 	.word	0x200001d4
 80016e0:	0800dc80 	.word	0x0800dc80
 80016e4:	200001d8 	.word	0x200001d8

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b0a6      	sub	sp, #152	; 0x98
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016f2:	2228      	movs	r2, #40	; 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00b fd02 	bl	800d100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2258      	movs	r2, #88	; 0x58
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f00b fcf4 	bl	800d100 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001718:	2301      	movs	r3, #1
 800171a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001720:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001722:	2301      	movs	r3, #1
 8001724:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001734:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001746:	4618      	mov	r0, r3
 8001748:	f001 fd2a 	bl	80031a0 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001752:	f000 fbe9 	bl	8001f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001766:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800176c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fd68 	bl	8004248 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800177e:	f000 fbd3 	bl	8001f28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001782:	2302      	movs	r3, #2
 8001784:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fffb 	bl	8004788 <HAL_RCCEx_PeriphCLKConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001798:	f000 fbc6 	bl	8001f28 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800179c:	f002 fed0 	bl	8004540 <HAL_RCC_EnableCSS>
}
 80017a0:	bf00      	nop
 80017a2:	3798      	adds	r7, #152	; 0x98
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_CAN_Init+0x68>)
 80017ae:	4a19      	ldr	r2, [pc, #100]	; (8001814 <MX_CAN_Init+0x6c>)
 80017b0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_CAN_Init+0x68>)
 80017b4:	2208      	movs	r2, #8
 80017b6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_CAN_Init+0x68>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_CAN_Init+0x68>)
 80017c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017c4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_CAN_Init+0x68>)
 80017c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017cc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <MX_CAN_Init+0x68>)
 80017d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017d4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_CAN_Init+0x68>)
 80017d8:	2200      	movs	r2, #0
 80017da:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_CAN_Init+0x68>)
 80017de:	2200      	movs	r2, #0
 80017e0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_CAN_Init+0x68>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_CAN_Init+0x68>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_CAN_Init+0x68>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_CAN_Init+0x68>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_CAN_Init+0x68>)
 80017fc:	f000 fdd2 	bl	80023a4 <HAL_CAN_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001806:	f000 fb8f 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200000b8 	.word	0x200000b8
 8001814:	40006400 	.word	0x40006400

08001818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_SPI1_Init+0x74>)
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <MX_SPI1_Init+0x78>)
 8001820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_SPI1_Init+0x74>)
 8001824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_SPI1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_SPI1_Init+0x74>)
 8001832:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001836:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001838:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_SPI1_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <MX_SPI1_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_SPI1_Init+0x74>)
 8001846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_SPI1_Init+0x74>)
 800184e:	2210      	movs	r2, #16
 8001850:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_SPI1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_SPI1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_SPI1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_SPI1_Init+0x74>)
 8001866:	2207      	movs	r2, #7
 8001868:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_SPI1_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_SPI1_Init+0x74>)
 8001872:	2208      	movs	r2, #8
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_SPI1_Init+0x74>)
 8001878:	f003 f9a4 	bl	8004bc4 <HAL_SPI_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 fb51 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000e0 	.word	0x200000e0
 8001890:	40013000 	.word	0x40013000

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_USART2_UART_Init+0x58>)
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <MX_USART2_UART_Init+0x5c>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART2_UART_Init+0x58>)
 80018d8:	f004 f9da 	bl	8005c90 <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018e2:	f000 fb21 	bl	8001f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000144 	.word	0x20000144
 80018f0:	40004400 	.word	0x40004400

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_GPIO_Init+0x8c>)
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001914:	6153      	str	r3, [r2, #20]
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4a16      	ldr	r2, [pc, #88]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	6153      	str	r3, [r2, #20]
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_GPIO_Init+0x8c>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001944:	6153      	str	r3, [r2, #20]
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_GPIO_Init+0x8c>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2140      	movs	r1, #64	; 0x40
 8001956:	480b      	ldr	r0, [pc, #44]	; (8001984 <MX_GPIO_Init+0x90>)
 8001958:	f001 fc0a 	bl	8003170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SP1_CS_Pin */
  GPIO_InitStruct.Pin = SP1_CS_Pin;
 800195c:	2340      	movs	r3, #64	; 0x40
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SP1_CS_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_GPIO_Init+0x90>)
 8001974:	f001 fa72 	bl	8002e5c <HAL_GPIO_Init>

}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021000 	.word	0x40021000
 8001984:	48000400 	.word	0x48000400

08001988 <myprintf>:
/* USER CODE BEGIN 4 */

int dataShift = 10;
int dataPacket = 1;

void myprintf(const char *fmt, ...) {
 8001988:	b40f      	push	{r0, r1, r2, r3}
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0

	char *buffer = malloc(100);
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	f00b fb97 	bl	800d0c4 <malloc>
 8001996:	4603      	mov	r3, r0
 8001998:	60fb      	str	r3, [r7, #12]

	va_list args;
	va_start(args, fmt);
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, 100, fmt, args);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	2164      	movs	r1, #100	; 0x64
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f00b fd74 	bl	800d494 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7fe fc17 	bl	80001e0 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	68f9      	ldr	r1, [r7, #12]
 80019c0:	4806      	ldr	r0, [pc, #24]	; (80019dc <myprintf+0x54>)
 80019c2:	f004 f9b3 	bl	8005d2c <HAL_UART_Transmit>
	free(buffer);
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f00b fb84 	bl	800d0d4 <free>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019d6:	b004      	add	sp, #16
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000144 	.word	0x20000144

080019e0 <printCANMessage>:
    char* str = malloc(len + 1);
    snprintf(str, len + 1, "%.10d", num);
    return str;
}

void printCANMessage(CAN_RxHeaderTypeDef Header, uint8_t data[]){
 80019e0:	b084      	sub	sp, #16
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	f107 0c20 	add.w	ip, r7, #32
 80019ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char dataStr[20];
	myprintf("canMsg = 0x%lx %li", Header.StdId, Header.DLC);
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019f4:	4619      	mov	r1, r3
 80019f6:	4810      	ldr	r0, [pc, #64]	; (8001a38 <printCANMessage+0x58>)
 80019f8:	f7ff ffc6 	bl	8001988 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00c      	b.n	8001a1c <printCANMessage+0x3c>
		myprintf(dataStr, " %x", data[i]);
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	490b      	ldr	r1, [pc, #44]	; (8001a3c <printCANMessage+0x5c>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ffb9 	bl	8001988 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8ee      	bhi.n	8001a02 <printCANMessage+0x22>
	}
	myprintf("\r\n");
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <printCANMessage+0x60>)
 8001a26:	f7ff ffaf 	bl	8001988 <myprintf>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a34:	b004      	add	sp, #16
 8001a36:	4770      	bx	lr
 8001a38:	0800dc9c 	.word	0x0800dc9c
 8001a3c:	0800dcb0 	.word	0x0800dcb0
 8001a40:	0800dcb4 	.word	0x0800dcb4

08001a44 <print_buffer>:

void print_buffer(CSV_BUFFER *buffer){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	6078      	str	r0, [r7, #4]
	int i, j;
	myprintf("\n");
 8001a4c:	481f      	ldr	r0, [pc, #124]	; (8001acc <print_buffer+0x88>)
 8001a4e:	f7ff ff9b 	bl	8001988 <myprintf>
	for (i = 0; i < buffer->rows; i++) {
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e02c      	b.n	8001ab2 <print_buffer+0x6e>
		for (j = 0; j < buffer->width[i]; j++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	e01a      	b.n	8001a94 <print_buffer+0x50>
			myprintf("%c%s%c%c", buffer->text_delim, buffer->field[i][j]->text, buffer->text_delim, buffer->field_delim);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7b5b      	ldrb	r3, [r3, #13]
 8001a62:	4619      	mov	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7b5b      	ldrb	r3, [r3, #13]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7b1b      	ldrb	r3, [r3, #12]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	4603      	mov	r3, r0
 8001a88:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <print_buffer+0x8c>)
 8001a8a:	f7ff ff7d 	bl	8001988 <myprintf>
		for (j = 0; j < buffer->width[i]; j++) {
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d8db      	bhi.n	8001a5e <print_buffer+0x1a>
		}
		myprintf("\r\n");
 8001aa6:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <print_buffer+0x90>)
 8001aa8:	f7ff ff6e 	bl	8001988 <myprintf>
	for (i = 0; i < buffer->rows; i++) {
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d8cd      	bhi.n	8001a58 <print_buffer+0x14>
	}
	myprintf("\n\n");
 8001abc:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <print_buffer+0x94>)
 8001abe:	f7ff ff63 	bl	8001988 <myprintf>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800dcb8 	.word	0x0800dcb8
 8001ad0:	0800dcbc 	.word	0x0800dcbc
 8001ad4:	0800dcb4 	.word	0x0800dcb4
 8001ad8:	0800dcc8 	.word	0x0800dcc8

08001adc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//myprintf(" -- STARTING thread DefaultTask -- \r\n");
		DefaultProfiler++;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <StartDefaultTask+0x20>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <StartDefaultTask+0x20>)
 8001aec:	6013      	str	r3, [r2, #0]
//		myprintf("packet sent: %s\r\n", data);
//		myprintf("num free mailboxs: %i\r\n", freeMailboxs);
//		myprintf("text mailbox used: %ld\r\n", TxMailbox);

		//myprintf(" -- ENDING thread DefaultTask -- \r\n");
		osDelay(DefaultTask_delay);	// Task is put to sleep for 500ms
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <StartDefaultTask+0x24>)
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f008 fe08 	bl	800a70a <osDelay>
		DefaultProfiler++;
 8001afa:	e7f3      	b.n	8001ae4 <StartDefaultTask+0x8>
 8001afc:	20002298 	.word	0x20002298
 8001b00:	20000002 	.word	0x20000002

08001b04 <StartSDCardSaveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDCardSaveTask */
void StartSDCardSaveTask(void const * argument)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b092      	sub	sp, #72	; 0x48
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDCardSaveTask */
  uint8_t sens_reading = 2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t current_row = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t file_number = 1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  TCHAR file_path[30];
  char string_value[20] = {0};
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]

  sprintf(file_path, "0:/csv/test%hu.csv", file_number);
 8001b30:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4970      	ldr	r1, [pc, #448]	; (8001cfc <StartSDCardSaveTask+0x1f8>)
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f00b fc4a 	bl	800d3d4 <siprintf>
  /* Infinite loop */
  for(;;)
  {
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 8001b40:	486f      	ldr	r0, [pc, #444]	; (8001d00 <StartSDCardSaveTask+0x1fc>)
 8001b42:	f7ff ff21 	bl	8001988 <myprintf>

	myprintf("Mounting SD card\r\n");
 8001b46:	486f      	ldr	r0, [pc, #444]	; (8001d04 <StartSDCardSaveTask+0x200>)
 8001b48:	f7ff ff1e 	bl	8001988 <myprintf>
		fres = f_mount(&FatFs, "0", 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	496e      	ldr	r1, [pc, #440]	; (8001d08 <StartSDCardSaveTask+0x204>)
 8001b50:	486e      	ldr	r0, [pc, #440]	; (8001d0c <StartSDCardSaveTask+0x208>)
 8001b52:	f006 feaf 	bl	80088b4 <f_mount>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001b5c:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK){
 8001b5e:	4b6c      	ldr	r3, [pc, #432]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <StartSDCardSaveTask+0x70>
			myprintf("f_mount problem: %d\r\n", fres);
 8001b66:	4b6a      	ldr	r3, [pc, #424]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4869      	ldr	r0, [pc, #420]	; (8001d14 <StartSDCardSaveTask+0x210>)
 8001b6e:	f7ff ff0b 	bl	8001988 <myprintf>
 8001b72:	e0af      	b.n	8001cd4 <StartSDCardSaveTask+0x1d0>
		}
		else if (current_row < 10 || file_number < 10){
 8001b74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d904      	bls.n	8001b86 <StartSDCardSaveTask+0x82>
 8001b7c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	f200 80a4 	bhi.w	8001cce <StartSDCardSaveTask+0x1ca>
			myprintf("SD Card Mounted!\r\n");
 8001b86:	4864      	ldr	r0, [pc, #400]	; (8001d18 <StartSDCardSaveTask+0x214>)
 8001b88:	f7ff fefe 	bl	8001988 <myprintf>

			if (current_row == 5 || file_number == 1){
 8001b8c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d003      	beq.n	8001b9c <StartSDCardSaveTask+0x98>
 8001b94:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d12f      	bne.n	8001bfc <StartSDCardSaveTask+0xf8>
				current_row = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				do {
					sprintf(file_path, "0:/csv/test%hu.csv", file_number);
 8001ba2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4954      	ldr	r1, [pc, #336]	; (8001cfc <StartSDCardSaveTask+0x1f8>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f00b fc11 	bl	800d3d4 <siprintf>
					fres = f_stat(file_path, filInfo);
 8001bb2:	4b5a      	ldr	r3, [pc, #360]	; (8001d1c <StartSDCardSaveTask+0x218>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f008 fb47 	bl	800a250 <f_stat>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b52      	ldr	r3, [pc, #328]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001bc8:	701a      	strb	r2, [r3, #0]
					file_number++;
 8001bca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					if (fres != FR_OK) break;
 8001bd4:	4b4e      	ldr	r3, [pc, #312]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10e      	bne.n	8001bfa <StartSDCardSaveTask+0xf6>
					myprintf("filepath exists (not overwriting): %s\r\n",file_path);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	484f      	ldr	r0, [pc, #316]	; (8001d20 <StartSDCardSaveTask+0x21c>)
 8001be4:	f7ff fed0 	bl	8001988 <myprintf>
				} while(fres != FR_NO_FILE && !OVERWRITE);
 8001be8:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d005      	beq.n	8001bfc <StartSDCardSaveTask+0xf8>
 8001bf0:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <StartSDCardSaveTask+0x220>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0d4      	beq.n	8001ba2 <StartSDCardSaveTask+0x9e>
 8001bf8:	e000      	b.n	8001bfc <StartSDCardSaveTask+0xf8>
					if (fres != FR_OK) break;
 8001bfa:	bf00      	nop
			}

			myprintf("using filepath: %s\r\n",file_path);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	4849      	ldr	r0, [pc, #292]	; (8001d28 <StartSDCardSaveTask+0x224>)
 8001c04:	f7ff fec0 	bl	8001988 <myprintf>

			// read file, else if doesnt exist create new file
			fres = f_open(&rwfile, file_path, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	2213      	movs	r2, #19
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4846      	ldr	r0, [pc, #280]	; (8001d2c <StartSDCardSaveTask+0x228>)
 8001c12:	f006 febb 	bl	800898c <f_open>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001c1c:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK)
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <StartSDCardSaveTask+0x130>
			{
				myprintf("f_open problem: %d\r\n", fres);
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <StartSDCardSaveTask+0x20c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <StartSDCardSaveTask+0x22c>)
 8001c2e:	f7ff feab 	bl	8001988 <myprintf>
			if (fres != FR_OK)
 8001c32:	e04f      	b.n	8001cd4 <StartSDCardSaveTask+0x1d0>
			}
			else{
				myprintf("Creating buffer\r\n");
 8001c34:	483f      	ldr	r0, [pc, #252]	; (8001d34 <StartSDCardSaveTask+0x230>)
 8001c36:	f7ff fea7 	bl	8001988 <myprintf>
				CSV_BUFFER *buffer = csv_create_buffer();
 8001c3a:	f7fe fd69 	bl	8000710 <csv_create_buffer>
 8001c3e:	63f8      	str	r0, [r7, #60]	; 0x3c

				myprintf("Loading csv\r\n");
 8001c40:	483d      	ldr	r0, [pc, #244]	; (8001d38 <StartSDCardSaveTask+0x234>)
 8001c42:	f7ff fea1 	bl	8001988 <myprintf>
				csv_load(buffer, &rwfile);
 8001c46:	4939      	ldr	r1, [pc, #228]	; (8001d2c <StartSDCardSaveTask+0x228>)
 8001c48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c4a:	f7fe fdd4 	bl	80007f6 <csv_load>

				print_buffer(buffer);
 8001c4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c50:	f7ff fef8 	bl	8001a44 <print_buffer>

				// add a row and input values

				myprintf("editing csv\r\n");
 8001c54:	4839      	ldr	r0, [pc, #228]	; (8001d3c <StartSDCardSaveTask+0x238>)
 8001c56:	f7ff fe97 	bl	8001988 <myprintf>

				for (int i = 0; i < 5; i++){
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c5e:	e01e      	b.n	8001c9e <StartSDCardSaveTask+0x19a>
					sprintf(string_value, "%i\r", sens_reading);
 8001c60:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	4935      	ldr	r1, [pc, #212]	; (8001d40 <StartSDCardSaveTask+0x23c>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f00b fbb2 	bl	800d3d4 <siprintf>
					csv_set_field(buffer, current_row, i, string_value);
 8001c70:	f897 1046 	ldrb.w	r1, [r7, #70]	; 0x46
 8001c74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001c7c:	f7fe ff16 	bl	8000aac <csv_set_field>
					memset(string_value, 0, sizeof(string_value));
 8001c80:	f107 0308 	add.w	r3, r7, #8
 8001c84:	2214      	movs	r2, #20
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f00b fa39 	bl	800d100 <memset>
					sens_reading++;
 8001c8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c92:	3301      	adds	r3, #1
 8001c94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				for (int i = 0; i < 5; i++){
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	dddd      	ble.n	8001c60 <StartSDCardSaveTask+0x15c>
				}
				current_row++;
 8001ca4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

				csv_save(&rwfile, buffer);
 8001cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001cb0:	481e      	ldr	r0, [pc, #120]	; (8001d2c <StartSDCardSaveTask+0x228>)
 8001cb2:	f7fe fe0e 	bl	80008d2 <csv_save>

				f_mount(NULL, "0", 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4913      	ldr	r1, [pc, #76]	; (8001d08 <StartSDCardSaveTask+0x204>)
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f006 fdfa 	bl	80088b4 <f_mount>

				f_close(&rwfile);
 8001cc0:	481a      	ldr	r0, [pc, #104]	; (8001d2c <StartSDCardSaveTask+0x228>)
 8001cc2:	f007 ff20 	bl	8009b06 <f_close>
				csv_destroy_buffer(buffer);
 8001cc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cc8:	f7fe fd41 	bl	800074e <csv_destroy_buffer>
			if (fres != FR_OK)
 8001ccc:	e002      	b.n	8001cd4 <StartSDCardSaveTask+0x1d0>
			}
		}
		else{
			myprintf("rows completed\r\n");
 8001cce:	481d      	ldr	r0, [pc, #116]	; (8001d44 <StartSDCardSaveTask+0x240>)
 8001cd0:	f7ff fe5a 	bl	8001988 <myprintf>
		}

	// restart CAN telemetry threads
	//myprintf(" -- RESUMING thread GetData1 -- \r\n");
	osThreadResume(GetData1Handle);
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <StartSDCardSaveTask+0x244>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f008 fe0b 	bl	800a8f4 <osThreadResume>
	//myprintf(" -- RESUMING thread GetData2 -- \r\n");
	osThreadResume(GetData2Handle);
 8001cde:	4b1b      	ldr	r3, [pc, #108]	; (8001d4c <StartSDCardSaveTask+0x248>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f008 fe06 	bl	800a8f4 <osThreadResume>

	myprintf(" -- ENDING thread SDCardSave -- \r\n");
 8001ce8:	4819      	ldr	r0, [pc, #100]	; (8001d50 <StartSDCardSaveTask+0x24c>)
 8001cea:	f7ff fe4d 	bl	8001988 <myprintf>
	osDelay(SDCardSave_delay);
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <StartSDCardSaveTask+0x250>)
 8001cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f008 fd08 	bl	800a70a <osDelay>
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 8001cfa:	e721      	b.n	8001b40 <StartSDCardSaveTask+0x3c>
 8001cfc:	0800dccc 	.word	0x0800dccc
 8001d00:	0800dce0 	.word	0x0800dce0
 8001d04:	0800dd08 	.word	0x0800dd08
 8001d08:	0800dbe4 	.word	0x0800dbe4
 8001d0c:	200001e4 	.word	0x200001e4
 8001d10:	20002248 	.word	0x20002248
 8001d14:	0800dd1c 	.word	0x0800dd1c
 8001d18:	0800dd34 	.word	0x0800dd34
 8001d1c:	20002244 	.word	0x20002244
 8001d20:	0800dd48 	.word	0x0800dd48
 8001d24:	20002249 	.word	0x20002249
 8001d28:	0800dd70 	.word	0x0800dd70
 8001d2c:	20001218 	.word	0x20001218
 8001d30:	0800dd88 	.word	0x0800dd88
 8001d34:	0800dda0 	.word	0x0800dda0
 8001d38:	0800ddb4 	.word	0x0800ddb4
 8001d3c:	0800ddc4 	.word	0x0800ddc4
 8001d40:	0800ddd4 	.word	0x0800ddd4
 8001d44:	0800ddd8 	.word	0x0800ddd8
 8001d48:	200001d0 	.word	0x200001d0
 8001d4c:	200001d4 	.word	0x200001d4
 8001d50:	0800ddec 	.word	0x0800ddec
 8001d54:	20000004 	.word	0x20000004

08001d58 <StartGetData1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData1 */
void StartGetData1(void const * argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	; 0x30
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData1 */
	CAN_TxHeaderTypeDef   TxHeader1;

	// can transmission 1
	TxHeader1.StdId = 0x201;
 8001d60:	f240 2301 	movw	r3, #513	; 0x201
 8001d64:	617b      	str	r3, [r7, #20]
	TxHeader1.ExtId = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
	TxHeader1.RTR = CAN_RTR_DATA;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
	TxHeader1.IDE = CAN_ID_STD;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
	TxHeader1.DLC = 4;
 8001d72:	2304      	movs	r3, #4
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader1.TransmitGlobalTime = DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint8_t TransmissionData1[8] = "dat1";
 8001d7c:	4a34      	ldr	r2, [pc, #208]	; (8001e50 <StartGetData1+0xf8>)
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d86:	6018      	str	r0, [r3, #0]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	7019      	strb	r1, [r3, #0]
 8001d8c:	f107 0311 	add.w	r3, r7, #17
 8001d90:	2200      	movs	r2, #0
 8001d92:	801a      	strh	r2, [r3, #0]
 8001d94:	709a      	strb	r2, [r3, #2]
	uint8_t node1req[4] = {0x77, 0x6f, 0x6f, 0x66};
 8001d96:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <StartGetData1+0xfc>)
 8001d98:	60bb      	str	r3, [r7, #8]
	uint32_t current_time;
	/* Infinite loop */
  for(;;)
  {
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 8001d9a:	482f      	ldr	r0, [pc, #188]	; (8001e58 <StartGetData1+0x100>)
 8001d9c:	f7ff fdf4 	bl	8001988 <myprintf>
	  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8001da0:	482e      	ldr	r0, [pc, #184]	; (8001e5c <StartGetData1+0x104>)
 8001da2:	f000 fde3 	bl	800296c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <StartGetData1+0x76>
		  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader1, TransmissionData1, &TxMailbox) == HAL_OK){
 8001dac:	f107 020c 	add.w	r2, r7, #12
 8001db0:	f107 0114 	add.w	r1, r7, #20
 8001db4:	4b2a      	ldr	r3, [pc, #168]	; (8001e60 <StartGetData1+0x108>)
 8001db6:	4829      	ldr	r0, [pc, #164]	; (8001e5c <StartGetData1+0x104>)
 8001db8:	f000 fcfd 	bl	80027b6 <HAL_CAN_AddTxMessage>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <StartGetData1+0x72>
			  myprintf("CAN message sent to data1\r\n");}
 8001dc2:	4828      	ldr	r0, [pc, #160]	; (8001e64 <StartGetData1+0x10c>)
 8001dc4:	f7ff fde0 	bl	8001988 <myprintf>
 8001dc8:	e001      	b.n	8001dce <StartGetData1+0x76>
		  else{
			  Error_Handler();
 8001dca:	f000 f8ad 	bl	8001f28 <Error_Handler>
		  }
	  }
	  osDelay(10);	// response delay
 8001dce:	200a      	movs	r0, #10
 8001dd0:	f008 fc9b 	bl	800a70a <osDelay>
	  // continue retransmission until data1 is collected
	  // change this to wait for a flag change from ReadCAN
	  if (RxHeader.StdId == 0x206 &&
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <StartGetData1+0x110>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f240 2206 	movw	r2, #518	; 0x206
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d122      	bne.n	8001e26 <StartGetData1+0xce>
		  RxData[0] == node1req[0] &&
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <StartGetData1+0x114>)
 8001de2:	781a      	ldrb	r2, [r3, #0]
 8001de4:	7a3b      	ldrb	r3, [r7, #8]
	  if (RxHeader.StdId == 0x206 &&
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d11d      	bne.n	8001e26 <StartGetData1+0xce>
		  RxData[1] == node1req[1] &&
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <StartGetData1+0x114>)
 8001dec:	785a      	ldrb	r2, [r3, #1]
 8001dee:	7a7b      	ldrb	r3, [r7, #9]
		  RxData[0] == node1req[0] &&
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d118      	bne.n	8001e26 <StartGetData1+0xce>
	      RxData[2] == node1req[2] &&
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <StartGetData1+0x114>)
 8001df6:	789a      	ldrb	r2, [r3, #2]
 8001df8:	7abb      	ldrb	r3, [r7, #10]
		  RxData[1] == node1req[1] &&
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d113      	bne.n	8001e26 <StartGetData1+0xce>
		  RxData[3] == node1req[3]){
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <StartGetData1+0x114>)
 8001e00:	78da      	ldrb	r2, [r3, #3]
 8001e02:	7afb      	ldrb	r3, [r7, #11]
	      RxData[2] == node1req[2] &&
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d10e      	bne.n	8001e26 <StartGetData1+0xce>
		  // process data1...
		  myprintf("CAN response from node1\r\n");
 8001e08:	4819      	ldr	r0, [pc, #100]	; (8001e70 <StartGetData1+0x118>)
 8001e0a:	f7ff fdbd 	bl	8001988 <myprintf>
		  myprintf("processing...\r\n");
 8001e0e:	4819      	ldr	r0, [pc, #100]	; (8001e74 <StartGetData1+0x11c>)
 8001e10:	f7ff fdba 	bl	8001988 <myprintf>
		  myprintf(" -- SUSPENDING thread GetData1 -- \r\n");
 8001e14:	4818      	ldr	r0, [pc, #96]	; (8001e78 <StartGetData1+0x120>)
 8001e16:	f7ff fdb7 	bl	8001988 <myprintf>
		  osThreadSuspend(GetData1Handle);
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <StartGetData1+0x124>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f008 fd5b 	bl	800a8da <osThreadSuspend>
 8001e24:	e012      	b.n	8001e4c <StartGetData1+0xf4>
	  }
	  else{
		  myprintf("no CAN response, delaying thread GetData1\r\n");
 8001e26:	4816      	ldr	r0, [pc, #88]	; (8001e80 <StartGetData1+0x128>)
 8001e28:	f7ff fdae 	bl	8001988 <myprintf>
		  current_time = HAL_GetTick();
 8001e2c:	f000 faae 	bl	800238c <HAL_GetTick>
 8001e30:	62f8      	str	r0, [r7, #44]	; 0x2c
		  myprintf("current time: %lu\r\n", current_time);
 8001e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e34:	4813      	ldr	r0, [pc, #76]	; (8001e84 <StartGetData1+0x12c>)
 8001e36:	f7ff fda7 	bl	8001988 <myprintf>
		  myprintf(" -- ENDING thread GetData1 -- \r\n");
 8001e3a:	4813      	ldr	r0, [pc, #76]	; (8001e88 <StartGetData1+0x130>)
 8001e3c:	f7ff fda4 	bl	8001988 <myprintf>
		  osDelay(retransmit_delay);
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <StartGetData1+0x134>)
 8001e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f008 fc5f 	bl	800a70a <osDelay>
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 8001e4c:	e7a5      	b.n	8001d9a <StartGetData1+0x42>
 8001e4e:	bf00      	nop
 8001e50:	0800df08 	.word	0x0800df08
 8001e54:	666f6f77 	.word	0x666f6f77
 8001e58:	0800de10 	.word	0x0800de10
 8001e5c:	200000b8 	.word	0x200000b8
 8001e60:	2000226c 	.word	0x2000226c
 8001e64:	0800de34 	.word	0x0800de34
 8001e68:	2000224c 	.word	0x2000224c
 8001e6c:	20002268 	.word	0x20002268
 8001e70:	0800de50 	.word	0x0800de50
 8001e74:	0800de6c 	.word	0x0800de6c
 8001e78:	0800de7c 	.word	0x0800de7c
 8001e7c:	200001d0 	.word	0x200001d0
 8001e80:	0800dea4 	.word	0x0800dea4
 8001e84:	0800ded0 	.word	0x0800ded0
 8001e88:	0800dee4 	.word	0x0800dee4
 8001e8c:	20000008 	.word	0x20000008

08001e90 <StartGetData2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData2 */
void StartGetData2(void const * argument)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(retransmit_delay);
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <StartGetData2+0x18>)
 8001e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f008 fc33 	bl	800a70a <osDelay>
 8001ea4:	e7f8      	b.n	8001e98 <StartGetData2+0x8>
 8001ea6:	bf00      	nop
 8001ea8:	20000008 	.word	0x20000008

08001eac <StartReadCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCAN */
void StartReadCAN(void const * argument)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af04      	add	r7, sp, #16
 8001eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCAN */
	/* Infinite loop */
	for(;;)
	{
		//myprintf(" -- STARTING thread ReadCAN -- \r\n");
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	480f      	ldr	r0, [pc, #60]	; (8001ef4 <StartReadCAN+0x48>)
 8001eb8:	f000 fe9f 	bl	8002bfa <HAL_CAN_GetRxFifoFillLevel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d011      	beq.n	8001ee6 <StartReadCAN+0x3a>
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <StartReadCAN+0x4c>)
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <StartReadCAN+0x50>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <StartReadCAN+0x48>)
 8001eca:	f000 fd84 	bl	80029d6 <HAL_CAN_GetRxMessage>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	//LED shows a CAN message read
			printCANMessage(RxHeader, RxData);
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <StartReadCAN+0x50>)
 8001ed0:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <StartReadCAN+0x4c>)
 8001ed2:	9203      	str	r2, [sp, #12]
 8001ed4:	466c      	mov	r4, sp
 8001ed6:	f103 0210 	add.w	r2, r3, #16
 8001eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001edc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ee0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee2:	f7ff fd7d 	bl	80019e0 <printCANMessage>
//				myprintf("data request response from node1 of id 0x206\r\n");
//				data1collected = 1;	// can be changed into thread signal/flag
//			}
		}
		//myprintf(" -- ENDING thread ReadCAN -- \r\n");
		osDelay(read_delay);
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <StartReadCAN+0x54>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 fc0c 	bl	800a70a <osDelay>
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8001ef2:	e7df      	b.n	8001eb4 <StartReadCAN+0x8>
 8001ef4:	200000b8 	.word	0x200000b8
 8001ef8:	20002268 	.word	0x20002268
 8001efc:	2000224c 	.word	0x2000224c
 8001f00:	20000006 	.word	0x20000006

08001f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f16:	f000 fa25 	bl	8002364 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40001000 	.word	0x40001000

08001f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f2c:	b672      	cpsid	i
}
 8001f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  myprintf("HAL error occurred!\r\n"); // print
 8001f30:	4801      	ldr	r0, [pc, #4]	; (8001f38 <Error_Handler+0x10>)
 8001f32:	f7ff fd29 	bl	8001988 <myprintf>
 8001f36:	e7fb      	b.n	8001f30 <Error_Handler+0x8>
 8001f38:	0800df10 	.word	0x0800df10

08001f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6193      	str	r3, [r2, #24]
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	210f      	movs	r1, #15
 8001f76:	f06f 0001 	mvn.w	r0, #1
 8001f7a:	f000 ff45 	bl	8002e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a18      	ldr	r2, [pc, #96]	; (800200c <HAL_CAN_MspInit+0x80>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d129      	bne.n	8002002 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_CAN_MspInit+0x84>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_CAN_MspInit+0x84>)
 8001fb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_CAN_MspInit+0x84>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_CAN_MspInit+0x84>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4a11      	ldr	r2, [pc, #68]	; (8002010 <HAL_CAN_MspInit+0x84>)
 8001fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_CAN_MspInit+0x84>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001fde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001ff0:	2309      	movs	r3, #9
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffe:	f000 ff2d 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40006400 	.word	0x40006400
 8002010:	40021000 	.word	0x40021000

08002014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_SPI_MspInit+0x7c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d128      	bne.n	8002088 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_SPI_MspInit+0x80>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_SPI_MspInit+0x80>)
 800203c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002040:	6193      	str	r3, [r2, #24]
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_SPI_MspInit+0x80>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_SPI_MspInit+0x80>)
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_SPI_MspInit+0x80>)
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	6153      	str	r3, [r2, #20]
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_SPI_MspInit+0x80>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002066:	23e0      	movs	r3, #224	; 0xe0
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002084:	f000 feea 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40013000 	.word	0x40013000
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_UART_MspInit+0x7c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d128      	bne.n	800210c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_UART_MspInit+0x80>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_UART_MspInit+0x80>)
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_UART_MspInit+0x80>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_UART_MspInit+0x80>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_UART_MspInit+0x80>)
 80020d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020dc:	6153      	str	r3, [r2, #20]
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_UART_MspInit+0x80>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020ea:	230c      	movs	r3, #12
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020fa:	2307      	movs	r3, #7
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002108:	f000 fea8 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40004400 	.word	0x40004400
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	; 0x38
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800212c:	4b33      	ldr	r3, [pc, #204]	; (80021fc <HAL_InitTick+0xe0>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	4a32      	ldr	r2, [pc, #200]	; (80021fc <HAL_InitTick+0xe0>)
 8002132:	f043 0310 	orr.w	r3, r3, #16
 8002136:	61d3      	str	r3, [r2, #28]
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_InitTick+0xe0>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002144:	f107 0210 	add.w	r2, r7, #16
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f002 facc 	bl	80046ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800215e:	f002 fa81 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 8002162:	6378      	str	r0, [r7, #52]	; 0x34
 8002164:	e004      	b.n	8002170 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002166:	f002 fa7d 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 800216a:	4603      	mov	r3, r0
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <HAL_InitTick+0xe4>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	0c9b      	lsrs	r3, r3, #18
 800217a:	3b01      	subs	r3, #1
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <HAL_InitTick+0xe8>)
 8002180:	4a21      	ldr	r2, [pc, #132]	; (8002208 <HAL_InitTick+0xec>)
 8002182:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <HAL_InitTick+0xe8>)
 8002186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800218a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800218c:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_InitTick+0xe8>)
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002190:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_InitTick+0xe8>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <HAL_InitTick+0xe8>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_InitTick+0xe8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021a4:	4817      	ldr	r0, [pc, #92]	; (8002204 <HAL_InitTick+0xe8>)
 80021a6:	f003 fa9d 	bl	80056e4 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80021b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d11b      	bne.n	80021f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021b8:	4812      	ldr	r0, [pc, #72]	; (8002204 <HAL_InitTick+0xe8>)
 80021ba:	f003 faf5 	bl	80057a8 <HAL_TIM_Base_Start_IT>
 80021be:	4603      	mov	r3, r0
 80021c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80021c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021cc:	2036      	movs	r0, #54	; 0x36
 80021ce:	f000 fe37 	bl	8002e40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d808      	bhi.n	80021ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	2036      	movs	r0, #54	; 0x36
 80021de:	f000 fe13 	bl	8002e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_InitTick+0xf0>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e002      	b.n	80021f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3738      	adds	r7, #56	; 0x38
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	431bde83 	.word	0x431bde83
 8002204:	2000229c 	.word	0x2000229c
 8002208:	40001000 	.word	0x40001000
 800220c:	20000010 	.word	0x20000010

08002210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002214:	f002 fa9c 	bl	8004750 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <NMI_Handler+0x8>

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <TIM6_DAC_IRQHandler+0x10>)
 8002246:	f003 fb1f 	bl	8005888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000229c 	.word	0x2000229c

08002254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <_sbrk+0x5c>)
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <_sbrk+0x60>)
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002268:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <_sbrk+0x64>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <_sbrk+0x68>)
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <_sbrk+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	429a      	cmp	r2, r3
 8002282:	d207      	bcs.n	8002294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002284:	f00a fef2 	bl	800d06c <__errno>
 8002288:	4603      	mov	r3, r0
 800228a:	220c      	movs	r2, #12
 800228c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	e009      	b.n	80022a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <_sbrk+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <_sbrk+0x64>)
 80022a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022a6:	68fb      	ldr	r3, [r7, #12]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20010000 	.word	0x20010000
 80022b4:	00000400 	.word	0x00000400
 80022b8:	200022e8 	.word	0x200022e8
 80022bc:	200044c0 	.word	0x200044c0

080022c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <SystemInit+0x20>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <SystemInit+0x20>)
 80022cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800231c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e8:	480d      	ldr	r0, [pc, #52]	; (8002320 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ea:	490e      	ldr	r1, [pc, #56]	; (8002324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <LoopForever+0xe>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f0:	e002      	b.n	80022f8 <LoopCopyDataInit>

080022f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022f6:	3304      	adds	r3, #4

080022f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022fc:	d3f9      	bcc.n	80022f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002300:	4c0b      	ldr	r4, [pc, #44]	; (8002330 <LoopForever+0x16>)
  movs r3, #0
 8002302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002304:	e001      	b.n	800230a <LoopFillZerobss>

08002306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002308:	3204      	adds	r2, #4

0800230a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800230c:	d3fb      	bcc.n	8002306 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800230e:	f7ff ffd7 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002312:	f00a feb1 	bl	800d078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002316:	f7ff f8df 	bl	80014d8 <main>

0800231a <LoopForever>:

LoopForever:
    b LoopForever
 800231a:	e7fe      	b.n	800231a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800231c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002324:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002328:	0800e0c8 	.word	0x0800e0c8
  ldr r2, =_sbss
 800232c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002330:	200044c0 	.word	0x200044c0

08002334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002334:	e7fe      	b.n	8002334 <ADC1_2_IRQHandler>
	...

08002338 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_Init+0x28>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_Init+0x28>)
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002348:	2003      	movs	r0, #3
 800234a:	f000 fd52 	bl	8002df2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800234e:	200f      	movs	r0, #15
 8002350:	f7ff fee4 	bl	800211c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002354:	f7ff fdf2 	bl	8001f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000

08002364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_IncTick+0x20>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x24>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4413      	add	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_IncTick+0x24>)
 8002376:	6013      	str	r3, [r2, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000014 	.word	0x20000014
 8002388:	200022ec 	.word	0x200022ec

0800238c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_GetTick+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	200022ec 	.word	0x200022ec

080023a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0ed      	b.n	8002592 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d102      	bne.n	80023c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fde2 	bl	8001f8c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7ff ffd8 	bl	800238c <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023de:	e012      	b.n	8002406 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e0:	f7ff ffd4 	bl	800238c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d90b      	bls.n	8002406 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2205      	movs	r2, #5
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e0c5      	b.n	8002592 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0e5      	beq.n	80023e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0202 	bic.w	r2, r2, #2
 8002422:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002424:	f7ff ffb2 	bl	800238c <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800242a:	e012      	b.n	8002452 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800242c:	f7ff ffae 	bl	800238c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b0a      	cmp	r3, #10
 8002438:	d90b      	bls.n	8002452 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2205      	movs	r2, #5
 800244a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e09f      	b.n	8002592 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e5      	bne.n	800242c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7e1b      	ldrb	r3, [r3, #24]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e007      	b.n	800248a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7e5b      	ldrb	r3, [r3, #25]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e007      	b.n	80024b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	7e9b      	ldrb	r3, [r3, #26]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d108      	bne.n	80024ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0220 	orr.w	r2, r2, #32
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e007      	b.n	80024de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0220 	bic.w	r2, r2, #32
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7edb      	ldrb	r3, [r3, #27]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d108      	bne.n	80024f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0210 	bic.w	r2, r2, #16
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	e007      	b.n	8002508 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0210 	orr.w	r2, r2, #16
 8002506:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7f1b      	ldrb	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d108      	bne.n	8002522 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e007      	b.n	8002532 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0208 	bic.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7f5b      	ldrb	r3, [r3, #29]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d108      	bne.n	800254c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f042 0204 	orr.w	r2, r2, #4
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e007      	b.n	800255c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0204 	bic.w	r2, r2, #4
 800255a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	ea42 0103 	orr.w	r1, r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	1e5a      	subs	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800259a:	b480      	push	{r7}
 800259c:	b087      	sub	sp, #28
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d003      	beq.n	80025c0 <HAL_CAN_ConfigFilter+0x26>
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	f040 80aa 	bne.w	8002714 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2201      	movs	r2, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d123      	bne.n	8002642 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	401a      	ands	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800261c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3248      	adds	r2, #72	; 0x48
 8002622:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002636:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002638:	6979      	ldr	r1, [r7, #20]
 800263a:	3348      	adds	r3, #72	; 0x48
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d122      	bne.n	8002690 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	431a      	orrs	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800266a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3248      	adds	r2, #72	; 0x48
 8002670:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002684:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002686:	6979      	ldr	r1, [r7, #20]
 8002688:	3348      	adds	r3, #72	; 0x48
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026aa:	e007      	b.n	80026bc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	401a      	ands	r2, r3
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80026d6:	e007      	b.n	80026e8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d107      	bne.n	8002700 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002706:	f023 0201 	bic.w	r2, r3, #1
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e006      	b.n	8002722 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d12e      	bne.n	80027a0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2202      	movs	r2, #2
 8002746:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0201 	bic.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800275a:	f7ff fe17 	bl	800238c <HAL_GetTick>
 800275e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002760:	e012      	b.n	8002788 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002762:	f7ff fe13 	bl	800238c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b0a      	cmp	r3, #10
 800276e:	d90b      	bls.n	8002788 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2205      	movs	r2, #5
 8002780:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e012      	b.n	80027ae <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e5      	bne.n	8002762 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e006      	b.n	80027ae <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b089      	sub	sp, #36	; 0x24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d003      	beq.n	80027e2 <HAL_CAN_AddTxMessage+0x2c>
 80027da:	7ffb      	ldrb	r3, [r7, #31]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	f040 80b8 	bne.w	8002952 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80a0 	beq.w	8002942 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	0e1b      	lsrs	r3, r3, #24
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d907      	bls.n	8002822 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e09e      	b.n	8002960 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002822:	2201      	movs	r2, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10d      	bne.n	8002850 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	6809      	ldr	r1, [r1, #0]
 8002842:	431a      	orrs	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3318      	adds	r3, #24
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	440b      	add	r3, r1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e00f      	b.n	8002870 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800285a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002860:	68f9      	ldr	r1, [r7, #12]
 8002862:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002864:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3318      	adds	r3, #24
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	440b      	add	r3, r1
 800286e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3318      	adds	r3, #24
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	440b      	add	r3, r1
 8002880:	3304      	adds	r3, #4
 8002882:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	7d1b      	ldrb	r3, [r3, #20]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d111      	bne.n	80028b0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3318      	adds	r3, #24
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	4413      	add	r3, r2
 8002898:	3304      	adds	r3, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	6811      	ldr	r1, [r2, #0]
 80028a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3318      	adds	r3, #24
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	440b      	add	r3, r1
 80028ac:	3304      	adds	r3, #4
 80028ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3307      	adds	r3, #7
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	061a      	lsls	r2, r3, #24
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3306      	adds	r3, #6
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3305      	adds	r3, #5
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	4313      	orrs	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	3204      	adds	r2, #4
 80028d0:	7812      	ldrb	r2, [r2, #0]
 80028d2:	4610      	mov	r0, r2
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	6811      	ldr	r1, [r2, #0]
 80028d8:	ea43 0200 	orr.w	r2, r3, r0
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	440b      	add	r3, r1
 80028e2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80028e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3303      	adds	r3, #3
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	061a      	lsls	r2, r3, #24
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3302      	adds	r3, #2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3301      	adds	r3, #1
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	4313      	orrs	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	4610      	mov	r0, r2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	6811      	ldr	r1, [r2, #0]
 800290e:	ea43 0200 	orr.w	r2, r3, r0
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	440b      	add	r3, r1
 8002918:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800291c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	3318      	adds	r3, #24
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	4413      	add	r3, r2
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	6811      	ldr	r1, [r2, #0]
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3318      	adds	r3, #24
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	440b      	add	r3, r1
 800293c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e00e      	b.n	8002960 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e006      	b.n	8002960 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3724      	adds	r7, #36	; 0x24
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800297e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002980:	7afb      	ldrb	r3, [r7, #11]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d002      	beq.n	800298c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d11d      	bne.n	80029c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3301      	adds	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3301      	adds	r3, #1
 80029b2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3301      	adds	r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80029c8:	68fb      	ldr	r3, [r7, #12]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d003      	beq.n	80029fa <HAL_CAN_GetRxMessage+0x24>
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	f040 80f3 	bne.w	8002be0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10e      	bne.n	8002a1e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0e7      	b.n	8002bee <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0d8      	b.n	8002bee <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	331b      	adds	r3, #27
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	4413      	add	r3, r2
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0204 	and.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	331b      	adds	r3, #27
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	4413      	add	r3, r2
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0d5b      	lsrs	r3, r3, #21
 8002a6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e00b      	b.n	8002a8c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	331b      	adds	r3, #27
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	4413      	add	r3, r2
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	08db      	lsrs	r3, r3, #3
 8002a84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	331b      	adds	r3, #27
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	4413      	add	r3, r2
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0202 	and.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	331b      	adds	r3, #27
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 020f 	and.w	r2, r3, #15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	331b      	adds	r3, #27
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	331b      	adds	r3, #27
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0a1a      	lsrs	r2, r3, #8
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0c1a      	lsrs	r2, r3, #16
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3302      	adds	r3, #2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e1a      	lsrs	r2, r3, #24
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	3303      	adds	r3, #3
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	3304      	adds	r3, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0a1a      	lsrs	r2, r3, #8
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	3305      	adds	r3, #5
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	0c1a      	lsrs	r2, r3, #16
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	3306      	adds	r3, #6
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0e1a      	lsrs	r2, r3, #24
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3307      	adds	r3, #7
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0220 	orr.w	r2, r2, #32
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	e007      	b.n	8002bdc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691a      	ldr	r2, [r3, #16]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0220 	orr.w	r2, r2, #32
 8002bda:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e006      	b.n	8002bee <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c10:	7afb      	ldrb	r3, [r7, #11]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d002      	beq.n	8002c1c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002c16:	7afb      	ldrb	r3, [r7, #11]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d10f      	bne.n	8002c3c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e005      	b.n	8002c3c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d002      	beq.n	8002c68 <HAL_CAN_ActivateNotification+0x1e>
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d109      	bne.n	8002c7c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6959      	ldr	r1, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e006      	b.n	8002c8a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cca:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60d3      	str	r3, [r2, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4907      	ldr	r1, [pc, #28]	; (8002d34 <__NVIC_EnableIRQ+0x38>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	db0a      	blt.n	8002d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	490c      	ldr	r1, [pc, #48]	; (8002d84 <__NVIC_SetPriority+0x4c>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	0112      	lsls	r2, r2, #4
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d60:	e00a      	b.n	8002d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	4908      	ldr	r1, [pc, #32]	; (8002d88 <__NVIC_SetPriority+0x50>)
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	3b04      	subs	r3, #4
 8002d70:	0112      	lsls	r2, r2, #4
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	440b      	add	r3, r1
 8002d76:	761a      	strb	r2, [r3, #24]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	; 0x24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f1c3 0307 	rsb	r3, r3, #7
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	bf28      	it	cs
 8002daa:	2304      	movcs	r3, #4
 8002dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3304      	adds	r3, #4
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d902      	bls.n	8002dbc <NVIC_EncodePriority+0x30>
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3b03      	subs	r3, #3
 8002dba:	e000      	b.n	8002dbe <NVIC_EncodePriority+0x32>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43da      	mvns	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	401a      	ands	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa01 f303 	lsl.w	r3, r1, r3
 8002dde:	43d9      	mvns	r1, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	4313      	orrs	r3, r2
         );
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3724      	adds	r7, #36	; 0x24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff4c 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e1a:	f7ff ff61 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	6978      	ldr	r0, [r7, #20]
 8002e26:	f7ff ffb1 	bl	8002d8c <NVIC_EncodePriority>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff80 	bl	8002d38 <__NVIC_SetPriority>
}
 8002e38:	bf00      	nop
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff54 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6a:	e160      	b.n	800312e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8152 	beq.w	8003128 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d005      	beq.n	8002e9c <HAL_GPIO_Init+0x40>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d130      	bne.n	8002efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 0201 	and.w	r2, r3, #1
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d017      	beq.n	8002f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d123      	bne.n	8002f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	08da      	lsrs	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3208      	adds	r2, #8
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	2203      	movs	r2, #3
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0203 	and.w	r2, r3, #3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80ac 	beq.w	8003128 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd0:	4b5e      	ldr	r3, [pc, #376]	; (800314c <HAL_GPIO_Init+0x2f0>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	4a5d      	ldr	r2, [pc, #372]	; (800314c <HAL_GPIO_Init+0x2f0>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6193      	str	r3, [r2, #24]
 8002fdc:	4b5b      	ldr	r3, [pc, #364]	; (800314c <HAL_GPIO_Init+0x2f0>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fe8:	4a59      	ldr	r2, [pc, #356]	; (8003150 <HAL_GPIO_Init+0x2f4>)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003012:	d025      	beq.n	8003060 <HAL_GPIO_Init+0x204>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a4f      	ldr	r2, [pc, #316]	; (8003154 <HAL_GPIO_Init+0x2f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01f      	beq.n	800305c <HAL_GPIO_Init+0x200>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4e      	ldr	r2, [pc, #312]	; (8003158 <HAL_GPIO_Init+0x2fc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d019      	beq.n	8003058 <HAL_GPIO_Init+0x1fc>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4d      	ldr	r2, [pc, #308]	; (800315c <HAL_GPIO_Init+0x300>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_GPIO_Init+0x1f8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a4c      	ldr	r2, [pc, #304]	; (8003160 <HAL_GPIO_Init+0x304>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00d      	beq.n	8003050 <HAL_GPIO_Init+0x1f4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a4b      	ldr	r2, [pc, #300]	; (8003164 <HAL_GPIO_Init+0x308>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <HAL_GPIO_Init+0x1f0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a4a      	ldr	r2, [pc, #296]	; (8003168 <HAL_GPIO_Init+0x30c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_GPIO_Init+0x1ec>
 8003044:	2306      	movs	r3, #6
 8003046:	e00c      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003048:	2307      	movs	r3, #7
 800304a:	e00a      	b.n	8003062 <HAL_GPIO_Init+0x206>
 800304c:	2305      	movs	r3, #5
 800304e:	e008      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003050:	2304      	movs	r3, #4
 8003052:	e006      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003054:	2303      	movs	r3, #3
 8003056:	e004      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003058:	2302      	movs	r3, #2
 800305a:	e002      	b.n	8003062 <HAL_GPIO_Init+0x206>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_GPIO_Init+0x206>
 8003060:	2300      	movs	r3, #0
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	f002 0203 	and.w	r2, r2, #3
 8003068:	0092      	lsls	r2, r2, #2
 800306a:	4093      	lsls	r3, r2
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003072:	4937      	ldr	r1, [pc, #220]	; (8003150 <HAL_GPIO_Init+0x2f4>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003080:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_GPIO_Init+0x310>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030a4:	4a31      	ldr	r2, [pc, #196]	; (800316c <HAL_GPIO_Init+0x310>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030aa:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_GPIO_Init+0x310>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030ce:	4a27      	ldr	r2, [pc, #156]	; (800316c <HAL_GPIO_Init+0x310>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_GPIO_Init+0x310>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_GPIO_Init+0x310>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_GPIO_Init+0x310>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <HAL_GPIO_Init+0x310>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3301      	adds	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f ae97 	bne.w	8002e6c <HAL_GPIO_Init+0x10>
  }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40021000 	.word	0x40021000
 8003150:	40010000 	.word	0x40010000
 8003154:	48000400 	.word	0x48000400
 8003158:	48000800 	.word	0x48000800
 800315c:	48000c00 	.word	0x48000c00
 8003160:	48001000 	.word	0x48001000
 8003164:	48001400 	.word	0x48001400
 8003168:	48001800 	.word	0x48001800
 800316c:	40010400 	.word	0x40010400

08003170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
 800317c:	4613      	mov	r3, r2
 800317e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003180:	787b      	ldrb	r3, [r7, #1]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800318c:	e002      	b.n	8003194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800318e:	887a      	ldrh	r2, [r7, #2]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f001 b83a 	b.w	800423a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 816f 	beq.w	80034ba <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031dc:	4bb5      	ldr	r3, [pc, #724]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d00c      	beq.n	8003202 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031e8:	4bb2      	ldr	r3, [pc, #712]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d15c      	bne.n	80032ae <HAL_RCC_OscConfig+0x10e>
 80031f4:	4baf      	ldr	r3, [pc, #700]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d155      	bne.n	80032ae <HAL_RCC_OscConfig+0x10e>
 8003202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003206:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003216:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_RCC_OscConfig+0x94>
 800322e:	4ba1      	ldr	r3, [pc, #644]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	e015      	b.n	8003260 <HAL_RCC_OscConfig+0xc0>
 8003234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003238:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800324c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003250:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800325c:	4b95      	ldr	r3, [pc, #596]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003264:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003268:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800326c:	fa92 f2a2 	rbit	r2, r2
 8003270:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003274:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003278:	fab2 f282 	clz	r2, r2
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	f042 0220 	orr.w	r2, r2, #32
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	f002 021f 	and.w	r2, r2, #31
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f202 	lsl.w	r2, r1, r2
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8111 	beq.w	80034b8 <HAL_RCC_OscConfig+0x318>
 8003296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 8108 	bne.w	80034b8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f000 bfc6 	b.w	800423a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x12e>
 80032c0:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a7b      	ldr	r2, [pc, #492]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e036      	b.n	800333c <HAL_RCC_OscConfig+0x19c>
 80032ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x158>
 80032de:	4b75      	ldr	r3, [pc, #468]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a74      	ldr	r2, [pc, #464]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80032e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	4b72      	ldr	r3, [pc, #456]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a71      	ldr	r2, [pc, #452]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80032f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e021      	b.n	800333c <HAL_RCC_OscConfig+0x19c>
 80032f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x184>
 800330a:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a69      	ldr	r2, [pc, #420]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 8003310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a66      	ldr	r2, [pc, #408]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0x19c>
 8003324:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a62      	ldr	r2, [pc, #392]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a5f      	ldr	r2, [pc, #380]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800333c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003340:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d059      	beq.n	8003400 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7ff f81e 	bl	800238c <HAL_GetTick>
 8003350:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003356:	f7ff f819 	bl	800238c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d902      	bls.n	800336c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	f000 bf67 	b.w	800423a <HAL_RCC_OscConfig+0x109a>
 800336c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003370:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003380:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d102      	bne.n	800339e <HAL_RCC_OscConfig+0x1fe>
 8003398:	4b46      	ldr	r3, [pc, #280]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	e015      	b.n	80033ca <HAL_RCC_OscConfig+0x22a>
 800339e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80033b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033ba:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033c6:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ce:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80033d2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80033d6:	fa92 f2a2 	rbit	r2, r2
 80033da:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80033de:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80033e2:	fab2 f282 	clz	r2, r2
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f042 0220 	orr.w	r2, r2, #32
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f002 021f 	and.w	r2, r2, #31
 80033f2:	2101      	movs	r1, #1
 80033f4:	fa01 f202 	lsl.w	r2, r1, r2
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0ab      	beq.n	8003356 <HAL_RCC_OscConfig+0x1b6>
 80033fe:	e05c      	b.n	80034ba <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fe ffc4 	bl	800238c <HAL_GetTick>
 8003404:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800340a:	f7fe ffbf 	bl	800238c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b64      	cmp	r3, #100	; 0x64
 8003418:	d902      	bls.n	8003420 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	f000 bf0d 	b.w	800423a <HAL_RCC_OscConfig+0x109a>
 8003420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003424:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003434:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d102      	bne.n	8003452 <HAL_RCC_OscConfig+0x2b2>
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x2de>
 8003452:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003456:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003466:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800346a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800346e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_RCC_OscConfig+0x314>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003482:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003486:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800348a:	fa92 f2a2 	rbit	r2, r2
 800348e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003492:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003496:	fab2 f282 	clz	r2, r2
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f042 0220 	orr.w	r2, r2, #32
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	f002 021f 	and.w	r2, r2, #31
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ab      	bne.n	800340a <HAL_RCC_OscConfig+0x26a>
 80034b2:	e002      	b.n	80034ba <HAL_RCC_OscConfig+0x31a>
 80034b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 817f 	beq.w	80037ce <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80034d0:	4ba7      	ldr	r3, [pc, #668]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034dc:	4ba4      	ldr	r3, [pc, #656]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d173      	bne.n	80035d0 <HAL_RCC_OscConfig+0x430>
 80034e8:	4ba1      	ldr	r3, [pc, #644]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80034f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f4:	d16c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x430>
 80034f6:	2302      	movs	r3, #2
 80034f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003508:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d102      	bne.n	8003526 <HAL_RCC_OscConfig+0x386>
 8003520:	4b93      	ldr	r3, [pc, #588]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	e013      	b.n	800354e <HAL_RCC_OscConfig+0x3ae>
 8003526:	2302      	movs	r3, #2
 8003528:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003538:	2302      	movs	r3, #2
 800353a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800353e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003542:	fa93 f3a3 	rbit	r3, r3
 8003546:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800354a:	4b89      	ldr	r3, [pc, #548]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2202      	movs	r2, #2
 8003550:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003554:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003558:	fa92 f2a2 	rbit	r2, r2
 800355c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003560:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003564:	fab2 f282 	clz	r2, r2
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	f042 0220 	orr.w	r2, r2, #32
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	f002 021f 	and.w	r2, r2, #31
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f202 	lsl.w	r2, r1, r2
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_RCC_OscConfig+0x3f6>
 8003580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003584:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d002      	beq.n	8003596 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f000 be52 	b.w	800423a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	21f8      	movs	r1, #248	; 0xf8
 80035ac:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80035b4:	fa91 f1a1 	rbit	r1, r1
 80035b8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80035bc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035c0:	fab1 f181 	clz	r1, r1
 80035c4:	b2c9      	uxtb	r1, r1
 80035c6:	408b      	lsls	r3, r1
 80035c8:	4969      	ldr	r1, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	e0fe      	b.n	80037ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8088 	beq.w	80036f2 <HAL_RCC_OscConfig+0x552>
 80035e2:	2301      	movs	r3, #1
 80035e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80035f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003602:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	461a      	mov	r2, r3
 800360a:	2301      	movs	r3, #1
 800360c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fe febd 	bl	800238c <HAL_GetTick>
 8003612:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	e00a      	b.n	800362e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003618:	f7fe feb8 	bl	800238c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d902      	bls.n	800362e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	f000 be06 	b.w	800423a <HAL_RCC_OscConfig+0x109a>
 800362e:	2302      	movs	r3, #2
 8003630:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003640:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HAL_RCC_OscConfig+0x4be>
 8003658:	4b45      	ldr	r3, [pc, #276]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	e013      	b.n	8003686 <HAL_RCC_OscConfig+0x4e6>
 800365e:	2302      	movs	r3, #2
 8003660:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003670:	2302      	movs	r3, #2
 8003672:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003676:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2202      	movs	r2, #2
 8003688:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800368c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003690:	fa92 f2a2 	rbit	r2, r2
 8003694:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003698:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f002 021f 	and.w	r2, r2, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0af      	beq.n	8003618 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	21f8      	movs	r1, #248	; 0xf8
 80036ce:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80036d6:	fa91 f1a1 	rbit	r1, r1
 80036da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80036de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80036e2:	fab1 f181 	clz	r1, r1
 80036e6:	b2c9      	uxtb	r1, r1
 80036e8:	408b      	lsls	r3, r1
 80036ea:	4921      	ldr	r1, [pc, #132]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
 80036f0:	e06d      	b.n	80037ce <HAL_RCC_OscConfig+0x62e>
 80036f2:	2301      	movs	r3, #1
 80036f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003704:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	461a      	mov	r2, r3
 800371a:	2300      	movs	r3, #0
 800371c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371e:	f7fe fe35 	bl	800238c <HAL_GetTick>
 8003722:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003728:	f7fe fe30 	bl	800238c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d902      	bls.n	800373e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	f000 bd7e 	b.w	800423a <HAL_RCC_OscConfig+0x109a>
 800373e:	2302      	movs	r3, #2
 8003740:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003750:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0x5d4>
 8003768:	4b01      	ldr	r3, [pc, #4]	; (8003770 <HAL_RCC_OscConfig+0x5d0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	e016      	b.n	800379c <HAL_RCC_OscConfig+0x5fc>
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	2302      	movs	r3, #2
 8003776:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003786:	2302      	movs	r3, #2
 8003788:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800378c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003798:	4bbf      	ldr	r3, [pc, #764]	; (8003a98 <HAL_RCC_OscConfig+0x8f8>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	2202      	movs	r2, #2
 800379e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80037a6:	fa92 f2a2 	rbit	r2, r2
 80037aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80037ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037b2:	fab2 f282 	clz	r2, r2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f042 0220 	orr.w	r2, r2, #32
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f002 021f 	and.w	r2, r2, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ac      	bne.n	8003728 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8113 	beq.w	8003a0a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d07c      	beq.n	80038ee <HAL_RCC_OscConfig+0x74e>
 80037f4:	2301      	movs	r3, #1
 80037f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003806:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	4ba2      	ldr	r3, [pc, #648]	; (8003a9c <HAL_RCC_OscConfig+0x8fc>)
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	461a      	mov	r2, r3
 800381a:	2301      	movs	r3, #1
 800381c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7fe fdb5 	bl	800238c <HAL_GetTick>
 8003822:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003828:	f7fe fdb0 	bl	800238c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d902      	bls.n	800383e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	f000 bcfe 	b.w	800423a <HAL_RCC_OscConfig+0x109a>
 800383e:	2302      	movs	r3, #2
 8003840:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003848:	fa93 f2a3 	rbit	r2, r3
 800384c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003850:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800385e:	2202      	movs	r2, #2
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003866:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	fa93 f2a3 	rbit	r2, r3
 8003870:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800387e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003882:	2202      	movs	r2, #2
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800388a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	fa93 f2a3 	rbit	r2, r3
 8003894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003898:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800389c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389e:	4b7e      	ldr	r3, [pc, #504]	; (8003a98 <HAL_RCC_OscConfig+0x8f8>)
 80038a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038aa:	2102      	movs	r1, #2
 80038ac:	6019      	str	r1, [r3, #0]
 80038ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	fa93 f1a3 	rbit	r1, r3
 80038bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038c4:	6019      	str	r1, [r3, #0]
  return result;
 80038c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fab3 f383 	clz	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d09d      	beq.n	8003828 <HAL_RCC_OscConfig+0x688>
 80038ec:	e08d      	b.n	8003a0a <HAL_RCC_OscConfig+0x86a>
 80038ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003910:	601a      	str	r2, [r3, #0]
  return result;
 8003912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003916:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800391a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	4b5d      	ldr	r3, [pc, #372]	; (8003a9c <HAL_RCC_OscConfig+0x8fc>)
 8003926:	4413      	add	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	461a      	mov	r2, r3
 800392c:	2300      	movs	r3, #0
 800392e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7fe fd2c 	bl	800238c <HAL_GetTick>
 8003934:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393a:	f7fe fd27 	bl	800238c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d902      	bls.n	8003950 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	f000 bc75 	b.w	800423a <HAL_RCC_OscConfig+0x109a>
 8003950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003954:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003958:	2202      	movs	r2, #2
 800395a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003960:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	fa93 f2a3 	rbit	r2, r3
 800396a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800396e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800397c:	2202      	movs	r2, #2
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fa93 f2a3 	rbit	r2, r3
 800398e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800399c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039a0:	2202      	movs	r2, #2
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	fa93 f2a3 	rbit	r2, r3
 80039b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCC_OscConfig+0x8f8>)
 80039be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039c8:	2102      	movs	r1, #2
 80039ca:	6019      	str	r1, [r3, #0]
 80039cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f1a3 	rbit	r1, r3
 80039da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039de:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039e2:	6019      	str	r1, [r3, #0]
  return result;
 80039e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d197      	bne.n	800393a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 81a5 	beq.w	8003d6a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a26:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <HAL_RCC_OscConfig+0x8f8>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <HAL_RCC_OscConfig+0x8f8>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_RCC_OscConfig+0x8f8>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	61d3      	str	r3, [r2, #28]
 8003a3e:	4b16      	ldr	r3, [pc, #88]	; (8003a98 <HAL_RCC_OscConfig+0x8f8>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_RCC_OscConfig+0x900>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d121      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_RCC_OscConfig+0x900>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0b      	ldr	r2, [pc, #44]	; (8003aa0 <HAL_RCC_OscConfig+0x900>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a78:	f7fe fc88 	bl	800238c <HAL_GetTick>
 8003a7c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	e010      	b.n	8003aa4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a82:	f7fe fc83 	bl	800238c <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d908      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e3d1      	b.n	800423a <HAL_RCC_OscConfig+0x109a>
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	10908120 	.word	0x10908120
 8003aa0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	4b8d      	ldr	r3, [pc, #564]	; (8003cdc <HAL_RCC_OscConfig+0xb3c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0e8      	beq.n	8003a82 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x92e>
 8003ac0:	4b87      	ldr	r3, [pc, #540]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a86      	ldr	r2, [pc, #536]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6213      	str	r3, [r2, #32]
 8003acc:	e035      	b.n	8003b3a <HAL_RCC_OscConfig+0x99a>
 8003ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x958>
 8003ade:	4b80      	ldr	r3, [pc, #512]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a7f      	ldr	r2, [pc, #508]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6213      	str	r3, [r2, #32]
 8003aea:	4b7d      	ldr	r3, [pc, #500]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a7c      	ldr	r2, [pc, #496]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6213      	str	r3, [r2, #32]
 8003af6:	e020      	b.n	8003b3a <HAL_RCC_OscConfig+0x99a>
 8003af8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d10c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x982>
 8003b08:	4b75      	ldr	r3, [pc, #468]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	4a74      	ldr	r2, [pc, #464]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6213      	str	r3, [r2, #32]
 8003b14:	4b72      	ldr	r3, [pc, #456]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a71      	ldr	r2, [pc, #452]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x99a>
 8003b22:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	4a6e      	ldr	r2, [pc, #440]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	6213      	str	r3, [r2, #32]
 8003b2e:	4b6c      	ldr	r3, [pc, #432]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a6b      	ldr	r2, [pc, #428]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003b34:	f023 0304 	bic.w	r3, r3, #4
 8003b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8081 	beq.w	8003c4e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4c:	f7fe fc1e 	bl	800238c <HAL_GetTick>
 8003b50:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b54:	e00b      	b.n	8003b6e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fe fc19 	bl	800238c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e365      	b.n	800423a <HAL_RCC_OscConfig+0x109a>
 8003b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b76:	2202      	movs	r2, #2
 8003b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	fa93 f2a3 	rbit	r2, r3
 8003b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	fa93 f2a3 	rbit	r2, r3
 8003bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bb4:	601a      	str	r2, [r3, #0]
  return result;
 8003bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bba:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003bbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	fab3 f383 	clz	r3, r3
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d102      	bne.n	8003bda <HAL_RCC_OscConfig+0xa3a>
 8003bd4:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	e013      	b.n	8003c02 <HAL_RCC_OscConfig+0xa62>
 8003bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003be2:	2202      	movs	r2, #2
 8003be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	fa93 f2a3 	rbit	r2, r3
 8003bf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	4b38      	ldr	r3, [pc, #224]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	6011      	str	r1, [r2, #0]
 8003c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	fa92 f1a2 	rbit	r1, r2
 8003c1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c20:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c24:	6011      	str	r1, [r2, #0]
  return result;
 8003c26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c2a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f002 021f 	and.w	r2, r2, #31
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d084      	beq.n	8003b56 <HAL_RCC_OscConfig+0x9b6>
 8003c4c:	e083      	b.n	8003d56 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fb9d 	bl	800238c <HAL_GetTick>
 8003c52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c58:	f7fe fb98 	bl	800238c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e2e4      	b.n	800423a <HAL_RCC_OscConfig+0x109a>
 8003c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c78:	2202      	movs	r2, #2
 8003c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	fa93 f2a3 	rbit	r2, r3
 8003c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ca4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f2a3 	rbit	r2, r3
 8003cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cb6:	601a      	str	r2, [r3, #0]
  return result;
 8003cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cbc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003cc0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d106      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xb44>
 8003cd6:	4b02      	ldr	r3, [pc, #8]	; (8003ce0 <HAL_RCC_OscConfig+0xb40>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	e017      	b.n	8003d0c <HAL_RCC_OscConfig+0xb6c>
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cec:	2202      	movs	r2, #2
 8003cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	fa93 f2a3 	rbit	r2, r3
 8003cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d02:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	4bb3      	ldr	r3, [pc, #716]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d14:	2102      	movs	r1, #2
 8003d16:	6011      	str	r1, [r2, #0]
 8003d18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	fa92 f1a2 	rbit	r1, r2
 8003d26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d2a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d2e:	6011      	str	r1, [r2, #0]
  return result;
 8003d30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d34:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003d38:	6812      	ldr	r2, [r2, #0]
 8003d3a:	fab2 f282 	clz	r2, r2
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f002 021f 	and.w	r2, r2, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d180      	bne.n	8003c58 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d56:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5e:	4b9e      	ldr	r3, [pc, #632]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4a9d      	ldr	r2, [pc, #628]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d68:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 825e 	beq.w	8004238 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d7c:	4b96      	ldr	r3, [pc, #600]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f000 821f 	beq.w	80041c8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	f040 8170 	bne.w	800407c <HAL_RCC_OscConfig+0xedc>
 8003d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003da4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dae:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	fa93 f2a3 	rbit	r2, r3
 8003db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dbc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003dc0:	601a      	str	r2, [r3, #0]
  return result;
 8003dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003dca:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2300      	movs	r3, #0
 8003de0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fe fad3 	bl	800238c <HAL_GetTick>
 8003de6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dea:	e009      	b.n	8003e00 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe face 	bl	800238c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e21c      	b.n	800423a <HAL_RCC_OscConfig+0x109a>
 8003e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e12:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	fa93 f2a3 	rbit	r2, r3
 8003e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e20:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e24:	601a      	str	r2, [r3, #0]
  return result;
 8003e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d102      	bne.n	8003e4a <HAL_RCC_OscConfig+0xcaa>
 8003e44:	4b64      	ldr	r3, [pc, #400]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	e027      	b.n	8003e9a <HAL_RCC_OscConfig+0xcfa>
 8003e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	fa93 f2a3 	rbit	r2, r3
 8003e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	fa93 f2a3 	rbit	r2, r3
 8003e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e90:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ea2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ea6:	6011      	str	r1, [r2, #0]
 8003ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eac:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	fa92 f1a2 	rbit	r1, r2
 8003eb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003eba:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003ebe:	6011      	str	r1, [r2, #0]
  return result;
 8003ec0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ec4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	fab2 f282 	clz	r2, r2
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f042 0220 	orr.w	r2, r2, #32
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	f002 021f 	and.w	r2, r2, #31
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d182      	bne.n	8003dec <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee6:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	f023 020f 	bic.w	r2, r3, #15
 8003eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	4937      	ldr	r1, [pc, #220]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003f00:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a19      	ldr	r1, [r3, #32]
 8003f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	492d      	ldr	r1, [pc, #180]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
 8003f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f3a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f2a3 	rbit	r2, r3
 8003f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f48:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f4c:	601a      	str	r2, [r3, #0]
  return result;
 8003f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f52:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003f56:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fe fa0d 	bl	800238c <HAL_GetTick>
 8003f72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f76:	e009      	b.n	8003f8c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fe fa08 	bl	800238c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e156      	b.n	800423a <HAL_RCC_OscConfig+0x109a>
 8003f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f90:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f9e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	fa93 f2a3 	rbit	r2, r3
 8003fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fb0:	601a      	str	r2, [r3, #0]
  return result;
 8003fb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003fba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d105      	bne.n	8003fdc <HAL_RCC_OscConfig+0xe3c>
 8003fd0:	4b01      	ldr	r3, [pc, #4]	; (8003fd8 <HAL_RCC_OscConfig+0xe38>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	e02a      	b.n	800402c <HAL_RCC_OscConfig+0xe8c>
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fee:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	fa93 f2a3 	rbit	r2, r3
 8003ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004006:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800400a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004014:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	fa93 f2a3 	rbit	r2, r3
 800401e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004022:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	4b86      	ldr	r3, [pc, #536]	; (8004244 <HAL_RCC_OscConfig+0x10a4>)
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004030:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004034:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004038:	6011      	str	r1, [r2, #0]
 800403a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800403e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	fa92 f1a2 	rbit	r1, r2
 8004048:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800404c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004050:	6011      	str	r1, [r2, #0]
  return result;
 8004052:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004056:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f042 0220 	orr.w	r2, r2, #32
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f002 021f 	and.w	r2, r2, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	f43f af7f 	beq.w	8003f78 <HAL_RCC_OscConfig+0xdd8>
 800407a:	e0dd      	b.n	8004238 <HAL_RCC_OscConfig+0x1098>
 800407c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004080:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800408e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	fa93 f2a3 	rbit	r2, r3
 8004098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800409c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040a0:	601a      	str	r2, [r3, #0]
  return result;
 80040a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ac:	fab3 f383 	clz	r3, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	461a      	mov	r2, r3
 80040be:	2300      	movs	r3, #0
 80040c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe f963 	bl	800238c <HAL_GetTick>
 80040c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ca:	e009      	b.n	80040e0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe f95e 	bl	800238c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0ac      	b.n	800423a <HAL_RCC_OscConfig+0x109a>
 80040e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040f2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	fa93 f2a3 	rbit	r2, r3
 80040fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004100:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004104:	601a      	str	r2, [r3, #0]
  return result;
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800410e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004110:	fab3 f383 	clz	r3, r3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d102      	bne.n	800412a <HAL_RCC_OscConfig+0xf8a>
 8004124:	4b47      	ldr	r3, [pc, #284]	; (8004244 <HAL_RCC_OscConfig+0x10a4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	e027      	b.n	800417a <HAL_RCC_OscConfig+0xfda>
 800412a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800412e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800413c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	fa93 f2a3 	rbit	r2, r3
 8004146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800414a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004154:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004158:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004162:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	fa93 f2a3 	rbit	r2, r3
 800416c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004170:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_RCC_OscConfig+0x10a4>)
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800417e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004182:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004186:	6011      	str	r1, [r2, #0]
 8004188:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800418c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	fa92 f1a2 	rbit	r1, r2
 8004196:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800419a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800419e:	6011      	str	r1, [r2, #0]
  return result;
 80041a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041a4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	fab2 f282 	clz	r2, r2
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	f042 0220 	orr.w	r2, r2, #32
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	f002 021f 	and.w	r2, r2, #31
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f202 	lsl.w	r2, r1, r2
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d182      	bne.n	80040cc <HAL_RCC_OscConfig+0xf2c>
 80041c6:	e037      	b.n	8004238 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e02e      	b.n	800423a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_RCC_OscConfig+0x10a4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80041e4:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_RCC_OscConfig+0x10a4>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041ec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80041f0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80041f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	429a      	cmp	r2, r3
 8004202:	d117      	bne.n	8004234 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004204:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004208:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800420c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004210:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004218:	429a      	cmp	r2, r3
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800421c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004228:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000

08004248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b09e      	sub	sp, #120	; 0x78
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e162      	b.n	8004526 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004260:	4b90      	ldr	r3, [pc, #576]	; (80044a4 <HAL_RCC_ClockConfig+0x25c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d910      	bls.n	8004290 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b8d      	ldr	r3, [pc, #564]	; (80044a4 <HAL_RCC_ClockConfig+0x25c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 0207 	bic.w	r2, r3, #7
 8004276:	498b      	ldr	r1, [pc, #556]	; (80044a4 <HAL_RCC_ClockConfig+0x25c>)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b89      	ldr	r3, [pc, #548]	; (80044a4 <HAL_RCC_ClockConfig+0x25c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e14a      	b.n	8004526 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429c:	4b82      	ldr	r3, [pc, #520]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	497f      	ldr	r1, [pc, #508]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80dc 	beq.w	8004474 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d13c      	bne.n	800433e <HAL_RCC_ClockConfig+0xf6>
 80042c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d102      	bne.n	80042ee <HAL_RCC_ClockConfig+0xa6>
 80042e8:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	e00f      	b.n	800430e <HAL_RCC_ClockConfig+0xc6>
 80042ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	667b      	str	r3, [r7, #100]	; 0x64
 80042fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004300:	663b      	str	r3, [r7, #96]	; 0x60
 8004302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800430a:	4b67      	ldr	r3, [pc, #412]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004312:	65ba      	str	r2, [r7, #88]	; 0x58
 8004314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004316:	fa92 f2a2 	rbit	r2, r2
 800431a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800431c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800431e:	fab2 f282 	clz	r2, r2
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	f042 0220 	orr.w	r2, r2, #32
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	f002 021f 	and.w	r2, r2, #31
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d17b      	bne.n	8004432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0f3      	b.n	8004526 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d13c      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x178>
 8004346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d102      	bne.n	8004370 <HAL_RCC_ClockConfig+0x128>
 800436a:	4b4f      	ldr	r3, [pc, #316]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	e00f      	b.n	8004390 <HAL_RCC_ClockConfig+0x148>
 8004370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004374:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	647b      	str	r3, [r7, #68]	; 0x44
 800437e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004382:	643b      	str	r3, [r7, #64]	; 0x40
 8004384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438c:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004394:	63ba      	str	r2, [r7, #56]	; 0x38
 8004396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004398:	fa92 f2a2 	rbit	r2, r2
 800439c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800439e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a0:	fab2 f282 	clz	r2, r2
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	f042 0220 	orr.w	r2, r2, #32
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	f002 021f 	and.w	r2, r2, #31
 80043b0:	2101      	movs	r1, #1
 80043b2:	fa01 f202 	lsl.w	r2, r1, r2
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d13a      	bne.n	8004432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0b2      	b.n	8004526 <HAL_RCC_ClockConfig+0x2de>
 80043c0:	2302      	movs	r3, #2
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ce:	fab3 f383 	clz	r3, r3
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d102      	bne.n	80043e8 <HAL_RCC_ClockConfig+0x1a0>
 80043e2:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	e00d      	b.n	8004404 <HAL_RCC_ClockConfig+0x1bc>
 80043e8:	2302      	movs	r3, #2
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	2302      	movs	r3, #2
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	4b29      	ldr	r3, [pc, #164]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	2202      	movs	r2, #2
 8004406:	61ba      	str	r2, [r7, #24]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	fa92 f2a2 	rbit	r2, r2
 800440e:	617a      	str	r2, [r7, #20]
  return result;
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	fab2 f282 	clz	r2, r2
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	f042 0220 	orr.w	r2, r2, #32
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	f002 021f 	and.w	r2, r2, #31
 8004422:	2101      	movs	r1, #1
 8004424:	fa01 f202 	lsl.w	r2, r1, r2
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e079      	b.n	8004526 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f023 0203 	bic.w	r2, r3, #3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	491a      	ldr	r1, [pc, #104]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004444:	f7fd ffa2 	bl	800238c <HAL_GetTick>
 8004448:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444a:	e00a      	b.n	8004462 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444c:	f7fd ff9e 	bl	800238c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e061      	b.n	8004526 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_RCC_ClockConfig+0x260>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 020c 	and.w	r2, r3, #12
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	429a      	cmp	r2, r3
 8004472:	d1eb      	bne.n	800444c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_RCC_ClockConfig+0x25c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d214      	bcs.n	80044ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_RCC_ClockConfig+0x25c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 0207 	bic.w	r2, r3, #7
 800448a:	4906      	ldr	r1, [pc, #24]	; (80044a4 <HAL_RCC_ClockConfig+0x25c>)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <HAL_RCC_ClockConfig+0x25c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e040      	b.n	8004526 <HAL_RCC_ClockConfig+0x2de>
 80044a4:	40022000 	.word	0x40022000
 80044a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b8:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_RCC_ClockConfig+0x2e8>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	491a      	ldr	r1, [pc, #104]	; (8004530 <HAL_RCC_ClockConfig+0x2e8>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d6:	4b16      	ldr	r3, [pc, #88]	; (8004530 <HAL_RCC_ClockConfig+0x2e8>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4912      	ldr	r1, [pc, #72]	; (8004530 <HAL_RCC_ClockConfig+0x2e8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044ea:	f000 f845 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 80044ee:	4601      	mov	r1, r0
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <HAL_RCC_ClockConfig+0x2e8>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f8:	22f0      	movs	r2, #240	; 0xf0
 80044fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	fa92 f2a2 	rbit	r2, r2
 8004502:	60fa      	str	r2, [r7, #12]
  return result;
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	fab2 f282 	clz	r2, r2
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	40d3      	lsrs	r3, r2
 800450e:	4a09      	ldr	r2, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x2ec>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	fa21 f303 	lsr.w	r3, r1, r3
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <HAL_RCC_ClockConfig+0x2f0>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_RCC_ClockConfig+0x2f4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fdfc 	bl	800211c <HAL_InitTick>
  
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3778      	adds	r7, #120	; 0x78
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000
 8004534:	0800df74 	.word	0x0800df74
 8004538:	2000000c 	.word	0x2000000c
 800453c:	20000010 	.word	0x20000010

08004540 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800454a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	603b      	str	r3, [r7, #0]
  return result;
 8004554:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004556:	fab3 f383 	clz	r3, r3
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	461a      	mov	r2, r3
 8004568:	2301      	movs	r3, #1
 800456a:	6013      	str	r3, [r2, #0]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	b08b      	sub	sp, #44	; 0x2c
 800457c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	2300      	movs	r3, #0
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004592:	4b2a      	ldr	r3, [pc, #168]	; (800463c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d002      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x30>
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x36>
 80045a6:	e03f      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045a8:	4b25      	ldr	r3, [pc, #148]	; (8004640 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045aa:	623b      	str	r3, [r7, #32]
      break;
 80045ac:	e03f      	b.n	800462e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	fa92 f2a2 	rbit	r2, r2
 80045c0:	607a      	str	r2, [r7, #4]
  return result;
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	fab2 f282 	clz	r2, r2
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	40d3      	lsrs	r3, r2
 80045cc:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045d2:	4b1a      	ldr	r3, [pc, #104]	; (800463c <HAL_RCC_GetSysClockFreq+0xc4>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	220f      	movs	r2, #15
 80045dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	fa92 f2a2 	rbit	r2, r2
 80045e4:	60fa      	str	r2, [r7, #12]
  return result;
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	40d3      	lsrs	r3, r2
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045f2:	5cd3      	ldrb	r3, [r2, r3]
 80045f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004600:	4a0f      	ldr	r2, [pc, #60]	; (8004640 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	fbb2 f2f3 	udiv	r2, r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
 8004610:	e007      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004612:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	fbb2 f2f3 	udiv	r2, r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	623b      	str	r3, [r7, #32]
      break;
 8004626:	e002      	b.n	800462e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetSysClockFreq+0xc8>)
 800462a:	623b      	str	r3, [r7, #32]
      break;
 800462c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462e:	6a3b      	ldr	r3, [r7, #32]
}
 8004630:	4618      	mov	r0, r3
 8004632:	372c      	adds	r7, #44	; 0x2c
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40021000 	.word	0x40021000
 8004640:	007a1200 	.word	0x007a1200
 8004644:	0800df8c 	.word	0x0800df8c
 8004648:	0800df9c 	.word	0x0800df9c

0800464c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004650:	4b03      	ldr	r3, [pc, #12]	; (8004660 <HAL_RCC_GetHCLKFreq+0x14>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	2000000c 	.word	0x2000000c

08004664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800466a:	f7ff ffef 	bl	800464c <HAL_RCC_GetHCLKFreq>
 800466e:	4601      	mov	r1, r0
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004678:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800467c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	fa92 f2a2 	rbit	r2, r2
 8004684:	603a      	str	r2, [r7, #0]
  return result;
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	fab2 f282 	clz	r2, r2
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	40d3      	lsrs	r3, r2
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004692:	5cd3      	ldrb	r3, [r2, r3]
 8004694:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000
 80046a4:	0800df84 	.word	0x0800df84

080046a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046ae:	f7ff ffcd 	bl	800464c <HAL_RCC_GetHCLKFreq>
 80046b2:	4601      	mov	r1, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80046bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80046c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	fa92 f2a2 	rbit	r2, r2
 80046c8:	603a      	str	r2, [r7, #0]
  return result;
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	fab2 f282 	clz	r2, r2
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	40d3      	lsrs	r3, r2
 80046d4:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	0800df84 	.word	0x0800df84

080046ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	220f      	movs	r2, #15
 80046fa:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_RCC_GetClockConfig+0x5c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0203 	and.w	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <HAL_RCC_GetClockConfig+0x5c>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <HAL_RCC_GetClockConfig+0x5c>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_RCC_GetClockConfig+0x5c>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <HAL_RCC_GetClockConfig+0x60>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0207 	and.w	r2, r3, #7
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	601a      	str	r2, [r3, #0]
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	40022000 	.word	0x40022000

08004750 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475c:	2b80      	cmp	r3, #128	; 0x80
 800475e:	d104      	bne.n	800476a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004760:	f000 f80a 	bl	8004778 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004766:	2280      	movs	r2, #128	; 0x80
 8004768:	701a      	strb	r2, [r3, #0]
  }
}
 800476a:	bf00      	nop
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	4002100a 	.word	0x4002100a

08004778 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b092      	sub	sp, #72	; 0x48
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004798:	2300      	movs	r3, #0
 800479a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80d4 	beq.w	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ac:	4b4e      	ldr	r3, [pc, #312]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10e      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b8:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	4a4a      	ldr	r2, [pc, #296]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c2:	61d3      	str	r3, [r2, #28]
 80047c4:	4b48      	ldr	r3, [pc, #288]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d6:	4b45      	ldr	r3, [pc, #276]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d118      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047e2:	4b42      	ldr	r3, [pc, #264]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a41      	ldr	r2, [pc, #260]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ee:	f7fd fdcd 	bl	800238c <HAL_GetTick>
 80047f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f4:	e008      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f6:	f7fd fdc9 	bl	800238c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b64      	cmp	r3, #100	; 0x64
 8004802:	d901      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1d6      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	4b38      	ldr	r3, [pc, #224]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004814:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8084 	beq.w	800492e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004830:	429a      	cmp	r2, r3
 8004832:	d07c      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004834:	4b2c      	ldr	r3, [pc, #176]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004842:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	fa93 f3a3 	rbit	r3, r3
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484e:	fab3 f383 	clz	r3, r3
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	461a      	mov	r2, r3
 800485e:	2301      	movs	r3, #1
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	461a      	mov	r2, r3
 8004882:	2300      	movs	r3, #0
 8004884:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004886:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800488c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d04b      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f7fd fd79 	bl	800238c <HAL_GetTick>
 800489a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489c:	e00a      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7fd fd75 	bl	800238c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e180      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80048b4:	2302      	movs	r3, #2
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	2302      	movs	r3, #2
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	61fb      	str	r3, [r7, #28]
  return result;
 80048cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d108      	bne.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80048e2:	4b01      	ldr	r3, [pc, #4]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	e00d      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40007000 	.word	0x40007000
 80048f0:	10908100 	.word	0x10908100
 80048f4:	2302      	movs	r3, #2
 80048f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	4b9a      	ldr	r3, [pc, #616]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	2202      	movs	r2, #2
 8004906:	613a      	str	r2, [r7, #16]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	fa92 f2a2 	rbit	r2, r2
 800490e:	60fa      	str	r2, [r7, #12]
  return result;
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	fab2 f282 	clz	r2, r2
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	f002 021f 	and.w	r2, r2, #31
 8004922:	2101      	movs	r1, #1
 8004924:	fa01 f202 	lsl.w	r2, r1, r2
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0b7      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800492e:	4b8f      	ldr	r3, [pc, #572]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	498c      	ldr	r1, [pc, #560]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004940:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004944:	2b01      	cmp	r3, #1
 8004946:	d105      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004948:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	4a87      	ldr	r2, [pc, #540]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004960:	4b82      	ldr	r3, [pc, #520]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	f023 0203 	bic.w	r2, r3, #3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	497f      	ldr	r1, [pc, #508]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800497e:	4b7b      	ldr	r3, [pc, #492]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4978      	ldr	r1, [pc, #480]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800498c:	4313      	orrs	r3, r2
 800498e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800499c:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	4970      	ldr	r1, [pc, #448]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ba:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f023 0210 	bic.w	r2, r3, #16
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	4969      	ldr	r1, [pc, #420]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80049d8:	4b64      	ldr	r3, [pc, #400]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	4961      	ldr	r1, [pc, #388]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049f6:	4b5d      	ldr	r3, [pc, #372]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	f023 0220 	bic.w	r2, r3, #32
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	495a      	ldr	r1, [pc, #360]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a14:	4b55      	ldr	r3, [pc, #340]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	4952      	ldr	r1, [pc, #328]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a32:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	494b      	ldr	r1, [pc, #300]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a50:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	4943      	ldr	r1, [pc, #268]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	493c      	ldr	r1, [pc, #240]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a8c:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	4934      	ldr	r1, [pc, #208]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004aaa:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	492d      	ldr	r1, [pc, #180]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ac8:	4b28      	ldr	r3, [pc, #160]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	4925      	ldr	r1, [pc, #148]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004ae6:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	491e      	ldr	r1, [pc, #120]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	4916      	ldr	r1, [pc, #88]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	490f      	ldr	r1, [pc, #60]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d008      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	4907      	ldr	r1, [pc, #28]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004b5e:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	e002      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	4913      	ldr	r1, [pc, #76]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d008      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b90:	490b      	ldr	r1, [pc, #44]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bae:	4904      	ldr	r1, [pc, #16]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3748      	adds	r7, #72	; 0x48
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000

08004bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e09d      	b.n	8004d12 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d108      	bne.n	8004bf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be6:	d009      	beq.n	8004bfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	61da      	str	r2, [r3, #28]
 8004bee:	e005      	b.n	8004bfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fd f9fc 	bl	8002014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c3c:	d902      	bls.n	8004c44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	e002      	b.n	8004c4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c52:	d007      	beq.n	8004c64 <HAL_SPI_Init+0xa0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c5c:	d002      	beq.n	8004c64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca6:	ea42 0103 	orr.w	r1, r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	0c1b      	lsrs	r3, r3, #16
 8004cc0:	f003 0204 	and.w	r2, r3, #4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ce0:	ea42 0103 	orr.w	r1, r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_SPI_Transmit+0x22>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e158      	b.n	8004fee <HAL_SPI_Transmit+0x2d4>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d44:	f7fd fb22 	bl	800238c <HAL_GetTick>
 8004d48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d002      	beq.n	8004d60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d5e:	e13d      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Transmit+0x52>
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d70:	e134      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2203      	movs	r2, #3
 8004d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	d10f      	bne.n	8004dde <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ddc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d007      	beq.n	8004dfc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e04:	d94b      	bls.n	8004e9e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_Transmit+0xfa>
 8004e0e:	8afb      	ldrh	r3, [r7, #22]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d13e      	bne.n	8004e92 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e38:	e02b      	b.n	8004e92 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d112      	bne.n	8004e6e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e6c:	e011      	b.n	8004e92 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6e:	f7fd fa8d 	bl	800238c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d803      	bhi.n	8004e86 <HAL_SPI_Transmit+0x16c>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d102      	bne.n	8004e8c <HAL_SPI_Transmit+0x172>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d102      	bne.n	8004e92 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e90:	e0a4      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ce      	bne.n	8004e3a <HAL_SPI_Transmit+0x120>
 8004e9c:	e07c      	b.n	8004f98 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_SPI_Transmit+0x192>
 8004ea6:	8afb      	ldrh	r3, [r7, #22]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d170      	bne.n	8004f8e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d912      	bls.n	8004edc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	881a      	ldrh	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	1c9a      	adds	r2, r3, #2
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b02      	subs	r3, #2
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eda:	e058      	b.n	8004f8e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f02:	e044      	b.n	8004f8e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d12b      	bne.n	8004f6a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d912      	bls.n	8004f42 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	881a      	ldrh	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	1c9a      	adds	r2, r3, #2
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b02      	subs	r3, #2
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f40:	e025      	b.n	8004f8e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f68:	e011      	b.n	8004f8e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6a:	f7fd fa0f 	bl	800238c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d803      	bhi.n	8004f82 <HAL_SPI_Transmit+0x268>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_Transmit+0x26e>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f8c:	e026      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1b5      	bne.n	8004f04 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fb5b 	bl	8005658 <SPI_EndRxTxTransaction>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e000      	b.n	8004fdc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b08a      	sub	sp, #40	; 0x28
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005004:	2301      	movs	r3, #1
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_SPI_TransmitReceive+0x26>
 8005018:	2302      	movs	r3, #2
 800501a:	e1fb      	b.n	8005414 <HAL_SPI_TransmitReceive+0x41e>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005024:	f7fd f9b2 	bl	800238c <HAL_GetTick>
 8005028:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005030:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005040:	7efb      	ldrb	r3, [r7, #27]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d00e      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x6e>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504c:	d106      	bne.n	800505c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_SPI_TransmitReceive+0x66>
 8005056:	7efb      	ldrb	r3, [r7, #27]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d003      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800505c:	2302      	movs	r3, #2
 800505e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005062:	e1cd      	b.n	8005400 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_SPI_TransmitReceive+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <HAL_SPI_TransmitReceive+0x80>
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800507c:	e1c0      	b.n	8005400 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b04      	cmp	r3, #4
 8005088:	d003      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2205      	movs	r2, #5
 800508e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	887a      	ldrh	r2, [r7, #2]
 80050a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	887a      	ldrh	r2, [r7, #2]
 80050aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	887a      	ldrh	r2, [r7, #2]
 80050be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d4:	d802      	bhi.n	80050dc <HAL_SPI_TransmitReceive+0xe6>
 80050d6:	8a3b      	ldrh	r3, [r7, #16]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d908      	bls.n	80050ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050ea:	605a      	str	r2, [r3, #4]
 80050ec:	e007      	b.n	80050fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	d007      	beq.n	800511c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005124:	d97c      	bls.n	8005220 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x13e>
 800512e:	8a7b      	ldrh	r3, [r7, #18]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d169      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005158:	e056      	b.n	8005208 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b02      	cmp	r3, #2
 8005166:	d11b      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x1aa>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x1aa>
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	2b01      	cmp	r3, #1
 8005176:	d113      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d11c      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x1f2>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68da      	ldr	r2, [r3, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	b292      	uxth	r2, r2
 80051c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	1c9a      	adds	r2, r3, #2
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051e4:	2301      	movs	r3, #1
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051e8:	f7fd f8d0 	bl	800238c <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d807      	bhi.n	8005208 <HAL_SPI_TransmitReceive+0x212>
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d003      	beq.n	8005208 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005206:	e0fb      	b.n	8005400 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1a3      	bne.n	800515a <HAL_SPI_TransmitReceive+0x164>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005218:	b29b      	uxth	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d19d      	bne.n	800515a <HAL_SPI_TransmitReceive+0x164>
 800521e:	e0df      	b.n	80053e0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x23a>
 8005228:	8a7b      	ldrh	r3, [r7, #18]
 800522a:	2b01      	cmp	r3, #1
 800522c:	f040 80cb 	bne.w	80053c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	d912      	bls.n	8005260 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	881a      	ldrh	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	1c9a      	adds	r2, r3, #2
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b02      	subs	r3, #2
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800525e:	e0b2      	b.n	80053c6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	330c      	adds	r3, #12
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005286:	e09e      	b.n	80053c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b02      	cmp	r3, #2
 8005294:	d134      	bne.n	8005300 <HAL_SPI_TransmitReceive+0x30a>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02f      	beq.n	8005300 <HAL_SPI_TransmitReceive+0x30a>
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d12c      	bne.n	8005300 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d912      	bls.n	80052d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	881a      	ldrh	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	1c9a      	adds	r2, r3, #2
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b02      	subs	r3, #2
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052d4:	e012      	b.n	80052fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	7812      	ldrb	r2, [r2, #0]
 80052e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d148      	bne.n	80053a0 <HAL_SPI_TransmitReceive+0x3aa>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d042      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d923      	bls.n	800536e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	b292      	uxth	r2, r2
 8005332:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b02      	subs	r3, #2
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005356:	b29b      	uxth	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	d81f      	bhi.n	800539c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	e016      	b.n	800539c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f103 020c 	add.w	r2, r3, #12
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	7812      	ldrb	r2, [r2, #0]
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800539c:	2301      	movs	r3, #1
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053a0:	f7fc fff4 	bl	800238c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d803      	bhi.n	80053b8 <HAL_SPI_TransmitReceive+0x3c2>
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	d102      	bne.n	80053be <HAL_SPI_TransmitReceive+0x3c8>
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80053c4:	e01c      	b.n	8005400 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f47f af5b 	bne.w	8005288 <HAL_SPI_TransmitReceive+0x292>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f47f af54 	bne.w	8005288 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f937 	bl	8005658 <SPI_EndRxTxTransaction>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60
 80053fc:	e000      	b.n	8005400 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80053fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005414:	4618      	mov	r0, r3
 8005416:	3728      	adds	r7, #40	; 0x28
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	603b      	str	r3, [r7, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800542c:	f7fc ffae 	bl	800238c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	4413      	add	r3, r2
 800543a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800543c:	f7fc ffa6 	bl	800238c <HAL_GetTick>
 8005440:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005442:	4b39      	ldr	r3, [pc, #228]	; (8005528 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	015b      	lsls	r3, r3, #5
 8005448:	0d1b      	lsrs	r3, r3, #20
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	fb02 f303 	mul.w	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005452:	e054      	b.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d050      	beq.n	80054fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800545c:	f7fc ff96 	bl	800238c <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	429a      	cmp	r2, r3
 800546a:	d902      	bls.n	8005472 <SPI_WaitFlagStateUntilTimeout+0x56>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d13d      	bne.n	80054ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005480:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548a:	d111      	bne.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005494:	d004      	beq.n	80054a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549e:	d107      	bne.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b8:	d10f      	bne.n	80054da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e017      	b.n	800551e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	4013      	ands	r3, r2
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	bf0c      	ite	eq
 800550e:	2301      	moveq	r3, #1
 8005510:	2300      	movne	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	429a      	cmp	r2, r3
 800551a:	d19b      	bne.n	8005454 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3720      	adds	r7, #32
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	2000000c 	.word	0x2000000c

0800552c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800553e:	f7fc ff25 	bl	800238c <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	4413      	add	r3, r2
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800554e:	f7fc ff1d 	bl	800238c <HAL_GetTick>
 8005552:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800555c:	4b3d      	ldr	r3, [pc, #244]	; (8005654 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4413      	add	r3, r2
 8005566:	00da      	lsls	r2, r3, #3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	0d1b      	lsrs	r3, r3, #20
 800556c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556e:	fb02 f303 	mul.w	r3, r2, r3
 8005572:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005574:	e060      	b.n	8005638 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800557c:	d107      	bne.n	800558e <SPI_WaitFifoStateUntilTimeout+0x62>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	b2db      	uxtb	r3, r3
 800558a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800558c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005594:	d050      	beq.n	8005638 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005596:	f7fc fef9 	bl	800238c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d902      	bls.n	80055ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d13d      	bne.n	8005628 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c4:	d111      	bne.n	80055ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ce:	d004      	beq.n	80055da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d8:	d107      	bne.n	80055ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f2:	d10f      	bne.n	8005614 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005612:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e010      	b.n	800564a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	3b01      	subs	r3, #1
 8005636:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4013      	ands	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	429a      	cmp	r2, r3
 8005646:	d196      	bne.n	8005576 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3728      	adds	r7, #40	; 0x28
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	2000000c 	.word	0x2000000c

08005658 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2200      	movs	r2, #0
 800566c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff ff5b 	bl	800552c <SPI_WaitFifoStateUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005680:	f043 0220 	orr.w	r2, r3, #32
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e027      	b.n	80056dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	2180      	movs	r1, #128	; 0x80
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fec0 	bl	800541c <SPI_WaitFlagStateUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a6:	f043 0220 	orr.w	r2, r3, #32
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e014      	b.n	80056dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff ff34 	bl	800552c <SPI_WaitFifoStateUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e000      	b.n	80056dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e049      	b.n	800578a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f841 	bl	8005792 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3304      	adds	r3, #4
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f000 f9f8 	bl	8005b18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d001      	beq.n	80057c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e04f      	b.n	8005860 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0201 	orr.w	r2, r2, #1
 80057d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a23      	ldr	r2, [pc, #140]	; (800586c <HAL_TIM_Base_Start_IT+0xc4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d01d      	beq.n	800581e <HAL_TIM_Base_Start_IT+0x76>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ea:	d018      	beq.n	800581e <HAL_TIM_Base_Start_IT+0x76>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1f      	ldr	r2, [pc, #124]	; (8005870 <HAL_TIM_Base_Start_IT+0xc8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <HAL_TIM_Base_Start_IT+0x76>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <HAL_TIM_Base_Start_IT+0xcc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d00e      	beq.n	800581e <HAL_TIM_Base_Start_IT+0x76>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1c      	ldr	r2, [pc, #112]	; (8005878 <HAL_TIM_Base_Start_IT+0xd0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d009      	beq.n	800581e <HAL_TIM_Base_Start_IT+0x76>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_TIM_Base_Start_IT+0xd4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d004      	beq.n	800581e <HAL_TIM_Base_Start_IT+0x76>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a19      	ldr	r2, [pc, #100]	; (8005880 <HAL_TIM_Base_Start_IT+0xd8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d115      	bne.n	800584a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	4b17      	ldr	r3, [pc, #92]	; (8005884 <HAL_TIM_Base_Start_IT+0xdc>)
 8005826:	4013      	ands	r3, r2
 8005828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b06      	cmp	r3, #6
 800582e:	d015      	beq.n	800585c <HAL_TIM_Base_Start_IT+0xb4>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005836:	d011      	beq.n	800585c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	e008      	b.n	800585c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e000      	b.n	800585e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40013400 	.word	0x40013400
 800587c:	40014000 	.word	0x40014000
 8005880:	40015000 	.word	0x40015000
 8005884:	00010007 	.word	0x00010007

08005888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0202 	mvn.w	r2, #2
 80058b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f905 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8f7 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f908 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d122      	bne.n	8005938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0204 	mvn.w	r2, #4
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8db 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8cd 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f8de 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b08      	cmp	r3, #8
 8005944:	d122      	bne.n	800598c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b08      	cmp	r3, #8
 8005952:	d11b      	bne.n	800598c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0208 	mvn.w	r2, #8
 800595c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2204      	movs	r2, #4
 8005962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f8b1 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f8a3 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f8b4 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b10      	cmp	r3, #16
 8005998:	d122      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d11b      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f06f 0210 	mvn.w	r2, #16
 80059b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2208      	movs	r2, #8
 80059b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f887 	bl	8005ada <HAL_TIM_IC_CaptureCallback>
 80059cc:	e005      	b.n	80059da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f879 	bl	8005ac6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f88a 	bl	8005aee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0201 	mvn.w	r2, #1
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fc fa7c 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d107      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f918 	bl	8005c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a46:	d10e      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a52:	2b80      	cmp	r3, #128	; 0x80
 8005a54:	d107      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f90b 	bl	8005c7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d10e      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d107      	bne.n	8005a92 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f838 	bl	8005b02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d10e      	bne.n	8005abe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d107      	bne.n	8005abe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f06f 0220 	mvn.w	r2, #32
 8005ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8cb 	bl	8005c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a42      	ldr	r2, [pc, #264]	; (8005c34 <TIM_Base_SetConfig+0x11c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b36:	d00f      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3f      	ldr	r2, [pc, #252]	; (8005c38 <TIM_Base_SetConfig+0x120>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d00b      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a3e      	ldr	r2, [pc, #248]	; (8005c3c <TIM_Base_SetConfig+0x124>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d007      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a3d      	ldr	r2, [pc, #244]	; (8005c40 <TIM_Base_SetConfig+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a3c      	ldr	r2, [pc, #240]	; (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d108      	bne.n	8005b6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	; (8005c34 <TIM_Base_SetConfig+0x11c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b78:	d01b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2e      	ldr	r2, [pc, #184]	; (8005c38 <TIM_Base_SetConfig+0x120>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d017      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2d      	ldr	r2, [pc, #180]	; (8005c3c <TIM_Base_SetConfig+0x124>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2c      	ldr	r2, [pc, #176]	; (8005c40 <TIM_Base_SetConfig+0x128>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2c      	ldr	r2, [pc, #176]	; (8005c48 <TIM_Base_SetConfig+0x130>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2b      	ldr	r2, [pc, #172]	; (8005c4c <TIM_Base_SetConfig+0x134>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2a      	ldr	r2, [pc, #168]	; (8005c50 <TIM_Base_SetConfig+0x138>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0x9a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a25      	ldr	r2, [pc, #148]	; (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d108      	bne.n	8005bc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a12      	ldr	r2, [pc, #72]	; (8005c34 <TIM_Base_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d013      	beq.n	8005c18 <TIM_Base_SetConfig+0x100>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <TIM_Base_SetConfig+0x128>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00f      	beq.n	8005c18 <TIM_Base_SetConfig+0x100>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <TIM_Base_SetConfig+0x130>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00b      	beq.n	8005c18 <TIM_Base_SetConfig+0x100>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <TIM_Base_SetConfig+0x134>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d007      	beq.n	8005c18 <TIM_Base_SetConfig+0x100>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a11      	ldr	r2, [pc, #68]	; (8005c50 <TIM_Base_SetConfig+0x138>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_Base_SetConfig+0x100>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a0c      	ldr	r2, [pc, #48]	; (8005c44 <TIM_Base_SetConfig+0x12c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d103      	bne.n	8005c20 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	615a      	str	r2, [r3, #20]
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40000400 	.word	0x40000400
 8005c3c:	40000800 	.word	0x40000800
 8005c40:	40013400 	.word	0x40013400
 8005c44:	40015000 	.word	0x40015000
 8005c48:	40014000 	.word	0x40014000
 8005c4c:	40014400 	.word	0x40014400
 8005c50:	40014800 	.word	0x40014800

08005c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e040      	b.n	8005d24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fc f9f0 	bl	8002098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	; 0x24
 8005cbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f8c0 	bl	8005e54 <UART_SetConfig>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e022      	b.n	8005d24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa8a 	bl	8006200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb11 	bl	8006344 <UART_CheckIdleState>
 8005d22:	4603      	mov	r3, r0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08a      	sub	sp, #40	; 0x28
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	f040 8082 	bne.w	8005e4a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_UART_Transmit+0x26>
 8005d4c:	88fb      	ldrh	r3, [r7, #6]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e07a      	b.n	8005e4c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_UART_Transmit+0x38>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e073      	b.n	8005e4c <HAL_UART_Transmit+0x120>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2221      	movs	r2, #33	; 0x21
 8005d78:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d7a:	f7fc fb07 	bl	800238c <HAL_GetTick>
 8005d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	88fa      	ldrh	r2, [r7, #6]
 8005d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d98:	d108      	bne.n	8005dac <HAL_UART_Transmit+0x80>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	e003      	b.n	8005db4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005dbc:	e02d      	b.n	8005e1a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2180      	movs	r1, #128	; 0x80
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fb04 	bl	80063d6 <UART_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e039      	b.n	8005e4c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	881a      	ldrh	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dea:	b292      	uxth	r2, r2
 8005dec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	3302      	adds	r3, #2
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	e008      	b.n	8005e08 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3301      	adds	r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1cb      	bne.n	8005dbe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2140      	movs	r1, #64	; 0x40
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fad0 	bl	80063d6 <UART_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e005      	b.n	8005e4c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e000      	b.n	8005e4c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005e4a:	2302      	movs	r3, #2
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3720      	adds	r7, #32
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b92      	ldr	r3, [pc, #584]	; (80060c8 <UART_SetConfig+0x274>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	6979      	ldr	r1, [r7, #20]
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a80      	ldr	r2, [pc, #512]	; (80060cc <UART_SetConfig+0x278>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d120      	bne.n	8005f12 <UART_SetConfig+0xbe>
 8005ed0:	4b7f      	ldr	r3, [pc, #508]	; (80060d0 <UART_SetConfig+0x27c>)
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d817      	bhi.n	8005f0c <UART_SetConfig+0xb8>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <UART_SetConfig+0x90>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005f01 	.word	0x08005f01
 8005eec:	08005f07 	.word	0x08005f07
 8005ef0:	08005efb 	.word	0x08005efb
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e0b5      	b.n	8006066 <UART_SetConfig+0x212>
 8005efa:	2302      	movs	r3, #2
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e0b2      	b.n	8006066 <UART_SetConfig+0x212>
 8005f00:	2304      	movs	r3, #4
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e0af      	b.n	8006066 <UART_SetConfig+0x212>
 8005f06:	2308      	movs	r3, #8
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e0ac      	b.n	8006066 <UART_SetConfig+0x212>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e0a9      	b.n	8006066 <UART_SetConfig+0x212>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a6f      	ldr	r2, [pc, #444]	; (80060d4 <UART_SetConfig+0x280>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d124      	bne.n	8005f66 <UART_SetConfig+0x112>
 8005f1c:	4b6c      	ldr	r3, [pc, #432]	; (80060d0 <UART_SetConfig+0x27c>)
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f28:	d011      	beq.n	8005f4e <UART_SetConfig+0xfa>
 8005f2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f2e:	d817      	bhi.n	8005f60 <UART_SetConfig+0x10c>
 8005f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f34:	d011      	beq.n	8005f5a <UART_SetConfig+0x106>
 8005f36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f3a:	d811      	bhi.n	8005f60 <UART_SetConfig+0x10c>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <UART_SetConfig+0xf4>
 8005f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f44:	d006      	beq.n	8005f54 <UART_SetConfig+0x100>
 8005f46:	e00b      	b.n	8005f60 <UART_SetConfig+0x10c>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e08b      	b.n	8006066 <UART_SetConfig+0x212>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	77fb      	strb	r3, [r7, #31]
 8005f52:	e088      	b.n	8006066 <UART_SetConfig+0x212>
 8005f54:	2304      	movs	r3, #4
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e085      	b.n	8006066 <UART_SetConfig+0x212>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e082      	b.n	8006066 <UART_SetConfig+0x212>
 8005f60:	2310      	movs	r3, #16
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e07f      	b.n	8006066 <UART_SetConfig+0x212>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5b      	ldr	r2, [pc, #364]	; (80060d8 <UART_SetConfig+0x284>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d124      	bne.n	8005fba <UART_SetConfig+0x166>
 8005f70:	4b57      	ldr	r3, [pc, #348]	; (80060d0 <UART_SetConfig+0x27c>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005f78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005f7c:	d011      	beq.n	8005fa2 <UART_SetConfig+0x14e>
 8005f7e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005f82:	d817      	bhi.n	8005fb4 <UART_SetConfig+0x160>
 8005f84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f88:	d011      	beq.n	8005fae <UART_SetConfig+0x15a>
 8005f8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f8e:	d811      	bhi.n	8005fb4 <UART_SetConfig+0x160>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <UART_SetConfig+0x148>
 8005f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f98:	d006      	beq.n	8005fa8 <UART_SetConfig+0x154>
 8005f9a:	e00b      	b.n	8005fb4 <UART_SetConfig+0x160>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e061      	b.n	8006066 <UART_SetConfig+0x212>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e05e      	b.n	8006066 <UART_SetConfig+0x212>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e05b      	b.n	8006066 <UART_SetConfig+0x212>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e058      	b.n	8006066 <UART_SetConfig+0x212>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e055      	b.n	8006066 <UART_SetConfig+0x212>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a47      	ldr	r2, [pc, #284]	; (80060dc <UART_SetConfig+0x288>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d124      	bne.n	800600e <UART_SetConfig+0x1ba>
 8005fc4:	4b42      	ldr	r3, [pc, #264]	; (80060d0 <UART_SetConfig+0x27c>)
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fd0:	d011      	beq.n	8005ff6 <UART_SetConfig+0x1a2>
 8005fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fd6:	d817      	bhi.n	8006008 <UART_SetConfig+0x1b4>
 8005fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fdc:	d011      	beq.n	8006002 <UART_SetConfig+0x1ae>
 8005fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fe2:	d811      	bhi.n	8006008 <UART_SetConfig+0x1b4>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <UART_SetConfig+0x19c>
 8005fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fec:	d006      	beq.n	8005ffc <UART_SetConfig+0x1a8>
 8005fee:	e00b      	b.n	8006008 <UART_SetConfig+0x1b4>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e037      	b.n	8006066 <UART_SetConfig+0x212>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e034      	b.n	8006066 <UART_SetConfig+0x212>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e031      	b.n	8006066 <UART_SetConfig+0x212>
 8006002:	2308      	movs	r3, #8
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e02e      	b.n	8006066 <UART_SetConfig+0x212>
 8006008:	2310      	movs	r3, #16
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e02b      	b.n	8006066 <UART_SetConfig+0x212>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a33      	ldr	r2, [pc, #204]	; (80060e0 <UART_SetConfig+0x28c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d124      	bne.n	8006062 <UART_SetConfig+0x20e>
 8006018:	4b2d      	ldr	r3, [pc, #180]	; (80060d0 <UART_SetConfig+0x27c>)
 800601a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006024:	d011      	beq.n	800604a <UART_SetConfig+0x1f6>
 8006026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800602a:	d817      	bhi.n	800605c <UART_SetConfig+0x208>
 800602c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006030:	d011      	beq.n	8006056 <UART_SetConfig+0x202>
 8006032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006036:	d811      	bhi.n	800605c <UART_SetConfig+0x208>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <UART_SetConfig+0x1f0>
 800603c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006040:	d006      	beq.n	8006050 <UART_SetConfig+0x1fc>
 8006042:	e00b      	b.n	800605c <UART_SetConfig+0x208>
 8006044:	2300      	movs	r3, #0
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e00d      	b.n	8006066 <UART_SetConfig+0x212>
 800604a:	2302      	movs	r3, #2
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e00a      	b.n	8006066 <UART_SetConfig+0x212>
 8006050:	2304      	movs	r3, #4
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e007      	b.n	8006066 <UART_SetConfig+0x212>
 8006056:	2308      	movs	r3, #8
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e004      	b.n	8006066 <UART_SetConfig+0x212>
 800605c:	2310      	movs	r3, #16
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e001      	b.n	8006066 <UART_SetConfig+0x212>
 8006062:	2310      	movs	r3, #16
 8006064:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606e:	d16c      	bne.n	800614a <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8006070:	7ffb      	ldrb	r3, [r7, #31]
 8006072:	2b08      	cmp	r3, #8
 8006074:	d838      	bhi.n	80060e8 <UART_SetConfig+0x294>
 8006076:	a201      	add	r2, pc, #4	; (adr r2, 800607c <UART_SetConfig+0x228>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060a1 	.word	0x080060a1
 8006080:	080060a9 	.word	0x080060a9
 8006084:	080060b1 	.word	0x080060b1
 8006088:	080060e9 	.word	0x080060e9
 800608c:	080060b7 	.word	0x080060b7
 8006090:	080060e9 	.word	0x080060e9
 8006094:	080060e9 	.word	0x080060e9
 8006098:	080060e9 	.word	0x080060e9
 800609c:	080060bf 	.word	0x080060bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7fe fae0 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 80060a4:	61b8      	str	r0, [r7, #24]
        break;
 80060a6:	e024      	b.n	80060f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a8:	f7fe fafe 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 80060ac:	61b8      	str	r0, [r7, #24]
        break;
 80060ae:	e020      	b.n	80060f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <UART_SetConfig+0x290>)
 80060b2:	61bb      	str	r3, [r7, #24]
        break;
 80060b4:	e01d      	b.n	80060f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b6:	f7fe fa5f 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 80060ba:	61b8      	str	r0, [r7, #24]
        break;
 80060bc:	e019      	b.n	80060f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c2:	61bb      	str	r3, [r7, #24]
        break;
 80060c4:	e015      	b.n	80060f2 <UART_SetConfig+0x29e>
 80060c6:	bf00      	nop
 80060c8:	efff69f3 	.word	0xefff69f3
 80060cc:	40013800 	.word	0x40013800
 80060d0:	40021000 	.word	0x40021000
 80060d4:	40004400 	.word	0x40004400
 80060d8:	40004800 	.word	0x40004800
 80060dc:	40004c00 	.word	0x40004c00
 80060e0:	40005000 	.word	0x40005000
 80060e4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	77bb      	strb	r3, [r7, #30]
        break;
 80060f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d075      	beq.n	80061e4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	005a      	lsls	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	085b      	lsrs	r3, r3, #1
 8006102:	441a      	add	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	b29b      	uxth	r3, r3
 800610e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b0f      	cmp	r3, #15
 8006114:	d916      	bls.n	8006144 <UART_SetConfig+0x2f0>
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d212      	bcs.n	8006144 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f023 030f 	bic.w	r3, r3, #15
 8006126:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	085b      	lsrs	r3, r3, #1
 800612c:	b29b      	uxth	r3, r3
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	b29a      	uxth	r2, r3
 8006134:	89fb      	ldrh	r3, [r7, #14]
 8006136:	4313      	orrs	r3, r2
 8006138:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	89fa      	ldrh	r2, [r7, #14]
 8006140:	60da      	str	r2, [r3, #12]
 8006142:	e04f      	b.n	80061e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	77bb      	strb	r3, [r7, #30]
 8006148:	e04c      	b.n	80061e4 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800614a:	7ffb      	ldrb	r3, [r7, #31]
 800614c:	2b08      	cmp	r3, #8
 800614e:	d828      	bhi.n	80061a2 <UART_SetConfig+0x34e>
 8006150:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <UART_SetConfig+0x304>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	0800617d 	.word	0x0800617d
 800615c:	08006185 	.word	0x08006185
 8006160:	0800618d 	.word	0x0800618d
 8006164:	080061a3 	.word	0x080061a3
 8006168:	08006193 	.word	0x08006193
 800616c:	080061a3 	.word	0x080061a3
 8006170:	080061a3 	.word	0x080061a3
 8006174:	080061a3 	.word	0x080061a3
 8006178:	0800619b 	.word	0x0800619b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800617c:	f7fe fa72 	bl	8004664 <HAL_RCC_GetPCLK1Freq>
 8006180:	61b8      	str	r0, [r7, #24]
        break;
 8006182:	e013      	b.n	80061ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006184:	f7fe fa90 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 8006188:	61b8      	str	r0, [r7, #24]
        break;
 800618a:	e00f      	b.n	80061ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800618c:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <UART_SetConfig+0x3a8>)
 800618e:	61bb      	str	r3, [r7, #24]
        break;
 8006190:	e00c      	b.n	80061ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006192:	f7fe f9f1 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8006196:	61b8      	str	r0, [r7, #24]
        break;
 8006198:	e008      	b.n	80061ac <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800619a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619e:	61bb      	str	r3, [r7, #24]
        break;
 80061a0:	e004      	b.n	80061ac <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	77bb      	strb	r3, [r7, #30]
        break;
 80061aa:	bf00      	nop
    }

    if (pclk != 0U)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d018      	beq.n	80061e4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	085a      	lsrs	r2, r3, #1
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	441a      	add	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b0f      	cmp	r3, #15
 80061cc:	d908      	bls.n	80061e0 <UART_SetConfig+0x38c>
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d4:	d204      	bcs.n	80061e0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	60da      	str	r2, [r3, #12]
 80061de:	e001      	b.n	80061e4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80061f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3720      	adds	r7, #32
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	007a1200 	.word	0x007a1200

08006200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01a      	beq.n	8006316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062fe:	d10a      	bne.n	8006316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	605a      	str	r2, [r3, #4]
  }
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af02      	add	r7, sp, #8
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006354:	f7fc f81a 	bl	800238c <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b08      	cmp	r3, #8
 8006366:	d10e      	bne.n	8006386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f82d 	bl	80063d6 <UART_WaitOnFlagUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e023      	b.n	80063ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b04      	cmp	r3, #4
 8006392:	d10e      	bne.n	80063b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f817 	bl	80063d6 <UART_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e00d      	b.n	80063ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b09c      	sub	sp, #112	; 0x70
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	603b      	str	r3, [r7, #0]
 80063e2:	4613      	mov	r3, r2
 80063e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e6:	e0a5      	b.n	8006534 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	f000 80a1 	beq.w	8006534 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f2:	f7fb ffcb 	bl	800238c <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <UART_WaitOnFlagUntilTimeout+0x32>
 8006402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006404:	2b00      	cmp	r3, #0
 8006406:	d13e      	bne.n	8006486 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800641c:	667b      	str	r3, [r7, #100]	; 0x64
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006428:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800642c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e6      	bne.n	8006408 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	f023 0301 	bic.w	r3, r3, #1
 8006450:	663b      	str	r3, [r7, #96]	; 0x60
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3308      	adds	r3, #8
 8006458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800645a:	64ba      	str	r2, [r7, #72]	; 0x48
 800645c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e5      	bne.n	800643a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e067      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d04f      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800649e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a2:	d147      	bne.n	8006534 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
 80064ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e6      	bne.n	80064ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3308      	adds	r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	613b      	str	r3, [r7, #16]
   return(result);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006500:	623a      	str	r2, [r7, #32]
 8006502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	69f9      	ldr	r1, [r7, #28]
 8006506:	6a3a      	ldr	r2, [r7, #32]
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	61bb      	str	r3, [r7, #24]
   return(result);
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e5      	bne.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e010      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69da      	ldr	r2, [r3, #28]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	429a      	cmp	r2, r3
 8006550:	f43f af4a 	beq.w	80063e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3770      	adds	r7, #112	; 0x70
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006564:	4904      	ldr	r1, [pc, #16]	; (8006578 <MX_FATFS_Init+0x18>)
 8006566:	4805      	ldr	r0, [pc, #20]	; (800657c <MX_FATFS_Init+0x1c>)
 8006568:	f004 f81e 	bl	800a5a8 <FATFS_LinkDriver>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <MX_FATFS_Init+0x20>)
 8006572:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006574:	bf00      	nop
 8006576:	bd80      	pop	{r7, pc}
 8006578:	200022f4 	.word	0x200022f4
 800657c:	20000018 	.word	0x20000018
 8006580:	200022f0 	.word	0x200022f0

08006584 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006588:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800658a:	4618      	mov	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	4603      	mov	r3, r0
 800659c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fa fc75 	bl	8000e90 <SD_disk_initialize>
 80065a6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fa fd5b 	bl	8001078 <SD_disk_status>
 80065c2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80065dc:	7bf8      	ldrb	r0, [r7, #15]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	f7fa fd5e 	bl	80010a4 <SD_disk_read>
 80065e8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006602:	7bf8      	ldrb	r0, [r7, #15]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	f7fa fdb5 	bl	8001178 <SD_disk_write>
 800660e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	4603      	mov	r3, r0
 8006620:	603a      	str	r2, [r7, #0]
 8006622:	71fb      	strb	r3, [r7, #7]
 8006624:	460b      	mov	r3, r1
 8006626:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006628:	79b9      	ldrb	r1, [r7, #6]
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7fa fe26 	bl	8001280 <SD_disk_ioctl>
 8006634:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	4a08      	ldr	r2, [pc, #32]	; (8006670 <disk_status+0x30>)
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	79fa      	ldrb	r2, [r7, #7]
 8006658:	4905      	ldr	r1, [pc, #20]	; (8006670 <disk_status+0x30>)
 800665a:	440a      	add	r2, r1
 800665c:	7a12      	ldrb	r2, [r2, #8]
 800665e:	4610      	mov	r0, r2
 8006660:	4798      	blx	r3
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	20002318 	.word	0x20002318

08006674 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <disk_initialize+0x48>)
 8006686:	5cd3      	ldrb	r3, [r2, r3]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d111      	bne.n	80066b0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	4a0b      	ldr	r2, [pc, #44]	; (80066bc <disk_initialize+0x48>)
 8006690:	2101      	movs	r1, #1
 8006692:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	4a09      	ldr	r2, [pc, #36]	; (80066bc <disk_initialize+0x48>)
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	79fa      	ldrb	r2, [r7, #7]
 80066a2:	4906      	ldr	r1, [pc, #24]	; (80066bc <disk_initialize+0x48>)
 80066a4:	440a      	add	r2, r1
 80066a6:	7a12      	ldrb	r2, [r2, #8]
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
 80066ac:	4603      	mov	r3, r0
 80066ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20002318 	.word	0x20002318

080066c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <disk_read+0x3c>)
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	689c      	ldr	r4, [r3, #8]
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	4a07      	ldr	r2, [pc, #28]	; (80066fc <disk_read+0x3c>)
 80066e0:	4413      	add	r3, r2
 80066e2:	7a18      	ldrb	r0, [r3, #8]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	47a0      	blx	r4
 80066ec:	4603      	mov	r3, r0
 80066ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20002318 	.word	0x20002318

08006700 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006700:	b590      	push	{r4, r7, lr}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	4603      	mov	r3, r0
 800670e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	4a0a      	ldr	r2, [pc, #40]	; (800673c <disk_write+0x3c>)
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68dc      	ldr	r4, [r3, #12]
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	4a07      	ldr	r2, [pc, #28]	; (800673c <disk_write+0x3c>)
 8006720:	4413      	add	r3, r2
 8006722:	7a18      	ldrb	r0, [r3, #8]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	47a0      	blx	r4
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006730:	7dfb      	ldrb	r3, [r7, #23]
}
 8006732:	4618      	mov	r0, r3
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	bd90      	pop	{r4, r7, pc}
 800673a:	bf00      	nop
 800673c:	20002318 	.word	0x20002318

08006740 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	603a      	str	r2, [r7, #0]
 800674a:	71fb      	strb	r3, [r7, #7]
 800674c:	460b      	mov	r3, r1
 800674e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	4a09      	ldr	r2, [pc, #36]	; (8006778 <disk_ioctl+0x38>)
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	79fa      	ldrb	r2, [r7, #7]
 800675e:	4906      	ldr	r1, [pc, #24]	; (8006778 <disk_ioctl+0x38>)
 8006760:	440a      	add	r2, r1
 8006762:	7a10      	ldrb	r0, [r2, #8]
 8006764:	79b9      	ldrb	r1, [r7, #6]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	4798      	blx	r3
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]
  return res;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20002318 	.word	0x20002318

0800677c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006790:	e007      	b.n	80067a2 <mem_cpy+0x26>
		*d++ = *s++;
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	1c53      	adds	r3, r2, #1
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	1c59      	adds	r1, r3, #1
 800679c:	6179      	str	r1, [r7, #20]
 800679e:	7812      	ldrb	r2, [r2, #0]
 80067a0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	1e5a      	subs	r2, r3, #1
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f2      	bne.n	8006792 <mem_cpy+0x16>
}
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80067ba:	b480      	push	{r7}
 80067bc:	b087      	sub	sp, #28
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80067ca:	e005      	b.n	80067d8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	617a      	str	r2, [r7, #20]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	1e5a      	subs	r2, r3, #1
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f4      	bne.n	80067cc <mem_set+0x12>
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	; 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006808:	bf00      	nop
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	1e5a      	subs	r2, r3, #1
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <mem_cmp+0x40>
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	61fa      	str	r2, [r7, #28]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4619      	mov	r1, r3
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	61ba      	str	r2, [r7, #24]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	1acb      	subs	r3, r1, r3
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0ec      	beq.n	800680a <mem_cmp+0x1a>
	return r;
 8006830:	697b      	ldr	r3, [r7, #20]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3724      	adds	r7, #36	; 0x24
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006848:	e002      	b.n	8006850 <chk_chr+0x12>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3301      	adds	r3, #1
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <chk_chr+0x26>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	4293      	cmp	r3, r2
 8006862:	d1f2      	bne.n	800684a <chk_chr+0xc>
	return *str;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	781b      	ldrb	r3, [r3, #0]
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4618      	mov	r0, r3
 8006886:	f003 fec8 	bl	800a61a <ff_req_grant>
 800688a:	4603      	mov	r3, r0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d012      	beq.n	80068cc <unlock_fs+0x38>
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	2b0c      	cmp	r3, #12
 80068aa:	d00f      	beq.n	80068cc <unlock_fs+0x38>
		res != FR_NOT_ENABLED &&
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	2b0b      	cmp	r3, #11
 80068b0:	d00c      	beq.n	80068cc <unlock_fs+0x38>
		res != FR_INVALID_DRIVE &&
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	2b09      	cmp	r3, #9
 80068b6:	d009      	beq.n	80068cc <unlock_fs+0x38>
		res != FR_INVALID_OBJECT &&
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	2b0f      	cmp	r3, #15
 80068bc:	d006      	beq.n	80068cc <unlock_fs+0x38>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f003 febc 	bl	800a644 <ff_rel_grant>
	}
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	e03b      	b.n	8006960 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80068e8:	4931      	ldr	r1, [pc, #196]	; (80069b0 <chk_lock+0xdc>)
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4613      	mov	r3, r2
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d02c      	beq.n	8006956 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80068fc:	492c      	ldr	r1, [pc, #176]	; (80069b0 <chk_lock+0xdc>)
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4613      	mov	r3, r2
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d120      	bne.n	800695a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8006918:	4925      	ldr	r1, [pc, #148]	; (80069b0 <chk_lock+0xdc>)
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	4613      	mov	r3, r2
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	3304      	adds	r3, #4
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006930:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006932:	429a      	cmp	r2, r3
 8006934:	d111      	bne.n	800695a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006936:	491e      	ldr	r1, [pc, #120]	; (80069b0 <chk_lock+0xdc>)
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	3308      	adds	r3, #8
 8006946:	881a      	ldrh	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800694e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006950:	429a      	cmp	r2, r3
 8006952:	d102      	bne.n	800695a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006954:	e007      	b.n	8006966 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8006956:	2301      	movs	r3, #1
 8006958:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d9c0      	bls.n	80068e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d109      	bne.n	8006980 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <chk_lock+0xa4>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d101      	bne.n	800697c <chk_lock+0xa8>
 8006978:	2300      	movs	r3, #0
 800697a:	e013      	b.n	80069a4 <chk_lock+0xd0>
 800697c:	2312      	movs	r3, #18
 800697e:	e011      	b.n	80069a4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <chk_lock+0xca>
 8006986:	490a      	ldr	r1, [pc, #40]	; (80069b0 <chk_lock+0xdc>)
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4613      	mov	r3, r2
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	330a      	adds	r3, #10
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800699c:	d101      	bne.n	80069a2 <chk_lock+0xce>
 800699e:	2310      	movs	r3, #16
 80069a0:	e000      	b.n	80069a4 <chk_lock+0xd0>
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	20002300 	.word	0x20002300

080069b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80069ba:	2300      	movs	r3, #0
 80069bc:	607b      	str	r3, [r7, #4]
 80069be:	e002      	b.n	80069c6 <enq_lock+0x12>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3301      	adds	r3, #1
 80069c4:	607b      	str	r3, [r7, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d809      	bhi.n	80069e0 <enq_lock+0x2c>
 80069cc:	490a      	ldr	r1, [pc, #40]	; (80069f8 <enq_lock+0x44>)
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1ef      	bne.n	80069c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	20002300 	.word	0x20002300

080069fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e02e      	b.n	8006a6a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8006a0c:	4959      	ldr	r1, [pc, #356]	; (8006b74 <inc_lock+0x178>)
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4613      	mov	r3, r2
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d11d      	bne.n	8006a64 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006a28:	4952      	ldr	r1, [pc, #328]	; (8006b74 <inc_lock+0x178>)
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	3304      	adds	r3, #4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d10e      	bne.n	8006a64 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006a46:	494b      	ldr	r1, [pc, #300]	; (8006b74 <inc_lock+0x178>)
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	440b      	add	r3, r1
 8006a54:	3308      	adds	r3, #8
 8006a56:	881a      	ldrh	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d006      	beq.n	8006a72 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d9cd      	bls.n	8006a0c <inc_lock+0x10>
 8006a70:	e000      	b.n	8006a74 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8006a72:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d148      	bne.n	8006b0c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	e002      	b.n	8006a86 <inc_lock+0x8a>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d809      	bhi.n	8006aa0 <inc_lock+0xa4>
 8006a8c:	4939      	ldr	r1, [pc, #228]	; (8006b74 <inc_lock+0x178>)
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4613      	mov	r3, r2
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	440b      	add	r3, r1
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1ef      	bne.n	8006a80 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d101      	bne.n	8006aaa <inc_lock+0xae>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e05d      	b.n	8006b66 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab0:	6819      	ldr	r1, [r3, #0]
 8006ab2:	4830      	ldr	r0, [pc, #192]	; (8006b74 <inc_lock+0x178>)
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4403      	add	r3, r0
 8006ac0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac8:	6899      	ldr	r1, [r3, #8]
 8006aca:	482a      	ldr	r0, [pc, #168]	; (8006b74 <inc_lock+0x178>)
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4403      	add	r3, r0
 8006ad8:	3304      	adds	r3, #4
 8006ada:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae2:	88d8      	ldrh	r0, [r3, #6]
 8006ae4:	4923      	ldr	r1, [pc, #140]	; (8006b74 <inc_lock+0x178>)
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	3308      	adds	r3, #8
 8006af4:	4602      	mov	r2, r0
 8006af6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006af8:	491e      	ldr	r1, [pc, #120]	; (8006b74 <inc_lock+0x178>)
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4613      	mov	r3, r2
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	330a      	adds	r3, #10
 8006b08:	2200      	movs	r2, #0
 8006b0a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00c      	beq.n	8006b2c <inc_lock+0x130>
 8006b12:	4918      	ldr	r1, [pc, #96]	; (8006b74 <inc_lock+0x178>)
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4613      	mov	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	330a      	adds	r3, #10
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <inc_lock+0x130>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e01c      	b.n	8006b66 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <inc_lock+0x14e>
 8006b32:	4910      	ldr	r1, [pc, #64]	; (8006b74 <inc_lock+0x178>)
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4613      	mov	r3, r2
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	440b      	add	r3, r1
 8006b40:	330a      	adds	r3, #10
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	b299      	uxth	r1, r3
 8006b48:	e001      	b.n	8006b4e <inc_lock+0x152>
 8006b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b4e:	4809      	ldr	r0, [pc, #36]	; (8006b74 <inc_lock+0x178>)
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4613      	mov	r3, r2
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4403      	add	r3, r0
 8006b5c:	330a      	adds	r3, #10
 8006b5e:	460a      	mov	r2, r1
 8006b60:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20002300 	.word	0x20002300

08006b78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d82e      	bhi.n	8006bea <dec_lock+0x72>
		n = Files[i].ctr;
 8006b8c:	491b      	ldr	r1, [pc, #108]	; (8006bfc <dec_lock+0x84>)
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4613      	mov	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	330a      	adds	r3, #10
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006ba0:	89fb      	ldrh	r3, [r7, #14]
 8006ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba6:	d101      	bne.n	8006bac <dec_lock+0x34>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006bac:	89fb      	ldrh	r3, [r7, #14]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <dec_lock+0x40>
 8006bb2:	89fb      	ldrh	r3, [r7, #14]
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006bb8:	4910      	ldr	r1, [pc, #64]	; (8006bfc <dec_lock+0x84>)
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	330a      	adds	r3, #10
 8006bc8:	89fa      	ldrh	r2, [r7, #14]
 8006bca:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006bcc:	89fb      	ldrh	r3, [r7, #14]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d108      	bne.n	8006be4 <dec_lock+0x6c>
 8006bd2:	490a      	ldr	r1, [pc, #40]	; (8006bfc <dec_lock+0x84>)
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	737b      	strb	r3, [r7, #13]
 8006be8:	e001      	b.n	8006bee <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006bea:	2302      	movs	r3, #2
 8006bec:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006bee:	7b7b      	ldrb	r3, [r7, #13]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	20002300 	.word	0x20002300

08006c00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	e016      	b.n	8006c3c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c0e:	4910      	ldr	r1, [pc, #64]	; (8006c50 <clear_lock+0x50>)
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4613      	mov	r3, r2
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d108      	bne.n	8006c36 <clear_lock+0x36>
 8006c24:	490a      	ldr	r1, [pc, #40]	; (8006c50 <clear_lock+0x50>)
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d9e5      	bls.n	8006c0e <clear_lock+0xe>
	}
}
 8006c42:	bf00      	nop
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20002300 	.word	0x20002300

08006c54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c66:	791b      	ldrb	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d040      	beq.n	8006cee <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7c:	7858      	ldrb	r0, [r3, #1]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	2301      	movs	r3, #1
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	f7ff fd3c 	bl	8006700 <disk_write>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <sync_window+0x40>
			res = FR_DISK_ERR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
 8006c92:	e02c      	b.n	8006cee <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	1ad2      	subs	r2, r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d21b      	bcs.n	8006cee <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbc:	78db      	ldrb	r3, [r3, #3]
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	e012      	b.n	8006ce8 <sync_window+0x94>
					wsect += fs->fsize;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4413      	add	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd6:	7858      	ldrb	r0, [r3, #1]
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	2301      	movs	r3, #1
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	f7ff fd0f 	bl	8006700 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d8e9      	bhi.n	8006cc2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d01e      	beq.n	8006d52 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff ff9d 	bl	8006c54 <sync_window>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d116      	bne.n	8006d52 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2a:	7858      	ldrb	r0, [r3, #1]
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	f7ff fcc5 	bl	80066c0 <disk_read>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d004      	beq.n	8006d46 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d40:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}
	return res;
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7ff ff75 	bl	8006c54 <sync_window>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 80ad 	bne.w	8006ed0 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	f040 8098 	bne.w	8006eb4 <sync_fs+0x158>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8a:	795b      	ldrb	r3, [r3, #5]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	f040 8091 	bne.w	8006eb4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9a:	895b      	ldrh	r3, [r3, #10]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	2100      	movs	r1, #0
 8006da0:	f7ff fd0b 	bl	80067ba <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2255      	movs	r2, #85	; 0x55
 8006da8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	22aa      	movs	r2, #170	; 0xaa
 8006db0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2252      	movs	r2, #82	; 0x52
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2252      	movs	r2, #82	; 0x52
 8006dbe:	705a      	strb	r2, [r3, #1]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2261      	movs	r2, #97	; 0x61
 8006dc4:	709a      	strb	r2, [r3, #2]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2241      	movs	r2, #65	; 0x41
 8006dca:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2272      	movs	r2, #114	; 0x72
 8006dd0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2272      	movs	r2, #114	; 0x72
 8006dd8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2241      	movs	r2, #65	; 0x41
 8006de0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2261      	movs	r2, #97	; 0x61
 8006de8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	0e1b      	lsrs	r3, r3, #24
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	0a1b      	lsrs	r3, r3, #8
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	0c1b      	lsrs	r3, r3, #16
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	0e1b      	lsrs	r3, r3, #24
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e90:	6313      	str	r3, [r2, #48]	; 0x30
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e98:	7858      	ldrb	r0, [r3, #1]
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f7ff fc2b 	bl	8006700 <disk_write>
			fs->fsi_flag = 0;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eba:	785b      	ldrb	r3, [r3, #1]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff fc3d 	bl	8006740 <disk_ioctl>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	3b02      	subs	r3, #2
 8006ee8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	3b02      	subs	r3, #2
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d301      	bcc.n	8006efe <clust2sect+0x24>
 8006efa:	2300      	movs	r3, #0
 8006efc:	e00c      	b.n	8006f18 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f04:	789b      	ldrb	r3, [r3, #2]
 8006f06:	461a      	mov	r2, r3
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	fb03 f202 	mul.w	r2, r3, r2
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	4413      	add	r3, r2
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d906      	bls.n	8006f42 <get_fat+0x1e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <get_fat+0x24>
		val = 1;	/* Internal error */
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	e0e4      	b.n	8007112 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f48:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	f000 8098 	beq.w	800708c <get_fat+0x168>
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	f300 80ce 	bgt.w	80070fe <get_fat+0x1da>
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d002      	beq.n	8006f6c <get_fat+0x48>
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d05f      	beq.n	800702a <get_fat+0x106>
 8006f6a:	e0c8      	b.n	80070fe <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f88:	895b      	ldrh	r3, [r3, #10]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f92:	4413      	add	r3, r2
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff feae 	bl	8006cf8 <move_window>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f040 80b0 	bne.w	8007104 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	60fa      	str	r2, [r7, #12]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fb0:	8952      	ldrh	r2, [r2, #10]
 8006fb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fb6:	fb01 f202 	mul.w	r2, r1, r2
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	5cd3      	ldrb	r3, [r2, r3]
 8006fc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd0:	895b      	ldrh	r3, [r3, #10]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fda:	4413      	add	r3, r2
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fe8a 	bl	8006cf8 <move_window>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f040 808e 	bne.w	8007108 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff2:	895b      	ldrh	r3, [r3, #10]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ffc:	fb01 f202 	mul.w	r2, r1, r2
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	5cd3      	ldrb	r3, [r2, r3]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	461a      	mov	r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4313      	orrs	r3, r2
 800700e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <get_fat+0xfc>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	e002      	b.n	8007026 <get_fat+0x102>
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007026:	617b      	str	r3, [r7, #20]
			break;
 8007028:	e073      	b.n	8007112 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007038:	895b      	ldrh	r3, [r3, #10]
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	4619      	mov	r1, r3
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	fbb3 f3f1 	udiv	r3, r3, r1
 8007046:	4413      	add	r3, r2
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fe54 	bl	8006cf8 <move_window>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d15a      	bne.n	800710c <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007060:	8952      	ldrh	r2, [r2, #10]
 8007062:	fbb3 f1f2 	udiv	r1, r3, r2
 8007066:	fb01 f202 	mul.w	r2, r1, r2
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3301      	adds	r3, #1
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	b21a      	sxth	r2, r3
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b21b      	sxth	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	b21b      	sxth	r3, r3
 8007086:	b29b      	uxth	r3, r3
 8007088:	617b      	str	r3, [r7, #20]
			break;
 800708a:	e042      	b.n	8007112 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709a:	895b      	ldrh	r3, [r3, #10]
 800709c:	089b      	lsrs	r3, r3, #2
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4619      	mov	r1, r3
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80070a8:	4413      	add	r3, r2
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff fe23 	bl	8006cf8 <move_window>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d12b      	bne.n	8007110 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070c2:	8952      	ldrh	r2, [r2, #10]
 80070c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80070c8:	fb01 f202 	mul.w	r2, r1, r2
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	4413      	add	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	3303      	adds	r3, #3
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	061a      	lsls	r2, r3, #24
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	3302      	adds	r3, #2
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	4313      	orrs	r3, r2
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	3201      	adds	r2, #1
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	0212      	lsls	r2, r2, #8
 80070ee:	4313      	orrs	r3, r2
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	7812      	ldrb	r2, [r2, #0]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070fa:	617b      	str	r3, [r7, #20]
			break;
 80070fc:	e009      	b.n	8007112 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80070fe:	2301      	movs	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	e006      	b.n	8007112 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007104:	bf00      	nop
 8007106:	e004      	b.n	8007112 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007108:	bf00      	nop
 800710a:	e002      	b.n	8007112 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007110:	bf00      	nop
		}
	}

	return val;
 8007112:	697b      	ldr	r3, [r7, #20]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d906      	bls.n	800713c <put_fat+0x20>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	429a      	cmp	r2, r3
 800713a:	d302      	bcc.n	8007142 <put_fat+0x26>
		res = FR_INT_ERR;
 800713c:	2302      	movs	r3, #2
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	e13a      	b.n	80073b8 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b03      	cmp	r3, #3
 800714c:	f000 80d0 	beq.w	80072f0 <put_fat+0x1d4>
 8007150:	2b03      	cmp	r3, #3
 8007152:	f300 8127 	bgt.w	80073a4 <put_fat+0x288>
 8007156:	2b01      	cmp	r3, #1
 8007158:	d003      	beq.n	8007162 <put_fat+0x46>
 800715a:	2b02      	cmp	r3, #2
 800715c:	f000 808f 	beq.w	800727e <put_fat+0x162>
 8007160:	e120      	b.n	80073a4 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4413      	add	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800717e:	895b      	ldrh	r3, [r3, #10]
 8007180:	4619      	mov	r1, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	fbb3 f3f1 	udiv	r3, r3, r1
 8007188:	4413      	add	r3, r2
 800718a:	4619      	mov	r1, r3
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f7ff fdb3 	bl	8006cf8 <move_window>
 8007192:	4603      	mov	r3, r0
 8007194:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007196:	7ffb      	ldrb	r3, [r7, #31]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f040 8106 	bne.w	80073aa <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	617a      	str	r2, [r7, #20]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071aa:	8952      	ldrh	r2, [r2, #10]
 80071ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80071b0:	fb01 f202 	mul.w	r2, r1, r2
 80071b4:	1a9b      	subs	r3, r3, r2
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <put_fat+0xc6>
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	b25b      	sxtb	r3, r3
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	b25a      	sxtb	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	b25b      	sxtb	r3, r3
 80071da:	4313      	orrs	r3, r2
 80071dc:	b25b      	sxtb	r3, r3
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	e001      	b.n	80071e6 <put_fat+0xca>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f0:	2201      	movs	r2, #1
 80071f2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007202:	895b      	ldrh	r3, [r3, #10]
 8007204:	4619      	mov	r1, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	fbb3 f3f1 	udiv	r3, r3, r1
 800720c:	4413      	add	r3, r2
 800720e:	4619      	mov	r1, r3
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff fd71 	bl	8006cf8 <move_window>
 8007216:	4603      	mov	r3, r0
 8007218:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800721a:	7ffb      	ldrb	r3, [r7, #31]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 80c6 	bne.w	80073ae <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007228:	895b      	ldrh	r3, [r3, #10]
 800722a:	461a      	mov	r2, r3
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007232:	fb01 f202 	mul.w	r2, r1, r2
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <put_fat+0x134>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	091b      	lsrs	r3, r3, #4
 800724c:	b2db      	uxtb	r3, r3
 800724e:	e00e      	b.n	800726e <put_fat+0x152>
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b25b      	sxtb	r3, r3
 8007256:	f023 030f 	bic.w	r3, r3, #15
 800725a:	b25a      	sxtb	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	0a1b      	lsrs	r3, r3, #8
 8007260:	b25b      	sxtb	r3, r3
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	b25b      	sxtb	r3, r3
 8007268:	4313      	orrs	r3, r2
 800726a:	b25b      	sxtb	r3, r3
 800726c:	b2db      	uxtb	r3, r3
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007278:	2201      	movs	r2, #1
 800727a:	711a      	strb	r2, [r3, #4]
			break;
 800727c:	e09c      	b.n	80073b8 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728c:	895b      	ldrh	r3, [r3, #10]
 800728e:	085b      	lsrs	r3, r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	4619      	mov	r1, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	fbb3 f3f1 	udiv	r3, r3, r1
 800729a:	4413      	add	r3, r2
 800729c:	4619      	mov	r1, r3
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f7ff fd2a 	bl	8006cf8 <move_window>
 80072a4:	4603      	mov	r3, r0
 80072a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072a8:	7ffb      	ldrb	r3, [r7, #31]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f040 8081 	bne.w	80073b2 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072ba:	8952      	ldrh	r2, [r2, #10]
 80072bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80072c0:	fb01 f202 	mul.w	r2, r1, r2
 80072c4:	1a9b      	subs	r3, r3, r2
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	0a1b      	lsrs	r3, r3, #8
 80072da:	b29a      	uxth	r2, r3
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	3301      	adds	r3, #1
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ea:	2201      	movs	r2, #1
 80072ec:	711a      	strb	r2, [r3, #4]
			break;
 80072ee:	e063      	b.n	80073b8 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fe:	895b      	ldrh	r3, [r3, #10]
 8007300:	089b      	lsrs	r3, r3, #2
 8007302:	b29b      	uxth	r3, r3
 8007304:	4619      	mov	r1, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	fbb3 f3f1 	udiv	r3, r3, r1
 800730c:	4413      	add	r3, r2
 800730e:	4619      	mov	r1, r3
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff fcf1 	bl	8006cf8 <move_window>
 8007316:	4603      	mov	r3, r0
 8007318:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800731a:	7ffb      	ldrb	r3, [r7, #31]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d14a      	bne.n	80073b6 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800732a:	8952      	ldrh	r2, [r2, #10]
 800732c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007330:	fb01 f202 	mul.w	r2, r1, r2
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	3303      	adds	r3, #3
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	061a      	lsls	r2, r3, #24
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	3302      	adds	r3, #2
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	4313      	orrs	r3, r2
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	3201      	adds	r2, #1
 8007352:	7812      	ldrb	r2, [r2, #0]
 8007354:	0212      	lsls	r2, r2, #8
 8007356:	4313      	orrs	r3, r2
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	7812      	ldrb	r2, [r2, #0]
 800735c:	4313      	orrs	r3, r2
 800735e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4313      	orrs	r3, r2
 8007366:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	b2da      	uxtb	r2, r3
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	b29b      	uxth	r3, r3
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	b29a      	uxth	r2, r3
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	3301      	adds	r3, #1
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	0c1a      	lsrs	r2, r3, #16
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	3302      	adds	r3, #2
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	0e1a      	lsrs	r2, r3, #24
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	3303      	adds	r3, #3
 8007394:	b2d2      	uxtb	r2, r2
 8007396:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800739e:	2201      	movs	r2, #1
 80073a0:	711a      	strb	r2, [r3, #4]
			break;
 80073a2:	e009      	b.n	80073b8 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80073a4:	2302      	movs	r3, #2
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e006      	b.n	80073b8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073aa:	bf00      	nop
 80073ac:	e004      	b.n	80073b8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073b6:	bf00      	nop
		}
	}

	return res;
 80073b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b084      	sub	sp, #16
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d906      	bls.n	80073e0 <remove_chain+0x1e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d302      	bcc.n	80073e6 <remove_chain+0x24>
		res = FR_INT_ERR;
 80073e0:	2302      	movs	r3, #2
 80073e2:	73fb      	strb	r3, [r7, #15]
 80073e4:	e049      	b.n	800747a <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80073ea:	e03b      	b.n	8007464 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff fd98 	bl	8006f24 <get_fat>
 80073f4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d03b      	beq.n	8007474 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d102      	bne.n	8007408 <remove_chain+0x46>
 8007402:	2302      	movs	r3, #2
 8007404:	73fb      	strb	r3, [r7, #15]
 8007406:	e038      	b.n	800747a <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d102      	bne.n	8007416 <remove_chain+0x54>
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e031      	b.n	800747a <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007416:	2200      	movs	r2, #0
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fe7e 	bl	800711c <put_fat>
 8007420:	4603      	mov	r3, r0
 8007422:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d126      	bne.n	8007478 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d013      	beq.n	8007460 <remove_chain+0x9e>
				fs->free_clust++;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	3301      	adds	r3, #1
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007448:	6153      	str	r3, [r2, #20]
				fs->fsi_flag |= 1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	b2da      	uxtb	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800745e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d3bc      	bcc.n	80073ec <remove_chain+0x2a>
 8007472:	e002      	b.n	800747a <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8007474:	bf00      	nop
 8007476:	e000      	b.n	800747a <remove_chain+0xb8>
			if (res != FR_OK) break;
 8007478:	bf00      	nop
		}
	}

	return res;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d111      	bne.n	80074b8 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d006      	beq.n	80074b2 <create_chain+0x2e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d31d      	bcc.n	80074ee <create_chain+0x6a>
 80074b2:	2301      	movs	r3, #1
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	e01a      	b.n	80074ee <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff fd32 	bl	8006f24 <get_fat>
 80074c0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d801      	bhi.n	80074cc <create_chain+0x48>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e07f      	b.n	80075cc <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d101      	bne.n	80074d8 <create_chain+0x54>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	e079      	b.n	80075cc <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d201      	bcs.n	80074ea <create_chain+0x66>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	e070      	b.n	80075cc <create_chain+0x148>
		scl = clst;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	3301      	adds	r3, #1
 80074f6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	429a      	cmp	r2, r3
 8007504:	d307      	bcc.n	8007516 <create_chain+0x92>
			ncl = 2;
 8007506:	2302      	movs	r3, #2
 8007508:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	429a      	cmp	r2, r3
 8007510:	d901      	bls.n	8007516 <create_chain+0x92>
 8007512:	2300      	movs	r3, #0
 8007514:	e05a      	b.n	80075cc <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007516:	6979      	ldr	r1, [r7, #20]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff fd03 	bl	8006f24 <get_fat>
 800751e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00e      	beq.n	8007544 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d002      	beq.n	8007534 <create_chain+0xb0>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <create_chain+0xb4>
			return cs;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	e049      	b.n	80075cc <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	429a      	cmp	r2, r3
 800753e:	d1d8      	bne.n	80074f2 <create_chain+0x6e>
 8007540:	2300      	movs	r3, #0
 8007542:	e043      	b.n	80075cc <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8007544:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007546:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800754a:	6979      	ldr	r1, [r7, #20]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fde5 	bl	800711c <put_fat>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d109      	bne.n	8007570 <create_chain+0xec>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d006      	beq.n	8007570 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff fdd8 	bl	800711c <put_fat>
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d121      	bne.n	80075ba <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757c:	461a      	mov	r2, r3
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	6113      	str	r3, [r2, #16]
		if (fs->free_clust != 0xFFFFFFFF) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d01c      	beq.n	80075ca <create_chain+0x146>
			fs->free_clust--;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	3b01      	subs	r3, #1
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075a0:	6153      	str	r3, [r2, #20]
			fs->fsi_flag |= 1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a8:	795b      	ldrb	r3, [r3, #5]
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b6:	715a      	strb	r2, [r3, #5]
 80075b8:	e007      	b.n	80075ca <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d102      	bne.n	80075c6 <create_chain+0x142>
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	e000      	b.n	80075c8 <create_chain+0x144>
 80075c6:	2301      	movs	r3, #1
 80075c8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80075ca:	697b      	ldr	r3, [r7, #20]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	3304      	adds	r3, #4
 80075e8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f6:	895b      	ldrh	r3, [r3, #10]
 80075f8:	461a      	mov	r2, r3
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800760c:	7892      	ldrb	r2, [r2, #2]
 800760e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007612:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1d1a      	adds	r2, r3, #4
 8007618:	613a      	str	r2, [r7, #16]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <clmt_clust+0x54>
 8007624:	2300      	movs	r3, #0
 8007626:	e010      	b.n	800764a <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	429a      	cmp	r2, r3
 800762e:	d307      	bcc.n	8007640 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	3304      	adds	r3, #4
 800763c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800763e:	e7e9      	b.n	8007614 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8007640:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	4413      	add	r3, r2
}
 800764a:	4618      	mov	r0, r3
 800764c:	371c      	adds	r7, #28
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b086      	sub	sp, #24
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800766a:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d009      	beq.n	8007690 <dir_sdi+0x3a>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	429a      	cmp	r2, r3
 800768e:	d301      	bcc.n	8007694 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8007690:	2302      	movs	r3, #2
 8007692:	e0aa      	b.n	80077ea <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d110      	bne.n	80076bc <dir_sdi+0x66>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d107      	bne.n	80076bc <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d115      	bne.n	80076ee <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ce:	891b      	ldrh	r3, [r3, #8]
 80076d0:	461a      	mov	r2, r3
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d301      	bcc.n	80076dc <dir_sdi+0x86>
			return FR_INT_ERR;
 80076d8:	2302      	movs	r3, #2
 80076da:	e086      	b.n	80077ea <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	613b      	str	r3, [r7, #16]
 80076ec:	e043      	b.n	8007776 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076fa:	895b      	ldrh	r3, [r3, #10]
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	b29b      	uxth	r3, r3
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800770e:	789b      	ldrb	r3, [r3, #2]
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007716:	e021      	b.n	800775c <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6979      	ldr	r1, [r7, #20]
 8007722:	4618      	mov	r0, r3
 8007724:	f7ff fbfe 	bl	8006f24 <get_fat>
 8007728:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d101      	bne.n	8007736 <dir_sdi+0xe0>
 8007732:	2301      	movs	r3, #1
 8007734:	e059      	b.n	80077ea <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d909      	bls.n	8007750 <dir_sdi+0xfa>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	429a      	cmp	r2, r3
 800774e:	d301      	bcc.n	8007754 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8007750:	2302      	movs	r3, #2
 8007752:	e04a      	b.n	80077ea <dir_sdi+0x194>
			idx -= ic;
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	429a      	cmp	r2, r3
 8007762:	d2d9      	bcs.n	8007718 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fbb3 	bl	8006eda <clust2sect>
 8007774:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777c:	461a      	mov	r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <dir_sdi+0x136>
 8007788:	2302      	movs	r3, #2
 800778a:	e02e      	b.n	80077ea <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007798:	895b      	ldrh	r3, [r3, #10]
 800779a:	095b      	lsrs	r3, r3, #5
 800779c:	b29b      	uxth	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	4413      	add	r3, r2
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077b0:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c8:	895b      	ldrh	r3, [r3, #10]
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80077d6:	fb01 f202 	mul.w	r2, r1, r2
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	015b      	lsls	r3, r3, #5
 80077de:	4403      	add	r3, r0
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077e6:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80077f2:	b590      	push	{r4, r7, lr}
 80077f4:	b087      	sub	sp, #28
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007802:	88db      	ldrh	r3, [r3, #6]
 8007804:	3301      	adds	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <dir_next+0x2a>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <dir_next+0x2e>
		return FR_NO_FILE;
 800781c:	2304      	movs	r3, #4
 800781e:	e12e      	b.n	8007a7e <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782c:	895b      	ldrh	r3, [r3, #10]
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	b29b      	uxth	r3, r3
 8007832:	461a      	mov	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	fbb3 f1f2 	udiv	r1, r3, r2
 800783a:	fb01 f202 	mul.w	r2, r1, r2
 800783e:	1a9b      	subs	r3, r3, r2
 8007840:	2b00      	cmp	r3, #0
 8007842:	f040 80fa 	bne.w	8007a3a <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	3301      	adds	r3, #1
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007856:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10d      	bne.n	8007880 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007870:	891b      	ldrh	r3, [r3, #8]
 8007872:	461a      	mov	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4293      	cmp	r3, r2
 8007878:	f0c0 80df 	bcc.w	8007a3a <dir_next+0x248>
				return FR_NO_FILE;
 800787c:	2304      	movs	r3, #4
 800787e:	e0fe      	b.n	8007a7e <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788c:	895b      	ldrh	r3, [r3, #10]
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	b29b      	uxth	r3, r3
 8007892:	461a      	mov	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	fbb3 f3f2 	udiv	r3, r3, r2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80078a6:	7892      	ldrb	r2, [r2, #2]
 80078a8:	3a01      	subs	r2, #1
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 80c4 	bne.w	8007a3a <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f7ff fb2d 	bl	8006f24 <get_fat>
 80078ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d801      	bhi.n	80078d6 <dir_next+0xe4>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e0d3      	b.n	8007a7e <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d101      	bne.n	80078e2 <dir_next+0xf0>
 80078de:	2301      	movs	r3, #1
 80078e0:	e0cd      	b.n	8007a7e <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	f0c0 808e 	bcc.w	8007a14 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <dir_next+0x110>
 80078fe:	2304      	movs	r3, #4
 8007900:	e0bd      	b.n	8007a7e <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7ff fdb5 	bl	8007484 <create_chain>
 800791a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <dir_next+0x134>
 8007922:	2307      	movs	r3, #7
 8007924:	e0ab      	b.n	8007a7e <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <dir_next+0x13e>
 800792c:	2302      	movs	r3, #2
 800792e:	e0a6      	b.n	8007a7e <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d101      	bne.n	800793c <dir_next+0x14a>
 8007938:	2301      	movs	r3, #1
 800793a:	e0a0      	b.n	8007a7e <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff f985 	bl	8006c54 <sync_window>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <dir_next+0x162>
 8007950:	2301      	movs	r3, #1
 8007952:	e094      	b.n	8007a7e <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800796a:	895b      	ldrh	r3, [r3, #10]
 800796c:	461a      	mov	r2, r3
 800796e:	2100      	movs	r1, #0
 8007970:	f7fe ff23 	bl	80067ba <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007982:	681c      	ldr	r4, [r3, #0]
 8007984:	6979      	ldr	r1, [r7, #20]
 8007986:	4610      	mov	r0, r2
 8007988:	f7ff faa7 	bl	8006eda <clust2sect>
 800798c:	4603      	mov	r3, r0
 800798e:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8007992:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007994:	2300      	movs	r3, #0
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	e021      	b.n	80079de <dir_next+0x1ec>
						dp->fs->wflag = 1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a6:	2201      	movs	r2, #1
 80079a8:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff f94e 	bl	8006c54 <sync_window>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <dir_next+0x1d0>
 80079be:	2301      	movs	r3, #1
 80079c0:	e05d      	b.n	8007a7e <dir_next+0x28c>
						dp->fs->winsect++;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80079ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80079d0:	3201      	adds	r2, #1
 80079d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	3301      	adds	r3, #1
 80079dc:	613b      	str	r3, [r7, #16]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ea:	789b      	ldrb	r3, [r3, #2]
 80079ec:	461a      	mov	r2, r3
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d3d2      	bcc.n	800799a <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1acb      	subs	r3, r1, r3
 8007a0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a12:	6313      	str	r3, [r2, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6979      	ldr	r1, [r7, #20]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff fa55 	bl	8006eda <clust2sect>
 8007a30:	4602      	mov	r2, r0
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a38:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a44:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a5c:	895b      	ldrh	r3, [r3, #10]
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	461a      	mov	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a6a:	fb01 f202 	mul.w	r2, r1, r2
 8007a6e:	1a9b      	subs	r3, r3, r2
 8007a70:	015b      	lsls	r3, r3, #5
 8007a72:	4403      	add	r3, r0
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007a7a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd90      	pop	{r4, r7, pc}

08007a86 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007a90:	2100      	movs	r1, #0
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff fddf 	bl	8007656 <dir_sdi>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d135      	bne.n	8007b0e <dir_alloc+0x88>
		n = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7ff f91d 	bl	8006cf8 <move_window>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d121      	bne.n	8007b0c <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2be5      	cmp	r3, #229	; 0xe5
 8007ad4:	d006      	beq.n	8007ae4 <dir_alloc+0x5e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d107      	bne.n	8007af4 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60bb      	str	r3, [r7, #8]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d102      	bne.n	8007af8 <dir_alloc+0x72>
 8007af2:	e00c      	b.n	8007b0e <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007af4:	2300      	movs	r3, #0
 8007af6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007af8:	2101      	movs	r1, #1
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7ff fe79 	bl	80077f2 <dir_next>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0cd      	beq.n	8007aa6 <dir_alloc+0x20>
 8007b0a:	e000      	b.n	8007b0e <dir_alloc+0x88>
			if (res != FR_OK) break;
 8007b0c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d101      	bne.n	8007b18 <dir_alloc+0x92>
 8007b14:	2307      	movs	r3, #7
 8007b16:	73fb      	strb	r3, [r7, #15]
	return res;
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	331b      	adds	r3, #27
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	b21a      	sxth	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	331a      	adds	r3, #26
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	b21b      	sxth	r3, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b21b      	sxth	r3, r3
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d10f      	bne.n	8007b72 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	3315      	adds	r3, #21
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	b21a      	sxth	r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	3314      	adds	r3, #20
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	b21b      	sxth	r3, r3
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b21b      	sxth	r3, r3
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	041b      	lsls	r3, r3, #16
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]

	return cl;
 8007b72:	68fb      	ldr	r3, [r7, #12]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	331a      	adds	r3, #26
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	0a1b      	lsrs	r3, r3, #8
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	331b      	adds	r3, #27
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	0c1a      	lsrs	r2, r3, #16
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3314      	adds	r3, #20
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	0c1b      	lsrs	r3, r3, #16
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	0a1b      	lsrs	r3, r3, #8
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3315      	adds	r3, #21
 8007bbe:	b2d2      	uxtb	r2, r2
 8007bc0:	701a      	strb	r2, [r3, #0]
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff fd3c 	bl	8007656 <dir_sdi>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <dir_find+0x1e>
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	e03f      	b.n	8007c6c <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f7ff f87a 	bl	8006cf8 <move_window>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d12a      	bne.n	8007c64 <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d102      	bne.n	8007c2a <dir_find+0x5c>
 8007c24:	2304      	movs	r3, #4
 8007c26:	75fb      	strb	r3, [r7, #23]
 8007c28:	e01f      	b.n	8007c6a <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	330b      	adds	r3, #11
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f003 0308 	and.w	r3, r3, #8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10b      	bne.n	8007c50 <dir_find+0x82>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	220b      	movs	r2, #11
 8007c42:	4619      	mov	r1, r3
 8007c44:	6938      	ldr	r0, [r7, #16]
 8007c46:	f7fe fdd3 	bl	80067f0 <mem_cmp>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007c50:	2100      	movs	r1, #0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff fdcd 	bl	80077f2 <dir_next>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0c4      	beq.n	8007bec <dir_find+0x1e>
 8007c62:	e002      	b.n	8007c6a <dir_find+0x9c>
		if (res != FR_OK) break;
 8007c64:	bf00      	nop
 8007c66:	e000      	b.n	8007c6a <dir_find+0x9c>
			break;
 8007c68:	bf00      	nop

	return res;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff ff01 	bl	8007a86 <dir_alloc>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d12d      	bne.n	8007cea <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f7ff f829 	bl	8006cf8 <move_window>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d11c      	bne.n	8007cea <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	2100      	movs	r1, #0
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe fd7c 	bl	80067ba <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc8:	6958      	ldr	r0, [r3, #20]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	220b      	movs	r2, #11
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	f7fe fd51 	bl	800677c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	3309      	adds	r3, #9
 8007d02:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d05b      	beq.n	8007dc8 <get_fileinfo+0xd4>
		dir = dp->dir;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	60bb      	str	r3, [r7, #8]
		i = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8007d1e:	e01c      	b.n	8007d5a <get_fileinfo+0x66>
			c = (TCHAR)dir[i++];
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	617a      	str	r2, [r7, #20]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	4413      	add	r3, r2
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d100      	bne.n	8007d36 <get_fileinfo+0x42>
 8007d34:	e011      	b.n	8007d5a <get_fileinfo+0x66>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b05      	cmp	r3, #5
 8007d3a:	d101      	bne.n	8007d40 <get_fileinfo+0x4c>
 8007d3c:	23e5      	movs	r3, #229	; 0xe5
 8007d3e:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b09      	cmp	r3, #9
 8007d44:	d104      	bne.n	8007d50 <get_fileinfo+0x5c>
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	613a      	str	r2, [r7, #16]
 8007d4c:	222e      	movs	r2, #46	; 0x2e
 8007d4e:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	613a      	str	r2, [r7, #16]
 8007d56:	7bfa      	ldrb	r2, [r7, #15]
 8007d58:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b0a      	cmp	r3, #10
 8007d5e:	d9df      	bls.n	8007d20 <get_fileinfo+0x2c>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	7ada      	ldrb	r2, [r3, #11]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	331f      	adds	r3, #31
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	061a      	lsls	r2, r3, #24
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	331e      	adds	r3, #30
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	041b      	lsls	r3, r3, #16
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	321d      	adds	r2, #29
 8007d7e:	7812      	ldrb	r2, [r2, #0]
 8007d80:	0212      	lsls	r2, r2, #8
 8007d82:	4313      	orrs	r3, r2
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	321c      	adds	r2, #28
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3319      	adds	r3, #25
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	b21a      	sxth	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	3318      	adds	r3, #24
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	b21b      	sxth	r3, r3
 8007da2:	4313      	orrs	r3, r2
 8007da4:	b21b      	sxth	r3, r3
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	3317      	adds	r3, #23
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	b21a      	sxth	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	3316      	adds	r3, #22
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	b21b      	sxth	r3, r3
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	b21b      	sxth	r3, r3
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8007dce:	bf00      	nop
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
	...

08007ddc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e002      	b.n	8007df4 <create_name+0x18>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b2f      	cmp	r3, #47	; 0x2f
 8007dfa:	d0f8      	beq.n	8007dee <create_name+0x12>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b5c      	cmp	r3, #92	; 0x5c
 8007e02:	d0f4      	beq.n	8007dee <create_name+0x12>
	sfn = dp->fn;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007e0e:	220b      	movs	r2, #11
 8007e10:	2120      	movs	r1, #32
 8007e12:	68b8      	ldr	r0, [r7, #8]
 8007e14:	f7fe fcd1 	bl	80067ba <mem_set>
	si = i = b = 0; ni = 8;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	613b      	str	r3, [r7, #16]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	2308      	movs	r3, #8
 8007e26:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	617a      	str	r2, [r7, #20]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007e36:	7fbb      	ldrb	r3, [r7, #30]
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	d953      	bls.n	8007ee4 <create_name+0x108>
 8007e3c:	7fbb      	ldrb	r3, [r7, #30]
 8007e3e:	2b2f      	cmp	r3, #47	; 0x2f
 8007e40:	d050      	beq.n	8007ee4 <create_name+0x108>
 8007e42:	7fbb      	ldrb	r3, [r7, #30]
 8007e44:	2b5c      	cmp	r3, #92	; 0x5c
 8007e46:	d04d      	beq.n	8007ee4 <create_name+0x108>
		if (c == '.' || i >= ni) {
 8007e48:	7fbb      	ldrb	r3, [r7, #30]
 8007e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007e4c:	d003      	beq.n	8007e56 <create_name+0x7a>
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d30f      	bcc.n	8007e76 <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d102      	bne.n	8007e62 <create_name+0x86>
 8007e5c:	7fbb      	ldrb	r3, [r7, #30]
 8007e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e60:	d001      	beq.n	8007e66 <create_name+0x8a>
 8007e62:	2306      	movs	r3, #6
 8007e64:	e073      	b.n	8007f4e <create_name+0x172>
			i = 8; ni = 11;
 8007e66:	2308      	movs	r3, #8
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	230b      	movs	r3, #11
 8007e6c:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8007e6e:	7ffb      	ldrb	r3, [r7, #31]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	77fb      	strb	r3, [r7, #31]
 8007e74:	e035      	b.n	8007ee2 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007e76:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	da08      	bge.n	8007e90 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 8007e7e:	7ffb      	ldrb	r3, [r7, #31]
 8007e80:	f043 0303 	orr.w	r3, r3, #3
 8007e84:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007e86:	7fbb      	ldrb	r3, [r7, #30]
 8007e88:	3b80      	subs	r3, #128	; 0x80
 8007e8a:	4a33      	ldr	r2, [pc, #204]	; (8007f58 <create_name+0x17c>)
 8007e8c:	5cd3      	ldrb	r3, [r2, r3]
 8007e8e:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007e90:	7fbb      	ldrb	r3, [r7, #30]
 8007e92:	4619      	mov	r1, r3
 8007e94:	4831      	ldr	r0, [pc, #196]	; (8007f5c <create_name+0x180>)
 8007e96:	f7fe fcd2 	bl	800683e <chk_chr>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <create_name+0xc8>
				return FR_INVALID_NAME;
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	e054      	b.n	8007f4e <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007ea4:	7fbb      	ldrb	r3, [r7, #30]
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	d907      	bls.n	8007eba <create_name+0xde>
 8007eaa:	7fbb      	ldrb	r3, [r7, #30]
 8007eac:	2b5a      	cmp	r3, #90	; 0x5a
 8007eae:	d804      	bhi.n	8007eba <create_name+0xde>
				b |= 2;
 8007eb0:	7ffb      	ldrb	r3, [r7, #31]
 8007eb2:	f043 0302 	orr.w	r3, r3, #2
 8007eb6:	77fb      	strb	r3, [r7, #31]
 8007eb8:	e00c      	b.n	8007ed4 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8007eba:	7fbb      	ldrb	r3, [r7, #30]
 8007ebc:	2b60      	cmp	r3, #96	; 0x60
 8007ebe:	d909      	bls.n	8007ed4 <create_name+0xf8>
 8007ec0:	7fbb      	ldrb	r3, [r7, #30]
 8007ec2:	2b7a      	cmp	r3, #122	; 0x7a
 8007ec4:	d806      	bhi.n	8007ed4 <create_name+0xf8>
					b |= 1; c -= 0x20;
 8007ec6:	7ffb      	ldrb	r3, [r7, #31]
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	77fb      	strb	r3, [r7, #31]
 8007ece:	7fbb      	ldrb	r3, [r7, #30]
 8007ed0:	3b20      	subs	r3, #32
 8007ed2:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	613a      	str	r2, [r7, #16]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	7fba      	ldrb	r2, [r7, #30]
 8007ee0:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007ee2:	e7a1      	b.n	8007e28 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	441a      	add	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007eee:	7fbb      	ldrb	r3, [r7, #30]
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d801      	bhi.n	8007ef8 <create_name+0x11c>
 8007ef4:	2304      	movs	r3, #4
 8007ef6:	e000      	b.n	8007efa <create_name+0x11e>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <create_name+0x12a>
 8007f02:	2306      	movs	r3, #6
 8007f04:	e023      	b.n	8007f4e <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2be5      	cmp	r3, #229	; 0xe5
 8007f0c:	d102      	bne.n	8007f14 <create_name+0x138>
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2205      	movs	r2, #5
 8007f12:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d102      	bne.n	8007f20 <create_name+0x144>
 8007f1a:	7ffb      	ldrb	r3, [r7, #31]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007f20:	7ffb      	ldrb	r3, [r7, #31]
 8007f22:	f003 0303 	and.w	r3, r3, #3
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d103      	bne.n	8007f32 <create_name+0x156>
 8007f2a:	7fbb      	ldrb	r3, [r7, #30]
 8007f2c:	f043 0310 	orr.w	r3, r3, #16
 8007f30:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007f32:	7ffb      	ldrb	r3, [r7, #31]
 8007f34:	f003 030c 	and.w	r3, r3, #12
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	d103      	bne.n	8007f44 <create_name+0x168>
 8007f3c:	7fbb      	ldrb	r3, [r7, #30]
 8007f3e:	f043 0308 	orr.w	r3, r3, #8
 8007f42:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	330b      	adds	r3, #11
 8007f48:	7fba      	ldrb	r2, [r7, #30]
 8007f4a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007f4c:	2300      	movs	r3, #0
#endif
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	0800dfac 	.word	0x0800dfac
 8007f5c:	0800df28 	.word	0x0800df28

08007f60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b2f      	cmp	r3, #47	; 0x2f
 8007f70:	d003      	beq.n	8007f7a <follow_path+0x1a>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b5c      	cmp	r3, #92	; 0x5c
 8007f78:	d102      	bne.n	8007f80 <follow_path+0x20>
		path++;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f86:	461a      	mov	r2, r3
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b1f      	cmp	r3, #31
 8007f92:	d80c      	bhi.n	8007fae <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fb5d 	bl	8007656 <dir_sdi>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6153      	str	r3, [r2, #20]
 8007fac:	e049      	b.n	8008042 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fae:	463b      	mov	r3, r7
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff ff12 	bl	8007ddc <create_name>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d13a      	bne.n	8008038 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7ff fe03 	bl	8007bce <dir_find>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	7adb      	ldrb	r3, [r3, #11]
 8007fd6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d12b      	bne.n	800803c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d126      	bne.n	800803c <follow_path+0xdc>
 8007fee:	2305      	movs	r3, #5
 8007ff0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007ff2:	e023      	b.n	800803c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d120      	bne.n	8008040 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	330b      	adds	r3, #11
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8008016:	2305      	movs	r3, #5
 8008018:	73fb      	strb	r3, [r7, #15]
 800801a:	e012      	b.n	8008042 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68b9      	ldr	r1, [r7, #8]
 8008026:	4618      	mov	r0, r3
 8008028:	f7ff fd7b 	bl	8007b22 <ld_clust>
 800802c:	4602      	mov	r2, r0
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008034:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008036:	e7ba      	b.n	8007fae <follow_path+0x4e>
			if (res != FR_OK) break;
 8008038:	bf00      	nop
 800803a:	e002      	b.n	8008042 <follow_path+0xe2>
				break;
 800803c:	bf00      	nop
 800803e:	e000      	b.n	8008042 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008040:	bf00      	nop
		}
	}

	return res;
 8008042:	7bfb      	ldrb	r3, [r7, #15]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008054:	f04f 33ff 	mov.w	r3, #4294967295
 8008058:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d031      	beq.n	80080c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	e002      	b.n	8008070 <get_ldnumber+0x24>
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	3301      	adds	r3, #1
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b20      	cmp	r3, #32
 8008076:	d903      	bls.n	8008080 <get_ldnumber+0x34>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b3a      	cmp	r3, #58	; 0x3a
 800807e:	d1f4      	bne.n	800806a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b3a      	cmp	r3, #58	; 0x3a
 8008086:	d11c      	bne.n	80080c2 <get_ldnumber+0x76>
			tp = *path;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	60fa      	str	r2, [r7, #12]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	3b30      	subs	r3, #48	; 0x30
 8008098:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b09      	cmp	r3, #9
 800809e:	d80e      	bhi.n	80080be <get_ldnumber+0x72>
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d10a      	bne.n	80080be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d107      	bne.n	80080be <get_ldnumber+0x72>
					vol = (int)i;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	3301      	adds	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	e002      	b.n	80080c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80080c6:	693b      	ldr	r3, [r7, #16]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080e4:	2200      	movs	r2, #0
 80080e6:	711a      	strb	r2, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ee:	461a      	mov	r2, r3
 80080f0:	f04f 33ff 	mov.w	r3, #4294967295
 80080f4:	6313      	str	r3, [r2, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f7fe fdfd 	bl	8006cf8 <move_window>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <check_fs+0x34>
		return 3;
 8008104:	2303      	movs	r3, #3
 8008106:	e04a      	b.n	800819e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800810e:	3301      	adds	r3, #1
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	021b      	lsls	r3, r3, #8
 8008114:	b21a      	sxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800811c:	b21b      	sxth	r3, r3
 800811e:	4313      	orrs	r3, r2
 8008120:	b21b      	sxth	r3, r3
 8008122:	4a21      	ldr	r2, [pc, #132]	; (80081a8 <check_fs+0xd4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d001      	beq.n	800812c <check_fs+0x58>
		return 2;
 8008128:	2302      	movs	r3, #2
 800812a:	e038      	b.n	800819e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3336      	adds	r3, #54	; 0x36
 8008130:	3303      	adds	r3, #3
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	061a      	lsls	r2, r3, #24
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3336      	adds	r3, #54	; 0x36
 800813a:	3302      	adds	r3, #2
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	4313      	orrs	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	3236      	adds	r2, #54	; 0x36
 8008146:	3201      	adds	r2, #1
 8008148:	7812      	ldrb	r2, [r2, #0]
 800814a:	0212      	lsls	r2, r2, #8
 800814c:	4313      	orrs	r3, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008154:	4313      	orrs	r3, r2
 8008156:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800815a:	4a14      	ldr	r2, [pc, #80]	; (80081ac <check_fs+0xd8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d101      	bne.n	8008164 <check_fs+0x90>
		return 0;
 8008160:	2300      	movs	r3, #0
 8008162:	e01c      	b.n	800819e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3352      	adds	r3, #82	; 0x52
 8008168:	3303      	adds	r3, #3
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	061a      	lsls	r2, r3, #24
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3352      	adds	r3, #82	; 0x52
 8008172:	3302      	adds	r3, #2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	041b      	lsls	r3, r3, #16
 8008178:	4313      	orrs	r3, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	3252      	adds	r2, #82	; 0x52
 800817e:	3201      	adds	r2, #1
 8008180:	7812      	ldrb	r2, [r2, #0]
 8008182:	0212      	lsls	r2, r2, #8
 8008184:	4313      	orrs	r3, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800818c:	4313      	orrs	r3, r2
 800818e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008192:	4a06      	ldr	r2, [pc, #24]	; (80081ac <check_fs+0xd8>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d101      	bne.n	800819c <check_fs+0xc8>
		return 0;
 8008198:	2300      	movs	r3, #0
 800819a:	e000      	b.n	800819e <check_fs+0xca>

	return 1;
 800819c:	2301      	movs	r3, #1
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	ffffaa55 	.word	0xffffaa55
 80081ac:	00544146 	.word	0x00544146

080081b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b096      	sub	sp, #88	; 0x58
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4613      	mov	r3, r2
 80081bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80081c4:	68b8      	ldr	r0, [r7, #8]
 80081c6:	f7ff ff41 	bl	800804c <get_ldnumber>
 80081ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	da01      	bge.n	80081d6 <find_volume+0x26>
 80081d2:	230b      	movs	r3, #11
 80081d4:	e319      	b.n	800880a <find_volume+0x65a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80081d6:	4a9c      	ldr	r2, [pc, #624]	; (8008448 <find_volume+0x298>)
 80081d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <find_volume+0x3a>
 80081e6:	230c      	movs	r3, #12
 80081e8:	e30f      	b.n	800880a <find_volume+0x65a>

	ENTER_FF(fs);						/* Lock the volume */
 80081ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ec:	f7fe fb42 	bl	8006874 <lock_fs>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <find_volume+0x4a>
 80081f6:	230f      	movs	r3, #15
 80081f8:	e307      	b.n	800880a <find_volume+0x65a>
	*rfs = fs;							/* Return pointer to the file system object */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081fe:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01c      	beq.n	8008246 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe fa13 	bl	8006640 <disk_status>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008220:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10c      	bne.n	8008246 <find_volume+0x96>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <find_volume+0x92>
 8008232:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800823e:	230a      	movs	r3, #10
 8008240:	e2e3      	b.n	800880a <find_volume+0x65a>
			return FR_OK;				/* The file system object is valid */
 8008242:	2300      	movs	r3, #0
 8008244:	e2e1      	b.n	800880a <find_volume+0x65a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800824c:	2200      	movs	r2, #0
 800824e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008252:	b2da      	uxtb	r2, r3
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe fa05 	bl	8006674 <disk_initialize>
 800826a:	4603      	mov	r3, r0
 800826c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008270:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <find_volume+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800827c:	2303      	movs	r3, #3
 800827e:	e2c4      	b.n	800880a <find_volume+0x65a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <find_volume+0xe6>
 8008286:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 8008292:	230a      	movs	r3, #10
 8008294:	e2b9      	b.n	800880a <find_volume+0x65a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829c:	7858      	ldrb	r0, [r3, #1]
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a4:	330a      	adds	r3, #10
 80082a6:	461a      	mov	r2, r3
 80082a8:	2102      	movs	r1, #2
 80082aa:	f7fe fa49 	bl	8006740 <disk_ioctl>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10d      	bne.n	80082d0 <find_volume+0x120>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80082b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ba:	895b      	ldrh	r3, [r3, #10]
 80082bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c0:	d306      	bcc.n	80082d0 <find_volume+0x120>
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c8:	895b      	ldrh	r3, [r3, #10]
 80082ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ce:	d901      	bls.n	80082d4 <find_volume+0x124>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e29a      	b.n	800880a <find_volume+0x65a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80082d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082dc:	f7ff fefa 	bl	80080d4 <check_fs>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80082e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d153      	bne.n	8008396 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80082ee:	2300      	movs	r3, #0
 80082f0:	643b      	str	r3, [r7, #64]	; 0x40
 80082f2:	e028      	b.n	8008346 <find_volume+0x196>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80082f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80082fe:	4413      	add	r3, r2
 8008300:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	3304      	adds	r3, #4
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d012      	beq.n	8008332 <find_volume+0x182>
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	330b      	adds	r3, #11
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	061a      	lsls	r2, r3, #24
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	330a      	adds	r3, #10
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	4313      	orrs	r3, r2
 800831e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008320:	3209      	adds	r2, #9
 8008322:	7812      	ldrb	r2, [r2, #0]
 8008324:	0212      	lsls	r2, r2, #8
 8008326:	4313      	orrs	r3, r2
 8008328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832a:	3208      	adds	r2, #8
 800832c:	7812      	ldrb	r2, [r2, #0]
 800832e:	431a      	orrs	r2, r3
 8008330:	e000      	b.n	8008334 <find_volume+0x184>
 8008332:	2200      	movs	r2, #0
 8008334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	3358      	adds	r3, #88	; 0x58
 800833a:	443b      	add	r3, r7
 800833c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008342:	3301      	adds	r3, #1
 8008344:	643b      	str	r3, [r7, #64]	; 0x40
 8008346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008348:	2b03      	cmp	r3, #3
 800834a:	d9d3      	bls.n	80082f4 <find_volume+0x144>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800834c:	2300      	movs	r3, #0
 800834e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <find_volume+0x1ac>
 8008356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008358:	3b01      	subs	r3, #1
 800835a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800835c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	3358      	adds	r3, #88	; 0x58
 8008362:	443b      	add	r3, r7
 8008364:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008368:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800836a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <find_volume+0x1cc>
 8008370:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008372:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008374:	f7ff feae 	bl	80080d4 <check_fs>
 8008378:	4603      	mov	r3, r0
 800837a:	e000      	b.n	800837e <find_volume+0x1ce>
 800837c:	2302      	movs	r3, #2
 800837e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008386:	2b00      	cmp	r3, #0
 8008388:	d005      	beq.n	8008396 <find_volume+0x1e6>
 800838a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800838c:	3301      	adds	r3, #1
 800838e:	643b      	str	r3, [r7, #64]	; 0x40
 8008390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008392:	2b03      	cmp	r3, #3
 8008394:	d9e2      	bls.n	800835c <find_volume+0x1ac>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800839a:	2b03      	cmp	r3, #3
 800839c:	d101      	bne.n	80083a2 <find_volume+0x1f2>
 800839e:	2301      	movs	r3, #1
 80083a0:	e233      	b.n	800880a <find_volume+0x65a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80083a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <find_volume+0x1fe>
 80083aa:	230d      	movs	r3, #13
 80083ac:	e22d      	b.n	800880a <find_volume+0x65a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	7b1b      	ldrb	r3, [r3, #12]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	b21a      	sxth	r2, r3
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	7adb      	ldrb	r3, [r3, #11]
 80083ba:	b21b      	sxth	r3, r3
 80083bc:	4313      	orrs	r3, r2
 80083be:	b21a      	sxth	r2, r3
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c6:	895b      	ldrh	r3, [r3, #10]
 80083c8:	b21b      	sxth	r3, r3
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d001      	beq.n	80083d2 <find_volume+0x222>
		return FR_NO_FILESYSTEM;
 80083ce:	230d      	movs	r3, #13
 80083d0:	e21b      	b.n	800880a <find_volume+0x65a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	7ddb      	ldrb	r3, [r3, #23]
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	b21a      	sxth	r2, r3
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	7d9b      	ldrb	r3, [r3, #22]
 80083de:	b21b      	sxth	r3, r3
 80083e0:	4313      	orrs	r3, r2
 80083e2:	b21b      	sxth	r3, r3
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80083e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d112      	bne.n	8008414 <find_volume+0x264>
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80083f4:	061a      	lsls	r2, r3, #24
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80083fc:	041b      	lsls	r3, r3, #16
 80083fe:	4313      	orrs	r3, r2
 8008400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008402:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008406:	0212      	lsls	r2, r2, #8
 8008408:	4313      	orrs	r3, r2
 800840a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800840c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008410:	4313      	orrs	r3, r2
 8008412:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841a:	461a      	mov	r2, r3
 800841c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800841e:	61d3      	str	r3, [r2, #28]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	7c1a      	ldrb	r2, [r3, #16]
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800842a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008432:	78db      	ldrb	r3, [r3, #3]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d009      	beq.n	800844c <find_volume+0x29c>
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800843e:	78db      	ldrb	r3, [r3, #3]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d003      	beq.n	800844c <find_volume+0x29c>
		return FR_NO_FILESYSTEM;
 8008444:	230d      	movs	r3, #13
 8008446:	e1e0      	b.n	800880a <find_volume+0x65a>
 8008448:	200022f8 	.word	0x200022f8
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008452:	78db      	ldrb	r3, [r3, #3]
 8008454:	461a      	mov	r2, r3
 8008456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008458:	fb02 f303 	mul.w	r3, r2, r3
 800845c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	7b5a      	ldrb	r2, [r3, #13]
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008468:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008470:	789b      	ldrb	r3, [r3, #2]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00c      	beq.n	8008490 <find_volume+0x2e0>
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847c:	789b      	ldrb	r3, [r3, #2]
 800847e:	461a      	mov	r2, r3
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008486:	789b      	ldrb	r3, [r3, #2]
 8008488:	3b01      	subs	r3, #1
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <find_volume+0x2e4>
		return FR_NO_FILESYSTEM;
 8008490:	230d      	movs	r3, #13
 8008492:	e1ba      	b.n	800880a <find_volume+0x65a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	7c9b      	ldrb	r3, [r3, #18]
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	b21a      	sxth	r2, r3
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	7c5b      	ldrb	r3, [r3, #17]
 80084a0:	b21b      	sxth	r3, r3
 80084a2:	4313      	orrs	r3, r2
 80084a4:	b21b      	sxth	r3, r3
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ae:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b6:	891b      	ldrh	r3, [r3, #8]
 80084b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084be:	8952      	ldrh	r2, [r2, #10]
 80084c0:	0952      	lsrs	r2, r2, #5
 80084c2:	b292      	uxth	r2, r2
 80084c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80084c8:	fb01 f202 	mul.w	r2, r1, r2
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <find_volume+0x328>
		return FR_NO_FILESYSTEM;
 80084d4:	230d      	movs	r3, #13
 80084d6:	e198      	b.n	800880a <find_volume+0x65a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	7d1b      	ldrb	r3, [r3, #20]
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	b21a      	sxth	r2, r3
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	7cdb      	ldrb	r3, [r3, #19]
 80084e4:	b21b      	sxth	r3, r3
 80084e6:	4313      	orrs	r3, r2
 80084e8:	b21b      	sxth	r3, r3
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80084ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d112      	bne.n	800851a <find_volume+0x36a>
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80084fa:	061a      	lsls	r2, r3, #24
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008502:	041b      	lsls	r3, r3, #16
 8008504:	4313      	orrs	r3, r2
 8008506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008508:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800850c:	0212      	lsls	r2, r2, #8
 800850e:	4313      	orrs	r3, r2
 8008510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008512:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008516:	4313      	orrs	r3, r2
 8008518:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	7bdb      	ldrb	r3, [r3, #15]
 800851e:	021b      	lsls	r3, r3, #8
 8008520:	b21a      	sxth	r2, r3
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	7b9b      	ldrb	r3, [r3, #14]
 8008526:	b21b      	sxth	r3, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	b21b      	sxth	r3, r3
 800852c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800852e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <find_volume+0x388>
 8008534:	230d      	movs	r3, #13
 8008536:	e168      	b.n	800880a <find_volume+0x65a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008538:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800853a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853c:	4413      	add	r3, r2
 800853e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008544:	8911      	ldrh	r1, [r2, #8]
 8008546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008548:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800854c:	8952      	ldrh	r2, [r2, #10]
 800854e:	0952      	lsrs	r2, r2, #5
 8008550:	b292      	uxth	r2, r2
 8008552:	fbb1 f2f2 	udiv	r2, r1, r2
 8008556:	b292      	uxth	r2, r2
 8008558:	4413      	add	r3, r2
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800855c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	429a      	cmp	r2, r3
 8008562:	d201      	bcs.n	8008568 <find_volume+0x3b8>
 8008564:	230d      	movs	r3, #13
 8008566:	e150      	b.n	800880a <find_volume+0x65a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008570:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008574:	7892      	ldrb	r2, [r2, #2]
 8008576:	fbb3 f3f2 	udiv	r3, r3, r2
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <find_volume+0x3d6>
 8008582:	230d      	movs	r3, #13
 8008584:	e141      	b.n	800880a <find_volume+0x65a>
	fmt = FS_FAT12;
 8008586:	2301      	movs	r3, #1
 8008588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008592:	4293      	cmp	r3, r2
 8008594:	d902      	bls.n	800859c <find_volume+0x3ec>
 8008596:	2302      	movs	r3, #2
 8008598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d902      	bls.n	80085ac <find_volume+0x3fc>
 80085a6:	2303      	movs	r3, #3
 80085a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	3302      	adds	r3, #2
 80085b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085b6:	6193      	str	r3, [r2, #24]
	fs->volbase = bsect;								/* Volume start sector */
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085be:	461a      	mov	r2, r3
 80085c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c2:	6213      	str	r3, [r2, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80085c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c8:	4413      	add	r3, r2
 80085ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085d0:	6253      	str	r3, [r2, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 80085d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	4413      	add	r3, r2
 80085d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085de:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 80085e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d124      	bne.n	8008632 <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80085e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ee:	891b      	ldrh	r3, [r3, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <find_volume+0x448>
 80085f4:	230d      	movs	r3, #13
 80085f6:	e108      	b.n	800880a <find_volume+0x65a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80085f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80085fe:	061a      	lsls	r2, r3, #24
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008606:	041b      	lsls	r3, r3, #16
 8008608:	4313      	orrs	r3, r2
 800860a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800860c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008610:	0212      	lsls	r2, r2, #8
 8008612:	4313      	orrs	r3, r2
 8008614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008616:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800861a:	4313      	orrs	r3, r2
 800861c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800861e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008622:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	647b      	str	r3, [r7, #68]	; 0x44
 8008630:	e02b      	b.n	800868a <find_volume+0x4da>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008638:	891b      	ldrh	r3, [r3, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <find_volume+0x492>
 800863e:	230d      	movs	r3, #13
 8008640:	e0e3      	b.n	800880a <find_volume+0x65a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	4413      	add	r3, r2
 800864e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008654:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008656:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800865a:	2b02      	cmp	r3, #2
 800865c:	d105      	bne.n	800866a <find_volume+0x4ba>
 800865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	e00e      	b.n	8008688 <find_volume+0x4d8>
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008670:	699a      	ldr	r2, [r3, #24]
 8008672:	4613      	mov	r3, r2
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	4413      	add	r3, r2
 8008678:	085a      	lsrs	r2, r3, #1
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008688:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008690:	69da      	ldr	r2, [r3, #28]
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008698:	895b      	ldrh	r3, [r3, #10]
 800869a:	4619      	mov	r1, r3
 800869c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800869e:	440b      	add	r3, r1
 80086a0:	3b01      	subs	r3, #1
 80086a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086a4:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80086a8:	8949      	ldrh	r1, [r1, #10]
 80086aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d201      	bcs.n	80086b6 <find_volume+0x506>
		return FR_NO_FILESYSTEM;
 80086b2:	230d      	movs	r3, #13
 80086b4:	e0a9      	b.n	800880a <find_volume+0x65a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086bc:	461a      	mov	r2, r3
 80086be:	f04f 33ff 	mov.w	r3, #4294967295
 80086c2:	6153      	str	r3, [r2, #20]
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086d2:	6113      	str	r3, [r2, #16]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086da:	2280      	movs	r2, #128	; 0x80
 80086dc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80086de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d17a      	bne.n	80087dc <find_volume+0x62c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	b21a      	sxth	r2, r3
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086f6:	b21b      	sxth	r3, r3
 80086f8:	4313      	orrs	r3, r2
 80086fa:	b21b      	sxth	r3, r3
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d16d      	bne.n	80087dc <find_volume+0x62c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008702:	3301      	adds	r3, #1
 8008704:	4619      	mov	r1, r3
 8008706:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008708:	f7fe faf6 	bl	8006cf8 <move_window>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d164      	bne.n	80087dc <find_volume+0x62c>
	{
		fs->fsi_flag = 0;
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008718:	2200      	movs	r2, #0
 800871a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	b21a      	sxth	r2, r3
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800872c:	b21b      	sxth	r3, r3
 800872e:	4313      	orrs	r3, r2
 8008730:	b21b      	sxth	r3, r3
 8008732:	4a38      	ldr	r2, [pc, #224]	; (8008814 <find_volume+0x664>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d151      	bne.n	80087dc <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	78db      	ldrb	r3, [r3, #3]
 800873c:	061a      	lsls	r2, r3, #24
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	789b      	ldrb	r3, [r3, #2]
 8008742:	041b      	lsls	r3, r3, #16
 8008744:	4313      	orrs	r3, r2
 8008746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008748:	7852      	ldrb	r2, [r2, #1]
 800874a:	0212      	lsls	r2, r2, #8
 800874c:	4313      	orrs	r3, r2
 800874e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008750:	7812      	ldrb	r2, [r2, #0]
 8008752:	4313      	orrs	r3, r2
 8008754:	4a30      	ldr	r2, [pc, #192]	; (8008818 <find_volume+0x668>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d140      	bne.n	80087dc <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008760:	061a      	lsls	r2, r3, #24
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008768:	041b      	lsls	r3, r3, #16
 800876a:	4313      	orrs	r3, r2
 800876c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800876e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008772:	0212      	lsls	r2, r2, #8
 8008774:	4313      	orrs	r3, r2
 8008776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008778:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800877c:	4313      	orrs	r3, r2
 800877e:	4a27      	ldr	r2, [pc, #156]	; (800881c <find_volume+0x66c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d12b      	bne.n	80087dc <find_volume+0x62c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800878a:	061a      	lsls	r2, r3, #24
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008792:	041b      	lsls	r3, r3, #16
 8008794:	4313      	orrs	r3, r2
 8008796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008798:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800879c:	0212      	lsls	r2, r2, #8
 800879e:	4313      	orrs	r3, r2
 80087a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087a2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80087a6:	4313      	orrs	r3, r2
 80087a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087ae:	6153      	str	r3, [r2, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80087b6:	061a      	lsls	r2, r3, #24
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80087be:	041b      	lsls	r3, r3, #16
 80087c0:	4313      	orrs	r3, r2
 80087c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087c4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80087c8:	0212      	lsls	r2, r2, #8
 80087ca:	4313      	orrs	r3, r2
 80087cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ce:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80087d2:	4313      	orrs	r3, r2
 80087d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087da:	6113      	str	r3, [r2, #16]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e2:	461a      	mov	r2, r3
 80087e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087e8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80087ea:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <find_volume+0x670>)
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	3301      	adds	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <find_volume+0x670>)
 80087f4:	801a      	strh	r2, [r3, #0]
 80087f6:	4b0a      	ldr	r3, [pc, #40]	; (8008820 <find_volume+0x670>)
 80087f8:	881a      	ldrh	r2, [r3, #0]
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008800:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008802:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008804:	f7fe f9fc 	bl	8006c00 <clear_lock>
#endif

	return FR_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3758      	adds	r7, #88	; 0x58
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	ffffaa55 	.word	0xffffaa55
 8008818:	41615252 	.word	0x41615252
 800881c:	61417272 	.word	0x61417272
 8008820:	200022fc 	.word	0x200022fc

08008824 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d02a      	beq.n	800888c <validate+0x68>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d024      	beq.n	800888c <validate+0x68>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d01b      	beq.n	800888c <validate+0x68>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008860:	88da      	ldrh	r2, [r3, #6]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008868:	889b      	ldrh	r3, [r3, #4]
 800886a:	429a      	cmp	r2, r3
 800886c:	d10e      	bne.n	800888c <validate+0x68>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800887a:	785b      	ldrb	r3, [r3, #1]
 800887c:	4618      	mov	r0, r3
 800887e:	f7fd fedf 	bl	8006640 <disk_status>
 8008882:	4603      	mov	r3, r0
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800888c:	2309      	movs	r3, #9
 800888e:	e00c      	b.n	80088aa <validate+0x86>

	ENTER_FF(fil->fs);		/* Lock file system */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	f7fd ffeb 	bl	8006874 <lock_fs>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <validate+0x84>
 80088a4:	230f      	movs	r3, #15
 80088a6:	e000      	b.n	80088aa <validate+0x86>

	return FR_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80088c6:	f107 0310 	add.w	r3, r7, #16
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7ff fbbe 	bl	800804c <get_ldnumber>
 80088d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	da01      	bge.n	80088dc <f_mount+0x28>
 80088d8:	230b      	movs	r3, #11
 80088da:	e050      	b.n	800897e <f_mount+0xca>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80088dc:	4a2a      	ldr	r2, [pc, #168]	; (8008988 <f_mount+0xd4>)
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d013      	beq.n	8008914 <f_mount+0x60>
#if _FS_LOCK
		clear_lock(cfs);
 80088ec:	69b8      	ldr	r0, [r7, #24]
 80088ee:	f7fe f987 	bl	8006c00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f001 fe81 	bl	800a602 <ff_del_syncobj>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <f_mount+0x56>
 8008906:	2302      	movs	r3, #2
 8008908:	e039      	b.n	800897e <f_mount+0xca>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008910:	2200      	movs	r2, #0
 8008912:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d013      	beq.n	8008942 <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	b2da      	uxtb	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800892e:	330c      	adds	r3, #12
 8008930:	4619      	mov	r1, r3
 8008932:	4610      	mov	r0, r2
 8008934:	f001 fe47 	bl	800a5c6 <ff_cre_syncobj>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <f_mount+0x8e>
 800893e:	2302      	movs	r3, #2
 8008940:	e01d      	b.n	800897e <f_mount+0xca>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	4910      	ldr	r1, [pc, #64]	; (8008988 <f_mount+0xd4>)
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <f_mount+0xa4>
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d001      	beq.n	800895c <f_mount+0xa8>
 8008958:	2300      	movs	r3, #0
 800895a:	e010      	b.n	800897e <f_mount+0xca>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800895c:	f107 0108 	add.w	r1, r7, #8
 8008960:	f107 030c 	add.w	r3, r7, #12
 8008964:	2200      	movs	r2, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f7ff fc22 	bl	80081b0 <find_volume>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	7dfa      	ldrb	r2, [r7, #23]
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f7fd ff8c 	bl	8006894 <unlock_fs>
 800897c:	7dfb      	ldrb	r3, [r7, #23]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3720      	adds	r7, #32
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	200022f8 	.word	0x200022f8

0800898c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800899a:	f843 0c44 	str.w	r0, [r3, #-68]
 800899e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089a2:	f843 1c48 	str.w	r1, [r3, #-72]
 80089a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089aa:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80089ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <f_open+0x32>
 80089ba:	2309      	movs	r3, #9
 80089bc:	e2f3      	b.n	8008fa6 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 80089be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80089c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089ca:	461a      	mov	r2, r3
 80089cc:	2300      	movs	r3, #0
 80089ce:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80089d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089d4:	461a      	mov	r2, r3
 80089d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089da:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80089e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089ea:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80089ee:	f023 0301 	bic.w	r3, r3, #1
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	f107 0110 	add.w	r1, r7, #16
 80089f8:	3908      	subs	r1, #8
 80089fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80089fe:	3b10      	subs	r3, #16
 8008a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7ff fbd3 	bl	80081b0 <find_volume>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a10:	f102 020f 	add.w	r2, r2, #15
 8008a14:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008a16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a1a:	f103 030f 	add.w	r3, r3, #15
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f040 82ae 	bne.w	8008f82 <f_open+0x5f6>
		INIT_BUF(dj);
 8008a26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a30:	3b1c      	subs	r3, #28
 8008a32:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8008a36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a3a:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8008a3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008a42:	3b10      	subs	r3, #16
 8008a44:	4611      	mov	r1, r2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fa8a 	bl	8007f60 <follow_path>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a52:	f102 020f 	add.w	r2, r2, #15
 8008a56:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8008a58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a5c:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8008a60:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a64:	f102 0208 	add.w	r2, r2, #8
 8008a68:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008a6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a6e:	f103 030f 	add.w	r3, r3, #15
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d126      	bne.n	8008ac6 <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 8008a78:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a7c:	f103 0308 	add.w	r3, r3, #8
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <f_open+0x108>
				res = FR_INVALID_NAME;
 8008a86:	2306      	movs	r3, #6
 8008a88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a8c:	f102 020f 	add.w	r2, r2, #15
 8008a90:	7013      	strb	r3, [r2, #0]
 8008a92:	e018      	b.n	8008ac6 <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a98:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008a9c:	f023 0301 	bic.w	r3, r3, #1
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bf14      	ite	ne
 8008aa4:	2301      	movne	r3, #1
 8008aa6:	2300      	moveq	r3, #0
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ab0:	3b10      	subs	r3, #16
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fd ff0d 	bl	80068d4 <chk_lock>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ac0:	f102 020f 	add.w	r2, r2, #15
 8008ac4:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ac6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008aca:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008ace:	f003 031c 	and.w	r3, r3, #28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 8134 	beq.w	8008d40 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8008ad8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008adc:	f103 030f 	add.w	r3, r3, #15
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d02e      	beq.n	8008b44 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008ae6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008aea:	f103 030f 	add.w	r3, r3, #15
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d112      	bne.n	8008b1a <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008af4:	f7fd ff5e 	bl	80069b4 <enq_lock>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <f_open+0x182>
 8008afe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b02:	3b10      	subs	r3, #16
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff f8b5 	bl	8007c74 <dir_register>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	e000      	b.n	8008b10 <f_open+0x184>
 8008b0e:	2312      	movs	r3, #18
 8008b10:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b14:	f102 020f 	add.w	r2, r2, #15
 8008b18:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008b1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b24:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008b28:	f043 0308 	orr.w	r3, r3, #8
 8008b2c:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 8008b30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b34:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 8008b38:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b3c:	f102 0208 	add.w	r2, r2, #8
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	e01f      	b.n	8008b84 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008b44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b48:	f103 0308 	add.w	r3, r3, #8
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330b      	adds	r3, #11
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f003 0311 	and.w	r3, r3, #17
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d006      	beq.n	8008b68 <f_open+0x1dc>
					res = FR_DENIED;
 8008b5a:	2307      	movs	r3, #7
 8008b5c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b60:	f102 020f 	add.w	r2, r2, #15
 8008b64:	7013      	strb	r3, [r2, #0]
 8008b66:	e00d      	b.n	8008b84 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008b68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b6c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <f_open+0x1f8>
						res = FR_EXIST;
 8008b78:	2308      	movs	r3, #8
 8008b7a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b7e:	f102 020f 	add.w	r2, r2, #15
 8008b82:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008b84:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b88:	f103 030f 	add.w	r3, r3, #15
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 8108 	bne.w	8008da4 <f_open+0x418>
 8008b94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b98:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 80ff 	beq.w	8008da4 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 8008ba6:	f7fd fced 	bl	8006584 <get_fattime>
 8008baa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bae:	f103 0304 	add.w	r3, r3, #4
 8008bb2:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008bb4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bb8:	f103 0308 	add.w	r3, r3, #8
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	330e      	adds	r3, #14
 8008bc0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008bc4:	f102 0204 	add.w	r2, r2, #4
 8008bc8:	6812      	ldr	r2, [r2, #0]
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bd2:	f103 0304 	add.w	r3, r3, #4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	0a1b      	lsrs	r3, r3, #8
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008be2:	f103 0308 	add.w	r3, r3, #8
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	330f      	adds	r3, #15
 8008bea:	b2d2      	uxtb	r2, r2
 8008bec:	701a      	strb	r2, [r3, #0]
 8008bee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bf2:	f103 0304 	add.w	r3, r3, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	0c1a      	lsrs	r2, r3, #16
 8008bfa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bfe:	f103 0308 	add.w	r3, r3, #8
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3310      	adds	r3, #16
 8008c06:	b2d2      	uxtb	r2, r2
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c0e:	f103 0304 	add.w	r3, r3, #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	0e1a      	lsrs	r2, r3, #24
 8008c16:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c1a:	f103 0308 	add.w	r3, r3, #8
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3311      	adds	r3, #17
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008c26:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c2a:	f103 0308 	add.w	r3, r3, #8
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	330b      	adds	r3, #11
 8008c32:	2200      	movs	r2, #0
 8008c34:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008c36:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c3a:	f103 0308 	add.w	r3, r3, #8
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	331c      	adds	r3, #28
 8008c42:	2200      	movs	r2, #0
 8008c44:	701a      	strb	r2, [r3, #0]
 8008c46:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c4a:	f103 0308 	add.w	r3, r3, #8
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	331d      	adds	r3, #29
 8008c52:	2200      	movs	r2, #0
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c5a:	f103 0308 	add.w	r3, r3, #8
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	331e      	adds	r3, #30
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]
 8008c66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c6a:	f103 0308 	add.w	r3, r3, #8
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	331f      	adds	r3, #31
 8008c72:	2200      	movs	r2, #0
 8008c74:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008c76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c7a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008c7e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c82:	f102 0208 	add.w	r2, r2, #8
 8008c86:	6811      	ldr	r1, [r2, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe ff4a 	bl	8007b22 <ld_clust>
 8008c8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c92:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008c94:	2100      	movs	r1, #0
 8008c96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c9a:	f103 0308 	add.w	r3, r3, #8
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	f7fe ff6e 	bl	8007b80 <st_clust>
				dj.fs->wflag = 1;
 8008ca4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ca8:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8008cb4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d072      	beq.n	8008da4 <f_open+0x418>
					dw = dj.fs->winsect;
 8008cbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008cc2:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ccc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008cd0:	f102 0204 	add.w	r2, r2, #4
 8008cd4:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008cd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008cda:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008cde:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ce2:	6811      	ldr	r1, [r2, #0]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fe fb6c 	bl	80073c2 <remove_chain>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008cf0:	f102 020f 	add.w	r2, r2, #15
 8008cf4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8008cf6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008cfa:	f103 030f 	add.w	r3, r3, #15
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d14f      	bne.n	8008da4 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008d04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d08:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 8008d0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d18:	6113      	str	r3, [r2, #16]
						res = move_window(dj.fs, dw);
 8008d1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d1e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008d22:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d26:	f102 0204 	add.w	r2, r2, #4
 8008d2a:	6811      	ldr	r1, [r2, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7fd ffe3 	bl	8006cf8 <move_window>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d38:	f102 020f 	add.w	r2, r2, #15
 8008d3c:	7013      	strb	r3, [r2, #0]
 8008d3e:	e031      	b.n	8008da4 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008d40:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d44:	f103 030f 	add.w	r3, r3, #15
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d12a      	bne.n	8008da4 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008d4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d52:	f103 0308 	add.w	r3, r3, #8
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	330b      	adds	r3, #11
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	f003 0310 	and.w	r3, r3, #16
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d006      	beq.n	8008d72 <f_open+0x3e6>
					res = FR_NO_FILE;
 8008d64:	2304      	movs	r3, #4
 8008d66:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d6a:	f102 020f 	add.w	r2, r2, #15
 8008d6e:	7013      	strb	r3, [r2, #0]
 8008d70:	e018      	b.n	8008da4 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008d72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d76:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d010      	beq.n	8008da4 <f_open+0x418>
 8008d82:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d86:	f103 0308 	add.w	r3, r3, #8
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	330b      	adds	r3, #11
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <f_open+0x418>
						res = FR_DENIED;
 8008d98:	2307      	movs	r3, #7
 8008d9a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d9e:	f102 020f 	add.w	r2, r2, #15
 8008da2:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008da4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008da8:	f103 030f 	add.w	r3, r3, #15
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d157      	bne.n	8008e62 <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008db2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008db6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <f_open+0x44c>
				mode |= FA__WRITTEN;
 8008dc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dcc:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008dd0:	f043 0320 	orr.w	r3, r3, #32
 8008dd4:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008dd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ddc:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008dea:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008dee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008df2:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008df4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008df8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e00:	461a      	mov	r2, r3
 8008e02:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e06:	f103 0308 	add.w	r3, r3, #8
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e12:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008e16:	f023 0301 	bic.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bf14      	ite	ne
 8008e1e:	2301      	movne	r3, #1
 8008e20:	2300      	moveq	r3, #0
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e2a:	3b10      	subs	r3, #16
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7fd fde4 	bl	80069fc <inc_lock>
 8008e34:	4602      	mov	r2, r0
 8008e36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e42:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008e44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e48:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <f_open+0x4d6>
 8008e56:	2302      	movs	r3, #2
 8008e58:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e5c:	f102 020f 	add.w	r2, r2, #15
 8008e60:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008e62:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e66:	f103 030f 	add.w	r3, r3, #15
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f040 8088 	bne.w	8008f82 <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 8008e72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e84:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008e88:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8008e8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e96:	2200      	movs	r2, #0
 8008e98:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008e9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e9e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008ea2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ea6:	f102 0208 	add.w	r2, r2, #8
 8008eaa:	6811      	ldr	r1, [r2, #0]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe fe38 	bl	8007b22 <ld_clust>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008eb8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec0:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008ec2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ec6:	f103 0308 	add.w	r3, r3, #8
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	331f      	adds	r3, #31
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	061a      	lsls	r2, r3, #24
 8008ed2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ed6:	f103 0308 	add.w	r3, r3, #8
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	331e      	adds	r3, #30
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	041b      	lsls	r3, r3, #16
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ee8:	f102 0208 	add.w	r2, r2, #8
 8008eec:	6812      	ldr	r2, [r2, #0]
 8008eee:	321d      	adds	r2, #29
 8008ef0:	7812      	ldrb	r2, [r2, #0]
 8008ef2:	0212      	lsls	r2, r2, #8
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008efa:	f102 0208 	add.w	r2, r2, #8
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	321c      	adds	r2, #28
 8008f02:	7812      	ldrb	r2, [r2, #0]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008f0a:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008f0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f12:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8008f14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f18:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f20:	461a      	mov	r2, r3
 8008f22:	2300      	movs	r3, #0
 8008f24:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8008f26:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f32:	461a      	mov	r2, r3
 8008f34:	2300      	movs	r3, #0
 8008f36:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008f38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f3c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f44:	461a      	mov	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008f4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f4e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008f52:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008f56:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008f5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f5e:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8008f60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f64:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f72:	88da      	ldrh	r2, [r3, #6]
 8008f74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f78:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f80:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008f82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f86:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008f8a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008f8e:	f102 020f 	add.w	r2, r2, #15
 8008f92:	7812      	ldrb	r2, [r2, #0]
 8008f94:	4611      	mov	r1, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fd fc7c 	bl	8006894 <unlock_fs>
 8008f9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008fa0:	f103 030f 	add.w	r3, r3, #15
 8008fa4:	781b      	ldrb	r3, [r3, #0]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b08c      	sub	sp, #48	; 0x30
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	607a      	str	r2, [r7, #4]
 8008fbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f7ff fc2a 	bl	8008824 <validate>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008fd4:	7ffb      	ldrb	r3, [r7, #31]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <f_read+0x3e>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	7ffa      	ldrb	r2, [r7, #31]
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fd fc54 	bl	8006894 <unlock_fs>
 8008fec:	7ffb      	ldrb	r3, [r7, #31]
 8008fee:	e219      	b.n	8009424 <f_read+0x472>
	if (fp->err)								/* Check error */
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ff6:	79db      	ldrb	r3, [r3, #7]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d010      	beq.n	800901e <f_read+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800900a:	79db      	ldrb	r3, [r3, #7]
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f7fd fc40 	bl	8006894 <unlock_fs>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	79db      	ldrb	r3, [r3, #7]
 800901c:	e202      	b.n	8009424 <f_read+0x472>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009024:	799b      	ldrb	r3, [r3, #6]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d109      	bne.n	8009042 <f_read+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2107      	movs	r1, #7
 8009038:	4618      	mov	r0, r3
 800903a:	f7fd fc2b 	bl	8006894 <unlock_fs>
 800903e:	2307      	movs	r3, #7
 8009040:	e1f0      	b.n	8009424 <f_read+0x472>
	remain = fp->fsize - fp->fptr;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	429a      	cmp	r2, r3
 800905c:	f240 81d5 	bls.w	800940a <f_read+0x458>
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009064:	e1d1      	b.n	800940a <f_read+0x458>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800907a:	8952      	ldrh	r2, [r2, #10]
 800907c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009080:	fb01 f202 	mul.w	r2, r1, r2
 8009084:	1a9b      	subs	r3, r3, r2
 8009086:	2b00      	cmp	r3, #0
 8009088:	f040 8170 	bne.w	800936c <f_read+0x3ba>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800909a:	6812      	ldr	r2, [r2, #0]
 800909c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80090a0:	8952      	ldrh	r2, [r2, #10]
 80090a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b4:	789b      	ldrb	r3, [r3, #2]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	4013      	ands	r3, r2
 80090bc:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d153      	bne.n	800916c <f_read+0x1ba>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d105      	bne.n	80090dc <f_read+0x12a>
					clst = fp->sclust;			/* Follow from the origin */
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090da:	e01c      	b.n	8009116 <f_read+0x164>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d009      	beq.n	80090fc <f_read+0x14a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	4619      	mov	r1, r3
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f7fe fa6e 	bl	80075d4 <clmt_clust>
 80090f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80090fa:	e00c      	b.n	8009116 <f_read+0x164>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7fd ff08 	bl	8006f24 <get_fat>
 8009114:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	2b01      	cmp	r3, #1
 800911a:	d80e      	bhi.n	800913a <f_read+0x188>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009122:	2202      	movs	r2, #2
 8009124:	71da      	strb	r2, [r3, #7]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2102      	movs	r1, #2
 8009130:	4618      	mov	r0, r3
 8009132:	f7fd fbaf 	bl	8006894 <unlock_fs>
 8009136:	2302      	movs	r3, #2
 8009138:	e174      	b.n	8009424 <f_read+0x472>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d10e      	bne.n	8009160 <f_read+0x1ae>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009148:	2201      	movs	r2, #1
 800914a:	71da      	strb	r2, [r3, #7]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2101      	movs	r1, #1
 8009156:	4618      	mov	r0, r3
 8009158:	f7fd fb9c 	bl	8006894 <unlock_fs>
 800915c:	2301      	movs	r3, #1
 800915e:	e161      	b.n	8009424 <f_read+0x472>
				fp->clust = clst;				/* Update current cluster */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009166:	461a      	mov	r2, r3
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	4619      	mov	r1, r3
 800917e:	4610      	mov	r0, r2
 8009180:	f7fd feab 	bl	8006eda <clust2sect>
 8009184:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10e      	bne.n	80091aa <f_read+0x1f8>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009192:	2202      	movs	r2, #2
 8009194:	71da      	strb	r2, [r3, #7]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2102      	movs	r1, #2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7fd fb77 	bl	8006894 <unlock_fs>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e13c      	b.n	8009424 <f_read+0x472>
			sect += csect;
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	4413      	add	r3, r2
 80091b0:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091be:	895b      	ldrh	r3, [r3, #10]
 80091c0:	461a      	mov	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091c8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d06e      	beq.n	80092ae <f_read+0x2fc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80091d0:	7dfa      	ldrb	r2, [r7, #23]
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	4413      	add	r3, r2
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091e2:	7892      	ldrb	r2, [r2, #2]
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d90a      	bls.n	80091fe <f_read+0x24c>
					cc = fp->fs->csize - csect;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f4:	789b      	ldrb	r3, [r3, #2]
 80091f6:	461a      	mov	r2, r3
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800920a:	7858      	ldrb	r0, [r3, #1]
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	6a39      	ldr	r1, [r7, #32]
 8009212:	f7fd fa55 	bl	80066c0 <disk_read>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00e      	beq.n	800923a <f_read+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009222:	2201      	movs	r2, #1
 8009224:	71da      	strb	r2, [r3, #7]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2101      	movs	r1, #1
 8009230:	4618      	mov	r0, r3
 8009232:	f7fd fb2f 	bl	8006894 <unlock_fs>
 8009236:	2301      	movs	r3, #1
 8009238:	e0f4      	b.n	8009424 <f_read+0x472>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009240:	799b      	ldrb	r3, [r3, #6]
 8009242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009246:	2b00      	cmp	r3, #0
 8009248:	d024      	beq.n	8009294 <f_read+0x2e2>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009250:	699a      	ldr	r2, [r3, #24]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009258:	429a      	cmp	r2, r3
 800925a:	d91b      	bls.n	8009294 <f_read+0x2e2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009262:	699a      	ldr	r2, [r3, #24]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800926e:	6812      	ldr	r2, [r2, #0]
 8009270:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009274:	8952      	ldrh	r2, [r2, #10]
 8009276:	fb02 f303 	mul.w	r3, r2, r3
 800927a:	6a3a      	ldr	r2, [r7, #32]
 800927c:	18d0      	adds	r0, r2, r3
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928c:	895b      	ldrh	r3, [r3, #10]
 800928e:	461a      	mov	r2, r3
 8009290:	f7fd fa74 	bl	800677c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a0:	895b      	ldrh	r3, [r3, #10]
 80092a2:	461a      	mov	r2, r3
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	fb02 f303 	mul.w	r3, r2, r3
 80092aa:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80092ac:	e095      	b.n	80093da <f_read+0x428>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d051      	beq.n	8009360 <f_read+0x3ae>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c2:	799b      	ldrb	r3, [r3, #6]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d02b      	beq.n	8009324 <f_read+0x372>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092d8:	7858      	ldrb	r0, [r3, #1]
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	2301      	movs	r3, #1
 80092e6:	f7fd fa0b 	bl	8006700 <disk_write>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00e      	beq.n	800930e <f_read+0x35c>
						ABORT(fp->fs, FR_DISK_ERR);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f6:	2201      	movs	r2, #1
 80092f8:	71da      	strb	r2, [r3, #7]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2101      	movs	r1, #1
 8009304:	4618      	mov	r0, r3
 8009306:	f7fd fac5 	bl	8006894 <unlock_fs>
 800930a:	2301      	movs	r3, #1
 800930c:	e08a      	b.n	8009424 <f_read+0x472>
					fp->flag &= ~FA__DIRTY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009314:	799b      	ldrb	r3, [r3, #6]
 8009316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800931a:	b2da      	uxtb	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009322:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009330:	7858      	ldrb	r0, [r3, #1]
 8009332:	68f9      	ldr	r1, [r7, #12]
 8009334:	2301      	movs	r3, #1
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	f7fd f9c2 	bl	80066c0 <disk_read>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00e      	beq.n	8009360 <f_read+0x3ae>
					ABORT(fp->fs, FR_DISK_ERR);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009348:	2201      	movs	r2, #1
 800934a:	71da      	strb	r2, [r3, #7]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2101      	movs	r1, #1
 8009356:	4618      	mov	r0, r3
 8009358:	f7fd fa9c 	bl	8006894 <unlock_fs>
 800935c:	2301      	movs	r3, #1
 800935e:	e061      	b.n	8009424 <f_read+0x472>
			}
#endif
			fp->dsect = sect;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009366:	461a      	mov	r2, r3
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009378:	895b      	ldrh	r3, [r3, #10]
 800937a:	4618      	mov	r0, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800938a:	6812      	ldr	r2, [r2, #0]
 800938c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009390:	8952      	ldrh	r2, [r2, #10]
 8009392:	fbb3 f1f2 	udiv	r1, r3, r2
 8009396:	fb01 f202 	mul.w	r2, r1, r2
 800939a:	1a9b      	subs	r3, r3, r2
 800939c:	1ac3      	subs	r3, r0, r3
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80093a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d901      	bls.n	80093ac <f_read+0x3fa>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093c0:	8952      	ldrh	r2, [r2, #10]
 80093c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80093c6:	fb01 f202 	mul.w	r2, r1, r2
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093d2:	4619      	mov	r1, r3
 80093d4:	6a38      	ldr	r0, [r7, #32]
 80093d6:	f7fd f9d1 	bl	800677c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80093da:	6a3a      	ldr	r2, [r7, #32]
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	4413      	add	r3, r2
 80093e0:	623b      	str	r3, [r7, #32]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	4413      	add	r3, r2
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80093f4:	6093      	str	r3, [r2, #8]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	441a      	add	r2, r3
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	601a      	str	r2, [r3, #0]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f47f ae2a 	bne.w	8009066 <f_read+0xb4>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2100      	movs	r1, #0
 800941c:	4618      	mov	r0, r3
 800941e:	f7fd fa39 	bl	8006894 <unlock_fs>
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3730      	adds	r7, #48	; 0x30
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08a      	sub	sp, #40	; 0x28
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
 8009438:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7ff f9ed 	bl	8008824 <validate>
 800944a:	4603      	mov	r3, r0
 800944c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <f_write+0x3e>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	7dfa      	ldrb	r2, [r7, #23]
 800945e:	4611      	mov	r1, r2
 8009460:	4618      	mov	r0, r3
 8009462:	f7fd fa17 	bl	8006894 <unlock_fs>
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	e26a      	b.n	8009940 <f_write+0x514>
	if (fp->err)							/* Check error */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009470:	79db      	ldrb	r3, [r3, #7]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d010      	beq.n	8009498 <f_write+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009484:	79db      	ldrb	r3, [r3, #7]
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7fd fa03 	bl	8006894 <unlock_fs>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009494:	79db      	ldrb	r3, [r3, #7]
 8009496:	e253      	b.n	8009940 <f_write+0x514>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800949e:	799b      	ldrb	r3, [r3, #6]
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d109      	bne.n	80094bc <f_write+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2107      	movs	r1, #7
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7fd f9ee 	bl	8006894 <unlock_fs>
 80094b8:	2307      	movs	r3, #7
 80094ba:	e241      	b.n	8009940 <f_write+0x514>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	441a      	add	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	f080 8209 	bcs.w	80098e8 <f_write+0x4bc>
 80094d6:	2300      	movs	r3, #0
 80094d8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80094da:	e205      	b.n	80098e8 <f_write+0x4bc>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094ea:	6812      	ldr	r2, [r2, #0]
 80094ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80094f0:	8952      	ldrh	r2, [r2, #10]
 80094f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80094f6:	fb01 f202 	mul.w	r2, r1, r2
 80094fa:	1a9b      	subs	r3, r3, r2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f040 8199 	bne.w	8009834 <f_write+0x408>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009510:	6812      	ldr	r2, [r2, #0]
 8009512:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009516:	8952      	ldrh	r2, [r2, #10]
 8009518:	fbb3 f3f2 	udiv	r3, r3, r2
 800951c:	b2da      	uxtb	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952a:	789b      	ldrb	r3, [r3, #2]
 800952c:	3b01      	subs	r3, #1
 800952e:	b2db      	uxtb	r3, r3
 8009530:	4013      	ands	r3, r2
 8009532:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009534:	7dbb      	ldrb	r3, [r7, #22]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d16f      	bne.n	800961a <f_write+0x1ee>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d111      	bne.n	800956a <f_write+0x13e>
					clst = fp->sclust;		/* Follow from the origin */
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	2b00      	cmp	r3, #0
 8009554:	d126      	bne.n	80095a4 <f_write+0x178>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f7fd ff8f 	bl	8007484 <create_chain>
 8009566:	6278      	str	r0, [r7, #36]	; 0x24
 8009568:	e01c      	b.n	80095a4 <f_write+0x178>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	2b00      	cmp	r3, #0
 8009574:	d009      	beq.n	800958a <f_write+0x15e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	4619      	mov	r1, r3
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7fe f827 	bl	80075d4 <clmt_clust>
 8009586:	6278      	str	r0, [r7, #36]	; 0x24
 8009588:	e00c      	b.n	80095a4 <f_write+0x178>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	4619      	mov	r1, r3
 800959c:	4610      	mov	r0, r2
 800959e:	f7fd ff71 	bl	8007484 <create_chain>
 80095a2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 81a3 	beq.w	80098f2 <f_write+0x4c6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d10e      	bne.n	80095d0 <f_write+0x1a4>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b8:	2202      	movs	r2, #2
 80095ba:	71da      	strb	r2, [r3, #7]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2102      	movs	r1, #2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fd f964 	bl	8006894 <unlock_fs>
 80095cc:	2302      	movs	r3, #2
 80095ce:	e1b7      	b.n	8009940 <f_write+0x514>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d6:	d10e      	bne.n	80095f6 <f_write+0x1ca>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095de:	2201      	movs	r2, #1
 80095e0:	71da      	strb	r2, [r3, #7]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2101      	movs	r1, #1
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fd f951 	bl	8006894 <unlock_fs>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e1a4      	b.n	8009940 <f_write+0x514>
				fp->clust = clst;			/* Update current cluster */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fc:	461a      	mov	r2, r3
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d105      	bne.n	800961a <f_write+0x1ee>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009614:	461a      	mov	r2, r3
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009620:	799b      	ldrb	r3, [r3, #6]
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d02b      	beq.n	8009682 <f_write+0x256>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009636:	7858      	ldrb	r0, [r3, #1]
 8009638:	68f9      	ldr	r1, [r7, #12]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	2301      	movs	r3, #1
 8009644:	f7fd f85c 	bl	8006700 <disk_write>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00e      	beq.n	800966c <f_write+0x240>
					ABORT(fp->fs, FR_DISK_ERR);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009654:	2201      	movs	r2, #1
 8009656:	71da      	strb	r2, [r3, #7]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2101      	movs	r1, #1
 8009662:	4618      	mov	r0, r3
 8009664:	f7fd f916 	bl	8006894 <unlock_fs>
 8009668:	2301      	movs	r3, #1
 800966a:	e169      	b.n	8009940 <f_write+0x514>
				fp->flag &= ~FA__DIRTY;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009672:	799b      	ldrb	r3, [r3, #6]
 8009674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009678:	b2da      	uxtb	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009680:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f7fd fc20 	bl	8006eda <clust2sect>
 800969a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10e      	bne.n	80096c0 <f_write+0x294>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a8:	2202      	movs	r2, #2
 80096aa:	71da      	strb	r2, [r3, #7]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2102      	movs	r1, #2
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7fd f8ec 	bl	8006894 <unlock_fs>
 80096bc:	2302      	movs	r3, #2
 80096be:	e13f      	b.n	8009940 <f_write+0x514>
			sect += csect;
 80096c0:	7dbb      	ldrb	r3, [r7, #22]
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	4413      	add	r3, r2
 80096c6:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d4:	895b      	ldrh	r3, [r3, #10]
 80096d6:	461a      	mov	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	fbb3 f3f2 	udiv	r3, r3, r2
 80096de:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d071      	beq.n	80097ca <f_write+0x39e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80096e6:	7dba      	ldrb	r2, [r7, #22]
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	4413      	add	r3, r2
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096f2:	6812      	ldr	r2, [r2, #0]
 80096f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096f8:	7892      	ldrb	r2, [r2, #2]
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d90a      	bls.n	8009714 <f_write+0x2e8>
					cc = fp->fs->csize - csect;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800970a:	789b      	ldrb	r3, [r3, #2]
 800970c:	461a      	mov	r2, r3
 800970e:	7dbb      	ldrb	r3, [r7, #22]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009720:	7858      	ldrb	r0, [r3, #1]
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	69b9      	ldr	r1, [r7, #24]
 8009728:	f7fc ffea 	bl	8006700 <disk_write>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00e      	beq.n	8009750 <f_write+0x324>
					ABORT(fp->fs, FR_DISK_ERR);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009738:	2201      	movs	r2, #1
 800973a:	71da      	strb	r2, [r3, #7]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2101      	movs	r1, #1
 8009746:	4618      	mov	r0, r3
 8009748:	f7fd f8a4 	bl	8006894 <unlock_fs>
 800974c:	2301      	movs	r3, #1
 800974e:	e0f7      	b.n	8009940 <f_write+0x514>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009756:	699a      	ldr	r2, [r3, #24]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	69fa      	ldr	r2, [r7, #28]
 800975e:	429a      	cmp	r2, r3
 8009760:	d926      	bls.n	80097b0 <f_write+0x384>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800976a:	699a      	ldr	r2, [r3, #24]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009776:	6812      	ldr	r2, [r2, #0]
 8009778:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800977c:	8952      	ldrh	r2, [r2, #10]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
 8009782:	69ba      	ldr	r2, [r7, #24]
 8009784:	18d1      	adds	r1, r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009792:	895b      	ldrh	r3, [r3, #10]
 8009794:	461a      	mov	r2, r3
 8009796:	f7fc fff1 	bl	800677c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a0:	799b      	ldrb	r3, [r3, #6]
 80097a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ae:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097bc:	895b      	ldrh	r3, [r3, #10]
 80097be:	461a      	mov	r2, r3
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	fb02 f303 	mul.w	r3, r2, r3
 80097c6:	623b      	str	r3, [r7, #32]
				continue;
 80097c8:	e076      	b.n	80098b8 <f_write+0x48c>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	693a      	ldr	r2, [r7, #16]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d027      	beq.n	8009828 <f_write+0x3fc>
				if (fp->fptr < fp->fsize &&
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d21d      	bcs.n	8009828 <f_write+0x3fc>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f8:	7858      	ldrb	r0, [r3, #1]
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	2301      	movs	r3, #1
 80097fe:	693a      	ldr	r2, [r7, #16]
 8009800:	f7fc ff5e 	bl	80066c0 <disk_read>
 8009804:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00e      	beq.n	8009828 <f_write+0x3fc>
						ABORT(fp->fs, FR_DISK_ERR);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009810:	2201      	movs	r2, #1
 8009812:	71da      	strb	r2, [r3, #7]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2101      	movs	r1, #1
 800981e:	4618      	mov	r0, r3
 8009820:	f7fd f838 	bl	8006894 <unlock_fs>
 8009824:	2301      	movs	r3, #1
 8009826:	e08b      	b.n	8009940 <f_write+0x514>
			}
#endif
			fp->dsect = sect;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800982e:	461a      	mov	r2, r3
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009840:	895b      	ldrh	r3, [r3, #10]
 8009842:	4618      	mov	r0, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009852:	6812      	ldr	r2, [r2, #0]
 8009854:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009858:	8952      	ldrh	r2, [r2, #10]
 800985a:	fbb3 f1f2 	udiv	r1, r3, r2
 800985e:	fb01 f202 	mul.w	r2, r1, r2
 8009862:	1a9b      	subs	r3, r3, r2
 8009864:	1ac3      	subs	r3, r0, r3
 8009866:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009868:	6a3a      	ldr	r2, [r7, #32]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	429a      	cmp	r2, r3
 800986e:	d901      	bls.n	8009874 <f_write+0x448>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009882:	6812      	ldr	r2, [r2, #0]
 8009884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009888:	8952      	ldrh	r2, [r2, #10]
 800988a:	fbb3 f1f2 	udiv	r1, r3, r2
 800988e:	fb01 f202 	mul.w	r2, r1, r2
 8009892:	1a9b      	subs	r3, r3, r2
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	4413      	add	r3, r2
 8009898:	6a3a      	ldr	r2, [r7, #32]
 800989a:	69b9      	ldr	r1, [r7, #24]
 800989c:	4618      	mov	r0, r3
 800989e:	f7fc ff6d 	bl	800677c <mem_cpy>
		fp->flag |= FA__DIRTY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a8:	799b      	ldrb	r3, [r3, #6]
 80098aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b6:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	4413      	add	r3, r2
 80098be:	61bb      	str	r3, [r7, #24]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098c6:	689a      	ldr	r2, [r3, #8]
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	4413      	add	r3, r2
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098d2:	6093      	str	r3, [r2, #8]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	441a      	add	r2, r3
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f47f adf6 	bne.w	80094dc <f_write+0xb0>
 80098f0:	e000      	b.n	80098f4 <f_write+0x4c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80098f2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	429a      	cmp	r2, r3
 8009906:	d907      	bls.n	8009918 <f_write+0x4ec>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009916:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991e:	799b      	ldrb	r3, [r3, #6]
 8009920:	f043 0320 	orr.w	r3, r3, #32
 8009924:	b2da      	uxtb	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800992c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2100      	movs	r1, #0
 8009938:	4618      	mov	r0, r3
 800993a:	f7fc ffab 	bl	8006894 <unlock_fs>
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3728      	adds	r7, #40	; 0x28
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7fe ff67 	bl	8008824 <validate>
 8009956:	4603      	mov	r3, r0
 8009958:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	f040 80c4 	bne.w	8009aea <f_sync+0x1a2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009968:	799b      	ldrb	r3, [r3, #6]
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80bb 	beq.w	8009aea <f_sync+0x1a2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800997a:	799b      	ldrb	r3, [r3, #6]
 800997c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009980:	2b00      	cmp	r3, #0
 8009982:	d026      	beq.n	80099d2 <f_sync+0x8a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009990:	7858      	ldrb	r0, [r3, #1]
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800999a:	699a      	ldr	r2, [r3, #24]
 800999c:	2301      	movs	r3, #1
 800999e:	f7fc feaf 	bl	8006700 <disk_write>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d009      	beq.n	80099bc <f_sync+0x74>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2101      	movs	r1, #1
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fc ff6e 	bl	8006894 <unlock_fs>
 80099b8:	2301      	movs	r3, #1
 80099ba:	e0a0      	b.n	8009afe <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c2:	799b      	ldrb	r3, [r3, #6]
 80099c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d0:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	4619      	mov	r1, r3
 80099e4:	4610      	mov	r0, r2
 80099e6:	f7fd f987 	bl	8006cf8 <move_window>
 80099ea:	4603      	mov	r3, r0
 80099ec:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80099ee:	7dfb      	ldrb	r3, [r7, #23]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d17a      	bne.n	8009aea <f_sync+0x1a2>
				dir = fp->dir_ptr;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	330b      	adds	r3, #11
 8009a02:	781a      	ldrb	r2, [r3, #0]
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	330b      	adds	r3, #11
 8009a08:	f042 0220 	orr.w	r2, r2, #32
 8009a0c:	b2d2      	uxtb	r2, r2
 8009a0e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a16:	68da      	ldr	r2, [r3, #12]
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	331c      	adds	r3, #28
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	0a1b      	lsrs	r3, r3, #8
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	331d      	adds	r3, #29
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	0c1a      	lsrs	r2, r3, #16
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	331e      	adds	r3, #30
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	0e1a      	lsrs	r2, r3, #24
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	331f      	adds	r3, #31
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6938      	ldr	r0, [r7, #16]
 8009a66:	f7fe f88b 	bl	8007b80 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009a6a:	f7fc fd8b 	bl	8006584 <get_fattime>
 8009a6e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	3316      	adds	r3, #22
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	0a1b      	lsrs	r3, r3, #8
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	3317      	adds	r3, #23
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	0c1a      	lsrs	r2, r3, #16
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	3318      	adds	r3, #24
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	0e1a      	lsrs	r2, r3, #24
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	3319      	adds	r3, #25
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3312      	adds	r3, #18
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	3313      	adds	r3, #19
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab8:	799b      	ldrb	r3, [r3, #6]
 8009aba:	f023 0320 	bic.w	r3, r3, #32
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac6:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fd f93b 	bl	8006d5c <sync_fs>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	7dfa      	ldrb	r2, [r7, #23]
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fc fecc 	bl	8006894 <unlock_fs>
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3718      	adds	r7, #24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b084      	sub	sp, #16
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff ff1a 	bl	8009948 <f_sync>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d122      	bne.n	8009b64 <f_close+0x5e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fe fe80 	bl	8008824 <validate>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d11a      	bne.n	8009b64 <f_close+0x5e>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fd f819 	bl	8006b78 <dec_lock>
 8009b46:	4603      	mov	r3, r0
 8009b48:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d105      	bne.n	8009b5c <f_close+0x56>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b56:	461a      	mov	r2, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	68b8      	ldr	r0, [r7, #8]
 8009b60:	f7fc fe98 	bl	8006894 <unlock_fs>
#endif
		}
	}
	return res;
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b090      	sub	sp, #64	; 0x40
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7fe fe53 	bl	8008824 <validate>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009b84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00c      	beq.n	8009ba6 <f_lseek+0x38>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fc fe7a 	bl	8006894 <unlock_fs>
 8009ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ba4:	e350      	b.n	800a248 <f_lseek+0x6da>
	if (fp->err)						/* Check error */
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bac:	79db      	ldrb	r3, [r3, #7]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d010      	beq.n	8009bd4 <f_lseek+0x66>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc0:	79db      	ldrb	r3, [r3, #7]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7fc fe65 	bl	8006894 <unlock_fs>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd0:	79db      	ldrb	r3, [r3, #7]
 8009bd2:	e339      	b.n	800a248 <f_lseek+0x6da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 814c 	beq.w	8009e7a <f_lseek+0x30c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be8:	d17c      	bne.n	8009ce4 <f_lseek+0x176>
			tbl = fp->cltbl;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	1d1a      	adds	r2, r3, #4
 8009bf8:	627a      	str	r2, [r7, #36]	; 0x24
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	617b      	str	r3, [r7, #20]
 8009bfe:	2302      	movs	r3, #2
 8009c00:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d056      	beq.n	8009cc0 <f_lseek+0x152>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	613b      	str	r3, [r7, #16]
 8009c16:	2300      	movs	r3, #0
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1c:	3302      	adds	r3, #2
 8009c1e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	3301      	adds	r3, #1
 8009c28:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fd f975 	bl	8006f24 <get_fat>
 8009c3a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d80e      	bhi.n	8009c60 <f_lseek+0xf2>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c48:	2202      	movs	r2, #2
 8009c4a:	71da      	strb	r2, [r3, #7]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fc fe1c 	bl	8006894 <unlock_fs>
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	e2f3      	b.n	800a248 <f_lseek+0x6da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c66:	d10e      	bne.n	8009c86 <f_lseek+0x118>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6e:	2201      	movs	r2, #1
 8009c70:	71da      	strb	r2, [r3, #7]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fc fe09 	bl	8006894 <unlock_fs>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e2e0      	b.n	800a248 <f_lseek+0x6da>
					} while (cl == pcl + 1);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d0c7      	beq.n	8009c20 <f_lseek+0xb2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d809      	bhi.n	8009cac <f_lseek+0x13e>
						*tbl++ = ncl; *tbl++ = tcl;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	1d1a      	adds	r2, r3, #4
 8009c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8009c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca4:	1d1a      	adds	r2, r3, #4
 8009ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d3a8      	bcc.n	8009c12 <f_lseek+0xa4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cca:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8009ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d803      	bhi.n	8009cdc <f_lseek+0x16e>
				*tbl = 0;		/* Terminate table */
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	e2a9      	b.n	800a230 <f_lseek+0x6c2>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009cdc:	2311      	movs	r3, #17
 8009cde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009ce2:	e2a5      	b.n	800a230 <f_lseek+0x6c2>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d904      	bls.n	8009cfc <f_lseek+0x18e>
				ofs = fp->fsize;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d02:	461a      	mov	r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 8290 	beq.w	800a230 <f_lseek+0x6c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	3b01      	subs	r3, #1
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7fd fc5c 	bl	80075d4 <clmt_clust>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d24:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f7fd f8ce 	bl	8006eda <clust2sect>
 8009d3e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10e      	bne.n	8009d64 <f_lseek+0x1f6>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	71da      	strb	r2, [r3, #7]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2102      	movs	r1, #2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fc fd9a 	bl	8006894 <unlock_fs>
 8009d60:	2302      	movs	r3, #2
 8009d62:	e271      	b.n	800a248 <f_lseek+0x6da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d6e:	6812      	ldr	r2, [r2, #0]
 8009d70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d74:	8952      	ldrh	r2, [r2, #10]
 8009d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d86:	7892      	ldrb	r2, [r2, #2]
 8009d88:	3a01      	subs	r2, #1
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	4413      	add	r3, r2
 8009d90:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009da0:	6812      	ldr	r2, [r2, #0]
 8009da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009da6:	8952      	ldrh	r2, [r2, #10]
 8009da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dac:	fb01 f202 	mul.w	r2, r1, r2
 8009db0:	1a9b      	subs	r3, r3, r2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 823c 	beq.w	800a230 <f_lseek+0x6c2>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	69ba      	ldr	r2, [r7, #24]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	f000 8234 	beq.w	800a230 <f_lseek+0x6c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dce:	799b      	ldrb	r3, [r3, #6]
 8009dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d02b      	beq.n	8009e30 <f_lseek+0x2c2>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de4:	7858      	ldrb	r0, [r3, #1]
 8009de6:	6879      	ldr	r1, [r7, #4]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dee:	699a      	ldr	r2, [r3, #24]
 8009df0:	2301      	movs	r3, #1
 8009df2:	f7fc fc85 	bl	8006700 <disk_write>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00e      	beq.n	8009e1a <f_lseek+0x2ac>
							ABORT(fp->fs, FR_DISK_ERR);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e02:	2201      	movs	r2, #1
 8009e04:	71da      	strb	r2, [r3, #7]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2101      	movs	r1, #1
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fc fd3f 	bl	8006894 <unlock_fs>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e216      	b.n	800a248 <f_lseek+0x6da>
						fp->flag &= ~FA__DIRTY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e20:	799b      	ldrb	r3, [r3, #6]
 8009e22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e2e:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e3c:	7858      	ldrb	r0, [r3, #1]
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	2301      	movs	r3, #1
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	f7fc fc3c 	bl	80066c0 <disk_read>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00e      	beq.n	8009e6c <f_lseek+0x2fe>
						ABORT(fp->fs, FR_DISK_ERR);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e54:	2201      	movs	r2, #1
 8009e56:	71da      	strb	r2, [r3, #7]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2101      	movs	r1, #1
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fc fd16 	bl	8006894 <unlock_fs>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e1ed      	b.n	800a248 <f_lseek+0x6da>
#endif
					fp->dsect = dsc;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e72:	461a      	mov	r2, r3
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	6193      	str	r3, [r2, #24]
 8009e78:	e1da      	b.n	800a230 <f_lseek+0x6c2>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d90c      	bls.n	8009ea2 <f_lseek+0x334>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e8e:	799b      	ldrb	r3, [r3, #6]
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <f_lseek+0x334>
#endif
			) ofs = fp->fsize;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	637b      	str	r3, [r7, #52]	; 0x34
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eba:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8128 	beq.w	800a114 <f_lseek+0x5a6>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed0:	789b      	ldrb	r3, [r3, #2]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee0:	895b      	ldrh	r3, [r3, #10]
 8009ee2:	fb02 f303 	mul.w	r3, r2, r3
 8009ee6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009ee8:	6a3b      	ldr	r3, [r7, #32]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d021      	beq.n	8009f32 <f_lseek+0x3c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	1e5a      	subs	r2, r3, #1
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	1e59      	subs	r1, r3, #1
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d315      	bcc.n	8009f32 <f_lseek+0x3c4>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	1e5a      	subs	r2, r3, #1
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	425b      	negs	r3, r3
 8009f0e:	4013      	ands	r3, r2
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f16:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f30:	e041      	b.n	8009fb6 <f_lseek+0x448>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d133      	bne.n	8009faa <f_lseek+0x43c>
					clst = create_chain(fp->fs, 0);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fd fa99 	bl	8007484 <create_chain>
 8009f52:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d10e      	bne.n	8009f78 <f_lseek+0x40a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f60:	2202      	movs	r2, #2
 8009f62:	71da      	strb	r2, [r3, #7]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fc fc90 	bl	8006894 <unlock_fs>
 8009f74:	2302      	movs	r3, #2
 8009f76:	e167      	b.n	800a248 <f_lseek+0x6da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	d10e      	bne.n	8009f9e <f_lseek+0x430>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f86:	2201      	movs	r2, #1
 8009f88:	71da      	strb	r2, [r3, #7]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2101      	movs	r1, #1
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fc fc7d 	bl	8006894 <unlock_fs>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e154      	b.n	800a248 <f_lseek+0x6da>
					fp->sclust = clst;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 80ab 	beq.w	800a114 <f_lseek+0x5a6>
				while (ofs > bcs) {						/* Cluster following loop */
 8009fbe:	e062      	b.n	800a086 <f_lseek+0x518>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fc6:	799b      	ldrb	r3, [r3, #6]
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00e      	beq.n	8009fee <f_lseek+0x480>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fd fa52 	bl	8007484 <create_chain>
 8009fe0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10b      	bne.n	800a000 <f_lseek+0x492>
							ofs = bcs; break;
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	e04f      	b.n	800a08e <f_lseek+0x520>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fc ff93 	bl	8006f24 <get_fat>
 8009ffe:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d10e      	bne.n	800a026 <f_lseek+0x4b8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a00e:	2201      	movs	r2, #1
 800a010:	71da      	strb	r2, [r3, #7]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2101      	movs	r1, #1
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fc fc39 	bl	8006894 <unlock_fs>
 800a022:	2301      	movs	r3, #1
 800a024:	e110      	b.n	800a248 <f_lseek+0x6da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d909      	bls.n	800a040 <f_lseek+0x4d2>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d30e      	bcc.n	800a05e <f_lseek+0x4f0>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a046:	2202      	movs	r2, #2
 800a048:	71da      	strb	r2, [r3, #7]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2102      	movs	r1, #2
 800a054:	4618      	mov	r0, r3
 800a056:	f7fc fc1d 	bl	8006894 <unlock_fs>
 800a05a:	2302      	movs	r3, #2
 800a05c:	e0f4      	b.n	800a248 <f_lseek+0x6da>
					fp->clust = clst;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a064:	461a      	mov	r2, r3
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	4413      	add	r3, r2
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a07c:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d898      	bhi.n	8009fc0 <f_lseek+0x452>
				}
				fp->fptr += ofs;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	4413      	add	r3, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a0a0:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ae:	895b      	ldrh	r3, [r3, #10]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0b8:	fb01 f202 	mul.w	r2, r1, r2
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d028      	beq.n	800a114 <f_lseek+0x5a6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fc ff04 	bl	8006eda <clust2sect>
 800a0d2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800a0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10e      	bne.n	800a0f8 <f_lseek+0x58a>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	71da      	strb	r2, [r3, #7]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2102      	movs	r1, #2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fc fbd0 	bl	8006894 <unlock_fs>
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	e0a7      	b.n	800a248 <f_lseek+0x6da>
					nsect += ofs / SS(fp->fs);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a104:	895b      	ldrh	r3, [r3, #10]
 800a106:	461a      	mov	r2, r3
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a110:	4413      	add	r3, r2
 800a112:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a122:	6812      	ldr	r2, [r2, #0]
 800a124:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a128:	8952      	ldrh	r2, [r2, #10]
 800a12a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a12e:	fb01 f202 	mul.w	r2, r1, r2
 800a132:	1a9b      	subs	r3, r3, r2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d05e      	beq.n	800a1f6 <f_lseek+0x688>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a142:	429a      	cmp	r2, r3
 800a144:	d057      	beq.n	800a1f6 <f_lseek+0x688>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14c:	799b      	ldrb	r3, [r3, #6]
 800a14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a152:	2b00      	cmp	r3, #0
 800a154:	d02b      	beq.n	800a1ae <f_lseek+0x640>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a162:	7858      	ldrb	r0, [r3, #1]
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a16c:	699a      	ldr	r2, [r3, #24]
 800a16e:	2301      	movs	r3, #1
 800a170:	f7fc fac6 	bl	8006700 <disk_write>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00e      	beq.n	800a198 <f_lseek+0x62a>
					ABORT(fp->fs, FR_DISK_ERR);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a180:	2201      	movs	r2, #1
 800a182:	71da      	strb	r2, [r3, #7]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2101      	movs	r1, #1
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fc fb80 	bl	8006894 <unlock_fs>
 800a194:	2301      	movs	r3, #1
 800a196:	e057      	b.n	800a248 <f_lseek+0x6da>
				fp->flag &= ~FA__DIRTY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a19e:	799b      	ldrb	r3, [r3, #6]
 800a1a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ac:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ba:	7858      	ldrb	r0, [r3, #1]
 800a1bc:	6879      	ldr	r1, [r7, #4]
 800a1be:	2301      	movs	r3, #1
 800a1c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1c2:	f7fc fa7d 	bl	80066c0 <disk_read>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00e      	beq.n	800a1ea <f_lseek+0x67c>
				ABORT(fp->fs, FR_DISK_ERR);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	71da      	strb	r2, [r3, #7]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2101      	movs	r1, #1
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7fc fb57 	bl	8006894 <unlock_fs>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e02e      	b.n	800a248 <f_lseek+0x6da>
#endif
			fp->dsect = nsect;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f4:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	429a      	cmp	r2, r3
 800a208:	d912      	bls.n	800a230 <f_lseek+0x6c2>
			fp->fsize = fp->fptr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a218:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a220:	799b      	ldrb	r3, [r3, #6]
 800a222:	f043 0320 	orr.w	r3, r3, #32
 800a226:	b2da      	uxtb	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a22e:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fc fb28 	bl	8006894 <unlock_fs>
 800a244:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3740      	adds	r7, #64	; 0x40
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a25e:	f843 0c34 	str.w	r0, [r3, #-52]
 800a262:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a266:	f843 1c38 	str.w	r1, [r3, #-56]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 800a26a:	f107 0118 	add.w	r1, r7, #24
 800a26e:	3914      	subs	r1, #20
 800a270:	f107 0318 	add.w	r3, r7, #24
 800a274:	3b04      	subs	r3, #4
 800a276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27a:	2200      	movs	r2, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fd ff97 	bl	80081b0 <find_volume>
 800a282:	4603      	mov	r3, r0
 800a284:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a288:	f102 0217 	add.w	r2, r2, #23
 800a28c:	7013      	strb	r3, [r2, #0]
	if (res == FR_OK) {
 800a28e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a292:	f103 0317 	add.w	r3, r3, #23
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d13d      	bne.n	800a318 <f_stat+0xc8>
		INIT_BUF(dj);
 800a29c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f107 0318 	add.w	r3, r7, #24
 800a2a6:	3b10      	subs	r3, #16
 800a2a8:	f8c2 3ff4 	str.w	r3, [r2, #4084]	; 0xff4
		res = follow_path(&dj, path);	/* Follow the file path */
 800a2ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2b0:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800a2b4:	f107 0318 	add.w	r3, r7, #24
 800a2b8:	3b04      	subs	r3, #4
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fd fe4f 	bl	8007f60 <follow_path>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a2c8:	f102 0217 	add.w	r2, r2, #23
 800a2cc:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {				/* Follow completed */
 800a2ce:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a2d2:	f103 0317 	add.w	r3, r3, #23
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d11d      	bne.n	800a318 <f_stat+0xc8>
			if (dj.dir) {		/* Found an object */
 800a2dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2e0:	f8d3 3ff0 	ldr.w	r3, [r3, #4080]	; 0xff0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d011      	beq.n	800a30c <f_stat+0xbc>
				if (fno) get_fileinfo(&dj, fno);
 800a2e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2ec:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d011      	beq.n	800a318 <f_stat+0xc8>
 800a2f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	f107 0318 	add.w	r3, r7, #24
 800a2fe:	3b04      	subs	r3, #4
 800a300:	f852 1c38 	ldr.w	r1, [r2, #-56]
 800a304:	4618      	mov	r0, r3
 800a306:	f7fd fcf5 	bl	8007cf4 <get_fileinfo>
 800a30a:	e005      	b.n	800a318 <f_stat+0xc8>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 800a30c:	2306      	movs	r3, #6
 800a30e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a312:	f102 0217 	add.w	r2, r2, #23
 800a316:	7013      	strb	r3, [r2, #0]
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 800a318:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a31c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800a320:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800a324:	f102 0217 	add.w	r2, r2, #23
 800a328:	7812      	ldrb	r2, [r2, #0]
 800a32a:	4611      	mov	r1, r2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fc fab1 	bl	8006894 <unlock_fs>
 800a332:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800a336:	f103 0317 	add.w	r3, r3, #23
 800a33a:	781b      	ldrb	r3, [r3, #0]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7fe fa67 	bl	8008824 <validate>
 800a356:	4603      	mov	r3, r0
 800a358:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d115      	bne.n	800a38c <f_truncate+0x44>
		if (fp->err) {						/* Check error */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a366:	79db      	ldrb	r3, [r3, #7]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <f_truncate+0x30>
			res = (FRESULT)fp->err;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a372:	79db      	ldrb	r3, [r3, #7]
 800a374:	73fb      	strb	r3, [r7, #15]
 800a376:	e009      	b.n	800a38c <f_truncate+0x44>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37e:	799b      	ldrb	r3, [r3, #6]
 800a380:	f003 0302 	and.w	r3, r3, #2
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <f_truncate+0x44>
				res = FR_DENIED;
 800a388:	2307      	movs	r3, #7
 800a38a:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f040 80b0 	bne.w	800a4f4 <f_truncate+0x1ac>
		if (fp->fsize > fp->fptr) {
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	f240 809c 	bls.w	800a4e2 <f_truncate+0x19a>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3b8:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c0:	799b      	ldrb	r3, [r3, #6]
 800a3c2:	f043 0320 	orr.w	r3, r3, #32
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ce:	719a      	strb	r2, [r3, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d114      	bne.n	800a406 <f_truncate+0xbe>
				res = remove_chain(fp->fs, fp->sclust);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	f7fc ffe7 	bl	80073c2 <remove_chain>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3fe:	461a      	mov	r2, r3
 800a400:	2300      	movs	r3, #0
 800a402:	6113      	str	r3, [r2, #16]
 800a404:	e042      	b.n	800a48c <f_truncate+0x144>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	4619      	mov	r1, r3
 800a418:	4610      	mov	r0, r2
 800a41a:	f7fc fd83 	bl	8006f24 <get_fat>
 800a41e:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42a:	d101      	bne.n	800a430 <f_truncate+0xe8>
 800a42c:	2301      	movs	r3, #1
 800a42e:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d101      	bne.n	800a43a <f_truncate+0xf2>
 800a436:	2302      	movs	r3, #2
 800a438:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 800a43a:	7bfb      	ldrb	r3, [r7, #15]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d125      	bne.n	800a48c <f_truncate+0x144>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a44c:	699b      	ldr	r3, [r3, #24]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	429a      	cmp	r2, r3
 800a452:	d21b      	bcs.n	800a48c <f_truncate+0x144>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a468:	4619      	mov	r1, r3
 800a46a:	f7fc fe57 	bl	800711c <put_fat>
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d109      	bne.n	800a48c <f_truncate+0x144>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68b9      	ldr	r1, [r7, #8]
 800a482:	4618      	mov	r0, r3
 800a484:	f7fc ff9d 	bl	80073c2 <remove_chain>
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d127      	bne.n	800a4e2 <f_truncate+0x19a>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a498:	799b      	ldrb	r3, [r3, #6]
 800a49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d01f      	beq.n	800a4e2 <f_truncate+0x19a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ae:	7858      	ldrb	r0, [r3, #1]
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	f7fc f920 	bl	8006700 <disk_write>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <f_truncate+0x184>
					res = FR_DISK_ERR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	73fb      	strb	r3, [r7, #15]
 800a4ca:	e00a      	b.n	800a4e2 <f_truncate+0x19a>
				else
					fp->flag &= ~FA__DIRTY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d2:	799b      	ldrb	r3, [r3, #6]
 800a4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e0:	719a      	strb	r2, [r3, #6]
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 800a4e2:	7bfb      	ldrb	r3, [r7, #15]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d005      	beq.n	800a4f4 <f_truncate+0x1ac>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
 800a4f2:	71d3      	strb	r3, [r2, #7]
	}

	LEAVE_FF(fp->fs, res);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	7bfa      	ldrb	r2, [r7, #15]
 800a4fe:	4611      	mov	r1, r2
 800a500:	4618      	mov	r0, r3
 800a502:	f7fc f9c7 	bl	8006894 <unlock_fs>
 800a506:	7bfb      	ldrb	r3, [r7, #15]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	4613      	mov	r3, r2
 800a51c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a51e:	2301      	movs	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a526:	4b1f      	ldr	r3, [pc, #124]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a528:	7a5b      	ldrb	r3, [r3, #9]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d831      	bhi.n	800a594 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a530:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a532:	7a5b      	ldrb	r3, [r3, #9]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	461a      	mov	r2, r3
 800a538:	4b1a      	ldr	r3, [pc, #104]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a53a:	2100      	movs	r1, #0
 800a53c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a53e:	4b19      	ldr	r3, [pc, #100]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a540:	7a5b      	ldrb	r3, [r3, #9]
 800a542:	b2db      	uxtb	r3, r3
 800a544:	4a17      	ldr	r2, [pc, #92]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a54e:	4b15      	ldr	r3, [pc, #84]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a550:	7a5b      	ldrb	r3, [r3, #9]
 800a552:	b2db      	uxtb	r3, r3
 800a554:	461a      	mov	r2, r3
 800a556:	4b13      	ldr	r3, [pc, #76]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a558:	4413      	add	r3, r2
 800a55a:	79fa      	ldrb	r2, [r7, #7]
 800a55c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a55e:	4b11      	ldr	r3, [pc, #68]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a560:	7a5b      	ldrb	r3, [r3, #9]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	b2d1      	uxtb	r1, r2
 800a568:	4a0e      	ldr	r2, [pc, #56]	; (800a5a4 <FATFS_LinkDriverEx+0x94>)
 800a56a:	7251      	strb	r1, [r2, #9]
 800a56c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a56e:	7dbb      	ldrb	r3, [r7, #22]
 800a570:	3330      	adds	r3, #48	; 0x30
 800a572:	b2da      	uxtb	r2, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3301      	adds	r3, #1
 800a57c:	223a      	movs	r2, #58	; 0x3a
 800a57e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	3302      	adds	r3, #2
 800a584:	222f      	movs	r2, #47	; 0x2f
 800a586:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	3303      	adds	r3, #3
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a590:	2300      	movs	r3, #0
 800a592:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
}
 800a596:	4618      	mov	r0, r3
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20002318 	.word	0x20002318

0800a5a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff ffaa 	bl	800a510 <FATFS_LinkDriverEx>
 800a5bc:	4603      	mov	r3, r0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	6039      	str	r1, [r7, #0]
 800a5d0:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60bb      	str	r3, [r7, #8]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800a5d6:	f107 0308 	add.w	r3, r7, #8
 800a5da:	2101      	movs	r1, #1
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 f8b4 	bl	800a74a <osSemaphoreCreate>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	bf14      	ite	ne
 800a5f0:	2301      	movne	r3, #1
 800a5f2:	2300      	moveq	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	60fb      	str	r3, [r7, #12]
  
  return ret;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}

0800a602 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b082      	sub	sp, #8
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f940 	bl	800a890 <osSemaphoreDelete>
  return 1;
 800a610:	2301      	movs	r3, #1
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800a626:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f8ac 	bl	800a788 <osSemaphoreWait>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d101      	bne.n	800a63a <ff_req_grant+0x20>
  {
    ret = 1;
 800a636:	2301      	movs	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800a63a:	68fb      	ldr	r3, [r7, #12]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f8e9 	bl	800a824 <osSemaphoreRelease>
}
 800a652:	bf00      	nop
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b085      	sub	sp, #20
 800a65e:	af00      	add	r7, sp, #0
 800a660:	4603      	mov	r3, r0
 800a662:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a664:	2300      	movs	r3, #0
 800a666:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a66c:	2b84      	cmp	r3, #132	; 0x84
 800a66e:	d005      	beq.n	800a67c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a670:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	3303      	adds	r3, #3
 800a67a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a67c:	68fb      	ldr	r3, [r7, #12]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b083      	sub	sp, #12
 800a68e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a690:	f3ef 8305 	mrs	r3, IPSR
 800a694:	607b      	str	r3, [r7, #4]
  return(result);
 800a696:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bf14      	ite	ne
 800a69c:	2301      	movne	r3, #1
 800a69e:	2300      	moveq	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a6b2:	f001 fa85 	bl	800bbc0 <vTaskStartScheduler>
  
  return osOK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af02      	add	r7, sp, #8
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685c      	ldr	r4, [r3, #4]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6d2:	b29e      	uxth	r6, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff ffbd 	bl	800a65a <makeFreeRtosPriority>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	f107 030c 	add.w	r3, r7, #12
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	9200      	str	r2, [sp, #0]
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f000 ff51 	bl	800b598 <xTaskCreate>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d001      	beq.n	800a700 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e000      	b.n	800a702 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a700:	68fb      	ldr	r3, [r7, #12]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a70a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d001      	beq.n	800a720 <osDelay+0x16>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	e000      	b.n	800a722 <osDelay+0x18>
 800a720:	2301      	movs	r3, #1
 800a722:	4618      	mov	r0, r3
 800a724:	f001 f87a 	bl	800b81c <vTaskDelay>
  
  return osOK;
 800a728:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800a73a:	2001      	movs	r0, #1
 800a73c:	f000 fa8b 	bl	800ac56 <xQueueCreateMutex>
 800a740:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d110      	bne.n	800a77c <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800a75a:	2203      	movs	r2, #3
 800a75c:	2100      	movs	r1, #0
 800a75e:	2001      	movs	r0, #1
 800a760:	f000 fa06 	bl	800ab70 <xQueueGenericCreate>
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d005      	beq.n	800a778 <osSemaphoreCreate+0x2e>
 800a76c:	2300      	movs	r3, #0
 800a76e:	2200      	movs	r2, #0
 800a770:	2100      	movs	r1, #0
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 fa88 	bl	800ac88 <xQueueGenericSend>
    return sema;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	e000      	b.n	800a77e <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800a77c:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a792:	2300      	movs	r3, #0
 800a794:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a79c:	2380      	movs	r3, #128	; 0x80
 800a79e:	e03a      	b.n	800a816 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7aa:	d103      	bne.n	800a7b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b0:	60fb      	str	r3, [r7, #12]
 800a7b2:	e009      	b.n	800a7c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d006      	beq.n	800a7c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <osSemaphoreWait+0x40>
      ticks = 1;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a7c8:	f7ff ff5f 	bl	800a68a <inHandlerMode>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d017      	beq.n	800a802 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a7d2:	f107 0308 	add.w	r3, r7, #8
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	2100      	movs	r1, #0
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fcec 	bl	800b1b8 <xQueueReceiveFromISR>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d001      	beq.n	800a7ea <osSemaphoreWait+0x62>
      return osErrorOS;
 800a7e6:	23ff      	movs	r3, #255	; 0xff
 800a7e8:	e015      	b.n	800a816 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d011      	beq.n	800a814 <osSemaphoreWait+0x8c>
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <osSemaphoreWait+0x98>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	e008      	b.n	800a814 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 fbcb 	bl	800afa0 <xQueueSemaphoreTake>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d001      	beq.n	800a814 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a810:	23ff      	movs	r3, #255	; 0xff
 800a812:	e000      	b.n	800a816 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a830:	2300      	movs	r3, #0
 800a832:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a834:	f7ff ff29 	bl	800a68a <inHandlerMode>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d016      	beq.n	800a86c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a83e:	f107 0308 	add.w	r3, r7, #8
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fb1d 	bl	800ae84 <xQueueGiveFromISR>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d001      	beq.n	800a854 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a850:	23ff      	movs	r3, #255	; 0xff
 800a852:	e017      	b.n	800a884 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d013      	beq.n	800a882 <osSemaphoreRelease+0x5e>
 800a85a:	4b0c      	ldr	r3, [pc, #48]	; (800a88c <osSemaphoreRelease+0x68>)
 800a85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	e00a      	b.n	800a882 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a86c:	2300      	movs	r3, #0
 800a86e:	2200      	movs	r2, #0
 800a870:	2100      	movs	r1, #0
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fa08 	bl	800ac88 <xQueueGenericSend>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d001      	beq.n	800a882 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a87e:	23ff      	movs	r3, #255	; 0xff
 800a880:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a882:	68fb      	ldr	r3, [r7, #12]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	e000ed04 	.word	0xe000ed04

0800a890 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a898:	f7ff fef7 	bl	800a68a <inHandlerMode>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a8a2:	2382      	movs	r3, #130	; 0x82
 800a8a4:	e003      	b.n	800a8ae <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fd06 	bl	800b2b8 <vQueueDelete>

  return osOK; 
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6818      	ldr	r0, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	f000 f950 	bl	800ab70 <xQueueGenericCreate>
 800a8d0:	4603      	mov	r3, r0
#endif
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b082      	sub	sp, #8
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 ffce 	bl	800b884 <vTaskSuspend>
  
  return osOK;
 800a8e8:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800a8fc:	f7ff fec5 	bl	800a68a <inHandlerMode>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00e      	beq.n	800a924 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 f8e8 	bl	800badc <xTaskResumeFromISR>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d10b      	bne.n	800a92a <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800a912:	4b08      	ldr	r3, [pc, #32]	; (800a934 <osThreadResume+0x40>)
 800a914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	e002      	b.n	800a92a <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f001 f87b 	bl	800ba20 <vTaskResume>
  }
  return osOK;
 800a92a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f103 0208 	add.w	r2, r3, #8
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f04f 32ff 	mov.w	r2, #4294967295
 800a950:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f103 0208 	add.w	r2, r3, #8
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f103 0208 	add.w	r2, r3, #8
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a986:	bf00      	nop
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	601a      	str	r2, [r3, #0]
}
 800a9ce:	bf00      	nop
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b085      	sub	sp, #20
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d103      	bne.n	800a9fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	e00c      	b.n	800aa14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	e002      	b.n	800aa08 <vListInsert+0x2e>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d2f6      	bcs.n	800aa02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	683a      	ldr	r2, [r7, #0]
 800aa2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	601a      	str	r2, [r3, #0]
}
 800aa40:	bf00      	nop
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	6892      	ldr	r2, [r2, #8]
 800aa62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	6852      	ldr	r2, [r2, #4]
 800aa6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d103      	bne.n	800aa80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	1e5a      	subs	r2, r3, #1
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aac6:	bf00      	nop
 800aac8:	e7fe      	b.n	800aac8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aaca:	f001 ffd3 	bl	800ca74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad6:	68f9      	ldr	r1, [r7, #12]
 800aad8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aada:	fb01 f303 	mul.w	r3, r1, r3
 800aade:	441a      	add	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafa:	3b01      	subs	r3, #1
 800aafc:	68f9      	ldr	r1, [r7, #12]
 800aafe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab00:	fb01 f303 	mul.w	r3, r1, r3
 800ab04:	441a      	add	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	22ff      	movs	r2, #255	; 0xff
 800ab0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	22ff      	movs	r2, #255	; 0xff
 800ab16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d114      	bne.n	800ab4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d01a      	beq.n	800ab5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3310      	adds	r3, #16
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f001 fa85 	bl	800c03c <xTaskRemoveFromEventList>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d012      	beq.n	800ab5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab38:	4b0c      	ldr	r3, [pc, #48]	; (800ab6c <xQueueGenericReset+0xcc>)
 800ab3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	e009      	b.n	800ab5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3310      	adds	r3, #16
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff fef2 	bl	800a938 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	3324      	adds	r3, #36	; 0x24
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7ff feed 	bl	800a938 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab5e:	f001 ffb9 	bl	800cad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab62:	2301      	movs	r3, #1
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	e000ed04 	.word	0xe000ed04

0800ab70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b08a      	sub	sp, #40	; 0x28
 800ab74:	af02      	add	r7, sp, #8
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10a      	bne.n	800ab9a <xQueueGenericCreate+0x2a>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	613b      	str	r3, [r7, #16]
}
 800ab96:	bf00      	nop
 800ab98:	e7fe      	b.n	800ab98 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d102      	bne.n	800aba6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]
 800aba4:	e004      	b.n	800abb0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	fb02 f303 	mul.w	r3, r2, r3
 800abae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	3348      	adds	r3, #72	; 0x48
 800abb4:	4618      	mov	r0, r3
 800abb6:	f002 f87f 	bl	800ccb8 <pvPortMalloc>
 800abba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d00b      	beq.n	800abda <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	3348      	adds	r3, #72	; 0x48
 800abc6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abc8:	79fa      	ldrb	r2, [r7, #7]
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	4613      	mov	r3, r2
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 f805 	bl	800abe4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800abda:	69bb      	ldr	r3, [r7, #24]
	}
 800abdc:	4618      	mov	r0, r3
 800abde:	3720      	adds	r7, #32
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d103      	bne.n	800ac00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	69ba      	ldr	r2, [r7, #24]
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	e002      	b.n	800ac06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac12:	2101      	movs	r1, #1
 800ac14:	69b8      	ldr	r0, [r7, #24]
 800ac16:	f7ff ff43 	bl	800aaa0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac1a:	bf00      	nop
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00e      	beq.n	800ac4e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ac42:	2300      	movs	r3, #0
 800ac44:	2200      	movs	r2, #0
 800ac46:	2100      	movs	r1, #0
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f81d 	bl	800ac88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ac60:	2301      	movs	r3, #1
 800ac62:	617b      	str	r3, [r7, #20]
 800ac64:	2300      	movs	r3, #0
 800ac66:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	6939      	ldr	r1, [r7, #16]
 800ac6e:	6978      	ldr	r0, [r7, #20]
 800ac70:	f7ff ff7e 	bl	800ab70 <xQueueGenericCreate>
 800ac74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f7ff ffd3 	bl	800ac22 <prvInitialiseMutex>

		return pxNewQueue;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
	}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3718      	adds	r7, #24
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08e      	sub	sp, #56	; 0x38
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac96:	2300      	movs	r3, #0
 800ac98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xQueueGenericSend+0x32>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d103      	bne.n	800acc8 <xQueueGenericSend+0x40>
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <xQueueGenericSend+0x44>
 800acc8:	2301      	movs	r3, #1
 800acca:	e000      	b.n	800acce <xQueueGenericSend+0x46>
 800accc:	2300      	movs	r3, #0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10a      	bne.n	800ace8 <xQueueGenericSend+0x60>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ace4:	bf00      	nop
 800ace6:	e7fe      	b.n	800ace6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2b02      	cmp	r3, #2
 800acec:	d103      	bne.n	800acf6 <xQueueGenericSend+0x6e>
 800acee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d101      	bne.n	800acfa <xQueueGenericSend+0x72>
 800acf6:	2301      	movs	r3, #1
 800acf8:	e000      	b.n	800acfc <xQueueGenericSend+0x74>
 800acfa:	2300      	movs	r3, #0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <xQueueGenericSend+0x8e>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	623b      	str	r3, [r7, #32]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad16:	f001 fb39 	bl	800c38c <xTaskGetSchedulerState>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d102      	bne.n	800ad26 <xQueueGenericSend+0x9e>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <xQueueGenericSend+0xa2>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e000      	b.n	800ad2c <xQueueGenericSend+0xa4>
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10a      	bne.n	800ad46 <xQueueGenericSend+0xbe>
	__asm volatile
 800ad30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	61fb      	str	r3, [r7, #28]
}
 800ad42:	bf00      	nop
 800ad44:	e7fe      	b.n	800ad44 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad46:	f001 fe95 	bl	800ca74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d302      	bcc.n	800ad5c <xQueueGenericSend+0xd4>
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d129      	bne.n	800adb0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad5c:	683a      	ldr	r2, [r7, #0]
 800ad5e:	68b9      	ldr	r1, [r7, #8]
 800ad60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad62:	f000 fadf 	bl	800b324 <prvCopyDataToQueue>
 800ad66:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d010      	beq.n	800ad92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad72:	3324      	adds	r3, #36	; 0x24
 800ad74:	4618      	mov	r0, r3
 800ad76:	f001 f961 	bl	800c03c <xTaskRemoveFromEventList>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d013      	beq.n	800ada8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad80:	4b3f      	ldr	r3, [pc, #252]	; (800ae80 <xQueueGenericSend+0x1f8>)
 800ad82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	e00a      	b.n	800ada8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d007      	beq.n	800ada8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad98:	4b39      	ldr	r3, [pc, #228]	; (800ae80 <xQueueGenericSend+0x1f8>)
 800ad9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ada8:	f001 fe94 	bl	800cad4 <vPortExitCritical>
				return pdPASS;
 800adac:	2301      	movs	r3, #1
 800adae:	e063      	b.n	800ae78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d103      	bne.n	800adbe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adb6:	f001 fe8d 	bl	800cad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	e05c      	b.n	800ae78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d106      	bne.n	800add2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adc4:	f107 0314 	add.w	r3, r7, #20
 800adc8:	4618      	mov	r0, r3
 800adca:	f001 f999 	bl	800c100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adce:	2301      	movs	r3, #1
 800add0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800add2:	f001 fe7f 	bl	800cad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800add6:	f000 ff43 	bl	800bc60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adda:	f001 fe4b 	bl	800ca74 <vPortEnterCritical>
 800adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ade4:	b25b      	sxtb	r3, r3
 800ade6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adea:	d103      	bne.n	800adf4 <xQueueGenericSend+0x16c>
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adfa:	b25b      	sxtb	r3, r3
 800adfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae00:	d103      	bne.n	800ae0a <xQueueGenericSend+0x182>
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae0a:	f001 fe63 	bl	800cad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae0e:	1d3a      	adds	r2, r7, #4
 800ae10:	f107 0314 	add.w	r3, r7, #20
 800ae14:	4611      	mov	r1, r2
 800ae16:	4618      	mov	r0, r3
 800ae18:	f001 f988 	bl	800c12c <xTaskCheckForTimeOut>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d124      	bne.n	800ae6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae24:	f000 fb76 	bl	800b514 <prvIsQueueFull>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d018      	beq.n	800ae60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	3310      	adds	r3, #16
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	4611      	mov	r1, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 f8dc 	bl	800bff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae3e:	f000 fb01 	bl	800b444 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ae42:	f000 ff1b 	bl	800bc7c <xTaskResumeAll>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f47f af7c 	bne.w	800ad46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ae4e:	4b0c      	ldr	r3, [pc, #48]	; (800ae80 <xQueueGenericSend+0x1f8>)
 800ae50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	e772      	b.n	800ad46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae62:	f000 faef 	bl	800b444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae66:	f000 ff09 	bl	800bc7c <xTaskResumeAll>
 800ae6a:	e76c      	b.n	800ad46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae6e:	f000 fae9 	bl	800b444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae72:	f000 ff03 	bl	800bc7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae76:	2300      	movs	r3, #0
		}
	}
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3738      	adds	r7, #56	; 0x38
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	e000ed04 	.word	0xe000ed04

0800ae84 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b08e      	sub	sp, #56	; 0x38
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10a      	bne.n	800aeae <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ae98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9c:	f383 8811 	msr	BASEPRI, r3
 800aea0:	f3bf 8f6f 	isb	sy
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	623b      	str	r3, [r7, #32]
}
 800aeaa:	bf00      	nop
 800aeac:	e7fe      	b.n	800aeac <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00a      	beq.n	800aecc <xQueueGiveFromISR+0x48>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	61fb      	str	r3, [r7, #28]
}
 800aec8:	bf00      	nop
 800aeca:	e7fe      	b.n	800aeca <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d103      	bne.n	800aedc <xQueueGiveFromISR+0x58>
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <xQueueGiveFromISR+0x5c>
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <xQueueGiveFromISR+0x5e>
 800aee0:	2300      	movs	r3, #0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10a      	bne.n	800aefc <xQueueGiveFromISR+0x78>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	61bb      	str	r3, [r7, #24]
}
 800aef8:	bf00      	nop
 800aefa:	e7fe      	b.n	800aefa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aefc:	f001 fe9c 	bl	800cc38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af00:	f3ef 8211 	mrs	r2, BASEPRI
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	f383 8811 	msr	BASEPRI, r3
 800af0c:	f3bf 8f6f 	isb	sy
 800af10:	f3bf 8f4f 	dsb	sy
 800af14:	617a      	str	r2, [r7, #20]
 800af16:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af18:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af20:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af28:	429a      	cmp	r2, r3
 800af2a:	d22b      	bcs.n	800af84 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af46:	d112      	bne.n	800af6e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d016      	beq.n	800af7e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af52:	3324      	adds	r3, #36	; 0x24
 800af54:	4618      	mov	r0, r3
 800af56:	f001 f871 	bl	800c03c <xTaskRemoveFromEventList>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00e      	beq.n	800af7e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00b      	beq.n	800af7e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2201      	movs	r2, #1
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	e007      	b.n	800af7e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af72:	3301      	adds	r3, #1
 800af74:	b2db      	uxtb	r3, r3
 800af76:	b25a      	sxtb	r2, r3
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af7e:	2301      	movs	r3, #1
 800af80:	637b      	str	r3, [r7, #52]	; 0x34
 800af82:	e001      	b.n	800af88 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af84:	2300      	movs	r3, #0
 800af86:	637b      	str	r3, [r7, #52]	; 0x34
 800af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af96:	4618      	mov	r0, r3
 800af98:	3738      	adds	r7, #56	; 0x38
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
	...

0800afa0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08e      	sub	sp, #56	; 0x38
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800afaa:	2300      	movs	r3, #0
 800afac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800afb2:	2300      	movs	r3, #0
 800afb4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800afbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc0:	f383 8811 	msr	BASEPRI, r3
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	f3bf 8f4f 	dsb	sy
 800afcc:	623b      	str	r3, [r7, #32]
}
 800afce:	bf00      	nop
 800afd0:	e7fe      	b.n	800afd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800afd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	61fb      	str	r3, [r7, #28]
}
 800afec:	bf00      	nop
 800afee:	e7fe      	b.n	800afee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aff0:	f001 f9cc 	bl	800c38c <xTaskGetSchedulerState>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d102      	bne.n	800b000 <xQueueSemaphoreTake+0x60>
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <xQueueSemaphoreTake+0x64>
 800b000:	2301      	movs	r3, #1
 800b002:	e000      	b.n	800b006 <xQueueSemaphoreTake+0x66>
 800b004:	2300      	movs	r3, #0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10a      	bne.n	800b020 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	61bb      	str	r3, [r7, #24]
}
 800b01c:	bf00      	nop
 800b01e:	e7fe      	b.n	800b01e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b020:	f001 fd28 	bl	800ca74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b028:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d024      	beq.n	800b07a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b032:	1e5a      	subs	r2, r3, #1
 800b034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b036:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d104      	bne.n	800b04a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800b040:	f001 fb6e 	bl	800c720 <pvTaskIncrementMutexHeldCount>
 800b044:	4602      	mov	r2, r0
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00f      	beq.n	800b072 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b054:	3310      	adds	r3, #16
 800b056:	4618      	mov	r0, r3
 800b058:	f000 fff0 	bl	800c03c <xTaskRemoveFromEventList>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d007      	beq.n	800b072 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b062:	4b54      	ldr	r3, [pc, #336]	; (800b1b4 <xQueueSemaphoreTake+0x214>)
 800b064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b072:	f001 fd2f 	bl	800cad4 <vPortExitCritical>
				return pdPASS;
 800b076:	2301      	movs	r3, #1
 800b078:	e097      	b.n	800b1aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d111      	bne.n	800b0a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00a      	beq.n	800b09c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	617b      	str	r3, [r7, #20]
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b09c:	f001 fd1a 	bl	800cad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e082      	b.n	800b1aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b0aa:	f107 030c 	add.w	r3, r7, #12
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f001 f826 	bl	800c100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0b8:	f001 fd0c 	bl	800cad4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0bc:	f000 fdd0 	bl	800bc60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0c0:	f001 fcd8 	bl	800ca74 <vPortEnterCritical>
 800b0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ca:	b25b      	sxtb	r3, r3
 800b0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d0:	d103      	bne.n	800b0da <xQueueSemaphoreTake+0x13a>
 800b0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0e0:	b25b      	sxtb	r3, r3
 800b0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e6:	d103      	bne.n	800b0f0 <xQueueSemaphoreTake+0x150>
 800b0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0f0:	f001 fcf0 	bl	800cad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0f4:	463a      	mov	r2, r7
 800b0f6:	f107 030c 	add.w	r3, r7, #12
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f001 f815 	bl	800c12c <xTaskCheckForTimeOut>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d132      	bne.n	800b16e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b10a:	f000 f9ed 	bl	800b4e8 <prvIsQueueEmpty>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d026      	beq.n	800b162 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d109      	bne.n	800b130 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b11c:	f001 fcaa 	bl	800ca74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800b120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	4618      	mov	r0, r3
 800b126:	f001 f94f 	bl	800c3c8 <xTaskPriorityInherit>
 800b12a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b12c:	f001 fcd2 	bl	800cad4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	3324      	adds	r3, #36	; 0x24
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	4611      	mov	r1, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 ff5b 	bl	800bff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b13e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b140:	f000 f980 	bl	800b444 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b144:	f000 fd9a 	bl	800bc7c <xTaskResumeAll>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f47f af68 	bne.w	800b020 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b150:	4b18      	ldr	r3, [pc, #96]	; (800b1b4 <xQueueSemaphoreTake+0x214>)
 800b152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b156:	601a      	str	r2, [r3, #0]
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	e75e      	b.n	800b020 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b164:	f000 f96e 	bl	800b444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b168:	f000 fd88 	bl	800bc7c <xTaskResumeAll>
 800b16c:	e758      	b.n	800b020 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b16e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b170:	f000 f968 	bl	800b444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b174:	f000 fd82 	bl	800bc7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b17a:	f000 f9b5 	bl	800b4e8 <prvIsQueueEmpty>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	f43f af4d 	beq.w	800b020 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00d      	beq.n	800b1a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b18c:	f001 fc72 	bl	800ca74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b192:	f000 f8af 	bl	800b2f4 <prvGetDisinheritPriorityAfterTimeout>
 800b196:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f001 fa1e 	bl	800c5e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b1a4:	f001 fc96 	bl	800cad4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3738      	adds	r7, #56	; 0x38
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	e000ed04 	.word	0xe000ed04

0800b1b8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08e      	sub	sp, #56	; 0x38
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d10a      	bne.n	800b1e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	623b      	str	r3, [r7, #32]
}
 800b1e0:	bf00      	nop
 800b1e2:	e7fe      	b.n	800b1e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d103      	bne.n	800b1f2 <xQueueReceiveFromISR+0x3a>
 800b1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <xQueueReceiveFromISR+0x3e>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <xQueueReceiveFromISR+0x40>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10a      	bne.n	800b212 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	61fb      	str	r3, [r7, #28]
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b212:	f001 fd11 	bl	800cc38 <vPortValidateInterruptPriority>
	__asm volatile
 800b216:	f3ef 8211 	mrs	r2, BASEPRI
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	61ba      	str	r2, [r7, #24]
 800b22c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b22e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b230:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b236:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d02f      	beq.n	800b29e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b24c:	f000 f8d4 	bl	800b3f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	1e5a      	subs	r2, r3, #1
 800b254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b256:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b258:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d112      	bne.n	800b288 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d016      	beq.n	800b298 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	3310      	adds	r3, #16
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 fee4 	bl	800c03c <xTaskRemoveFromEventList>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00e      	beq.n	800b298 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	601a      	str	r2, [r3, #0]
 800b286:	e007      	b.n	800b298 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b28c:	3301      	adds	r3, #1
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	b25a      	sxtb	r2, r3
 800b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b298:	2301      	movs	r3, #1
 800b29a:	637b      	str	r3, [r7, #52]	; 0x34
 800b29c:	e001      	b.n	800b2a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	f383 8811 	msr	BASEPRI, r3
}
 800b2ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3738      	adds	r7, #56	; 0x38
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10a      	bne.n	800b2e0 <vQueueDelete+0x28>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	60bb      	str	r3, [r7, #8]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 f92f 	bl	800b544 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f001 fdaa 	bl	800ce40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b2ec:	bf00      	nop
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f1c3 0307 	rsb	r3, r3, #7
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	e001      	b.n	800b316 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b312:	2300      	movs	r3, #0
 800b314:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b316:	68fb      	ldr	r3, [r7, #12]
	}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b086      	sub	sp, #24
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b330:	2300      	movs	r3, #0
 800b332:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b338:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10d      	bne.n	800b35e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d14d      	bne.n	800b3e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	4618      	mov	r0, r3
 800b350:	f001 f8c0 	bl	800c4d4 <xTaskPriorityDisinherit>
 800b354:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	605a      	str	r2, [r3, #4]
 800b35c:	e043      	b.n	800b3e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d119      	bne.n	800b398 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6898      	ldr	r0, [r3, #8]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36c:	461a      	mov	r2, r3
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	f001 feb8 	bl	800d0e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b37c:	441a      	add	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	689a      	ldr	r2, [r3, #8]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d32b      	bcc.n	800b3e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	609a      	str	r2, [r3, #8]
 800b396:	e026      	b.n	800b3e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68d8      	ldr	r0, [r3, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	68b9      	ldr	r1, [r7, #8]
 800b3a4:	f001 fe9e 	bl	800d0e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b0:	425b      	negs	r3, r3
 800b3b2:	441a      	add	r2, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	68da      	ldr	r2, [r3, #12]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d207      	bcs.n	800b3d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3cc:	425b      	negs	r3, r3
 800b3ce:	441a      	add	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d105      	bne.n	800b3e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3ee:	697b      	ldr	r3, [r7, #20]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b406:	2b00      	cmp	r3, #0
 800b408:	d018      	beq.n	800b43c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	68da      	ldr	r2, [r3, #12]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b412:	441a      	add	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	429a      	cmp	r2, r3
 800b422:	d303      	bcc.n	800b42c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	68d9      	ldr	r1, [r3, #12]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b434:	461a      	mov	r2, r3
 800b436:	6838      	ldr	r0, [r7, #0]
 800b438:	f001 fe54 	bl	800d0e4 <memcpy>
	}
}
 800b43c:	bf00      	nop
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b44c:	f001 fb12 	bl	800ca74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b456:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b458:	e011      	b.n	800b47e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d012      	beq.n	800b488 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3324      	adds	r3, #36	; 0x24
 800b466:	4618      	mov	r0, r3
 800b468:	f000 fde8 	bl	800c03c <xTaskRemoveFromEventList>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b472:	f000 febd 	bl	800c1f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	3b01      	subs	r3, #1
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b482:	2b00      	cmp	r3, #0
 800b484:	dce9      	bgt.n	800b45a <prvUnlockQueue+0x16>
 800b486:	e000      	b.n	800b48a <prvUnlockQueue+0x46>
					break;
 800b488:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	22ff      	movs	r2, #255	; 0xff
 800b48e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b492:	f001 fb1f 	bl	800cad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b496:	f001 faed 	bl	800ca74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4a2:	e011      	b.n	800b4c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d012      	beq.n	800b4d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3310      	adds	r3, #16
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fdc3 	bl	800c03c <xTaskRemoveFromEventList>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4bc:	f000 fe98 	bl	800c1f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	dce9      	bgt.n	800b4a4 <prvUnlockQueue+0x60>
 800b4d0:	e000      	b.n	800b4d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	22ff      	movs	r2, #255	; 0xff
 800b4d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b4dc:	f001 fafa 	bl	800cad4 <vPortExitCritical>
}
 800b4e0:	bf00      	nop
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4f0:	f001 fac0 	bl	800ca74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d102      	bne.n	800b502 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	60fb      	str	r3, [r7, #12]
 800b500:	e001      	b.n	800b506 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b506:	f001 fae5 	bl	800cad4 <vPortExitCritical>

	return xReturn;
 800b50a:	68fb      	ldr	r3, [r7, #12]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b51c:	f001 faaa 	bl	800ca74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b528:	429a      	cmp	r2, r3
 800b52a:	d102      	bne.n	800b532 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b52c:	2301      	movs	r3, #1
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	e001      	b.n	800b536 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b532:	2300      	movs	r3, #0
 800b534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b536:	f001 facd 	bl	800cad4 <vPortExitCritical>

	return xReturn;
 800b53a:	68fb      	ldr	r3, [r7, #12]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b54c:	2300      	movs	r3, #0
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	e016      	b.n	800b580 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b552:	4a10      	ldr	r2, [pc, #64]	; (800b594 <vQueueUnregisterQueue+0x50>)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	00db      	lsls	r3, r3, #3
 800b558:	4413      	add	r3, r2
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d10b      	bne.n	800b57a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b562:	4a0c      	ldr	r2, [pc, #48]	; (800b594 <vQueueUnregisterQueue+0x50>)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2100      	movs	r1, #0
 800b568:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b56c:	4a09      	ldr	r2, [pc, #36]	; (800b594 <vQueueUnregisterQueue+0x50>)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	00db      	lsls	r3, r3, #3
 800b572:	4413      	add	r3, r2
 800b574:	2200      	movs	r2, #0
 800b576:	605a      	str	r2, [r3, #4]
				break;
 800b578:	e006      	b.n	800b588 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	3301      	adds	r3, #1
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b07      	cmp	r3, #7
 800b584:	d9e5      	bls.n	800b552 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b586:	bf00      	nop
 800b588:	bf00      	nop
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	20002324 	.word	0x20002324

0800b598 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08c      	sub	sp, #48	; 0x30
 800b59c:	af04      	add	r7, sp, #16
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5a8:	88fb      	ldrh	r3, [r7, #6]
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f001 fb83 	bl	800ccb8 <pvPortMalloc>
 800b5b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00e      	beq.n	800b5d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b5ba:	20b4      	movs	r0, #180	; 0xb4
 800b5bc:	f001 fb7c 	bl	800ccb8 <pvPortMalloc>
 800b5c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5c2:	69fb      	ldr	r3, [r7, #28]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d003      	beq.n	800b5d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	631a      	str	r2, [r3, #48]	; 0x30
 800b5ce:	e005      	b.n	800b5dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5d0:	6978      	ldr	r0, [r7, #20]
 800b5d2:	f001 fc35 	bl	800ce40 <vPortFree>
 800b5d6:	e001      	b.n	800b5dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d013      	beq.n	800b60a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5e2:	88fa      	ldrh	r2, [r7, #6]
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	9302      	str	r3, [sp, #8]
 800b5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f000 f80f 	bl	800b61c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5fe:	69f8      	ldr	r0, [r7, #28]
 800b600:	f000 f8a2 	bl	800b748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b604:	2301      	movs	r3, #1
 800b606:	61bb      	str	r3, [r7, #24]
 800b608:	e002      	b.n	800b610 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b60a:	f04f 33ff 	mov.w	r3, #4294967295
 800b60e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b610:	69bb      	ldr	r3, [r7, #24]
	}
 800b612:	4618      	mov	r0, r3
 800b614:	3720      	adds	r7, #32
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b634:	3b01      	subs	r3, #1
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	f003 0307 	and.w	r3, r3, #7
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	617b      	str	r3, [r7, #20]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b664:	2300      	movs	r3, #0
 800b666:	61fb      	str	r3, [r7, #28]
 800b668:	e012      	b.n	800b690 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	4413      	add	r3, r2
 800b670:	7819      	ldrb	r1, [r3, #0]
 800b672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	4413      	add	r3, r2
 800b678:	3334      	adds	r3, #52	; 0x34
 800b67a:	460a      	mov	r2, r1
 800b67c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b67e:	68ba      	ldr	r2, [r7, #8]
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	4413      	add	r3, r2
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d006      	beq.n	800b698 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	3301      	adds	r3, #1
 800b68e:	61fb      	str	r3, [r7, #28]
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	2b0f      	cmp	r3, #15
 800b694:	d9e9      	bls.n	800b66a <prvInitialiseNewTask+0x4e>
 800b696:	e000      	b.n	800b69a <prvInitialiseNewTask+0x7e>
		{
			break;
 800b698:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	2b06      	cmp	r3, #6
 800b6a6:	d901      	bls.n	800b6ac <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6a8:	2306      	movs	r3, #6
 800b6aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7ff f958 	bl	800a978 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	3318      	adds	r3, #24
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff f953 	bl	800a978 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	f1c3 0207 	rsb	r2, r3, #7
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	334c      	adds	r3, #76	; 0x4c
 800b6fc:	2260      	movs	r2, #96	; 0x60
 800b6fe:	2100      	movs	r1, #0
 800b700:	4618      	mov	r0, r3
 800b702:	f001 fcfd 	bl	800d100 <memset>
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	4a0c      	ldr	r2, [pc, #48]	; (800b73c <prvInitialiseNewTask+0x120>)
 800b70a:	651a      	str	r2, [r3, #80]	; 0x50
 800b70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70e:	4a0c      	ldr	r2, [pc, #48]	; (800b740 <prvInitialiseNewTask+0x124>)
 800b710:	655a      	str	r2, [r3, #84]	; 0x54
 800b712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b714:	4a0b      	ldr	r2, [pc, #44]	; (800b744 <prvInitialiseNewTask+0x128>)
 800b716:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	68f9      	ldr	r1, [r7, #12]
 800b71c:	69b8      	ldr	r0, [r7, #24]
 800b71e:	f001 f879 	bl	800c814 <pxPortInitialiseStack>
 800b722:	4602      	mov	r2, r0
 800b724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b726:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b732:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b734:	bf00      	nop
 800b736:	3720      	adds	r7, #32
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	0800e04c 	.word	0x0800e04c
 800b740:	0800e06c 	.word	0x0800e06c
 800b744:	0800e02c 	.word	0x0800e02c

0800b748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b750:	f001 f990 	bl	800ca74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b754:	4b2a      	ldr	r3, [pc, #168]	; (800b800 <prvAddNewTaskToReadyList+0xb8>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	4a29      	ldr	r2, [pc, #164]	; (800b800 <prvAddNewTaskToReadyList+0xb8>)
 800b75c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b75e:	4b29      	ldr	r3, [pc, #164]	; (800b804 <prvAddNewTaskToReadyList+0xbc>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b766:	4a27      	ldr	r2, [pc, #156]	; (800b804 <prvAddNewTaskToReadyList+0xbc>)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b76c:	4b24      	ldr	r3, [pc, #144]	; (800b800 <prvAddNewTaskToReadyList+0xb8>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d110      	bne.n	800b796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b774:	f000 fd60 	bl	800c238 <prvInitialiseTaskLists>
 800b778:	e00d      	b.n	800b796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b77a:	4b23      	ldr	r3, [pc, #140]	; (800b808 <prvAddNewTaskToReadyList+0xc0>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d109      	bne.n	800b796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b782:	4b20      	ldr	r3, [pc, #128]	; (800b804 <prvAddNewTaskToReadyList+0xbc>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d802      	bhi.n	800b796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b790:	4a1c      	ldr	r2, [pc, #112]	; (800b804 <prvAddNewTaskToReadyList+0xbc>)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b796:	4b1d      	ldr	r3, [pc, #116]	; (800b80c <prvAddNewTaskToReadyList+0xc4>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3301      	adds	r3, #1
 800b79c:	4a1b      	ldr	r2, [pc, #108]	; (800b80c <prvAddNewTaskToReadyList+0xc4>)
 800b79e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	409a      	lsls	r2, r3
 800b7a8:	4b19      	ldr	r3, [pc, #100]	; (800b810 <prvAddNewTaskToReadyList+0xc8>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	4a18      	ldr	r2, [pc, #96]	; (800b810 <prvAddNewTaskToReadyList+0xc8>)
 800b7b0:	6013      	str	r3, [r2, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b6:	4613      	mov	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4413      	add	r3, r2
 800b7bc:	009b      	lsls	r3, r3, #2
 800b7be:	4a15      	ldr	r2, [pc, #84]	; (800b814 <prvAddNewTaskToReadyList+0xcc>)
 800b7c0:	441a      	add	r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	f7ff f8e2 	bl	800a992 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7ce:	f001 f981 	bl	800cad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7d2:	4b0d      	ldr	r3, [pc, #52]	; (800b808 <prvAddNewTaskToReadyList+0xc0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00e      	beq.n	800b7f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7da:	4b0a      	ldr	r3, [pc, #40]	; (800b804 <prvAddNewTaskToReadyList+0xbc>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d207      	bcs.n	800b7f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7e8:	4b0b      	ldr	r3, [pc, #44]	; (800b818 <prvAddNewTaskToReadyList+0xd0>)
 800b7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20002464 	.word	0x20002464
 800b804:	20002364 	.word	0x20002364
 800b808:	20002470 	.word	0x20002470
 800b80c:	20002480 	.word	0x20002480
 800b810:	2000246c 	.word	0x2000246c
 800b814:	20002368 	.word	0x20002368
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b824:	2300      	movs	r3, #0
 800b826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d017      	beq.n	800b85e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b82e:	4b13      	ldr	r3, [pc, #76]	; (800b87c <vTaskDelay+0x60>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00a      	beq.n	800b84c <vTaskDelay+0x30>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	60bb      	str	r3, [r7, #8]
}
 800b848:	bf00      	nop
 800b84a:	e7fe      	b.n	800b84a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b84c:	f000 fa08 	bl	800bc60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b850:	2100      	movs	r1, #0
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 ff78 	bl	800c748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b858:	f000 fa10 	bl	800bc7c <xTaskResumeAll>
 800b85c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d107      	bne.n	800b874 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b864:	4b06      	ldr	r3, [pc, #24]	; (800b880 <vTaskDelay+0x64>)
 800b866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b874:	bf00      	nop
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	2000248c 	.word	0x2000248c
 800b880:	e000ed04 	.word	0xe000ed04

0800b884 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b88c:	f001 f8f2 	bl	800ca74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d102      	bne.n	800b89c <vTaskSuspend+0x18>
 800b896:	4b3c      	ldr	r3, [pc, #240]	; (800b988 <vTaskSuspend+0x104>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	e000      	b.n	800b89e <vTaskSuspend+0x1a>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f7ff f8d1 	bl	800aa4c <uxListRemove>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d115      	bne.n	800b8dc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b4:	4935      	ldr	r1, [pc, #212]	; (800b98c <vTaskSuspend+0x108>)
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	440b      	add	r3, r1
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <vTaskSuspend+0x58>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d0:	43da      	mvns	r2, r3
 800b8d2:	4b2f      	ldr	r3, [pc, #188]	; (800b990 <vTaskSuspend+0x10c>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	4a2d      	ldr	r2, [pc, #180]	; (800b990 <vTaskSuspend+0x10c>)
 800b8da:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d004      	beq.n	800b8ee <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3318      	adds	r3, #24
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff f8af 	bl	800aa4c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	4827      	ldr	r0, [pc, #156]	; (800b994 <vTaskSuspend+0x110>)
 800b8f6:	f7ff f84c 	bl	800a992 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b900:	b2db      	uxtb	r3, r3
 800b902:	2b01      	cmp	r3, #1
 800b904:	d103      	bne.n	800b90e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b90e:	f001 f8e1 	bl	800cad4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b912:	4b21      	ldr	r3, [pc, #132]	; (800b998 <vTaskSuspend+0x114>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d005      	beq.n	800b926 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b91a:	f001 f8ab 	bl	800ca74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b91e:	f000 fd0f 	bl	800c340 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b922:	f001 f8d7 	bl	800cad4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b926:	4b18      	ldr	r3, [pc, #96]	; (800b988 <vTaskSuspend+0x104>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d127      	bne.n	800b980 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800b930:	4b19      	ldr	r3, [pc, #100]	; (800b998 <vTaskSuspend+0x114>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d017      	beq.n	800b968 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b938:	4b18      	ldr	r3, [pc, #96]	; (800b99c <vTaskSuspend+0x118>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00a      	beq.n	800b956 <vTaskSuspend+0xd2>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	60bb      	str	r3, [r7, #8]
}
 800b952:	bf00      	nop
 800b954:	e7fe      	b.n	800b954 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800b956:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <vTaskSuspend+0x11c>)
 800b958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b966:	e00b      	b.n	800b980 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800b968:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <vTaskSuspend+0x110>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	4b0d      	ldr	r3, [pc, #52]	; (800b9a4 <vTaskSuspend+0x120>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	429a      	cmp	r2, r3
 800b972:	d103      	bne.n	800b97c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800b974:	4b04      	ldr	r3, [pc, #16]	; (800b988 <vTaskSuspend+0x104>)
 800b976:	2200      	movs	r2, #0
 800b978:	601a      	str	r2, [r3, #0]
	}
 800b97a:	e001      	b.n	800b980 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800b97c:	f000 fad8 	bl	800bf30 <vTaskSwitchContext>
	}
 800b980:	bf00      	nop
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	20002364 	.word	0x20002364
 800b98c:	20002368 	.word	0x20002368
 800b990:	2000246c 	.word	0x2000246c
 800b994:	20002450 	.word	0x20002450
 800b998:	20002470 	.word	0x20002470
 800b99c:	2000248c 	.word	0x2000248c
 800b9a0:	e000ed04 	.word	0xe000ed04
 800b9a4:	20002464 	.word	0x20002464

0800b9a8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b087      	sub	sp, #28
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	60fb      	str	r3, [r7, #12]
}
 800b9d0:	bf00      	nop
 800b9d2:	e7fe      	b.n	800b9d2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	4a0f      	ldr	r2, [pc, #60]	; (800ba18 <prvTaskIsTaskSuspended+0x70>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d101      	bne.n	800b9e2 <prvTaskIsTaskSuspended+0x3a>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e000      	b.n	800b9e4 <prvTaskIsTaskSuspended+0x3c>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00f      	beq.n	800ba08 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ec:	4a0b      	ldr	r2, [pc, #44]	; (800ba1c <prvTaskIsTaskSuspended+0x74>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d00a      	beq.n	800ba08 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <prvTaskIsTaskSuspended+0x56>
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e000      	b.n	800ba00 <prvTaskIsTaskSuspended+0x58>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800ba04:	2301      	movs	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba08:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	20002450 	.word	0x20002450
 800ba1c:	20002424 	.word	0x20002424

0800ba20 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d10a      	bne.n	800ba48 <vTaskResume+0x28>
	__asm volatile
 800ba32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba36:	f383 8811 	msr	BASEPRI, r3
 800ba3a:	f3bf 8f6f 	isb	sy
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	60bb      	str	r3, [r7, #8]
}
 800ba44:	bf00      	nop
 800ba46:	e7fe      	b.n	800ba46 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d039      	beq.n	800bac2 <vTaskResume+0xa2>
 800ba4e:	4b1f      	ldr	r3, [pc, #124]	; (800bacc <vTaskResume+0xac>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d034      	beq.n	800bac2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800ba58:	f001 f80c 	bl	800ca74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff ffa3 	bl	800b9a8 <prvTaskIsTaskSuspended>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d02a      	beq.n	800babe <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe ffed 	bl	800aa4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba76:	2201      	movs	r2, #1
 800ba78:	409a      	lsls	r2, r3
 800ba7a:	4b15      	ldr	r3, [pc, #84]	; (800bad0 <vTaskResume+0xb0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	4a13      	ldr	r2, [pc, #76]	; (800bad0 <vTaskResume+0xb0>)
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba88:	4613      	mov	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4a10      	ldr	r2, [pc, #64]	; (800bad4 <vTaskResume+0xb4>)
 800ba92:	441a      	add	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3304      	adds	r3, #4
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	f7fe ff79 	bl	800a992 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa4:	4b09      	ldr	r3, [pc, #36]	; (800bacc <vTaskResume+0xac>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baaa:	429a      	cmp	r2, r3
 800baac:	d307      	bcc.n	800babe <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800baae:	4b0a      	ldr	r3, [pc, #40]	; (800bad8 <vTaskResume+0xb8>)
 800bab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	f3bf 8f4f 	dsb	sy
 800baba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800babe:	f001 f809 	bl	800cad4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	20002364 	.word	0x20002364
 800bad0:	2000246c 	.word	0x2000246c
 800bad4:	20002368 	.word	0x20002368
 800bad8:	e000ed04 	.word	0xe000ed04

0800badc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08a      	sub	sp, #40	; 0x28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	61bb      	str	r3, [r7, #24]
}
 800bb04:	bf00      	nop
 800bb06:	e7fe      	b.n	800bb06 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb08:	f001 f896 	bl	800cc38 <vPortValidateInterruptPriority>
	__asm volatile
 800bb0c:	f3ef 8211 	mrs	r2, BASEPRI
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	617a      	str	r2, [r7, #20]
 800bb22:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bb24:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb26:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bb28:	6a38      	ldr	r0, [r7, #32]
 800bb2a:	f7ff ff3d 	bl	800b9a8 <prvTaskIsTaskSuspended>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d02f      	beq.n	800bb94 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb34:	4b1d      	ldr	r3, [pc, #116]	; (800bbac <xTaskResumeFromISR+0xd0>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d125      	bne.n	800bb88 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
 800bb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb40:	4b1b      	ldr	r3, [pc, #108]	; (800bbb0 <xTaskResumeFromISR+0xd4>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d301      	bcc.n	800bb4e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	3304      	adds	r3, #4
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fe ff7a 	bl	800aa4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	409a      	lsls	r2, r3
 800bb60:	4b14      	ldr	r3, [pc, #80]	; (800bbb4 <xTaskResumeFromISR+0xd8>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	4a13      	ldr	r2, [pc, #76]	; (800bbb4 <xTaskResumeFromISR+0xd8>)
 800bb68:	6013      	str	r3, [r2, #0]
 800bb6a:	6a3b      	ldr	r3, [r7, #32]
 800bb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4a10      	ldr	r2, [pc, #64]	; (800bbb8 <xTaskResumeFromISR+0xdc>)
 800bb78:	441a      	add	r2, r3
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4610      	mov	r0, r2
 800bb82:	f7fe ff06 	bl	800a992 <vListInsertEnd>
 800bb86:	e005      	b.n	800bb94 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	3318      	adds	r3, #24
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	480b      	ldr	r0, [pc, #44]	; (800bbbc <xTaskResumeFromISR+0xe0>)
 800bb90:	f7fe feff 	bl	800a992 <vListInsertEnd>
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f383 8811 	msr	BASEPRI, r3
}
 800bb9e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3728      	adds	r7, #40	; 0x28
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	2000248c 	.word	0x2000248c
 800bbb0:	20002364 	.word	0x20002364
 800bbb4:	2000246c 	.word	0x2000246c
 800bbb8:	20002368 	.word	0x20002368
 800bbbc:	20002424 	.word	0x20002424

0800bbc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800bbc6:	4b1e      	ldr	r3, [pc, #120]	; (800bc40 <vTaskStartScheduler+0x80>)
 800bbc8:	9301      	str	r3, [sp, #4]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2280      	movs	r2, #128	; 0x80
 800bbd2:	491c      	ldr	r1, [pc, #112]	; (800bc44 <vTaskStartScheduler+0x84>)
 800bbd4:	481c      	ldr	r0, [pc, #112]	; (800bc48 <vTaskStartScheduler+0x88>)
 800bbd6:	f7ff fcdf 	bl	800b598 <xTaskCreate>
 800bbda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d11b      	bne.n	800bc1a <vTaskStartScheduler+0x5a>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	60bb      	str	r3, [r7, #8]
}
 800bbf4:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbf6:	4b15      	ldr	r3, [pc, #84]	; (800bc4c <vTaskStartScheduler+0x8c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	334c      	adds	r3, #76	; 0x4c
 800bbfc:	4a14      	ldr	r2, [pc, #80]	; (800bc50 <vTaskStartScheduler+0x90>)
 800bbfe:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc00:	4b14      	ldr	r3, [pc, #80]	; (800bc54 <vTaskStartScheduler+0x94>)
 800bc02:	f04f 32ff 	mov.w	r2, #4294967295
 800bc06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc08:	4b13      	ldr	r3, [pc, #76]	; (800bc58 <vTaskStartScheduler+0x98>)
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <vTaskStartScheduler+0x9c>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc14:	f000 fe8c 	bl	800c930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc18:	e00e      	b.n	800bc38 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc20:	d10a      	bne.n	800bc38 <vTaskStartScheduler+0x78>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	607b      	str	r3, [r7, #4]
}
 800bc34:	bf00      	nop
 800bc36:	e7fe      	b.n	800bc36 <vTaskStartScheduler+0x76>
}
 800bc38:	bf00      	nop
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20002488 	.word	0x20002488
 800bc44:	0800df6c 	.word	0x0800df6c
 800bc48:	0800c209 	.word	0x0800c209
 800bc4c:	20002364 	.word	0x20002364
 800bc50:	20000030 	.word	0x20000030
 800bc54:	20002484 	.word	0x20002484
 800bc58:	20002470 	.word	0x20002470
 800bc5c:	20002468 	.word	0x20002468

0800bc60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc60:	b480      	push	{r7}
 800bc62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bc64:	4b04      	ldr	r3, [pc, #16]	; (800bc78 <vTaskSuspendAll+0x18>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	4a03      	ldr	r2, [pc, #12]	; (800bc78 <vTaskSuspendAll+0x18>)
 800bc6c:	6013      	str	r3, [r2, #0]
}
 800bc6e:	bf00      	nop
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	2000248c 	.word	0x2000248c

0800bc7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc86:	2300      	movs	r3, #0
 800bc88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc8a:	4b41      	ldr	r3, [pc, #260]	; (800bd90 <xTaskResumeAll+0x114>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10a      	bne.n	800bca8 <xTaskResumeAll+0x2c>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	603b      	str	r3, [r7, #0]
}
 800bca4:	bf00      	nop
 800bca6:	e7fe      	b.n	800bca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bca8:	f000 fee4 	bl	800ca74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bcac:	4b38      	ldr	r3, [pc, #224]	; (800bd90 <xTaskResumeAll+0x114>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	4a37      	ldr	r2, [pc, #220]	; (800bd90 <xTaskResumeAll+0x114>)
 800bcb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcb6:	4b36      	ldr	r3, [pc, #216]	; (800bd90 <xTaskResumeAll+0x114>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d161      	bne.n	800bd82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcbe:	4b35      	ldr	r3, [pc, #212]	; (800bd94 <xTaskResumeAll+0x118>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d05d      	beq.n	800bd82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcc6:	e02e      	b.n	800bd26 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bcc8:	4b33      	ldr	r3, [pc, #204]	; (800bd98 <xTaskResumeAll+0x11c>)
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3318      	adds	r3, #24
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f7fe feb9 	bl	800aa4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	3304      	adds	r3, #4
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe feb4 	bl	800aa4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce8:	2201      	movs	r2, #1
 800bcea:	409a      	lsls	r2, r3
 800bcec:	4b2b      	ldr	r3, [pc, #172]	; (800bd9c <xTaskResumeAll+0x120>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	4a2a      	ldr	r2, [pc, #168]	; (800bd9c <xTaskResumeAll+0x120>)
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4413      	add	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4a27      	ldr	r2, [pc, #156]	; (800bda0 <xTaskResumeAll+0x124>)
 800bd04:	441a      	add	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	f7fe fe40 	bl	800a992 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	4b23      	ldr	r3, [pc, #140]	; (800bda4 <xTaskResumeAll+0x128>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d302      	bcc.n	800bd26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bd20:	4b21      	ldr	r3, [pc, #132]	; (800bda8 <xTaskResumeAll+0x12c>)
 800bd22:	2201      	movs	r2, #1
 800bd24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd26:	4b1c      	ldr	r3, [pc, #112]	; (800bd98 <xTaskResumeAll+0x11c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1cc      	bne.n	800bcc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d001      	beq.n	800bd38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd34:	f000 fb04 	bl	800c340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bd38:	4b1c      	ldr	r3, [pc, #112]	; (800bdac <xTaskResumeAll+0x130>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d010      	beq.n	800bd66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd44:	f000 f836 	bl	800bdb4 <xTaskIncrementTick>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bd4e:	4b16      	ldr	r3, [pc, #88]	; (800bda8 <xTaskResumeAll+0x12c>)
 800bd50:	2201      	movs	r2, #1
 800bd52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1f1      	bne.n	800bd44 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bd60:	4b12      	ldr	r3, [pc, #72]	; (800bdac <xTaskResumeAll+0x130>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd66:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <xTaskResumeAll+0x12c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d009      	beq.n	800bd82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd72:	4b0f      	ldr	r3, [pc, #60]	; (800bdb0 <xTaskResumeAll+0x134>)
 800bd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd82:	f000 fea7 	bl	800cad4 <vPortExitCritical>

	return xAlreadyYielded;
 800bd86:	68bb      	ldr	r3, [r7, #8]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	2000248c 	.word	0x2000248c
 800bd94:	20002464 	.word	0x20002464
 800bd98:	20002424 	.word	0x20002424
 800bd9c:	2000246c 	.word	0x2000246c
 800bda0:	20002368 	.word	0x20002368
 800bda4:	20002364 	.word	0x20002364
 800bda8:	20002478 	.word	0x20002478
 800bdac:	20002474 	.word	0x20002474
 800bdb0:	e000ed04 	.word	0xe000ed04

0800bdb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdbe:	4b51      	ldr	r3, [pc, #324]	; (800bf04 <xTaskIncrementTick+0x150>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f040 808d 	bne.w	800bee2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bdc8:	4b4f      	ldr	r3, [pc, #316]	; (800bf08 <xTaskIncrementTick+0x154>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bdd0:	4a4d      	ldr	r2, [pc, #308]	; (800bf08 <xTaskIncrementTick+0x154>)
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d120      	bne.n	800be1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bddc:	4b4b      	ldr	r3, [pc, #300]	; (800bf0c <xTaskIncrementTick+0x158>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <xTaskIncrementTick+0x48>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	603b      	str	r3, [r7, #0]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <xTaskIncrementTick+0x46>
 800bdfc:	4b43      	ldr	r3, [pc, #268]	; (800bf0c <xTaskIncrementTick+0x158>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	4b43      	ldr	r3, [pc, #268]	; (800bf10 <xTaskIncrementTick+0x15c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a41      	ldr	r2, [pc, #260]	; (800bf0c <xTaskIncrementTick+0x158>)
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	4a41      	ldr	r2, [pc, #260]	; (800bf10 <xTaskIncrementTick+0x15c>)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	4b40      	ldr	r3, [pc, #256]	; (800bf14 <xTaskIncrementTick+0x160>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3301      	adds	r3, #1
 800be16:	4a3f      	ldr	r2, [pc, #252]	; (800bf14 <xTaskIncrementTick+0x160>)
 800be18:	6013      	str	r3, [r2, #0]
 800be1a:	f000 fa91 	bl	800c340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be1e:	4b3e      	ldr	r3, [pc, #248]	; (800bf18 <xTaskIncrementTick+0x164>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	429a      	cmp	r2, r3
 800be26:	d34d      	bcc.n	800bec4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be28:	4b38      	ldr	r3, [pc, #224]	; (800bf0c <xTaskIncrementTick+0x158>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <xTaskIncrementTick+0x82>
 800be32:	2301      	movs	r3, #1
 800be34:	e000      	b.n	800be38 <xTaskIncrementTick+0x84>
 800be36:	2300      	movs	r3, #0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be3c:	4b36      	ldr	r3, [pc, #216]	; (800bf18 <xTaskIncrementTick+0x164>)
 800be3e:	f04f 32ff 	mov.w	r2, #4294967295
 800be42:	601a      	str	r2, [r3, #0]
					break;
 800be44:	e03e      	b.n	800bec4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be46:	4b31      	ldr	r3, [pc, #196]	; (800bf0c <xTaskIncrementTick+0x158>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d203      	bcs.n	800be66 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be5e:	4a2e      	ldr	r2, [pc, #184]	; (800bf18 <xTaskIncrementTick+0x164>)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6013      	str	r3, [r2, #0]
						break;
 800be64:	e02e      	b.n	800bec4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	3304      	adds	r3, #4
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fdee 	bl	800aa4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be74:	2b00      	cmp	r3, #0
 800be76:	d004      	beq.n	800be82 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	3318      	adds	r3, #24
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7fe fde5 	bl	800aa4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be86:	2201      	movs	r2, #1
 800be88:	409a      	lsls	r2, r3
 800be8a:	4b24      	ldr	r3, [pc, #144]	; (800bf1c <xTaskIncrementTick+0x168>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4313      	orrs	r3, r2
 800be90:	4a22      	ldr	r2, [pc, #136]	; (800bf1c <xTaskIncrementTick+0x168>)
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be98:	4613      	mov	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4a1f      	ldr	r2, [pc, #124]	; (800bf20 <xTaskIncrementTick+0x16c>)
 800bea2:	441a      	add	r2, r3
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4619      	mov	r1, r3
 800beaa:	4610      	mov	r0, r2
 800beac:	f7fe fd71 	bl	800a992 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beb4:	4b1b      	ldr	r3, [pc, #108]	; (800bf24 <xTaskIncrementTick+0x170>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	429a      	cmp	r2, r3
 800bebc:	d3b4      	bcc.n	800be28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bebe:	2301      	movs	r3, #1
 800bec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bec2:	e7b1      	b.n	800be28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bec4:	4b17      	ldr	r3, [pc, #92]	; (800bf24 <xTaskIncrementTick+0x170>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beca:	4915      	ldr	r1, [pc, #84]	; (800bf20 <xTaskIncrementTick+0x16c>)
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	440b      	add	r3, r1
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d907      	bls.n	800beec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800bedc:	2301      	movs	r3, #1
 800bede:	617b      	str	r3, [r7, #20]
 800bee0:	e004      	b.n	800beec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bee2:	4b11      	ldr	r3, [pc, #68]	; (800bf28 <xTaskIncrementTick+0x174>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3301      	adds	r3, #1
 800bee8:	4a0f      	ldr	r2, [pc, #60]	; (800bf28 <xTaskIncrementTick+0x174>)
 800beea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800beec:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <xTaskIncrementTick+0x178>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800bef4:	2301      	movs	r3, #1
 800bef6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bef8:	697b      	ldr	r3, [r7, #20]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	2000248c 	.word	0x2000248c
 800bf08:	20002468 	.word	0x20002468
 800bf0c:	2000241c 	.word	0x2000241c
 800bf10:	20002420 	.word	0x20002420
 800bf14:	2000247c 	.word	0x2000247c
 800bf18:	20002484 	.word	0x20002484
 800bf1c:	2000246c 	.word	0x2000246c
 800bf20:	20002368 	.word	0x20002368
 800bf24:	20002364 	.word	0x20002364
 800bf28:	20002474 	.word	0x20002474
 800bf2c:	20002478 	.word	0x20002478

0800bf30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf30:	b480      	push	{r7}
 800bf32:	b087      	sub	sp, #28
 800bf34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf36:	4b29      	ldr	r3, [pc, #164]	; (800bfdc <vTaskSwitchContext+0xac>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf3e:	4b28      	ldr	r3, [pc, #160]	; (800bfe0 <vTaskSwitchContext+0xb0>)
 800bf40:	2201      	movs	r2, #1
 800bf42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf44:	e044      	b.n	800bfd0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bf46:	4b26      	ldr	r3, [pc, #152]	; (800bfe0 <vTaskSwitchContext+0xb0>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bf4c:	4b25      	ldr	r3, [pc, #148]	; (800bfe4 <vTaskSwitchContext+0xb4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	fab3 f383 	clz	r3, r3
 800bf58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf5a:	7afb      	ldrb	r3, [r7, #11]
 800bf5c:	f1c3 031f 	rsb	r3, r3, #31
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	4921      	ldr	r1, [pc, #132]	; (800bfe8 <vTaskSwitchContext+0xb8>)
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <vTaskSwitchContext+0x5c>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	607b      	str	r3, [r7, #4]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <vTaskSwitchContext+0x5a>
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	4413      	add	r3, r2
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4a14      	ldr	r2, [pc, #80]	; (800bfe8 <vTaskSwitchContext+0xb8>)
 800bf98:	4413      	add	r3, r2
 800bf9a:	613b      	str	r3, [r7, #16]
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	605a      	str	r2, [r3, #4]
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3308      	adds	r3, #8
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d104      	bne.n	800bfbc <vTaskSwitchContext+0x8c>
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	685a      	ldr	r2, [r3, #4]
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	605a      	str	r2, [r3, #4]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	4a0a      	ldr	r2, [pc, #40]	; (800bfec <vTaskSwitchContext+0xbc>)
 800bfc4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfc6:	4b09      	ldr	r3, [pc, #36]	; (800bfec <vTaskSwitchContext+0xbc>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	334c      	adds	r3, #76	; 0x4c
 800bfcc:	4a08      	ldr	r2, [pc, #32]	; (800bff0 <vTaskSwitchContext+0xc0>)
 800bfce:	6013      	str	r3, [r2, #0]
}
 800bfd0:	bf00      	nop
 800bfd2:	371c      	adds	r7, #28
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	2000248c 	.word	0x2000248c
 800bfe0:	20002478 	.word	0x20002478
 800bfe4:	2000246c 	.word	0x2000246c
 800bfe8:	20002368 	.word	0x20002368
 800bfec:	20002364 	.word	0x20002364
 800bff0:	20000030 	.word	0x20000030

0800bff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	60fb      	str	r3, [r7, #12]
}
 800c016:	bf00      	nop
 800c018:	e7fe      	b.n	800c018 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c01a:	4b07      	ldr	r3, [pc, #28]	; (800c038 <vTaskPlaceOnEventList+0x44>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3318      	adds	r3, #24
 800c020:	4619      	mov	r1, r3
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7fe fcd9 	bl	800a9da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c028:	2101      	movs	r1, #1
 800c02a:	6838      	ldr	r0, [r7, #0]
 800c02c:	f000 fb8c 	bl	800c748 <prvAddCurrentTaskToDelayedList>
}
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20002364 	.word	0x20002364

0800c03c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b086      	sub	sp, #24
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	60fb      	str	r3, [r7, #12]
}
 800c064:	bf00      	nop
 800c066:	e7fe      	b.n	800c066 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	3318      	adds	r3, #24
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe fced 	bl	800aa4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c072:	4b1d      	ldr	r3, [pc, #116]	; (800c0e8 <xTaskRemoveFromEventList+0xac>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d11c      	bne.n	800c0b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fce4 	bl	800aa4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c088:	2201      	movs	r2, #1
 800c08a:	409a      	lsls	r2, r3
 800c08c:	4b17      	ldr	r3, [pc, #92]	; (800c0ec <xTaskRemoveFromEventList+0xb0>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4313      	orrs	r3, r2
 800c092:	4a16      	ldr	r2, [pc, #88]	; (800c0ec <xTaskRemoveFromEventList+0xb0>)
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09a:	4613      	mov	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4413      	add	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4a13      	ldr	r2, [pc, #76]	; (800c0f0 <xTaskRemoveFromEventList+0xb4>)
 800c0a4:	441a      	add	r2, r3
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	4610      	mov	r0, r2
 800c0ae:	f7fe fc70 	bl	800a992 <vListInsertEnd>
 800c0b2:	e005      	b.n	800c0c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	3318      	adds	r3, #24
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	480e      	ldr	r0, [pc, #56]	; (800c0f4 <xTaskRemoveFromEventList+0xb8>)
 800c0bc:	f7fe fc69 	bl	800a992 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c4:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <xTaskRemoveFromEventList+0xbc>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d905      	bls.n	800c0da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c0d2:	4b0a      	ldr	r3, [pc, #40]	; (800c0fc <xTaskRemoveFromEventList+0xc0>)
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	601a      	str	r2, [r3, #0]
 800c0d8:	e001      	b.n	800c0de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c0de:	697b      	ldr	r3, [r7, #20]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3718      	adds	r7, #24
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	2000248c 	.word	0x2000248c
 800c0ec:	2000246c 	.word	0x2000246c
 800c0f0:	20002368 	.word	0x20002368
 800c0f4:	20002424 	.word	0x20002424
 800c0f8:	20002364 	.word	0x20002364
 800c0fc:	20002478 	.word	0x20002478

0800c100 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c108:	4b06      	ldr	r3, [pc, #24]	; (800c124 <vTaskInternalSetTimeOutState+0x24>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c110:	4b05      	ldr	r3, [pc, #20]	; (800c128 <vTaskInternalSetTimeOutState+0x28>)
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	605a      	str	r2, [r3, #4]
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	2000247c 	.word	0x2000247c
 800c128:	20002468 	.word	0x20002468

0800c12c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	613b      	str	r3, [r7, #16]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10a      	bne.n	800c16e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	60fb      	str	r3, [r7, #12]
}
 800c16a:	bf00      	nop
 800c16c:	e7fe      	b.n	800c16c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c16e:	f000 fc81 	bl	800ca74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c172:	4b1d      	ldr	r3, [pc, #116]	; (800c1e8 <xTaskCheckForTimeOut+0xbc>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	69ba      	ldr	r2, [r7, #24]
 800c17e:	1ad3      	subs	r3, r2, r3
 800c180:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c18a:	d102      	bne.n	800c192 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c18c:	2300      	movs	r3, #0
 800c18e:	61fb      	str	r3, [r7, #28]
 800c190:	e023      	b.n	800c1da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	4b15      	ldr	r3, [pc, #84]	; (800c1ec <xTaskCheckForTimeOut+0xc0>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d007      	beq.n	800c1ae <xTaskCheckForTimeOut+0x82>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d302      	bcc.n	800c1ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	61fb      	str	r3, [r7, #28]
 800c1ac:	e015      	b.n	800c1da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d20b      	bcs.n	800c1d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff ff9b 	bl	800c100 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	61fb      	str	r3, [r7, #28]
 800c1ce:	e004      	b.n	800c1da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1da:	f000 fc7b 	bl	800cad4 <vPortExitCritical>

	return xReturn;
 800c1de:	69fb      	ldr	r3, [r7, #28]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3720      	adds	r7, #32
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	20002468 	.word	0x20002468
 800c1ec:	2000247c 	.word	0x2000247c

0800c1f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1f4:	4b03      	ldr	r3, [pc, #12]	; (800c204 <vTaskMissedYield+0x14>)
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	601a      	str	r2, [r3, #0]
}
 800c1fa:	bf00      	nop
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr
 800c204:	20002478 	.word	0x20002478

0800c208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c210:	f000 f852 	bl	800c2b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c214:	4b06      	ldr	r3, [pc, #24]	; (800c230 <prvIdleTask+0x28>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d9f9      	bls.n	800c210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <prvIdleTask+0x2c>)
 800c21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c22c:	e7f0      	b.n	800c210 <prvIdleTask+0x8>
 800c22e:	bf00      	nop
 800c230:	20002368 	.word	0x20002368
 800c234:	e000ed04 	.word	0xe000ed04

0800c238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c23e:	2300      	movs	r3, #0
 800c240:	607b      	str	r3, [r7, #4]
 800c242:	e00c      	b.n	800c25e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	4613      	mov	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4a12      	ldr	r2, [pc, #72]	; (800c298 <prvInitialiseTaskLists+0x60>)
 800c250:	4413      	add	r3, r2
 800c252:	4618      	mov	r0, r3
 800c254:	f7fe fb70 	bl	800a938 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	3301      	adds	r3, #1
 800c25c:	607b      	str	r3, [r7, #4]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2b06      	cmp	r3, #6
 800c262:	d9ef      	bls.n	800c244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c264:	480d      	ldr	r0, [pc, #52]	; (800c29c <prvInitialiseTaskLists+0x64>)
 800c266:	f7fe fb67 	bl	800a938 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c26a:	480d      	ldr	r0, [pc, #52]	; (800c2a0 <prvInitialiseTaskLists+0x68>)
 800c26c:	f7fe fb64 	bl	800a938 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c270:	480c      	ldr	r0, [pc, #48]	; (800c2a4 <prvInitialiseTaskLists+0x6c>)
 800c272:	f7fe fb61 	bl	800a938 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c276:	480c      	ldr	r0, [pc, #48]	; (800c2a8 <prvInitialiseTaskLists+0x70>)
 800c278:	f7fe fb5e 	bl	800a938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c27c:	480b      	ldr	r0, [pc, #44]	; (800c2ac <prvInitialiseTaskLists+0x74>)
 800c27e:	f7fe fb5b 	bl	800a938 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c282:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <prvInitialiseTaskLists+0x78>)
 800c284:	4a05      	ldr	r2, [pc, #20]	; (800c29c <prvInitialiseTaskLists+0x64>)
 800c286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c288:	4b0a      	ldr	r3, [pc, #40]	; (800c2b4 <prvInitialiseTaskLists+0x7c>)
 800c28a:	4a05      	ldr	r2, [pc, #20]	; (800c2a0 <prvInitialiseTaskLists+0x68>)
 800c28c:	601a      	str	r2, [r3, #0]
}
 800c28e:	bf00      	nop
 800c290:	3708      	adds	r7, #8
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20002368 	.word	0x20002368
 800c29c:	200023f4 	.word	0x200023f4
 800c2a0:	20002408 	.word	0x20002408
 800c2a4:	20002424 	.word	0x20002424
 800c2a8:	20002438 	.word	0x20002438
 800c2ac:	20002450 	.word	0x20002450
 800c2b0:	2000241c 	.word	0x2000241c
 800c2b4:	20002420 	.word	0x20002420

0800c2b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2be:	e019      	b.n	800c2f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2c0:	f000 fbd8 	bl	800ca74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c2c4:	4b10      	ldr	r3, [pc, #64]	; (800c308 <prvCheckTasksWaitingTermination+0x50>)
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fe fbbb 	bl	800aa4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	; (800c30c <prvCheckTasksWaitingTermination+0x54>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	4a0b      	ldr	r2, [pc, #44]	; (800c30c <prvCheckTasksWaitingTermination+0x54>)
 800c2de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2e0:	4b0b      	ldr	r3, [pc, #44]	; (800c310 <prvCheckTasksWaitingTermination+0x58>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	4a0a      	ldr	r2, [pc, #40]	; (800c310 <prvCheckTasksWaitingTermination+0x58>)
 800c2e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2ea:	f000 fbf3 	bl	800cad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f810 	bl	800c314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2f4:	4b06      	ldr	r3, [pc, #24]	; (800c310 <prvCheckTasksWaitingTermination+0x58>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1e1      	bne.n	800c2c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2fc:	bf00      	nop
 800c2fe:	bf00      	nop
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20002438 	.word	0x20002438
 800c30c:	20002464 	.word	0x20002464
 800c310:	2000244c 	.word	0x2000244c

0800c314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	334c      	adds	r3, #76	; 0x4c
 800c320:	4618      	mov	r0, r3
 800c322:	f000 ffeb 	bl	800d2fc <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 fd88 	bl	800ce40 <vPortFree>
			vPortFree( pxTCB );
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fd85 	bl	800ce40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c336:	bf00      	nop
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c346:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <prvResetNextTaskUnblockTime+0x44>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d101      	bne.n	800c354 <prvResetNextTaskUnblockTime+0x14>
 800c350:	2301      	movs	r3, #1
 800c352:	e000      	b.n	800c356 <prvResetNextTaskUnblockTime+0x16>
 800c354:	2300      	movs	r3, #0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d004      	beq.n	800c364 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c35a:	4b0b      	ldr	r3, [pc, #44]	; (800c388 <prvResetNextTaskUnblockTime+0x48>)
 800c35c:	f04f 32ff 	mov.w	r2, #4294967295
 800c360:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c362:	e008      	b.n	800c376 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c364:	4b07      	ldr	r3, [pc, #28]	; (800c384 <prvResetNextTaskUnblockTime+0x44>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	4a05      	ldr	r2, [pc, #20]	; (800c388 <prvResetNextTaskUnblockTime+0x48>)
 800c374:	6013      	str	r3, [r2, #0]
}
 800c376:	bf00      	nop
 800c378:	370c      	adds	r7, #12
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	2000241c 	.word	0x2000241c
 800c388:	20002484 	.word	0x20002484

0800c38c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c392:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <xTaskGetSchedulerState+0x34>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d102      	bne.n	800c3a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c39a:	2301      	movs	r3, #1
 800c39c:	607b      	str	r3, [r7, #4]
 800c39e:	e008      	b.n	800c3b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3a0:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <xTaskGetSchedulerState+0x38>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d102      	bne.n	800c3ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	607b      	str	r3, [r7, #4]
 800c3ac:	e001      	b.n	800c3b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3b2:	687b      	ldr	r3, [r7, #4]
	}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr
 800c3c0:	20002470 	.word	0x20002470
 800c3c4:	2000248c 	.word	0x2000248c

0800c3c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d06e      	beq.n	800c4bc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e2:	4b39      	ldr	r3, [pc, #228]	; (800c4c8 <xTaskPriorityInherit+0x100>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d25e      	bcs.n	800c4aa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	db06      	blt.n	800c402 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3f4:	4b34      	ldr	r3, [pc, #208]	; (800c4c8 <xTaskPriorityInherit+0x100>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fa:	f1c3 0207 	rsb	r2, r3, #7
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	6959      	ldr	r1, [r3, #20]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40a:	4613      	mov	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	4413      	add	r3, r2
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4a2e      	ldr	r2, [pc, #184]	; (800c4cc <xTaskPriorityInherit+0x104>)
 800c414:	4413      	add	r3, r2
 800c416:	4299      	cmp	r1, r3
 800c418:	d101      	bne.n	800c41e <xTaskPriorityInherit+0x56>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e000      	b.n	800c420 <xTaskPriorityInherit+0x58>
 800c41e:	2300      	movs	r3, #0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d03a      	beq.n	800c49a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	3304      	adds	r3, #4
 800c428:	4618      	mov	r0, r3
 800c42a:	f7fe fb0f 	bl	800aa4c <uxListRemove>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d115      	bne.n	800c460 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c438:	4924      	ldr	r1, [pc, #144]	; (800c4cc <xTaskPriorityInherit+0x104>)
 800c43a:	4613      	mov	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	440b      	add	r3, r1
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10a      	bne.n	800c460 <xTaskPriorityInherit+0x98>
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44e:	2201      	movs	r2, #1
 800c450:	fa02 f303 	lsl.w	r3, r2, r3
 800c454:	43da      	mvns	r2, r3
 800c456:	4b1e      	ldr	r3, [pc, #120]	; (800c4d0 <xTaskPriorityInherit+0x108>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4013      	ands	r3, r2
 800c45c:	4a1c      	ldr	r2, [pc, #112]	; (800c4d0 <xTaskPriorityInherit+0x108>)
 800c45e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c460:	4b19      	ldr	r3, [pc, #100]	; (800c4c8 <xTaskPriorityInherit+0x100>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46e:	2201      	movs	r2, #1
 800c470:	409a      	lsls	r2, r3
 800c472:	4b17      	ldr	r3, [pc, #92]	; (800c4d0 <xTaskPriorityInherit+0x108>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4313      	orrs	r3, r2
 800c478:	4a15      	ldr	r2, [pc, #84]	; (800c4d0 <xTaskPriorityInherit+0x108>)
 800c47a:	6013      	str	r3, [r2, #0]
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c480:	4613      	mov	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	4a10      	ldr	r2, [pc, #64]	; (800c4cc <xTaskPriorityInherit+0x104>)
 800c48a:	441a      	add	r2, r3
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	3304      	adds	r3, #4
 800c490:	4619      	mov	r1, r3
 800c492:	4610      	mov	r0, r2
 800c494:	f7fe fa7d 	bl	800a992 <vListInsertEnd>
 800c498:	e004      	b.n	800c4a4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c49a:	4b0b      	ldr	r3, [pc, #44]	; (800c4c8 <xTaskPriorityInherit+0x100>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	60fb      	str	r3, [r7, #12]
 800c4a8:	e008      	b.n	800c4bc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4ae:	4b06      	ldr	r3, [pc, #24]	; (800c4c8 <xTaskPriorityInherit+0x100>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d201      	bcs.n	800c4bc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
	}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20002364 	.word	0x20002364
 800c4cc:	20002368 	.word	0x20002368
 800c4d0:	2000246c 	.word	0x2000246c

0800c4d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b086      	sub	sp, #24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d06e      	beq.n	800c5c8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c4ea:	4b3a      	ldr	r3, [pc, #232]	; (800c5d4 <xTaskPriorityDisinherit+0x100>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d00a      	beq.n	800c50a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	60fb      	str	r3, [r7, #12]
}
 800c506:	bf00      	nop
 800c508:	e7fe      	b.n	800c508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10a      	bne.n	800c528 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	60bb      	str	r3, [r7, #8]
}
 800c524:	bf00      	nop
 800c526:	e7fe      	b.n	800c526 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c52c:	1e5a      	subs	r2, r3, #1
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d044      	beq.n	800c5c8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c542:	2b00      	cmp	r3, #0
 800c544:	d140      	bne.n	800c5c8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	3304      	adds	r3, #4
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe fa7e 	bl	800aa4c <uxListRemove>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d115      	bne.n	800c582 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55a:	491f      	ldr	r1, [pc, #124]	; (800c5d8 <xTaskPriorityDisinherit+0x104>)
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	440b      	add	r3, r1
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <xTaskPriorityDisinherit+0xae>
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c570:	2201      	movs	r2, #1
 800c572:	fa02 f303 	lsl.w	r3, r2, r3
 800c576:	43da      	mvns	r2, r3
 800c578:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <xTaskPriorityDisinherit+0x108>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4013      	ands	r3, r2
 800c57e:	4a17      	ldr	r2, [pc, #92]	; (800c5dc <xTaskPriorityDisinherit+0x108>)
 800c580:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58e:	f1c3 0207 	rsb	r2, r3, #7
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59a:	2201      	movs	r2, #1
 800c59c:	409a      	lsls	r2, r3
 800c59e:	4b0f      	ldr	r3, [pc, #60]	; (800c5dc <xTaskPriorityDisinherit+0x108>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	4a0d      	ldr	r2, [pc, #52]	; (800c5dc <xTaskPriorityDisinherit+0x108>)
 800c5a6:	6013      	str	r3, [r2, #0]
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4a08      	ldr	r2, [pc, #32]	; (800c5d8 <xTaskPriorityDisinherit+0x104>)
 800c5b6:	441a      	add	r2, r3
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4610      	mov	r0, r2
 800c5c0:	f7fe f9e7 	bl	800a992 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5c8:	697b      	ldr	r3, [r7, #20]
	}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3718      	adds	r7, #24
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20002364 	.word	0x20002364
 800c5d8:	20002368 	.word	0x20002368
 800c5dc:	2000246c 	.word	0x2000246c

0800c5e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 8088 	beq.w	800c70a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10a      	bne.n	800c618 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	60fb      	str	r3, [r7, #12]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d902      	bls.n	800c628 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	61fb      	str	r3, [r7, #28]
 800c626:	e002      	b.n	800c62e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c62c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	429a      	cmp	r2, r3
 800c636:	d068      	beq.n	800c70a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d163      	bne.n	800c70a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c642:	4b34      	ldr	r3, [pc, #208]	; (800c714 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	69ba      	ldr	r2, [r7, #24]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d10a      	bne.n	800c662 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	f383 8811 	msr	BASEPRI, r3
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	f3bf 8f4f 	dsb	sy
 800c65c:	60bb      	str	r3, [r7, #8]
}
 800c65e:	bf00      	nop
 800c660:	e7fe      	b.n	800c660 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c662:	69bb      	ldr	r3, [r7, #24]
 800c664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c666:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	2b00      	cmp	r3, #0
 800c674:	db04      	blt.n	800c680 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	f1c3 0207 	rsb	r2, r3, #7
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	6959      	ldr	r1, [r3, #20]
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	4613      	mov	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4a22      	ldr	r2, [pc, #136]	; (800c718 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c690:	4413      	add	r3, r2
 800c692:	4299      	cmp	r1, r3
 800c694:	d101      	bne.n	800c69a <vTaskPriorityDisinheritAfterTimeout+0xba>
 800c696:	2301      	movs	r3, #1
 800c698:	e000      	b.n	800c69c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800c69a:	2300      	movs	r3, #0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d034      	beq.n	800c70a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe f9d1 	bl	800aa4c <uxListRemove>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d115      	bne.n	800c6dc <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b4:	4918      	ldr	r1, [pc, #96]	; (800c718 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	440b      	add	r3, r1
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d10a      	bne.n	800c6dc <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d0:	43da      	mvns	r2, r3
 800c6d2:	4b12      	ldr	r3, [pc, #72]	; (800c71c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	4a10      	ldr	r2, [pc, #64]	; (800c71c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c6da:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	409a      	lsls	r2, r3
 800c6e4:	4b0d      	ldr	r3, [pc, #52]	; (800c71c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	4a0c      	ldr	r2, [pc, #48]	; (800c71c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4a07      	ldr	r2, [pc, #28]	; (800c718 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c6fc:	441a      	add	r2, r3
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	3304      	adds	r3, #4
 800c702:	4619      	mov	r1, r3
 800c704:	4610      	mov	r0, r2
 800c706:	f7fe f944 	bl	800a992 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c70a:	bf00      	nop
 800c70c:	3720      	adds	r7, #32
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20002364 	.word	0x20002364
 800c718:	20002368 	.word	0x20002368
 800c71c:	2000246c 	.word	0x2000246c

0800c720 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c720:	b480      	push	{r7}
 800c722:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c724:	4b07      	ldr	r3, [pc, #28]	; (800c744 <pvTaskIncrementMutexHeldCount+0x24>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d004      	beq.n	800c736 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c72c:	4b05      	ldr	r3, [pc, #20]	; (800c744 <pvTaskIncrementMutexHeldCount+0x24>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c732:	3201      	adds	r2, #1
 800c734:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c736:	4b03      	ldr	r3, [pc, #12]	; (800c744 <pvTaskIncrementMutexHeldCount+0x24>)
 800c738:	681b      	ldr	r3, [r3, #0]
	}
 800c73a:	4618      	mov	r0, r3
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr
 800c744:	20002364 	.word	0x20002364

0800c748 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c752:	4b29      	ldr	r3, [pc, #164]	; (800c7f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c758:	4b28      	ldr	r3, [pc, #160]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3304      	adds	r3, #4
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fe f974 	bl	800aa4c <uxListRemove>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10b      	bne.n	800c782 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c76a:	4b24      	ldr	r3, [pc, #144]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c770:	2201      	movs	r2, #1
 800c772:	fa02 f303 	lsl.w	r3, r2, r3
 800c776:	43da      	mvns	r2, r3
 800c778:	4b21      	ldr	r3, [pc, #132]	; (800c800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4013      	ands	r3, r2
 800c77e:	4a20      	ldr	r2, [pc, #128]	; (800c800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c780:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c788:	d10a      	bne.n	800c7a0 <prvAddCurrentTaskToDelayedList+0x58>
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d007      	beq.n	800c7a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c790:	4b1a      	ldr	r3, [pc, #104]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3304      	adds	r3, #4
 800c796:	4619      	mov	r1, r3
 800c798:	481a      	ldr	r0, [pc, #104]	; (800c804 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c79a:	f7fe f8fa 	bl	800a992 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c79e:	e026      	b.n	800c7ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7a8:	4b14      	ldr	r3, [pc, #80]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d209      	bcs.n	800c7cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7b8:	4b13      	ldr	r3, [pc, #76]	; (800c808 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	f7fe f908 	bl	800a9da <vListInsert>
}
 800c7ca:	e010      	b.n	800c7ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7cc:	4b0f      	ldr	r3, [pc, #60]	; (800c80c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4610      	mov	r0, r2
 800c7da:	f7fe f8fe 	bl	800a9da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7de:	4b0c      	ldr	r3, [pc, #48]	; (800c810 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d202      	bcs.n	800c7ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c7e8:	4a09      	ldr	r2, [pc, #36]	; (800c810 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	6013      	str	r3, [r2, #0]
}
 800c7ee:	bf00      	nop
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20002468 	.word	0x20002468
 800c7fc:	20002364 	.word	0x20002364
 800c800:	2000246c 	.word	0x2000246c
 800c804:	20002450 	.word	0x20002450
 800c808:	20002420 	.word	0x20002420
 800c80c:	2000241c 	.word	0x2000241c
 800c810:	20002484 	.word	0x20002484

0800c814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	3b04      	subs	r3, #4
 800c824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c82c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3b04      	subs	r3, #4
 800c832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f023 0201 	bic.w	r2, r3, #1
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3b04      	subs	r3, #4
 800c842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c844:	4a0c      	ldr	r2, [pc, #48]	; (800c878 <pxPortInitialiseStack+0x64>)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3b14      	subs	r3, #20
 800c84e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3b04      	subs	r3, #4
 800c85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f06f 0202 	mvn.w	r2, #2
 800c862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	3b20      	subs	r3, #32
 800c868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c86a:	68fb      	ldr	r3, [r7, #12]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	0800c87d 	.word	0x0800c87d

0800c87c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c886:	4b12      	ldr	r3, [pc, #72]	; (800c8d0 <prvTaskExitError+0x54>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88e:	d00a      	beq.n	800c8a6 <prvTaskExitError+0x2a>
	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	60fb      	str	r3, [r7, #12]
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <prvTaskExitError+0x28>
	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	60bb      	str	r3, [r7, #8]
}
 800c8b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8ba:	bf00      	nop
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d0fc      	beq.n	800c8bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8c2:	bf00      	nop
 800c8c4:	bf00      	nop
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr
 800c8d0:	2000002c 	.word	0x2000002c
	...

0800c8e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8e0:	4b07      	ldr	r3, [pc, #28]	; (800c900 <pxCurrentTCBConst2>)
 800c8e2:	6819      	ldr	r1, [r3, #0]
 800c8e4:	6808      	ldr	r0, [r1, #0]
 800c8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ea:	f380 8809 	msr	PSP, r0
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f04f 0000 	mov.w	r0, #0
 800c8f6:	f380 8811 	msr	BASEPRI, r0
 800c8fa:	4770      	bx	lr
 800c8fc:	f3af 8000 	nop.w

0800c900 <pxCurrentTCBConst2>:
 800c900:	20002364 	.word	0x20002364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop

0800c908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c908:	4808      	ldr	r0, [pc, #32]	; (800c92c <prvPortStartFirstTask+0x24>)
 800c90a:	6800      	ldr	r0, [r0, #0]
 800c90c:	6800      	ldr	r0, [r0, #0]
 800c90e:	f380 8808 	msr	MSP, r0
 800c912:	f04f 0000 	mov.w	r0, #0
 800c916:	f380 8814 	msr	CONTROL, r0
 800c91a:	b662      	cpsie	i
 800c91c:	b661      	cpsie	f
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	df00      	svc	0
 800c928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c92a:	bf00      	nop
 800c92c:	e000ed08 	.word	0xe000ed08

0800c930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c936:	4b46      	ldr	r3, [pc, #280]	; (800ca50 <xPortStartScheduler+0x120>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a46      	ldr	r2, [pc, #280]	; (800ca54 <xPortStartScheduler+0x124>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d10a      	bne.n	800c956 <xPortStartScheduler+0x26>
	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	613b      	str	r3, [r7, #16]
}
 800c952:	bf00      	nop
 800c954:	e7fe      	b.n	800c954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c956:	4b3e      	ldr	r3, [pc, #248]	; (800ca50 <xPortStartScheduler+0x120>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a3f      	ldr	r2, [pc, #252]	; (800ca58 <xPortStartScheduler+0x128>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d10a      	bne.n	800c976 <xPortStartScheduler+0x46>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	60fb      	str	r3, [r7, #12]
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c976:	4b39      	ldr	r3, [pc, #228]	; (800ca5c <xPortStartScheduler+0x12c>)
 800c978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	22ff      	movs	r2, #255	; 0xff
 800c986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c990:	78fb      	ldrb	r3, [r7, #3]
 800c992:	b2db      	uxtb	r3, r3
 800c994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	4b31      	ldr	r3, [pc, #196]	; (800ca60 <xPortStartScheduler+0x130>)
 800c99c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c99e:	4b31      	ldr	r3, [pc, #196]	; (800ca64 <xPortStartScheduler+0x134>)
 800c9a0:	2207      	movs	r2, #7
 800c9a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9a4:	e009      	b.n	800c9ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c9a6:	4b2f      	ldr	r3, [pc, #188]	; (800ca64 <xPortStartScheduler+0x134>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	4a2d      	ldr	r2, [pc, #180]	; (800ca64 <xPortStartScheduler+0x134>)
 800c9ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9b0:	78fb      	ldrb	r3, [r7, #3]
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9ba:	78fb      	ldrb	r3, [r7, #3]
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9c2:	2b80      	cmp	r3, #128	; 0x80
 800c9c4:	d0ef      	beq.n	800c9a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9c6:	4b27      	ldr	r3, [pc, #156]	; (800ca64 <xPortStartScheduler+0x134>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f1c3 0307 	rsb	r3, r3, #7
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	d00a      	beq.n	800c9e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	60bb      	str	r3, [r7, #8]
}
 800c9e4:	bf00      	nop
 800c9e6:	e7fe      	b.n	800c9e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9e8:	4b1e      	ldr	r3, [pc, #120]	; (800ca64 <xPortStartScheduler+0x134>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	021b      	lsls	r3, r3, #8
 800c9ee:	4a1d      	ldr	r2, [pc, #116]	; (800ca64 <xPortStartScheduler+0x134>)
 800c9f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9f2:	4b1c      	ldr	r3, [pc, #112]	; (800ca64 <xPortStartScheduler+0x134>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9fa:	4a1a      	ldr	r2, [pc, #104]	; (800ca64 <xPortStartScheduler+0x134>)
 800c9fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca06:	4b18      	ldr	r3, [pc, #96]	; (800ca68 <xPortStartScheduler+0x138>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a17      	ldr	r2, [pc, #92]	; (800ca68 <xPortStartScheduler+0x138>)
 800ca0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca12:	4b15      	ldr	r3, [pc, #84]	; (800ca68 <xPortStartScheduler+0x138>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a14      	ldr	r2, [pc, #80]	; (800ca68 <xPortStartScheduler+0x138>)
 800ca18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca1e:	f000 f8dd 	bl	800cbdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca22:	4b12      	ldr	r3, [pc, #72]	; (800ca6c <xPortStartScheduler+0x13c>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca28:	f000 f8fc 	bl	800cc24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca2c:	4b10      	ldr	r3, [pc, #64]	; (800ca70 <xPortStartScheduler+0x140>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4a0f      	ldr	r2, [pc, #60]	; (800ca70 <xPortStartScheduler+0x140>)
 800ca32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca38:	f7ff ff66 	bl	800c908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca3c:	f7ff fa78 	bl	800bf30 <vTaskSwitchContext>
	prvTaskExitError();
 800ca40:	f7ff ff1c 	bl	800c87c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3718      	adds	r7, #24
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	e000ed00 	.word	0xe000ed00
 800ca54:	410fc271 	.word	0x410fc271
 800ca58:	410fc270 	.word	0x410fc270
 800ca5c:	e000e400 	.word	0xe000e400
 800ca60:	20002490 	.word	0x20002490
 800ca64:	20002494 	.word	0x20002494
 800ca68:	e000ed20 	.word	0xe000ed20
 800ca6c:	2000002c 	.word	0x2000002c
 800ca70:	e000ef34 	.word	0xe000ef34

0800ca74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
	__asm volatile
 800ca7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7e:	f383 8811 	msr	BASEPRI, r3
 800ca82:	f3bf 8f6f 	isb	sy
 800ca86:	f3bf 8f4f 	dsb	sy
 800ca8a:	607b      	str	r3, [r7, #4]
}
 800ca8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca8e:	4b0f      	ldr	r3, [pc, #60]	; (800cacc <vPortEnterCritical+0x58>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3301      	adds	r3, #1
 800ca94:	4a0d      	ldr	r2, [pc, #52]	; (800cacc <vPortEnterCritical+0x58>)
 800ca96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca98:	4b0c      	ldr	r3, [pc, #48]	; (800cacc <vPortEnterCritical+0x58>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d10f      	bne.n	800cac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800caa0:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <vPortEnterCritical+0x5c>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00a      	beq.n	800cac0 <vPortEnterCritical+0x4c>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	603b      	str	r3, [r7, #0]
}
 800cabc:	bf00      	nop
 800cabe:	e7fe      	b.n	800cabe <vPortEnterCritical+0x4a>
	}
}
 800cac0:	bf00      	nop
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	2000002c 	.word	0x2000002c
 800cad0:	e000ed04 	.word	0xe000ed04

0800cad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cada:	4b12      	ldr	r3, [pc, #72]	; (800cb24 <vPortExitCritical+0x50>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d10a      	bne.n	800caf8 <vPortExitCritical+0x24>
	__asm volatile
 800cae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae6:	f383 8811 	msr	BASEPRI, r3
 800caea:	f3bf 8f6f 	isb	sy
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	607b      	str	r3, [r7, #4]
}
 800caf4:	bf00      	nop
 800caf6:	e7fe      	b.n	800caf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800caf8:	4b0a      	ldr	r3, [pc, #40]	; (800cb24 <vPortExitCritical+0x50>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	3b01      	subs	r3, #1
 800cafe:	4a09      	ldr	r2, [pc, #36]	; (800cb24 <vPortExitCritical+0x50>)
 800cb00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb02:	4b08      	ldr	r3, [pc, #32]	; (800cb24 <vPortExitCritical+0x50>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d105      	bne.n	800cb16 <vPortExitCritical+0x42>
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	f383 8811 	msr	BASEPRI, r3
}
 800cb14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb16:	bf00      	nop
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	2000002c 	.word	0x2000002c
	...

0800cb30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb30:	f3ef 8009 	mrs	r0, PSP
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	4b15      	ldr	r3, [pc, #84]	; (800cb90 <pxCurrentTCBConst>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	f01e 0f10 	tst.w	lr, #16
 800cb40:	bf08      	it	eq
 800cb42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4a:	6010      	str	r0, [r2, #0]
 800cb4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb54:	f380 8811 	msr	BASEPRI, r0
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	f7ff f9e6 	bl	800bf30 <vTaskSwitchContext>
 800cb64:	f04f 0000 	mov.w	r0, #0
 800cb68:	f380 8811 	msr	BASEPRI, r0
 800cb6c:	bc09      	pop	{r0, r3}
 800cb6e:	6819      	ldr	r1, [r3, #0]
 800cb70:	6808      	ldr	r0, [r1, #0]
 800cb72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb76:	f01e 0f10 	tst.w	lr, #16
 800cb7a:	bf08      	it	eq
 800cb7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb80:	f380 8809 	msr	PSP, r0
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	f3af 8000 	nop.w

0800cb90 <pxCurrentTCBConst>:
 800cb90:	20002364 	.word	0x20002364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb94:	bf00      	nop
 800cb96:	bf00      	nop

0800cb98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	607b      	str	r3, [r7, #4]
}
 800cbb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cbb2:	f7ff f8ff 	bl	800bdb4 <xTaskIncrementTick>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d003      	beq.n	800cbc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cbbc:	4b06      	ldr	r3, [pc, #24]	; (800cbd8 <SysTick_Handler+0x40>)
 800cbbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbc2:	601a      	str	r2, [r3, #0]
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	f383 8811 	msr	BASEPRI, r3
}
 800cbce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbd0:	bf00      	nop
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	e000ed04 	.word	0xe000ed04

0800cbdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbe0:	4b0b      	ldr	r3, [pc, #44]	; (800cc10 <vPortSetupTimerInterrupt+0x34>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbe6:	4b0b      	ldr	r3, [pc, #44]	; (800cc14 <vPortSetupTimerInterrupt+0x38>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbec:	4b0a      	ldr	r3, [pc, #40]	; (800cc18 <vPortSetupTimerInterrupt+0x3c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a0a      	ldr	r2, [pc, #40]	; (800cc1c <vPortSetupTimerInterrupt+0x40>)
 800cbf2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbf6:	099b      	lsrs	r3, r3, #6
 800cbf8:	4a09      	ldr	r2, [pc, #36]	; (800cc20 <vPortSetupTimerInterrupt+0x44>)
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbfe:	4b04      	ldr	r3, [pc, #16]	; (800cc10 <vPortSetupTimerInterrupt+0x34>)
 800cc00:	2207      	movs	r2, #7
 800cc02:	601a      	str	r2, [r3, #0]
}
 800cc04:	bf00      	nop
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	e000e010 	.word	0xe000e010
 800cc14:	e000e018 	.word	0xe000e018
 800cc18:	2000000c 	.word	0x2000000c
 800cc1c:	10624dd3 	.word	0x10624dd3
 800cc20:	e000e014 	.word	0xe000e014

0800cc24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc34 <vPortEnableVFP+0x10>
 800cc28:	6801      	ldr	r1, [r0, #0]
 800cc2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc2e:	6001      	str	r1, [r0, #0]
 800cc30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc32:	bf00      	nop
 800cc34:	e000ed88 	.word	0xe000ed88

0800cc38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc3e:	f3ef 8305 	mrs	r3, IPSR
 800cc42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b0f      	cmp	r3, #15
 800cc48:	d914      	bls.n	800cc74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc4a:	4a17      	ldr	r2, [pc, #92]	; (800cca8 <vPortValidateInterruptPriority+0x70>)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	4413      	add	r3, r2
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc54:	4b15      	ldr	r3, [pc, #84]	; (800ccac <vPortValidateInterruptPriority+0x74>)
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	7afa      	ldrb	r2, [r7, #11]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d20a      	bcs.n	800cc74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	607b      	str	r3, [r7, #4]
}
 800cc70:	bf00      	nop
 800cc72:	e7fe      	b.n	800cc72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc74:	4b0e      	ldr	r3, [pc, #56]	; (800ccb0 <vPortValidateInterruptPriority+0x78>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc7c:	4b0d      	ldr	r3, [pc, #52]	; (800ccb4 <vPortValidateInterruptPriority+0x7c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d90a      	bls.n	800cc9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	603b      	str	r3, [r7, #0]
}
 800cc96:	bf00      	nop
 800cc98:	e7fe      	b.n	800cc98 <vPortValidateInterruptPriority+0x60>
	}
 800cc9a:	bf00      	nop
 800cc9c:	3714      	adds	r7, #20
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	e000e3f0 	.word	0xe000e3f0
 800ccac:	20002490 	.word	0x20002490
 800ccb0:	e000ed0c 	.word	0xe000ed0c
 800ccb4:	20002494 	.word	0x20002494

0800ccb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08a      	sub	sp, #40	; 0x28
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ccc4:	f7fe ffcc 	bl	800bc60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccc8:	4b58      	ldr	r3, [pc, #352]	; (800ce2c <pvPortMalloc+0x174>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d101      	bne.n	800ccd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ccd0:	f000 f910 	bl	800cef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccd4:	4b56      	ldr	r3, [pc, #344]	; (800ce30 <pvPortMalloc+0x178>)
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4013      	ands	r3, r2
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f040 808e 	bne.w	800cdfe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d01d      	beq.n	800cd24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cce8:	2208      	movs	r2, #8
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4413      	add	r3, r2
 800ccee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f003 0307 	and.w	r3, r3, #7
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d014      	beq.n	800cd24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f023 0307 	bic.w	r3, r3, #7
 800cd00:	3308      	adds	r3, #8
 800cd02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f003 0307 	and.w	r3, r3, #7
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00a      	beq.n	800cd24 <pvPortMalloc+0x6c>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	617b      	str	r3, [r7, #20]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d069      	beq.n	800cdfe <pvPortMalloc+0x146>
 800cd2a:	4b42      	ldr	r3, [pc, #264]	; (800ce34 <pvPortMalloc+0x17c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d864      	bhi.n	800cdfe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd34:	4b40      	ldr	r3, [pc, #256]	; (800ce38 <pvPortMalloc+0x180>)
 800cd36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd38:	4b3f      	ldr	r3, [pc, #252]	; (800ce38 <pvPortMalloc+0x180>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd3e:	e004      	b.n	800cd4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d903      	bls.n	800cd5c <pvPortMalloc+0xa4>
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1f1      	bne.n	800cd40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd5c:	4b33      	ldr	r3, [pc, #204]	; (800ce2c <pvPortMalloc+0x174>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d04b      	beq.n	800cdfe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd66:	6a3b      	ldr	r3, [r7, #32]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2208      	movs	r2, #8
 800cd6c:	4413      	add	r3, r2
 800cd6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	1ad2      	subs	r2, r2, r3
 800cd80:	2308      	movs	r3, #8
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d91f      	bls.n	800cdc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	f003 0307 	and.w	r3, r3, #7
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00a      	beq.n	800cdb0 <pvPortMalloc+0xf8>
	__asm volatile
 800cd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9e:	f383 8811 	msr	BASEPRI, r3
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	613b      	str	r3, [r7, #16]
}
 800cdac:	bf00      	nop
 800cdae:	e7fe      	b.n	800cdae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb2:	685a      	ldr	r2, [r3, #4]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	1ad2      	subs	r2, r2, r3
 800cdb8:	69bb      	ldr	r3, [r7, #24]
 800cdba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdc2:	69b8      	ldr	r0, [r7, #24]
 800cdc4:	f000 f8f8 	bl	800cfb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdc8:	4b1a      	ldr	r3, [pc, #104]	; (800ce34 <pvPortMalloc+0x17c>)
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	4a18      	ldr	r2, [pc, #96]	; (800ce34 <pvPortMalloc+0x17c>)
 800cdd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdd6:	4b17      	ldr	r3, [pc, #92]	; (800ce34 <pvPortMalloc+0x17c>)
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	4b18      	ldr	r3, [pc, #96]	; (800ce3c <pvPortMalloc+0x184>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d203      	bcs.n	800cdea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cde2:	4b14      	ldr	r3, [pc, #80]	; (800ce34 <pvPortMalloc+0x17c>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a15      	ldr	r2, [pc, #84]	; (800ce3c <pvPortMalloc+0x184>)
 800cde8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	4b10      	ldr	r3, [pc, #64]	; (800ce30 <pvPortMalloc+0x178>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdfe:	f7fe ff3d 	bl	800bc7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	f003 0307 	and.w	r3, r3, #7
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00a      	beq.n	800ce22 <pvPortMalloc+0x16a>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	60fb      	str	r3, [r7, #12]
}
 800ce1e:	bf00      	nop
 800ce20:	e7fe      	b.n	800ce20 <pvPortMalloc+0x168>
	return pvReturn;
 800ce22:	69fb      	ldr	r3, [r7, #28]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3728      	adds	r7, #40	; 0x28
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	200044a0 	.word	0x200044a0
 800ce30:	200044ac 	.word	0x200044ac
 800ce34:	200044a4 	.word	0x200044a4
 800ce38:	20004498 	.word	0x20004498
 800ce3c:	200044a8 	.word	0x200044a8

0800ce40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d048      	beq.n	800cee4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce52:	2308      	movs	r3, #8
 800ce54:	425b      	negs	r3, r3
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	4413      	add	r3, r2
 800ce5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	4b21      	ldr	r3, [pc, #132]	; (800ceec <vPortFree+0xac>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4013      	ands	r3, r2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10a      	bne.n	800ce84 <vPortFree+0x44>
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	60fb      	str	r3, [r7, #12]
}
 800ce80:	bf00      	nop
 800ce82:	e7fe      	b.n	800ce82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00a      	beq.n	800cea2 <vPortFree+0x62>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	60bb      	str	r3, [r7, #8]
}
 800ce9e:	bf00      	nop
 800cea0:	e7fe      	b.n	800cea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	685a      	ldr	r2, [r3, #4]
 800cea6:	4b11      	ldr	r3, [pc, #68]	; (800ceec <vPortFree+0xac>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d019      	beq.n	800cee4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d115      	bne.n	800cee4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	4b0b      	ldr	r3, [pc, #44]	; (800ceec <vPortFree+0xac>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	43db      	mvns	r3, r3
 800cec2:	401a      	ands	r2, r3
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cec8:	f7fe feca 	bl	800bc60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	685a      	ldr	r2, [r3, #4]
 800ced0:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <vPortFree+0xb0>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4413      	add	r3, r2
 800ced6:	4a06      	ldr	r2, [pc, #24]	; (800cef0 <vPortFree+0xb0>)
 800ced8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceda:	6938      	ldr	r0, [r7, #16]
 800cedc:	f000 f86c 	bl	800cfb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cee0:	f7fe fecc 	bl	800bc7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cee4:	bf00      	nop
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	200044ac 	.word	0x200044ac
 800cef0:	200044a4 	.word	0x200044a4

0800cef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cefa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cefe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf00:	4b27      	ldr	r3, [pc, #156]	; (800cfa0 <prvHeapInit+0xac>)
 800cf02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f003 0307 	and.w	r3, r3, #7
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00c      	beq.n	800cf28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3307      	adds	r3, #7
 800cf12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f023 0307 	bic.w	r3, r3, #7
 800cf1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	4a1f      	ldr	r2, [pc, #124]	; (800cfa0 <prvHeapInit+0xac>)
 800cf24:	4413      	add	r3, r2
 800cf26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf2c:	4a1d      	ldr	r2, [pc, #116]	; (800cfa4 <prvHeapInit+0xb0>)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf32:	4b1c      	ldr	r3, [pc, #112]	; (800cfa4 <prvHeapInit+0xb0>)
 800cf34:	2200      	movs	r2, #0
 800cf36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	68ba      	ldr	r2, [r7, #8]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf40:	2208      	movs	r2, #8
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	1a9b      	subs	r3, r3, r2
 800cf46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f023 0307 	bic.w	r3, r3, #7
 800cf4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4a15      	ldr	r2, [pc, #84]	; (800cfa8 <prvHeapInit+0xb4>)
 800cf54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf56:	4b14      	ldr	r3, [pc, #80]	; (800cfa8 <prvHeapInit+0xb4>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf5e:	4b12      	ldr	r3, [pc, #72]	; (800cfa8 <prvHeapInit+0xb4>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2200      	movs	r2, #0
 800cf64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	68fa      	ldr	r2, [r7, #12]
 800cf6e:	1ad2      	subs	r2, r2, r3
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf74:	4b0c      	ldr	r3, [pc, #48]	; (800cfa8 <prvHeapInit+0xb4>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	685b      	ldr	r3, [r3, #4]
 800cf80:	4a0a      	ldr	r2, [pc, #40]	; (800cfac <prvHeapInit+0xb8>)
 800cf82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	4a09      	ldr	r2, [pc, #36]	; (800cfb0 <prvHeapInit+0xbc>)
 800cf8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf8c:	4b09      	ldr	r3, [pc, #36]	; (800cfb4 <prvHeapInit+0xc0>)
 800cf8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf92:	601a      	str	r2, [r3, #0]
}
 800cf94:	bf00      	nop
 800cf96:	3714      	adds	r7, #20
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	20002498 	.word	0x20002498
 800cfa4:	20004498 	.word	0x20004498
 800cfa8:	200044a0 	.word	0x200044a0
 800cfac:	200044a8 	.word	0x200044a8
 800cfb0:	200044a4 	.word	0x200044a4
 800cfb4:	200044ac 	.word	0x200044ac

0800cfb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfc0:	4b28      	ldr	r3, [pc, #160]	; (800d064 <prvInsertBlockIntoFreeList+0xac>)
 800cfc2:	60fb      	str	r3, [r7, #12]
 800cfc4:	e002      	b.n	800cfcc <prvInsertBlockIntoFreeList+0x14>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	60fb      	str	r3, [r7, #12]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d8f7      	bhi.n	800cfc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	68ba      	ldr	r2, [r7, #8]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d108      	bne.n	800cffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	441a      	add	r2, r3
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	685b      	ldr	r3, [r3, #4]
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	441a      	add	r2, r3
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d118      	bne.n	800d040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	4b15      	ldr	r3, [pc, #84]	; (800d068 <prvInsertBlockIntoFreeList+0xb0>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d00d      	beq.n	800d036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	685a      	ldr	r2, [r3, #4]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	441a      	add	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681a      	ldr	r2, [r3, #0]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	601a      	str	r2, [r3, #0]
 800d034:	e008      	b.n	800d048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d036:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <prvInsertBlockIntoFreeList+0xb0>)
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	601a      	str	r2, [r3, #0]
 800d03e:	e003      	b.n	800d048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d002      	beq.n	800d056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d056:	bf00      	nop
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	20004498 	.word	0x20004498
 800d068:	200044a0 	.word	0x200044a0

0800d06c <__errno>:
 800d06c:	4b01      	ldr	r3, [pc, #4]	; (800d074 <__errno+0x8>)
 800d06e:	6818      	ldr	r0, [r3, #0]
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	20000030 	.word	0x20000030

0800d078 <__libc_init_array>:
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	4d0d      	ldr	r5, [pc, #52]	; (800d0b0 <__libc_init_array+0x38>)
 800d07c:	4c0d      	ldr	r4, [pc, #52]	; (800d0b4 <__libc_init_array+0x3c>)
 800d07e:	1b64      	subs	r4, r4, r5
 800d080:	10a4      	asrs	r4, r4, #2
 800d082:	2600      	movs	r6, #0
 800d084:	42a6      	cmp	r6, r4
 800d086:	d109      	bne.n	800d09c <__libc_init_array+0x24>
 800d088:	4d0b      	ldr	r5, [pc, #44]	; (800d0b8 <__libc_init_array+0x40>)
 800d08a:	4c0c      	ldr	r4, [pc, #48]	; (800d0bc <__libc_init_array+0x44>)
 800d08c:	f000 fd5c 	bl	800db48 <_init>
 800d090:	1b64      	subs	r4, r4, r5
 800d092:	10a4      	asrs	r4, r4, #2
 800d094:	2600      	movs	r6, #0
 800d096:	42a6      	cmp	r6, r4
 800d098:	d105      	bne.n	800d0a6 <__libc_init_array+0x2e>
 800d09a:	bd70      	pop	{r4, r5, r6, pc}
 800d09c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0a0:	4798      	blx	r3
 800d0a2:	3601      	adds	r6, #1
 800d0a4:	e7ee      	b.n	800d084 <__libc_init_array+0xc>
 800d0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0aa:	4798      	blx	r3
 800d0ac:	3601      	adds	r6, #1
 800d0ae:	e7f2      	b.n	800d096 <__libc_init_array+0x1e>
 800d0b0:	0800e0c0 	.word	0x0800e0c0
 800d0b4:	0800e0c0 	.word	0x0800e0c0
 800d0b8:	0800e0c0 	.word	0x0800e0c0
 800d0bc:	0800e0c4 	.word	0x0800e0c4

0800d0c0 <__retarget_lock_acquire_recursive>:
 800d0c0:	4770      	bx	lr

0800d0c2 <__retarget_lock_release_recursive>:
 800d0c2:	4770      	bx	lr

0800d0c4 <malloc>:
 800d0c4:	4b02      	ldr	r3, [pc, #8]	; (800d0d0 <malloc+0xc>)
 800d0c6:	4601      	mov	r1, r0
 800d0c8:	6818      	ldr	r0, [r3, #0]
 800d0ca:	f000 b88d 	b.w	800d1e8 <_malloc_r>
 800d0ce:	bf00      	nop
 800d0d0:	20000030 	.word	0x20000030

0800d0d4 <free>:
 800d0d4:	4b02      	ldr	r3, [pc, #8]	; (800d0e0 <free+0xc>)
 800d0d6:	4601      	mov	r1, r0
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	f000 b819 	b.w	800d110 <_free_r>
 800d0de:	bf00      	nop
 800d0e0:	20000030 	.word	0x20000030

0800d0e4 <memcpy>:
 800d0e4:	440a      	add	r2, r1
 800d0e6:	4291      	cmp	r1, r2
 800d0e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0ec:	d100      	bne.n	800d0f0 <memcpy+0xc>
 800d0ee:	4770      	bx	lr
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0fa:	4291      	cmp	r1, r2
 800d0fc:	d1f9      	bne.n	800d0f2 <memcpy+0xe>
 800d0fe:	bd10      	pop	{r4, pc}

0800d100 <memset>:
 800d100:	4402      	add	r2, r0
 800d102:	4603      	mov	r3, r0
 800d104:	4293      	cmp	r3, r2
 800d106:	d100      	bne.n	800d10a <memset+0xa>
 800d108:	4770      	bx	lr
 800d10a:	f803 1b01 	strb.w	r1, [r3], #1
 800d10e:	e7f9      	b.n	800d104 <memset+0x4>

0800d110 <_free_r>:
 800d110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d112:	2900      	cmp	r1, #0
 800d114:	d044      	beq.n	800d1a0 <_free_r+0x90>
 800d116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d11a:	9001      	str	r0, [sp, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f1a1 0404 	sub.w	r4, r1, #4
 800d122:	bfb8      	it	lt
 800d124:	18e4      	addlt	r4, r4, r3
 800d126:	f000 f9c3 	bl	800d4b0 <__malloc_lock>
 800d12a:	4a1e      	ldr	r2, [pc, #120]	; (800d1a4 <_free_r+0x94>)
 800d12c:	9801      	ldr	r0, [sp, #4]
 800d12e:	6813      	ldr	r3, [r2, #0]
 800d130:	b933      	cbnz	r3, 800d140 <_free_r+0x30>
 800d132:	6063      	str	r3, [r4, #4]
 800d134:	6014      	str	r4, [r2, #0]
 800d136:	b003      	add	sp, #12
 800d138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d13c:	f000 b9be 	b.w	800d4bc <__malloc_unlock>
 800d140:	42a3      	cmp	r3, r4
 800d142:	d908      	bls.n	800d156 <_free_r+0x46>
 800d144:	6825      	ldr	r5, [r4, #0]
 800d146:	1961      	adds	r1, r4, r5
 800d148:	428b      	cmp	r3, r1
 800d14a:	bf01      	itttt	eq
 800d14c:	6819      	ldreq	r1, [r3, #0]
 800d14e:	685b      	ldreq	r3, [r3, #4]
 800d150:	1949      	addeq	r1, r1, r5
 800d152:	6021      	streq	r1, [r4, #0]
 800d154:	e7ed      	b.n	800d132 <_free_r+0x22>
 800d156:	461a      	mov	r2, r3
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	b10b      	cbz	r3, 800d160 <_free_r+0x50>
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	d9fa      	bls.n	800d156 <_free_r+0x46>
 800d160:	6811      	ldr	r1, [r2, #0]
 800d162:	1855      	adds	r5, r2, r1
 800d164:	42a5      	cmp	r5, r4
 800d166:	d10b      	bne.n	800d180 <_free_r+0x70>
 800d168:	6824      	ldr	r4, [r4, #0]
 800d16a:	4421      	add	r1, r4
 800d16c:	1854      	adds	r4, r2, r1
 800d16e:	42a3      	cmp	r3, r4
 800d170:	6011      	str	r1, [r2, #0]
 800d172:	d1e0      	bne.n	800d136 <_free_r+0x26>
 800d174:	681c      	ldr	r4, [r3, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	6053      	str	r3, [r2, #4]
 800d17a:	4421      	add	r1, r4
 800d17c:	6011      	str	r1, [r2, #0]
 800d17e:	e7da      	b.n	800d136 <_free_r+0x26>
 800d180:	d902      	bls.n	800d188 <_free_r+0x78>
 800d182:	230c      	movs	r3, #12
 800d184:	6003      	str	r3, [r0, #0]
 800d186:	e7d6      	b.n	800d136 <_free_r+0x26>
 800d188:	6825      	ldr	r5, [r4, #0]
 800d18a:	1961      	adds	r1, r4, r5
 800d18c:	428b      	cmp	r3, r1
 800d18e:	bf04      	itt	eq
 800d190:	6819      	ldreq	r1, [r3, #0]
 800d192:	685b      	ldreq	r3, [r3, #4]
 800d194:	6063      	str	r3, [r4, #4]
 800d196:	bf04      	itt	eq
 800d198:	1949      	addeq	r1, r1, r5
 800d19a:	6021      	streq	r1, [r4, #0]
 800d19c:	6054      	str	r4, [r2, #4]
 800d19e:	e7ca      	b.n	800d136 <_free_r+0x26>
 800d1a0:	b003      	add	sp, #12
 800d1a2:	bd30      	pop	{r4, r5, pc}
 800d1a4:	200044b4 	.word	0x200044b4

0800d1a8 <sbrk_aligned>:
 800d1a8:	b570      	push	{r4, r5, r6, lr}
 800d1aa:	4e0e      	ldr	r6, [pc, #56]	; (800d1e4 <sbrk_aligned+0x3c>)
 800d1ac:	460c      	mov	r4, r1
 800d1ae:	6831      	ldr	r1, [r6, #0]
 800d1b0:	4605      	mov	r5, r0
 800d1b2:	b911      	cbnz	r1, 800d1ba <sbrk_aligned+0x12>
 800d1b4:	f000 f8fe 	bl	800d3b4 <_sbrk_r>
 800d1b8:	6030      	str	r0, [r6, #0]
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f000 f8f9 	bl	800d3b4 <_sbrk_r>
 800d1c2:	1c43      	adds	r3, r0, #1
 800d1c4:	d00a      	beq.n	800d1dc <sbrk_aligned+0x34>
 800d1c6:	1cc4      	adds	r4, r0, #3
 800d1c8:	f024 0403 	bic.w	r4, r4, #3
 800d1cc:	42a0      	cmp	r0, r4
 800d1ce:	d007      	beq.n	800d1e0 <sbrk_aligned+0x38>
 800d1d0:	1a21      	subs	r1, r4, r0
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f000 f8ee 	bl	800d3b4 <_sbrk_r>
 800d1d8:	3001      	adds	r0, #1
 800d1da:	d101      	bne.n	800d1e0 <sbrk_aligned+0x38>
 800d1dc:	f04f 34ff 	mov.w	r4, #4294967295
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	bd70      	pop	{r4, r5, r6, pc}
 800d1e4:	200044b8 	.word	0x200044b8

0800d1e8 <_malloc_r>:
 800d1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ec:	1ccd      	adds	r5, r1, #3
 800d1ee:	f025 0503 	bic.w	r5, r5, #3
 800d1f2:	3508      	adds	r5, #8
 800d1f4:	2d0c      	cmp	r5, #12
 800d1f6:	bf38      	it	cc
 800d1f8:	250c      	movcc	r5, #12
 800d1fa:	2d00      	cmp	r5, #0
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	db01      	blt.n	800d204 <_malloc_r+0x1c>
 800d200:	42a9      	cmp	r1, r5
 800d202:	d905      	bls.n	800d210 <_malloc_r+0x28>
 800d204:	230c      	movs	r3, #12
 800d206:	603b      	str	r3, [r7, #0]
 800d208:	2600      	movs	r6, #0
 800d20a:	4630      	mov	r0, r6
 800d20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d210:	4e2e      	ldr	r6, [pc, #184]	; (800d2cc <_malloc_r+0xe4>)
 800d212:	f000 f94d 	bl	800d4b0 <__malloc_lock>
 800d216:	6833      	ldr	r3, [r6, #0]
 800d218:	461c      	mov	r4, r3
 800d21a:	bb34      	cbnz	r4, 800d26a <_malloc_r+0x82>
 800d21c:	4629      	mov	r1, r5
 800d21e:	4638      	mov	r0, r7
 800d220:	f7ff ffc2 	bl	800d1a8 <sbrk_aligned>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	4604      	mov	r4, r0
 800d228:	d14d      	bne.n	800d2c6 <_malloc_r+0xde>
 800d22a:	6834      	ldr	r4, [r6, #0]
 800d22c:	4626      	mov	r6, r4
 800d22e:	2e00      	cmp	r6, #0
 800d230:	d140      	bne.n	800d2b4 <_malloc_r+0xcc>
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	4631      	mov	r1, r6
 800d236:	4638      	mov	r0, r7
 800d238:	eb04 0803 	add.w	r8, r4, r3
 800d23c:	f000 f8ba 	bl	800d3b4 <_sbrk_r>
 800d240:	4580      	cmp	r8, r0
 800d242:	d13a      	bne.n	800d2ba <_malloc_r+0xd2>
 800d244:	6821      	ldr	r1, [r4, #0]
 800d246:	3503      	adds	r5, #3
 800d248:	1a6d      	subs	r5, r5, r1
 800d24a:	f025 0503 	bic.w	r5, r5, #3
 800d24e:	3508      	adds	r5, #8
 800d250:	2d0c      	cmp	r5, #12
 800d252:	bf38      	it	cc
 800d254:	250c      	movcc	r5, #12
 800d256:	4629      	mov	r1, r5
 800d258:	4638      	mov	r0, r7
 800d25a:	f7ff ffa5 	bl	800d1a8 <sbrk_aligned>
 800d25e:	3001      	adds	r0, #1
 800d260:	d02b      	beq.n	800d2ba <_malloc_r+0xd2>
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	442b      	add	r3, r5
 800d266:	6023      	str	r3, [r4, #0]
 800d268:	e00e      	b.n	800d288 <_malloc_r+0xa0>
 800d26a:	6822      	ldr	r2, [r4, #0]
 800d26c:	1b52      	subs	r2, r2, r5
 800d26e:	d41e      	bmi.n	800d2ae <_malloc_r+0xc6>
 800d270:	2a0b      	cmp	r2, #11
 800d272:	d916      	bls.n	800d2a2 <_malloc_r+0xba>
 800d274:	1961      	adds	r1, r4, r5
 800d276:	42a3      	cmp	r3, r4
 800d278:	6025      	str	r5, [r4, #0]
 800d27a:	bf18      	it	ne
 800d27c:	6059      	strne	r1, [r3, #4]
 800d27e:	6863      	ldr	r3, [r4, #4]
 800d280:	bf08      	it	eq
 800d282:	6031      	streq	r1, [r6, #0]
 800d284:	5162      	str	r2, [r4, r5]
 800d286:	604b      	str	r3, [r1, #4]
 800d288:	4638      	mov	r0, r7
 800d28a:	f104 060b 	add.w	r6, r4, #11
 800d28e:	f000 f915 	bl	800d4bc <__malloc_unlock>
 800d292:	f026 0607 	bic.w	r6, r6, #7
 800d296:	1d23      	adds	r3, r4, #4
 800d298:	1af2      	subs	r2, r6, r3
 800d29a:	d0b6      	beq.n	800d20a <_malloc_r+0x22>
 800d29c:	1b9b      	subs	r3, r3, r6
 800d29e:	50a3      	str	r3, [r4, r2]
 800d2a0:	e7b3      	b.n	800d20a <_malloc_r+0x22>
 800d2a2:	6862      	ldr	r2, [r4, #4]
 800d2a4:	42a3      	cmp	r3, r4
 800d2a6:	bf0c      	ite	eq
 800d2a8:	6032      	streq	r2, [r6, #0]
 800d2aa:	605a      	strne	r2, [r3, #4]
 800d2ac:	e7ec      	b.n	800d288 <_malloc_r+0xa0>
 800d2ae:	4623      	mov	r3, r4
 800d2b0:	6864      	ldr	r4, [r4, #4]
 800d2b2:	e7b2      	b.n	800d21a <_malloc_r+0x32>
 800d2b4:	4634      	mov	r4, r6
 800d2b6:	6876      	ldr	r6, [r6, #4]
 800d2b8:	e7b9      	b.n	800d22e <_malloc_r+0x46>
 800d2ba:	230c      	movs	r3, #12
 800d2bc:	603b      	str	r3, [r7, #0]
 800d2be:	4638      	mov	r0, r7
 800d2c0:	f000 f8fc 	bl	800d4bc <__malloc_unlock>
 800d2c4:	e7a1      	b.n	800d20a <_malloc_r+0x22>
 800d2c6:	6025      	str	r5, [r4, #0]
 800d2c8:	e7de      	b.n	800d288 <_malloc_r+0xa0>
 800d2ca:	bf00      	nop
 800d2cc:	200044b4 	.word	0x200044b4

0800d2d0 <realloc>:
 800d2d0:	4b02      	ldr	r3, [pc, #8]	; (800d2dc <realloc+0xc>)
 800d2d2:	460a      	mov	r2, r1
 800d2d4:	4601      	mov	r1, r0
 800d2d6:	6818      	ldr	r0, [r3, #0]
 800d2d8:	f000 b8f6 	b.w	800d4c8 <_realloc_r>
 800d2dc:	20000030 	.word	0x20000030

0800d2e0 <cleanup_glue>:
 800d2e0:	b538      	push	{r3, r4, r5, lr}
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	6809      	ldr	r1, [r1, #0]
 800d2e6:	4605      	mov	r5, r0
 800d2e8:	b109      	cbz	r1, 800d2ee <cleanup_glue+0xe>
 800d2ea:	f7ff fff9 	bl	800d2e0 <cleanup_glue>
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2f6:	f7ff bf0b 	b.w	800d110 <_free_r>
	...

0800d2fc <_reclaim_reent>:
 800d2fc:	4b2c      	ldr	r3, [pc, #176]	; (800d3b0 <_reclaim_reent+0xb4>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4283      	cmp	r3, r0
 800d302:	b570      	push	{r4, r5, r6, lr}
 800d304:	4604      	mov	r4, r0
 800d306:	d051      	beq.n	800d3ac <_reclaim_reent+0xb0>
 800d308:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d30a:	b143      	cbz	r3, 800d31e <_reclaim_reent+0x22>
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d14a      	bne.n	800d3a8 <_reclaim_reent+0xac>
 800d312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d314:	6819      	ldr	r1, [r3, #0]
 800d316:	b111      	cbz	r1, 800d31e <_reclaim_reent+0x22>
 800d318:	4620      	mov	r0, r4
 800d31a:	f7ff fef9 	bl	800d110 <_free_r>
 800d31e:	6961      	ldr	r1, [r4, #20]
 800d320:	b111      	cbz	r1, 800d328 <_reclaim_reent+0x2c>
 800d322:	4620      	mov	r0, r4
 800d324:	f7ff fef4 	bl	800d110 <_free_r>
 800d328:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d32a:	b111      	cbz	r1, 800d332 <_reclaim_reent+0x36>
 800d32c:	4620      	mov	r0, r4
 800d32e:	f7ff feef 	bl	800d110 <_free_r>
 800d332:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d334:	b111      	cbz	r1, 800d33c <_reclaim_reent+0x40>
 800d336:	4620      	mov	r0, r4
 800d338:	f7ff feea 	bl	800d110 <_free_r>
 800d33c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d33e:	b111      	cbz	r1, 800d346 <_reclaim_reent+0x4a>
 800d340:	4620      	mov	r0, r4
 800d342:	f7ff fee5 	bl	800d110 <_free_r>
 800d346:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d348:	b111      	cbz	r1, 800d350 <_reclaim_reent+0x54>
 800d34a:	4620      	mov	r0, r4
 800d34c:	f7ff fee0 	bl	800d110 <_free_r>
 800d350:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d352:	b111      	cbz	r1, 800d35a <_reclaim_reent+0x5e>
 800d354:	4620      	mov	r0, r4
 800d356:	f7ff fedb 	bl	800d110 <_free_r>
 800d35a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d35c:	b111      	cbz	r1, 800d364 <_reclaim_reent+0x68>
 800d35e:	4620      	mov	r0, r4
 800d360:	f7ff fed6 	bl	800d110 <_free_r>
 800d364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d366:	b111      	cbz	r1, 800d36e <_reclaim_reent+0x72>
 800d368:	4620      	mov	r0, r4
 800d36a:	f7ff fed1 	bl	800d110 <_free_r>
 800d36e:	69a3      	ldr	r3, [r4, #24]
 800d370:	b1e3      	cbz	r3, 800d3ac <_reclaim_reent+0xb0>
 800d372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d374:	4620      	mov	r0, r4
 800d376:	4798      	blx	r3
 800d378:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d37a:	b1b9      	cbz	r1, 800d3ac <_reclaim_reent+0xb0>
 800d37c:	4620      	mov	r0, r4
 800d37e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d382:	f7ff bfad 	b.w	800d2e0 <cleanup_glue>
 800d386:	5949      	ldr	r1, [r1, r5]
 800d388:	b941      	cbnz	r1, 800d39c <_reclaim_reent+0xa0>
 800d38a:	3504      	adds	r5, #4
 800d38c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d38e:	2d80      	cmp	r5, #128	; 0x80
 800d390:	68d9      	ldr	r1, [r3, #12]
 800d392:	d1f8      	bne.n	800d386 <_reclaim_reent+0x8a>
 800d394:	4620      	mov	r0, r4
 800d396:	f7ff febb 	bl	800d110 <_free_r>
 800d39a:	e7ba      	b.n	800d312 <_reclaim_reent+0x16>
 800d39c:	680e      	ldr	r6, [r1, #0]
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f7ff feb6 	bl	800d110 <_free_r>
 800d3a4:	4631      	mov	r1, r6
 800d3a6:	e7ef      	b.n	800d388 <_reclaim_reent+0x8c>
 800d3a8:	2500      	movs	r5, #0
 800d3aa:	e7ef      	b.n	800d38c <_reclaim_reent+0x90>
 800d3ac:	bd70      	pop	{r4, r5, r6, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20000030 	.word	0x20000030

0800d3b4 <_sbrk_r>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	4d06      	ldr	r5, [pc, #24]	; (800d3d0 <_sbrk_r+0x1c>)
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	4608      	mov	r0, r1
 800d3be:	602b      	str	r3, [r5, #0]
 800d3c0:	f7f4 ff48 	bl	8002254 <_sbrk>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d102      	bne.n	800d3ce <_sbrk_r+0x1a>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	b103      	cbz	r3, 800d3ce <_sbrk_r+0x1a>
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	200044bc 	.word	0x200044bc

0800d3d4 <siprintf>:
 800d3d4:	b40e      	push	{r1, r2, r3}
 800d3d6:	b500      	push	{lr}
 800d3d8:	b09c      	sub	sp, #112	; 0x70
 800d3da:	ab1d      	add	r3, sp, #116	; 0x74
 800d3dc:	9002      	str	r0, [sp, #8]
 800d3de:	9006      	str	r0, [sp, #24]
 800d3e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3e4:	4809      	ldr	r0, [pc, #36]	; (800d40c <siprintf+0x38>)
 800d3e6:	9107      	str	r1, [sp, #28]
 800d3e8:	9104      	str	r1, [sp, #16]
 800d3ea:	4909      	ldr	r1, [pc, #36]	; (800d410 <siprintf+0x3c>)
 800d3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3f0:	9105      	str	r1, [sp, #20]
 800d3f2:	6800      	ldr	r0, [r0, #0]
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	a902      	add	r1, sp, #8
 800d3f8:	f000 f8f0 	bl	800d5dc <_svfiprintf_r>
 800d3fc:	9b02      	ldr	r3, [sp, #8]
 800d3fe:	2200      	movs	r2, #0
 800d400:	701a      	strb	r2, [r3, #0]
 800d402:	b01c      	add	sp, #112	; 0x70
 800d404:	f85d eb04 	ldr.w	lr, [sp], #4
 800d408:	b003      	add	sp, #12
 800d40a:	4770      	bx	lr
 800d40c:	20000030 	.word	0x20000030
 800d410:	ffff0208 	.word	0xffff0208

0800d414 <strchr>:
 800d414:	b2c9      	uxtb	r1, r1
 800d416:	4603      	mov	r3, r0
 800d418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d41c:	b11a      	cbz	r2, 800d426 <strchr+0x12>
 800d41e:	428a      	cmp	r2, r1
 800d420:	d1f9      	bne.n	800d416 <strchr+0x2>
 800d422:	4618      	mov	r0, r3
 800d424:	4770      	bx	lr
 800d426:	2900      	cmp	r1, #0
 800d428:	bf18      	it	ne
 800d42a:	2300      	movne	r3, #0
 800d42c:	e7f9      	b.n	800d422 <strchr+0xe>

0800d42e <strcpy>:
 800d42e:	4603      	mov	r3, r0
 800d430:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d434:	f803 2b01 	strb.w	r2, [r3], #1
 800d438:	2a00      	cmp	r2, #0
 800d43a:	d1f9      	bne.n	800d430 <strcpy+0x2>
 800d43c:	4770      	bx	lr

0800d43e <_vsniprintf_r>:
 800d43e:	b530      	push	{r4, r5, lr}
 800d440:	4614      	mov	r4, r2
 800d442:	2c00      	cmp	r4, #0
 800d444:	b09b      	sub	sp, #108	; 0x6c
 800d446:	4605      	mov	r5, r0
 800d448:	461a      	mov	r2, r3
 800d44a:	da05      	bge.n	800d458 <_vsniprintf_r+0x1a>
 800d44c:	238b      	movs	r3, #139	; 0x8b
 800d44e:	6003      	str	r3, [r0, #0]
 800d450:	f04f 30ff 	mov.w	r0, #4294967295
 800d454:	b01b      	add	sp, #108	; 0x6c
 800d456:	bd30      	pop	{r4, r5, pc}
 800d458:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d45c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d460:	bf14      	ite	ne
 800d462:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d466:	4623      	moveq	r3, r4
 800d468:	9302      	str	r3, [sp, #8]
 800d46a:	9305      	str	r3, [sp, #20]
 800d46c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d470:	9100      	str	r1, [sp, #0]
 800d472:	9104      	str	r1, [sp, #16]
 800d474:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d478:	4669      	mov	r1, sp
 800d47a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d47c:	f000 f8ae 	bl	800d5dc <_svfiprintf_r>
 800d480:	1c43      	adds	r3, r0, #1
 800d482:	bfbc      	itt	lt
 800d484:	238b      	movlt	r3, #139	; 0x8b
 800d486:	602b      	strlt	r3, [r5, #0]
 800d488:	2c00      	cmp	r4, #0
 800d48a:	d0e3      	beq.n	800d454 <_vsniprintf_r+0x16>
 800d48c:	9b00      	ldr	r3, [sp, #0]
 800d48e:	2200      	movs	r2, #0
 800d490:	701a      	strb	r2, [r3, #0]
 800d492:	e7df      	b.n	800d454 <_vsniprintf_r+0x16>

0800d494 <vsniprintf>:
 800d494:	b507      	push	{r0, r1, r2, lr}
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	4613      	mov	r3, r2
 800d49a:	460a      	mov	r2, r1
 800d49c:	4601      	mov	r1, r0
 800d49e:	4803      	ldr	r0, [pc, #12]	; (800d4ac <vsniprintf+0x18>)
 800d4a0:	6800      	ldr	r0, [r0, #0]
 800d4a2:	f7ff ffcc 	bl	800d43e <_vsniprintf_r>
 800d4a6:	b003      	add	sp, #12
 800d4a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4ac:	20000030 	.word	0x20000030

0800d4b0 <__malloc_lock>:
 800d4b0:	4801      	ldr	r0, [pc, #4]	; (800d4b8 <__malloc_lock+0x8>)
 800d4b2:	f7ff be05 	b.w	800d0c0 <__retarget_lock_acquire_recursive>
 800d4b6:	bf00      	nop
 800d4b8:	200044b0 	.word	0x200044b0

0800d4bc <__malloc_unlock>:
 800d4bc:	4801      	ldr	r0, [pc, #4]	; (800d4c4 <__malloc_unlock+0x8>)
 800d4be:	f7ff be00 	b.w	800d0c2 <__retarget_lock_release_recursive>
 800d4c2:	bf00      	nop
 800d4c4:	200044b0 	.word	0x200044b0

0800d4c8 <_realloc_r>:
 800d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4cc:	4680      	mov	r8, r0
 800d4ce:	4614      	mov	r4, r2
 800d4d0:	460e      	mov	r6, r1
 800d4d2:	b921      	cbnz	r1, 800d4de <_realloc_r+0x16>
 800d4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d8:	4611      	mov	r1, r2
 800d4da:	f7ff be85 	b.w	800d1e8 <_malloc_r>
 800d4de:	b92a      	cbnz	r2, 800d4ec <_realloc_r+0x24>
 800d4e0:	f7ff fe16 	bl	800d110 <_free_r>
 800d4e4:	4625      	mov	r5, r4
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ec:	f000 fb24 	bl	800db38 <_malloc_usable_size_r>
 800d4f0:	4284      	cmp	r4, r0
 800d4f2:	4607      	mov	r7, r0
 800d4f4:	d802      	bhi.n	800d4fc <_realloc_r+0x34>
 800d4f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4fa:	d812      	bhi.n	800d522 <_realloc_r+0x5a>
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	4640      	mov	r0, r8
 800d500:	f7ff fe72 	bl	800d1e8 <_malloc_r>
 800d504:	4605      	mov	r5, r0
 800d506:	2800      	cmp	r0, #0
 800d508:	d0ed      	beq.n	800d4e6 <_realloc_r+0x1e>
 800d50a:	42bc      	cmp	r4, r7
 800d50c:	4622      	mov	r2, r4
 800d50e:	4631      	mov	r1, r6
 800d510:	bf28      	it	cs
 800d512:	463a      	movcs	r2, r7
 800d514:	f7ff fde6 	bl	800d0e4 <memcpy>
 800d518:	4631      	mov	r1, r6
 800d51a:	4640      	mov	r0, r8
 800d51c:	f7ff fdf8 	bl	800d110 <_free_r>
 800d520:	e7e1      	b.n	800d4e6 <_realloc_r+0x1e>
 800d522:	4635      	mov	r5, r6
 800d524:	e7df      	b.n	800d4e6 <_realloc_r+0x1e>

0800d526 <__ssputs_r>:
 800d526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d52a:	688e      	ldr	r6, [r1, #8]
 800d52c:	429e      	cmp	r6, r3
 800d52e:	4682      	mov	sl, r0
 800d530:	460c      	mov	r4, r1
 800d532:	4690      	mov	r8, r2
 800d534:	461f      	mov	r7, r3
 800d536:	d838      	bhi.n	800d5aa <__ssputs_r+0x84>
 800d538:	898a      	ldrh	r2, [r1, #12]
 800d53a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d53e:	d032      	beq.n	800d5a6 <__ssputs_r+0x80>
 800d540:	6825      	ldr	r5, [r4, #0]
 800d542:	6909      	ldr	r1, [r1, #16]
 800d544:	eba5 0901 	sub.w	r9, r5, r1
 800d548:	6965      	ldr	r5, [r4, #20]
 800d54a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d54e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d552:	3301      	adds	r3, #1
 800d554:	444b      	add	r3, r9
 800d556:	106d      	asrs	r5, r5, #1
 800d558:	429d      	cmp	r5, r3
 800d55a:	bf38      	it	cc
 800d55c:	461d      	movcc	r5, r3
 800d55e:	0553      	lsls	r3, r2, #21
 800d560:	d531      	bpl.n	800d5c6 <__ssputs_r+0xa0>
 800d562:	4629      	mov	r1, r5
 800d564:	f7ff fe40 	bl	800d1e8 <_malloc_r>
 800d568:	4606      	mov	r6, r0
 800d56a:	b950      	cbnz	r0, 800d582 <__ssputs_r+0x5c>
 800d56c:	230c      	movs	r3, #12
 800d56e:	f8ca 3000 	str.w	r3, [sl]
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	f04f 30ff 	mov.w	r0, #4294967295
 800d57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d582:	6921      	ldr	r1, [r4, #16]
 800d584:	464a      	mov	r2, r9
 800d586:	f7ff fdad 	bl	800d0e4 <memcpy>
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d594:	81a3      	strh	r3, [r4, #12]
 800d596:	6126      	str	r6, [r4, #16]
 800d598:	6165      	str	r5, [r4, #20]
 800d59a:	444e      	add	r6, r9
 800d59c:	eba5 0509 	sub.w	r5, r5, r9
 800d5a0:	6026      	str	r6, [r4, #0]
 800d5a2:	60a5      	str	r5, [r4, #8]
 800d5a4:	463e      	mov	r6, r7
 800d5a6:	42be      	cmp	r6, r7
 800d5a8:	d900      	bls.n	800d5ac <__ssputs_r+0x86>
 800d5aa:	463e      	mov	r6, r7
 800d5ac:	6820      	ldr	r0, [r4, #0]
 800d5ae:	4632      	mov	r2, r6
 800d5b0:	4641      	mov	r1, r8
 800d5b2:	f000 faa7 	bl	800db04 <memmove>
 800d5b6:	68a3      	ldr	r3, [r4, #8]
 800d5b8:	1b9b      	subs	r3, r3, r6
 800d5ba:	60a3      	str	r3, [r4, #8]
 800d5bc:	6823      	ldr	r3, [r4, #0]
 800d5be:	4433      	add	r3, r6
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e7db      	b.n	800d57e <__ssputs_r+0x58>
 800d5c6:	462a      	mov	r2, r5
 800d5c8:	f7ff ff7e 	bl	800d4c8 <_realloc_r>
 800d5cc:	4606      	mov	r6, r0
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d1e1      	bne.n	800d596 <__ssputs_r+0x70>
 800d5d2:	6921      	ldr	r1, [r4, #16]
 800d5d4:	4650      	mov	r0, sl
 800d5d6:	f7ff fd9b 	bl	800d110 <_free_r>
 800d5da:	e7c7      	b.n	800d56c <__ssputs_r+0x46>

0800d5dc <_svfiprintf_r>:
 800d5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e0:	4698      	mov	r8, r3
 800d5e2:	898b      	ldrh	r3, [r1, #12]
 800d5e4:	061b      	lsls	r3, r3, #24
 800d5e6:	b09d      	sub	sp, #116	; 0x74
 800d5e8:	4607      	mov	r7, r0
 800d5ea:	460d      	mov	r5, r1
 800d5ec:	4614      	mov	r4, r2
 800d5ee:	d50e      	bpl.n	800d60e <_svfiprintf_r+0x32>
 800d5f0:	690b      	ldr	r3, [r1, #16]
 800d5f2:	b963      	cbnz	r3, 800d60e <_svfiprintf_r+0x32>
 800d5f4:	2140      	movs	r1, #64	; 0x40
 800d5f6:	f7ff fdf7 	bl	800d1e8 <_malloc_r>
 800d5fa:	6028      	str	r0, [r5, #0]
 800d5fc:	6128      	str	r0, [r5, #16]
 800d5fe:	b920      	cbnz	r0, 800d60a <_svfiprintf_r+0x2e>
 800d600:	230c      	movs	r3, #12
 800d602:	603b      	str	r3, [r7, #0]
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	e0d1      	b.n	800d7ae <_svfiprintf_r+0x1d2>
 800d60a:	2340      	movs	r3, #64	; 0x40
 800d60c:	616b      	str	r3, [r5, #20]
 800d60e:	2300      	movs	r3, #0
 800d610:	9309      	str	r3, [sp, #36]	; 0x24
 800d612:	2320      	movs	r3, #32
 800d614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d618:	f8cd 800c 	str.w	r8, [sp, #12]
 800d61c:	2330      	movs	r3, #48	; 0x30
 800d61e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d7c8 <_svfiprintf_r+0x1ec>
 800d622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d626:	f04f 0901 	mov.w	r9, #1
 800d62a:	4623      	mov	r3, r4
 800d62c:	469a      	mov	sl, r3
 800d62e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d632:	b10a      	cbz	r2, 800d638 <_svfiprintf_r+0x5c>
 800d634:	2a25      	cmp	r2, #37	; 0x25
 800d636:	d1f9      	bne.n	800d62c <_svfiprintf_r+0x50>
 800d638:	ebba 0b04 	subs.w	fp, sl, r4
 800d63c:	d00b      	beq.n	800d656 <_svfiprintf_r+0x7a>
 800d63e:	465b      	mov	r3, fp
 800d640:	4622      	mov	r2, r4
 800d642:	4629      	mov	r1, r5
 800d644:	4638      	mov	r0, r7
 800d646:	f7ff ff6e 	bl	800d526 <__ssputs_r>
 800d64a:	3001      	adds	r0, #1
 800d64c:	f000 80aa 	beq.w	800d7a4 <_svfiprintf_r+0x1c8>
 800d650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d652:	445a      	add	r2, fp
 800d654:	9209      	str	r2, [sp, #36]	; 0x24
 800d656:	f89a 3000 	ldrb.w	r3, [sl]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f000 80a2 	beq.w	800d7a4 <_svfiprintf_r+0x1c8>
 800d660:	2300      	movs	r3, #0
 800d662:	f04f 32ff 	mov.w	r2, #4294967295
 800d666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d66a:	f10a 0a01 	add.w	sl, sl, #1
 800d66e:	9304      	str	r3, [sp, #16]
 800d670:	9307      	str	r3, [sp, #28]
 800d672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d676:	931a      	str	r3, [sp, #104]	; 0x68
 800d678:	4654      	mov	r4, sl
 800d67a:	2205      	movs	r2, #5
 800d67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d680:	4851      	ldr	r0, [pc, #324]	; (800d7c8 <_svfiprintf_r+0x1ec>)
 800d682:	f7f2 fdb5 	bl	80001f0 <memchr>
 800d686:	9a04      	ldr	r2, [sp, #16]
 800d688:	b9d8      	cbnz	r0, 800d6c2 <_svfiprintf_r+0xe6>
 800d68a:	06d0      	lsls	r0, r2, #27
 800d68c:	bf44      	itt	mi
 800d68e:	2320      	movmi	r3, #32
 800d690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d694:	0711      	lsls	r1, r2, #28
 800d696:	bf44      	itt	mi
 800d698:	232b      	movmi	r3, #43	; 0x2b
 800d69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d69e:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6a4:	d015      	beq.n	800d6d2 <_svfiprintf_r+0xf6>
 800d6a6:	9a07      	ldr	r2, [sp, #28]
 800d6a8:	4654      	mov	r4, sl
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	f04f 0c0a 	mov.w	ip, #10
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b6:	3b30      	subs	r3, #48	; 0x30
 800d6b8:	2b09      	cmp	r3, #9
 800d6ba:	d94e      	bls.n	800d75a <_svfiprintf_r+0x17e>
 800d6bc:	b1b0      	cbz	r0, 800d6ec <_svfiprintf_r+0x110>
 800d6be:	9207      	str	r2, [sp, #28]
 800d6c0:	e014      	b.n	800d6ec <_svfiprintf_r+0x110>
 800d6c2:	eba0 0308 	sub.w	r3, r0, r8
 800d6c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	9304      	str	r3, [sp, #16]
 800d6ce:	46a2      	mov	sl, r4
 800d6d0:	e7d2      	b.n	800d678 <_svfiprintf_r+0x9c>
 800d6d2:	9b03      	ldr	r3, [sp, #12]
 800d6d4:	1d19      	adds	r1, r3, #4
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	9103      	str	r1, [sp, #12]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	bfbb      	ittet	lt
 800d6de:	425b      	neglt	r3, r3
 800d6e0:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e4:	9307      	strge	r3, [sp, #28]
 800d6e6:	9307      	strlt	r3, [sp, #28]
 800d6e8:	bfb8      	it	lt
 800d6ea:	9204      	strlt	r2, [sp, #16]
 800d6ec:	7823      	ldrb	r3, [r4, #0]
 800d6ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d6f0:	d10c      	bne.n	800d70c <_svfiprintf_r+0x130>
 800d6f2:	7863      	ldrb	r3, [r4, #1]
 800d6f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d6f6:	d135      	bne.n	800d764 <_svfiprintf_r+0x188>
 800d6f8:	9b03      	ldr	r3, [sp, #12]
 800d6fa:	1d1a      	adds	r2, r3, #4
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	9203      	str	r2, [sp, #12]
 800d700:	2b00      	cmp	r3, #0
 800d702:	bfb8      	it	lt
 800d704:	f04f 33ff 	movlt.w	r3, #4294967295
 800d708:	3402      	adds	r4, #2
 800d70a:	9305      	str	r3, [sp, #20]
 800d70c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d7d8 <_svfiprintf_r+0x1fc>
 800d710:	7821      	ldrb	r1, [r4, #0]
 800d712:	2203      	movs	r2, #3
 800d714:	4650      	mov	r0, sl
 800d716:	f7f2 fd6b 	bl	80001f0 <memchr>
 800d71a:	b140      	cbz	r0, 800d72e <_svfiprintf_r+0x152>
 800d71c:	2340      	movs	r3, #64	; 0x40
 800d71e:	eba0 000a 	sub.w	r0, r0, sl
 800d722:	fa03 f000 	lsl.w	r0, r3, r0
 800d726:	9b04      	ldr	r3, [sp, #16]
 800d728:	4303      	orrs	r3, r0
 800d72a:	3401      	adds	r4, #1
 800d72c:	9304      	str	r3, [sp, #16]
 800d72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d732:	4826      	ldr	r0, [pc, #152]	; (800d7cc <_svfiprintf_r+0x1f0>)
 800d734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d738:	2206      	movs	r2, #6
 800d73a:	f7f2 fd59 	bl	80001f0 <memchr>
 800d73e:	2800      	cmp	r0, #0
 800d740:	d038      	beq.n	800d7b4 <_svfiprintf_r+0x1d8>
 800d742:	4b23      	ldr	r3, [pc, #140]	; (800d7d0 <_svfiprintf_r+0x1f4>)
 800d744:	bb1b      	cbnz	r3, 800d78e <_svfiprintf_r+0x1b2>
 800d746:	9b03      	ldr	r3, [sp, #12]
 800d748:	3307      	adds	r3, #7
 800d74a:	f023 0307 	bic.w	r3, r3, #7
 800d74e:	3308      	adds	r3, #8
 800d750:	9303      	str	r3, [sp, #12]
 800d752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d754:	4433      	add	r3, r6
 800d756:	9309      	str	r3, [sp, #36]	; 0x24
 800d758:	e767      	b.n	800d62a <_svfiprintf_r+0x4e>
 800d75a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d75e:	460c      	mov	r4, r1
 800d760:	2001      	movs	r0, #1
 800d762:	e7a5      	b.n	800d6b0 <_svfiprintf_r+0xd4>
 800d764:	2300      	movs	r3, #0
 800d766:	3401      	adds	r4, #1
 800d768:	9305      	str	r3, [sp, #20]
 800d76a:	4619      	mov	r1, r3
 800d76c:	f04f 0c0a 	mov.w	ip, #10
 800d770:	4620      	mov	r0, r4
 800d772:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d776:	3a30      	subs	r2, #48	; 0x30
 800d778:	2a09      	cmp	r2, #9
 800d77a:	d903      	bls.n	800d784 <_svfiprintf_r+0x1a8>
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d0c5      	beq.n	800d70c <_svfiprintf_r+0x130>
 800d780:	9105      	str	r1, [sp, #20]
 800d782:	e7c3      	b.n	800d70c <_svfiprintf_r+0x130>
 800d784:	fb0c 2101 	mla	r1, ip, r1, r2
 800d788:	4604      	mov	r4, r0
 800d78a:	2301      	movs	r3, #1
 800d78c:	e7f0      	b.n	800d770 <_svfiprintf_r+0x194>
 800d78e:	ab03      	add	r3, sp, #12
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	462a      	mov	r2, r5
 800d794:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <_svfiprintf_r+0x1f8>)
 800d796:	a904      	add	r1, sp, #16
 800d798:	4638      	mov	r0, r7
 800d79a:	f3af 8000 	nop.w
 800d79e:	1c42      	adds	r2, r0, #1
 800d7a0:	4606      	mov	r6, r0
 800d7a2:	d1d6      	bne.n	800d752 <_svfiprintf_r+0x176>
 800d7a4:	89ab      	ldrh	r3, [r5, #12]
 800d7a6:	065b      	lsls	r3, r3, #25
 800d7a8:	f53f af2c 	bmi.w	800d604 <_svfiprintf_r+0x28>
 800d7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7ae:	b01d      	add	sp, #116	; 0x74
 800d7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b4:	ab03      	add	r3, sp, #12
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	4b06      	ldr	r3, [pc, #24]	; (800d7d4 <_svfiprintf_r+0x1f8>)
 800d7bc:	a904      	add	r1, sp, #16
 800d7be:	4638      	mov	r0, r7
 800d7c0:	f000 f87a 	bl	800d8b8 <_printf_i>
 800d7c4:	e7eb      	b.n	800d79e <_svfiprintf_r+0x1c2>
 800d7c6:	bf00      	nop
 800d7c8:	0800e08c 	.word	0x0800e08c
 800d7cc:	0800e096 	.word	0x0800e096
 800d7d0:	00000000 	.word	0x00000000
 800d7d4:	0800d527 	.word	0x0800d527
 800d7d8:	0800e092 	.word	0x0800e092

0800d7dc <_printf_common>:
 800d7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e0:	4616      	mov	r6, r2
 800d7e2:	4699      	mov	r9, r3
 800d7e4:	688a      	ldr	r2, [r1, #8]
 800d7e6:	690b      	ldr	r3, [r1, #16]
 800d7e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	bfb8      	it	lt
 800d7f0:	4613      	movlt	r3, r2
 800d7f2:	6033      	str	r3, [r6, #0]
 800d7f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7f8:	4607      	mov	r7, r0
 800d7fa:	460c      	mov	r4, r1
 800d7fc:	b10a      	cbz	r2, 800d802 <_printf_common+0x26>
 800d7fe:	3301      	adds	r3, #1
 800d800:	6033      	str	r3, [r6, #0]
 800d802:	6823      	ldr	r3, [r4, #0]
 800d804:	0699      	lsls	r1, r3, #26
 800d806:	bf42      	ittt	mi
 800d808:	6833      	ldrmi	r3, [r6, #0]
 800d80a:	3302      	addmi	r3, #2
 800d80c:	6033      	strmi	r3, [r6, #0]
 800d80e:	6825      	ldr	r5, [r4, #0]
 800d810:	f015 0506 	ands.w	r5, r5, #6
 800d814:	d106      	bne.n	800d824 <_printf_common+0x48>
 800d816:	f104 0a19 	add.w	sl, r4, #25
 800d81a:	68e3      	ldr	r3, [r4, #12]
 800d81c:	6832      	ldr	r2, [r6, #0]
 800d81e:	1a9b      	subs	r3, r3, r2
 800d820:	42ab      	cmp	r3, r5
 800d822:	dc26      	bgt.n	800d872 <_printf_common+0x96>
 800d824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d828:	1e13      	subs	r3, r2, #0
 800d82a:	6822      	ldr	r2, [r4, #0]
 800d82c:	bf18      	it	ne
 800d82e:	2301      	movne	r3, #1
 800d830:	0692      	lsls	r2, r2, #26
 800d832:	d42b      	bmi.n	800d88c <_printf_common+0xb0>
 800d834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d838:	4649      	mov	r1, r9
 800d83a:	4638      	mov	r0, r7
 800d83c:	47c0      	blx	r8
 800d83e:	3001      	adds	r0, #1
 800d840:	d01e      	beq.n	800d880 <_printf_common+0xa4>
 800d842:	6823      	ldr	r3, [r4, #0]
 800d844:	68e5      	ldr	r5, [r4, #12]
 800d846:	6832      	ldr	r2, [r6, #0]
 800d848:	f003 0306 	and.w	r3, r3, #6
 800d84c:	2b04      	cmp	r3, #4
 800d84e:	bf08      	it	eq
 800d850:	1aad      	subeq	r5, r5, r2
 800d852:	68a3      	ldr	r3, [r4, #8]
 800d854:	6922      	ldr	r2, [r4, #16]
 800d856:	bf0c      	ite	eq
 800d858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d85c:	2500      	movne	r5, #0
 800d85e:	4293      	cmp	r3, r2
 800d860:	bfc4      	itt	gt
 800d862:	1a9b      	subgt	r3, r3, r2
 800d864:	18ed      	addgt	r5, r5, r3
 800d866:	2600      	movs	r6, #0
 800d868:	341a      	adds	r4, #26
 800d86a:	42b5      	cmp	r5, r6
 800d86c:	d11a      	bne.n	800d8a4 <_printf_common+0xc8>
 800d86e:	2000      	movs	r0, #0
 800d870:	e008      	b.n	800d884 <_printf_common+0xa8>
 800d872:	2301      	movs	r3, #1
 800d874:	4652      	mov	r2, sl
 800d876:	4649      	mov	r1, r9
 800d878:	4638      	mov	r0, r7
 800d87a:	47c0      	blx	r8
 800d87c:	3001      	adds	r0, #1
 800d87e:	d103      	bne.n	800d888 <_printf_common+0xac>
 800d880:	f04f 30ff 	mov.w	r0, #4294967295
 800d884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d888:	3501      	adds	r5, #1
 800d88a:	e7c6      	b.n	800d81a <_printf_common+0x3e>
 800d88c:	18e1      	adds	r1, r4, r3
 800d88e:	1c5a      	adds	r2, r3, #1
 800d890:	2030      	movs	r0, #48	; 0x30
 800d892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d896:	4422      	add	r2, r4
 800d898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d89c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8a0:	3302      	adds	r3, #2
 800d8a2:	e7c7      	b.n	800d834 <_printf_common+0x58>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	4638      	mov	r0, r7
 800d8ac:	47c0      	blx	r8
 800d8ae:	3001      	adds	r0, #1
 800d8b0:	d0e6      	beq.n	800d880 <_printf_common+0xa4>
 800d8b2:	3601      	adds	r6, #1
 800d8b4:	e7d9      	b.n	800d86a <_printf_common+0x8e>
	...

0800d8b8 <_printf_i>:
 800d8b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8bc:	7e0f      	ldrb	r7, [r1, #24]
 800d8be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8c0:	2f78      	cmp	r7, #120	; 0x78
 800d8c2:	4691      	mov	r9, r2
 800d8c4:	4680      	mov	r8, r0
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	469a      	mov	sl, r3
 800d8ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8ce:	d807      	bhi.n	800d8e0 <_printf_i+0x28>
 800d8d0:	2f62      	cmp	r7, #98	; 0x62
 800d8d2:	d80a      	bhi.n	800d8ea <_printf_i+0x32>
 800d8d4:	2f00      	cmp	r7, #0
 800d8d6:	f000 80d8 	beq.w	800da8a <_printf_i+0x1d2>
 800d8da:	2f58      	cmp	r7, #88	; 0x58
 800d8dc:	f000 80a3 	beq.w	800da26 <_printf_i+0x16e>
 800d8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8e8:	e03a      	b.n	800d960 <_printf_i+0xa8>
 800d8ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8ee:	2b15      	cmp	r3, #21
 800d8f0:	d8f6      	bhi.n	800d8e0 <_printf_i+0x28>
 800d8f2:	a101      	add	r1, pc, #4	; (adr r1, 800d8f8 <_printf_i+0x40>)
 800d8f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8f8:	0800d951 	.word	0x0800d951
 800d8fc:	0800d965 	.word	0x0800d965
 800d900:	0800d8e1 	.word	0x0800d8e1
 800d904:	0800d8e1 	.word	0x0800d8e1
 800d908:	0800d8e1 	.word	0x0800d8e1
 800d90c:	0800d8e1 	.word	0x0800d8e1
 800d910:	0800d965 	.word	0x0800d965
 800d914:	0800d8e1 	.word	0x0800d8e1
 800d918:	0800d8e1 	.word	0x0800d8e1
 800d91c:	0800d8e1 	.word	0x0800d8e1
 800d920:	0800d8e1 	.word	0x0800d8e1
 800d924:	0800da71 	.word	0x0800da71
 800d928:	0800d995 	.word	0x0800d995
 800d92c:	0800da53 	.word	0x0800da53
 800d930:	0800d8e1 	.word	0x0800d8e1
 800d934:	0800d8e1 	.word	0x0800d8e1
 800d938:	0800da93 	.word	0x0800da93
 800d93c:	0800d8e1 	.word	0x0800d8e1
 800d940:	0800d995 	.word	0x0800d995
 800d944:	0800d8e1 	.word	0x0800d8e1
 800d948:	0800d8e1 	.word	0x0800d8e1
 800d94c:	0800da5b 	.word	0x0800da5b
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	1d1a      	adds	r2, r3, #4
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	602a      	str	r2, [r5, #0]
 800d958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d95c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d960:	2301      	movs	r3, #1
 800d962:	e0a3      	b.n	800daac <_printf_i+0x1f4>
 800d964:	6820      	ldr	r0, [r4, #0]
 800d966:	6829      	ldr	r1, [r5, #0]
 800d968:	0606      	lsls	r6, r0, #24
 800d96a:	f101 0304 	add.w	r3, r1, #4
 800d96e:	d50a      	bpl.n	800d986 <_printf_i+0xce>
 800d970:	680e      	ldr	r6, [r1, #0]
 800d972:	602b      	str	r3, [r5, #0]
 800d974:	2e00      	cmp	r6, #0
 800d976:	da03      	bge.n	800d980 <_printf_i+0xc8>
 800d978:	232d      	movs	r3, #45	; 0x2d
 800d97a:	4276      	negs	r6, r6
 800d97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d980:	485e      	ldr	r0, [pc, #376]	; (800dafc <_printf_i+0x244>)
 800d982:	230a      	movs	r3, #10
 800d984:	e019      	b.n	800d9ba <_printf_i+0x102>
 800d986:	680e      	ldr	r6, [r1, #0]
 800d988:	602b      	str	r3, [r5, #0]
 800d98a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d98e:	bf18      	it	ne
 800d990:	b236      	sxthne	r6, r6
 800d992:	e7ef      	b.n	800d974 <_printf_i+0xbc>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	6820      	ldr	r0, [r4, #0]
 800d998:	1d19      	adds	r1, r3, #4
 800d99a:	6029      	str	r1, [r5, #0]
 800d99c:	0601      	lsls	r1, r0, #24
 800d99e:	d501      	bpl.n	800d9a4 <_printf_i+0xec>
 800d9a0:	681e      	ldr	r6, [r3, #0]
 800d9a2:	e002      	b.n	800d9aa <_printf_i+0xf2>
 800d9a4:	0646      	lsls	r6, r0, #25
 800d9a6:	d5fb      	bpl.n	800d9a0 <_printf_i+0xe8>
 800d9a8:	881e      	ldrh	r6, [r3, #0]
 800d9aa:	4854      	ldr	r0, [pc, #336]	; (800dafc <_printf_i+0x244>)
 800d9ac:	2f6f      	cmp	r7, #111	; 0x6f
 800d9ae:	bf0c      	ite	eq
 800d9b0:	2308      	moveq	r3, #8
 800d9b2:	230a      	movne	r3, #10
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9ba:	6865      	ldr	r5, [r4, #4]
 800d9bc:	60a5      	str	r5, [r4, #8]
 800d9be:	2d00      	cmp	r5, #0
 800d9c0:	bfa2      	ittt	ge
 800d9c2:	6821      	ldrge	r1, [r4, #0]
 800d9c4:	f021 0104 	bicge.w	r1, r1, #4
 800d9c8:	6021      	strge	r1, [r4, #0]
 800d9ca:	b90e      	cbnz	r6, 800d9d0 <_printf_i+0x118>
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	d04d      	beq.n	800da6c <_printf_i+0x1b4>
 800d9d0:	4615      	mov	r5, r2
 800d9d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9d6:	fb03 6711 	mls	r7, r3, r1, r6
 800d9da:	5dc7      	ldrb	r7, [r0, r7]
 800d9dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9e0:	4637      	mov	r7, r6
 800d9e2:	42bb      	cmp	r3, r7
 800d9e4:	460e      	mov	r6, r1
 800d9e6:	d9f4      	bls.n	800d9d2 <_printf_i+0x11a>
 800d9e8:	2b08      	cmp	r3, #8
 800d9ea:	d10b      	bne.n	800da04 <_printf_i+0x14c>
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	07de      	lsls	r6, r3, #31
 800d9f0:	d508      	bpl.n	800da04 <_printf_i+0x14c>
 800d9f2:	6923      	ldr	r3, [r4, #16]
 800d9f4:	6861      	ldr	r1, [r4, #4]
 800d9f6:	4299      	cmp	r1, r3
 800d9f8:	bfde      	ittt	le
 800d9fa:	2330      	movle	r3, #48	; 0x30
 800d9fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da00:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da04:	1b52      	subs	r2, r2, r5
 800da06:	6122      	str	r2, [r4, #16]
 800da08:	f8cd a000 	str.w	sl, [sp]
 800da0c:	464b      	mov	r3, r9
 800da0e:	aa03      	add	r2, sp, #12
 800da10:	4621      	mov	r1, r4
 800da12:	4640      	mov	r0, r8
 800da14:	f7ff fee2 	bl	800d7dc <_printf_common>
 800da18:	3001      	adds	r0, #1
 800da1a:	d14c      	bne.n	800dab6 <_printf_i+0x1fe>
 800da1c:	f04f 30ff 	mov.w	r0, #4294967295
 800da20:	b004      	add	sp, #16
 800da22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da26:	4835      	ldr	r0, [pc, #212]	; (800dafc <_printf_i+0x244>)
 800da28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800da2c:	6829      	ldr	r1, [r5, #0]
 800da2e:	6823      	ldr	r3, [r4, #0]
 800da30:	f851 6b04 	ldr.w	r6, [r1], #4
 800da34:	6029      	str	r1, [r5, #0]
 800da36:	061d      	lsls	r5, r3, #24
 800da38:	d514      	bpl.n	800da64 <_printf_i+0x1ac>
 800da3a:	07df      	lsls	r7, r3, #31
 800da3c:	bf44      	itt	mi
 800da3e:	f043 0320 	orrmi.w	r3, r3, #32
 800da42:	6023      	strmi	r3, [r4, #0]
 800da44:	b91e      	cbnz	r6, 800da4e <_printf_i+0x196>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	f023 0320 	bic.w	r3, r3, #32
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	2310      	movs	r3, #16
 800da50:	e7b0      	b.n	800d9b4 <_printf_i+0xfc>
 800da52:	6823      	ldr	r3, [r4, #0]
 800da54:	f043 0320 	orr.w	r3, r3, #32
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	2378      	movs	r3, #120	; 0x78
 800da5c:	4828      	ldr	r0, [pc, #160]	; (800db00 <_printf_i+0x248>)
 800da5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da62:	e7e3      	b.n	800da2c <_printf_i+0x174>
 800da64:	0659      	lsls	r1, r3, #25
 800da66:	bf48      	it	mi
 800da68:	b2b6      	uxthmi	r6, r6
 800da6a:	e7e6      	b.n	800da3a <_printf_i+0x182>
 800da6c:	4615      	mov	r5, r2
 800da6e:	e7bb      	b.n	800d9e8 <_printf_i+0x130>
 800da70:	682b      	ldr	r3, [r5, #0]
 800da72:	6826      	ldr	r6, [r4, #0]
 800da74:	6961      	ldr	r1, [r4, #20]
 800da76:	1d18      	adds	r0, r3, #4
 800da78:	6028      	str	r0, [r5, #0]
 800da7a:	0635      	lsls	r5, r6, #24
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	d501      	bpl.n	800da84 <_printf_i+0x1cc>
 800da80:	6019      	str	r1, [r3, #0]
 800da82:	e002      	b.n	800da8a <_printf_i+0x1d2>
 800da84:	0670      	lsls	r0, r6, #25
 800da86:	d5fb      	bpl.n	800da80 <_printf_i+0x1c8>
 800da88:	8019      	strh	r1, [r3, #0]
 800da8a:	2300      	movs	r3, #0
 800da8c:	6123      	str	r3, [r4, #16]
 800da8e:	4615      	mov	r5, r2
 800da90:	e7ba      	b.n	800da08 <_printf_i+0x150>
 800da92:	682b      	ldr	r3, [r5, #0]
 800da94:	1d1a      	adds	r2, r3, #4
 800da96:	602a      	str	r2, [r5, #0]
 800da98:	681d      	ldr	r5, [r3, #0]
 800da9a:	6862      	ldr	r2, [r4, #4]
 800da9c:	2100      	movs	r1, #0
 800da9e:	4628      	mov	r0, r5
 800daa0:	f7f2 fba6 	bl	80001f0 <memchr>
 800daa4:	b108      	cbz	r0, 800daaa <_printf_i+0x1f2>
 800daa6:	1b40      	subs	r0, r0, r5
 800daa8:	6060      	str	r0, [r4, #4]
 800daaa:	6863      	ldr	r3, [r4, #4]
 800daac:	6123      	str	r3, [r4, #16]
 800daae:	2300      	movs	r3, #0
 800dab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dab4:	e7a8      	b.n	800da08 <_printf_i+0x150>
 800dab6:	6923      	ldr	r3, [r4, #16]
 800dab8:	462a      	mov	r2, r5
 800daba:	4649      	mov	r1, r9
 800dabc:	4640      	mov	r0, r8
 800dabe:	47d0      	blx	sl
 800dac0:	3001      	adds	r0, #1
 800dac2:	d0ab      	beq.n	800da1c <_printf_i+0x164>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	079b      	lsls	r3, r3, #30
 800dac8:	d413      	bmi.n	800daf2 <_printf_i+0x23a>
 800daca:	68e0      	ldr	r0, [r4, #12]
 800dacc:	9b03      	ldr	r3, [sp, #12]
 800dace:	4298      	cmp	r0, r3
 800dad0:	bfb8      	it	lt
 800dad2:	4618      	movlt	r0, r3
 800dad4:	e7a4      	b.n	800da20 <_printf_i+0x168>
 800dad6:	2301      	movs	r3, #1
 800dad8:	4632      	mov	r2, r6
 800dada:	4649      	mov	r1, r9
 800dadc:	4640      	mov	r0, r8
 800dade:	47d0      	blx	sl
 800dae0:	3001      	adds	r0, #1
 800dae2:	d09b      	beq.n	800da1c <_printf_i+0x164>
 800dae4:	3501      	adds	r5, #1
 800dae6:	68e3      	ldr	r3, [r4, #12]
 800dae8:	9903      	ldr	r1, [sp, #12]
 800daea:	1a5b      	subs	r3, r3, r1
 800daec:	42ab      	cmp	r3, r5
 800daee:	dcf2      	bgt.n	800dad6 <_printf_i+0x21e>
 800daf0:	e7eb      	b.n	800daca <_printf_i+0x212>
 800daf2:	2500      	movs	r5, #0
 800daf4:	f104 0619 	add.w	r6, r4, #25
 800daf8:	e7f5      	b.n	800dae6 <_printf_i+0x22e>
 800dafa:	bf00      	nop
 800dafc:	0800e09d 	.word	0x0800e09d
 800db00:	0800e0ae 	.word	0x0800e0ae

0800db04 <memmove>:
 800db04:	4288      	cmp	r0, r1
 800db06:	b510      	push	{r4, lr}
 800db08:	eb01 0402 	add.w	r4, r1, r2
 800db0c:	d902      	bls.n	800db14 <memmove+0x10>
 800db0e:	4284      	cmp	r4, r0
 800db10:	4623      	mov	r3, r4
 800db12:	d807      	bhi.n	800db24 <memmove+0x20>
 800db14:	1e43      	subs	r3, r0, #1
 800db16:	42a1      	cmp	r1, r4
 800db18:	d008      	beq.n	800db2c <memmove+0x28>
 800db1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db22:	e7f8      	b.n	800db16 <memmove+0x12>
 800db24:	4402      	add	r2, r0
 800db26:	4601      	mov	r1, r0
 800db28:	428a      	cmp	r2, r1
 800db2a:	d100      	bne.n	800db2e <memmove+0x2a>
 800db2c:	bd10      	pop	{r4, pc}
 800db2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db36:	e7f7      	b.n	800db28 <memmove+0x24>

0800db38 <_malloc_usable_size_r>:
 800db38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db3c:	1f18      	subs	r0, r3, #4
 800db3e:	2b00      	cmp	r3, #0
 800db40:	bfbc      	itt	lt
 800db42:	580b      	ldrlt	r3, [r1, r0]
 800db44:	18c0      	addlt	r0, r0, r3
 800db46:	4770      	bx	lr

0800db48 <_init>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	bf00      	nop
 800db4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4e:	bc08      	pop	{r3}
 800db50:	469e      	mov	lr, r3
 800db52:	4770      	bx	lr

0800db54 <_fini>:
 800db54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db56:	bf00      	nop
 800db58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5a:	bc08      	pop	{r3}
 800db5c:	469e      	mov	lr, r3
 800db5e:	4770      	bx	lr
