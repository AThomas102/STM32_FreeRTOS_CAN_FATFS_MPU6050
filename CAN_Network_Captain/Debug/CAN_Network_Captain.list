
CAN_Network_Captain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800bf50  0800bf50  0001bf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4d4  0800c4d4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800c4d4  0800c4d4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c4d4  0800c4d4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4d4  0800c4d4  0001c4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4d8  0800c4d8  0001c4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000014d4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001564  20001564  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fa65  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000431f  00000000  00000000  0003fb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001948  00000000  00000000  00043e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001790  00000000  00000000  00045790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e0c  00000000  00000000  00046f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021588  00000000  00000000  0006cd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d99a0  00000000  00000000  0008e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00167c54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fbc  00000000  00000000  00167ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bf38 	.word	0x0800bf38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800bf38 	.word	0x0800bf38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <add_char>:
 * Returns:
 * 0: success
 * 1: realloc failure
 */
static int add_char(char **string, int *c, char ch)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	71fb      	strb	r3, [r7, #7]
    char *tmp = NULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
    (*c)++;
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	1c5a      	adds	r2, r3, #1
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	601a      	str	r2, [r3, #0]
    tmp = realloc(*string, (*c)+1);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	4619      	mov	r1, r3
 80002b8:	4610      	mov	r0, r2
 80002ba:	f00b fa21 	bl	800b700 <realloc>
 80002be:	6178      	str	r0, [r7, #20]
    if (tmp == NULL)
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <add_char+0x3a>
        return 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e012      	b.n	80002f0 <add_char+0x60>
    *string = tmp;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	601a      	str	r2, [r3, #0]
    (*string)[(*c)-1] = ch;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3b01      	subs	r3, #1
 80002da:	4413      	add	r3, r2
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	701a      	strb	r2, [r3, #0]
    (*string)[*c] = '\0';
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	6812      	ldr	r2, [r2, #0]
 80002e8:	4413      	add	r3, r2
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]

    return 0;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3718      	adds	r7, #24
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <create_field>:
 * memory for the field. Length is set to 0 and text to NULL
 *
 * Returns NULL on error via malloc.
 */
static CSV_FIELD *create_field()
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
    CSV_FIELD *field = malloc(sizeof(CSV_FIELD));
 80002fe:	2008      	movs	r0, #8
 8000300:	f00b f8f8 	bl	800b4f4 <malloc>
 8000304:	4603      	mov	r3, r0
 8000306:	607b      	str	r3, [r7, #4]
    field->length = 0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
    field->text = NULL;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
    set_field(field, "\0");
 8000314:	4904      	ldr	r1, [pc, #16]	; (8000328 <create_field+0x30>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f821 	bl	800035e <set_field>
    return field;
 800031c:	687b      	ldr	r3, [r7, #4]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	0800bf50 	.word	0x0800bf50

0800032c <destroy_field>:
 * Returns:
 * 0: success
 * 1: error realloc'ing field's char array
 */
static void destroy_field(CSV_FIELD *field)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    if (field->text != NULL)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d007      	beq.n	800034c <destroy_field+0x20>
	{
		free(field->text);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f00b f8df 	bl	800b504 <free>
		field->text = NULL;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
    }
    free(field);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f00b f8d9 	bl	800b504 <free>
    field = NULL;
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <set_field>:
 * Returns:
 *  0: success
 *  1: error allocating space to the string
 */
static int set_field(CSV_FIELD *field, char *text)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b084      	sub	sp, #16
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
    char *tmp;

    field->length = strlen(text) + 1;
 8000368:	6838      	ldr	r0, [r7, #0]
 800036a:	f7ff ff39 	bl	80001e0 <strlen>
 800036e:	4603      	mov	r3, r0
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	605a      	str	r2, [r3, #4]
    tmp = realloc(field->text, field->length);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4619      	mov	r1, r3
 8000380:	4610      	mov	r0, r2
 8000382:	f00b f9bd 	bl	800b700 <realloc>
 8000386:	60f8      	str	r0, [r7, #12]
    if (tmp == NULL)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <set_field+0x34>
        return 1;
 800038e:	2301      	movs	r3, #1
 8000390:	e009      	b.n	80003a6 <set_field+0x48>
    field->text = tmp;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	601a      	str	r2, [r3, #0]
    strcpy(field->text, text);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f00b fa3d 	bl	800b81e <strcpy>

    return 0;
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <read_next_field>:
 *  0: Moved successfully to the next entry in this row
 *  1: The next entry is on a new row
 *  2: There is no next entry (EOF)
 */
static int read_next_field(FIL *csv_fp, char field_delim, char text_delim, CSV_FIELD *field)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b08c      	sub	sp, #48	; 0x30
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	72fb      	strb	r3, [r7, #11]
 80003bc:	4613      	mov	r3, r2
 80003be:	72bb      	strb	r3, [r7, #10]
	char ch = 'a';
 80003c0:	2361      	movs	r3, #97	; 0x61
 80003c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    bool done = false;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool in_text = false;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool esc = false;
 80003d2:	2300      	movs	r3, #0
 80003d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	UINT n;
    int c = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
    char *tmp = malloc(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f00b f889 	bl	800b4f4 <malloc>
 80003e2:	4603      	mov	r3, r0
 80003e4:	617b      	str	r3, [r7, #20]
    tmp[0] = '\0';
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]

	while (!done)
 80003ec:	e084      	b.n	80004f8 <read_next_field+0x14a>
	{
		f_read(csv_fp, &ch, 1, &n);
 80003ee:	f107 031c 	add.w	r3, r7, #28
 80003f2:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80003f6:	2201      	movs	r2, #1
 80003f8:	68f8      	ldr	r0, [r7, #12]
 80003fa:	f007 f8dc 	bl	80075b6 <f_read>

		if (f_eof(csv_fp))
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800040a:	429a      	cmp	r2, r3
 800040c:	d105      	bne.n	800041a <read_next_field+0x6c>
		{
			c = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
			done = true;
 8000412:	2301      	movs	r3, #1
 8000414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000418:	e06e      	b.n	80004f8 <read_next_field+0x14a>
		}
		else if (!in_text)
 800041a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800041e:	f083 0301 	eor.w	r3, r3, #1
 8000422:	b2db      	uxtb	r3, r3
 8000424:	2b00      	cmp	r3, #0
 8000426:	d029      	beq.n	800047c <read_next_field+0xce>
		{
			if (ch == text_delim)
 8000428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800042c:	7aba      	ldrb	r2, [r7, #10]
 800042e:	429a      	cmp	r2, r3
 8000430:	d105      	bne.n	800043e <read_next_field+0x90>
			{
				in_text = true;
 8000432:	2301      	movs	r3, #1
 8000434:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				c = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
 800043c:	e05c      	b.n	80004f8 <read_next_field+0x14a>
			}
			else if (ch == field_delim)
 800043e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000442:	7afa      	ldrb	r2, [r7, #11]
 8000444:	429a      	cmp	r2, r3
 8000446:	d103      	bne.n	8000450 <read_next_field+0xa2>
			{
				done = true;
 8000448:	2301      	movs	r3, #1
 800044a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800044e:	e053      	b.n	80004f8 <read_next_field+0x14a>
			}
			else if (ch == '\n')
 8000450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000454:	2b0a      	cmp	r3, #10
 8000456:	d103      	bne.n	8000460 <read_next_field+0xb2>
			{
				done = true;
 8000458:	2301      	movs	r3, #1
 800045a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800045e:	e04b      	b.n	80004f8 <read_next_field+0x14a>
			}
			else if (ch != '\r')
 8000460:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000464:	2b0d      	cmp	r3, #13
 8000466:	d047      	beq.n	80004f8 <read_next_field+0x14a>
			{
				add_char(&tmp, &c, ch);
 8000468:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800046c:	f107 0118 	add.w	r1, r7, #24
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff ff0b 	bl	8000290 <add_char>
 800047a:	e03d      	b.n	80004f8 <read_next_field+0x14a>
			}
		}
		else
		{ /* in_text == true */
			if (esc)
 800047c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000480:	2b00      	cmp	r3, #0
 8000482:	d018      	beq.n	80004b6 <read_next_field+0x108>
			{
				if (ch == text_delim)
 8000484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000488:	7aba      	ldrb	r2, [r7, #10]
 800048a:	429a      	cmp	r2, r3
 800048c:	d10c      	bne.n	80004a8 <read_next_field+0xfa>
				{
					add_char(&tmp, &c, ch);
 800048e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000492:	f107 0118 	add.w	r1, r7, #24
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff fef8 	bl	8000290 <add_char>
					esc = false;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80004a6:	e027      	b.n	80004f8 <read_next_field+0x14a>
				}
				else
				{
					esc = false;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					done = true;
 80004ae:	2301      	movs	r3, #1
 80004b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004b4:	e020      	b.n	80004f8 <read_next_field+0x14a>
				}
			}
			else
			{ /* !esc */
				if (ch == text_delim)
 80004b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004ba:	7aba      	ldrb	r2, [r7, #10]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d103      	bne.n	80004c8 <read_next_field+0x11a>
				{
					esc = true;
 80004c0:	2301      	movs	r3, #1
 80004c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80004c6:	e017      	b.n	80004f8 <read_next_field+0x14a>
				} else if (ch == field_delim)
 80004c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004cc:	7afa      	ldrb	r2, [r7, #11]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d109      	bne.n	80004e6 <read_next_field+0x138>
				{
					add_char(&tmp, &c, ch);
 80004d2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80004d6:	f107 0118 	add.w	r1, r7, #24
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fed6 	bl	8000290 <add_char>
 80004e4:	e008      	b.n	80004f8 <read_next_field+0x14a>
				}
				else
				{
					add_char(&tmp, &c, ch);
 80004e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80004ea:	f107 0118 	add.w	r1, r7, #24
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fecc 	bl	8000290 <add_char>
	while (!done)
 80004f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004fc:	f083 0301 	eor.w	r3, r3, #1
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	f47f af73 	bne.w	80003ee <read_next_field+0x40>
				}
			}
		}
    }

    if (field != NULL)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d004      	beq.n	8000518 <read_next_field+0x16a>
	{
        set_field(field, tmp);
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	4619      	mov	r1, r3
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff ff23 	bl	800035e <set_field>
    }

    if (tmp != NULL)
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d003      	beq.n	8000526 <read_next_field+0x178>
        free(tmp);
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	4618      	mov	r0, r3
 8000522:	f00a ffef 	bl	800b504 <free>
    tmp = NULL;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
    /* Moving the fp to the beginning of the next field and peeking
        * to see if it is a new line or if there is in fact no next field.
        */
    int pos;
    int retval;
    done = false;
 800052a:	2300      	movs	r3, #0
 800052c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (!done)
 8000530:	e046      	b.n	80005c0 <read_next_field+0x212>
	{
		if (ch == field_delim)
 8000532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000536:	7afa      	ldrb	r2, [r7, #11]
 8000538:	429a      	cmp	r2, r3
 800053a:	d105      	bne.n	8000548 <read_next_field+0x19a>
		{
			retval = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 8000540:	2301      	movs	r3, #1
 8000542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000546:	e03b      	b.n	80005c0 <read_next_field+0x212>
		}
		else if (ch == '\n')
 8000548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800054c:	2b0a      	cmp	r3, #10
 800054e:	d121      	bne.n	8000594 <read_next_field+0x1e6>
		{
			/* Checking to see if this \n is the one that UNIX
				* sometimes includes before the EOF */
			pos = csv_fp->fptr;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
			f_read(csv_fp, &ch, 1, &n);
 8000558:	f107 031c 	add.w	r3, r7, #28
 800055c:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000560:	2201      	movs	r2, #1
 8000562:	68f8      	ldr	r0, [r7, #12]
 8000564:	f007 f827 	bl	80075b6 <f_read>

			if (f_eof(csv_fp))
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000574:	429a      	cmp	r2, r3
 8000576:	d102      	bne.n	800057e <read_next_field+0x1d0>
				retval = 2;
 8000578:	2302      	movs	r3, #2
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
 800057c:	e001      	b.n	8000582 <read_next_field+0x1d4>
			else
				retval = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28

			f_lseek(csv_fp, pos);
 8000582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000584:	4619      	mov	r1, r3
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	f007 fcba 	bl	8007f00 <f_lseek>
			done = true;
 800058c:	2301      	movs	r3, #1
 800058e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000592:	e015      	b.n	80005c0 <read_next_field+0x212>
		}
		else if (f_eof(csv_fp))
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d105      	bne.n	80005b0 <read_next_field+0x202>
		{
			retval = 2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 80005a8:	2301      	movs	r3, #1
 80005aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80005ae:	e007      	b.n	80005c0 <read_next_field+0x212>
		}
		else
		{
			f_read(csv_fp, &ch, 1, &n);
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80005b8:	2201      	movs	r2, #1
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f006 fffb 	bl	80075b6 <f_read>
    while (!done)
 80005c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005c4:	f083 0301 	eor.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1b1      	bne.n	8000532 <read_next_field+0x184>
		}
    }

    return retval;
 80005ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3730      	adds	r7, #48	; 0x30
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <append_field>:
 * 0: success
 * 1: the given row does not exist
 * 2: memory allocation error
 */
static int append_field(CSV_BUFFER *buffer, size_t row)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]

	CSV_FIELD **temp_field;

	if (buffer->rows < row + 1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d201      	bcs.n	80005f2 <append_field+0x1a>
		return 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e036      	b.n	8000660 <append_field+0x88>

	/* Set col equal to the index of the new field */
	int col = buffer->width[row];
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	60fb      	str	r3, [r7, #12]

	temp_field = realloc(buffer->field[row], (col + 1) * sizeof(CSV_FIELD*));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3301      	adds	r3, #1
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f00b f873 	bl	800b700 <realloc>
 800061a:	60b8      	str	r0, [r7, #8]
	if (temp_field == NULL)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d101      	bne.n	8000626 <append_field+0x4e>
	{
		return 2;
 8000622:	2302      	movs	r3, #2
 8000624:	e01c      	b.n	8000660 <append_field+0x88>
	}
	else
	{
		buffer->field[row] = temp_field;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	601a      	str	r2, [r3, #0]
		buffer->field[row][col] = create_field();
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	18d4      	adds	r4, r2, r3
 8000646:	f7ff fe57 	bl	80002f8 <create_field>
 800064a:	4603      	mov	r3, r0
 800064c:	6023      	str	r3, [r4, #0]
		buffer->width[row]++;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	4413      	add	r3, r2
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	3201      	adds	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800065e:	2300      	movs	r3, #0
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	bd90      	pop	{r4, r7, pc}

08000668 <append_row>:
 * 0: success
 * 1: error allocating width memory
 * 2: error allocating field memory
 */
static int append_row(CSV_BUFFER *buffer)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    size_t *temp_width;
    CSV_FIELD ***temp_field;

    size_t row  = buffer->rows;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	617b      	str	r3, [r7, #20]

    temp_width = realloc(buffer->width, (buffer->rows + 1) * sizeof(size_t));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	689a      	ldr	r2, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	3301      	adds	r3, #1
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f00b f83b 	bl	800b700 <realloc>
 800068a:	6138      	str	r0, [r7, #16]
    if (temp_width != NULL)
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d018      	beq.n	80006c4 <append_row+0x5c>
	{
        buffer->width = temp_width;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	693a      	ldr	r2, [r7, #16]
 8000696:	609a      	str	r2, [r3, #8]
        buffer->width[row] = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689a      	ldr	r2, [r3, #8]
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	else
	{
        return 1;
    }

    temp_field = realloc(buffer->field, (buffer->rows + 1) * sizeof(CSV_FIELD**));
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	3301      	adds	r3, #1
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4619      	mov	r1, r3
 80006b4:	4610      	mov	r0, r2
 80006b6:	f00b f823 	bl	800b700 <realloc>
 80006ba:	60f8      	str	r0, [r7, #12]
    if (temp_field != NULL)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d017      	beq.n	80006f2 <append_row+0x8a>
 80006c2:	e001      	b.n	80006c8 <append_row+0x60>
        return 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	e018      	b.n	80006fa <append_row+0x92>
	{
        buffer->field = temp_field;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	601a      	str	r2, [r3, #0]
        buffer->field[row] = NULL;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
	{
        free(temp_width);
        return 2;
    }

    buffer->rows++;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	605a      	str	r2, [r3, #4]
    append_field(buffer, row);
 80006e6:	6979      	ldr	r1, [r7, #20]
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff75 	bl	80005d8 <append_field>
    return 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e003      	b.n	80006fa <append_row+0x92>
        free(temp_width);
 80006f2:	6938      	ldr	r0, [r7, #16]
 80006f4:	f00a ff06 	bl	800b504 <free>
        return 2;
 80006f8:	2302      	movs	r3, #2
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3718      	adds	r7, #24
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <csv_create_buffer>:

    return 0;
}

CSV_BUFFER *csv_create_buffer()
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
    CSV_BUFFER *buffer = malloc(sizeof(CSV_BUFFER));
 8000708:	2010      	movs	r0, #16
 800070a:	f00a fef3 	bl	800b4f4 <malloc>
 800070e:	4603      	mov	r3, r0
 8000710:	607b      	str	r3, [r7, #4]

    if (buffer != NULL)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00e      	beq.n	8000736 <csv_create_buffer+0x34>
	{
	    buffer->field = NULL;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
	    buffer->rows = 0;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
	    buffer->width = NULL;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
	    buffer->field_delim = ',';
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	222c      	movs	r2, #44	; 0x2c
 800072e:	731a      	strb	r2, [r3, #12]
	    buffer->text_delim = '"';
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2222      	movs	r2, #34	; 0x22
 8000734:	735a      	strb	r2, [r3, #13]
    }

    return buffer;
 8000736:	687b      	ldr	r3, [r7, #4]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <csv_destroy_buffer>:

void csv_destroy_buffer(CSV_BUFFER *buffer)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    int i, j;

    for (i = 0; i < buffer->rows; i++)
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	e02e      	b.n	80007ac <csv_destroy_buffer+0x6c>
	{
        for (j = 0; j < buffer->width[i]; j++)
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	e00f      	b.n	8000774 <csv_destroy_buffer+0x34>
		{
            destroy_field(buffer->field[i][j]);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4413      	add	r3, r2
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fddf 	bl	800032c <destroy_field>
        for (j = 0; j < buffer->width[i]; j++)
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	3301      	adds	r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689a      	ldr	r2, [r3, #8]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	429a      	cmp	r2, r3
 8000784:	d8e6      	bhi.n	8000754 <csv_destroy_buffer+0x14>
        }
        free(buffer->field[i]);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	4413      	add	r3, r2
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f00a feb6 	bl	800b504 <free>
        buffer->field[i] = NULL;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->rows; i++)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d8cb      	bhi.n	800074e <csv_destroy_buffer+0xe>
    }

    if (buffer->field != NULL)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d004      	beq.n	80007c8 <csv_destroy_buffer+0x88>
        free(buffer->field);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00a fe9e 	bl	800b504 <free>

    if (buffer->width != NULL)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <csv_destroy_buffer+0x9a>
        free(buffer->width);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00a fe95 	bl	800b504 <free>

    free(buffer);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f00a fe92 	bl	800b504 <free>
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <csv_load>:

int csv_load(CSV_BUFFER *buffer, FIL *csv_fp)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 80007f2:	2100      	movs	r1, #0
 80007f4:	6838      	ldr	r0, [r7, #0]
 80007f6:	f007 fb83 	bl	8007f00 <f_lseek>
 80007fa:	4603      	mov	r3, r0
 80007fc:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK)
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <csv_load+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 8000804:	2301      	movs	r3, #1
 8000806:	e059      	b.n	80008bc <csv_load+0xd4>
	}

	int next = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
	bool end = false;
 800080c:	2300      	movs	r3, #0
 800080e:	76fb      	strb	r3, [r7, #27]
	bool first = true;
 8000810:	2301      	movs	r3, #1
 8000812:	76bb      	strb	r3, [r7, #26]
	int i = -1, j = -1;
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	613b      	str	r3, [r7, #16]

	while (!end)
 8000820:	e045      	b.n	80008ae <csv_load+0xc6>
	{
		if (!first)
 8000822:	7ebb      	ldrb	r3, [r7, #26]
 8000824:	f083 0301 	eor.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d015      	beq.n	800085a <csv_load+0x72>
		{
			next = read_next_field(csv_fp, buffer->field_delim, buffer->text_delim, buffer->field[i][j-1]);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7b19      	ldrb	r1, [r3, #12]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7b58      	ldrb	r0, [r3, #13]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000848:	3b01      	subs	r3, #1
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4602      	mov	r2, r0
 8000852:	6838      	ldr	r0, [r7, #0]
 8000854:	f7ff fdab 	bl	80003ae <read_next_field>
 8000858:	61f8      	str	r0, [r7, #28]
		}

		if (next == 2)
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d101      	bne.n	8000864 <csv_load+0x7c>
			end = true;
 8000860:	2301      	movs	r3, #1
 8000862:	76fb      	strb	r3, [r7, #27]

		if (next == 1)
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d10c      	bne.n	8000884 <csv_load+0x9c>
		{
			if (append_row(buffer) != 0)
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fefc 	bl	8000668 <append_row>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <csv_load+0x92>
				return 2;
 8000876:	2302      	movs	r3, #2
 8000878:	e020      	b.n	80008bc <csv_load+0xd4>
			j = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	613b      	str	r3, [r7, #16]
			i++;
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	3301      	adds	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
		}

		if (next == 0)
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d10c      	bne.n	80008a4 <csv_load+0xbc>
		{
			if (append_field(buffer, i) != 0)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	4619      	mov	r1, r3
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fea2 	bl	80005d8 <append_field>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <csv_load+0xb6>
				return 2;
 800089a:	2302      	movs	r3, #2
 800089c:	e00e      	b.n	80008bc <csv_load+0xd4>
			j++;
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	3301      	adds	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
		}

		if (first) first = false;
 80008a4:	7ebb      	ldrb	r3, [r7, #26]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <csv_load+0xc6>
 80008aa:	2300      	movs	r3, #0
 80008ac:	76bb      	strb	r3, [r7, #26]
	while (!end)
 80008ae:	7efb      	ldrb	r3, [r7, #27]
 80008b0:	f083 0301 	eor.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1b3      	bne.n	8000822 <csv_load+0x3a>
	}

	return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <csv_save>:

int csv_save(FIL *csv_fp, CSV_BUFFER *buffer)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]

	UINT n;
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 80008ce:	2100      	movs	r1, #0
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f007 fb15 	bl	8007f00 <f_lseek>
 80008d6:	4603      	mov	r3, r0
 80008d8:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 80008da:	7cfb      	ldrb	r3, [r7, #19]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <csv_save+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e0d8      	b.n	8000a96 <csv_save+0x1d2>
	}

    char text_delim = buffer->text_delim;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	7b5b      	ldrb	r3, [r3, #13]
 80008e8:	72fb      	strb	r3, [r7, #11]
    char field_delim = buffer->field_delim;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	7b1b      	ldrb	r3, [r3, #12]
 80008ee:	72bb      	strb	r3, [r7, #10]
	char new_line = '\n';
 80008f0:	230a      	movs	r3, #10
 80008f2:	727b      	strb	r3, [r7, #9]
    for(i = 0; i < buffer->rows; i++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
 80008f8:	e0b9      	b.n	8000a6e <csv_save+0x1aa>
	{
        for(j = 0; j < buffer->width[i]; j++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	e0a9      	b.n	8000a54 <csv_save+0x190>
		{
            chloc = strchr(buffer->field[i][j]->text, text_delim);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	7afa      	ldrb	r2, [r7, #11]
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f00a ff72 	bl	800b804 <strchr>
 8000920:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d110      	bne.n	800094a <csv_save+0x86>
                chloc = strchr(buffer->field[i][j]->text, field_delim);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	4413      	add	r3, r2
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	7aba      	ldrb	r2, [r7, #10]
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f00a ff5e 	bl	800b804 <strchr>
 8000948:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10f      	bne.n	8000970 <csv_save+0xac>
                chloc = strchr(buffer->field[i][j]->text, '\n');
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4413      	add	r3, r2
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	210a      	movs	r1, #10
 8000968:	4618      	mov	r0, r3
 800096a:	f00a ff4b 	bl	800b804 <strchr>
 800096e:	6178      	str	r0, [r7, #20]
            // if any of the above characters are found, chloc will be set
            // and we must use text delimiters.
            if(chloc != NULL)
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d02e      	beq.n	80009d4 <csv_save+0x110>
			{
				f_write(csv_fp, &text_delim, 1, &n);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	f107 010b 	add.w	r1, r7, #11
 800097e:	2201      	movs	r2, #1
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f006 ffcd 	bl	8007920 <f_write>
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	1e5a      	subs	r2, r3, #1
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f006 ffb1 	bl	8007920 <f_write>
				f_write(csv_fp, &text_delim, 1, &n);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	f107 010b 	add.w	r1, r7, #11
 80009c6:	2201      	movs	r2, #1
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f006 ffa9 	bl	8007920 <f_write>
                chloc = NULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e01b      	b.n	8000a0c <csv_save+0x148>
            }
			else
			{
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4413      	add	r3, r2
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6819      	ldr	r1, [r3, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f006 ff8a 	bl	8007920 <f_write>
            }
            if(j < buffer->width[i] - 1)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	689a      	ldr	r2, [r3, #8]
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d908      	bls.n	8000a32 <csv_save+0x16e>
				f_write(csv_fp, &field_delim, 1, &n);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	f107 010a 	add.w	r1, r7, #10
 8000a28:	2201      	movs	r2, #1
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f006 ff78 	bl	8007920 <f_write>
 8000a30:	e00d      	b.n	8000a4e <csv_save+0x18a>
            else if (i < buffer->rows - 1)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d907      	bls.n	8000a4e <csv_save+0x18a>
				f_write(csv_fp, &new_line, 1, &n);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	f107 0109 	add.w	r1, r7, #9
 8000a46:	2201      	movs	r2, #1
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f006 ff69 	bl	8007920 <f_write>
        for(j = 0; j < buffer->width[i]; j++)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	689a      	ldr	r2, [r3, #8]
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	f63f af4c 	bhi.w	8000900 <csv_save+0x3c>
    for(i = 0; i < buffer->rows; i++)
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	f63f af40 	bhi.w	80008fa <csv_save+0x36>
        }
    }
	f_truncate(csv_fp);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f007 fd0f 	bl	800849e <f_truncate>

	// Sync (just in case)
	res = f_sync(csv_fp);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f007 f944 	bl	8007d0e <f_sync>
 8000a86:	4603      	mov	r3, r0
 8000a88:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 8000a8a:	7cfb      	ldrb	r3, [r7, #19]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <csv_save+0x1d0>
	{
		//log_error("f_sync pb: %d", res);
		return 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e000      	b.n	8000a96 <csv_save+0x1d2>
	}

    return 0;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <csv_set_field>:
    else
        return buffer->field[row][entry]->length - 1;
}

int csv_set_field(CSV_BUFFER *buffer, size_t row, size_t entry, char *field)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	603b      	str	r3, [r7, #0]
    while (row >= buffer->rows)
 8000aac:	e002      	b.n	8000ab4 <csv_set_field+0x16>
	{
        append_row(buffer);
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff fdda 	bl	8000668 <append_row>
    while (row >= buffer->rows)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d2f7      	bcs.n	8000aae <csv_set_field+0x10>
    }
    while (entry >= buffer->width[row])
 8000abe:	e003      	b.n	8000ac8 <csv_set_field+0x2a>
        append_field(buffer, row);
 8000ac0:	68b9      	ldr	r1, [r7, #8]
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f7ff fd88 	bl	80005d8 <append_field>
    while (entry >= buffer->width[row])
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d2f2      	bcs.n	8000ac0 <csv_set_field+0x22>

    if (set_field(buffer->field[row][entry], field) == 0)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	4413      	add	r3, r2
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fc34 	bl	800035e <set_field>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <csv_set_field+0x62>
        return 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	e000      	b.n	8000b02 <csv_set_field+0x64>
    else
        return 1;
 8000b00:	2301      	movs	r3, #1
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <vApplicationGetIdleTaskMemory+0x30>)
 8000b22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b2a:	bf00      	nop
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200000ac 	.word	0x200000ac
 8000b3c:	20000160 	.word	0x20000160

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b0aa      	sub	sp, #168	; 0xa8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b46:	f000 fecd 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f8e7 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4e:	f000 f9e9 	bl	8000f24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b52:	f000 f9b7 	bl	8000ec4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000b56:	f000 f93f 	bl	8000dd8 <MX_CAN_Init>
  MX_FATFS_Init();
 8000b5a:	f004 faf7 	bl	800514c <MX_FATFS_Init>
  MX_SPI1_Init();
 8000b5e:	f000 f973 	bl	8000e48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  myprintf("------- CAN Captain Controller ----------\r\n");
 8000b62:	485e      	ldr	r0, [pc, #376]	; (8000cdc <main+0x19c>)
 8000b64:	f000 fa28 	bl	8000fb8 <myprintf>

  canfil.FilterBank = 0;
 8000b68:	4b5d      	ldr	r3, [pc, #372]	; (8000ce0 <main+0x1a0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b6e:	4b5c      	ldr	r3, [pc, #368]	; (8000ce0 <main+0x1a0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b74:	4b5a      	ldr	r3, [pc, #360]	; (8000ce0 <main+0x1a0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8000b7a:	4b59      	ldr	r3, [pc, #356]	; (8000ce0 <main+0x1a0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 8000b80:	4b57      	ldr	r3, [pc, #348]	; (8000ce0 <main+0x1a0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8000b86:	4b56      	ldr	r3, [pc, #344]	; (8000ce0 <main+0x1a0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8000b8c:	4b54      	ldr	r3, [pc, #336]	; (8000ce0 <main+0x1a0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b92:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <main+0x1a0>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000b98:	4b51      	ldr	r3, [pc, #324]	; (8000ce0 <main+0x1a0>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 8000b9e:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <main+0x1a0>)
 8000ba0:	220e      	movs	r2, #14
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan,&canfil) != HAL_OK){
 8000ba4:	494e      	ldr	r1, [pc, #312]	; (8000ce0 <main+0x1a0>)
 8000ba6:	484f      	ldr	r0, [pc, #316]	; (8000ce4 <main+0x1a4>)
 8000ba8:	f000 fff1 	bl	8001b8e <HAL_CAN_ConfigFilter>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <main+0x76>
	Error_Handler();
 8000bb2:	f000 fc7d 	bl	80014b0 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan) != HAL_OK){
 8000bb6:	484b      	ldr	r0, [pc, #300]	; (8000ce4 <main+0x1a4>)
 8000bb8:	f001 f8b3 	bl	8001d22 <HAL_CAN_Start>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <main+0x86>
	Error_Handler();
 8000bc2:	f000 fc75 	bl	80014b0 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000bc6:	2102      	movs	r1, #2
 8000bc8:	4846      	ldr	r0, [pc, #280]	; (8000ce4 <main+0x1a4>)
 8000bca:	f001 fb38 	bl	800223e <HAL_CAN_ActivateNotification>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <main+0x98>
	Error_Handler();
 8000bd4:	f000 fc6c 	bl	80014b0 <Error_Handler>
  }


  HAL_Delay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f000 feb9 	bl	8001950 <HAL_Delay>

  saveData();
 8000bde:	f000 fa43 	bl	8001068 <saveData>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of canTelemetryMutex */
  osMutexDef(canTelemetryMutex);
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  canTelemetryMutexHandle = osMutexCreate(osMutex(canTelemetryMutex));
 8000bee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f007 fe52 	bl	800889c <osMutexCreate>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a3b      	ldr	r2, [pc, #236]	; (8000ce8 <main+0x1a8>)
 8000bfc:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of TelemetryQueue */
  osMessageQDef(TelemetryQueue, 16, uint16_t);
 8000bfe:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <main+0x1ac>)
 8000c00:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  TelemetryQueueHandle = osMessageCreate(osMessageQ(TelemetryQueue), NULL);
 8000c0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f007 ff24 	bl	8008a5e <osMessageCreate>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a35      	ldr	r2, [pc, #212]	; (8000cf0 <main+0x1b0>)
 8000c1a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <main+0x1b4>)
 8000c1e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c22:	461d      	mov	r5, r3
 8000c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f007 fdd0 	bl	80087dc <osThreadCreate>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4a2e      	ldr	r2, [pc, #184]	; (8000cf8 <main+0x1b8>)
 8000c40:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDCardSaveTask */
  osThreadDef(SDCardSaveTask, StartSDCardSaveTask, osPriorityHigh, 0, 128);
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <main+0x1bc>)
 8000c44:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000c48:	461d      	mov	r5, r3
 8000c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDCardSaveTaskHandle = osThreadCreate(osThread(SDCardSaveTask), NULL);
 8000c56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f007 fdbd 	bl	80087dc <osThreadCreate>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a26      	ldr	r2, [pc, #152]	; (8000d00 <main+0x1c0>)
 8000c66:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData1 */
  osThreadDef(GetData1, StartGetData1, osPriorityBelowNormal, 0, 128);
 8000c68:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <main+0x1c4>)
 8000c6a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c6e:	461d      	mov	r5, r3
 8000c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GetData1Handle = osThreadCreate(osThread(GetData1), NULL);
 8000c7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f007 fdaa 	bl	80087dc <osThreadCreate>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <main+0x1c8>)
 8000c8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData2 */
  osThreadDef(GetData2, StartGetData2, osPriorityBelowNormal, 0, 128);
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <main+0x1cc>)
 8000c90:	f107 0420 	add.w	r4, r7, #32
 8000c94:	461d      	mov	r5, r3
 8000c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GetData2Handle = osThreadCreate(osThread(GetData2), NULL);
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f007 fd97 	bl	80087dc <osThreadCreate>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <main+0x1d0>)
 8000cb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadCAN */
  osThreadDef(ReadCAN, StartReadCAN, osPriorityNormal, 0, 128);
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <main+0x1d4>)
 8000cb6:	1d3c      	adds	r4, r7, #4
 8000cb8:	461d      	mov	r5, r3
 8000cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadCANHandle = osThreadCreate(osThread(ReadCAN), NULL);
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f007 fd86 	bl	80087dc <osThreadCreate>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a11      	ldr	r2, [pc, #68]	; (8000d18 <main+0x1d8>)
 8000cd4:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cd6:	f007 fd7a 	bl	80087ce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <main+0x19a>
 8000cdc:	0800bf90 	.word	0x0800bf90
 8000ce0:	20000414 	.word	0x20000414
 8000ce4:	20000260 	.word	0x20000260
 8000ce8:	20000388 	.word	0x20000388
 8000cec:	0800bfbc 	.word	0x0800bfbc
 8000cf0:	20000384 	.word	0x20000384
 8000cf4:	0800bfcc 	.word	0x0800bfcc
 8000cf8:	20000370 	.word	0x20000370
 8000cfc:	0800bfe8 	.word	0x0800bfe8
 8000d00:	20000374 	.word	0x20000374
 8000d04:	0800c004 	.word	0x0800c004
 8000d08:	20000378 	.word	0x20000378
 8000d0c:	0800c020 	.word	0x0800c020
 8000d10:	2000037c 	.word	0x2000037c
 8000d14:	0800c03c 	.word	0x0800c03c
 8000d18:	20000380 	.word	0x20000380

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0a6      	sub	sp, #152	; 0x98
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d26:	2228      	movs	r2, #40	; 0x28
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00a fc00 	bl	800b530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2258      	movs	r2, #88	; 0x58
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f00a fbf2 	bl	800b530 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d54:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fd24 	bl	80027c8 <HAL_RCC_OscConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d86:	f000 fb93 	bl	80014b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000da0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000da4:	2101      	movs	r1, #1
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fd62 	bl	8003870 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000db2:	f000 fb7d 	bl	80014b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 ffbd 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dcc:	f000 fb70 	bl	80014b0 <Error_Handler>
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	3798      	adds	r7, #152	; 0x98
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <MX_CAN_Init+0x68>)
 8000dde:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <MX_CAN_Init+0x6c>)
 8000de0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_CAN_Init+0x68>)
 8000de4:	2208      	movs	r2, #8
 8000de6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_CAN_Init+0x68>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_CAN_Init+0x68>)
 8000df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000df4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_CAN_Init+0x68>)
 8000df8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dfc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_CAN_Init+0x68>)
 8000e00:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e04:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_CAN_Init+0x68>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_CAN_Init+0x68>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_CAN_Init+0x68>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_CAN_Init+0x68>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_CAN_Init+0x68>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_CAN_Init+0x68>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_CAN_Init+0x68>)
 8000e2c:	f000 fdb4 	bl	8001998 <HAL_CAN_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000e36:	f000 fb3b 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000260 	.word	0x20000260
 8000e44:	40006400 	.word	0x40006400

08000e48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_SPI1_Init+0x78>)
 8000e50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e7e:	2210      	movs	r2, #16
 8000e80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e96:	2207      	movs	r2, #7
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000ea2:	2208      	movs	r2, #8
 8000ea4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_SPI1_Init+0x74>)
 8000ea8:	f003 f968 	bl	800417c <HAL_SPI_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eb2:	f000 fafd 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000288 	.word	0x20000288
 8000ec0:	40013000 	.word	0x40013000

08000ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <MX_USART2_UART_Init+0x5c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f08:	f003 fcb8 	bl	800487c <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 facd 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002ec 	.word	0x200002ec
 8000f20:	40004400 	.word	0x40004400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_GPIO_Init+0x90>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f001 fbeb 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f8e:	2320      	movs	r3, #32
 8000f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f001 fa52 	bl	8002450 <HAL_GPIO_Init>

}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <myprintf>:
/* USER CODE BEGIN 4 */

int dataShift = 10;
int dataPacket = 1;

void myprintf(const char *fmt, ...) {
 8000fb8:	b40f      	push	{r0, r1, r2, r3}
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
  va_list args;
  va_start(args, fmt);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	2164      	movs	r1, #100	; 0x64
 8000fcc:	480b      	ldr	r0, [pc, #44]	; (8000ffc <myprintf+0x44>)
 8000fce:	f00a fc59 	bl	800b884 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <myprintf+0x44>)
 8000fd4:	f7ff f904 	bl	80001e0 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	4905      	ldr	r1, [pc, #20]	; (8000ffc <myprintf+0x44>)
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <myprintf+0x48>)
 8000fe8:	f003 fc96 	bl	8004918 <HAL_UART_Transmit>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff6:	b004      	add	sp, #16
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000038c 	.word	0x2000038c
 8001000:	200002ec 	.word	0x200002ec

08001004 <printCANMessage>:


void printCANMessage(CAN_RxHeaderTypeDef Header, uint8_t data[]){
 8001004:	b084      	sub	sp, #16
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	f107 0c20 	add.w	ip, r7, #32
 8001010:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char dataStr[20];
	myprintf("canMsg = 0x%lx %li", Header.StdId, Header.DLC);
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001018:	4619      	mov	r1, r3
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <printCANMessage+0x58>)
 800101c:	f7ff ffcc 	bl	8000fb8 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e00c      	b.n	8001040 <printCANMessage+0x3c>
		myprintf(dataStr, " %x", data[i]);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	463b      	mov	r3, r7
 8001032:	490b      	ldr	r1, [pc, #44]	; (8001060 <printCANMessage+0x5c>)
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ffbf 	bl	8000fb8 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8ee      	bhi.n	8001026 <printCANMessage+0x22>
	}
	myprintf("\r\n");
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <printCANMessage+0x60>)
 800104a:	f7ff ffb5 	bl	8000fb8 <myprintf>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001058:	b004      	add	sp, #16
 800105a:	4770      	bx	lr
 800105c:	0800c058 	.word	0x0800c058
 8001060:	0800c06c 	.word	0x0800c06c
 8001064:	0800c070 	.word	0x0800c070

08001068 <saveData>:

void saveData(void){
 8001068:	b580      	push	{r7, lr}
 800106a:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 800106e:	af00      	add	r7, sp, #0
	FATFS FatFs;
	//File object
	FIL file;

	FRESULT fres;
	const TCHAR *file_path = "0:/csv/test.csv";
 8001070:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <saveData+0x160>)
 8001072:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
	const char *new_header = "Test";
 8001076:	4b55      	ldr	r3, [pc, #340]	; (80011cc <saveData+0x164>)
 8001078:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468

	// Mount drive
	myprintf("Mounting SD card\r\n");
 800107c:	4854      	ldr	r0, [pc, #336]	; (80011d0 <saveData+0x168>)
 800107e:	f7ff ff9b 	bl	8000fb8 <myprintf>
	fres = f_mount(&FatFs, "", 1);
 8001082:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001086:	2201      	movs	r2, #1
 8001088:	4952      	ldr	r1, [pc, #328]	; (80011d4 <saveData+0x16c>)
 800108a:	4618      	mov	r0, r3
 800108c:	f005 ffa6 	bl	8006fdc <f_mount>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	if (fres != FR_OK){
 8001096:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 800109a:	2b00      	cmp	r3, #0
 800109c:	d006      	beq.n	80010ac <saveData+0x44>
		myprintf("f_mount pb: %d\r\n", fres);
 800109e:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80010a2:	4619      	mov	r1, r3
 80010a4:	484c      	ldr	r0, [pc, #304]	; (80011d8 <saveData+0x170>)
 80010a6:	f7ff ff87 	bl	8000fb8 <myprintf>
 80010aa:	e089      	b.n	80011c0 <saveData+0x158>
		return;
	}

	fres = f_open(&file, file_path, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80010ac:	463b      	mov	r3, r7
 80010ae:	2203      	movs	r2, #3
 80010b0:	f8d7 146c 	ldr.w	r1, [r7, #1132]	; 0x46c
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 fff9 	bl	80070ac <f_open>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	if (fres != FR_OK){
 80010c0:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <saveData+0x6c>
		myprintf("f_open pb: %d\r\n", fres);
 80010c8:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80010cc:	4619      	mov	r1, r3
 80010ce:	4843      	ldr	r0, [pc, #268]	; (80011dc <saveData+0x174>)
 80010d0:	f7ff ff72 	bl	8000fb8 <myprintf>
	}
	myprintf("Creating buffer\r\n");
 80010d4:	4842      	ldr	r0, [pc, #264]	; (80011e0 <saveData+0x178>)
 80010d6:	f7ff ff6f 	bl	8000fb8 <myprintf>
	CSV_BUFFER *buffer = csv_create_buffer();
 80010da:	f7ff fb12 	bl	8000702 <csv_create_buffer>
 80010de:	f8c7 0460 	str.w	r0, [r7, #1120]	; 0x460

	myprintf("Loading csv\r\n");
 80010e2:	4840      	ldr	r0, [pc, #256]	; (80011e4 <saveData+0x17c>)
 80010e4:	f7ff ff68 	bl	8000fb8 <myprintf>
	csv_load(buffer, &file);
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	f8d7 0460 	ldr.w	r0, [r7, #1120]	; 0x460
 80010f0:	f7ff fb7a 	bl	80007e8 <csv_load>

	// Print buffer
	uint32_t i, j;
	for (i = 0; i < buffer->rows; i++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80010fa:	e031      	b.n	8001160 <saveData+0xf8>
		for (j = 0; j < buffer->width[i]; j++){
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8001102:	e019      	b.n	8001138 <saveData+0xd0>
			//myprintf("%-10s\t", buffer->field[i][j]->text);
			myprintf("buff[%d][%d] = %s\t\t", i, j, buffer->field[i][j]->text);
 8001104:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8001124:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8001128:	482f      	ldr	r0, [pc, #188]	; (80011e8 <saveData+0x180>)
 800112a:	f7ff ff45 	bl	8000fb8 <myprintf>
		for (j = 0; j < buffer->width[i]; j++){
 800112e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8001132:	3301      	adds	r3, #1
 8001134:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8001138:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 800114c:	429a      	cmp	r2, r3
 800114e:	d3d9      	bcc.n	8001104 <saveData+0x9c>
			}
	myprintf("\r\n");
 8001150:	4826      	ldr	r0, [pc, #152]	; (80011ec <saveData+0x184>)
 8001152:	f7ff ff31 	bl	8000fb8 <myprintf>
	for (i = 0; i < buffer->rows; i++){
 8001156:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800115a:	3301      	adds	r3, #1
 800115c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8001160:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800116a:	429a      	cmp	r2, r3
 800116c:	d3c6      	bcc.n	80010fc <saveData+0x94>
	}

	// Let try overwriting one of the header fields
	myprintf("Saving csv\r\n");
 800116e:	4820      	ldr	r0, [pc, #128]	; (80011f0 <saveData+0x188>)
 8001170:	f7ff ff22 	bl	8000fb8 <myprintf>
	csv_set_field(buffer, 0, 1, (char *) new_header);
 8001174:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8001178:	2201      	movs	r2, #1
 800117a:	2100      	movs	r1, #0
 800117c:	f8d7 0460 	ldr.w	r0, [r7, #1120]	; 0x460
 8001180:	f7ff fc8d 	bl	8000a9e <csv_set_field>
	csv_save(&file, buffer);
 8001184:	463b      	mov	r3, r7
 8001186:	f8d7 1460 	ldr.w	r1, [r7, #1120]	; 0x460
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fb9a 	bl	80008c4 <csv_save>

	myprintf("Destroying buffer\r\n");
 8001190:	4818      	ldr	r0, [pc, #96]	; (80011f4 <saveData+0x18c>)
 8001192:	f7ff ff11 	bl	8000fb8 <myprintf>
	csv_destroy_buffer(buffer);
 8001196:	f8d7 0460 	ldr.w	r0, [r7, #1120]	; 0x460
 800119a:	f7ff fad1 	bl	8000740 <csv_destroy_buffer>

	// Close file
	fres = f_close(&file);
 800119e:	463b      	mov	r3, r7
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 fe7d 	bl	8007ea0 <f_close>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	if (fres != FR_OK){
 80011ac:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <saveData+0x158>
		myprintf("f_close pb: %d\r\n", fres);
 80011b4:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 80011b8:	4619      	mov	r1, r3
 80011ba:	480f      	ldr	r0, [pc, #60]	; (80011f8 <saveData+0x190>)
 80011bc:	f7ff fefc 	bl	8000fb8 <myprintf>
		}
}
 80011c0:	f507 678f 	add.w	r7, r7, #1144	; 0x478
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	0800c074 	.word	0x0800c074
 80011cc:	0800c084 	.word	0x0800c084
 80011d0:	0800c08c 	.word	0x0800c08c
 80011d4:	0800c0a0 	.word	0x0800c0a0
 80011d8:	0800c0a4 	.word	0x0800c0a4
 80011dc:	0800c0b8 	.word	0x0800c0b8
 80011e0:	0800c0c8 	.word	0x0800c0c8
 80011e4:	0800c0dc 	.word	0x0800c0dc
 80011e8:	0800c0ec 	.word	0x0800c0ec
 80011ec:	0800c070 	.word	0x0800c070
 80011f0:	0800c100 	.word	0x0800c100
 80011f4:	0800c110 	.word	0x0800c110
 80011f8:	0800c124 	.word	0x0800c124

080011fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	CAN_TxHeaderTypeDef   TxHeader;

	// CAN default data
	TxHeader.StdId = 0x222;
 8001204:	f240 2322 	movw	r3, #546	; 0x222
 8001208:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.IDE = CAN_ID_STD;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 4;
 8001216:	2304      	movs	r3, #4
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t freeMailboxs;
	uint8_t data[10] = "bcad";
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <StartDefaultTask+0x64>)
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800122a:	6018      	str	r0, [r3, #0]
 800122c:	3304      	adds	r3, #4
 800122e:	7019      	strb	r1, [r3, #0]
 8001230:	f107 0311 	add.w	r3, r7, #17
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for(;;)
	{
		myprintf(" -- STARTING thread DefaultTask -- \r\n");
 800123a:	480a      	ldr	r0, [pc, #40]	; (8001264 <StartDefaultTask+0x68>)
 800123c:	f7ff febc 	bl	8000fb8 <myprintf>
		DefaultProfiler++;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <StartDefaultTask+0x6c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <StartDefaultTask+0x6c>)
 8001248:	6013      	str	r3, [r2, #0]
//		freeMailboxs = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
//		myprintf("packet sent: %s\r\n", data);
//		myprintf("num free mailboxs: %i\r\n", freeMailboxs);
//		myprintf("text mailbox used: %ld\r\n", TxMailbox);

		myprintf(" -- ENDING thread DefaultTask -- \r\n");
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <StartDefaultTask+0x70>)
 800124c:	f7ff feb4 	bl	8000fb8 <myprintf>
		osDelay(DefaultTask_delay);	// Task is put to sleep for 500ms
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <StartDefaultTask+0x74>)
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	4618      	mov	r0, r3
 8001258:	f007 fb0c 	bl	8008874 <osDelay>
		myprintf(" -- STARTING thread DefaultTask -- \r\n");
 800125c:	e7ed      	b.n	800123a <StartDefaultTask+0x3e>
 800125e:	bf00      	nop
 8001260:	0800c184 	.word	0x0800c184
 8001264:	0800c138 	.word	0x0800c138
 8001268:	2000043c 	.word	0x2000043c
 800126c:	0800c160 	.word	0x0800c160
 8001270:	20000000 	.word	0x20000000

08001274 <StartSDCardSaveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDCardSaveTask */
void StartSDCardSaveTask(void const * argument)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 800127c:	480e      	ldr	r0, [pc, #56]	; (80012b8 <StartSDCardSaveTask+0x44>)
 800127e:	f7ff fe9b 	bl	8000fb8 <myprintf>
	// restart CAN telemetry threads
	myprintf(" -- RESUMING thread GetData1 -- \r\n");
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <StartSDCardSaveTask+0x48>)
 8001284:	f7ff fe98 	bl	8000fb8 <myprintf>
	osThreadResume(GetData1Handle);
 8001288:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <StartSDCardSaveTask+0x4c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f007 fc1b 	bl	8008ac8 <osThreadResume>
	myprintf(" -- RESUMING thread GetData2 -- \r\n");
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <StartSDCardSaveTask+0x50>)
 8001294:	f7ff fe90 	bl	8000fb8 <myprintf>
	osThreadResume(GetData2Handle);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <StartSDCardSaveTask+0x54>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f007 fc13 	bl	8008ac8 <osThreadResume>

	myprintf(" -- ENDING thread SDCardSave -- \r\n");
 80012a2:	480a      	ldr	r0, [pc, #40]	; (80012cc <StartSDCardSaveTask+0x58>)
 80012a4:	f7ff fe88 	bl	8000fb8 <myprintf>
	osDelay(SDCardSave_delay);
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <StartSDCardSaveTask+0x5c>)
 80012aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 fae0 	bl	8008874 <osDelay>
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 80012b4:	e7e2      	b.n	800127c <StartSDCardSaveTask+0x8>
 80012b6:	bf00      	nop
 80012b8:	0800c190 	.word	0x0800c190
 80012bc:	0800c1b8 	.word	0x0800c1b8
 80012c0:	20000378 	.word	0x20000378
 80012c4:	0800c1dc 	.word	0x0800c1dc
 80012c8:	2000037c 	.word	0x2000037c
 80012cc:	0800c200 	.word	0x0800c200
 80012d0:	20000002 	.word	0x20000002

080012d4 <StartGetData1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData1 */
void StartGetData1(void const * argument)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData1 */
	CAN_TxHeaderTypeDef   TxHeader1;

	// can transmission 1
	TxHeader1.StdId = 0x201;
 80012dc:	f240 2301 	movw	r3, #513	; 0x201
 80012e0:	617b      	str	r3, [r7, #20]
	TxHeader1.ExtId = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
	TxHeader1.RTR = CAN_RTR_DATA;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
	TxHeader1.IDE = CAN_ID_STD;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
	TxHeader1.DLC = 4;
 80012ee:	2304      	movs	r3, #4
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader1.TransmitGlobalTime = DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint8_t TransmissionData1[8] = "dat1";
 80012f8:	4a34      	ldr	r2, [pc, #208]	; (80013cc <StartGetData1+0xf8>)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001302:	6018      	str	r0, [r3, #0]
 8001304:	3304      	adds	r3, #4
 8001306:	7019      	strb	r1, [r3, #0]
 8001308:	f107 0311 	add.w	r3, r7, #17
 800130c:	2200      	movs	r2, #0
 800130e:	801a      	strh	r2, [r3, #0]
 8001310:	709a      	strb	r2, [r3, #2]
	uint8_t node1req[4] = {0x77, 0x6f, 0x6f, 0x66};
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <StartGetData1+0xfc>)
 8001314:	60bb      	str	r3, [r7, #8]
	uint32_t current_time;
	/* Infinite loop */
  for(;;)
  {
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 8001316:	482f      	ldr	r0, [pc, #188]	; (80013d4 <StartGetData1+0x100>)
 8001318:	f7ff fe4e 	bl	8000fb8 <myprintf>
	  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800131c:	482e      	ldr	r0, [pc, #184]	; (80013d8 <StartGetData1+0x104>)
 800131e:	f000 fe1f 	bl	8001f60 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <StartGetData1+0x76>
		  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader1, TransmissionData1, &TxMailbox) == HAL_OK){
 8001328:	f107 020c 	add.w	r2, r7, #12
 800132c:	f107 0114 	add.w	r1, r7, #20
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <StartGetData1+0x108>)
 8001332:	4829      	ldr	r0, [pc, #164]	; (80013d8 <StartGetData1+0x104>)
 8001334:	f000 fd39 	bl	8001daa <HAL_CAN_AddTxMessage>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <StartGetData1+0x72>
			  myprintf("CAN message sent to data1\r\n");}
 800133e:	4828      	ldr	r0, [pc, #160]	; (80013e0 <StartGetData1+0x10c>)
 8001340:	f7ff fe3a 	bl	8000fb8 <myprintf>
 8001344:	e001      	b.n	800134a <StartGetData1+0x76>
		  else{
			  Error_Handler();
 8001346:	f000 f8b3 	bl	80014b0 <Error_Handler>
		  }
	  }
	  osDelay(10);	// response delay
 800134a:	200a      	movs	r0, #10
 800134c:	f007 fa92 	bl	8008874 <osDelay>
	  // continue retransmission until data1 is collected
	  // change this to wait for a flag change from ReadCAN
	  if (RxHeader.StdId == 0x206 &&
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <StartGetData1+0x110>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f240 2206 	movw	r2, #518	; 0x206
 8001358:	4293      	cmp	r3, r2
 800135a:	d122      	bne.n	80013a2 <StartGetData1+0xce>
		  RxData[0] == node1req[0] &&
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <StartGetData1+0x114>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	7a3b      	ldrb	r3, [r7, #8]
	  if (RxHeader.StdId == 0x206 &&
 8001362:	429a      	cmp	r2, r3
 8001364:	d11d      	bne.n	80013a2 <StartGetData1+0xce>
		  RxData[1] == node1req[1] &&
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <StartGetData1+0x114>)
 8001368:	785a      	ldrb	r2, [r3, #1]
 800136a:	7a7b      	ldrb	r3, [r7, #9]
		  RxData[0] == node1req[0] &&
 800136c:	429a      	cmp	r2, r3
 800136e:	d118      	bne.n	80013a2 <StartGetData1+0xce>
	      RxData[2] == node1req[2] &&
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <StartGetData1+0x114>)
 8001372:	789a      	ldrb	r2, [r3, #2]
 8001374:	7abb      	ldrb	r3, [r7, #10]
		  RxData[1] == node1req[1] &&
 8001376:	429a      	cmp	r2, r3
 8001378:	d113      	bne.n	80013a2 <StartGetData1+0xce>
		  RxData[3] == node1req[3]){
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <StartGetData1+0x114>)
 800137c:	78da      	ldrb	r2, [r3, #3]
 800137e:	7afb      	ldrb	r3, [r7, #11]
	      RxData[2] == node1req[2] &&
 8001380:	429a      	cmp	r2, r3
 8001382:	d10e      	bne.n	80013a2 <StartGetData1+0xce>
		  // process data1...
		  myprintf("CAN response from node1\r\n");
 8001384:	4819      	ldr	r0, [pc, #100]	; (80013ec <StartGetData1+0x118>)
 8001386:	f7ff fe17 	bl	8000fb8 <myprintf>
		  myprintf("processing...\r\n");
 800138a:	4819      	ldr	r0, [pc, #100]	; (80013f0 <StartGetData1+0x11c>)
 800138c:	f7ff fe14 	bl	8000fb8 <myprintf>
		  myprintf(" -- SUSPENDING thread GetData1 -- \r\n");
 8001390:	4818      	ldr	r0, [pc, #96]	; (80013f4 <StartGetData1+0x120>)
 8001392:	f7ff fe11 	bl	8000fb8 <myprintf>
		  osThreadSuspend(GetData1Handle);
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <StartGetData1+0x124>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f007 fb87 	bl	8008aae <osThreadSuspend>
 80013a0:	e012      	b.n	80013c8 <StartGetData1+0xf4>
	  }
	  else{
		  myprintf("no CAN response, delaying thread GetData1\r\n");
 80013a2:	4816      	ldr	r0, [pc, #88]	; (80013fc <StartGetData1+0x128>)
 80013a4:	f7ff fe08 	bl	8000fb8 <myprintf>
		  current_time = HAL_GetTick();
 80013a8:	f000 fac6 	bl	8001938 <HAL_GetTick>
 80013ac:	62f8      	str	r0, [r7, #44]	; 0x2c
		  myprintf("current time: %lu\r\n", current_time);
 80013ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013b0:	4813      	ldr	r0, [pc, #76]	; (8001400 <StartGetData1+0x12c>)
 80013b2:	f7ff fe01 	bl	8000fb8 <myprintf>
		  myprintf(" -- ENDING thread GetData1 -- \r\n");
 80013b6:	4813      	ldr	r0, [pc, #76]	; (8001404 <StartGetData1+0x130>)
 80013b8:	f7ff fdfe 	bl	8000fb8 <myprintf>
		  osDelay(retransmit_delay);
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <StartGetData1+0x134>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f007 fa56 	bl	8008874 <osDelay>
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 80013c8:	e7a5      	b.n	8001316 <StartGetData1+0x42>
 80013ca:	bf00      	nop
 80013cc:	0800c31c 	.word	0x0800c31c
 80013d0:	666f6f77 	.word	0x666f6f77
 80013d4:	0800c224 	.word	0x0800c224
 80013d8:	20000260 	.word	0x20000260
 80013dc:	20000410 	.word	0x20000410
 80013e0:	0800c248 	.word	0x0800c248
 80013e4:	200003f0 	.word	0x200003f0
 80013e8:	2000040c 	.word	0x2000040c
 80013ec:	0800c264 	.word	0x0800c264
 80013f0:	0800c280 	.word	0x0800c280
 80013f4:	0800c290 	.word	0x0800c290
 80013f8:	20000378 	.word	0x20000378
 80013fc:	0800c2b8 	.word	0x0800c2b8
 8001400:	0800c2e4 	.word	0x0800c2e4
 8001404:	0800c2f8 	.word	0x0800c2f8
 8001408:	20000006 	.word	0x20000006

0800140c <StartGetData2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData2 */
void StartGetData2(void const * argument)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(retransmit_delay);
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <StartGetData2+0x18>)
 8001416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fa2a 	bl	8008874 <osDelay>
 8001420:	e7f8      	b.n	8001414 <StartGetData2+0x8>
 8001422:	bf00      	nop
 8001424:	20000006 	.word	0x20000006

08001428 <StartReadCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCAN */
void StartReadCAN(void const * argument)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b087      	sub	sp, #28
 800142c:	af04      	add	r7, sp, #16
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCAN */
	/* Infinite loop */
	for(;;)
	{
		//myprintf(" -- STARTING thread ReadCAN -- \r\n");
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8001430:	2100      	movs	r1, #0
 8001432:	4812      	ldr	r0, [pc, #72]	; (800147c <StartReadCAN+0x54>)
 8001434:	f000 fedb 	bl	80021ee <HAL_CAN_GetRxFifoFillLevel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <StartReadCAN+0x44>
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <StartReadCAN+0x58>)
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <StartReadCAN+0x5c>)
 8001442:	2100      	movs	r1, #0
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <StartReadCAN+0x54>)
 8001446:	f000 fdc0 	bl	8001fca <HAL_CAN_GetRxMessage>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	//LED shows a CAN message read
 800144a:	2120      	movs	r1, #32
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f001 f9a0 	bl	8002794 <HAL_GPIO_TogglePin>
			printCANMessage(RxHeader, RxData);
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <StartReadCAN+0x5c>)
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <StartReadCAN+0x58>)
 8001458:	9203      	str	r2, [sp, #12]
 800145a:	466c      	mov	r4, sp
 800145c:	f103 0210 	add.w	r2, r3, #16
 8001460:	ca07      	ldmia	r2, {r0, r1, r2}
 8001462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	f7ff fdcc 	bl	8001004 <printCANMessage>
//				myprintf("data request response from node1 of id 0x206\r\n");
//				data1collected = 1;	// can be changed into thread signal/flag
//			}
		}
		//myprintf(" -- ENDING thread ReadCAN -- \r\n");
		osDelay(read_delay);
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <StartReadCAN+0x60>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	4618      	mov	r0, r3
 8001474:	f007 f9fe 	bl	8008874 <osDelay>
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8001478:	e7da      	b.n	8001430 <StartReadCAN+0x8>
 800147a:	bf00      	nop
 800147c:	20000260 	.word	0x20000260
 8001480:	2000040c 	.word	0x2000040c
 8001484:	200003f0 	.word	0x200003f0
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800149e:	f000 fa37 	bl	8001910 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40012c00 	.word	0x40012c00

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  myprintf("HAL error occurred!\r\n"); // print
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <Error_Handler+0x10>)
 80014ba:	f7ff fd7d 	bl	8000fb8 <myprintf>
 80014be:	e7fb      	b.n	80014b8 <Error_Handler+0x8>
 80014c0:	0800c324 	.word	0x0800c324

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_MspInit+0x4c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_MspInit+0x4c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_MspInit+0x4c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_MspInit+0x4c>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_MspInit+0x4c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_MspInit+0x4c>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	210f      	movs	r1, #15
 80014fe:	f06f 0001 	mvn.w	r0, #1
 8001502:	f000 ff7b 	bl	80023fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a18      	ldr	r2, [pc, #96]	; (8001594 <HAL_CAN_MspInit+0x80>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d129      	bne.n	800158a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_CAN_MspInit+0x84>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_CAN_MspInit+0x84>)
 800153c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_CAN_MspInit+0x84>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_CAN_MspInit+0x84>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_CAN_MspInit+0x84>)
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	6153      	str	r3, [r2, #20]
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_CAN_MspInit+0x84>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001566:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001578:	2309      	movs	r3, #9
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f000 ff63 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40006400 	.word	0x40006400
 8001598:	40021000 	.word	0x40021000

0800159c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a25      	ldr	r2, [pc, #148]	; (8001650 <HAL_SPI_MspInit+0xb4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d144      	bne.n	8001648 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a24      	ldr	r2, [pc, #144]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f8:	6153      	str	r3, [r2, #20]
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_SPI_MspInit+0xb8>)
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001606:	23c0      	movs	r3, #192	; 0xc0
 8001608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001616:	2305      	movs	r3, #5
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001624:	f000 ff14 	bl	8002450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001628:	2308      	movs	r3, #8
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001638:	2305      	movs	r3, #5
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_SPI_MspInit+0xbc>)
 8001644:	f000 ff04 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40013000 	.word	0x40013000
 8001654:	40021000 	.word	0x40021000
 8001658:	48000400 	.word	0x48000400

0800165c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_UART_MspInit+0x7c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d128      	bne.n	80016d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_UART_MspInit+0x80>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_UART_MspInit+0x80>)
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HAL_UART_MspInit+0x80>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_UART_MspInit+0x80>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <HAL_UART_MspInit+0x80>)
 800169c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_UART_MspInit+0x80>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ae:	230c      	movs	r3, #12
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016be:	2307      	movs	r3, #7
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f000 fec0 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40004400 	.word	0x40004400
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_InitTick+0xcc>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a2d      	ldr	r2, [pc, #180]	; (80017ac <HAL_InitTick+0xcc>)
 80016f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_InitTick+0xcc>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001708:	f107 020c 	add.w	r2, r7, #12
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fae2 	bl	8003cdc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001718:	f002 fabe 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 800171c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <HAL_InitTick+0xd0>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	3b01      	subs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <HAL_InitTick+0xd4>)
 800172e:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <HAL_InitTick+0xd8>)
 8001730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_InitTick+0xd4>)
 8001734:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <HAL_InitTick+0xd4>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <HAL_InitTick+0xd4>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_InitTick+0xd4>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <HAL_InitTick+0xd4>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001752:	4818      	ldr	r0, [pc, #96]	; (80017b4 <HAL_InitTick+0xd4>)
 8001754:	f002 fdbd 	bl	80042d2 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800175e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001762:	2b00      	cmp	r3, #0
 8001764:	d11b      	bne.n	800179e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001766:	4813      	ldr	r0, [pc, #76]	; (80017b4 <HAL_InitTick+0xd4>)
 8001768:	f002 fe14 	bl	8004394 <HAL_TIM_Base_Start_IT>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001776:	2b00      	cmp	r3, #0
 8001778:	d111      	bne.n	800179e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800177a:	2019      	movs	r0, #25
 800177c:	f000 fe5a 	bl	8002434 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d808      	bhi.n	8001798 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001786:	2200      	movs	r2, #0
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	2019      	movs	r0, #25
 800178c:	f000 fe36 	bl	80023fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_InitTick+0xdc>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e002      	b.n	800179e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800179e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3730      	adds	r7, #48	; 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	431bde83 	.word	0x431bde83
 80017b4:	20000440 	.word	0x20000440
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	2000000c 	.word	0x2000000c

080017c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <NMI_Handler+0x4>

080017c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80017f2:	f002 fe3f 	bl	8004474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000440 	.word	0x20000440

08001800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <_sbrk+0x5c>)
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <_sbrk+0x60>)
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <_sbrk+0x64>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <_sbrk+0x68>)
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	429a      	cmp	r2, r3
 800182e:	d207      	bcs.n	8001840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001830:	f009 fe34 	bl	800b49c <__errno>
 8001834:	4603      	mov	r3, r0
 8001836:	220c      	movs	r2, #12
 8001838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	e009      	b.n	8001854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <_sbrk+0x64>)
 8001850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001852:	68fb      	ldr	r3, [r7, #12]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20010000 	.word	0x20010000
 8001860:	00000400 	.word	0x00000400
 8001864:	2000048c 	.word	0x2000048c
 8001868:	20001568 	.word	0x20001568

0800186c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <SystemInit+0x20>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <SystemInit+0x20>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <LoopForever+0x6>)
  ldr r1, =_edata
 8001896:	490e      	ldr	r1, [pc, #56]	; (80018d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <LoopForever+0xe>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800189c:	e002      	b.n	80018a4 <LoopCopyDataInit>

0800189e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a2:	3304      	adds	r3, #4

080018a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a8:	d3f9      	bcc.n	800189e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018ac:	4c0b      	ldr	r4, [pc, #44]	; (80018dc <LoopForever+0x16>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b0:	e001      	b.n	80018b6 <LoopFillZerobss>

080018b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b4:	3204      	adds	r2, #4

080018b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b8:	d3fb      	bcc.n	80018b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ba:	f7ff ffd7 	bl	800186c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018be:	f009 fdf3 	bl	800b4a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018c2:	f7ff f93d 	bl	8000b40 <main>

080018c6 <LoopForever>:

LoopForever:
    b LoopForever
 80018c6:	e7fe      	b.n	80018c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80018d4:	0800c4dc 	.word	0x0800c4dc
  ldr r2, =_sbss
 80018d8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80018dc:	20001564 	.word	0x20001564

080018e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC1_2_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_Init+0x28>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a07      	ldr	r2, [pc, #28]	; (800190c <HAL_Init+0x28>)
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f4:	2003      	movs	r0, #3
 80018f6:	f000 fd76 	bl	80023e6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fa:	200f      	movs	r0, #15
 80018fc:	f7ff fef0 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001900:	f7ff fde0 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000

08001910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000010 	.word	0x20000010
 8001934:	20000490 	.word	0x20000490

08001938 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;  
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000490 	.word	0x20000490

08001950 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000010 	.word	0x20000010

08001998 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0ed      	b.n	8001b86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fdac 	bl	8001514 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019cc:	f7ff ffb4 	bl	8001938 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019d2:	e012      	b.n	80019fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d4:	f7ff ffb0 	bl	8001938 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	d90b      	bls.n	80019fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2205      	movs	r2, #5
 80019f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0c5      	b.n	8001b86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0e5      	beq.n	80019d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0202 	bic.w	r2, r2, #2
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a18:	f7ff ff8e 	bl	8001938 <HAL_GetTick>
 8001a1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a1e:	e012      	b.n	8001a46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a20:	f7ff ff8a 	bl	8001938 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d90b      	bls.n	8001a46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e09f      	b.n	8001b86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1e5      	bne.n	8001a20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7e1b      	ldrb	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e007      	b.n	8001a7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7e5b      	ldrb	r3, [r3, #25]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	e007      	b.n	8001aa8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e9b      	ldrb	r3, [r3, #26]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0220 	orr.w	r2, r2, #32
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e007      	b.n	8001ad2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0220 	bic.w	r2, r2, #32
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7edb      	ldrb	r3, [r3, #27]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0210 	bic.w	r2, r2, #16
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e007      	b.n	8001afc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0210 	orr.w	r2, r2, #16
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7f1b      	ldrb	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0208 	orr.w	r2, r2, #8
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	e007      	b.n	8001b26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0208 	bic.w	r2, r2, #8
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7f5b      	ldrb	r3, [r3, #29]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0204 	orr.w	r2, r2, #4
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0204 	bic.w	r2, r2, #4
 8001b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	ea42 0103 	orr.w	r1, r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b087      	sub	sp, #28
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ba6:	7cfb      	ldrb	r3, [r7, #19]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d003      	beq.n	8001bb4 <HAL_CAN_ConfigFilter+0x26>
 8001bac:	7cfb      	ldrb	r3, [r7, #19]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	f040 80aa 	bne.w	8001d08 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	2201      	movs	r2, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d123      	bne.n	8001c36 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c10:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3248      	adds	r2, #72	; 0x48
 8001c16:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c2c:	6979      	ldr	r1, [r7, #20]
 8001c2e:	3348      	adds	r3, #72	; 0x48
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d122      	bne.n	8001c84 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c5e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3248      	adds	r2, #72	; 0x48
 8001c64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c78:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c7a:	6979      	ldr	r1, [r7, #20]
 8001c7c:	3348      	adds	r3, #72	; 0x48
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	440b      	add	r3, r1
 8001c82:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d109      	bne.n	8001ca0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	401a      	ands	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001c9e:	e007      	b.n	8001cb0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001cca:	e007      	b.n	8001cdc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cfa:	f023 0201 	bic.w	r2, r3, #1
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e006      	b.n	8001d16 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
  }
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d12e      	bne.n	8001d94 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d4e:	f7ff fdf3 	bl	8001938 <HAL_GetTick>
 8001d52:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d54:	e012      	b.n	8001d7c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d56:	f7ff fdef 	bl	8001938 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b0a      	cmp	r3, #10
 8001d62:	d90b      	bls.n	8001d7c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2205      	movs	r2, #5
 8001d74:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e012      	b.n	8001da2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e5      	bne.n	8001d56 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e006      	b.n	8001da2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
  }
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b089      	sub	sp, #36	; 0x24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dc8:	7ffb      	ldrb	r3, [r7, #31]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d003      	beq.n	8001dd6 <HAL_CAN_AddTxMessage+0x2c>
 8001dce:	7ffb      	ldrb	r3, [r7, #31]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	f040 80b8 	bne.w	8001f46 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10a      	bne.n	8001df6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a0 	beq.w	8001f36 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	0e1b      	lsrs	r3, r3, #24
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d907      	bls.n	8001e16 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e09e      	b.n	8001f54 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e16:	2201      	movs	r2, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e32:	68f9      	ldr	r1, [r7, #12]
 8001e34:	6809      	ldr	r1, [r1, #0]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	440b      	add	r3, r1
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e00f      	b.n	8001e64 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3318      	adds	r3, #24
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	440b      	add	r3, r1
 8001e62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	3318      	adds	r3, #24
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	440b      	add	r3, r1
 8001e74:	3304      	adds	r3, #4
 8001e76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	7d1b      	ldrb	r3, [r3, #20]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d111      	bne.n	8001ea4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3318      	adds	r3, #24
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	6811      	ldr	r1, [r2, #0]
 8001e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3318      	adds	r3, #24
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3307      	adds	r3, #7
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	061a      	lsls	r2, r3, #24
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3306      	adds	r3, #6
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3305      	adds	r3, #5
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	3204      	adds	r2, #4
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	6811      	ldr	r1, [r2, #0]
 8001ecc:	ea43 0200 	orr.w	r2, r3, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001eda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3303      	adds	r3, #3
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	061a      	lsls	r2, r3, #24
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	4610      	mov	r0, r2
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	6811      	ldr	r1, [r2, #0]
 8001f02:	ea43 0200 	orr.w	r2, r3, r0
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	6811      	ldr	r1, [r2, #0]
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3318      	adds	r3, #24
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	440b      	add	r3, r1
 8001f30:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e00e      	b.n	8001f54 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e006      	b.n	8001f54 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
  }
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f72:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f74:	7afb      	ldrb	r3, [r7, #11]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d002      	beq.n	8001f80 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d11d      	bne.n	8001fbc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b087      	sub	sp, #28
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fde:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d003      	beq.n	8001fee <HAL_CAN_GetRxMessage+0x24>
 8001fe6:	7dfb      	ldrb	r3, [r7, #23]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	f040 80f3 	bne.w	80021d4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10e      	bne.n	8002012 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d116      	bne.n	8002030 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0e7      	b.n	80021e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0d8      	b.n	80021e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	331b      	adds	r3, #27
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4413      	add	r3, r2
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0204 	and.w	r2, r3, #4
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	331b      	adds	r3, #27
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	4413      	add	r3, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0d5b      	lsrs	r3, r3, #21
 800205e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	e00b      	b.n	8002080 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	331b      	adds	r3, #27
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4413      	add	r3, r2
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	08db      	lsrs	r3, r3, #3
 8002078:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	331b      	adds	r3, #27
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0202 	and.w	r2, r3, #2
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	331b      	adds	r3, #27
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	4413      	add	r3, r2
 80020a2:	3304      	adds	r3, #4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 020f 	and.w	r2, r3, #15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	331b      	adds	r3, #27
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	331b      	adds	r3, #27
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0c1b      	lsrs	r3, r3, #16
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0a1a      	lsrs	r2, r3, #8
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	4413      	add	r3, r2
 8002118:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0c1a      	lsrs	r2, r3, #16
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	3302      	adds	r3, #2
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	4413      	add	r3, r2
 8002132:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e1a      	lsrs	r2, r3, #24
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	3303      	adds	r3, #3
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	4413      	add	r3, r2
 800214c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3304      	adds	r3, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	4413      	add	r3, r2
 8002164:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0a1a      	lsrs	r2, r3, #8
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	3305      	adds	r3, #5
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	4413      	add	r3, r2
 800217e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0c1a      	lsrs	r2, r3, #16
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3306      	adds	r3, #6
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0e1a      	lsrs	r2, r3, #24
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	3307      	adds	r3, #7
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d108      	bne.n	80021c0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0220 	orr.w	r2, r2, #32
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	e007      	b.n	80021d0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0220 	orr.w	r2, r2, #32
 80021ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e006      	b.n	80021e2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002202:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002204:	7afb      	ldrb	r3, [r7, #11]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d002      	beq.n	8002210 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d10f      	bne.n	8002230 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e005      	b.n	8002230 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002230:	68fb      	ldr	r3, [r7, #12]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d002      	beq.n	800225c <HAL_CAN_ActivateNotification+0x1e>
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d109      	bne.n	8002270 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6959      	ldr	r1, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e006      	b.n	800227e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	; (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff4c 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240e:	f7ff ff61 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002412:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	6978      	ldr	r0, [r7, #20]
 800241a:	f7ff ffb1 	bl	8002380 <NVIC_EncodePriority>
 800241e:	4602      	mov	r2, r0
 8002420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff80 	bl	800232c <__NVIC_SetPriority>
}
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff54 	bl	80022f0 <__NVIC_EnableIRQ>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245e:	e160      	b.n	8002722 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	4013      	ands	r3, r2
 800246e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8152 	beq.w	800271c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d005      	beq.n	8002490 <HAL_GPIO_Init+0x40>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d130      	bne.n	80024f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	2203      	movs	r2, #3
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c6:	2201      	movs	r2, #1
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	f003 0201 	and.w	r2, r3, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d017      	beq.n	800252e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d123      	bne.n	8002582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	220f      	movs	r2, #15
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	6939      	ldr	r1, [r7, #16]
 800257e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0203 	and.w	r2, r3, #3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80ac 	beq.w	800271c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c4:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_GPIO_Init+0x2f0>)
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	4a5d      	ldr	r2, [pc, #372]	; (8002740 <HAL_GPIO_Init+0x2f0>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6193      	str	r3, [r2, #24]
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_GPIO_Init+0x2f0>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025dc:	4a59      	ldr	r2, [pc, #356]	; (8002744 <HAL_GPIO_Init+0x2f4>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3302      	adds	r3, #2
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002606:	d025      	beq.n	8002654 <HAL_GPIO_Init+0x204>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <HAL_GPIO_Init+0x2f8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d01f      	beq.n	8002650 <HAL_GPIO_Init+0x200>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a4e      	ldr	r2, [pc, #312]	; (800274c <HAL_GPIO_Init+0x2fc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d019      	beq.n	800264c <HAL_GPIO_Init+0x1fc>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <HAL_GPIO_Init+0x300>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_GPIO_Init+0x1f8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_GPIO_Init+0x304>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00d      	beq.n	8002644 <HAL_GPIO_Init+0x1f4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_GPIO_Init+0x308>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <HAL_GPIO_Init+0x1f0>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_GPIO_Init+0x30c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_GPIO_Init+0x1ec>
 8002638:	2306      	movs	r3, #6
 800263a:	e00c      	b.n	8002656 <HAL_GPIO_Init+0x206>
 800263c:	2307      	movs	r3, #7
 800263e:	e00a      	b.n	8002656 <HAL_GPIO_Init+0x206>
 8002640:	2305      	movs	r3, #5
 8002642:	e008      	b.n	8002656 <HAL_GPIO_Init+0x206>
 8002644:	2304      	movs	r3, #4
 8002646:	e006      	b.n	8002656 <HAL_GPIO_Init+0x206>
 8002648:	2303      	movs	r3, #3
 800264a:	e004      	b.n	8002656 <HAL_GPIO_Init+0x206>
 800264c:	2302      	movs	r3, #2
 800264e:	e002      	b.n	8002656 <HAL_GPIO_Init+0x206>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <HAL_GPIO_Init+0x206>
 8002654:	2300      	movs	r3, #0
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	f002 0203 	and.w	r2, r2, #3
 800265c:	0092      	lsls	r2, r2, #2
 800265e:	4093      	lsls	r3, r2
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002666:	4937      	ldr	r1, [pc, #220]	; (8002744 <HAL_GPIO_Init+0x2f4>)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_GPIO_Init+0x310>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002698:	4a31      	ldr	r2, [pc, #196]	; (8002760 <HAL_GPIO_Init+0x310>)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800269e:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_GPIO_Init+0x310>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_GPIO_Init+0x310>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_GPIO_Init+0x310>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ec:	4a1c      	ldr	r2, [pc, #112]	; (8002760 <HAL_GPIO_Init+0x310>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_GPIO_Init+0x310>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_GPIO_Init+0x310>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3301      	adds	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	f47f ae97 	bne.w	8002460 <HAL_GPIO_Init+0x10>
  }
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	371c      	adds	r7, #28
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40021000 	.word	0x40021000
 8002744:	40010000 	.word	0x40010000
 8002748:	48000400 	.word	0x48000400
 800274c:	48000800 	.word	0x48000800
 8002750:	48000c00 	.word	0x48000c00
 8002754:	48001000 	.word	0x48001000
 8002758:	48001400 	.word	0x48001400
 800275c:	48001800 	.word	0x48001800
 8002760:	40010400 	.word	0x40010400

08002764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002780:	e002      	b.n	8002788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43d9      	mvns	r1, r3
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	400b      	ands	r3, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027d8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f001 b83a 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 816f 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002804:	4bb5      	ldr	r3, [pc, #724]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b04      	cmp	r3, #4
 800280e:	d00c      	beq.n	800282a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002810:	4bb2      	ldr	r3, [pc, #712]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	d15c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x10e>
 800281c:	4baf      	ldr	r3, [pc, #700]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002828:	d155      	bne.n	80028d6 <HAL_RCC_OscConfig+0x10e>
 800282a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800283e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_RCC_OscConfig+0x94>
 8002856:	4ba1      	ldr	r3, [pc, #644]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	e015      	b.n	8002888 <HAL_RCC_OscConfig+0xc0>
 800285c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002860:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002874:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002878:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002884:	4b95      	ldr	r3, [pc, #596]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800288c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002890:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002894:	fa92 f2a2 	rbit	r2, r2
 8002898:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800289c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80028a0:	fab2 f282 	clz	r2, r2
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f002 021f 	and.w	r2, r2, #31
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f202 	lsl.w	r2, r1, r2
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 8111 	beq.w	8002ae0 <HAL_RCC_OscConfig+0x318>
 80028be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 8108 	bne.w	8002ae0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f000 bfc6 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x12e>
 80028e8:	4b7c      	ldr	r3, [pc, #496]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7b      	ldr	r2, [pc, #492]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e036      	b.n	8002964 <HAL_RCC_OscConfig+0x19c>
 80028f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0x158>
 8002906:	4b75      	ldr	r3, [pc, #468]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a74      	ldr	r2, [pc, #464]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 800290c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b72      	ldr	r3, [pc, #456]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a71      	ldr	r2, [pc, #452]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e021      	b.n	8002964 <HAL_RCC_OscConfig+0x19c>
 8002920:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002924:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x184>
 8002932:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a69      	ldr	r2, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a66      	ldr	r2, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0x19c>
 800294c:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a62      	ldr	r2, [pc, #392]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b60      	ldr	r3, [pc, #384]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a5f      	ldr	r2, [pc, #380]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 800295e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002962:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002968:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d059      	beq.n	8002a28 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe ffe0 	bl	8001938 <HAL_GetTick>
 8002978:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297e:	f7fe ffdb 	bl	8001938 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d902      	bls.n	8002994 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	f000 bf67 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>
 8002994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002998:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80029a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_OscConfig+0x1fe>
 80029c0:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x22a>
 80029c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80029da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029ee:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80029fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80029fe:	fa92 f2a2 	rbit	r2, r2
 8002a02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002a06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a0a:	fab2 f282 	clz	r2, r2
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f042 0220 	orr.w	r2, r2, #32
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	f002 021f 	and.w	r2, r2, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ab      	beq.n	800297e <HAL_RCC_OscConfig+0x1b6>
 8002a26:	e05c      	b.n	8002ae2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe ff86 	bl	8001938 <HAL_GetTick>
 8002a2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a32:	f7fe ff81 	bl	8001938 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d902      	bls.n	8002a48 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	f000 bf0d 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>
 8002a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002a5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_OscConfig+0x2b2>
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2de>
 8002a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_RCC_OscConfig+0x314>)
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aaa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002aae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002ab2:	fa92 f2a2 	rbit	r2, r2
 8002ab6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002aba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f042 0220 	orr.w	r2, r2, #32
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f002 021f 	and.w	r2, r2, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ab      	bne.n	8002a32 <HAL_RCC_OscConfig+0x26a>
 8002ada:	e002      	b.n	8002ae2 <HAL_RCC_OscConfig+0x31a>
 8002adc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 817f 	beq.w	8002df6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002af8:	4ba7      	ldr	r3, [pc, #668]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b04:	4ba4      	ldr	r3, [pc, #656]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d173      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x430>
 8002b10:	4ba1      	ldr	r3, [pc, #644]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1c:	d16c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x430>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002b30:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0x386>
 8002b48:	4b93      	ldr	r3, [pc, #588]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	e013      	b.n	8002b76 <HAL_RCC_OscConfig+0x3ae>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002b60:	2302      	movs	r3, #2
 8002b62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b66:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b72:	4b89      	ldr	r3, [pc, #548]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2202      	movs	r2, #2
 8002b78:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002b7c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002b80:	fa92 f2a2 	rbit	r2, r2
 8002b84:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002b88:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b8c:	fab2 f282 	clz	r2, r2
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	f042 0220 	orr.w	r2, r2, #32
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f002 021f 	and.w	r2, r2, #31
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCC_OscConfig+0x3f6>
 8002ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d002      	beq.n	8002bbe <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f000 be52 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	21f8      	movs	r1, #248	; 0xf8
 8002bd4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002bdc:	fa91 f1a1 	rbit	r1, r1
 8002be0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002be4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002be8:	fab1 f181 	clz	r1, r1
 8002bec:	b2c9      	uxtb	r1, r1
 8002bee:	408b      	lsls	r3, r1
 8002bf0:	4969      	ldr	r1, [pc, #420]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	e0fe      	b.n	8002df6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8088 	beq.w	8002d1a <HAL_RCC_OscConfig+0x552>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002c1c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	fab3 f383 	clz	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	461a      	mov	r2, r3
 8002c32:	2301      	movs	r3, #1
 8002c34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe fe7f 	bl	8001938 <HAL_GetTick>
 8002c3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fe fe7a 	bl	8001938 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d902      	bls.n	8002c56 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	f000 be06 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>
 8002c56:	2302      	movs	r3, #2
 8002c58:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002c68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	fab3 f383 	clz	r3, r3
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d102      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4be>
 8002c80:	4b45      	ldr	r3, [pc, #276]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	e013      	b.n	8002cae <HAL_RCC_OscConfig+0x4e6>
 8002c86:	2302      	movs	r3, #2
 8002c88:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002caa:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002cb4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002cb8:	fa92 f2a2 	rbit	r2, r2
 8002cbc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002cc0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002cc4:	fab2 f282 	clz	r2, r2
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	f042 0220 	orr.w	r2, r2, #32
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f002 021f 	and.w	r2, r2, #31
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0af      	beq.n	8002c40 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b2d      	ldr	r3, [pc, #180]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	21f8      	movs	r1, #248	; 0xf8
 8002cf6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002cfe:	fa91 f1a1 	rbit	r1, r1
 8002d02:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002d06:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d0a:	fab1 f181 	clz	r1, r1
 8002d0e:	b2c9      	uxtb	r1, r1
 8002d10:	408b      	lsls	r3, r1
 8002d12:	4921      	ldr	r1, [pc, #132]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	e06d      	b.n	8002df6 <HAL_RCC_OscConfig+0x62e>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002d2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	461a      	mov	r2, r3
 8002d42:	2300      	movs	r3, #0
 8002d44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fe fdf7 	bl	8001938 <HAL_GetTick>
 8002d4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d50:	f7fe fdf2 	bl	8001938 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d902      	bls.n	8002d66 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	f000 bd7e 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>
 8002d66:	2302      	movs	r3, #2
 8002d68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002d78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5d4>
 8002d90:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <HAL_RCC_OscConfig+0x5d0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	e016      	b.n	8002dc4 <HAL_RCC_OscConfig+0x5fc>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002dae:	2302      	movs	r3, #2
 8002db0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002db4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002dc0:	4bbf      	ldr	r3, [pc, #764]	; (80030c0 <HAL_RCC_OscConfig+0x8f8>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002dca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002dce:	fa92 f2a2 	rbit	r2, r2
 8002dd2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002dd6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002dda:	fab2 f282 	clz	r2, r2
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f042 0220 	orr.w	r2, r2, #32
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	f002 021f 	and.w	r2, r2, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f202 	lsl.w	r2, r1, r2
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1ac      	bne.n	8002d50 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8113 	beq.w	8003032 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d07c      	beq.n	8002f16 <HAL_RCC_OscConfig+0x74e>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002e2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4ba2      	ldr	r3, [pc, #648]	; (80030c4 <HAL_RCC_OscConfig+0x8fc>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	461a      	mov	r2, r3
 8002e42:	2301      	movs	r3, #1
 8002e44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7fe fd77 	bl	8001938 <HAL_GetTick>
 8002e4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e50:	f7fe fd72 	bl	8001938 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d902      	bls.n	8002e66 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	f000 bcfe 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>
 8002e66:	2302      	movs	r3, #2
 8002e68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e70:	fa93 f2a3 	rbit	r2, r3
 8002e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e86:	2202      	movs	r2, #2
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002eaa:	2202      	movs	r2, #2
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	fa93 f2a3 	rbit	r2, r3
 8002ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ec4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec6:	4b7e      	ldr	r3, [pc, #504]	; (80030c0 <HAL_RCC_OscConfig+0x8f8>)
 8002ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ece:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	6019      	str	r1, [r3, #0]
 8002ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	fa93 f1a3 	rbit	r1, r3
 8002ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ee8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002eec:	6019      	str	r1, [r3, #0]
  return result;
 8002eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f003 031f 	and.w	r3, r3, #31
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d09d      	beq.n	8002e50 <HAL_RCC_OscConfig+0x688>
 8002f14:	e08d      	b.n	8003032 <HAL_RCC_OscConfig+0x86a>
 8002f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f38:	601a      	str	r2, [r3, #0]
  return result;
 8002f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f42:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <HAL_RCC_OscConfig+0x8fc>)
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	461a      	mov	r2, r3
 8002f54:	2300      	movs	r3, #0
 8002f56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f58:	f7fe fcee 	bl	8001938 <HAL_GetTick>
 8002f5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe fce9 	bl	8001938 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d902      	bls.n	8002f78 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	f000 bc75 	b.w	8003862 <HAL_RCC_OscConfig+0x109a>
 8002f78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f80:	2202      	movs	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	fa93 f2a3 	rbit	r2, r3
 8002fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fc8:	2202      	movs	r2, #2
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	fa93 f2a3 	rbit	r2, r3
 8002fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fe2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <HAL_RCC_OscConfig+0x8f8>)
 8002fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ff0:	2102      	movs	r1, #2
 8002ff2:	6019      	str	r1, [r3, #0]
 8002ff4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fa93 f1a3 	rbit	r1, r3
 8003002:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003006:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800300a:	6019      	str	r1, [r3, #0]
  return result;
 800300c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003010:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d197      	bne.n	8002f62 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 81a5 	beq.w	8003392 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <HAL_RCC_OscConfig+0x8f8>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b19      	ldr	r3, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x8f8>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_RCC_OscConfig+0x8f8>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	61d3      	str	r3, [r2, #28]
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <HAL_RCC_OscConfig+0x8f8>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800306e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800307c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003080:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_RCC_OscConfig+0x900>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d121      	bne.n	80030d8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_OscConfig+0x900>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x900>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a0:	f7fe fc4a 	bl	8001938 <HAL_GetTick>
 80030a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e010      	b.n	80030cc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe fc45 	bl	8001938 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d908      	bls.n	80030cc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e3d1      	b.n	8003862 <HAL_RCC_OscConfig+0x109a>
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	10908120 	.word	0x10908120
 80030c8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4b8d      	ldr	r3, [pc, #564]	; (8003304 <HAL_RCC_OscConfig+0xb3c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0e8      	beq.n	80030aa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x92e>
 80030e8:	4b87      	ldr	r3, [pc, #540]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4a86      	ldr	r2, [pc, #536]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	e035      	b.n	8003162 <HAL_RCC_OscConfig+0x99a>
 80030f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x958>
 8003106:	4b80      	ldr	r3, [pc, #512]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4a7f      	ldr	r2, [pc, #508]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 800310c:	f023 0301 	bic.w	r3, r3, #1
 8003110:	6213      	str	r3, [r2, #32]
 8003112:	4b7d      	ldr	r3, [pc, #500]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a7c      	ldr	r2, [pc, #496]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	e020      	b.n	8003162 <HAL_RCC_OscConfig+0x99a>
 8003120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003124:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d10c      	bne.n	800314a <HAL_RCC_OscConfig+0x982>
 8003130:	4b75      	ldr	r3, [pc, #468]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a74      	ldr	r2, [pc, #464]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	4b72      	ldr	r3, [pc, #456]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a71      	ldr	r2, [pc, #452]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	e00b      	b.n	8003162 <HAL_RCC_OscConfig+0x99a>
 800314a:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6213      	str	r3, [r2, #32]
 8003156:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a6b      	ldr	r2, [pc, #428]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003166:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8081 	beq.w	8003276 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fe fbe0 	bl	8001938 <HAL_GetTick>
 8003178:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fbdb 	bl	8001938 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e365      	b.n	8003862 <HAL_RCC_OscConfig+0x109a>
 8003196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800319a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800319e:	2202      	movs	r2, #2
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031c2:	2202      	movs	r2, #2
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	fa93 f2a3 	rbit	r2, r3
 80031d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031dc:	601a      	str	r2, [r3, #0]
  return result;
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_OscConfig+0xa3a>
 80031fc:	4b42      	ldr	r3, [pc, #264]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	e013      	b.n	800322a <HAL_RCC_OscConfig+0xa62>
 8003202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003206:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800320a:	2202      	movs	r2, #2
 800320c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003212:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003220:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	4b38      	ldr	r3, [pc, #224]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800322e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003232:	2102      	movs	r1, #2
 8003234:	6011      	str	r1, [r2, #0]
 8003236:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800323a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	fa92 f1a2 	rbit	r1, r2
 8003244:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003248:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800324c:	6011      	str	r1, [r2, #0]
  return result;
 800324e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003252:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d084      	beq.n	800317e <HAL_RCC_OscConfig+0x9b6>
 8003274:	e083      	b.n	800337e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe fb5f 	bl	8001938 <HAL_GetTick>
 800327a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003280:	f7fe fb5a 	bl	8001938 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003290:	4293      	cmp	r3, r2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e2e4      	b.n	8003862 <HAL_RCC_OscConfig+0x109a>
 8003298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800329c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80032a0:	2202      	movs	r2, #2
 80032a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032b6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032c4:	2202      	movs	r2, #2
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032de:	601a      	str	r2, [r3, #0]
  return result;
 80032e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f043 0302 	orr.w	r3, r3, #2
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d106      	bne.n	800330c <HAL_RCC_OscConfig+0xb44>
 80032fe:	4b02      	ldr	r3, [pc, #8]	; (8003308 <HAL_RCC_OscConfig+0xb40>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	e017      	b.n	8003334 <HAL_RCC_OscConfig+0xb6c>
 8003304:	40007000 	.word	0x40007000
 8003308:	40021000 	.word	0x40021000
 800330c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003310:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003314:	2202      	movs	r2, #2
 8003316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800331c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	fa93 f2a3 	rbit	r2, r3
 8003326:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800332a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	4bb3      	ldr	r3, [pc, #716]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003338:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800333c:	2102      	movs	r1, #2
 800333e:	6011      	str	r1, [r2, #0]
 8003340:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003344:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	fa92 f1a2 	rbit	r1, r2
 800334e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003352:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003356:	6011      	str	r1, [r2, #0]
  return result;
 8003358:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800335c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	fab2 f282 	clz	r2, r2
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f002 021f 	and.w	r2, r2, #31
 8003372:	2101      	movs	r1, #1
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d180      	bne.n	8003280 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800337e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003382:	2b01      	cmp	r3, #1
 8003384:	d105      	bne.n	8003392 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003386:	4b9e      	ldr	r3, [pc, #632]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4a9d      	ldr	r2, [pc, #628]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 800338c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003390:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003396:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 825e 	beq.w	8003860 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a4:	4b96      	ldr	r3, [pc, #600]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 030c 	and.w	r3, r3, #12
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	f000 821f 	beq.w	80037f0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	f040 8170 	bne.w	80036a4 <HAL_RCC_OscConfig+0xedc>
 80033c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033c8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033e4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033e8:	601a      	str	r2, [r3, #0]
  return result;
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033f2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	461a      	mov	r2, r3
 8003406:	2300      	movs	r3, #0
 8003408:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe fa95 	bl	8001938 <HAL_GetTick>
 800340e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003412:	e009      	b.n	8003428 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003414:	f7fe fa90 	bl	8001938 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e21c      	b.n	8003862 <HAL_RCC_OscConfig+0x109a>
 8003428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800342c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003430:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fa93 f2a3 	rbit	r2, r3
 8003444:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003448:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800344c:	601a      	str	r2, [r3, #0]
  return result;
 800344e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003452:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003456:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_RCC_OscConfig+0xcaa>
 800346c:	4b64      	ldr	r3, [pc, #400]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	e027      	b.n	80034c2 <HAL_RCC_OscConfig+0xcfa>
 8003472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003476:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800347a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800347e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003484:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	fa93 f2a3 	rbit	r2, r3
 800348e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003492:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034aa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	fa93 f2a3 	rbit	r2, r3
 80034b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034ca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034ce:	6011      	str	r1, [r2, #0]
 80034d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	fa92 f1a2 	rbit	r1, r2
 80034de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034e2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80034e6:	6011      	str	r1, [r2, #0]
  return result;
 80034e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80034ec:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	fab2 f282 	clz	r2, r2
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f042 0220 	orr.w	r2, r2, #32
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	f002 021f 	and.w	r2, r2, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d182      	bne.n	8003414 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	f023 020f 	bic.w	r2, r3, #15
 8003516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	4937      	ldr	r1, [pc, #220]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 8003524:	4313      	orrs	r3, r2
 8003526:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003534:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a19      	ldr	r1, [r3, #32]
 800353c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003540:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	430b      	orrs	r3, r1
 800354a:	492d      	ldr	r1, [pc, #180]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
 8003550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003554:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800355c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003562:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	fa93 f2a3 	rbit	r2, r3
 800356c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003570:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003574:	601a      	str	r2, [r3, #0]
  return result;
 8003576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800357e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003580:	fab3 f383 	clz	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800358a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	461a      	mov	r2, r3
 8003592:	2301      	movs	r3, #1
 8003594:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe f9cf 	bl	8001938 <HAL_GetTick>
 800359a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359e:	e009      	b.n	80035b4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe f9ca 	bl	8001938 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e156      	b.n	8003862 <HAL_RCC_OscConfig+0x109a>
 80035b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fa93 f2a3 	rbit	r2, r3
 80035d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035d8:	601a      	str	r2, [r3, #0]
  return result;
 80035da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCC_OscConfig+0xe3c>
 80035f8:	4b01      	ldr	r3, [pc, #4]	; (8003600 <HAL_RCC_OscConfig+0xe38>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	e02a      	b.n	8003654 <HAL_RCC_OscConfig+0xe8c>
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003608:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800360c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003616:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fa93 f2a3 	rbit	r2, r3
 8003620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003624:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003632:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800363c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	fa93 f2a3 	rbit	r2, r3
 8003646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800364a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	4b86      	ldr	r3, [pc, #536]	; (800386c <HAL_RCC_OscConfig+0x10a4>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003658:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800365c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003660:	6011      	str	r1, [r2, #0]
 8003662:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003666:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	fa92 f1a2 	rbit	r1, r2
 8003670:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003674:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003678:	6011      	str	r1, [r2, #0]
  return result;
 800367a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800367e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	fab2 f282 	clz	r2, r2
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	f002 021f 	and.w	r2, r2, #31
 8003694:	2101      	movs	r1, #1
 8003696:	fa01 f202 	lsl.w	r2, r1, r2
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	f43f af7f 	beq.w	80035a0 <HAL_RCC_OscConfig+0xdd8>
 80036a2:	e0dd      	b.n	8003860 <HAL_RCC_OscConfig+0x1098>
 80036a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	fa93 f2a3 	rbit	r2, r3
 80036c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036c8:	601a      	str	r2, [r3, #0]
  return result;
 80036ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ce:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036d2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	461a      	mov	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fe f925 	bl	8001938 <HAL_GetTick>
 80036ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f2:	e009      	b.n	8003708 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe f920 	bl	8001938 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e0ac      	b.n	8003862 <HAL_RCC_OscConfig+0x109a>
 8003708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800371a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f2a3 	rbit	r2, r3
 8003724:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003728:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800372c:	601a      	str	r2, [r3, #0]
  return result;
 800372e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003732:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003736:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <HAL_RCC_OscConfig+0xf8a>
 800374c:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_RCC_OscConfig+0x10a4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	e027      	b.n	80037a2 <HAL_RCC_OscConfig+0xfda>
 8003752:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003756:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800375a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003764:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	fa93 f2a3 	rbit	r2, r3
 800376e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003772:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800377c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003780:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	fa93 f2a3 	rbit	r2, r3
 8003794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003798:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4b33      	ldr	r3, [pc, #204]	; (800386c <HAL_RCC_OscConfig+0x10a4>)
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037ae:	6011      	str	r1, [r2, #0]
 80037b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037b4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	fa92 f1a2 	rbit	r1, r2
 80037be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037c2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80037c6:	6011      	str	r1, [r2, #0]
  return result;
 80037c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80037cc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	fab2 f282 	clz	r2, r2
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	f042 0220 	orr.w	r2, r2, #32
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	f002 021f 	and.w	r2, r2, #31
 80037e2:	2101      	movs	r1, #1
 80037e4:	fa01 f202 	lsl.w	r2, r1, r2
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d182      	bne.n	80036f4 <HAL_RCC_OscConfig+0xf2c>
 80037ee:	e037      	b.n	8003860 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e02e      	b.n	8003862 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_RCC_OscConfig+0x10a4>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <HAL_RCC_OscConfig+0x10a4>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003814:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003818:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800381c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003820:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	429a      	cmp	r2, r3
 800382a:	d117      	bne.n	800385c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800382c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003830:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003840:	429a      	cmp	r2, r3
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003850:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b09e      	sub	sp, #120	; 0x78
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e162      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003888:	4b90      	ldr	r3, [pc, #576]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d910      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003896:	4b8d      	ldr	r3, [pc, #564]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 0207 	bic.w	r2, r3, #7
 800389e:	498b      	ldr	r1, [pc, #556]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b89      	ldr	r3, [pc, #548]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e14a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b82      	ldr	r3, [pc, #520]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	497f      	ldr	r1, [pc, #508]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80dc 	beq.w	8003a9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d13c      	bne.n	8003966 <HAL_RCC_ClockConfig+0xf6>
 80038ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <HAL_RCC_ClockConfig+0xa6>
 8003910:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	e00f      	b.n	8003936 <HAL_RCC_ClockConfig+0xc6>
 8003916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800391a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800391e:	fa93 f3a3 	rbit	r3, r3
 8003922:	667b      	str	r3, [r7, #100]	; 0x64
 8003924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003928:	663b      	str	r3, [r7, #96]	; 0x60
 800392a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800393a:	65ba      	str	r2, [r7, #88]	; 0x58
 800393c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d17b      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0f3      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d13c      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x178>
 800396e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003972:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	b2db      	uxtb	r3, r3
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_RCC_ClockConfig+0x128>
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	e00f      	b.n	80039b8 <HAL_RCC_ClockConfig+0x148>
 8003998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800399c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	647b      	str	r3, [r7, #68]	; 0x44
 80039a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40
 80039ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b4:	4b46      	ldr	r3, [pc, #280]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80039be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80039c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f042 0220 	orr.w	r2, r2, #32
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f002 021f 	and.w	r2, r2, #31
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f202 	lsl.w	r2, r1, r2
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d13a      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0b2      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
 80039e8:	2302      	movs	r3, #2
 80039ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	fab3 f383 	clz	r3, r3
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x1a0>
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	e00d      	b.n	8003a2c <HAL_RCC_ClockConfig+0x1bc>
 8003a10:	2302      	movs	r3, #2
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	fa93 f3a3 	rbit	r3, r3
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	623b      	str	r3, [r7, #32]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	4b29      	ldr	r3, [pc, #164]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	61ba      	str	r2, [r7, #24]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	617a      	str	r2, [r7, #20]
  return result;
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	f042 0220 	orr.w	r2, r2, #32
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f002 021f 	and.w	r2, r2, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e079      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	491a      	ldr	r1, [pc, #104]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7fd ff64 	bl	8001938 <HAL_GetTick>
 8003a70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fd ff60 	bl	8001938 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e061      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d214      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4906      	ldr	r1, [pc, #24]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b04      	ldr	r3, [pc, #16]	; (8003acc <HAL_RCC_ClockConfig+0x25c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e040      	b.n	8003b4e <HAL_RCC_ClockConfig+0x2de>
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	491a      	ldr	r1, [pc, #104]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4912      	ldr	r1, [pc, #72]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b12:	f000 f829 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b16:	4601      	mov	r1, r0
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <HAL_RCC_ClockConfig+0x2e8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b20:	22f0      	movs	r2, #240	; 0xf0
 8003b22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	fa92 f2a2 	rbit	r2, r2
 8003b2a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	fab2 f282 	clz	r2, r2
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	40d3      	lsrs	r3, r2
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x2ec>)
 8003b38:	5cd3      	ldrb	r3, [r2, r3]
 8003b3a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <HAL_RCC_ClockConfig+0x2f0>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_RCC_ClockConfig+0x2f4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fdca 	bl	80016e0 <HAL_InitTick>
  
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3778      	adds	r7, #120	; 0x78
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	0800c388 	.word	0x0800c388
 8003b60:	20000008 	.word	0x20000008
 8003b64:	2000000c 	.word	0x2000000c

08003b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b08b      	sub	sp, #44	; 0x2c
 8003b6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d002      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x30>
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_GetSysClockFreq+0x36>
 8003b96:	e03f      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b9a:	623b      	str	r3, [r7, #32]
      break;
 8003b9c:	e03f      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ba4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ba8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	fa92 f2a2 	rbit	r2, r2
 8003bb0:	607a      	str	r2, [r7, #4]
  return result;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	fab2 f282 	clz	r2, r2
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	40d3      	lsrs	r3, r2
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	220f      	movs	r2, #15
 8003bcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	60fa      	str	r2, [r7, #12]
  return result;
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	40d3      	lsrs	r3, r2
 8003be0:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003bf0:	4a0f      	ldr	r2, [pc, #60]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	e007      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	623b      	str	r3, [r7, #32]
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c1a:	623b      	str	r3, [r7, #32]
      break;
 8003c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	372c      	adds	r7, #44	; 0x2c
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	007a1200 	.word	0x007a1200
 8003c34:	0800c3a0 	.word	0x0800c3a0
 8003c38:	0800c3b0 	.word	0x0800c3b0

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000008 	.word	0x20000008

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c5a:	f7ff ffef 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5e:	4601      	mov	r1, r0
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c68:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003c6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	fa92 f2a2 	rbit	r2, r2
 8003c74:	603a      	str	r2, [r7, #0]
  return result;
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	fab2 f282 	clz	r2, r2
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	40d3      	lsrs	r3, r2
 8003c80:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	0800c398 	.word	0x0800c398

08003c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c9e:	f7ff ffcd 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003ca2:	4601      	mov	r1, r0
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003cac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003cb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	fa92 f2a2 	rbit	r2, r2
 8003cb8:	603a      	str	r2, [r7, #0]
  return result;
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	fab2 f282 	clz	r2, r2
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	40d3      	lsrs	r3, r2
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003cc6:	5cd3      	ldrb	r3, [r2, r3]
 8003cc8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	0800c398 	.word	0x0800c398

08003cdc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	220f      	movs	r2, #15
 8003cea:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0203 	and.w	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_GetClockConfig+0x5c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_RCC_GetClockConfig+0x60>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0207 	and.w	r2, r3, #7
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	601a      	str	r2, [r3, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40022000 	.word	0x40022000

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b092      	sub	sp, #72	; 0x48
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80d4 	beq.w	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d64:	4b4e      	ldr	r3, [pc, #312]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10e      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	4a4a      	ldr	r2, [pc, #296]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	61d3      	str	r3, [r2, #28]
 8003d7c:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a41      	ldr	r2, [pc, #260]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fd fdc7 	bl	8001938 <HAL_GetTick>
 8003daa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fd fdc3 	bl	8001938 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1d6      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc0:	4b38      	ldr	r3, [pc, #224]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8084 	beq.w	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d07c      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dec:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e06:	fab3 f383 	clz	r3, r3
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	461a      	mov	r2, r3
 8003e16:	2301      	movs	r3, #1
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e2a:	fab3 f383 	clz	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e42:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d04b      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fd fd73 	bl	8001938 <HAL_GetTick>
 8003e52:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd fd6f 	bl	8001938 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e180      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
 8003e78:	2302      	movs	r3, #2
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	61fb      	str	r3, [r7, #28]
  return result;
 8003e84:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f043 0302 	orr.w	r3, r3, #2
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d108      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e9a:	4b01      	ldr	r3, [pc, #4]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	e00d      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	10908100 	.word	0x10908100
 8003eac:	2302      	movs	r3, #2
 8003eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	4b9a      	ldr	r3, [pc, #616]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	613a      	str	r2, [r7, #16]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	fa92 f2a2 	rbit	r2, r2
 8003ec6:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	fab2 f282 	clz	r2, r2
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	f002 021f 	and.w	r2, r2, #31
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0b7      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ee6:	4b8f      	ldr	r3, [pc, #572]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	498c      	ldr	r1, [pc, #560]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ef8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f00:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	4a87      	ldr	r2, [pc, #540]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f18:	4b82      	ldr	r3, [pc, #520]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	f023 0203 	bic.w	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	497f      	ldr	r1, [pc, #508]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f36:	4b7b      	ldr	r3, [pc, #492]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	4978      	ldr	r1, [pc, #480]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f54:	4b73      	ldr	r3, [pc, #460]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4970      	ldr	r1, [pc, #448]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f72:	4b6c      	ldr	r3, [pc, #432]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f023 0210 	bic.w	r2, r3, #16
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4969      	ldr	r1, [pc, #420]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003f90:	4b64      	ldr	r3, [pc, #400]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	4961      	ldr	r1, [pc, #388]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d008      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fae:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f023 0220 	bic.w	r2, r3, #32
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	495a      	ldr	r1, [pc, #360]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fcc:	4b55      	ldr	r3, [pc, #340]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	4952      	ldr	r1, [pc, #328]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fea:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	494b      	ldr	r1, [pc, #300]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004008:	4b46      	ldr	r3, [pc, #280]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	4943      	ldr	r1, [pc, #268]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	493c      	ldr	r1, [pc, #240]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004044:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	4934      	ldr	r1, [pc, #208]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004052:	4313      	orrs	r3, r2
 8004054:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004062:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	492d      	ldr	r1, [pc, #180]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004080:	4b28      	ldr	r3, [pc, #160]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	4925      	ldr	r1, [pc, #148]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800409e:	4b21      	ldr	r3, [pc, #132]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	491e      	ldr	r1, [pc, #120]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	4916      	ldr	r1, [pc, #88]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	490f      	ldr	r1, [pc, #60]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	4907      	ldr	r1, [pc, #28]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00c      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004116:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	4913      	ldr	r1, [pc, #76]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800412c:	4313      	orrs	r3, r2
 800412e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800413c:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	490b      	ldr	r1, [pc, #44]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800414a:	4313      	orrs	r3, r2
 800414c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004166:	4904      	ldr	r1, [pc, #16]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004168:	4313      	orrs	r3, r2
 800416a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3748      	adds	r7, #72	; 0x48
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000

0800417c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e09d      	b.n	80042ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d108      	bne.n	80041a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419e:	d009      	beq.n	80041b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
 80041a6:	e005      	b.n	80041b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd f9e4 	bl	800159c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041f4:	d902      	bls.n	80041fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e002      	b.n	8004202 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004200:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800420a:	d007      	beq.n	800421c <HAL_SPI_Init+0xa0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004214:	d002      	beq.n	800421c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	ea42 0103 	orr.w	r1, r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	f003 0204 	and.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004298:	ea42 0103 	orr.w	r1, r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e049      	b.n	8004378 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d106      	bne.n	80042fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f841 	bl	8004380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3304      	adds	r3, #4
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 f9f7 	bl	8004704 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d001      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e04f      	b.n	800444c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a23      	ldr	r2, [pc, #140]	; (8004458 <HAL_TIM_Base_Start_IT+0xc4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01d      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x76>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d6:	d018      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x76>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1f      	ldr	r2, [pc, #124]	; (800445c <HAL_TIM_Base_Start_IT+0xc8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x76>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <HAL_TIM_Base_Start_IT+0xcc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00e      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x76>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_TIM_Base_Start_IT+0xd0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x76>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1b      	ldr	r2, [pc, #108]	; (8004468 <HAL_TIM_Base_Start_IT+0xd4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x76>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_TIM_Base_Start_IT+0xd8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d115      	bne.n	8004436 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <HAL_TIM_Base_Start_IT+0xdc>)
 8004412:	4013      	ands	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b06      	cmp	r3, #6
 800441a:	d015      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0xb4>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004422:	d011      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	e008      	b.n	8004448 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0201 	orr.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e000      	b.n	800444a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004448:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40013400 	.word	0x40013400
 8004468:	40014000 	.word	0x40014000
 800446c:	40015000 	.word	0x40015000
 8004470:	00010007 	.word	0x00010007

08004474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d122      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d11b      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0202 	mvn.w	r2, #2
 80044a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f905 	bl	80046c6 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f8f7 	bl	80046b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f908 	bl	80046da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0204 	mvn.w	r2, #4
 80044f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2202      	movs	r2, #2
 80044fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f8db 	bl	80046c6 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8cd 	bl	80046b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8de 	bl	80046da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b08      	cmp	r3, #8
 8004530:	d122      	bne.n	8004578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b08      	cmp	r3, #8
 800453e:	d11b      	bne.n	8004578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0208 	mvn.w	r2, #8
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2204      	movs	r2, #4
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f8b1 	bl	80046c6 <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f8a3 	bl	80046b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f8b4 	bl	80046da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b10      	cmp	r3, #16
 8004584:	d122      	bne.n	80045cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b10      	cmp	r3, #16
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0210 	mvn.w	r2, #16
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2208      	movs	r2, #8
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f887 	bl	80046c6 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f879 	bl	80046b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f88a 	bl	80046da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0201 	mvn.w	r2, #1
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc ff4a 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b80      	cmp	r3, #128	; 0x80
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f918 	bl	8004854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004632:	d10e      	bne.n	8004652 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	d107      	bne.n	8004652 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800464a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f90b 	bl	8004868 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d10e      	bne.n	800467e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d107      	bne.n	800467e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f838 	bl	80046ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b20      	cmp	r3, #32
 800468a:	d10e      	bne.n	80046aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b20      	cmp	r3, #32
 8004698:	d107      	bne.n	80046aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f06f 0220 	mvn.w	r2, #32
 80046a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8cb 	bl	8004840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046aa:	bf00      	nop
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a42      	ldr	r2, [pc, #264]	; (8004820 <TIM_Base_SetConfig+0x11c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d013      	beq.n	8004744 <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004722:	d00f      	beq.n	8004744 <TIM_Base_SetConfig+0x40>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a3f      	ldr	r2, [pc, #252]	; (8004824 <TIM_Base_SetConfig+0x120>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00b      	beq.n	8004744 <TIM_Base_SetConfig+0x40>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a3e      	ldr	r2, [pc, #248]	; (8004828 <TIM_Base_SetConfig+0x124>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d007      	beq.n	8004744 <TIM_Base_SetConfig+0x40>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a3d      	ldr	r2, [pc, #244]	; (800482c <TIM_Base_SetConfig+0x128>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a3c      	ldr	r2, [pc, #240]	; (8004830 <TIM_Base_SetConfig+0x12c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d108      	bne.n	8004756 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a31      	ldr	r2, [pc, #196]	; (8004820 <TIM_Base_SetConfig+0x11c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01f      	beq.n	800479e <TIM_Base_SetConfig+0x9a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004764:	d01b      	beq.n	800479e <TIM_Base_SetConfig+0x9a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2e      	ldr	r2, [pc, #184]	; (8004824 <TIM_Base_SetConfig+0x120>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d017      	beq.n	800479e <TIM_Base_SetConfig+0x9a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <TIM_Base_SetConfig+0x124>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <TIM_Base_SetConfig+0x9a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2c      	ldr	r2, [pc, #176]	; (800482c <TIM_Base_SetConfig+0x128>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00f      	beq.n	800479e <TIM_Base_SetConfig+0x9a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2c      	ldr	r2, [pc, #176]	; (8004834 <TIM_Base_SetConfig+0x130>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00b      	beq.n	800479e <TIM_Base_SetConfig+0x9a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2b      	ldr	r2, [pc, #172]	; (8004838 <TIM_Base_SetConfig+0x134>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d007      	beq.n	800479e <TIM_Base_SetConfig+0x9a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <TIM_Base_SetConfig+0x138>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d003      	beq.n	800479e <TIM_Base_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a25      	ldr	r2, [pc, #148]	; (8004830 <TIM_Base_SetConfig+0x12c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d108      	bne.n	80047b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a12      	ldr	r2, [pc, #72]	; (8004820 <TIM_Base_SetConfig+0x11c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <TIM_Base_SetConfig+0x100>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a13      	ldr	r2, [pc, #76]	; (800482c <TIM_Base_SetConfig+0x128>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00f      	beq.n	8004804 <TIM_Base_SetConfig+0x100>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <TIM_Base_SetConfig+0x130>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_Base_SetConfig+0x100>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a12      	ldr	r2, [pc, #72]	; (8004838 <TIM_Base_SetConfig+0x134>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_Base_SetConfig+0x100>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a11      	ldr	r2, [pc, #68]	; (800483c <TIM_Base_SetConfig+0x138>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_Base_SetConfig+0x100>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a0c      	ldr	r2, [pc, #48]	; (8004830 <TIM_Base_SetConfig+0x12c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d103      	bne.n	800480c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	615a      	str	r2, [r3, #20]
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40012c00 	.word	0x40012c00
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40013400 	.word	0x40013400
 8004830:	40015000 	.word	0x40015000
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800

08004840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e040      	b.n	8004910 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc fedc 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	; 0x24
 80048a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8c0 	bl	8004a40 <UART_SetConfig>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e022      	b.n	8004910 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa8a 	bl	8004dec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fb11 	bl	8004f30 <UART_CheckIdleState>
 800490e:	4603      	mov	r3, r0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	4613      	mov	r3, r2
 8004926:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492c:	2b20      	cmp	r3, #32
 800492e:	f040 8082 	bne.w	8004a36 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_UART_Transmit+0x26>
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e07a      	b.n	8004a38 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_UART_Transmit+0x38>
 800494c:	2302      	movs	r3, #2
 800494e:	e073      	b.n	8004a38 <HAL_UART_Transmit+0x120>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2221      	movs	r2, #33	; 0x21
 8004964:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004966:	f7fc ffe7 	bl	8001938 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004984:	d108      	bne.n	8004998 <HAL_UART_Transmit+0x80>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d104      	bne.n	8004998 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	e003      	b.n	80049a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800499c:	2300      	movs	r3, #0
 800499e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80049a8:	e02d      	b.n	8004a06 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fb04 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e039      	b.n	8004a38 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	881a      	ldrh	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d6:	b292      	uxth	r2, r2
 80049d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	3302      	adds	r3, #2
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e008      	b.n	80049f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b292      	uxth	r2, r2
 80049ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	3301      	adds	r3, #1
 80049f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1cb      	bne.n	80049aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2140      	movs	r1, #64	; 0x40
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fad0 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e005      	b.n	8004a38 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b92      	ldr	r3, [pc, #584]	; (8004cb4 <UART_SetConfig+0x274>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	6979      	ldr	r1, [r7, #20]
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a80      	ldr	r2, [pc, #512]	; (8004cb8 <UART_SetConfig+0x278>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d120      	bne.n	8004afe <UART_SetConfig+0xbe>
 8004abc:	4b7f      	ldr	r3, [pc, #508]	; (8004cbc <UART_SetConfig+0x27c>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d817      	bhi.n	8004af8 <UART_SetConfig+0xb8>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0x90>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004aed 	.word	0x08004aed
 8004ad8:	08004af3 	.word	0x08004af3
 8004adc:	08004ae7 	.word	0x08004ae7
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e0b5      	b.n	8004c52 <UART_SetConfig+0x212>
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e0b2      	b.n	8004c52 <UART_SetConfig+0x212>
 8004aec:	2304      	movs	r3, #4
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e0af      	b.n	8004c52 <UART_SetConfig+0x212>
 8004af2:	2308      	movs	r3, #8
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e0ac      	b.n	8004c52 <UART_SetConfig+0x212>
 8004af8:	2310      	movs	r3, #16
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e0a9      	b.n	8004c52 <UART_SetConfig+0x212>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a6f      	ldr	r2, [pc, #444]	; (8004cc0 <UART_SetConfig+0x280>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d124      	bne.n	8004b52 <UART_SetConfig+0x112>
 8004b08:	4b6c      	ldr	r3, [pc, #432]	; (8004cbc <UART_SetConfig+0x27c>)
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b14:	d011      	beq.n	8004b3a <UART_SetConfig+0xfa>
 8004b16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b1a:	d817      	bhi.n	8004b4c <UART_SetConfig+0x10c>
 8004b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b20:	d011      	beq.n	8004b46 <UART_SetConfig+0x106>
 8004b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b26:	d811      	bhi.n	8004b4c <UART_SetConfig+0x10c>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <UART_SetConfig+0xf4>
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d006      	beq.n	8004b40 <UART_SetConfig+0x100>
 8004b32:	e00b      	b.n	8004b4c <UART_SetConfig+0x10c>
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e08b      	b.n	8004c52 <UART_SetConfig+0x212>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e088      	b.n	8004c52 <UART_SetConfig+0x212>
 8004b40:	2304      	movs	r3, #4
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e085      	b.n	8004c52 <UART_SetConfig+0x212>
 8004b46:	2308      	movs	r3, #8
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e082      	b.n	8004c52 <UART_SetConfig+0x212>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e07f      	b.n	8004c52 <UART_SetConfig+0x212>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a5b      	ldr	r2, [pc, #364]	; (8004cc4 <UART_SetConfig+0x284>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d124      	bne.n	8004ba6 <UART_SetConfig+0x166>
 8004b5c:	4b57      	ldr	r3, [pc, #348]	; (8004cbc <UART_SetConfig+0x27c>)
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b64:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b68:	d011      	beq.n	8004b8e <UART_SetConfig+0x14e>
 8004b6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b6e:	d817      	bhi.n	8004ba0 <UART_SetConfig+0x160>
 8004b70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b74:	d011      	beq.n	8004b9a <UART_SetConfig+0x15a>
 8004b76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b7a:	d811      	bhi.n	8004ba0 <UART_SetConfig+0x160>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <UART_SetConfig+0x148>
 8004b80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b84:	d006      	beq.n	8004b94 <UART_SetConfig+0x154>
 8004b86:	e00b      	b.n	8004ba0 <UART_SetConfig+0x160>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e061      	b.n	8004c52 <UART_SetConfig+0x212>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e05e      	b.n	8004c52 <UART_SetConfig+0x212>
 8004b94:	2304      	movs	r3, #4
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e05b      	b.n	8004c52 <UART_SetConfig+0x212>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e058      	b.n	8004c52 <UART_SetConfig+0x212>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e055      	b.n	8004c52 <UART_SetConfig+0x212>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a47      	ldr	r2, [pc, #284]	; (8004cc8 <UART_SetConfig+0x288>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d124      	bne.n	8004bfa <UART_SetConfig+0x1ba>
 8004bb0:	4b42      	ldr	r3, [pc, #264]	; (8004cbc <UART_SetConfig+0x27c>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004bb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bbc:	d011      	beq.n	8004be2 <UART_SetConfig+0x1a2>
 8004bbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bc2:	d817      	bhi.n	8004bf4 <UART_SetConfig+0x1b4>
 8004bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bc8:	d011      	beq.n	8004bee <UART_SetConfig+0x1ae>
 8004bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bce:	d811      	bhi.n	8004bf4 <UART_SetConfig+0x1b4>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <UART_SetConfig+0x19c>
 8004bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd8:	d006      	beq.n	8004be8 <UART_SetConfig+0x1a8>
 8004bda:	e00b      	b.n	8004bf4 <UART_SetConfig+0x1b4>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e037      	b.n	8004c52 <UART_SetConfig+0x212>
 8004be2:	2302      	movs	r3, #2
 8004be4:	77fb      	strb	r3, [r7, #31]
 8004be6:	e034      	b.n	8004c52 <UART_SetConfig+0x212>
 8004be8:	2304      	movs	r3, #4
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e031      	b.n	8004c52 <UART_SetConfig+0x212>
 8004bee:	2308      	movs	r3, #8
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e02e      	b.n	8004c52 <UART_SetConfig+0x212>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e02b      	b.n	8004c52 <UART_SetConfig+0x212>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <UART_SetConfig+0x28c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d124      	bne.n	8004c4e <UART_SetConfig+0x20e>
 8004c04:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <UART_SetConfig+0x27c>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004c0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c10:	d011      	beq.n	8004c36 <UART_SetConfig+0x1f6>
 8004c12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c16:	d817      	bhi.n	8004c48 <UART_SetConfig+0x208>
 8004c18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c1c:	d011      	beq.n	8004c42 <UART_SetConfig+0x202>
 8004c1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c22:	d811      	bhi.n	8004c48 <UART_SetConfig+0x208>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <UART_SetConfig+0x1f0>
 8004c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2c:	d006      	beq.n	8004c3c <UART_SetConfig+0x1fc>
 8004c2e:	e00b      	b.n	8004c48 <UART_SetConfig+0x208>
 8004c30:	2300      	movs	r3, #0
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e00d      	b.n	8004c52 <UART_SetConfig+0x212>
 8004c36:	2302      	movs	r3, #2
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e00a      	b.n	8004c52 <UART_SetConfig+0x212>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e007      	b.n	8004c52 <UART_SetConfig+0x212>
 8004c42:	2308      	movs	r3, #8
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e004      	b.n	8004c52 <UART_SetConfig+0x212>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e001      	b.n	8004c52 <UART_SetConfig+0x212>
 8004c4e:	2310      	movs	r3, #16
 8004c50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5a:	d16c      	bne.n	8004d36 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8004c5c:	7ffb      	ldrb	r3, [r7, #31]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d838      	bhi.n	8004cd4 <UART_SetConfig+0x294>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x228>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004cd5 	.word	0x08004cd5
 8004c78:	08004ca3 	.word	0x08004ca3
 8004c7c:	08004cd5 	.word	0x08004cd5
 8004c80:	08004cd5 	.word	0x08004cd5
 8004c84:	08004cd5 	.word	0x08004cd5
 8004c88:	08004cab 	.word	0x08004cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f7fe ffe2 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8004c90:	61b8      	str	r0, [r7, #24]
        break;
 8004c92:	e024      	b.n	8004cde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c94:	f7ff f800 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 8004c98:	61b8      	str	r0, [r7, #24]
        break;
 8004c9a:	e020      	b.n	8004cde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <UART_SetConfig+0x290>)
 8004c9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ca0:	e01d      	b.n	8004cde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca2:	f7fe ff61 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8004ca6:	61b8      	str	r0, [r7, #24]
        break;
 8004ca8:	e019      	b.n	8004cde <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cae:	61bb      	str	r3, [r7, #24]
        break;
 8004cb0:	e015      	b.n	8004cde <UART_SetConfig+0x29e>
 8004cb2:	bf00      	nop
 8004cb4:	efff69f3 	.word	0xefff69f3
 8004cb8:	40013800 	.word	0x40013800
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40004400 	.word	0x40004400
 8004cc4:	40004800 	.word	0x40004800
 8004cc8:	40004c00 	.word	0x40004c00
 8004ccc:	40005000 	.word	0x40005000
 8004cd0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	77bb      	strb	r3, [r7, #30]
        break;
 8004cdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d075      	beq.n	8004dd0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	005a      	lsls	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	441a      	add	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	d916      	bls.n	8004d30 <UART_SetConfig+0x2f0>
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d08:	d212      	bcs.n	8004d30 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f023 030f 	bic.w	r3, r3, #15
 8004d12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	89fb      	ldrh	r3, [r7, #14]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	89fa      	ldrh	r2, [r7, #14]
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	e04f      	b.n	8004dd0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	77bb      	strb	r3, [r7, #30]
 8004d34:	e04c      	b.n	8004dd0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d828      	bhi.n	8004d8e <UART_SetConfig+0x34e>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x304>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	08004d79 	.word	0x08004d79
 8004d50:	08004d8f 	.word	0x08004d8f
 8004d54:	08004d7f 	.word	0x08004d7f
 8004d58:	08004d8f 	.word	0x08004d8f
 8004d5c:	08004d8f 	.word	0x08004d8f
 8004d60:	08004d8f 	.word	0x08004d8f
 8004d64:	08004d87 	.word	0x08004d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d68:	f7fe ff74 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8004d6c:	61b8      	str	r0, [r7, #24]
        break;
 8004d6e:	e013      	b.n	8004d98 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7fe ff92 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 8004d74:	61b8      	str	r0, [r7, #24]
        break;
 8004d76:	e00f      	b.n	8004d98 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <UART_SetConfig+0x3a8>)
 8004d7a:	61bb      	str	r3, [r7, #24]
        break;
 8004d7c:	e00c      	b.n	8004d98 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7e:	f7fe fef3 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8004d82:	61b8      	str	r0, [r7, #24]
        break;
 8004d84:	e008      	b.n	8004d98 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8a:	61bb      	str	r3, [r7, #24]
        break;
 8004d8c:	e004      	b.n	8004d98 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	77bb      	strb	r3, [r7, #30]
        break;
 8004d96:	bf00      	nop
    }

    if (pclk != 0U)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d018      	beq.n	8004dd0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	085a      	lsrs	r2, r3, #1
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	441a      	add	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d908      	bls.n	8004dcc <UART_SetConfig+0x38c>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d204      	bcs.n	8004dcc <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	60da      	str	r2, [r3, #12]
 8004dca:	e001      	b.n	8004dd0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ddc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	007a1200 	.word	0x007a1200

08004dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d01a      	beq.n	8004f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eea:	d10a      	bne.n	8004f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	605a      	str	r2, [r3, #4]
  }
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f40:	f7fc fcfa 	bl	8001938 <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d10e      	bne.n	8004f72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f82d 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e023      	b.n	8004fba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d10e      	bne.n	8004f9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f817 	bl	8004fc2 <UART_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e00d      	b.n	8004fba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b09c      	sub	sp, #112	; 0x70
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd2:	e0a5      	b.n	8005120 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	f000 80a1 	beq.w	8005120 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fc fcab 	bl	8001938 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d13e      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005008:	667b      	str	r3, [r7, #100]	; 0x64
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005012:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005014:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005018:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e6      	bne.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3308      	adds	r3, #8
 800502c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	663b      	str	r3, [r7, #96]	; 0x60
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3308      	adds	r3, #8
 8005044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005046:	64ba      	str	r2, [r7, #72]	; 0x48
 8005048:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800504c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e5      	bne.n	8005026 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e067      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d04f      	beq.n	8005120 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508e:	d147      	bne.n	8005120 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005098:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e6      	bne.n	800509a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	613b      	str	r3, [r7, #16]
   return(result);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050ec:	623a      	str	r2, [r7, #32]
 80050ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69f9      	ldr	r1, [r7, #28]
 80050f2:	6a3a      	ldr	r2, [r7, #32]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e010      	b.n	8005142 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69da      	ldr	r2, [r3, #28]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4013      	ands	r3, r2
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	429a      	cmp	r2, r3
 800513c:	f43f af4a 	beq.w	8004fd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3770      	adds	r7, #112	; 0x70
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005150:	4904      	ldr	r1, [pc, #16]	; (8005164 <MX_FATFS_Init+0x18>)
 8005152:	4805      	ldr	r0, [pc, #20]	; (8005168 <MX_FATFS_Init+0x1c>)
 8005154:	f003 fab6 	bl	80086c4 <FATFS_LinkDriver>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	4b03      	ldr	r3, [pc, #12]	; (800516c <MX_FATFS_Init+0x20>)
 800515e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005160:	bf00      	nop
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000498 	.word	0x20000498
 8005168:	20000014 	.word	0x20000014
 800516c:	20000494 	.word	0x20000494

08005170 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005174:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005176:	4618      	mov	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <USER_initialize+0x24>)
 800518c:	2201      	movs	r2, #1
 800518e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <USER_initialize+0x24>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000011 	.word	0x20000011

080051a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80051b2:	4b06      	ldr	r3, [pc, #24]	; (80051cc <USER_status+0x24>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80051b8:	4b04      	ldr	r3, [pc, #16]	; (80051cc <USER_status+0x24>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20000011 	.word	0x20000011

080051d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80051e0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80051fe:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	603a      	str	r2, [r7, #0]
 8005216:	71fb      	strb	r3, [r7, #7]
 8005218:	460b      	mov	r3, r1
 800521a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]
    return res;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	4a08      	ldr	r2, [pc, #32]	; (8005260 <disk_status+0x30>)
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	79fa      	ldrb	r2, [r7, #7]
 8005248:	4905      	ldr	r1, [pc, #20]	; (8005260 <disk_status+0x30>)
 800524a:	440a      	add	r2, r1
 800524c:	7a12      	ldrb	r2, [r2, #8]
 800524e:	4610      	mov	r0, r2
 8005250:	4798      	blx	r3
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005256:	7bfb      	ldrb	r3, [r7, #15]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	200004bc 	.word	0x200004bc

08005264 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <disk_initialize+0x48>)
 8005276:	5cd3      	ldrb	r3, [r2, r3]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d111      	bne.n	80052a0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <disk_initialize+0x48>)
 8005280:	2101      	movs	r1, #1
 8005282:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	4a09      	ldr	r2, [pc, #36]	; (80052ac <disk_initialize+0x48>)
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	79fa      	ldrb	r2, [r7, #7]
 8005292:	4906      	ldr	r1, [pc, #24]	; (80052ac <disk_initialize+0x48>)
 8005294:	440a      	add	r2, r1
 8005296:	7a12      	ldrb	r2, [r2, #8]
 8005298:	4610      	mov	r0, r2
 800529a:	4798      	blx	r3
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	200004bc 	.word	0x200004bc

080052b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80052b0:	b590      	push	{r4, r7, lr}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4603      	mov	r3, r0
 80052be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <disk_read+0x3c>)
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	689c      	ldr	r4, [r3, #8]
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	4a07      	ldr	r2, [pc, #28]	; (80052ec <disk_read+0x3c>)
 80052d0:	4413      	add	r3, r2
 80052d2:	7a18      	ldrb	r0, [r3, #8]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	47a0      	blx	r4
 80052dc:	4603      	mov	r3, r0
 80052de:	75fb      	strb	r3, [r7, #23]
  return res;
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200004bc 	.word	0x200004bc

080052f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4603      	mov	r3, r0
 80052fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	4a0a      	ldr	r2, [pc, #40]	; (800532c <disk_write+0x3c>)
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68dc      	ldr	r4, [r3, #12]
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	4a07      	ldr	r2, [pc, #28]	; (800532c <disk_write+0x3c>)
 8005310:	4413      	add	r3, r2
 8005312:	7a18      	ldrb	r0, [r3, #8]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	47a0      	blx	r4
 800531c:	4603      	mov	r3, r0
 800531e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
}
 8005322:	4618      	mov	r0, r3
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bd90      	pop	{r4, r7, pc}
 800532a:	bf00      	nop
 800532c:	200004bc 	.word	0x200004bc

08005330 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	603a      	str	r2, [r7, #0]
 800533a:	71fb      	strb	r3, [r7, #7]
 800533c:	460b      	mov	r3, r1
 800533e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <disk_ioctl+0x38>)
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	79fa      	ldrb	r2, [r7, #7]
 800534e:	4906      	ldr	r1, [pc, #24]	; (8005368 <disk_ioctl+0x38>)
 8005350:	440a      	add	r2, r1
 8005352:	7a10      	ldrb	r0, [r2, #8]
 8005354:	79b9      	ldrb	r1, [r7, #6]
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	4798      	blx	r3
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]
  return res;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	200004bc 	.word	0x200004bc

0800536c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005380:	e007      	b.n	8005392 <mem_cpy+0x26>
		*d++ = *s++;
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	1c53      	adds	r3, r2, #1
 8005386:	613b      	str	r3, [r7, #16]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	6179      	str	r1, [r7, #20]
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	1e5a      	subs	r2, r3, #1
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1f2      	bne.n	8005382 <mem_cpy+0x16>
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80053aa:	b480      	push	{r7}
 80053ac:	b087      	sub	sp, #28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80053ba:	e005      	b.n	80053c8 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	617a      	str	r2, [r7, #20]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f4      	bne.n	80053bc <mem_set+0x12>
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80053e0:	b480      	push	{r7}
 80053e2:	b089      	sub	sp, #36	; 0x24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80053f8:	bf00      	nop
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	1e5a      	subs	r2, r3, #1
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <mem_cmp+0x40>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	61fa      	str	r2, [r7, #28]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	4619      	mov	r1, r3
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	61ba      	str	r2, [r7, #24]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	1acb      	subs	r3, r1, r3
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ec      	beq.n	80053fa <mem_cmp+0x1a>
	return r;
 8005420:	697b      	ldr	r3, [r7, #20]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3724      	adds	r7, #36	; 0x24
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005438:	e002      	b.n	8005440 <chk_chr+0x12>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3301      	adds	r3, #1
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <chk_chr+0x26>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	4293      	cmp	r3, r2
 8005452:	d1f2      	bne.n	800543a <chk_chr+0xc>
	return *str;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	781b      	ldrb	r3, [r3, #0]
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005472:	4618      	mov	r0, r3
 8005474:	f003 f961 	bl	800873a <ff_req_grant>
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d011      	beq.n	80054b8 <unlock_fs+0x36>
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d00e      	beq.n	80054b8 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	2b0b      	cmp	r3, #11
 800549e:	d00b      	beq.n	80054b8 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	2b09      	cmp	r3, #9
 80054a4:	d008      	beq.n	80054b8 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	2b0f      	cmp	r3, #15
 80054aa:	d005      	beq.n	80054b8 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80054b2:	4618      	mov	r0, r3
 80054b4:	f003 f956 	bl	8008764 <ff_rel_grant>
	}
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e038      	b.n	8005546 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80054d4:	4930      	ldr	r1, [pc, #192]	; (8005598 <chk_lock+0xd8>)
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4613      	mov	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d029      	beq.n	800553c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80054e8:	492b      	ldr	r1, [pc, #172]	; (8005598 <chk_lock+0xd8>)
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4613      	mov	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054fe:	429a      	cmp	r2, r3
 8005500:	d11e      	bne.n	8005540 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8005502:	4925      	ldr	r1, [pc, #148]	; (8005598 <chk_lock+0xd8>)
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4613      	mov	r3, r2
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	3304      	adds	r3, #4
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800551a:	429a      	cmp	r2, r3
 800551c:	d110      	bne.n	8005540 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800551e:	491e      	ldr	r1, [pc, #120]	; (8005598 <chk_lock+0xd8>)
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4613      	mov	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	3308      	adds	r3, #8
 800552e:	881a      	ldrh	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8005536:	429a      	cmp	r2, r3
 8005538:	d102      	bne.n	8005540 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800553a:	e007      	b.n	800554c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800553c:	2301      	movs	r3, #1
 800553e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3301      	adds	r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d9c3      	bls.n	80054d4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d109      	bne.n	8005566 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <chk_lock+0x9e>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d101      	bne.n	8005562 <chk_lock+0xa2>
 800555e:	2300      	movs	r3, #0
 8005560:	e013      	b.n	800558a <chk_lock+0xca>
 8005562:	2312      	movs	r3, #18
 8005564:	e011      	b.n	800558a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10b      	bne.n	8005584 <chk_lock+0xc4>
 800556c:	490a      	ldr	r1, [pc, #40]	; (8005598 <chk_lock+0xd8>)
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	330a      	adds	r3, #10
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005582:	d101      	bne.n	8005588 <chk_lock+0xc8>
 8005584:	2310      	movs	r3, #16
 8005586:	e000      	b.n	800558a <chk_lock+0xca>
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	200004a4 	.word	0x200004a4

0800559c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055a2:	2300      	movs	r3, #0
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	e002      	b.n	80055ae <enq_lock+0x12>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3301      	adds	r3, #1
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d809      	bhi.n	80055c8 <enq_lock+0x2c>
 80055b4:	490a      	ldr	r1, [pc, #40]	; (80055e0 <enq_lock+0x44>)
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1ef      	bne.n	80055a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	200004a4 	.word	0x200004a4

080055e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055ee:	2300      	movs	r3, #0
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	e02b      	b.n	800564c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80055f4:	4956      	ldr	r1, [pc, #344]	; (8005750 <inc_lock+0x16c>)
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800560a:	429a      	cmp	r2, r3
 800560c:	d11b      	bne.n	8005646 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800560e:	4950      	ldr	r1, [pc, #320]	; (8005750 <inc_lock+0x16c>)
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	440b      	add	r3, r1
 800561c:	3304      	adds	r3, #4
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8005626:	429a      	cmp	r2, r3
 8005628:	d10d      	bne.n	8005646 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800562a:	4949      	ldr	r1, [pc, #292]	; (8005750 <inc_lock+0x16c>)
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	3308      	adds	r3, #8
 800563a:	881a      	ldrh	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8005642:	429a      	cmp	r2, r3
 8005644:	d006      	beq.n	8005654 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3301      	adds	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d9d0      	bls.n	80055f4 <inc_lock+0x10>
 8005652:	e000      	b.n	8005656 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8005654:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d145      	bne.n	80056e8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e002      	b.n	8005668 <inc_lock+0x84>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d809      	bhi.n	8005682 <inc_lock+0x9e>
 800566e:	4938      	ldr	r1, [pc, #224]	; (8005750 <inc_lock+0x16c>)
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4613      	mov	r3, r2
 8005674:	005b      	lsls	r3, r3, #1
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1ef      	bne.n	8005662 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d101      	bne.n	800568c <inc_lock+0xa8>
 8005688:	2300      	movs	r3, #0
 800568a:	e05a      	b.n	8005742 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005692:	482f      	ldr	r0, [pc, #188]	; (8005750 <inc_lock+0x16c>)
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4613      	mov	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4403      	add	r3, r0
 80056a0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80056a8:	4829      	ldr	r0, [pc, #164]	; (8005750 <inc_lock+0x16c>)
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4613      	mov	r3, r2
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4403      	add	r3, r0
 80056b6:	3304      	adds	r3, #4
 80056b8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80056c0:	4923      	ldr	r1, [pc, #140]	; (8005750 <inc_lock+0x16c>)
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4613      	mov	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	3308      	adds	r3, #8
 80056d0:	4602      	mov	r2, r0
 80056d2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80056d4:	491e      	ldr	r1, [pc, #120]	; (8005750 <inc_lock+0x16c>)
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4613      	mov	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	330a      	adds	r3, #10
 80056e4:	2200      	movs	r2, #0
 80056e6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00c      	beq.n	8005708 <inc_lock+0x124>
 80056ee:	4918      	ldr	r1, [pc, #96]	; (8005750 <inc_lock+0x16c>)
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4613      	mov	r3, r2
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	330a      	adds	r3, #10
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <inc_lock+0x124>
 8005704:	2300      	movs	r3, #0
 8005706:	e01c      	b.n	8005742 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <inc_lock+0x142>
 800570e:	4910      	ldr	r1, [pc, #64]	; (8005750 <inc_lock+0x16c>)
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4613      	mov	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	330a      	adds	r3, #10
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	b299      	uxth	r1, r3
 8005724:	e001      	b.n	800572a <inc_lock+0x146>
 8005726:	f44f 7180 	mov.w	r1, #256	; 0x100
 800572a:	4809      	ldr	r0, [pc, #36]	; (8005750 <inc_lock+0x16c>)
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4613      	mov	r3, r2
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4403      	add	r3, r0
 8005738:	330a      	adds	r3, #10
 800573a:	460a      	mov	r2, r1
 800573c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3301      	adds	r3, #1
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	200004a4 	.word	0x200004a4

08005754 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3b01      	subs	r3, #1
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d82e      	bhi.n	80057c6 <dec_lock+0x72>
		n = Files[i].ctr;
 8005768:	491b      	ldr	r1, [pc, #108]	; (80057d8 <dec_lock+0x84>)
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	330a      	adds	r3, #10
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800577c:	89fb      	ldrh	r3, [r7, #14]
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	d101      	bne.n	8005788 <dec_lock+0x34>
 8005784:	2300      	movs	r3, #0
 8005786:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005788:	89fb      	ldrh	r3, [r7, #14]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <dec_lock+0x40>
 800578e:	89fb      	ldrh	r3, [r7, #14]
 8005790:	3b01      	subs	r3, #1
 8005792:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005794:	4910      	ldr	r1, [pc, #64]	; (80057d8 <dec_lock+0x84>)
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	330a      	adds	r3, #10
 80057a4:	89fa      	ldrh	r2, [r7, #14]
 80057a6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80057a8:	89fb      	ldrh	r3, [r7, #14]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d108      	bne.n	80057c0 <dec_lock+0x6c>
 80057ae:	490a      	ldr	r1, [pc, #40]	; (80057d8 <dec_lock+0x84>)
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	737b      	strb	r3, [r7, #13]
 80057c4:	e001      	b.n	80057ca <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80057c6:	2302      	movs	r3, #2
 80057c8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80057ca:	7b7b      	ldrb	r3, [r7, #13]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	200004a4 	.word	0x200004a4

080057dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	e016      	b.n	8005818 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80057ea:	4910      	ldr	r1, [pc, #64]	; (800582c <clear_lock+0x50>)
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d108      	bne.n	8005812 <clear_lock+0x36>
 8005800:	490a      	ldr	r1, [pc, #40]	; (800582c <clear_lock+0x50>)
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4613      	mov	r3, r2
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3301      	adds	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d9e5      	bls.n	80057ea <clear_lock+0xe>
	}
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	200004a4 	.word	0x200004a4

08005830 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8005842:	2b00      	cmp	r3, #0
 8005844:	d038      	beq.n	80058b8 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800584c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	2301      	movs	r3, #1
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	f7ff fd49 	bl	80052f0 <disk_write>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
 8005868:	e026      	b.n	80058b8 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005882:	429a      	cmp	r2, r3
 8005884:	d218      	bcs.n	80058b8 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	e010      	b.n	80058b2 <sync_window+0x82>
					wsect += fs->fsize;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4413      	add	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	2301      	movs	r3, #1
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	f7ff fd22 	bl	80052f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d8eb      	bhi.n	8005890 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d01b      	beq.n	8005914 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ffa7 	bl	8005830 <sync_window>
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d113      	bne.n	8005914 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	2301      	movs	r3, #1
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	f7ff fcda 	bl	80052b0 <disk_read>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d004      	beq.n	800590c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005902:	f04f 33ff 	mov.w	r3, #4294967295
 8005906:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff82 	bl	8005830 <sync_window>
 800592c:	4603      	mov	r3, r0
 800592e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f040 809b 	bne.w	8005a6e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800593e:	2b03      	cmp	r3, #3
 8005940:	f040 8088 	bne.w	8005a54 <sync_fs+0x136>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800594a:	2b01      	cmp	r3, #1
 800594c:	f040 8082 	bne.w	8005a54 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005956:	2100      	movs	r1, #0
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff fd26 	bl	80053aa <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2255      	movs	r2, #85	; 0x55
 8005962:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	22aa      	movs	r2, #170	; 0xaa
 800596a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2252      	movs	r2, #82	; 0x52
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2252      	movs	r2, #82	; 0x52
 8005978:	705a      	strb	r2, [r3, #1]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2261      	movs	r2, #97	; 0x61
 800597e:	709a      	strb	r2, [r3, #2]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2241      	movs	r2, #65	; 0x41
 8005984:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2272      	movs	r2, #114	; 0x72
 800598a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2272      	movs	r2, #114	; 0x72
 8005992:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2241      	movs	r2, #65	; 0x41
 800599a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2261      	movs	r2, #97	; 0x61
 80059a2:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	b29b      	uxth	r3, r3
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ce:	0c1b      	lsrs	r3, r3, #16
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059de:	0e1b      	lsrs	r3, r3, #24
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a20:	0e1b      	lsrs	r3, r3, #24
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8005a46:	2301      	movs	r3, #1
 8005a48:	f7ff fc52 	bl	80052f0 <disk_write>
			fs->fsi_flag = 0;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fc66 	bl	8005330 <disk_ioctl>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	3b02      	subs	r3, #2
 8005a86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005a8e:	3b02      	subs	r3, #2
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d301      	bcc.n	8005a9a <clust2sect+0x22>
 8005a96:	2300      	movs	r3, #0
 8005a98:	e00a      	b.n	8005ab0 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	fb03 f202 	mul.w	r2, r3, r2
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005aae:	4413      	add	r3, r2
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d905      	bls.n	8005ad8 <get_fat+0x1c>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d302      	bcc.n	8005ade <get_fat+0x22>
		val = 1;	/* Internal error */
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e0a3      	b.n	8005c26 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005ade:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d068      	beq.n	8005bc0 <get_fat+0x104>
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	f300 808f 	bgt.w	8005c12 <get_fat+0x156>
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d002      	beq.n	8005afe <get_fat+0x42>
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d040      	beq.n	8005b7e <get_fat+0xc2>
 8005afc:	e089      	b.n	8005c12 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	085b      	lsrs	r3, r3, #1
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	0a5b      	lsrs	r3, r3, #9
 8005b16:	4413      	add	r3, r2
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fed1 	bl	80058c2 <move_window>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d178      	bne.n	8005c18 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	60fa      	str	r2, [r7, #12]
 8005b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	0a5b      	lsrs	r3, r3, #9
 8005b40:	4413      	add	r3, r2
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff febc 	bl	80058c2 <move_window>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d165      	bne.n	8005c1c <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	5cd3      	ldrb	r3, [r2, r3]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <get_fat+0xb8>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	091b      	lsrs	r3, r3, #4
 8005b72:	e002      	b.n	8005b7a <get_fat+0xbe>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b7a:	617b      	str	r3, [r7, #20]
			break;
 8005b7c:	e053      	b.n	8005c26 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	4413      	add	r3, r2
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff fe98 	bl	80058c2 <move_window>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d143      	bne.n	8005c20 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	b21a      	sxth	r2, r3
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	b21b      	sxth	r3, r3
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	b21b      	sxth	r3, r3
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	617b      	str	r3, [r7, #20]
			break;
 8005bbe:	e032      	b.n	8005c26 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	09db      	lsrs	r3, r3, #7
 8005bca:	4413      	add	r3, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff fe77 	bl	80058c2 <move_window>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d124      	bne.n	8005c24 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	3303      	adds	r3, #3
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	061a      	lsls	r2, r3, #24
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	041b      	lsls	r3, r3, #16
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	3201      	adds	r2, #1
 8005bfe:	7812      	ldrb	r2, [r2, #0]
 8005c00:	0212      	lsls	r2, r2, #8
 8005c02:	4313      	orrs	r3, r2
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c0e:	617b      	str	r3, [r7, #20]
			break;
 8005c10:	e009      	b.n	8005c26 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8005c12:	2301      	movs	r3, #1
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	e006      	b.n	8005c26 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c18:	bf00      	nop
 8005c1a:	e004      	b.n	8005c26 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c1c:	bf00      	nop
 8005c1e:	e002      	b.n	8005c26 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c24:	bf00      	nop
		}
	}

	return val;
 8005c26:	697b      	ldr	r3, [r7, #20]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d905      	bls.n	8005c4e <put_fat+0x1e>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d302      	bcc.n	8005c54 <put_fat+0x24>
		res = FR_INT_ERR;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	77fb      	strb	r3, [r7, #31]
 8005c52:	e0f6      	b.n	8005e42 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	f000 809e 	beq.w	8005d9c <put_fat+0x16c>
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	f300 80e4 	bgt.w	8005e2e <put_fat+0x1fe>
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d002      	beq.n	8005c70 <put_fat+0x40>
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d06f      	beq.n	8005d4e <put_fat+0x11e>
 8005c6e:	e0de      	b.n	8005e2e <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	0a5b      	lsrs	r3, r3, #9
 8005c88:	4413      	add	r3, r2
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7ff fe18 	bl	80058c2 <move_window>
 8005c92:	4603      	mov	r3, r0
 8005c94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c96:	7ffb      	ldrb	r3, [r7, #31]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f040 80cb 	bne.w	8005e34 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	617a      	str	r2, [r7, #20]
 8005ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <put_fat+0xa4>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	b25b      	sxtb	r3, r3
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	b25a      	sxtb	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	b25b      	sxtb	r3, r3
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	b25b      	sxtb	r3, r3
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e001      	b.n	8005cd8 <put_fat+0xa8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	0a5b      	lsrs	r3, r3, #9
 8005cee:	4413      	add	r3, r2
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff fde5 	bl	80058c2 <move_window>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005cfc:	7ffb      	ldrb	r3, [r7, #31]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f040 809a 	bne.w	8005e38 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <put_fat+0xf2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	e00e      	b.n	8005d40 <put_fat+0x110>
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	b25b      	sxtb	r3, r3
 8005d28:	f023 030f 	bic.w	r3, r3, #15
 8005d2c:	b25a      	sxtb	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	b25b      	sxtb	r3, r3
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	b25b      	sxtb	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005d4c:	e079      	b.n	8005e42 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	0a1b      	lsrs	r3, r3, #8
 8005d58:	4413      	add	r3, r2
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7ff fdb0 	bl	80058c2 <move_window>
 8005d62:	4603      	mov	r3, r0
 8005d64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d66:	7ffb      	ldrb	r3, [r7, #31]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d167      	bne.n	8005e3c <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4413      	add	r3, r2
 8005d78:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005d9a:	e052      	b.n	8005e42 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	09db      	lsrs	r3, r3, #7
 8005da6:	4413      	add	r3, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff fd89 	bl	80058c2 <move_window>
 8005db0:	4603      	mov	r3, r0
 8005db2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005db4:	7ffb      	ldrb	r3, [r7, #31]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d142      	bne.n	8005e40 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	3303      	adds	r3, #3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	061a      	lsls	r2, r3, #24
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	3201      	adds	r2, #1
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	0212      	lsls	r2, r2, #8
 8005de2:	4313      	orrs	r3, r2
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	0a1b      	lsrs	r3, r3, #8
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	3301      	adds	r3, #1
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	0c1a      	lsrs	r2, r3, #16
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	3302      	adds	r3, #2
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	0e1a      	lsrs	r2, r3, #24
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	3303      	adds	r3, #3
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005e2c:	e009      	b.n	8005e42 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	77fb      	strb	r3, [r7, #31]
 8005e32:	e006      	b.n	8005e42 <put_fat+0x212>
			if (res != FR_OK) break;
 8005e34:	bf00      	nop
 8005e36:	e004      	b.n	8005e42 <put_fat+0x212>
			if (res != FR_OK) break;
 8005e38:	bf00      	nop
 8005e3a:	e002      	b.n	8005e42 <put_fat+0x212>
			if (res != FR_OK) break;
 8005e3c:	bf00      	nop
 8005e3e:	e000      	b.n	8005e42 <put_fat+0x212>
			if (res != FR_OK) break;
 8005e40:	bf00      	nop
		}
	}

	return res;
 8005e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d905      	bls.n	8005e68 <remove_chain+0x1c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d302      	bcc.n	8005e6e <remove_chain+0x22>
		res = FR_INT_ERR;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e043      	b.n	8005ef6 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005e72:	e036      	b.n	8005ee2 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fe20 	bl	8005abc <get_fat>
 8005e7c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d035      	beq.n	8005ef0 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d102      	bne.n	8005e90 <remove_chain+0x44>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	73fb      	strb	r3, [r7, #15]
 8005e8e:	e032      	b.n	8005ef6 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e96:	d102      	bne.n	8005e9e <remove_chain+0x52>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
 8005e9c:	e02b      	b.n	8005ef6 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fec4 	bl	8005c30 <put_fat>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d120      	bne.n	8005ef4 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebc:	d00f      	beq.n	8005ede <remove_chain+0x92>
				fs->free_clust++;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005ed2:	f043 0301 	orr.w	r3, r3, #1
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d3c2      	bcc.n	8005e74 <remove_chain+0x28>
 8005eee:	e002      	b.n	8005ef6 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005ef0:	bf00      	nop
 8005ef2:	e000      	b.n	8005ef6 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005ef4:	bf00      	nop
		}
	}

	return res;
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10f      	bne.n	8005f30 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f16:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <create_chain+0x2a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d31c      	bcc.n	8005f64 <create_chain+0x64>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	e019      	b.n	8005f64 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005f30:	6839      	ldr	r1, [r7, #0]
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fdc2 	bl	8005abc <get_fat>
 8005f38:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d801      	bhi.n	8005f44 <create_chain+0x44>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e076      	b.n	8006032 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d101      	bne.n	8005f50 <create_chain+0x50>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	e070      	b.n	8006032 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d201      	bcs.n	8005f60 <create_chain+0x60>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	e068      	b.n	8006032 <create_chain+0x132>
		scl = clst;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d307      	bcc.n	8005f8a <create_chain+0x8a>
			ncl = 2;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d901      	bls.n	8005f8a <create_chain+0x8a>
 8005f86:	2300      	movs	r3, #0
 8005f88:	e053      	b.n	8006032 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7ff fd95 	bl	8005abc <get_fat>
 8005f92:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d002      	beq.n	8005fa8 <create_chain+0xa8>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <create_chain+0xac>
			return cs;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	e042      	b.n	8006032 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d1d9      	bne.n	8005f68 <create_chain+0x68>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e03c      	b.n	8006032 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8005fb8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005fba:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005fbe:	6979      	ldr	r1, [r7, #20]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fe35 	bl	8005c30 <put_fat>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <create_chain+0xe4>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fe28 	bl	8005c30 <put_fat>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d11a      	bne.n	8006020 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d018      	beq.n	8006030 <create_chain+0x130>
			fs->free_clust--;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006004:	1e5a      	subs	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800601e:	e007      	b.n	8006030 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d102      	bne.n	800602c <create_chain+0x12c>
 8006026:	f04f 33ff 	mov.w	r3, #4294967295
 800602a:	e000      	b.n	800602e <create_chain+0x12e>
 800602c:	2301      	movs	r3, #1
 800602e:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006030:	697b      	ldr	r3, [r7, #20]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800603a:	b480      	push	{r7}
 800603c:	b087      	sub	sp, #28
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800604a:	3304      	adds	r3, #4
 800604c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	0a5b      	lsrs	r3, r3, #9
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006058:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800605c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006060:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1d1a      	adds	r2, r3, #4
 8006066:	613a      	str	r2, [r7, #16]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <clmt_clust+0x3c>
 8006072:	2300      	movs	r3, #0
 8006074:	e010      	b.n	8006098 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	429a      	cmp	r2, r3
 800607c:	d307      	bcc.n	800608e <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3304      	adds	r3, #4
 800608a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800608c:	e7e9      	b.n	8006062 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800608e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	4413      	add	r3, r2
}
 8006098:	4618      	mov	r0, r3
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80060be:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d007      	beq.n	80060d6 <dir_sdi+0x32>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d301      	bcc.n	80060da <dir_sdi+0x36>
		return FR_INT_ERR;
 80060d6:	2302      	movs	r3, #2
 80060d8:	e074      	b.n	80061c4 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10c      	bne.n	80060fa <dir_sdi+0x56>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d105      	bne.n	80060fa <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060f4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80060f8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d111      	bne.n	8006124 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006106:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800610a:	461a      	mov	r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	4293      	cmp	r3, r2
 8006110:	d301      	bcc.n	8006116 <dir_sdi+0x72>
			return FR_INT_ERR;
 8006112:	2302      	movs	r3, #2
 8006114:	e056      	b.n	80061c4 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800611c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	e032      	b.n	800618a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800612a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8006132:	e01e      	b.n	8006172 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800613a:	6979      	ldr	r1, [r7, #20]
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff fcbd 	bl	8005abc <get_fat>
 8006142:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d101      	bne.n	8006150 <dir_sdi+0xac>
 800614c:	2301      	movs	r3, #1
 800614e:	e039      	b.n	80061c4 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d907      	bls.n	8006166 <dir_sdi+0xc2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800615c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	429a      	cmp	r2, r3
 8006164:	d301      	bcc.n	800616a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8006166:	2302      	movs	r3, #2
 8006168:	e02c      	b.n	80061c4 <dir_sdi+0x120>
			idx -= ic;
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	429a      	cmp	r2, r3
 8006178:	d2dc      	bcs.n	8006134 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006180:	6979      	ldr	r1, [r7, #20]
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fc78 	bl	8005a78 <clust2sect>
 8006188:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <dir_sdi+0xf8>
 8006198:	2302      	movs	r3, #2
 800619a:	e013      	b.n	80061c4 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	091a      	lsrs	r2, r3, #4
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	441a      	add	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061b0:	461a      	mov	r2, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	015b      	lsls	r3, r3, #5
 80061ba:	441a      	add	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80061dc:	3301      	adds	r3, #1
 80061de:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <dir_next+0x26>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <dir_next+0x2a>
		return FR_NO_FILE;
 80061f2:	2304      	movs	r3, #4
 80061f4:	e0dd      	b.n	80063b2 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 80c6 	bne.w	800638e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006220:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006224:	461a      	mov	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4293      	cmp	r3, r2
 800622a:	f0c0 80b0 	bcc.w	800638e <dir_next+0x1c2>
				return FR_NO_FILE;
 800622e:	2304      	movs	r3, #4
 8006230:	e0bf      	b.n	80063b2 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800623c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006240:	3a01      	subs	r2, #1
 8006242:	4013      	ands	r3, r2
 8006244:	2b00      	cmp	r3, #0
 8006246:	f040 80a2 	bne.w	800638e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7ff fc2f 	bl	8005abc <get_fat>
 800625e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d801      	bhi.n	800626a <dir_next+0x9e>
 8006266:	2302      	movs	r3, #2
 8006268:	e0a3      	b.n	80063b2 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d101      	bne.n	8006276 <dir_next+0xaa>
 8006272:	2301      	movs	r3, #1
 8006274:	e09d      	b.n	80063b2 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800627c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	429a      	cmp	r2, r3
 8006284:	d374      	bcc.n	8006370 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <dir_next+0xc4>
 800628c:	2304      	movs	r3, #4
 800628e:	e090      	b.n	80063b2 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7ff fe2e 	bl	8005f00 <create_chain>
 80062a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <dir_next+0xe4>
 80062ac:	2307      	movs	r3, #7
 80062ae:	e080      	b.n	80063b2 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <dir_next+0xee>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e07b      	b.n	80063b2 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d101      	bne.n	80062c6 <dir_next+0xfa>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e075      	b.n	80063b2 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff faaf 	bl	8005830 <sync_window>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <dir_next+0x110>
 80062d8:	2301      	movs	r3, #1
 80062da:	e06a      	b.n	80063b2 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff f85e 	bl	80053aa <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80062fa:	6979      	ldr	r1, [r7, #20]
 80062fc:	4610      	mov	r0, r2
 80062fe:	f7ff fbbb 	bl	8005a78 <clust2sect>
 8006302:	4603      	mov	r3, r0
 8006304:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	e01b      	b.n	8006346 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fa85 	bl	8005830 <sync_window>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <dir_next+0x164>
 800632c:	2301      	movs	r3, #1
 800632e:	e040      	b.n	80063b2 <dir_next+0x1e6>
						dp->fs->winsect++;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006336:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800633a:	3201      	adds	r2, #1
 800633c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	3301      	adds	r3, #1
 8006344:	613b      	str	r3, [r7, #16]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800634c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006350:	461a      	mov	r2, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4293      	cmp	r3, r2
 8006356:	d3da      	bcc.n	800630e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800635e:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	1a8a      	subs	r2, r1, r2
 800636c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800637e:	6979      	ldr	r1, [r7, #20]
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff fb79 	bl	8005a78 <clust2sect>
 8006386:	4602      	mov	r2, r0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	b29a      	uxth	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800639e:	461a      	mov	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	015b      	lsls	r3, r3, #5
 80063a8:	441a      	add	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd90      	pop	{r4, r7, pc}

080063ba <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff fe6c 	bl	80060a4 <dir_sdi>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d131      	bne.n	800643a <dir_alloc+0x80>
		n = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7ff fa6a 	bl	80058c2 <move_window>
 80063ee:	4603      	mov	r3, r0
 80063f0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11f      	bne.n	8006438 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2be5      	cmp	r3, #229	; 0xe5
 8006402:	d005      	beq.n	8006410 <dir_alloc+0x56>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d107      	bne.n	8006420 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	3301      	adds	r3, #1
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d102      	bne.n	8006424 <dir_alloc+0x6a>
 800641e:	e00c      	b.n	800643a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006420:	2300      	movs	r3, #0
 8006422:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8006424:	2101      	movs	r1, #1
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff fed0 	bl	80061cc <dir_next>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0d1      	beq.n	80063da <dir_alloc+0x20>
 8006436:	e000      	b.n	800643a <dir_alloc+0x80>
			if (res != FR_OK) break;
 8006438:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	2b04      	cmp	r3, #4
 800643e:	d101      	bne.n	8006444 <dir_alloc+0x8a>
 8006440:	2307      	movs	r3, #7
 8006442:	73fb      	strb	r3, [r7, #15]
	return res;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800644e:	b480      	push	{r7}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	331b      	adds	r3, #27
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	b21a      	sxth	r2, r3
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	331a      	adds	r3, #26
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	b21b      	sxth	r3, r3
 800646a:	4313      	orrs	r3, r2
 800646c:	b21b      	sxth	r3, r3
 800646e:	b29b      	uxth	r3, r3
 8006470:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006478:	2b03      	cmp	r3, #3
 800647a:	d10f      	bne.n	800649c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	3315      	adds	r3, #21
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	b21a      	sxth	r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	3314      	adds	r3, #20
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	b21b      	sxth	r3, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	b21b      	sxth	r3, r3
 8006492:	b29b      	uxth	r3, r3
 8006494:	041b      	lsls	r3, r3, #16
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

	return cl;
 800649c:	68fb      	ldr	r3, [r7, #12]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	331a      	adds	r3, #26
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	331b      	adds	r3, #27
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	0c1a      	lsrs	r2, r3, #16
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3314      	adds	r3, #20
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	0c1b      	lsrs	r3, r3, #16
 80064de:	b29b      	uxth	r3, r3
 80064e0:	0a1b      	lsrs	r3, r3, #8
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3315      	adds	r3, #21
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006500:	2100      	movs	r1, #0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff fdce 	bl	80060a4 <dir_sdi>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <dir_find+0x1e>
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	e03b      	b.n	800658e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7ff f9cc 	bl	80058c2 <move_window>
 800652a:	4603      	mov	r3, r0
 800652c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d128      	bne.n	8006586 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800653a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <dir_find+0x56>
 8006548:	2304      	movs	r3, #4
 800654a:	75fb      	strb	r3, [r7, #23]
 800654c:	e01e      	b.n	800658c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	330b      	adds	r3, #11
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <dir_find+0x7a>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006562:	220b      	movs	r2, #11
 8006564:	4619      	mov	r1, r3
 8006566:	6938      	ldr	r0, [r7, #16]
 8006568:	f7fe ff3a 	bl	80053e0 <mem_cmp>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006572:	2100      	movs	r1, #0
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff fe29 	bl	80061cc <dir_next>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0c8      	beq.n	8006516 <dir_find+0x1e>
 8006584:	e002      	b.n	800658c <dir_find+0x94>
		if (res != FR_OK) break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <dir_find+0x94>
			break;
 800658a:	bf00      	nop

	return res;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800659e:	2101      	movs	r1, #1
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff ff0a 	bl	80063ba <dir_alloc>
 80065a6:	4603      	mov	r3, r0
 80065a8:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d126      	bne.n	80065fe <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f7ff f97f 	bl	80058c2 <move_window>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d117      	bne.n	80065fe <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065d4:	2220      	movs	r2, #32
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fee6 	bl	80053aa <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065ea:	220b      	movs	r2, #11
 80065ec:	4619      	mov	r1, r3
 80065ee:	f7fe febd 	bl	800536c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e002      	b.n	8006620 <create_name+0x18>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b2f      	cmp	r3, #47	; 0x2f
 8006626:	d0f8      	beq.n	800661a <create_name+0x12>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b5c      	cmp	r3, #92	; 0x5c
 800662e:	d0f4      	beq.n	800661a <create_name+0x12>
	sfn = dp->fn;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006636:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006638:	220b      	movs	r2, #11
 800663a:	2120      	movs	r1, #32
 800663c:	68b8      	ldr	r0, [r7, #8]
 800663e:	f7fe feb4 	bl	80053aa <mem_set>
	si = i = b = 0; ni = 8;
 8006642:	2300      	movs	r3, #0
 8006644:	77fb      	strb	r3, [r7, #31]
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	2308      	movs	r3, #8
 8006650:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	617a      	str	r2, [r7, #20]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8006660:	7fbb      	ldrb	r3, [r7, #30]
 8006662:	2b20      	cmp	r3, #32
 8006664:	d953      	bls.n	800670e <create_name+0x106>
 8006666:	7fbb      	ldrb	r3, [r7, #30]
 8006668:	2b2f      	cmp	r3, #47	; 0x2f
 800666a:	d050      	beq.n	800670e <create_name+0x106>
 800666c:	7fbb      	ldrb	r3, [r7, #30]
 800666e:	2b5c      	cmp	r3, #92	; 0x5c
 8006670:	d04d      	beq.n	800670e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8006672:	7fbb      	ldrb	r3, [r7, #30]
 8006674:	2b2e      	cmp	r3, #46	; 0x2e
 8006676:	d003      	beq.n	8006680 <create_name+0x78>
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	429a      	cmp	r2, r3
 800667e:	d30f      	bcc.n	80066a0 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b08      	cmp	r3, #8
 8006684:	d102      	bne.n	800668c <create_name+0x84>
 8006686:	7fbb      	ldrb	r3, [r7, #30]
 8006688:	2b2e      	cmp	r3, #46	; 0x2e
 800668a:	d001      	beq.n	8006690 <create_name+0x88>
 800668c:	2306      	movs	r3, #6
 800668e:	e073      	b.n	8006778 <create_name+0x170>
			i = 8; ni = 11;
 8006690:	2308      	movs	r3, #8
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	230b      	movs	r3, #11
 8006696:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006698:	7ffb      	ldrb	r3, [r7, #31]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e035      	b.n	800670c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80066a0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	da08      	bge.n	80066ba <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80066a8:	7ffb      	ldrb	r3, [r7, #31]
 80066aa:	f043 0303 	orr.w	r3, r3, #3
 80066ae:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80066b0:	7fbb      	ldrb	r3, [r7, #30]
 80066b2:	3b80      	subs	r3, #128	; 0x80
 80066b4:	4a32      	ldr	r2, [pc, #200]	; (8006780 <create_name+0x178>)
 80066b6:	5cd3      	ldrb	r3, [r2, r3]
 80066b8:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80066ba:	7fbb      	ldrb	r3, [r7, #30]
 80066bc:	4619      	mov	r1, r3
 80066be:	4831      	ldr	r0, [pc, #196]	; (8006784 <create_name+0x17c>)
 80066c0:	f7fe feb5 	bl	800542e <chk_chr>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <create_name+0xc6>
				return FR_INVALID_NAME;
 80066ca:	2306      	movs	r3, #6
 80066cc:	e054      	b.n	8006778 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80066ce:	7fbb      	ldrb	r3, [r7, #30]
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d907      	bls.n	80066e4 <create_name+0xdc>
 80066d4:	7fbb      	ldrb	r3, [r7, #30]
 80066d6:	2b5a      	cmp	r3, #90	; 0x5a
 80066d8:	d804      	bhi.n	80066e4 <create_name+0xdc>
				b |= 2;
 80066da:	7ffb      	ldrb	r3, [r7, #31]
 80066dc:	f043 0302 	orr.w	r3, r3, #2
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e00c      	b.n	80066fe <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80066e4:	7fbb      	ldrb	r3, [r7, #30]
 80066e6:	2b60      	cmp	r3, #96	; 0x60
 80066e8:	d909      	bls.n	80066fe <create_name+0xf6>
 80066ea:	7fbb      	ldrb	r3, [r7, #30]
 80066ec:	2b7a      	cmp	r3, #122	; 0x7a
 80066ee:	d806      	bhi.n	80066fe <create_name+0xf6>
					b |= 1; c -= 0x20;
 80066f0:	7ffb      	ldrb	r3, [r7, #31]
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	77fb      	strb	r3, [r7, #31]
 80066f8:	7fbb      	ldrb	r3, [r7, #30]
 80066fa:	3b20      	subs	r3, #32
 80066fc:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	613a      	str	r2, [r7, #16]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	4413      	add	r3, r2
 8006708:	7fba      	ldrb	r2, [r7, #30]
 800670a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800670c:	e7a1      	b.n	8006652 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	441a      	add	r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006718:	7fbb      	ldrb	r3, [r7, #30]
 800671a:	2b20      	cmp	r3, #32
 800671c:	d801      	bhi.n	8006722 <create_name+0x11a>
 800671e:	2304      	movs	r3, #4
 8006720:	e000      	b.n	8006724 <create_name+0x11c>
 8006722:	2300      	movs	r3, #0
 8006724:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <create_name+0x128>
 800672c:	2306      	movs	r3, #6
 800672e:	e023      	b.n	8006778 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2be5      	cmp	r3, #229	; 0xe5
 8006736:	d102      	bne.n	800673e <create_name+0x136>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2205      	movs	r2, #5
 800673c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b08      	cmp	r3, #8
 8006742:	d102      	bne.n	800674a <create_name+0x142>
 8006744:	7ffb      	ldrb	r3, [r7, #31]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800674a:	7ffb      	ldrb	r3, [r7, #31]
 800674c:	f003 0303 	and.w	r3, r3, #3
 8006750:	2b01      	cmp	r3, #1
 8006752:	d103      	bne.n	800675c <create_name+0x154>
 8006754:	7fbb      	ldrb	r3, [r7, #30]
 8006756:	f043 0310 	orr.w	r3, r3, #16
 800675a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800675c:	7ffb      	ldrb	r3, [r7, #31]
 800675e:	f003 030c 	and.w	r3, r3, #12
 8006762:	2b04      	cmp	r3, #4
 8006764:	d103      	bne.n	800676e <create_name+0x166>
 8006766:	7fbb      	ldrb	r3, [r7, #30]
 8006768:	f043 0308 	orr.w	r3, r3, #8
 800676c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	330b      	adds	r3, #11
 8006772:	7fba      	ldrb	r2, [r7, #30]
 8006774:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006776:	2300      	movs	r3, #0
#endif
}
 8006778:	4618      	mov	r0, r3
 800677a:	3720      	adds	r7, #32
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	0800c3c0 	.word	0x0800c3c0
 8006784:	0800c33c 	.word	0x0800c33c

08006788 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b2f      	cmp	r3, #47	; 0x2f
 8006798:	d003      	beq.n	80067a2 <follow_path+0x1a>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b5c      	cmp	r3, #92	; 0x5c
 80067a0:	d102      	bne.n	80067a8 <follow_path+0x20>
		path++;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b1f      	cmp	r3, #31
 80067b6:	d80a      	bhi.n	80067ce <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff fc72 	bl	80060a4 <dir_sdi>
 80067c0:	4603      	mov	r3, r0
 80067c2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80067cc:	e045      	b.n	800685a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067ce:	463b      	mov	r3, r7
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff ff18 	bl	8006608 <create_name>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d136      	bne.n	8006850 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7ff fe88 	bl	80064f8 <dir_find>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80067f2:	7adb      	ldrb	r3, [r3, #11]
 80067f4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d128      	bne.n	8006854 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d123      	bne.n	8006854 <follow_path+0xcc>
 800680c:	2305      	movs	r3, #5
 800680e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006810:	e020      	b.n	8006854 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11d      	bne.n	8006858 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006822:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	330b      	adds	r3, #11
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f003 0310 	and.w	r3, r3, #16
 800682e:	2b00      	cmp	r3, #0
 8006830:	d102      	bne.n	8006838 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006832:	2305      	movs	r3, #5
 8006834:	73fb      	strb	r3, [r7, #15]
 8006836:	e010      	b.n	800685a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fe04 	bl	800644e <ld_clust>
 8006846:	4602      	mov	r2, r0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800684e:	e7be      	b.n	80067ce <follow_path+0x46>
			if (res != FR_OK) break;
 8006850:	bf00      	nop
 8006852:	e002      	b.n	800685a <follow_path+0xd2>
				break;
 8006854:	bf00      	nop
 8006856:	e000      	b.n	800685a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006858:	bf00      	nop
		}
	}

	return res;
 800685a:	7bfb      	ldrb	r3, [r7, #15]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800686c:	f04f 33ff 	mov.w	r3, #4294967295
 8006870:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d031      	beq.n	80068de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	617b      	str	r3, [r7, #20]
 8006880:	e002      	b.n	8006888 <get_ldnumber+0x24>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	3301      	adds	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b20      	cmp	r3, #32
 800688e:	d903      	bls.n	8006898 <get_ldnumber+0x34>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b3a      	cmp	r3, #58	; 0x3a
 8006896:	d1f4      	bne.n	8006882 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b3a      	cmp	r3, #58	; 0x3a
 800689e:	d11c      	bne.n	80068da <get_ldnumber+0x76>
			tp = *path;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	60fa      	str	r2, [r7, #12]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	3b30      	subs	r3, #48	; 0x30
 80068b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	2b09      	cmp	r3, #9
 80068b6:	d80e      	bhi.n	80068d6 <get_ldnumber+0x72>
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d10a      	bne.n	80068d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d107      	bne.n	80068d6 <get_ldnumber+0x72>
					vol = (int)i;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	3301      	adds	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	e002      	b.n	80068e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80068da:	2300      	movs	r3, #0
 80068dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80068de:	693b      	ldr	r3, [r7, #16]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	371c      	adds	r7, #28
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f04f 32ff 	mov.w	r2, #4294967295
 8006904:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fe ffd9 	bl	80058c2 <move_window>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <check_fs+0x2e>
		return 3;
 8006916:	2303      	movs	r3, #3
 8006918:	e04a      	b.n	80069b0 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006920:	3301      	adds	r3, #1
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	b21a      	sxth	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800692e:	b21b      	sxth	r3, r3
 8006930:	4313      	orrs	r3, r2
 8006932:	b21b      	sxth	r3, r3
 8006934:	4a20      	ldr	r2, [pc, #128]	; (80069b8 <check_fs+0xcc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d001      	beq.n	800693e <check_fs+0x52>
		return 2;
 800693a:	2302      	movs	r3, #2
 800693c:	e038      	b.n	80069b0 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3336      	adds	r3, #54	; 0x36
 8006942:	3303      	adds	r3, #3
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	061a      	lsls	r2, r3, #24
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3336      	adds	r3, #54	; 0x36
 800694c:	3302      	adds	r3, #2
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	4313      	orrs	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	3236      	adds	r2, #54	; 0x36
 8006958:	3201      	adds	r2, #1
 800695a:	7812      	ldrb	r2, [r2, #0]
 800695c:	0212      	lsls	r2, r2, #8
 800695e:	4313      	orrs	r3, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006966:	4313      	orrs	r3, r2
 8006968:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800696c:	4a13      	ldr	r2, [pc, #76]	; (80069bc <check_fs+0xd0>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <check_fs+0x8a>
		return 0;
 8006972:	2300      	movs	r3, #0
 8006974:	e01c      	b.n	80069b0 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3352      	adds	r3, #82	; 0x52
 800697a:	3303      	adds	r3, #3
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	061a      	lsls	r2, r3, #24
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3352      	adds	r3, #82	; 0x52
 8006984:	3302      	adds	r3, #2
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	4313      	orrs	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	3252      	adds	r2, #82	; 0x52
 8006990:	3201      	adds	r2, #1
 8006992:	7812      	ldrb	r2, [r2, #0]
 8006994:	0212      	lsls	r2, r2, #8
 8006996:	4313      	orrs	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800699e:	4313      	orrs	r3, r2
 80069a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069a4:	4a05      	ldr	r2, [pc, #20]	; (80069bc <check_fs+0xd0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d101      	bne.n	80069ae <check_fs+0xc2>
		return 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e000      	b.n	80069b0 <check_fs+0xc4>

	return 1;
 80069ae:	2301      	movs	r3, #1
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	ffffaa55 	.word	0xffffaa55
 80069bc:	00544146 	.word	0x00544146

080069c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b096      	sub	sp, #88	; 0x58
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	4613      	mov	r3, r2
 80069cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80069d4:	68b8      	ldr	r0, [r7, #8]
 80069d6:	f7ff ff45 	bl	8006864 <get_ldnumber>
 80069da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	da01      	bge.n	80069e6 <find_volume+0x26>
 80069e2:	230b      	movs	r3, #11
 80069e4:	e2b0      	b.n	8006f48 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80069e6:	4aa1      	ldr	r2, [pc, #644]	; (8006c6c <find_volume+0x2ac>)
 80069e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <find_volume+0x3a>
 80069f6:	230c      	movs	r3, #12
 80069f8:	e2a6      	b.n	8006f48 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 80069fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069fc:	f7fe fd32 	bl	8005464 <lock_fs>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <find_volume+0x4a>
 8006a06:	230f      	movs	r3, #15
 8006a08:	e29e      	b.n	8006f48 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a0e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01b      	beq.n	8006a52 <find_volume+0x92>
		stat = disk_status(fs->drv);
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fe fc05 	bl	8005230 <disk_status>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10c      	bne.n	8006a52 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <find_volume+0x8e>
 8006a3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d001      	beq.n	8006a4e <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 8006a4a:	230a      	movs	r3, #10
 8006a4c:	e27c      	b.n	8006f48 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e27a      	b.n	8006f48 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a66:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fe fbfa 	bl	8005264 <disk_initialize>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a82:	2303      	movs	r3, #3
 8006a84:	e260      	b.n	8006f48 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <find_volume+0xdc>
 8006a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8006a98:	230a      	movs	r3, #10
 8006a9a:	e255      	b.n	8006f48 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006aa0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006aa2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006aa4:	f7ff ff22 	bl	80068ec <check_fs>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006aae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d153      	bne.n	8006b5e <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aba:	e028      	b.n	8006b0e <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006abc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006ac6:	4413      	add	r3, r2
 8006ac8:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	3304      	adds	r3, #4
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d012      	beq.n	8006afa <find_volume+0x13a>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	330b      	adds	r3, #11
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	061a      	lsls	r2, r3, #24
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	330a      	adds	r3, #10
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	041b      	lsls	r3, r3, #16
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae8:	3209      	adds	r2, #9
 8006aea:	7812      	ldrb	r2, [r2, #0]
 8006aec:	0212      	lsls	r2, r2, #8
 8006aee:	4313      	orrs	r3, r2
 8006af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af2:	3208      	adds	r2, #8
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	e000      	b.n	8006afc <find_volume+0x13c>
 8006afa:	2200      	movs	r2, #0
 8006afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	3358      	adds	r3, #88	; 0x58
 8006b02:	443b      	add	r3, r7
 8006b04:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d9d3      	bls.n	8006abc <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006b14:	2300      	movs	r3, #0
 8006b16:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <find_volume+0x164>
 8006b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b20:	3b01      	subs	r3, #1
 8006b22:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	3358      	adds	r3, #88	; 0x58
 8006b2a:	443b      	add	r3, r7
 8006b2c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b30:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d005      	beq.n	8006b44 <find_volume+0x184>
 8006b38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b3c:	f7ff fed6 	bl	80068ec <check_fs>
 8006b40:	4603      	mov	r3, r0
 8006b42:	e000      	b.n	8006b46 <find_volume+0x186>
 8006b44:	2302      	movs	r3, #2
 8006b46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006b4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <find_volume+0x19e>
 8006b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b54:	3301      	adds	r3, #1
 8006b56:	643b      	str	r3, [r7, #64]	; 0x40
 8006b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d9e2      	bls.n	8006b24 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d101      	bne.n	8006b6a <find_volume+0x1aa>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e1ee      	b.n	8006f48 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006b6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <find_volume+0x1b6>
 8006b72:	230d      	movs	r3, #13
 8006b74:	e1e8      	b.n	8006f48 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	7b1b      	ldrb	r3, [r3, #12]
 8006b7a:	021b      	lsls	r3, r3, #8
 8006b7c:	b21a      	sxth	r2, r3
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	7adb      	ldrb	r3, [r3, #11]
 8006b82:	b21b      	sxth	r3, r3
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b21b      	sxth	r3, r3
 8006b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b8c:	d001      	beq.n	8006b92 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 8006b8e:	230d      	movs	r3, #13
 8006b90:	e1da      	b.n	8006f48 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	7ddb      	ldrb	r3, [r3, #23]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	b21a      	sxth	r2, r3
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	7d9b      	ldrb	r3, [r3, #22]
 8006b9e:	b21b      	sxth	r3, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b21b      	sxth	r3, r3
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d112      	bne.n	8006bd4 <find_volume+0x214>
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006bb4:	061a      	lsls	r2, r3, #24
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006bc6:	0212      	lsls	r2, r2, #8
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bcc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bd8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	7c1a      	ldrb	r2, [r3, #16]
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d006      	beq.n	8006bfe <find_volume+0x23e>
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d001      	beq.n	8006bfe <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 8006bfa:	230d      	movs	r3, #13
 8006bfc:	e1a4      	b.n	8006f48 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006c04:	461a      	mov	r2, r3
 8006c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c08:	fb02 f303 	mul.w	r3, r2, r3
 8006c0c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	7b5a      	ldrb	r2, [r3, #13]
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <find_volume+0x278>
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006c30:	3b01      	subs	r3, #1
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 8006c38:	230d      	movs	r3, #13
 8006c3a:	e185      	b.n	8006f48 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	7c9b      	ldrb	r3, [r3, #18]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	b21a      	sxth	r2, r3
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	7c5b      	ldrb	r3, [r3, #17]
 8006c48:	b21b      	sxth	r3, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b21b      	sxth	r3, r3
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d004      	beq.n	8006c70 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 8006c66:	230d      	movs	r3, #13
 8006c68:	e16e      	b.n	8006f48 <find_volume+0x588>
 8006c6a:	bf00      	nop
 8006c6c:	2000049c 	.word	0x2000049c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	7d1b      	ldrb	r3, [r3, #20]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	b21a      	sxth	r2, r3
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	7cdb      	ldrb	r3, [r3, #19]
 8006c7c:	b21b      	sxth	r3, r3
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	b21b      	sxth	r3, r3
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d112      	bne.n	8006cb2 <find_volume+0x2f2>
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006c92:	061a      	lsls	r2, r3, #24
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ca0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006ca4:	0212      	lsls	r2, r2, #8
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006caa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	7bdb      	ldrb	r3, [r3, #15]
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	b21a      	sxth	r2, r3
 8006cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cbc:	7b9b      	ldrb	r3, [r3, #14]
 8006cbe:	b21b      	sxth	r3, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	b21b      	sxth	r3, r3
 8006cc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <find_volume+0x310>
 8006ccc:	230d      	movs	r3, #13
 8006cce:	e13b      	b.n	8006f48 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006cd0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd4:	4413      	add	r3, r2
 8006cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cd8:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006cdc:	0912      	lsrs	r2, r2, #4
 8006cde:	b292      	uxth	r2, r2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d201      	bcs.n	8006cf0 <find_volume+0x330>
 8006cec:	230d      	movs	r3, #13
 8006cee:	e12b      	b.n	8006f48 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006cf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <find_volume+0x34c>
 8006d08:	230d      	movs	r3, #13
 8006d0a:	e11d      	b.n	8006f48 <find_volume+0x588>
	fmt = FS_FAT12;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d902      	bls.n	8006d22 <find_volume+0x362>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d902      	bls.n	8006d32 <find_volume+0x372>
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	1c9a      	adds	r2, r3, #2
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d40:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006d44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d48:	441a      	add	r2, r3
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8006d50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	441a      	add	r2, r3
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8006d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d121      	bne.n	8006da8 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <find_volume+0x3b2>
 8006d6e:	230d      	movs	r3, #13
 8006d70:	e0ea      	b.n	8006f48 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d78:	061a      	lsls	r2, r3, #24
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	4313      	orrs	r3, r2
 8006d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d86:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006d8a:	0212      	lsls	r2, r2, #8
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d90:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006d94:	431a      	orrs	r2, r3
 8006d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d98:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	647b      	str	r3, [r7, #68]	; 0x44
 8006da6:	e025      	b.n	8006df4 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <find_volume+0x3f6>
 8006db2:	230d      	movs	r3, #13
 8006db4:	e0c8      	b.n	8006f48 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8006dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dbe:	441a      	add	r2, r3
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d104      	bne.n	8006dd8 <find_volume+0x418>
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	e00c      	b.n	8006df2 <find_volume+0x432>
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006dde:	4613      	mov	r3, r2
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	4413      	add	r3, r2
 8006de4:	085a      	lsrs	r2, r3, #1
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006df2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006e00:	0a5b      	lsrs	r3, r3, #9
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d201      	bcs.n	8006e0a <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 8006e06:	230d      	movs	r3, #13
 8006e08:	e09e      	b.n	8006f48 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e22:	2280      	movs	r2, #128	; 0x80
 8006e24:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d177      	bne.n	8006f20 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	b21a      	sxth	r2, r3
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e40:	b21b      	sxth	r3, r3
 8006e42:	4313      	orrs	r3, r2
 8006e44:	b21b      	sxth	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d16a      	bne.n	8006f20 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e52:	f7fe fd36 	bl	80058c2 <move_window>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d161      	bne.n	8006f20 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	b21a      	sxth	r2, r3
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	4313      	orrs	r3, r2
 8006e78:	b21b      	sxth	r3, r3
 8006e7a:	4a35      	ldr	r2, [pc, #212]	; (8006f50 <find_volume+0x590>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d14f      	bne.n	8006f20 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	78db      	ldrb	r3, [r3, #3]
 8006e84:	061a      	lsls	r2, r3, #24
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	789b      	ldrb	r3, [r3, #2]
 8006e8a:	041b      	lsls	r3, r3, #16
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e90:	7852      	ldrb	r2, [r2, #1]
 8006e92:	0212      	lsls	r2, r2, #8
 8006e94:	4313      	orrs	r3, r2
 8006e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	; (8006f54 <find_volume+0x594>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d13e      	bne.n	8006f20 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006ea8:	061a      	lsls	r2, r3, #24
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eac:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006eb0:	041b      	lsls	r3, r3, #16
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eb6:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006eba:	0212      	lsls	r2, r2, #8
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ec0:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	4a24      	ldr	r2, [pc, #144]	; (8006f58 <find_volume+0x598>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d129      	bne.n	8006f20 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006ed2:	061a      	lsls	r2, r3, #24
 8006ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed6:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	4313      	orrs	r3, r2
 8006ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ee0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006ee4:	0212      	lsls	r2, r2, #8
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eea:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006efc:	061a      	lsls	r2, r3, #24
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006f04:	041b      	lsls	r3, r3, #16
 8006f06:	4313      	orrs	r3, r2
 8006f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f0a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006f0e:	0212      	lsls	r2, r2, #8
 8006f10:	4313      	orrs	r3, r2
 8006f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f14:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006f26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <find_volume+0x59c>)
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <find_volume+0x59c>)
 8006f34:	801a      	strh	r2, [r3, #0]
 8006f36:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <find_volume+0x59c>)
 8006f38:	881a      	ldrh	r2, [r3, #0]
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006f40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f42:	f7fe fc4b 	bl	80057dc <clear_lock>
#endif

	return FR_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3758      	adds	r7, #88	; 0x58
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	ffffaa55 	.word	0xffffaa55
 8006f54:	41615252 	.word	0x41615252
 8006f58:	61417272 	.word	0x61417272
 8006f5c:	200004a0 	.word	0x200004a0

08006f60 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d022      	beq.n	8006fb8 <validate+0x58>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01d      	beq.n	8006fb8 <validate+0x58>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d016      	beq.n	8006fb8 <validate+0x58>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006f90:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d10c      	bne.n	8006fb8 <validate+0x58>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fa4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe f941 	bl	8005230 <disk_status>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <validate+0x5c>
		return FR_INVALID_OBJECT;
 8006fb8:	2309      	movs	r3, #9
 8006fba:	e00b      	b.n	8006fd4 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fa4e 	bl	8005464 <lock_fs>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <validate+0x72>
 8006fce:	230f      	movs	r3, #15
 8006fd0:	e000      	b.n	8006fd4 <validate+0x74>

	return FR_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8006fee:	f107 0310 	add.w	r3, r7, #16
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff fc36 	bl	8006864 <get_ldnumber>
 8006ff8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	da01      	bge.n	8007004 <f_mount+0x28>
 8007000:	230b      	movs	r3, #11
 8007002:	e04c      	b.n	800709e <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007004:	4a28      	ldr	r2, [pc, #160]	; (80070a8 <f_mount+0xcc>)
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d011      	beq.n	8007038 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8007014:	69b8      	ldr	r0, [r7, #24]
 8007016:	f7fe fbe1 	bl	80057dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007020:	4618      	mov	r0, r3
 8007022:	f001 fb7e 	bl	8008722 <ff_del_syncobj>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <f_mount+0x54>
 800702c:	2302      	movs	r3, #2
 800702e:	e036      	b.n	800709e <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d011      	beq.n	8007062 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	b2da      	uxtb	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8007050:	4619      	mov	r1, r3
 8007052:	4610      	mov	r0, r2
 8007054:	f001 fb45 	bl	80086e2 <ff_cre_syncobj>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <f_mount+0x86>
 800705e:	2302      	movs	r3, #2
 8007060:	e01d      	b.n	800709e <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4910      	ldr	r1, [pc, #64]	; (80070a8 <f_mount+0xcc>)
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <f_mount+0x9c>
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d001      	beq.n	800707c <f_mount+0xa0>
 8007078:	2300      	movs	r3, #0
 800707a:	e010      	b.n	800709e <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800707c:	f107 0108 	add.w	r1, r7, #8
 8007080:	f107 030c 	add.w	r3, r7, #12
 8007084:	2200      	movs	r2, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fc9a 	bl	80069c0 <find_volume>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	7dfa      	ldrb	r2, [r7, #23]
 8007094:	4611      	mov	r1, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe f9f3 	bl	8005482 <unlock_fs>
 800709c:	7dfb      	ldrb	r3, [r7, #23]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	2000049c 	.word	0x2000049c

080070ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80070bc:	6018      	str	r0, [r3, #0]
 80070be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070c2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80070c6:	6019      	str	r1, [r3, #0]
 80070c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070cc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80070d0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80070d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <f_open+0x38>
 80070e0:	2309      	movs	r3, #9
 80070e2:	e263      	b.n	80075ac <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 80070e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80070f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80070fc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007100:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007104:	7812      	ldrb	r2, [r2, #0]
 8007106:	f002 021f 	and.w	r2, r2, #31
 800710a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800710c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007110:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	f023 0301 	bic.w	r3, r3, #1
 800711a:	b2da      	uxtb	r2, r3
 800711c:	f107 0108 	add.w	r1, r7, #8
 8007120:	f107 0320 	add.w	r3, r7, #32
 8007124:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007128:	4618      	mov	r0, r3
 800712a:	f7ff fc49 	bl	80069c0 <find_volume>
 800712e:	4603      	mov	r3, r0
 8007130:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007134:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007138:	2b00      	cmp	r3, #0
 800713a:	f040 8229 	bne.w	8007590 <f_open+0x4e4>
		INIT_BUF(dj);
 800713e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007142:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007146:	f107 0214 	add.w	r2, r7, #20
 800714a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800714e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007152:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	f107 0320 	add.w	r3, r7, #32
 800715c:	4611      	mov	r1, r2
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff fb12 	bl	8006788 <follow_path>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800716a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800716e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007172:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007176:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800717a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11d      	bne.n	80071be <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8007182:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007186:	2b00      	cmp	r3, #0
 8007188:	d103      	bne.n	8007192 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800718a:	2306      	movs	r3, #6
 800718c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007190:	e015      	b.n	80071be <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007192:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007196:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	bf14      	ite	ne
 80071a4:	2301      	movne	r3, #1
 80071a6:	2300      	moveq	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	461a      	mov	r2, r3
 80071ac:	f107 0320 	add.w	r3, r7, #32
 80071b0:	4611      	mov	r1, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe f984 	bl	80054c0 <chk_lock>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80071be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	f003 031c 	and.w	r3, r3, #28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80e6 	beq.w	800739e <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80071d2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d027      	beq.n	800722a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80071da:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d10e      	bne.n	8007200 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80071e2:	f7fe f9db 	bl	800559c <enq_lock>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d006      	beq.n	80071fa <f_open+0x14e>
 80071ec:	f107 0320 	add.w	r3, r7, #32
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff f9d0 	bl	8006596 <dir_register>
 80071f6:	4603      	mov	r3, r0
 80071f8:	e000      	b.n	80071fc <f_open+0x150>
 80071fa:	2312      	movs	r3, #18
 80071fc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007200:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007204:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007208:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800720c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	f042 0208 	orr.w	r2, r2, #8
 8007216:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007218:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800721c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007220:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007224:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007228:	e017      	b.n	800725a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800722a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800722e:	330b      	adds	r3, #11
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	f003 0311 	and.w	r3, r3, #17
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <f_open+0x196>
					res = FR_DENIED;
 800723a:	2307      	movs	r3, #7
 800723c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007240:	e00b      	b.n	800725a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007246:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <f_open+0x1ae>
						res = FR_EXIST;
 8007254:	2308      	movs	r3, #8
 8007256:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800725a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 80c1 	bne.w	80073e6 <f_open+0x33a>
 8007264:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007268:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80b7 	beq.w	80073e6 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8007278:	f7fd ff7a 	bl	8005170 <get_fattime>
 800727c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007280:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007284:	330e      	adds	r3, #14
 8007286:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800728a:	b2d2      	uxtb	r2, r2
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8007292:	b29b      	uxth	r3, r3
 8007294:	0a1b      	lsrs	r3, r3, #8
 8007296:	b29a      	uxth	r2, r3
 8007298:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800729c:	330f      	adds	r3, #15
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80072a6:	0c1a      	lsrs	r2, r3, #16
 80072a8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072ac:	3310      	adds	r3, #16
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]
 80072b2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80072b6:	0e1a      	lsrs	r2, r3, #24
 80072b8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072bc:	3311      	adds	r3, #17
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80072c2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072c6:	330b      	adds	r3, #11
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80072cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072d0:	331c      	adds	r3, #28
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072da:	331d      	adds	r3, #29
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072e4:	331e      	adds	r3, #30
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072ee:	331f      	adds	r3, #31
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80072f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80072fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007300:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff f8a2 	bl	800644e <ld_clust>
 800730a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800730e:	2100      	movs	r1, #0
 8007310:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8007314:	f7ff f8c9 	bl	80064aa <st_clust>
				dj.fs->wflag = 1;
 8007318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800732a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800732e:	2b00      	cmp	r3, #0
 8007330:	d059      	beq.n	80073e6 <f_open+0x33a>
					dw = dj.fs->winsect;
 8007332:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007336:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800733a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800733e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8007342:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8007346:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800734a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800734e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007352:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8007356:	4618      	mov	r0, r3
 8007358:	f7fe fd78 	bl	8005e4c <remove_chain>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8007362:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007366:	2b00      	cmp	r3, #0
 8007368:	d13d      	bne.n	80073e6 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800736a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800736e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007376:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800737a:	3a01      	subs	r2, #1
 800737c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8007380:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007384:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007388:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800738c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8007390:	4618      	mov	r0, r3
 8007392:	f7fe fa96 	bl	80058c2 <move_window>
 8007396:	4603      	mov	r3, r0
 8007398:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800739c:	e023      	b.n	80073e6 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800739e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d11f      	bne.n	80073e6 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80073a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073aa:	330b      	adds	r3, #11
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 0310 	and.w	r3, r3, #16
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <f_open+0x312>
					res = FR_NO_FILE;
 80073b6:	2304      	movs	r3, #4
 80073b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80073bc:	e013      	b.n	80073e6 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80073be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <f_open+0x33a>
 80073d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073d4:	330b      	adds	r3, #11
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <f_open+0x33a>
						res = FR_DENIED;
 80073e0:	2307      	movs	r3, #7
 80073e2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80073e6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d153      	bne.n	8007496 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80073ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00b      	beq.n	8007418 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8007400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007404:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007408:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800740c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007410:	7812      	ldrb	r2, [r2, #0]
 8007412:	f042 0220 	orr.w	r2, r2, #32
 8007416:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800741c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007424:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8007428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800742c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8007436:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800743a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007444:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800744c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f023 0301 	bic.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	bf14      	ite	ne
 800745a:	2301      	movne	r3, #1
 800745c:	2300      	moveq	r3, #0
 800745e:	b2db      	uxtb	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	f107 0320 	add.w	r3, r7, #32
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f7fe f8bb 	bl	80055e4 <inc_lock>
 800746e:	4602      	mov	r2, r0
 8007470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007474:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800747e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007482:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <f_open+0x3ea>
 8007490:	2302      	movs	r3, #2
 8007492:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007496:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800749a:	2b00      	cmp	r3, #0
 800749c:	d178      	bne.n	8007590 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800749e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074ac:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80074b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80074c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ca:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80074ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074d2:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe ffb9 	bl	800644e <ld_clust>
 80074dc:	4602      	mov	r2, r0
 80074de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80074ec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074f0:	331f      	adds	r3, #31
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	061a      	lsls	r2, r3, #24
 80074f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80074fa:	331e      	adds	r3, #30
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	041b      	lsls	r3, r3, #16
 8007500:	4313      	orrs	r3, r2
 8007502:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007506:	321d      	adds	r2, #29
 8007508:	7812      	ldrb	r2, [r2, #0]
 800750a:	0212      	lsls	r2, r2, #8
 800750c:	4313      	orrs	r3, r2
 800750e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007512:	321c      	adds	r2, #28
 8007514:	7812      	ldrb	r2, [r2, #0]
 8007516:	431a      	orrs	r2, r3
 8007518:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800751c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8007526:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2200      	movs	r2, #0
 8007532:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800755a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800755e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007566:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007570:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007574:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800757e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007586:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8007590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007594:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800759c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 80075a0:	4611      	mov	r1, r2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fd ff6d 	bl	8005482 <unlock_fs>
 80075a8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b08c      	sub	sp, #48	; 0x30
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
 80075c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff fcc6 	bl	8006f60 <validate>
 80075d4:	4603      	mov	r3, r0
 80075d6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80075d8:	7ffb      	ldrb	r3, [r7, #31]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d009      	beq.n	80075f2 <f_read+0x3c>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075e4:	7ffa      	ldrb	r2, [r7, #31]
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fd ff4a 	bl	8005482 <unlock_fs>
 80075ee:	7ffb      	ldrb	r3, [r7, #31]
 80075f0:	e192      	b.n	8007918 <f_read+0x362>
	if (fp->err)								/* Check error */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00d      	beq.n	8007618 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f7fd ff39 	bl	8005482 <unlock_fs>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007616:	e17f      	b.n	8007918 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d108      	bne.n	8007638 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800762c:	2107      	movs	r1, #7
 800762e:	4618      	mov	r0, r3
 8007630:	f7fd ff27 	bl	8005482 <unlock_fs>
 8007634:	2307      	movs	r3, #7
 8007636:	e16f      	b.n	8007918 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	429a      	cmp	r2, r3
 800764e:	f240 8157 	bls.w	8007900 <f_read+0x34a>
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007656:	e153      	b.n	8007900 <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800765e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 811c 	bne.w	80078a0 <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800766e:	0a5b      	lsrs	r3, r3, #9
 8007670:	b2da      	uxtb	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007678:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800767c:	3b01      	subs	r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	4013      	ands	r3, r2
 8007682:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d147      	bne.n	800771a <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800769a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800769c:	e018      	b.n	80076d0 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d008      	beq.n	80076ba <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80076ae:	4619      	mov	r1, r3
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7fe fcc2 	bl	800603a <clmt_clust>
 80076b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80076b8:	e00a      	b.n	80076d0 <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076c6:	4619      	mov	r1, r3
 80076c8:	4610      	mov	r0, r2
 80076ca:	f7fe f9f7 	bl	8005abc <get_fat>
 80076ce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d80c      	bhi.n	80076f0 <f_read+0x13a>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2202      	movs	r2, #2
 80076da:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076e4:	2102      	movs	r1, #2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fd fecb 	bl	8005482 <unlock_fs>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e113      	b.n	8007918 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80076f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f6:	d10c      	bne.n	8007712 <f_read+0x15c>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007706:	2101      	movs	r1, #1
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd feba 	bl	8005482 <unlock_fs>
 800770e:	2301      	movs	r3, #1
 8007710:	e102      	b.n	8007918 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007716:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7fe f9a5 	bl	8005a78 <clust2sect>
 800772e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10c      	bne.n	8007750 <f_read+0x19a>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2202      	movs	r2, #2
 800773a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007744:	2102      	movs	r1, #2
 8007746:	4618      	mov	r0, r3
 8007748:	f7fd fe9b 	bl	8005482 <unlock_fs>
 800774c:	2302      	movs	r3, #2
 800774e:	e0e3      	b.n	8007918 <f_read+0x362>
			sect += csect;
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4413      	add	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0a5b      	lsrs	r3, r3, #9
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	2b00      	cmp	r3, #0
 8007762:	d04d      	beq.n	8007800 <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007764:	7dfa      	ldrb	r2, [r7, #23]
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	4413      	add	r3, r2
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007770:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007774:	4293      	cmp	r3, r2
 8007776:	d908      	bls.n	800778a <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800777e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007782:	461a      	mov	r2, r3
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007790:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	6a39      	ldr	r1, [r7, #32]
 800779a:	f7fd fd89 	bl	80052b0 <disk_read>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00c      	beq.n	80077be <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077b2:	2101      	movs	r1, #1
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fd fe64 	bl	8005482 <unlock_fs>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e0ac      	b.n	8007918 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80077c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <f_read+0x242>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d8:	429a      	cmp	r2, r3
 80077da:	d90d      	bls.n	80077f8 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	025b      	lsls	r3, r3, #9
 80077e8:	6a3a      	ldr	r2, [r7, #32]
 80077ea:	4413      	add	r3, r2
 80077ec:	68f9      	ldr	r1, [r7, #12]
 80077ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fd fdba 	bl	800536c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	025b      	lsls	r3, r3, #9
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80077fe:	e069      	b.n	80078d4 <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	429a      	cmp	r2, r3
 800780a:	d045      	beq.n	8007898 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007816:	2b00      	cmp	r3, #0
 8007818:	d024      	beq.n	8007864 <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007820:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800782c:	2301      	movs	r3, #1
 800782e:	f7fd fd5f 	bl	80052f0 <disk_write>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00c      	beq.n	8007852 <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f7fd fe1a 	bl	8005482 <unlock_fs>
 800784e:	2301      	movs	r3, #1
 8007850:	e062      	b.n	8007918 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785c:	b2da      	uxtb	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800786a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800786e:	68f9      	ldr	r1, [r7, #12]
 8007870:	2301      	movs	r3, #1
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	f7fd fd1c 	bl	80052b0 <disk_read>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00c      	beq.n	8007898 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800788c:	2101      	movs	r1, #1
 800788e:	4618      	mov	r0, r3
 8007890:	f7fd fdf7 	bl	8005482 <unlock_fs>
 8007894:	2301      	movs	r3, #1
 8007896:	e03f      	b.n	8007918 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80078a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80078b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d901      	bls.n	80078bc <f_read+0x306>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078cc:	4619      	mov	r1, r3
 80078ce:	6a38      	ldr	r0, [r7, #32]
 80078d0:	f7fd fd4c 	bl	800536c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078d4:	6a3a      	ldr	r2, [r7, #32]
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	4413      	add	r3, r2
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	441a      	add	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	441a      	add	r2, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f47f aea8 	bne.w	8007658 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800790e:	2100      	movs	r1, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f7fd fdb6 	bl	8005482 <unlock_fs>
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3730      	adds	r7, #48	; 0x30
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fb11 	bl	8006f60 <validate>
 800793e:	4603      	mov	r3, r0
 8007940:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <f_write+0x3c>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800794e:	7dfa      	ldrb	r2, [r7, #23]
 8007950:	4611      	mov	r1, r2
 8007952:	4618      	mov	r0, r3
 8007954:	f7fd fd95 	bl	8005482 <unlock_fs>
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	e1d4      	b.n	8007d06 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00d      	beq.n	8007982 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007972:	4619      	mov	r1, r3
 8007974:	4610      	mov	r0, r2
 8007976:	f7fd fd84 	bl	8005482 <unlock_fs>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007980:	e1c1      	b.n	8007d06 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d108      	bne.n	80079a2 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007996:	2107      	movs	r1, #7
 8007998:	4618      	mov	r0, r3
 800799a:	f7fd fd72 	bl	8005482 <unlock_fs>
 800799e:	2307      	movs	r3, #7
 80079a0:	e1b1      	b.n	8007d06 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	441a      	add	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079b2:	429a      	cmp	r2, r3
 80079b4:	f080 8182 	bcs.w	8007cbc <f_write+0x39c>
 80079b8:	2300      	movs	r3, #0
 80079ba:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80079bc:	e17e      	b.n	8007cbc <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f040 813e 	bne.w	8007c4a <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079d4:	0a5b      	lsrs	r3, r3, #9
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	4013      	ands	r3, r2
 80079e8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80079ea:	7dbb      	ldrb	r3, [r7, #22]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d15f      	bne.n	8007ab0 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10f      	bne.n	8007a1a <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d121      	bne.n	8007a4c <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fa75 	bl	8005f00 <create_chain>
 8007a16:	6278      	str	r0, [r7, #36]	; 0x24
 8007a18:	e018      	b.n	8007a4c <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7fe fb04 	bl	800603a <clmt_clust>
 8007a32:	6278      	str	r0, [r7, #36]	; 0x24
 8007a34:	e00a      	b.n	8007a4c <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7fe fa5b 	bl	8005f00 <create_chain>
 8007a4a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8139 	beq.w	8007cc6 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d10c      	bne.n	8007a74 <f_write+0x154>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a68:	2102      	movs	r1, #2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fd fd09 	bl	8005482 <unlock_fs>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e148      	b.n	8007d06 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7a:	d10c      	bne.n	8007a96 <f_write+0x176>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fd fcf8 	bl	8005482 <unlock_fs>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e137      	b.n	8007d06 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d103      	bne.n	8007ab0 <f_write+0x190>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d024      	beq.n	8007b08 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ac4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	f7fd fc0d 	bl	80052f0 <disk_write>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00c      	beq.n	8007af6 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007aea:	2101      	movs	r1, #1
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fd fcc8 	bl	8005482 <unlock_fs>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e107      	b.n	8007d06 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f7fd ffae 	bl	8005a78 <clust2sect>
 8007b1c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10c      	bne.n	8007b3e <f_write+0x21e>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b32:	2102      	movs	r1, #2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fd fca4 	bl	8005482 <unlock_fs>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e0e3      	b.n	8007d06 <f_write+0x3e6>
			sect += csect;
 8007b3e:	7dbb      	ldrb	r3, [r7, #22]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4413      	add	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	0a5b      	lsrs	r3, r3, #9
 8007b4a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d04f      	beq.n	8007bf2 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007b52:	7dba      	ldrb	r2, [r7, #22]
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	4413      	add	r3, r2
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007b5e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d908      	bls.n	8007b78 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b6c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007b70:	461a      	mov	r2, r3
 8007b72:	7dbb      	ldrb	r3, [r7, #22]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b7e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	69b9      	ldr	r1, [r7, #24]
 8007b88:	f7fd fbb2 	bl	80052f0 <disk_write>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00c      	beq.n	8007bac <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fd fc6d 	bl	8005482 <unlock_fs>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e0ac      	b.n	8007d06 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d916      	bls.n	8007bea <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	025b      	lsls	r3, r3, #9
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	f7fd fbca 	bl	800536c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	025b      	lsls	r3, r3, #9
 8007bee:	623b      	str	r3, [r7, #32]
				continue;
 8007bf0:	e04e      	b.n	8007c90 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d021      	beq.n	8007c42 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d219      	bcs.n	8007c42 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c14:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007c18:	68f9      	ldr	r1, [r7, #12]
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	f7fd fb47 	bl	80052b0 <disk_read>
 8007c22:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00c      	beq.n	8007c42 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c36:	2101      	movs	r1, #1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fd fc22 	bl	8005482 <unlock_fs>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e061      	b.n	8007d06 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007c58:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007c5a:	6a3a      	ldr	r2, [r7, #32]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d901      	bls.n	8007c66 <f_write+0x346>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4413      	add	r3, r2
 8007c74:	6a3a      	ldr	r2, [r7, #32]
 8007c76:	69b9      	ldr	r1, [r7, #24]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fd fb77 	bl	800536c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	4413      	add	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	441a      	add	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	441a      	add	r2, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f47f ae7d 	bne.w	80079be <f_write+0x9e>
 8007cc4:	e000      	b.n	8007cc8 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007cc6:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d905      	bls.n	8007ce4 <f_write+0x3c4>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007cea:	f043 0320 	orr.w	r3, r3, #32
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fd fbbf 	bl	8005482 <unlock_fs>
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3728      	adds	r7, #40	; 0x28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b086      	sub	sp, #24
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff f922 	bl	8006f60 <validate>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f040 80af 	bne.w	8007e86 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d2e:	f003 0320 	and.w	r3, r3, #32
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 80a7 	beq.w	8007e86 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d020      	beq.n	8007d88 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d4c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f7fd fac9 	bl	80052f0 <disk_write>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d008      	beq.n	8007d76 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fd fb88 	bl	8005482 <unlock_fs>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e090      	b.n	8007e98 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7fd fd93 	bl	80058c2 <move_window>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d16f      	bne.n	8007e86 <f_sync+0x178>
				dir = fp->dir_ptr;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007dac:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	330b      	adds	r3, #11
 8007db2:	781a      	ldrb	r2, [r3, #0]
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	330b      	adds	r3, #11
 8007db8:	f042 0220 	orr.w	r2, r2, #32
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	331c      	adds	r3, #28
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	0a1b      	lsrs	r3, r3, #8
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	331d      	adds	r3, #29
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007de8:	0c1a      	lsrs	r2, r3, #16
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	331e      	adds	r3, #30
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007df8:	0e1a      	lsrs	r2, r3, #24
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	331f      	adds	r3, #31
 8007dfe:	b2d2      	uxtb	r2, r2
 8007e00:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6938      	ldr	r0, [r7, #16]
 8007e0c:	f7fe fb4d 	bl	80064aa <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007e10:	f7fd f9ae 	bl	8005170 <get_fattime>
 8007e14:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	3316      	adds	r3, #22
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	b2d2      	uxtb	r2, r2
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	0a1b      	lsrs	r3, r3, #8
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	3317      	adds	r3, #23
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	701a      	strb	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	0c1a      	lsrs	r2, r3, #16
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	3318      	adds	r3, #24
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	701a      	strb	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	0e1a      	lsrs	r2, r3, #24
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	3319      	adds	r3, #25
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	3312      	adds	r3, #18
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	3313      	adds	r3, #19
 8007e54:	2200      	movs	r2, #0
 8007e56:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007e5e:	f023 0320 	bic.w	r3, r3, #32
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fd fd4e 	bl	800591e <sync_fs>
 8007e82:	4603      	mov	r3, r0
 8007e84:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e8c:	7dfa      	ldrb	r2, [r7, #23]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fd faf6 	bl	8005482 <unlock_fs>
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff30 	bl	8007d0e <f_sync>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11e      	bne.n	8007ef6 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff f851 	bl	8006f60 <validate>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d116      	bne.n	8007ef6 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ece:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fd fc3c 	bl	8005754 <dec_lock>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d103      	bne.n	8007eee <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007eee:	2100      	movs	r1, #0
 8007ef0:	68b8      	ldr	r0, [r7, #8]
 8007ef2:	f7fd fac6 	bl	8005482 <unlock_fs>
#endif
		}
	}
	return res;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b090      	sub	sp, #64	; 0x40
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff f828 	bl	8006f60 <validate>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007f16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <f_lseek+0x36>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f24:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007f28:	4611      	mov	r1, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fd faa9 	bl	8005482 <unlock_fs>
 8007f30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f34:	e2af      	b.n	8008496 <f_lseek+0x596>
	if (fp->err)						/* Check error */
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00d      	beq.n	8007f5c <f_lseek+0x5c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f7fd fa97 	bl	8005482 <unlock_fs>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007f5a:	e29c      	b.n	8008496 <f_lseek+0x596>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 8115 	beq.w	8008192 <f_lseek+0x292>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d172      	bne.n	8008056 <f_lseek+0x156>
			tbl = fp->cltbl;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	2302      	movs	r3, #2
 8007f84:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f8c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d04f      	beq.n	8008034 <f_lseek+0x134>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	3301      	adds	r3, #1
 8007faa:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fd fd81 	bl	8005abc <get_fat>
 8007fba:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d80c      	bhi.n	8007fdc <f_lseek+0xdc>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fd fa55 	bl	8005482 <unlock_fs>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e25c      	b.n	8008496 <f_lseek+0x596>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe2:	d10c      	bne.n	8007ffe <f_lseek+0xfe>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fd fa44 	bl	8005482 <unlock_fs>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e24b      	b.n	8008496 <f_lseek+0x596>
					} while (cl == pcl + 1);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008004:	429a      	cmp	r2, r3
 8008006:	d0cc      	beq.n	8007fa2 <f_lseek+0xa2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	429a      	cmp	r2, r3
 800800e:	d809      	bhi.n	8008024 <f_lseek+0x124>
						*tbl++ = ncl; *tbl++ = tcl;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	1d1a      	adds	r2, r3, #4
 8008014:	627a      	str	r2, [r7, #36]	; 0x24
 8008016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	1d1a      	adds	r2, r3, #4
 800801e:	627a      	str	r2, [r7, #36]	; 0x24
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800802a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800802e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008030:	429a      	cmp	r2, r3
 8008032:	d3af      	bcc.n	8007f94 <f_lseek+0x94>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800803a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800803c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800803e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	429a      	cmp	r2, r3
 8008044:	d803      	bhi.n	800804e <f_lseek+0x14e>
				*tbl = 0;		/* Terminate table */
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	e218      	b.n	8008480 <f_lseek+0x580>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800804e:	2311      	movs	r3, #17
 8008050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008054:	e214      	b.n	8008480 <f_lseek+0x580>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d903      	bls.n	800806a <f_lseek+0x16a>
				ofs = fp->fsize;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008068:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8203 	beq.w	8008480 <f_lseek+0x580>
				fp->clust = clmt_clust(fp, ofs - 1);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	3b01      	subs	r3, #1
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fd ffda 	bl	800603a <clmt_clust>
 8008086:	4602      	mov	r2, r0
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800809a:	4619      	mov	r1, r3
 800809c:	4610      	mov	r0, r2
 800809e:	f7fd fceb 	bl	8005a78 <clust2sect>
 80080a2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10c      	bne.n	80080c4 <f_lseek+0x1c4>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080b8:	2102      	movs	r1, #2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fd f9e1 	bl	8005482 <unlock_fs>
 80080c0:	2302      	movs	r3, #2
 80080c2:	e1e8      	b.n	8008496 <f_lseek+0x596>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	0a5b      	lsrs	r3, r3, #9
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80080d0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80080d4:	3a01      	subs	r2, #1
 80080d6:	4013      	ands	r3, r2
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	4413      	add	r3, r2
 80080dc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 81c9 	beq.w	8008480 <f_lseek+0x580>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	f000 81c2 	beq.w	8008480 <f_lseek+0x580>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d024      	beq.n	8008154 <f_lseek+0x254>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008110:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800811c:	2301      	movs	r3, #1
 800811e:	f7fd f8e7 	bl	80052f0 <disk_write>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00c      	beq.n	8008142 <f_lseek+0x242>
							ABORT(fp->fs, FR_DISK_ERR);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008136:	2101      	movs	r1, #1
 8008138:	4618      	mov	r0, r3
 800813a:	f7fd f9a2 	bl	8005482 <unlock_fs>
 800813e:	2301      	movs	r3, #1
 8008140:	e1a9      	b.n	8008496 <f_lseek+0x596>
						fp->flag &= ~FA__DIRTY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814c:	b2da      	uxtb	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800815a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	2301      	movs	r3, #1
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	f7fd f8a4 	bl	80052b0 <disk_read>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <f_lseek+0x288>
						ABORT(fp->fs, FR_DISK_ERR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800817c:	2101      	movs	r1, #1
 800817e:	4618      	mov	r0, r3
 8008180:	f7fd f97f 	bl	8005482 <unlock_fs>
 8008184:	2301      	movs	r3, #1
 8008186:	e186      	b.n	8008496 <f_lseek+0x596>
#endif
					fp->dsect = dsc;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8008190:	e176      	b.n	8008480 <f_lseek+0x580>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d90a      	bls.n	80081b4 <f_lseek+0x2b4>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d103      	bne.n	80081b4 <f_lseek+0x2b4>
#endif
			) ofs = fp->fsize;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80081b2:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80081ba:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80ea 	beq.w	80083a4 <f_lseek+0x4a4>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80081d6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80081da:	025b      	lsls	r3, r3, #9
 80081dc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d01e      	beq.n	8008222 <f_lseek+0x322>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	1e5a      	subs	r2, r3, #1
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	1e59      	subs	r1, r3, #1
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d312      	bcc.n	8008222 <f_lseek+0x322>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	1e5a      	subs	r2, r3, #1
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	425b      	negs	r3, r3
 8008204:	401a      	ands	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800821e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008220:	e037      	b.n	8008292 <f_lseek+0x392>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008228:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	d12c      	bne.n	800828a <f_lseek+0x38a>
					clst = create_chain(fp->fs, 0);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008236:	2100      	movs	r1, #0
 8008238:	4618      	mov	r0, r3
 800823a:	f7fd fe61 	bl	8005f00 <create_chain>
 800823e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	2b01      	cmp	r3, #1
 8008244:	d10c      	bne.n	8008260 <f_lseek+0x360>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2202      	movs	r2, #2
 800824a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008254:	2102      	movs	r1, #2
 8008256:	4618      	mov	r0, r3
 8008258:	f7fd f913 	bl	8005482 <unlock_fs>
 800825c:	2302      	movs	r3, #2
 800825e:	e11a      	b.n	8008496 <f_lseek+0x596>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008266:	d10c      	bne.n	8008282 <f_lseek+0x382>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008276:	2101      	movs	r1, #1
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd f902 	bl	8005482 <unlock_fs>
 800827e:	2301      	movs	r3, #1
 8008280:	e109      	b.n	8008496 <f_lseek+0x596>
					fp->sclust = clst;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008286:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800828e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8008292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8085 	beq.w	80083a4 <f_lseek+0x4a4>
				while (ofs > bcs) {						/* Cluster following loop */
 800829a:	e055      	b.n	8008348 <f_lseek+0x448>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d00d      	beq.n	80082c6 <f_lseek+0x3c6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fd fe24 	bl	8005f00 <create_chain>
 80082b8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <f_lseek+0x3d6>
							ofs = bcs; break;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	e044      	b.n	8008350 <f_lseek+0x450>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fd fbf4 	bl	8005abc <get_fat>
 80082d4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082dc:	d10c      	bne.n	80082f8 <f_lseek+0x3f8>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082ec:	2101      	movs	r1, #1
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fd f8c7 	bl	8005482 <unlock_fs>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e0ce      	b.n	8008496 <f_lseek+0x596>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80082f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d907      	bls.n	800830e <f_lseek+0x40e>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008304:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800830a:	429a      	cmp	r2, r3
 800830c:	d30c      	bcc.n	8008328 <f_lseek+0x428>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2202      	movs	r2, #2
 8008312:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800831c:	2102      	movs	r1, #2
 800831e:	4618      	mov	r0, r3
 8008320:	f7fd f8af 	bl	8005482 <unlock_fs>
 8008324:	2302      	movs	r3, #2
 8008326:	e0b6      	b.n	8008496 <f_lseek+0x596>
					fp->clust = clst;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800832c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	441a      	add	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	429a      	cmp	r2, r3
 800834e:	d8a5      	bhi.n	800829c <f_lseek+0x39c>
				}
				fp->fptr += ofs;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	441a      	add	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008366:	2b00      	cmp	r3, #0
 8008368:	d01c      	beq.n	80083a4 <f_lseek+0x4a4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008370:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd fb80 	bl	8005a78 <clust2sect>
 8008378:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10c      	bne.n	800839a <f_lseek+0x49a>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800838e:	2102      	movs	r1, #2
 8008390:	4618      	mov	r0, r3
 8008392:	f7fd f876 	bl	8005482 <unlock_fs>
 8008396:	2302      	movs	r3, #2
 8008398:	e07d      	b.n	8008496 <f_lseek+0x596>
					nsect += ofs / SS(fp->fs);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	0a5b      	lsrs	r3, r3, #9
 800839e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a0:	4413      	add	r3, r2
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80083aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04f      	beq.n	8008452 <f_lseek+0x552>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80083b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d049      	beq.n	8008452 <f_lseek+0x552>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d024      	beq.n	8008416 <f_lseek+0x516>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083d2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80083de:	2301      	movs	r3, #1
 80083e0:	f7fc ff86 	bl	80052f0 <disk_write>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00c      	beq.n	8008404 <f_lseek+0x504>
					ABORT(fp->fs, FR_DISK_ERR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fd f841 	bl	8005482 <unlock_fs>
 8008400:	2301      	movs	r3, #1
 8008402:	e048      	b.n	8008496 <f_lseek+0x596>
				fp->flag &= ~FA__DIRTY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800840a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800840e:	b2da      	uxtb	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800841c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	2301      	movs	r3, #1
 8008424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008426:	f7fc ff43 	bl	80052b0 <disk_read>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00c      	beq.n	800844a <f_lseek+0x54a>
				ABORT(fp->fs, FR_DISK_ERR);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800843e:	2101      	movs	r1, #1
 8008440:	4618      	mov	r0, r3
 8008442:	f7fd f81e 	bl	8005482 <unlock_fs>
 8008446:	2301      	movs	r3, #1
 8008448:	e025      	b.n	8008496 <f_lseek+0x596>
#endif
			fp->dsect = nsect;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800844e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800845e:	429a      	cmp	r2, r3
 8008460:	d90e      	bls.n	8008480 <f_lseek+0x580>
			fp->fsize = fp->fptr;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008474:	f043 0320 	orr.w	r3, r3, #32
 8008478:	b2da      	uxtb	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008486:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f7fc fff8 	bl	8005482 <unlock_fs>
 8008492:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008496:	4618      	mov	r0, r3
 8008498:	3740      	adds	r7, #64	; 0x40
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7fe fd5a 	bl	8006f60 <validate>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80084b0:	7bfb      	ldrb	r3, [r7, #15]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d112      	bne.n	80084dc <f_truncate+0x3e>
		if (fp->err) {						/* Check error */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d004      	beq.n	80084ca <f_truncate+0x2c>
			res = (FRESULT)fp->err;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80084c6:	73fb      	strb	r3, [r7, #15]
 80084c8:	e008      	b.n	80084dc <f_truncate+0x3e>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <f_truncate+0x3e>
				res = FR_DENIED;
 80084d8:	2307      	movs	r3, #7
 80084da:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f040 8096 	bne.w	8008610 <f_truncate+0x172>
		if (fp->fsize > fp->fptr) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80084f0:	429a      	cmp	r2, r3
 80084f2:	f240 8086 	bls.w	8008602 <f_truncate+0x164>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8008508:	f043 0320 	orr.w	r3, r3, #32
 800850c:	b2da      	uxtb	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800851a:	2b00      	cmp	r3, #0
 800851c:	d110      	bne.n	8008540 <f_truncate+0xa2>
				res = remove_chain(fp->fs, fp->sclust);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7fd fc8d 	bl	8005e4c <remove_chain>
 8008532:	4603      	mov	r3, r0
 8008534:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800853e:	e03b      	b.n	80085b8 <f_truncate+0x11a>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800854c:	4619      	mov	r1, r3
 800854e:	4610      	mov	r0, r2
 8008550:	f7fd fab4 	bl	8005abc <get_fat>
 8008554:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008560:	d101      	bne.n	8008566 <f_truncate+0xc8>
 8008562:	2301      	movs	r3, #1
 8008564:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <f_truncate+0xd2>
 800856c:	2302      	movs	r3, #2
 800856e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d120      	bne.n	80085b8 <f_truncate+0x11a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800857c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	429a      	cmp	r2, r3
 8008584:	d218      	bcs.n	80085b8 <f_truncate+0x11a>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008592:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008596:	4619      	mov	r1, r3
 8008598:	f7fd fb4a 	bl	8005c30 <put_fat>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d108      	bne.n	80085b8 <f_truncate+0x11a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fd fc4c 	bl	8005e4c <remove_chain>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d121      	bne.n	8008602 <f_truncate+0x164>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80085c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01a      	beq.n	8008602 <f_truncate+0x164>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085d2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80085de:	2301      	movs	r3, #1
 80085e0:	f7fc fe86 	bl	80052f0 <disk_write>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <f_truncate+0x152>
					res = FR_DISK_ERR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	73fb      	strb	r3, [r7, #15]
 80085ee:	e008      	b.n	8008602 <f_truncate+0x164>
				else
					fp->flag &= ~FA__DIRTY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80085f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <f_truncate+0x172>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	7bfa      	ldrb	r2, [r7, #15]
 800860c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
	}

	LEAVE_FF(fp->fs, res);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008616:	7bfa      	ldrb	r2, [r7, #15]
 8008618:	4611      	mov	r1, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f7fc ff31 	bl	8005482 <unlock_fs>
 8008620:	7bfb      	ldrb	r3, [r7, #15]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008642:	4b1f      	ldr	r3, [pc, #124]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008644:	7a5b      	ldrb	r3, [r3, #9]
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b01      	cmp	r3, #1
 800864a:	d831      	bhi.n	80086b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800864c:	4b1c      	ldr	r3, [pc, #112]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 800864e:	7a5b      	ldrb	r3, [r3, #9]
 8008650:	b2db      	uxtb	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	4b1a      	ldr	r3, [pc, #104]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008656:	2100      	movs	r1, #0
 8008658:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800865a:	4b19      	ldr	r3, [pc, #100]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 800865c:	7a5b      	ldrb	r3, [r3, #9]
 800865e:	b2db      	uxtb	r3, r3
 8008660:	4a17      	ldr	r2, [pc, #92]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800866a:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 800866c:	7a5b      	ldrb	r3, [r3, #9]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008674:	4413      	add	r3, r2
 8008676:	79fa      	ldrb	r2, [r7, #7]
 8008678:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800867a:	4b11      	ldr	r3, [pc, #68]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 800867c:	7a5b      	ldrb	r3, [r3, #9]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	b2d1      	uxtb	r1, r2
 8008684:	4a0e      	ldr	r2, [pc, #56]	; (80086c0 <FATFS_LinkDriverEx+0x94>)
 8008686:	7251      	strb	r1, [r2, #9]
 8008688:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800868a:	7dbb      	ldrb	r3, [r7, #22]
 800868c:	3330      	adds	r3, #48	; 0x30
 800868e:	b2da      	uxtb	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	3301      	adds	r3, #1
 8008698:	223a      	movs	r2, #58	; 0x3a
 800869a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3302      	adds	r3, #2
 80086a0:	222f      	movs	r2, #47	; 0x2f
 80086a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	3303      	adds	r3, #3
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	200004bc 	.word	0x200004bc

080086c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80086ce:	2200      	movs	r2, #0
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff ffaa 	bl	800862c <FATFS_LinkDriverEx>
 80086d8:	4603      	mov	r3, r0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b086      	sub	sp, #24
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	4603      	mov	r3, r0
 80086ea:	6039      	str	r1, [r7, #0]
 80086ec:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	2300      	movs	r3, #0
 80086f4:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 80086f6:	f107 030c 	add.w	r3, r7, #12
 80086fa:	2101      	movs	r1, #1
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 f8e5 	bl	80088cc <osSemaphoreCreate>
 8008702:	4602      	mov	r2, r0
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	bf14      	ite	ne
 8008710:	2301      	movne	r3, #1
 8008712:	2300      	moveq	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	617b      	str	r3, [r7, #20]
  
  return ret;
 8008718:	697b      	ldr	r3, [r7, #20]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f984 	bl	8008a38 <osSemaphoreDelete>
  return 1;
 8008730:	2301      	movs	r3, #1
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008746:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8f0 	bl	8008930 <osSemaphoreWait>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <ff_req_grant+0x20>
  {
    ret = 1;
 8008756:	2301      	movs	r3, #1
 8008758:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800875a:	68fb      	ldr	r3, [r7, #12]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f92d 	bl	80089cc <osSemaphoreRelease>
}
 8008772:	bf00      	nop
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	4603      	mov	r3, r0
 8008782:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008788:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800878c:	2b84      	cmp	r3, #132	; 0x84
 800878e:	d005      	beq.n	800879c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008790:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	3303      	adds	r3, #3
 800879a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800879c:	68fb      	ldr	r3, [r7, #12]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087b0:	f3ef 8305 	mrs	r3, IPSR
 80087b4:	607b      	str	r3, [r7, #4]
  return(result);
 80087b6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bf14      	ite	ne
 80087bc:	2301      	movne	r3, #1
 80087be:	2300      	moveq	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80087d2:	f001 fbdb 	bl	8009f8c <vTaskStartScheduler>
  
  return osOK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	bd80      	pop	{r7, pc}

080087dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80087dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087de:	b089      	sub	sp, #36	; 0x24
 80087e0:	af04      	add	r7, sp, #16
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d020      	beq.n	8008830 <osThreadCreate+0x54>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d01c      	beq.n	8008830 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685c      	ldr	r4, [r3, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681d      	ldr	r5, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691e      	ldr	r6, [r3, #16]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff ffb6 	bl	800877a <makeFreeRtosPriority>
 800880e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008818:	9202      	str	r2, [sp, #8]
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	9100      	str	r1, [sp, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	4632      	mov	r2, r6
 8008822:	4629      	mov	r1, r5
 8008824:	4620      	mov	r0, r4
 8008826:	f001 f83d 	bl	80098a4 <xTaskCreateStatic>
 800882a:	4603      	mov	r3, r0
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	e01c      	b.n	800886a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685c      	ldr	r4, [r3, #4]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800883c:	b29e      	uxth	r6, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff ff98 	bl	800877a <makeFreeRtosPriority>
 800884a:	4602      	mov	r2, r0
 800884c:	f107 030c 	add.w	r3, r7, #12
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	9200      	str	r2, [sp, #0]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	4632      	mov	r2, r6
 8008858:	4629      	mov	r1, r5
 800885a:	4620      	mov	r0, r4
 800885c:	f001 f87e 	bl	800995c <xTaskCreate>
 8008860:	4603      	mov	r3, r0
 8008862:	2b01      	cmp	r3, #1
 8008864:	d001      	beq.n	800886a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	e000      	b.n	800886c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800886a:	68fb      	ldr	r3, [r7, #12]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008874 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <osDelay+0x16>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	e000      	b.n	800888c <osDelay+0x18>
 800888a:	2301      	movs	r3, #1
 800888c:	4618      	mov	r0, r3
 800888e:	f001 f9ab 	bl	8009be8 <vTaskDelay>
  
  return osOK;
 8008892:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d007      	beq.n	80088bc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	4619      	mov	r1, r3
 80088b2:	2001      	movs	r0, #1
 80088b4:	f000 fb4c 	bl	8008f50 <xQueueCreateMutexStatic>
 80088b8:	4603      	mov	r3, r0
 80088ba:	e003      	b.n	80088c4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80088bc:	2001      	movs	r0, #1
 80088be:	f000 fb2f 	bl	8008f20 <xQueueCreateMutex>
 80088c2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00f      	beq.n	80088fe <osSemaphoreCreate+0x32>
    if (count == 1) {
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d10a      	bne.n	80088fa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2203      	movs	r2, #3
 80088ea:	9200      	str	r2, [sp, #0]
 80088ec:	2200      	movs	r2, #0
 80088ee:	2100      	movs	r1, #0
 80088f0:	2001      	movs	r0, #1
 80088f2:	f000 fa27 	bl	8008d44 <xQueueGenericCreateStatic>
 80088f6:	4603      	mov	r3, r0
 80088f8:	e016      	b.n	8008928 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e014      	b.n	8008928 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d110      	bne.n	8008926 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008904:	2203      	movs	r2, #3
 8008906:	2100      	movs	r1, #0
 8008908:	2001      	movs	r0, #1
 800890a:	f000 fa92 	bl	8008e32 <xQueueGenericCreate>
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d005      	beq.n	8008922 <osSemaphoreCreate+0x56>
 8008916:	2300      	movs	r3, #0
 8008918:	2200      	movs	r2, #0
 800891a:	2100      	movs	r1, #0
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 fb33 	bl	8008f88 <xQueueGenericSend>
      return sema;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	e000      	b.n	8008928 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008926:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800893a:	2300      	movs	r3, #0
 800893c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	e03a      	b.n	80089be <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d103      	bne.n	800895c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008954:	f04f 33ff 	mov.w	r3, #4294967295
 8008958:	60fb      	str	r3, [r7, #12]
 800895a:	e009      	b.n	8008970 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d006      	beq.n	8008970 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <osSemaphoreWait+0x40>
      ticks = 1;
 800896c:	2301      	movs	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008970:	f7ff ff1b 	bl	80087aa <inHandlerMode>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d017      	beq.n	80089aa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800897a:	f107 0308 	add.w	r3, r7, #8
 800897e:	461a      	mov	r2, r3
 8008980:	2100      	movs	r1, #0
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fd98 	bl	80094b8 <xQueueReceiveFromISR>
 8008988:	4603      	mov	r3, r0
 800898a:	2b01      	cmp	r3, #1
 800898c:	d001      	beq.n	8008992 <osSemaphoreWait+0x62>
      return osErrorOS;
 800898e:	23ff      	movs	r3, #255	; 0xff
 8008990:	e015      	b.n	80089be <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d011      	beq.n	80089bc <osSemaphoreWait+0x8c>
 8008998:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <osSemaphoreWait+0x98>)
 800899a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	e008      	b.n	80089bc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80089aa:	68f9      	ldr	r1, [r7, #12]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fc77 	bl	80092a0 <xQueueSemaphoreTake>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d001      	beq.n	80089bc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80089b8:	23ff      	movs	r3, #255	; 0xff
 80089ba:	e000      	b.n	80089be <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	e000ed04 	.word	0xe000ed04

080089cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80089d8:	2300      	movs	r3, #0
 80089da:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80089dc:	f7ff fee5 	bl	80087aa <inHandlerMode>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d016      	beq.n	8008a14 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80089e6:	f107 0308 	add.w	r3, r7, #8
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fbc9 	bl	8009184 <xQueueGiveFromISR>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d001      	beq.n	80089fc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80089f8:	23ff      	movs	r3, #255	; 0xff
 80089fa:	e017      	b.n	8008a2c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d013      	beq.n	8008a2a <osSemaphoreRelease+0x5e>
 8008a02:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <osSemaphoreRelease+0x68>)
 8008a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	e00a      	b.n	8008a2a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008a14:	2300      	movs	r3, #0
 8008a16:	2200      	movs	r2, #0
 8008a18:	2100      	movs	r1, #0
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fab4 	bl	8008f88 <xQueueGenericSend>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d001      	beq.n	8008a2a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008a26:	23ff      	movs	r3, #255	; 0xff
 8008a28:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	e000ed04 	.word	0xe000ed04

08008a38 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008a40:	f7ff feb3 	bl	80087aa <inHandlerMode>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008a4a:	2382      	movs	r3, #130	; 0x82
 8008a4c:	e003      	b.n	8008a56 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fdb2 	bl	80095b8 <vQueueDelete>

  return osOK; 
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008a5e:	b590      	push	{r4, r7, lr}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af02      	add	r7, sp, #8
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d011      	beq.n	8008a94 <osMessageCreate+0x36>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00d      	beq.n	8008a94 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6859      	ldr	r1, [r3, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	2400      	movs	r4, #0
 8008a8a:	9400      	str	r4, [sp, #0]
 8008a8c:	f000 f95a 	bl	8008d44 <xQueueGenericCreateStatic>
 8008a90:	4603      	mov	r3, r0
 8008a92:	e008      	b.n	8008aa6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f000 f9c7 	bl	8008e32 <xQueueGenericCreate>
 8008aa4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd90      	pop	{r4, r7, pc}

08008aae <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 f8ca 	bl	8009c50 <vTaskSuspend>
  
  return osOK;
 8008abc:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8008ad0:	f7ff fe6b 	bl	80087aa <inHandlerMode>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00e      	beq.n	8008af8 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 f9e4 	bl	8009ea8 <xTaskResumeFromISR>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d10b      	bne.n	8008afe <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8008ae6:	4b08      	ldr	r3, [pc, #32]	; (8008b08 <osThreadResume+0x40>)
 8008ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	e002      	b.n	8008afe <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 f977 	bl	8009dec <vTaskResume>
  }
  return osOK;
 8008afe:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f103 0208 	add.w	r2, r3, #8
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f103 0208 	add.w	r2, r3, #8
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f103 0208 	add.w	r2, r3, #8
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	601a      	str	r2, [r3, #0]
}
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bc4:	d103      	bne.n	8008bce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	e00c      	b.n	8008be8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	e002      	b.n	8008bdc <vListInsert+0x2e>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d2f6      	bcs.n	8008bd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	601a      	str	r2, [r3, #0]
}
 8008c14:	bf00      	nop
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6892      	ldr	r2, [r2, #8]
 8008c36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6852      	ldr	r2, [r2, #4]
 8008c40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d103      	bne.n	8008c54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689a      	ldr	r2, [r3, #8]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	1e5a      	subs	r2, r3, #1
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10a      	bne.n	8008c9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c9a:	bf00      	nop
 8008c9c:	e7fe      	b.n	8008c9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c9e:	f002 f901 	bl	800aea4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cae:	fb01 f303 	mul.w	r3, r1, r3
 8008cb2:	441a      	add	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	68f9      	ldr	r1, [r7, #12]
 8008cd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cd4:	fb01 f303 	mul.w	r3, r1, r3
 8008cd8:	441a      	add	r2, r3
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	22ff      	movs	r2, #255	; 0xff
 8008ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	22ff      	movs	r2, #255	; 0xff
 8008cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d114      	bne.n	8008d1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01a      	beq.n	8008d32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3310      	adds	r3, #16
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 fb9b 	bl	800a43c <xTaskRemoveFromEventList>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d012      	beq.n	8008d32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d0c:	4b0c      	ldr	r3, [pc, #48]	; (8008d40 <xQueueGenericReset+0xcc>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	e009      	b.n	8008d32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3310      	adds	r3, #16
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff fef2 	bl	8008b0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff feed 	bl	8008b0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d32:	f002 f8e7 	bl	800af04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d36:	2301      	movs	r3, #1
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08e      	sub	sp, #56	; 0x38
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d6a:	bf00      	nop
 8008d6c:	e7fe      	b.n	8008d6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <xQueueGenericCreateStatic+0x52>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <xQueueGenericCreateStatic+0x56>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e000      	b.n	8008d9c <xQueueGenericCreateStatic+0x58>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	623b      	str	r3, [r7, #32]
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <xQueueGenericCreateStatic+0x7e>
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <xQueueGenericCreateStatic+0x82>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <xQueueGenericCreateStatic+0x84>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	61fb      	str	r3, [r7, #28]
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008de2:	2348      	movs	r3, #72	; 0x48
 8008de4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	2b48      	cmp	r3, #72	; 0x48
 8008dea:	d00a      	beq.n	8008e02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	61bb      	str	r3, [r7, #24]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00d      	beq.n	8008e28 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 f843 	bl	8008eae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3730      	adds	r7, #48	; 0x30
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b08a      	sub	sp, #40	; 0x28
 8008e36:	af02      	add	r7, sp, #8
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	613b      	str	r3, [r7, #16]
}
 8008e58:	bf00      	nop
 8008e5a:	e7fe      	b.n	8008e5a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d102      	bne.n	8008e68 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
 8008e66:	e004      	b.n	8008e72 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	fb02 f303 	mul.w	r3, r2, r3
 8008e70:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	3348      	adds	r3, #72	; 0x48
 8008e76:	4618      	mov	r0, r3
 8008e78:	f002 f936 	bl	800b0e8 <pvPortMalloc>
 8008e7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00f      	beq.n	8008ea4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	3348      	adds	r3, #72	; 0x48
 8008e88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e92:	79fa      	ldrb	r2, [r7, #7]
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	697a      	ldr	r2, [r7, #20]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 f805 	bl	8008eae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008ea4:	69bb      	ldr	r3, [r7, #24]
	}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
 8008eba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	e002      	b.n	8008ed0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008edc:	2101      	movs	r1, #1
 8008ede:	69b8      	ldr	r0, [r7, #24]
 8008ee0:	f7ff fec8 	bl	8008c74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00e      	beq.n	8008f18 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2200      	movs	r2, #0
 8008f10:	2100      	movs	r1, #0
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f838 	bl	8008f88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	617b      	str	r3, [r7, #20]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	461a      	mov	r2, r3
 8008f36:	6939      	ldr	r1, [r7, #16]
 8008f38:	6978      	ldr	r0, [r7, #20]
 8008f3a:	f7ff ff7a 	bl	8008e32 <xQueueGenericCreate>
 8008f3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f7ff ffd3 	bl	8008eec <prvInitialiseMutex>

		return pxNewQueue;
 8008f46:	68fb      	ldr	r3, [r7, #12]
	}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	4603      	mov	r3, r0
 8008f58:	6039      	str	r1, [r7, #0]
 8008f5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	2300      	movs	r3, #0
 8008f62:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	6939      	ldr	r1, [r7, #16]
 8008f6e:	6978      	ldr	r0, [r7, #20]
 8008f70:	f7ff fee8 	bl	8008d44 <xQueueGenericCreateStatic>
 8008f74:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff ffb8 	bl	8008eec <prvInitialiseMutex>

		return pxNewQueue;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
	}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08e      	sub	sp, #56	; 0x38
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f96:	2300      	movs	r3, #0
 8008f98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <xQueueGenericSend+0x32>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d103      	bne.n	8008fc8 <xQueueGenericSend+0x40>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <xQueueGenericSend+0x44>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e000      	b.n	8008fce <xQueueGenericSend+0x46>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <xQueueGenericSend+0x60>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d103      	bne.n	8008ff6 <xQueueGenericSend+0x6e>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <xQueueGenericSend+0x72>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <xQueueGenericSend+0x74>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10a      	bne.n	8009016 <xQueueGenericSend+0x8e>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	623b      	str	r3, [r7, #32]
}
 8009012:	bf00      	nop
 8009014:	e7fe      	b.n	8009014 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009016:	f001 fbd7 	bl	800a7c8 <xTaskGetSchedulerState>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <xQueueGenericSend+0x9e>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <xQueueGenericSend+0xa2>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <xQueueGenericSend+0xa4>
 800902a:	2300      	movs	r3, #0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <xQueueGenericSend+0xbe>
	__asm volatile
 8009030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009034:	f383 8811 	msr	BASEPRI, r3
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	f3bf 8f4f 	dsb	sy
 8009040:	61fb      	str	r3, [r7, #28]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009046:	f001 ff2d 	bl	800aea4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009052:	429a      	cmp	r2, r3
 8009054:	d302      	bcc.n	800905c <xQueueGenericSend+0xd4>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d129      	bne.n	80090b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009062:	f000 fae4 	bl	800962e <prvCopyDataToQueue>
 8009066:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	d010      	beq.n	8009092 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	3324      	adds	r3, #36	; 0x24
 8009074:	4618      	mov	r0, r3
 8009076:	f001 f9e1 	bl	800a43c <xTaskRemoveFromEventList>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d013      	beq.n	80090a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009080:	4b3f      	ldr	r3, [pc, #252]	; (8009180 <xQueueGenericSend+0x1f8>)
 8009082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	e00a      	b.n	80090a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009094:	2b00      	cmp	r3, #0
 8009096:	d007      	beq.n	80090a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009098:	4b39      	ldr	r3, [pc, #228]	; (8009180 <xQueueGenericSend+0x1f8>)
 800909a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090a8:	f001 ff2c 	bl	800af04 <vPortExitCritical>
				return pdPASS;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e063      	b.n	8009178 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d103      	bne.n	80090be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090b6:	f001 ff25 	bl	800af04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	e05c      	b.n	8009178 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d106      	bne.n	80090d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090c4:	f107 0314 	add.w	r3, r7, #20
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 fa19 	bl	800a500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090ce:	2301      	movs	r3, #1
 80090d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090d2:	f001 ff17 	bl	800af04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090d6:	f000 ffc3 	bl	800a060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090da:	f001 fee3 	bl	800aea4 <vPortEnterCritical>
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090e4:	b25b      	sxtb	r3, r3
 80090e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ea:	d103      	bne.n	80090f4 <xQueueGenericSend+0x16c>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090fa:	b25b      	sxtb	r3, r3
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d103      	bne.n	800910a <xQueueGenericSend+0x182>
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	2200      	movs	r2, #0
 8009106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800910a:	f001 fefb 	bl	800af04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800910e:	1d3a      	adds	r2, r7, #4
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f001 fa08 	bl	800a52c <xTaskCheckForTimeOut>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d124      	bne.n	800916c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009122:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009124:	f000 fb7b 	bl	800981e <prvIsQueueFull>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d018      	beq.n	8009160 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	3310      	adds	r3, #16
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f001 f95c 	bl	800a3f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800913c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800913e:	f000 fb06 	bl	800974e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009142:	f000 ff9b 	bl	800a07c <xTaskResumeAll>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	f47f af7c 	bne.w	8009046 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <xQueueGenericSend+0x1f8>)
 8009150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	e772      	b.n	8009046 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009162:	f000 faf4 	bl	800974e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009166:	f000 ff89 	bl	800a07c <xTaskResumeAll>
 800916a:	e76c      	b.n	8009046 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800916c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800916e:	f000 faee 	bl	800974e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009172:	f000 ff83 	bl	800a07c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009176:	2300      	movs	r3, #0
		}
	}
}
 8009178:	4618      	mov	r0, r3
 800917a:	3738      	adds	r7, #56	; 0x38
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	e000ed04 	.word	0xe000ed04

08009184 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b08e      	sub	sp, #56	; 0x38
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	623b      	str	r3, [r7, #32]
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <xQueueGiveFromISR+0x48>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	61fb      	str	r3, [r7, #28]
}
 80091c8:	bf00      	nop
 80091ca:	e7fe      	b.n	80091ca <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <xQueueGiveFromISR+0x58>
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <xQueueGiveFromISR+0x5c>
 80091dc:	2301      	movs	r3, #1
 80091de:	e000      	b.n	80091e2 <xQueueGiveFromISR+0x5e>
 80091e0:	2300      	movs	r3, #0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10a      	bne.n	80091fc <xQueueGiveFromISR+0x78>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	61bb      	str	r3, [r7, #24]
}
 80091f8:	bf00      	nop
 80091fa:	e7fe      	b.n	80091fa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091fc:	f001 ff34 	bl	800b068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009200:	f3ef 8211 	mrs	r2, BASEPRI
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	617a      	str	r2, [r7, #20]
 8009216:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009218:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800921a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009220:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009228:	429a      	cmp	r2, r3
 800922a:	d22b      	bcs.n	8009284 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800923e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d112      	bne.n	800926e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d016      	beq.n	800927e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	3324      	adds	r3, #36	; 0x24
 8009254:	4618      	mov	r0, r3
 8009256:	f001 f8f1 	bl	800a43c <xTaskRemoveFromEventList>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00e      	beq.n	800927e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2201      	movs	r2, #1
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	e007      	b.n	800927e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800926e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009272:	3301      	adds	r3, #1
 8009274:	b2db      	uxtb	r3, r3
 8009276:	b25a      	sxtb	r2, r3
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800927e:	2301      	movs	r3, #1
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
 8009282:	e001      	b.n	8009288 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009284:	2300      	movs	r3, #0
 8009286:	637b      	str	r3, [r7, #52]	; 0x34
 8009288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009292:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009296:	4618      	mov	r0, r3
 8009298:	3738      	adds	r7, #56	; 0x38
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
	...

080092a0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08e      	sub	sp, #56	; 0x38
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80092aa:	2300      	movs	r3, #0
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	623b      	str	r3, [r7, #32]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80092d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	61fb      	str	r3, [r7, #28]
}
 80092ec:	bf00      	nop
 80092ee:	e7fe      	b.n	80092ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092f0:	f001 fa6a 	bl	800a7c8 <xTaskGetSchedulerState>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <xQueueSemaphoreTake+0x60>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <xQueueSemaphoreTake+0x64>
 8009300:	2301      	movs	r3, #1
 8009302:	e000      	b.n	8009306 <xQueueSemaphoreTake+0x66>
 8009304:	2300      	movs	r3, #0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10a      	bne.n	8009320 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	61bb      	str	r3, [r7, #24]
}
 800931c:	bf00      	nop
 800931e:	e7fe      	b.n	800931e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009320:	f001 fdc0 	bl	800aea4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800932a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932c:	2b00      	cmp	r3, #0
 800932e:	d024      	beq.n	800937a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	1e5a      	subs	r2, r3, #1
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d104      	bne.n	800934a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009340:	f001 fc0c 	bl	800ab5c <pvTaskIncrementMutexHeldCount>
 8009344:	4602      	mov	r2, r0
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00f      	beq.n	8009372 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	3310      	adds	r3, #16
 8009356:	4618      	mov	r0, r3
 8009358:	f001 f870 	bl	800a43c <xTaskRemoveFromEventList>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d007      	beq.n	8009372 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009362:	4b54      	ldr	r3, [pc, #336]	; (80094b4 <xQueueSemaphoreTake+0x214>)
 8009364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009372:	f001 fdc7 	bl	800af04 <vPortExitCritical>
				return pdPASS;
 8009376:	2301      	movs	r3, #1
 8009378:	e097      	b.n	80094aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d111      	bne.n	80093a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	617b      	str	r3, [r7, #20]
}
 8009398:	bf00      	nop
 800939a:	e7fe      	b.n	800939a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800939c:	f001 fdb2 	bl	800af04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e082      	b.n	80094aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093aa:	f107 030c 	add.w	r3, r7, #12
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 f8a6 	bl	800a500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093b8:	f001 fda4 	bl	800af04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093bc:	f000 fe50 	bl	800a060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093c0:	f001 fd70 	bl	800aea4 <vPortEnterCritical>
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093ca:	b25b      	sxtb	r3, r3
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d0:	d103      	bne.n	80093da <xQueueSemaphoreTake+0x13a>
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093e0:	b25b      	sxtb	r3, r3
 80093e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e6:	d103      	bne.n	80093f0 <xQueueSemaphoreTake+0x150>
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093f0:	f001 fd88 	bl	800af04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093f4:	463a      	mov	r2, r7
 80093f6:	f107 030c 	add.w	r3, r7, #12
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 f895 	bl	800a52c <xTaskCheckForTimeOut>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d132      	bne.n	800946e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800940a:	f000 f9f2 	bl	80097f2 <prvIsQueueEmpty>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d026      	beq.n	8009462 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800941c:	f001 fd42 	bl	800aea4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f9ed 	bl	800a804 <xTaskPriorityInherit>
 800942a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800942c:	f001 fd6a 	bl	800af04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	3324      	adds	r3, #36	; 0x24
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f000 ffdb 	bl	800a3f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800943e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009440:	f000 f985 	bl	800974e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009444:	f000 fe1a 	bl	800a07c <xTaskResumeAll>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	f47f af68 	bne.w	8009320 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009450:	4b18      	ldr	r3, [pc, #96]	; (80094b4 <xQueueSemaphoreTake+0x214>)
 8009452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	e75e      	b.n	8009320 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009464:	f000 f973 	bl	800974e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009468:	f000 fe08 	bl	800a07c <xTaskResumeAll>
 800946c:	e758      	b.n	8009320 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800946e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009470:	f000 f96d 	bl	800974e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009474:	f000 fe02 	bl	800a07c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800947a:	f000 f9ba 	bl	80097f2 <prvIsQueueEmpty>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	f43f af4d 	beq.w	8009320 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00d      	beq.n	80094a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800948c:	f001 fd0a 	bl	800aea4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009492:	f000 f8b4 	bl	80095fe <prvGetDisinheritPriorityAfterTimeout>
 8009496:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800949e:	4618      	mov	r0, r3
 80094a0:	f001 fabc 	bl	800aa1c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80094a4:	f001 fd2e 	bl	800af04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3738      	adds	r7, #56	; 0x38
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08e      	sub	sp, #56	; 0x38
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10a      	bne.n	80094e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	623b      	str	r3, [r7, #32]
}
 80094e0:	bf00      	nop
 80094e2:	e7fe      	b.n	80094e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d103      	bne.n	80094f2 <xQueueReceiveFromISR+0x3a>
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <xQueueReceiveFromISR+0x3e>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e000      	b.n	80094f8 <xQueueReceiveFromISR+0x40>
 80094f6:	2300      	movs	r3, #0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	61fb      	str	r3, [r7, #28]
}
 800950e:	bf00      	nop
 8009510:	e7fe      	b.n	8009510 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009512:	f001 fda9 	bl	800b068 <vPortValidateInterruptPriority>
	__asm volatile
 8009516:	f3ef 8211 	mrs	r2, BASEPRI
 800951a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951e:	f383 8811 	msr	BASEPRI, r3
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	61ba      	str	r2, [r7, #24]
 800952c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800952e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953a:	2b00      	cmp	r3, #0
 800953c:	d02f      	beq.n	800959e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800953e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009548:	68b9      	ldr	r1, [r7, #8]
 800954a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800954c:	f000 f8d9 	bl	8009702 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	1e5a      	subs	r2, r3, #1
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800955c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009560:	d112      	bne.n	8009588 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d016      	beq.n	8009598 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800956a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956c:	3310      	adds	r3, #16
 800956e:	4618      	mov	r0, r3
 8009570:	f000 ff64 	bl	800a43c <xTaskRemoveFromEventList>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00e      	beq.n	8009598 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00b      	beq.n	8009598 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	e007      	b.n	8009598 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800958c:	3301      	adds	r3, #1
 800958e:	b2db      	uxtb	r3, r3
 8009590:	b25a      	sxtb	r2, r3
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009598:	2301      	movs	r3, #1
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
 800959c:	e001      	b.n	80095a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800959e:	2300      	movs	r3, #0
 80095a0:	637b      	str	r3, [r7, #52]	; 0x34
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f383 8811 	msr	BASEPRI, r3
}
 80095ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3738      	adds	r7, #56	; 0x38
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <vQueueDelete+0x28>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	60bb      	str	r3, [r7, #8]
}
 80095dc:	bf00      	nop
 80095de:	e7fe      	b.n	80095de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 f935 	bl	8009850 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d102      	bne.n	80095f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f001 fe3d 	bl	800b270 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80095f6:	bf00      	nop
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d006      	beq.n	800961c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f1c3 0307 	rsb	r3, r3, #7
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	e001      	b.n	8009620 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009620:	68fb      	ldr	r3, [r7, #12]
	}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b086      	sub	sp, #24
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	60b9      	str	r1, [r7, #8]
 8009638:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009642:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10d      	bne.n	8009668 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d14d      	bne.n	80096f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	4618      	mov	r0, r3
 800965a:	f001 f959 	bl	800a910 <xTaskPriorityDisinherit>
 800965e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	605a      	str	r2, [r3, #4]
 8009666:	e043      	b.n	80096f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d119      	bne.n	80096a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6898      	ldr	r0, [r3, #8]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	461a      	mov	r2, r3
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	f001 ff4b 	bl	800b514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689a      	ldr	r2, [r3, #8]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	441a      	add	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	429a      	cmp	r2, r3
 8009696:	d32b      	bcc.n	80096f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	609a      	str	r2, [r3, #8]
 80096a0:	e026      	b.n	80096f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68d8      	ldr	r0, [r3, #12]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	461a      	mov	r2, r3
 80096ac:	68b9      	ldr	r1, [r7, #8]
 80096ae:	f001 ff31 	bl	800b514 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	425b      	negs	r3, r3
 80096bc:	441a      	add	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	68da      	ldr	r2, [r3, #12]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d207      	bcs.n	80096de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	425b      	negs	r3, r3
 80096d8:	441a      	add	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d105      	bne.n	80096f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	1c5a      	adds	r2, r3, #1
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096f8:	697b      	ldr	r3, [r7, #20]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	d018      	beq.n	8009746 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68da      	ldr	r2, [r3, #12]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	441a      	add	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	429a      	cmp	r2, r3
 800972c:	d303      	bcc.n	8009736 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	68d9      	ldr	r1, [r3, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	461a      	mov	r2, r3
 8009740:	6838      	ldr	r0, [r7, #0]
 8009742:	f001 fee7 	bl	800b514 <memcpy>
	}
}
 8009746:	bf00      	nop
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009756:	f001 fba5 	bl	800aea4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009760:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009762:	e011      	b.n	8009788 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009768:	2b00      	cmp	r3, #0
 800976a:	d012      	beq.n	8009792 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3324      	adds	r3, #36	; 0x24
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fe63 	bl	800a43c <xTaskRemoveFromEventList>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800977c:	f000 ff38 	bl	800a5f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	3b01      	subs	r3, #1
 8009784:	b2db      	uxtb	r3, r3
 8009786:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800978c:	2b00      	cmp	r3, #0
 800978e:	dce9      	bgt.n	8009764 <prvUnlockQueue+0x16>
 8009790:	e000      	b.n	8009794 <prvUnlockQueue+0x46>
					break;
 8009792:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	22ff      	movs	r2, #255	; 0xff
 8009798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800979c:	f001 fbb2 	bl	800af04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80097a0:	f001 fb80 	bl	800aea4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097ac:	e011      	b.n	80097d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d012      	beq.n	80097dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3310      	adds	r3, #16
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fe3e 	bl	800a43c <xTaskRemoveFromEventList>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80097c6:	f000 ff13 	bl	800a5f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80097d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	dce9      	bgt.n	80097ae <prvUnlockQueue+0x60>
 80097da:	e000      	b.n	80097de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	22ff      	movs	r2, #255	; 0xff
 80097e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80097e6:	f001 fb8d 	bl	800af04 <vPortExitCritical>
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097fa:	f001 fb53 	bl	800aea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009806:	2301      	movs	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]
 800980a:	e001      	b.n	8009810 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800980c:	2300      	movs	r3, #0
 800980e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009810:	f001 fb78 	bl	800af04 <vPortExitCritical>

	return xReturn;
 8009814:	68fb      	ldr	r3, [r7, #12]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009826:	f001 fb3d 	bl	800aea4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009832:	429a      	cmp	r2, r3
 8009834:	d102      	bne.n	800983c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009836:	2301      	movs	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	e001      	b.n	8009840 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800983c:	2300      	movs	r3, #0
 800983e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009840:	f001 fb60 	bl	800af04 <vPortExitCritical>

	return xReturn;
 8009844:	68fb      	ldr	r3, [r7, #12]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	e016      	b.n	800988c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800985e:	4a10      	ldr	r2, [pc, #64]	; (80098a0 <vQueueUnregisterQueue+0x50>)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	4413      	add	r3, r2
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	429a      	cmp	r2, r3
 800986c:	d10b      	bne.n	8009886 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800986e:	4a0c      	ldr	r2, [pc, #48]	; (80098a0 <vQueueUnregisterQueue+0x50>)
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2100      	movs	r1, #0
 8009874:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009878:	4a09      	ldr	r2, [pc, #36]	; (80098a0 <vQueueUnregisterQueue+0x50>)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	4413      	add	r3, r2
 8009880:	2200      	movs	r2, #0
 8009882:	605a      	str	r2, [r3, #4]
				break;
 8009884:	e006      	b.n	8009894 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b07      	cmp	r3, #7
 8009890:	d9e5      	bls.n	800985e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009892:	bf00      	nop
 8009894:	bf00      	nop
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	200004c8 	.word	0x200004c8

080098a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08e      	sub	sp, #56	; 0x38
 80098a8:	af04      	add	r7, sp, #16
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10a      	bne.n	80098ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	623b      	str	r3, [r7, #32]
}
 80098ca:	bf00      	nop
 80098cc:	e7fe      	b.n	80098cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80098ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10a      	bne.n	80098ea <xTaskCreateStatic+0x46>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	61fb      	str	r3, [r7, #28]
}
 80098e6:	bf00      	nop
 80098e8:	e7fe      	b.n	80098e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80098ea:	23b4      	movs	r3, #180	; 0xb4
 80098ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2bb4      	cmp	r3, #180	; 0xb4
 80098f2:	d00a      	beq.n	800990a <xTaskCreateStatic+0x66>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	61bb      	str	r3, [r7, #24]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	2b00      	cmp	r3, #0
 800990e:	d01e      	beq.n	800994e <xTaskCreateStatic+0xaa>
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	2b00      	cmp	r3, #0
 8009914:	d01b      	beq.n	800994e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800991e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	2202      	movs	r2, #2
 8009924:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009928:	2300      	movs	r3, #0
 800992a:	9303      	str	r3, [sp, #12]
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	9302      	str	r3, [sp, #8]
 8009930:	f107 0314 	add.w	r3, r7, #20
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	68b9      	ldr	r1, [r7, #8]
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 f851 	bl	80099e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009948:	f000 f8e4 	bl	8009b14 <prvAddNewTaskToReadyList>
 800994c:	e001      	b.n	8009952 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009952:	697b      	ldr	r3, [r7, #20]
	}
 8009954:	4618      	mov	r0, r3
 8009956:	3728      	adds	r7, #40	; 0x28
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800995c:	b580      	push	{r7, lr}
 800995e:	b08c      	sub	sp, #48	; 0x30
 8009960:	af04      	add	r7, sp, #16
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	603b      	str	r3, [r7, #0]
 8009968:	4613      	mov	r3, r2
 800996a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800996c:	88fb      	ldrh	r3, [r7, #6]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4618      	mov	r0, r3
 8009972:	f001 fbb9 	bl	800b0e8 <pvPortMalloc>
 8009976:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00e      	beq.n	800999c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800997e:	20b4      	movs	r0, #180	; 0xb4
 8009980:	f001 fbb2 	bl	800b0e8 <pvPortMalloc>
 8009984:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	631a      	str	r2, [r3, #48]	; 0x30
 8009992:	e005      	b.n	80099a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009994:	6978      	ldr	r0, [r7, #20]
 8009996:	f001 fc6b 	bl	800b270 <vPortFree>
 800999a:	e001      	b.n	80099a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d017      	beq.n	80099d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099ae:	88fa      	ldrh	r2, [r7, #6]
 80099b0:	2300      	movs	r3, #0
 80099b2:	9303      	str	r3, [sp, #12]
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	9302      	str	r3, [sp, #8]
 80099b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 f80f 	bl	80099e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099ca:	69f8      	ldr	r0, [r7, #28]
 80099cc:	f000 f8a2 	bl	8009b14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80099d0:	2301      	movs	r3, #1
 80099d2:	61bb      	str	r3, [r7, #24]
 80099d4:	e002      	b.n	80099dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80099d6:	f04f 33ff 	mov.w	r3, #4294967295
 80099da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80099dc:	69bb      	ldr	r3, [r7, #24]
	}
 80099de:	4618      	mov	r0, r3
 80099e0:	3720      	adds	r7, #32
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009a00:	3b01      	subs	r3, #1
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	f023 0307 	bic.w	r3, r3, #7
 8009a0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	f003 0307 	and.w	r3, r3, #7
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00a      	beq.n	8009a30 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	617b      	str	r3, [r7, #20]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a30:	2300      	movs	r3, #0
 8009a32:	61fb      	str	r3, [r7, #28]
 8009a34:	e012      	b.n	8009a5c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	7819      	ldrb	r1, [r3, #0]
 8009a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	4413      	add	r3, r2
 8009a44:	3334      	adds	r3, #52	; 0x34
 8009a46:	460a      	mov	r2, r1
 8009a48:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	4413      	add	r3, r2
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d006      	beq.n	8009a64 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	2b0f      	cmp	r3, #15
 8009a60:	d9e9      	bls.n	8009a36 <prvInitialiseNewTask+0x4e>
 8009a62:	e000      	b.n	8009a66 <prvInitialiseNewTask+0x7e>
		{
			break;
 8009a64:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	2b06      	cmp	r3, #6
 8009a72:	d901      	bls.n	8009a78 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a74:	2306      	movs	r3, #6
 8009a76:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a7c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a82:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	2200      	movs	r2, #0
 8009a88:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7ff f85c 	bl	8008b4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	3318      	adds	r3, #24
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff f857 	bl	8008b4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	f1c3 0207 	rsb	r2, r3, #7
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	334c      	adds	r3, #76	; 0x4c
 8009ac8:	2260      	movs	r2, #96	; 0x60
 8009aca:	2100      	movs	r1, #0
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 fd2f 	bl	800b530 <memset>
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	4a0c      	ldr	r2, [pc, #48]	; (8009b08 <prvInitialiseNewTask+0x120>)
 8009ad6:	651a      	str	r2, [r3, #80]	; 0x50
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ada:	4a0c      	ldr	r2, [pc, #48]	; (8009b0c <prvInitialiseNewTask+0x124>)
 8009adc:	655a      	str	r2, [r3, #84]	; 0x54
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	4a0b      	ldr	r2, [pc, #44]	; (8009b10 <prvInitialiseNewTask+0x128>)
 8009ae2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	69b8      	ldr	r0, [r7, #24]
 8009aea:	f001 f8b1 	bl	800ac50 <pxPortInitialiseStack>
 8009aee:	4602      	mov	r2, r0
 8009af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009afe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b00:	bf00      	nop
 8009b02:	3720      	adds	r7, #32
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	0800c460 	.word	0x0800c460
 8009b0c:	0800c480 	.word	0x0800c480
 8009b10:	0800c440 	.word	0x0800c440

08009b14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b1c:	f001 f9c2 	bl	800aea4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b20:	4b2a      	ldr	r3, [pc, #168]	; (8009bcc <prvAddNewTaskToReadyList+0xb8>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	4a29      	ldr	r2, [pc, #164]	; (8009bcc <prvAddNewTaskToReadyList+0xb8>)
 8009b28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b2a:	4b29      	ldr	r3, [pc, #164]	; (8009bd0 <prvAddNewTaskToReadyList+0xbc>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d109      	bne.n	8009b46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b32:	4a27      	ldr	r2, [pc, #156]	; (8009bd0 <prvAddNewTaskToReadyList+0xbc>)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b38:	4b24      	ldr	r3, [pc, #144]	; (8009bcc <prvAddNewTaskToReadyList+0xb8>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d110      	bne.n	8009b62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b40:	f000 fd7a 	bl	800a638 <prvInitialiseTaskLists>
 8009b44:	e00d      	b.n	8009b62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b46:	4b23      	ldr	r3, [pc, #140]	; (8009bd4 <prvAddNewTaskToReadyList+0xc0>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d109      	bne.n	8009b62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b4e:	4b20      	ldr	r3, [pc, #128]	; (8009bd0 <prvAddNewTaskToReadyList+0xbc>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d802      	bhi.n	8009b62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b5c:	4a1c      	ldr	r2, [pc, #112]	; (8009bd0 <prvAddNewTaskToReadyList+0xbc>)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b62:	4b1d      	ldr	r3, [pc, #116]	; (8009bd8 <prvAddNewTaskToReadyList+0xc4>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3301      	adds	r3, #1
 8009b68:	4a1b      	ldr	r2, [pc, #108]	; (8009bd8 <prvAddNewTaskToReadyList+0xc4>)
 8009b6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	2201      	movs	r2, #1
 8009b72:	409a      	lsls	r2, r3
 8009b74:	4b19      	ldr	r3, [pc, #100]	; (8009bdc <prvAddNewTaskToReadyList+0xc8>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	4a18      	ldr	r2, [pc, #96]	; (8009bdc <prvAddNewTaskToReadyList+0xc8>)
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b82:	4613      	mov	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4a15      	ldr	r2, [pc, #84]	; (8009be0 <prvAddNewTaskToReadyList+0xcc>)
 8009b8c:	441a      	add	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4619      	mov	r1, r3
 8009b94:	4610      	mov	r0, r2
 8009b96:	f7fe ffe6 	bl	8008b66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b9a:	f001 f9b3 	bl	800af04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b9e:	4b0d      	ldr	r3, [pc, #52]	; (8009bd4 <prvAddNewTaskToReadyList+0xc0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00e      	beq.n	8009bc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ba6:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <prvAddNewTaskToReadyList+0xbc>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d207      	bcs.n	8009bc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009bb4:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <prvAddNewTaskToReadyList+0xd0>)
 8009bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000608 	.word	0x20000608
 8009bd0:	20000508 	.word	0x20000508
 8009bd4:	20000614 	.word	0x20000614
 8009bd8:	20000624 	.word	0x20000624
 8009bdc:	20000610 	.word	0x20000610
 8009be0:	2000050c 	.word	0x2000050c
 8009be4:	e000ed04 	.word	0xe000ed04

08009be8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d017      	beq.n	8009c2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009bfa:	4b13      	ldr	r3, [pc, #76]	; (8009c48 <vTaskDelay+0x60>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <vTaskDelay+0x30>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	60bb      	str	r3, [r7, #8]
}
 8009c14:	bf00      	nop
 8009c16:	e7fe      	b.n	8009c16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009c18:	f000 fa22 	bl	800a060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 ffb0 	bl	800ab84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c24:	f000 fa2a 	bl	800a07c <xTaskResumeAll>
 8009c28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d107      	bne.n	8009c40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c30:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <vTaskDelay+0x64>)
 8009c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c40:	bf00      	nop
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	20000630 	.word	0x20000630
 8009c4c:	e000ed04 	.word	0xe000ed04

08009c50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009c58:	f001 f924 	bl	800aea4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d102      	bne.n	8009c68 <vTaskSuspend+0x18>
 8009c62:	4b3c      	ldr	r3, [pc, #240]	; (8009d54 <vTaskSuspend+0x104>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	e000      	b.n	8009c6a <vTaskSuspend+0x1a>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe ffd5 	bl	8008c20 <uxListRemove>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d115      	bne.n	8009ca8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	4935      	ldr	r1, [pc, #212]	; (8009d58 <vTaskSuspend+0x108>)
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <vTaskSuspend+0x58>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	2201      	movs	r2, #1
 8009c98:	fa02 f303 	lsl.w	r3, r2, r3
 8009c9c:	43da      	mvns	r2, r3
 8009c9e:	4b2f      	ldr	r3, [pc, #188]	; (8009d5c <vTaskSuspend+0x10c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	4a2d      	ldr	r2, [pc, #180]	; (8009d5c <vTaskSuspend+0x10c>)
 8009ca6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d004      	beq.n	8009cba <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3318      	adds	r3, #24
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe ffb3 	bl	8008c20 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4827      	ldr	r0, [pc, #156]	; (8009d60 <vTaskSuspend+0x110>)
 8009cc2:	f7fe ff50 	bl	8008b66 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d103      	bne.n	8009cda <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8009cda:	f001 f913 	bl	800af04 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009cde:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <vTaskSuspend+0x114>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009ce6:	f001 f8dd 	bl	800aea4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8009cea:	f000 fd47 	bl	800a77c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009cee:	f001 f909 	bl	800af04 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009cf2:	4b18      	ldr	r3, [pc, #96]	; (8009d54 <vTaskSuspend+0x104>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d127      	bne.n	8009d4c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8009cfc:	4b19      	ldr	r3, [pc, #100]	; (8009d64 <vTaskSuspend+0x114>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d017      	beq.n	8009d34 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009d04:	4b18      	ldr	r3, [pc, #96]	; (8009d68 <vTaskSuspend+0x118>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00a      	beq.n	8009d22 <vTaskSuspend+0xd2>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	60bb      	str	r3, [r7, #8]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8009d22:	4b12      	ldr	r3, [pc, #72]	; (8009d6c <vTaskSuspend+0x11c>)
 8009d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d32:	e00b      	b.n	8009d4c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <vTaskSuspend+0x110>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	4b0d      	ldr	r3, [pc, #52]	; (8009d70 <vTaskSuspend+0x120>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d103      	bne.n	8009d48 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8009d40:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <vTaskSuspend+0x104>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
	}
 8009d46:	e001      	b.n	8009d4c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8009d48:	f000 faf2 	bl	800a330 <vTaskSwitchContext>
	}
 8009d4c:	bf00      	nop
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	20000508 	.word	0x20000508
 8009d58:	2000050c 	.word	0x2000050c
 8009d5c:	20000610 	.word	0x20000610
 8009d60:	200005f4 	.word	0x200005f4
 8009d64:	20000614 	.word	0x20000614
 8009d68:	20000630 	.word	0x20000630
 8009d6c:	e000ed04 	.word	0xe000ed04
 8009d70:	20000608 	.word	0x20000608

08009d74 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60fb      	str	r3, [r7, #12]
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	4a0f      	ldr	r2, [pc, #60]	; (8009de4 <prvTaskIsTaskSuspended+0x70>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d101      	bne.n	8009dae <prvTaskIsTaskSuspended+0x3a>
 8009daa:	2301      	movs	r3, #1
 8009dac:	e000      	b.n	8009db0 <prvTaskIsTaskSuspended+0x3c>
 8009dae:	2300      	movs	r3, #0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00f      	beq.n	8009dd4 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db8:	4a0b      	ldr	r2, [pc, #44]	; (8009de8 <prvTaskIsTaskSuspended+0x74>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d00a      	beq.n	8009dd4 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <prvTaskIsTaskSuspended+0x56>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <prvTaskIsTaskSuspended+0x58>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009dd4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	200005f4 	.word	0x200005f4
 8009de8:	200005c8 	.word	0x200005c8

08009dec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <vTaskResume+0x28>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	60bb      	str	r3, [r7, #8]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d039      	beq.n	8009e8e <vTaskResume+0xa2>
 8009e1a:	4b1f      	ldr	r3, [pc, #124]	; (8009e98 <vTaskResume+0xac>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d034      	beq.n	8009e8e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8009e24:	f001 f83e 	bl	800aea4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff ffa3 	bl	8009d74 <prvTaskIsTaskSuspended>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d02a      	beq.n	8009e8a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe fef1 	bl	8008c20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e42:	2201      	movs	r2, #1
 8009e44:	409a      	lsls	r2, r3
 8009e46:	4b15      	ldr	r3, [pc, #84]	; (8009e9c <vTaskResume+0xb0>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	4a13      	ldr	r2, [pc, #76]	; (8009e9c <vTaskResume+0xb0>)
 8009e4e:	6013      	str	r3, [r2, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4a10      	ldr	r2, [pc, #64]	; (8009ea0 <vTaskResume+0xb4>)
 8009e5e:	441a      	add	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4619      	mov	r1, r3
 8009e66:	4610      	mov	r0, r2
 8009e68:	f7fe fe7d 	bl	8008b66 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e70:	4b09      	ldr	r3, [pc, #36]	; (8009e98 <vTaskResume+0xac>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d307      	bcc.n	8009e8a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8009e7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <vTaskResume+0xb8>)
 8009e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8009e8a:	f001 f83b 	bl	800af04 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20000508 	.word	0x20000508
 8009e9c:	20000610 	.word	0x20000610
 8009ea0:	2000050c 	.word	0x2000050c
 8009ea4:	e000ed04 	.word	0xe000ed04

08009ea8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	; 0x28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10a      	bne.n	8009ed4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	61bb      	str	r3, [r7, #24]
}
 8009ed0:	bf00      	nop
 8009ed2:	e7fe      	b.n	8009ed2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ed4:	f001 f8c8 	bl	800b068 <vPortValidateInterruptPriority>
	__asm volatile
 8009ed8:	f3ef 8211 	mrs	r2, BASEPRI
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	617a      	str	r2, [r7, #20]
 8009eee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009ef0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ef2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009ef4:	6a38      	ldr	r0, [r7, #32]
 8009ef6:	f7ff ff3d 	bl	8009d74 <prvTaskIsTaskSuspended>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d02f      	beq.n	8009f60 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f00:	4b1d      	ldr	r3, [pc, #116]	; (8009f78 <xTaskResumeFromISR+0xd0>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d125      	bne.n	8009f54 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0c:	4b1b      	ldr	r3, [pc, #108]	; (8009f7c <xTaskResumeFromISR+0xd4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d301      	bcc.n	8009f1a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8009f16:	2301      	movs	r3, #1
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fe7e 	bl	8008c20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	2201      	movs	r2, #1
 8009f2a:	409a      	lsls	r2, r3
 8009f2c:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <xTaskResumeFromISR+0xd8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	4a13      	ldr	r2, [pc, #76]	; (8009f80 <xTaskResumeFromISR+0xd8>)
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4a10      	ldr	r2, [pc, #64]	; (8009f84 <xTaskResumeFromISR+0xdc>)
 8009f44:	441a      	add	r2, r3
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	f7fe fe0a 	bl	8008b66 <vListInsertEnd>
 8009f52:	e005      	b.n	8009f60 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	3318      	adds	r3, #24
 8009f58:	4619      	mov	r1, r3
 8009f5a:	480b      	ldr	r0, [pc, #44]	; (8009f88 <xTaskResumeFromISR+0xe0>)
 8009f5c:	f7fe fe03 	bl	8008b66 <vListInsertEnd>
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f383 8811 	msr	BASEPRI, r3
}
 8009f6a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3728      	adds	r7, #40	; 0x28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	20000630 	.word	0x20000630
 8009f7c:	20000508 	.word	0x20000508
 8009f80:	20000610 	.word	0x20000610
 8009f84:	2000050c 	.word	0x2000050c
 8009f88:	200005c8 	.word	0x200005c8

08009f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08a      	sub	sp, #40	; 0x28
 8009f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f92:	2300      	movs	r3, #0
 8009f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f9a:	463a      	mov	r2, r7
 8009f9c:	1d39      	adds	r1, r7, #4
 8009f9e:	f107 0308 	add.w	r3, r7, #8
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7f6 fdb2 	bl	8000b0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	9202      	str	r2, [sp, #8]
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	460a      	mov	r2, r1
 8009fba:	4921      	ldr	r1, [pc, #132]	; (800a040 <vTaskStartScheduler+0xb4>)
 8009fbc:	4821      	ldr	r0, [pc, #132]	; (800a044 <vTaskStartScheduler+0xb8>)
 8009fbe:	f7ff fc71 	bl	80098a4 <xTaskCreateStatic>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4a20      	ldr	r2, [pc, #128]	; (800a048 <vTaskStartScheduler+0xbc>)
 8009fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009fc8:	4b1f      	ldr	r3, [pc, #124]	; (800a048 <vTaskStartScheduler+0xbc>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	e001      	b.n	8009fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d11b      	bne.n	800a018 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	613b      	str	r3, [r7, #16]
}
 8009ff2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ff4:	4b15      	ldr	r3, [pc, #84]	; (800a04c <vTaskStartScheduler+0xc0>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	334c      	adds	r3, #76	; 0x4c
 8009ffa:	4a15      	ldr	r2, [pc, #84]	; (800a050 <vTaskStartScheduler+0xc4>)
 8009ffc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ffe:	4b15      	ldr	r3, [pc, #84]	; (800a054 <vTaskStartScheduler+0xc8>)
 800a000:	f04f 32ff 	mov.w	r2, #4294967295
 800a004:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a006:	4b14      	ldr	r3, [pc, #80]	; (800a058 <vTaskStartScheduler+0xcc>)
 800a008:	2201      	movs	r2, #1
 800a00a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a00c:	4b13      	ldr	r3, [pc, #76]	; (800a05c <vTaskStartScheduler+0xd0>)
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a012:	f000 fea5 	bl	800ad60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a016:	e00e      	b.n	800a036 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01e:	d10a      	bne.n	800a036 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	60fb      	str	r3, [r7, #12]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <vTaskStartScheduler+0xa8>
}
 800a036:	bf00      	nop
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	0800c380 	.word	0x0800c380
 800a044:	0800a609 	.word	0x0800a609
 800a048:	2000062c 	.word	0x2000062c
 800a04c:	20000508 	.word	0x20000508
 800a050:	2000002c 	.word	0x2000002c
 800a054:	20000628 	.word	0x20000628
 800a058:	20000614 	.word	0x20000614
 800a05c:	2000060c 	.word	0x2000060c

0800a060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a060:	b480      	push	{r7}
 800a062:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a064:	4b04      	ldr	r3, [pc, #16]	; (800a078 <vTaskSuspendAll+0x18>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3301      	adds	r3, #1
 800a06a:	4a03      	ldr	r2, [pc, #12]	; (800a078 <vTaskSuspendAll+0x18>)
 800a06c:	6013      	str	r3, [r2, #0]
}
 800a06e:	bf00      	nop
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	20000630 	.word	0x20000630

0800a07c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a08a:	4b41      	ldr	r3, [pc, #260]	; (800a190 <xTaskResumeAll+0x114>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10a      	bne.n	800a0a8 <xTaskResumeAll+0x2c>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	603b      	str	r3, [r7, #0]
}
 800a0a4:	bf00      	nop
 800a0a6:	e7fe      	b.n	800a0a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a0a8:	f000 fefc 	bl	800aea4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a0ac:	4b38      	ldr	r3, [pc, #224]	; (800a190 <xTaskResumeAll+0x114>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	4a37      	ldr	r2, [pc, #220]	; (800a190 <xTaskResumeAll+0x114>)
 800a0b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0b6:	4b36      	ldr	r3, [pc, #216]	; (800a190 <xTaskResumeAll+0x114>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d161      	bne.n	800a182 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a0be:	4b35      	ldr	r3, [pc, #212]	; (800a194 <xTaskResumeAll+0x118>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d05d      	beq.n	800a182 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0c6:	e02e      	b.n	800a126 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a0c8:	4b33      	ldr	r3, [pc, #204]	; (800a198 <xTaskResumeAll+0x11c>)
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	3318      	adds	r3, #24
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7fe fda3 	bl	8008c20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fd9e 	bl	8008c20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	409a      	lsls	r2, r3
 800a0ec:	4b2b      	ldr	r3, [pc, #172]	; (800a19c <xTaskResumeAll+0x120>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	4a2a      	ldr	r2, [pc, #168]	; (800a19c <xTaskResumeAll+0x120>)
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4a27      	ldr	r2, [pc, #156]	; (800a1a0 <xTaskResumeAll+0x124>)
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3304      	adds	r3, #4
 800a10a:	4619      	mov	r1, r3
 800a10c:	4610      	mov	r0, r2
 800a10e:	f7fe fd2a 	bl	8008b66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a116:	4b23      	ldr	r3, [pc, #140]	; (800a1a4 <xTaskResumeAll+0x128>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d302      	bcc.n	800a126 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a120:	4b21      	ldr	r3, [pc, #132]	; (800a1a8 <xTaskResumeAll+0x12c>)
 800a122:	2201      	movs	r2, #1
 800a124:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a126:	4b1c      	ldr	r3, [pc, #112]	; (800a198 <xTaskResumeAll+0x11c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1cc      	bne.n	800a0c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a134:	f000 fb22 	bl	800a77c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a138:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <xTaskResumeAll+0x130>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d010      	beq.n	800a166 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a144:	f000 f836 	bl	800a1b4 <xTaskIncrementTick>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a14e:	4b16      	ldr	r3, [pc, #88]	; (800a1a8 <xTaskResumeAll+0x12c>)
 800a150:	2201      	movs	r2, #1
 800a152:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3b01      	subs	r3, #1
 800a158:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1f1      	bne.n	800a144 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a160:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <xTaskResumeAll+0x130>)
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a166:	4b10      	ldr	r3, [pc, #64]	; (800a1a8 <xTaskResumeAll+0x12c>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a16e:	2301      	movs	r3, #1
 800a170:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a172:	4b0f      	ldr	r3, [pc, #60]	; (800a1b0 <xTaskResumeAll+0x134>)
 800a174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a182:	f000 febf 	bl	800af04 <vPortExitCritical>

	return xAlreadyYielded;
 800a186:	68bb      	ldr	r3, [r7, #8]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000630 	.word	0x20000630
 800a194:	20000608 	.word	0x20000608
 800a198:	200005c8 	.word	0x200005c8
 800a19c:	20000610 	.word	0x20000610
 800a1a0:	2000050c 	.word	0x2000050c
 800a1a4:	20000508 	.word	0x20000508
 800a1a8:	2000061c 	.word	0x2000061c
 800a1ac:	20000618 	.word	0x20000618
 800a1b0:	e000ed04 	.word	0xe000ed04

0800a1b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1be:	4b51      	ldr	r3, [pc, #324]	; (800a304 <xTaskIncrementTick+0x150>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f040 808d 	bne.w	800a2e2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1c8:	4b4f      	ldr	r3, [pc, #316]	; (800a308 <xTaskIncrementTick+0x154>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1d0:	4a4d      	ldr	r2, [pc, #308]	; (800a308 <xTaskIncrementTick+0x154>)
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d120      	bne.n	800a21e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1dc:	4b4b      	ldr	r3, [pc, #300]	; (800a30c <xTaskIncrementTick+0x158>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00a      	beq.n	800a1fc <xTaskIncrementTick+0x48>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	603b      	str	r3, [r7, #0]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <xTaskIncrementTick+0x46>
 800a1fc:	4b43      	ldr	r3, [pc, #268]	; (800a30c <xTaskIncrementTick+0x158>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	4b43      	ldr	r3, [pc, #268]	; (800a310 <xTaskIncrementTick+0x15c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a41      	ldr	r2, [pc, #260]	; (800a30c <xTaskIncrementTick+0x158>)
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	4a41      	ldr	r2, [pc, #260]	; (800a310 <xTaskIncrementTick+0x15c>)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	4b40      	ldr	r3, [pc, #256]	; (800a314 <xTaskIncrementTick+0x160>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3301      	adds	r3, #1
 800a216:	4a3f      	ldr	r2, [pc, #252]	; (800a314 <xTaskIncrementTick+0x160>)
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	f000 faaf 	bl	800a77c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a21e:	4b3e      	ldr	r3, [pc, #248]	; (800a318 <xTaskIncrementTick+0x164>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	429a      	cmp	r2, r3
 800a226:	d34d      	bcc.n	800a2c4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a228:	4b38      	ldr	r3, [pc, #224]	; (800a30c <xTaskIncrementTick+0x158>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <xTaskIncrementTick+0x82>
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <xTaskIncrementTick+0x84>
 800a236:	2300      	movs	r3, #0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d004      	beq.n	800a246 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a23c:	4b36      	ldr	r3, [pc, #216]	; (800a318 <xTaskIncrementTick+0x164>)
 800a23e:	f04f 32ff 	mov.w	r2, #4294967295
 800a242:	601a      	str	r2, [r3, #0]
					break;
 800a244:	e03e      	b.n	800a2c4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a246:	4b31      	ldr	r3, [pc, #196]	; (800a30c <xTaskIncrementTick+0x158>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d203      	bcs.n	800a266 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a25e:	4a2e      	ldr	r2, [pc, #184]	; (800a318 <xTaskIncrementTick+0x164>)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6013      	str	r3, [r2, #0]
						break;
 800a264:	e02e      	b.n	800a2c4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	3304      	adds	r3, #4
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe fcd8 	bl	8008c20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a274:	2b00      	cmp	r3, #0
 800a276:	d004      	beq.n	800a282 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	3318      	adds	r3, #24
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fe fccf 	bl	8008c20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a286:	2201      	movs	r2, #1
 800a288:	409a      	lsls	r2, r3
 800a28a:	4b24      	ldr	r3, [pc, #144]	; (800a31c <xTaskIncrementTick+0x168>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4313      	orrs	r3, r2
 800a290:	4a22      	ldr	r2, [pc, #136]	; (800a31c <xTaskIncrementTick+0x168>)
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a298:	4613      	mov	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4a1f      	ldr	r2, [pc, #124]	; (800a320 <xTaskIncrementTick+0x16c>)
 800a2a2:	441a      	add	r2, r3
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	f7fe fc5b 	bl	8008b66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b4:	4b1b      	ldr	r3, [pc, #108]	; (800a324 <xTaskIncrementTick+0x170>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d3b4      	bcc.n	800a228 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2c2:	e7b1      	b.n	800a228 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a2c4:	4b17      	ldr	r3, [pc, #92]	; (800a324 <xTaskIncrementTick+0x170>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ca:	4915      	ldr	r1, [pc, #84]	; (800a320 <xTaskIncrementTick+0x16c>)
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	440b      	add	r3, r1
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d907      	bls.n	800a2ec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e004      	b.n	800a2ec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a2e2:	4b11      	ldr	r3, [pc, #68]	; (800a328 <xTaskIncrementTick+0x174>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	4a0f      	ldr	r2, [pc, #60]	; (800a328 <xTaskIncrementTick+0x174>)
 800a2ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a2ec:	4b0f      	ldr	r3, [pc, #60]	; (800a32c <xTaskIncrementTick+0x178>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a2f8:	697b      	ldr	r3, [r7, #20]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3718      	adds	r7, #24
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20000630 	.word	0x20000630
 800a308:	2000060c 	.word	0x2000060c
 800a30c:	200005c0 	.word	0x200005c0
 800a310:	200005c4 	.word	0x200005c4
 800a314:	20000620 	.word	0x20000620
 800a318:	20000628 	.word	0x20000628
 800a31c:	20000610 	.word	0x20000610
 800a320:	2000050c 	.word	0x2000050c
 800a324:	20000508 	.word	0x20000508
 800a328:	20000618 	.word	0x20000618
 800a32c:	2000061c 	.word	0x2000061c

0800a330 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a336:	4b29      	ldr	r3, [pc, #164]	; (800a3dc <vTaskSwitchContext+0xac>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a33e:	4b28      	ldr	r3, [pc, #160]	; (800a3e0 <vTaskSwitchContext+0xb0>)
 800a340:	2201      	movs	r2, #1
 800a342:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a344:	e044      	b.n	800a3d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a346:	4b26      	ldr	r3, [pc, #152]	; (800a3e0 <vTaskSwitchContext+0xb0>)
 800a348:	2200      	movs	r2, #0
 800a34a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a34c:	4b25      	ldr	r3, [pc, #148]	; (800a3e4 <vTaskSwitchContext+0xb4>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	fab3 f383 	clz	r3, r3
 800a358:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a35a:	7afb      	ldrb	r3, [r7, #11]
 800a35c:	f1c3 031f 	rsb	r3, r3, #31
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	4921      	ldr	r1, [pc, #132]	; (800a3e8 <vTaskSwitchContext+0xb8>)
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	4613      	mov	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	440b      	add	r3, r1
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10a      	bne.n	800a38c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	607b      	str	r3, [r7, #4]
}
 800a388:	bf00      	nop
 800a38a:	e7fe      	b.n	800a38a <vTaskSwitchContext+0x5a>
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	4613      	mov	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4a14      	ldr	r2, [pc, #80]	; (800a3e8 <vTaskSwitchContext+0xb8>)
 800a398:	4413      	add	r3, r2
 800a39a:	613b      	str	r3, [r7, #16]
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	605a      	str	r2, [r3, #4]
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	685a      	ldr	r2, [r3, #4]
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d104      	bne.n	800a3bc <vTaskSwitchContext+0x8c>
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	605a      	str	r2, [r3, #4]
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <vTaskSwitchContext+0xbc>)
 800a3c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3c6:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <vTaskSwitchContext+0xbc>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	334c      	adds	r3, #76	; 0x4c
 800a3cc:	4a08      	ldr	r2, [pc, #32]	; (800a3f0 <vTaskSwitchContext+0xc0>)
 800a3ce:	6013      	str	r3, [r2, #0]
}
 800a3d0:	bf00      	nop
 800a3d2:	371c      	adds	r7, #28
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	20000630 	.word	0x20000630
 800a3e0:	2000061c 	.word	0x2000061c
 800a3e4:	20000610 	.word	0x20000610
 800a3e8:	2000050c 	.word	0x2000050c
 800a3ec:	20000508 	.word	0x20000508
 800a3f0:	2000002c 	.word	0x2000002c

0800a3f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	60fb      	str	r3, [r7, #12]
}
 800a416:	bf00      	nop
 800a418:	e7fe      	b.n	800a418 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a41a:	4b07      	ldr	r3, [pc, #28]	; (800a438 <vTaskPlaceOnEventList+0x44>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3318      	adds	r3, #24
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7fe fbc3 	bl	8008bae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a428:	2101      	movs	r1, #1
 800a42a:	6838      	ldr	r0, [r7, #0]
 800a42c:	f000 fbaa 	bl	800ab84 <prvAddCurrentTaskToDelayedList>
}
 800a430:	bf00      	nop
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000508 	.word	0x20000508

0800a43c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10a      	bne.n	800a468 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	60fb      	str	r3, [r7, #12]
}
 800a464:	bf00      	nop
 800a466:	e7fe      	b.n	800a466 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	3318      	adds	r3, #24
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fbd7 	bl	8008c20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a472:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <xTaskRemoveFromEventList+0xac>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d11c      	bne.n	800a4b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	3304      	adds	r3, #4
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fe fbce 	bl	8008c20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	2201      	movs	r2, #1
 800a48a:	409a      	lsls	r2, r3
 800a48c:	4b17      	ldr	r3, [pc, #92]	; (800a4ec <xTaskRemoveFromEventList+0xb0>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4313      	orrs	r3, r2
 800a492:	4a16      	ldr	r2, [pc, #88]	; (800a4ec <xTaskRemoveFromEventList+0xb0>)
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49a:	4613      	mov	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4a13      	ldr	r2, [pc, #76]	; (800a4f0 <xTaskRemoveFromEventList+0xb4>)
 800a4a4:	441a      	add	r2, r3
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	f7fe fb5a 	bl	8008b66 <vListInsertEnd>
 800a4b2:	e005      	b.n	800a4c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	3318      	adds	r3, #24
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	480e      	ldr	r0, [pc, #56]	; (800a4f4 <xTaskRemoveFromEventList+0xb8>)
 800a4bc:	f7fe fb53 	bl	8008b66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c4:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <xTaskRemoveFromEventList+0xbc>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d905      	bls.n	800a4da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <xTaskRemoveFromEventList+0xc0>)
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	e001      	b.n	800a4de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a4de:	697b      	ldr	r3, [r7, #20]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20000630 	.word	0x20000630
 800a4ec:	20000610 	.word	0x20000610
 800a4f0:	2000050c 	.word	0x2000050c
 800a4f4:	200005c8 	.word	0x200005c8
 800a4f8:	20000508 	.word	0x20000508
 800a4fc:	2000061c 	.word	0x2000061c

0800a500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a508:	4b06      	ldr	r3, [pc, #24]	; (800a524 <vTaskInternalSetTimeOutState+0x24>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a510:	4b05      	ldr	r3, [pc, #20]	; (800a528 <vTaskInternalSetTimeOutState+0x28>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	605a      	str	r2, [r3, #4]
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	20000620 	.word	0x20000620
 800a528:	2000060c 	.word	0x2000060c

0800a52c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b088      	sub	sp, #32
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	613b      	str	r3, [r7, #16]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10a      	bne.n	800a56e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	60fb      	str	r3, [r7, #12]
}
 800a56a:	bf00      	nop
 800a56c:	e7fe      	b.n	800a56c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a56e:	f000 fc99 	bl	800aea4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a572:	4b1d      	ldr	r3, [pc, #116]	; (800a5e8 <xTaskCheckForTimeOut+0xbc>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	69ba      	ldr	r2, [r7, #24]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58a:	d102      	bne.n	800a592 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	61fb      	str	r3, [r7, #28]
 800a590:	e023      	b.n	800a5da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4b15      	ldr	r3, [pc, #84]	; (800a5ec <xTaskCheckForTimeOut+0xc0>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d007      	beq.n	800a5ae <xTaskCheckForTimeOut+0x82>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	69ba      	ldr	r2, [r7, #24]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d302      	bcc.n	800a5ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	61fb      	str	r3, [r7, #28]
 800a5ac:	e015      	b.n	800a5da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d20b      	bcs.n	800a5d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	1ad2      	subs	r2, r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff ff9b 	bl	800a500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61fb      	str	r3, [r7, #28]
 800a5ce:	e004      	b.n	800a5da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5da:	f000 fc93 	bl	800af04 <vPortExitCritical>

	return xReturn;
 800a5de:	69fb      	ldr	r3, [r7, #28]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	2000060c 	.word	0x2000060c
 800a5ec:	20000620 	.word	0x20000620

0800a5f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5f4:	4b03      	ldr	r3, [pc, #12]	; (800a604 <vTaskMissedYield+0x14>)
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
}
 800a5fa:	bf00      	nop
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	2000061c 	.word	0x2000061c

0800a608 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a610:	f000 f852 	bl	800a6b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a614:	4b06      	ldr	r3, [pc, #24]	; (800a630 <prvIdleTask+0x28>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d9f9      	bls.n	800a610 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a61c:	4b05      	ldr	r3, [pc, #20]	; (800a634 <prvIdleTask+0x2c>)
 800a61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a62c:	e7f0      	b.n	800a610 <prvIdleTask+0x8>
 800a62e:	bf00      	nop
 800a630:	2000050c 	.word	0x2000050c
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a63e:	2300      	movs	r3, #0
 800a640:	607b      	str	r3, [r7, #4]
 800a642:	e00c      	b.n	800a65e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4a12      	ldr	r2, [pc, #72]	; (800a698 <prvInitialiseTaskLists+0x60>)
 800a650:	4413      	add	r3, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fa5a 	bl	8008b0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3301      	adds	r3, #1
 800a65c:	607b      	str	r3, [r7, #4]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b06      	cmp	r3, #6
 800a662:	d9ef      	bls.n	800a644 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a664:	480d      	ldr	r0, [pc, #52]	; (800a69c <prvInitialiseTaskLists+0x64>)
 800a666:	f7fe fa51 	bl	8008b0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a66a:	480d      	ldr	r0, [pc, #52]	; (800a6a0 <prvInitialiseTaskLists+0x68>)
 800a66c:	f7fe fa4e 	bl	8008b0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a670:	480c      	ldr	r0, [pc, #48]	; (800a6a4 <prvInitialiseTaskLists+0x6c>)
 800a672:	f7fe fa4b 	bl	8008b0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a676:	480c      	ldr	r0, [pc, #48]	; (800a6a8 <prvInitialiseTaskLists+0x70>)
 800a678:	f7fe fa48 	bl	8008b0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a67c:	480b      	ldr	r0, [pc, #44]	; (800a6ac <prvInitialiseTaskLists+0x74>)
 800a67e:	f7fe fa45 	bl	8008b0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a682:	4b0b      	ldr	r3, [pc, #44]	; (800a6b0 <prvInitialiseTaskLists+0x78>)
 800a684:	4a05      	ldr	r2, [pc, #20]	; (800a69c <prvInitialiseTaskLists+0x64>)
 800a686:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a688:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <prvInitialiseTaskLists+0x7c>)
 800a68a:	4a05      	ldr	r2, [pc, #20]	; (800a6a0 <prvInitialiseTaskLists+0x68>)
 800a68c:	601a      	str	r2, [r3, #0]
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	2000050c 	.word	0x2000050c
 800a69c:	20000598 	.word	0x20000598
 800a6a0:	200005ac 	.word	0x200005ac
 800a6a4:	200005c8 	.word	0x200005c8
 800a6a8:	200005dc 	.word	0x200005dc
 800a6ac:	200005f4 	.word	0x200005f4
 800a6b0:	200005c0 	.word	0x200005c0
 800a6b4:	200005c4 	.word	0x200005c4

0800a6b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6be:	e019      	b.n	800a6f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a6c0:	f000 fbf0 	bl	800aea4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a6c4:	4b10      	ldr	r3, [pc, #64]	; (800a708 <prvCheckTasksWaitingTermination+0x50>)
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe faa5 	bl	8008c20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a6d6:	4b0d      	ldr	r3, [pc, #52]	; (800a70c <prvCheckTasksWaitingTermination+0x54>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	4a0b      	ldr	r2, [pc, #44]	; (800a70c <prvCheckTasksWaitingTermination+0x54>)
 800a6de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6e0:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <prvCheckTasksWaitingTermination+0x58>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	4a0a      	ldr	r2, [pc, #40]	; (800a710 <prvCheckTasksWaitingTermination+0x58>)
 800a6e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6ea:	f000 fc0b 	bl	800af04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f810 	bl	800a714 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6f4:	4b06      	ldr	r3, [pc, #24]	; (800a710 <prvCheckTasksWaitingTermination+0x58>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e1      	bne.n	800a6c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200005dc 	.word	0x200005dc
 800a70c:	20000608 	.word	0x20000608
 800a710:	200005f0 	.word	0x200005f0

0800a714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	334c      	adds	r3, #76	; 0x4c
 800a720:	4618      	mov	r0, r3
 800a722:	f001 f803 	bl	800b72c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a734:	4618      	mov	r0, r3
 800a736:	f000 fd9b 	bl	800b270 <vPortFree>
				vPortFree( pxTCB );
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fd98 	bl	800b270 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a740:	e018      	b.n	800a774 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d103      	bne.n	800a754 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fd8f 	bl	800b270 <vPortFree>
	}
 800a752:	e00f      	b.n	800a774 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d00a      	beq.n	800a774 <prvDeleteTCB+0x60>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	60fb      	str	r3, [r7, #12]
}
 800a770:	bf00      	nop
 800a772:	e7fe      	b.n	800a772 <prvDeleteTCB+0x5e>
	}
 800a774:	bf00      	nop
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a782:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <prvResetNextTaskUnblockTime+0x44>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <prvResetNextTaskUnblockTime+0x14>
 800a78c:	2301      	movs	r3, #1
 800a78e:	e000      	b.n	800a792 <prvResetNextTaskUnblockTime+0x16>
 800a790:	2300      	movs	r3, #0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d004      	beq.n	800a7a0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a796:	4b0b      	ldr	r3, [pc, #44]	; (800a7c4 <prvResetNextTaskUnblockTime+0x48>)
 800a798:	f04f 32ff 	mov.w	r2, #4294967295
 800a79c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a79e:	e008      	b.n	800a7b2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <prvResetNextTaskUnblockTime+0x44>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	4a05      	ldr	r2, [pc, #20]	; (800a7c4 <prvResetNextTaskUnblockTime+0x48>)
 800a7b0:	6013      	str	r3, [r2, #0]
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	200005c0 	.word	0x200005c0
 800a7c4:	20000628 	.word	0x20000628

0800a7c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <xTaskGetSchedulerState+0x34>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	607b      	str	r3, [r7, #4]
 800a7da:	e008      	b.n	800a7ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7dc:	4b08      	ldr	r3, [pc, #32]	; (800a800 <xTaskGetSchedulerState+0x38>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d102      	bne.n	800a7ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	607b      	str	r3, [r7, #4]
 800a7e8:	e001      	b.n	800a7ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7ee:	687b      	ldr	r3, [r7, #4]
	}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	20000614 	.word	0x20000614
 800a800:	20000630 	.word	0x20000630

0800a804 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d06e      	beq.n	800a8f8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81e:	4b39      	ldr	r3, [pc, #228]	; (800a904 <xTaskPriorityInherit+0x100>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	429a      	cmp	r2, r3
 800a826:	d25e      	bcs.n	800a8e6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	db06      	blt.n	800a83e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a830:	4b34      	ldr	r3, [pc, #208]	; (800a904 <xTaskPriorityInherit+0x100>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a836:	f1c3 0207 	rsb	r2, r3, #7
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	6959      	ldr	r1, [r3, #20]
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a846:	4613      	mov	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	4413      	add	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4a2e      	ldr	r2, [pc, #184]	; (800a908 <xTaskPriorityInherit+0x104>)
 800a850:	4413      	add	r3, r2
 800a852:	4299      	cmp	r1, r3
 800a854:	d101      	bne.n	800a85a <xTaskPriorityInherit+0x56>
 800a856:	2301      	movs	r3, #1
 800a858:	e000      	b.n	800a85c <xTaskPriorityInherit+0x58>
 800a85a:	2300      	movs	r3, #0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d03a      	beq.n	800a8d6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	3304      	adds	r3, #4
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe f9db 	bl	8008c20 <uxListRemove>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d115      	bne.n	800a89c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a874:	4924      	ldr	r1, [pc, #144]	; (800a908 <xTaskPriorityInherit+0x104>)
 800a876:	4613      	mov	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	440b      	add	r3, r1
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10a      	bne.n	800a89c <xTaskPriorityInherit+0x98>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88a:	2201      	movs	r2, #1
 800a88c:	fa02 f303 	lsl.w	r3, r2, r3
 800a890:	43da      	mvns	r2, r3
 800a892:	4b1e      	ldr	r3, [pc, #120]	; (800a90c <xTaskPriorityInherit+0x108>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4013      	ands	r3, r2
 800a898:	4a1c      	ldr	r2, [pc, #112]	; (800a90c <xTaskPriorityInherit+0x108>)
 800a89a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a89c:	4b19      	ldr	r3, [pc, #100]	; (800a904 <xTaskPriorityInherit+0x100>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	409a      	lsls	r2, r3
 800a8ae:	4b17      	ldr	r3, [pc, #92]	; (800a90c <xTaskPriorityInherit+0x108>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	4a15      	ldr	r2, [pc, #84]	; (800a90c <xTaskPriorityInherit+0x108>)
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4a10      	ldr	r2, [pc, #64]	; (800a908 <xTaskPriorityInherit+0x104>)
 800a8c6:	441a      	add	r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	f7fe f949 	bl	8008b66 <vListInsertEnd>
 800a8d4:	e004      	b.n	800a8e0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a8d6:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <xTaskPriorityInherit+0x100>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	e008      	b.n	800a8f8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8ea:	4b06      	ldr	r3, [pc, #24]	; (800a904 <xTaskPriorityInherit+0x100>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d201      	bcs.n	800a8f8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
	}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000508 	.word	0x20000508
 800a908:	2000050c 	.word	0x2000050c
 800a90c:	20000610 	.word	0x20000610

0800a910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d06e      	beq.n	800aa04 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a926:	4b3a      	ldr	r3, [pc, #232]	; (800aa10 <xTaskPriorityDisinherit+0x100>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	693a      	ldr	r2, [r7, #16]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d00a      	beq.n	800a946 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	60fb      	str	r3, [r7, #12]
}
 800a942:	bf00      	nop
 800a944:	e7fe      	b.n	800a944 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d10a      	bne.n	800a964 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	60bb      	str	r3, [r7, #8]
}
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a968:	1e5a      	subs	r2, r3, #1
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a976:	429a      	cmp	r2, r3
 800a978:	d044      	beq.n	800aa04 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d140      	bne.n	800aa04 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	3304      	adds	r3, #4
 800a986:	4618      	mov	r0, r3
 800a988:	f7fe f94a 	bl	8008c20 <uxListRemove>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d115      	bne.n	800a9be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a996:	491f      	ldr	r1, [pc, #124]	; (800aa14 <xTaskPriorityDisinherit+0x104>)
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	440b      	add	r3, r1
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <xTaskPriorityDisinherit+0xae>
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b2:	43da      	mvns	r2, r3
 800a9b4:	4b18      	ldr	r3, [pc, #96]	; (800aa18 <xTaskPriorityDisinherit+0x108>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	4a17      	ldr	r2, [pc, #92]	; (800aa18 <xTaskPriorityDisinherit+0x108>)
 800a9bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ca:	f1c3 0207 	rsb	r2, r3, #7
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	409a      	lsls	r2, r3
 800a9da:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <xTaskPriorityDisinherit+0x108>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	4a0d      	ldr	r2, [pc, #52]	; (800aa18 <xTaskPriorityDisinherit+0x108>)
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4a08      	ldr	r2, [pc, #32]	; (800aa14 <xTaskPriorityDisinherit+0x104>)
 800a9f2:	441a      	add	r2, r3
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	f7fe f8b3 	bl	8008b66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa00:	2301      	movs	r3, #1
 800aa02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa04:	697b      	ldr	r3, [r7, #20]
	}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	20000508 	.word	0x20000508
 800aa14:	2000050c 	.word	0x2000050c
 800aa18:	20000610 	.word	0x20000610

0800aa1c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 8088 	beq.w	800ab46 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10a      	bne.n	800aa54 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	60fb      	str	r3, [r7, #12]
}
 800aa50:	bf00      	nop
 800aa52:	e7fe      	b.n	800aa52 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d902      	bls.n	800aa64 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	61fb      	str	r3, [r7, #28]
 800aa62:	e002      	b.n	800aa6a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa68:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6e:	69fa      	ldr	r2, [r7, #28]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d068      	beq.n	800ab46 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d163      	bne.n	800ab46 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aa7e:	4b34      	ldr	r3, [pc, #208]	; (800ab50 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	69ba      	ldr	r2, [r7, #24]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d10a      	bne.n	800aa9e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	60bb      	str	r3, [r7, #8]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	db04      	blt.n	800aabc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	f1c3 0207 	rsb	r2, r3, #7
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	6959      	ldr	r1, [r3, #20]
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	4613      	mov	r3, r2
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4a22      	ldr	r2, [pc, #136]	; (800ab54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800aacc:	4413      	add	r3, r2
 800aace:	4299      	cmp	r1, r3
 800aad0:	d101      	bne.n	800aad6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e000      	b.n	800aad8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800aad6:	2300      	movs	r3, #0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d034      	beq.n	800ab46 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	3304      	adds	r3, #4
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe f89d 	bl	8008c20 <uxListRemove>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d115      	bne.n	800ab18 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf0:	4918      	ldr	r1, [pc, #96]	; (800ab54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	4413      	add	r3, r2
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	440b      	add	r3, r1
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab06:	2201      	movs	r2, #1
 800ab08:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0c:	43da      	mvns	r2, r3
 800ab0e:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4013      	ands	r3, r2
 800ab14:	4a10      	ldr	r2, [pc, #64]	; (800ab58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ab16:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	409a      	lsls	r2, r3
 800ab20:	4b0d      	ldr	r3, [pc, #52]	; (800ab58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	4a0c      	ldr	r2, [pc, #48]	; (800ab58 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4a07      	ldr	r2, [pc, #28]	; (800ab54 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ab38:	441a      	add	r2, r3
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4610      	mov	r0, r2
 800ab42:	f7fe f810 	bl	8008b66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab46:	bf00      	nop
 800ab48:	3720      	adds	r7, #32
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000508 	.word	0x20000508
 800ab54:	2000050c 	.word	0x2000050c
 800ab58:	20000610 	.word	0x20000610

0800ab5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ab5c:	b480      	push	{r7}
 800ab5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ab60:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ab68:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab6e:	3201      	adds	r2, #1
 800ab70:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ab72:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ab74:	681b      	ldr	r3, [r3, #0]
	}
 800ab76:	4618      	mov	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	20000508 	.word	0x20000508

0800ab84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab8e:	4b29      	ldr	r3, [pc, #164]	; (800ac34 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab94:	4b28      	ldr	r3, [pc, #160]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe f840 	bl	8008c20 <uxListRemove>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10b      	bne.n	800abbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800aba6:	4b24      	ldr	r3, [pc, #144]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	2201      	movs	r2, #1
 800abae:	fa02 f303 	lsl.w	r3, r2, r3
 800abb2:	43da      	mvns	r2, r3
 800abb4:	4b21      	ldr	r3, [pc, #132]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb8>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4013      	ands	r3, r2
 800abba:	4a20      	ldr	r2, [pc, #128]	; (800ac3c <prvAddCurrentTaskToDelayedList+0xb8>)
 800abbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc4:	d10a      	bne.n	800abdc <prvAddCurrentTaskToDelayedList+0x58>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d007      	beq.n	800abdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abcc:	4b1a      	ldr	r3, [pc, #104]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	3304      	adds	r3, #4
 800abd2:	4619      	mov	r1, r3
 800abd4:	481a      	ldr	r0, [pc, #104]	; (800ac40 <prvAddCurrentTaskToDelayedList+0xbc>)
 800abd6:	f7fd ffc6 	bl	8008b66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abda:	e026      	b.n	800ac2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4413      	add	r3, r2
 800abe2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abe4:	4b14      	ldr	r3, [pc, #80]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d209      	bcs.n	800ac08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abf4:	4b13      	ldr	r3, [pc, #76]	; (800ac44 <prvAddCurrentTaskToDelayedList+0xc0>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4b0f      	ldr	r3, [pc, #60]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f7fd ffd4 	bl	8008bae <vListInsert>
}
 800ac06:	e010      	b.n	800ac2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac08:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3304      	adds	r3, #4
 800ac12:	4619      	mov	r1, r3
 800ac14:	4610      	mov	r0, r2
 800ac16:	f7fd ffca 	bl	8008bae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac1a:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d202      	bcs.n	800ac2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ac24:	4a09      	ldr	r2, [pc, #36]	; (800ac4c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	6013      	str	r3, [r2, #0]
}
 800ac2a:	bf00      	nop
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	2000060c 	.word	0x2000060c
 800ac38:	20000508 	.word	0x20000508
 800ac3c:	20000610 	.word	0x20000610
 800ac40:	200005f4 	.word	0x200005f4
 800ac44:	200005c4 	.word	0x200005c4
 800ac48:	200005c0 	.word	0x200005c0
 800ac4c:	20000628 	.word	0x20000628

0800ac50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3b04      	subs	r3, #4
 800ac60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	3b04      	subs	r3, #4
 800ac6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f023 0201 	bic.w	r2, r3, #1
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3b04      	subs	r3, #4
 800ac7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac80:	4a0c      	ldr	r2, [pc, #48]	; (800acb4 <pxPortInitialiseStack+0x64>)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3b14      	subs	r3, #20
 800ac8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3b04      	subs	r3, #4
 800ac96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f06f 0202 	mvn.w	r2, #2
 800ac9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3b20      	subs	r3, #32
 800aca4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aca6:	68fb      	ldr	r3, [r7, #12]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	0800acb9 	.word	0x0800acb9

0800acb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acc2:	4b12      	ldr	r3, [pc, #72]	; (800ad0c <prvTaskExitError+0x54>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acca:	d00a      	beq.n	800ace2 <prvTaskExitError+0x2a>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	60fb      	str	r3, [r7, #12]
}
 800acde:	bf00      	nop
 800ace0:	e7fe      	b.n	800ace0 <prvTaskExitError+0x28>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	60bb      	str	r3, [r7, #8]
}
 800acf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acf6:	bf00      	nop
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0fc      	beq.n	800acf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acfe:	bf00      	nop
 800ad00:	bf00      	nop
 800ad02:	3714      	adds	r7, #20
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr
 800ad0c:	20000028 	.word	0x20000028

0800ad10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <pxCurrentTCBConst2>)
 800ad12:	6819      	ldr	r1, [r3, #0]
 800ad14:	6808      	ldr	r0, [r1, #0]
 800ad16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1a:	f380 8809 	msr	PSP, r0
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f04f 0000 	mov.w	r0, #0
 800ad26:	f380 8811 	msr	BASEPRI, r0
 800ad2a:	4770      	bx	lr
 800ad2c:	f3af 8000 	nop.w

0800ad30 <pxCurrentTCBConst2>:
 800ad30:	20000508 	.word	0x20000508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop

0800ad38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad38:	4808      	ldr	r0, [pc, #32]	; (800ad5c <prvPortStartFirstTask+0x24>)
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	6800      	ldr	r0, [r0, #0]
 800ad3e:	f380 8808 	msr	MSP, r0
 800ad42:	f04f 0000 	mov.w	r0, #0
 800ad46:	f380 8814 	msr	CONTROL, r0
 800ad4a:	b662      	cpsie	i
 800ad4c:	b661      	cpsie	f
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	df00      	svc	0
 800ad58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad5a:	bf00      	nop
 800ad5c:	e000ed08 	.word	0xe000ed08

0800ad60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad66:	4b46      	ldr	r3, [pc, #280]	; (800ae80 <xPortStartScheduler+0x120>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a46      	ldr	r2, [pc, #280]	; (800ae84 <xPortStartScheduler+0x124>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d10a      	bne.n	800ad86 <xPortStartScheduler+0x26>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	613b      	str	r3, [r7, #16]
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad86:	4b3e      	ldr	r3, [pc, #248]	; (800ae80 <xPortStartScheduler+0x120>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a3f      	ldr	r2, [pc, #252]	; (800ae88 <xPortStartScheduler+0x128>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d10a      	bne.n	800ada6 <xPortStartScheduler+0x46>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	60fb      	str	r3, [r7, #12]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ada6:	4b39      	ldr	r3, [pc, #228]	; (800ae8c <xPortStartScheduler+0x12c>)
 800ada8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	22ff      	movs	r2, #255	; 0xff
 800adb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	4b31      	ldr	r3, [pc, #196]	; (800ae90 <xPortStartScheduler+0x130>)
 800adcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adce:	4b31      	ldr	r3, [pc, #196]	; (800ae94 <xPortStartScheduler+0x134>)
 800add0:	2207      	movs	r2, #7
 800add2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800add4:	e009      	b.n	800adea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800add6:	4b2f      	ldr	r3, [pc, #188]	; (800ae94 <xPortStartScheduler+0x134>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3b01      	subs	r3, #1
 800addc:	4a2d      	ldr	r2, [pc, #180]	; (800ae94 <xPortStartScheduler+0x134>)
 800adde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adea:	78fb      	ldrb	r3, [r7, #3]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adf2:	2b80      	cmp	r3, #128	; 0x80
 800adf4:	d0ef      	beq.n	800add6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adf6:	4b27      	ldr	r3, [pc, #156]	; (800ae94 <xPortStartScheduler+0x134>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f1c3 0307 	rsb	r3, r3, #7
 800adfe:	2b04      	cmp	r3, #4
 800ae00:	d00a      	beq.n	800ae18 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	60bb      	str	r3, [r7, #8]
}
 800ae14:	bf00      	nop
 800ae16:	e7fe      	b.n	800ae16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae18:	4b1e      	ldr	r3, [pc, #120]	; (800ae94 <xPortStartScheduler+0x134>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	021b      	lsls	r3, r3, #8
 800ae1e:	4a1d      	ldr	r2, [pc, #116]	; (800ae94 <xPortStartScheduler+0x134>)
 800ae20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae22:	4b1c      	ldr	r3, [pc, #112]	; (800ae94 <xPortStartScheduler+0x134>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae2a:	4a1a      	ldr	r2, [pc, #104]	; (800ae94 <xPortStartScheduler+0x134>)
 800ae2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae36:	4b18      	ldr	r3, [pc, #96]	; (800ae98 <xPortStartScheduler+0x138>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a17      	ldr	r2, [pc, #92]	; (800ae98 <xPortStartScheduler+0x138>)
 800ae3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae42:	4b15      	ldr	r3, [pc, #84]	; (800ae98 <xPortStartScheduler+0x138>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a14      	ldr	r2, [pc, #80]	; (800ae98 <xPortStartScheduler+0x138>)
 800ae48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae4e:	f000 f8dd 	bl	800b00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae52:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <xPortStartScheduler+0x13c>)
 800ae54:	2200      	movs	r2, #0
 800ae56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae58:	f000 f8fc 	bl	800b054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae5c:	4b10      	ldr	r3, [pc, #64]	; (800aea0 <xPortStartScheduler+0x140>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a0f      	ldr	r2, [pc, #60]	; (800aea0 <xPortStartScheduler+0x140>)
 800ae62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae68:	f7ff ff66 	bl	800ad38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae6c:	f7ff fa60 	bl	800a330 <vTaskSwitchContext>
	prvTaskExitError();
 800ae70:	f7ff ff22 	bl	800acb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	e000ed00 	.word	0xe000ed00
 800ae84:	410fc271 	.word	0x410fc271
 800ae88:	410fc270 	.word	0x410fc270
 800ae8c:	e000e400 	.word	0xe000e400
 800ae90:	20000634 	.word	0x20000634
 800ae94:	20000638 	.word	0x20000638
 800ae98:	e000ed20 	.word	0xe000ed20
 800ae9c:	20000028 	.word	0x20000028
 800aea0:	e000ef34 	.word	0xe000ef34

0800aea4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	607b      	str	r3, [r7, #4]
}
 800aebc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aebe:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <vPortEnterCritical+0x58>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3301      	adds	r3, #1
 800aec4:	4a0d      	ldr	r2, [pc, #52]	; (800aefc <vPortEnterCritical+0x58>)
 800aec6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aec8:	4b0c      	ldr	r3, [pc, #48]	; (800aefc <vPortEnterCritical+0x58>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d10f      	bne.n	800aef0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aed0:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <vPortEnterCritical+0x5c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00a      	beq.n	800aef0 <vPortEnterCritical+0x4c>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	603b      	str	r3, [r7, #0]
}
 800aeec:	bf00      	nop
 800aeee:	e7fe      	b.n	800aeee <vPortEnterCritical+0x4a>
	}
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	20000028 	.word	0x20000028
 800af00:	e000ed04 	.word	0xe000ed04

0800af04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af0a:	4b12      	ldr	r3, [pc, #72]	; (800af54 <vPortExitCritical+0x50>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10a      	bne.n	800af28 <vPortExitCritical+0x24>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	607b      	str	r3, [r7, #4]
}
 800af24:	bf00      	nop
 800af26:	e7fe      	b.n	800af26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af28:	4b0a      	ldr	r3, [pc, #40]	; (800af54 <vPortExitCritical+0x50>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	4a09      	ldr	r2, [pc, #36]	; (800af54 <vPortExitCritical+0x50>)
 800af30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af32:	4b08      	ldr	r3, [pc, #32]	; (800af54 <vPortExitCritical+0x50>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d105      	bne.n	800af46 <vPortExitCritical+0x42>
 800af3a:	2300      	movs	r3, #0
 800af3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	f383 8811 	msr	BASEPRI, r3
}
 800af44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af46:	bf00      	nop
 800af48:	370c      	adds	r7, #12
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	20000028 	.word	0x20000028
	...

0800af60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af60:	f3ef 8009 	mrs	r0, PSP
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	4b15      	ldr	r3, [pc, #84]	; (800afc0 <pxCurrentTCBConst>)
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	f01e 0f10 	tst.w	lr, #16
 800af70:	bf08      	it	eq
 800af72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7a:	6010      	str	r0, [r2, #0]
 800af7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af84:	f380 8811 	msr	BASEPRI, r0
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f7ff f9ce 	bl	800a330 <vTaskSwitchContext>
 800af94:	f04f 0000 	mov.w	r0, #0
 800af98:	f380 8811 	msr	BASEPRI, r0
 800af9c:	bc09      	pop	{r0, r3}
 800af9e:	6819      	ldr	r1, [r3, #0]
 800afa0:	6808      	ldr	r0, [r1, #0]
 800afa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa6:	f01e 0f10 	tst.w	lr, #16
 800afaa:	bf08      	it	eq
 800afac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afb0:	f380 8809 	msr	PSP, r0
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	f3af 8000 	nop.w

0800afc0 <pxCurrentTCBConst>:
 800afc0:	20000508 	.word	0x20000508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop

0800afc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	607b      	str	r3, [r7, #4]
}
 800afe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afe2:	f7ff f8e7 	bl	800a1b4 <xTaskIncrementTick>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d003      	beq.n	800aff4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afec:	4b06      	ldr	r3, [pc, #24]	; (800b008 <SysTick_Handler+0x40>)
 800afee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	2300      	movs	r3, #0
 800aff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f383 8811 	msr	BASEPRI, r3
}
 800affe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	e000ed04 	.word	0xe000ed04

0800b00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b00c:	b480      	push	{r7}
 800b00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b010:	4b0b      	ldr	r3, [pc, #44]	; (800b040 <vPortSetupTimerInterrupt+0x34>)
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b016:	4b0b      	ldr	r3, [pc, #44]	; (800b044 <vPortSetupTimerInterrupt+0x38>)
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b01c:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <vPortSetupTimerInterrupt+0x3c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a0a      	ldr	r2, [pc, #40]	; (800b04c <vPortSetupTimerInterrupt+0x40>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	099b      	lsrs	r3, r3, #6
 800b028:	4a09      	ldr	r2, [pc, #36]	; (800b050 <vPortSetupTimerInterrupt+0x44>)
 800b02a:	3b01      	subs	r3, #1
 800b02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b02e:	4b04      	ldr	r3, [pc, #16]	; (800b040 <vPortSetupTimerInterrupt+0x34>)
 800b030:	2207      	movs	r2, #7
 800b032:	601a      	str	r2, [r3, #0]
}
 800b034:	bf00      	nop
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	e000e010 	.word	0xe000e010
 800b044:	e000e018 	.word	0xe000e018
 800b048:	20000008 	.word	0x20000008
 800b04c:	10624dd3 	.word	0x10624dd3
 800b050:	e000e014 	.word	0xe000e014

0800b054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b064 <vPortEnableVFP+0x10>
 800b058:	6801      	ldr	r1, [r0, #0]
 800b05a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b05e:	6001      	str	r1, [r0, #0]
 800b060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b062:	bf00      	nop
 800b064:	e000ed88 	.word	0xe000ed88

0800b068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b06e:	f3ef 8305 	mrs	r3, IPSR
 800b072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b0f      	cmp	r3, #15
 800b078:	d914      	bls.n	800b0a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b07a:	4a17      	ldr	r2, [pc, #92]	; (800b0d8 <vPortValidateInterruptPriority+0x70>)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4413      	add	r3, r2
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b084:	4b15      	ldr	r3, [pc, #84]	; (800b0dc <vPortValidateInterruptPriority+0x74>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	7afa      	ldrb	r2, [r7, #11]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d20a      	bcs.n	800b0a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	607b      	str	r3, [r7, #4]
}
 800b0a0:	bf00      	nop
 800b0a2:	e7fe      	b.n	800b0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0a4:	4b0e      	ldr	r3, [pc, #56]	; (800b0e0 <vPortValidateInterruptPriority+0x78>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0ac:	4b0d      	ldr	r3, [pc, #52]	; (800b0e4 <vPortValidateInterruptPriority+0x7c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d90a      	bls.n	800b0ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
 800b0c4:	603b      	str	r3, [r7, #0]
}
 800b0c6:	bf00      	nop
 800b0c8:	e7fe      	b.n	800b0c8 <vPortValidateInterruptPriority+0x60>
	}
 800b0ca:	bf00      	nop
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	e000e3f0 	.word	0xe000e3f0
 800b0dc:	20000634 	.word	0x20000634
 800b0e0:	e000ed0c 	.word	0xe000ed0c
 800b0e4:	20000638 	.word	0x20000638

0800b0e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08a      	sub	sp, #40	; 0x28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0f4:	f7fe ffb4 	bl	800a060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0f8:	4b58      	ldr	r3, [pc, #352]	; (800b25c <pvPortMalloc+0x174>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b100:	f000 f910 	bl	800b324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b104:	4b56      	ldr	r3, [pc, #344]	; (800b260 <pvPortMalloc+0x178>)
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f040 808e 	bne.w	800b22e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d01d      	beq.n	800b154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b118:	2208      	movs	r2, #8
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4413      	add	r3, r2
 800b11e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f003 0307 	and.w	r3, r3, #7
 800b126:	2b00      	cmp	r3, #0
 800b128:	d014      	beq.n	800b154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f023 0307 	bic.w	r3, r3, #7
 800b130:	3308      	adds	r3, #8
 800b132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f003 0307 	and.w	r3, r3, #7
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00a      	beq.n	800b154 <pvPortMalloc+0x6c>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	617b      	str	r3, [r7, #20]
}
 800b150:	bf00      	nop
 800b152:	e7fe      	b.n	800b152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d069      	beq.n	800b22e <pvPortMalloc+0x146>
 800b15a:	4b42      	ldr	r3, [pc, #264]	; (800b264 <pvPortMalloc+0x17c>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	429a      	cmp	r2, r3
 800b162:	d864      	bhi.n	800b22e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b164:	4b40      	ldr	r3, [pc, #256]	; (800b268 <pvPortMalloc+0x180>)
 800b166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b168:	4b3f      	ldr	r3, [pc, #252]	; (800b268 <pvPortMalloc+0x180>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b16e:	e004      	b.n	800b17a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d903      	bls.n	800b18c <pvPortMalloc+0xa4>
 800b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1f1      	bne.n	800b170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b18c:	4b33      	ldr	r3, [pc, #204]	; (800b25c <pvPortMalloc+0x174>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b192:	429a      	cmp	r2, r3
 800b194:	d04b      	beq.n	800b22e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2208      	movs	r2, #8
 800b19c:	4413      	add	r3, r2
 800b19e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	1ad2      	subs	r2, r2, r3
 800b1b0:	2308      	movs	r3, #8
 800b1b2:	005b      	lsls	r3, r3, #1
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d91f      	bls.n	800b1f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4413      	add	r3, r2
 800b1be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	613b      	str	r3, [r7, #16]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e2:	685a      	ldr	r2, [r3, #4]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	1ad2      	subs	r2, r2, r3
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1f2:	69b8      	ldr	r0, [r7, #24]
 800b1f4:	f000 f8f8 	bl	800b3e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1f8:	4b1a      	ldr	r3, [pc, #104]	; (800b264 <pvPortMalloc+0x17c>)
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	4a18      	ldr	r2, [pc, #96]	; (800b264 <pvPortMalloc+0x17c>)
 800b204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b206:	4b17      	ldr	r3, [pc, #92]	; (800b264 <pvPortMalloc+0x17c>)
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	4b18      	ldr	r3, [pc, #96]	; (800b26c <pvPortMalloc+0x184>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d203      	bcs.n	800b21a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b212:	4b14      	ldr	r3, [pc, #80]	; (800b264 <pvPortMalloc+0x17c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a15      	ldr	r2, [pc, #84]	; (800b26c <pvPortMalloc+0x184>)
 800b218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	4b10      	ldr	r3, [pc, #64]	; (800b260 <pvPortMalloc+0x178>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	431a      	orrs	r2, r3
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b22e:	f7fe ff25 	bl	800a07c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	f003 0307 	and.w	r3, r3, #7
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00a      	beq.n	800b252 <pvPortMalloc+0x16a>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	60fb      	str	r3, [r7, #12]
}
 800b24e:	bf00      	nop
 800b250:	e7fe      	b.n	800b250 <pvPortMalloc+0x168>
	return pvReturn;
 800b252:	69fb      	ldr	r3, [r7, #28]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3728      	adds	r7, #40	; 0x28
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	20001544 	.word	0x20001544
 800b260:	20001550 	.word	0x20001550
 800b264:	20001548 	.word	0x20001548
 800b268:	2000153c 	.word	0x2000153c
 800b26c:	2000154c 	.word	0x2000154c

0800b270 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b086      	sub	sp, #24
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d048      	beq.n	800b314 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b282:	2308      	movs	r3, #8
 800b284:	425b      	negs	r3, r3
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	4413      	add	r3, r2
 800b28a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	4b21      	ldr	r3, [pc, #132]	; (800b31c <vPortFree+0xac>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4013      	ands	r3, r2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10a      	bne.n	800b2b4 <vPortFree+0x44>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	60fb      	str	r3, [r7, #12]
}
 800b2b0:	bf00      	nop
 800b2b2:	e7fe      	b.n	800b2b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00a      	beq.n	800b2d2 <vPortFree+0x62>
	__asm volatile
 800b2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c0:	f383 8811 	msr	BASEPRI, r3
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	60bb      	str	r3, [r7, #8]
}
 800b2ce:	bf00      	nop
 800b2d0:	e7fe      	b.n	800b2d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	4b11      	ldr	r3, [pc, #68]	; (800b31c <vPortFree+0xac>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d019      	beq.n	800b314 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d115      	bne.n	800b314 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	4b0b      	ldr	r3, [pc, #44]	; (800b31c <vPortFree+0xac>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	43db      	mvns	r3, r3
 800b2f2:	401a      	ands	r2, r3
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2f8:	f7fe feb2 	bl	800a060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	685a      	ldr	r2, [r3, #4]
 800b300:	4b07      	ldr	r3, [pc, #28]	; (800b320 <vPortFree+0xb0>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4413      	add	r3, r2
 800b306:	4a06      	ldr	r2, [pc, #24]	; (800b320 <vPortFree+0xb0>)
 800b308:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b30a:	6938      	ldr	r0, [r7, #16]
 800b30c:	f000 f86c 	bl	800b3e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b310:	f7fe feb4 	bl	800a07c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b314:	bf00      	nop
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	20001550 	.word	0x20001550
 800b320:	20001548 	.word	0x20001548

0800b324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b32a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800b32e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b330:	4b27      	ldr	r3, [pc, #156]	; (800b3d0 <prvHeapInit+0xac>)
 800b332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00c      	beq.n	800b358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3307      	adds	r3, #7
 800b342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f023 0307 	bic.w	r3, r3, #7
 800b34a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	4a1f      	ldr	r2, [pc, #124]	; (800b3d0 <prvHeapInit+0xac>)
 800b354:	4413      	add	r3, r2
 800b356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b35c:	4a1d      	ldr	r2, [pc, #116]	; (800b3d4 <prvHeapInit+0xb0>)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b362:	4b1c      	ldr	r3, [pc, #112]	; (800b3d4 <prvHeapInit+0xb0>)
 800b364:	2200      	movs	r2, #0
 800b366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	4413      	add	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b370:	2208      	movs	r2, #8
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	1a9b      	subs	r3, r3, r2
 800b376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f023 0307 	bic.w	r3, r3, #7
 800b37e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	4a15      	ldr	r2, [pc, #84]	; (800b3d8 <prvHeapInit+0xb4>)
 800b384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b386:	4b14      	ldr	r3, [pc, #80]	; (800b3d8 <prvHeapInit+0xb4>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2200      	movs	r2, #0
 800b38c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b38e:	4b12      	ldr	r3, [pc, #72]	; (800b3d8 <prvHeapInit+0xb4>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2200      	movs	r2, #0
 800b394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	1ad2      	subs	r2, r2, r3
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3a4:	4b0c      	ldr	r3, [pc, #48]	; (800b3d8 <prvHeapInit+0xb4>)
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	4a0a      	ldr	r2, [pc, #40]	; (800b3dc <prvHeapInit+0xb8>)
 800b3b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	4a09      	ldr	r2, [pc, #36]	; (800b3e0 <prvHeapInit+0xbc>)
 800b3ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3bc:	4b09      	ldr	r3, [pc, #36]	; (800b3e4 <prvHeapInit+0xc0>)
 800b3be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3c2:	601a      	str	r2, [r3, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	2000063c 	.word	0x2000063c
 800b3d4:	2000153c 	.word	0x2000153c
 800b3d8:	20001544 	.word	0x20001544
 800b3dc:	2000154c 	.word	0x2000154c
 800b3e0:	20001548 	.word	0x20001548
 800b3e4:	20001550 	.word	0x20001550

0800b3e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3f0:	4b28      	ldr	r3, [pc, #160]	; (800b494 <prvInsertBlockIntoFreeList+0xac>)
 800b3f2:	60fb      	str	r3, [r7, #12]
 800b3f4:	e002      	b.n	800b3fc <prvInsertBlockIntoFreeList+0x14>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	60fb      	str	r3, [r7, #12]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	429a      	cmp	r2, r3
 800b404:	d8f7      	bhi.n	800b3f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	68ba      	ldr	r2, [r7, #8]
 800b410:	4413      	add	r3, r2
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	429a      	cmp	r2, r3
 800b416:	d108      	bne.n	800b42a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	441a      	add	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	441a      	add	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d118      	bne.n	800b470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	4b15      	ldr	r3, [pc, #84]	; (800b498 <prvInsertBlockIntoFreeList+0xb0>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	429a      	cmp	r2, r3
 800b448:	d00d      	beq.n	800b466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	441a      	add	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	e008      	b.n	800b478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b466:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <prvInsertBlockIntoFreeList+0xb0>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	e003      	b.n	800b478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d002      	beq.n	800b486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b486:	bf00      	nop
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	2000153c 	.word	0x2000153c
 800b498:	20001544 	.word	0x20001544

0800b49c <__errno>:
 800b49c:	4b01      	ldr	r3, [pc, #4]	; (800b4a4 <__errno+0x8>)
 800b49e:	6818      	ldr	r0, [r3, #0]
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	2000002c 	.word	0x2000002c

0800b4a8 <__libc_init_array>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	4d0d      	ldr	r5, [pc, #52]	; (800b4e0 <__libc_init_array+0x38>)
 800b4ac:	4c0d      	ldr	r4, [pc, #52]	; (800b4e4 <__libc_init_array+0x3c>)
 800b4ae:	1b64      	subs	r4, r4, r5
 800b4b0:	10a4      	asrs	r4, r4, #2
 800b4b2:	2600      	movs	r6, #0
 800b4b4:	42a6      	cmp	r6, r4
 800b4b6:	d109      	bne.n	800b4cc <__libc_init_array+0x24>
 800b4b8:	4d0b      	ldr	r5, [pc, #44]	; (800b4e8 <__libc_init_array+0x40>)
 800b4ba:	4c0c      	ldr	r4, [pc, #48]	; (800b4ec <__libc_init_array+0x44>)
 800b4bc:	f000 fd3c 	bl	800bf38 <_init>
 800b4c0:	1b64      	subs	r4, r4, r5
 800b4c2:	10a4      	asrs	r4, r4, #2
 800b4c4:	2600      	movs	r6, #0
 800b4c6:	42a6      	cmp	r6, r4
 800b4c8:	d105      	bne.n	800b4d6 <__libc_init_array+0x2e>
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}
 800b4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4d0:	4798      	blx	r3
 800b4d2:	3601      	adds	r6, #1
 800b4d4:	e7ee      	b.n	800b4b4 <__libc_init_array+0xc>
 800b4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4da:	4798      	blx	r3
 800b4dc:	3601      	adds	r6, #1
 800b4de:	e7f2      	b.n	800b4c6 <__libc_init_array+0x1e>
 800b4e0:	0800c4d4 	.word	0x0800c4d4
 800b4e4:	0800c4d4 	.word	0x0800c4d4
 800b4e8:	0800c4d4 	.word	0x0800c4d4
 800b4ec:	0800c4d8 	.word	0x0800c4d8

0800b4f0 <__retarget_lock_acquire_recursive>:
 800b4f0:	4770      	bx	lr

0800b4f2 <__retarget_lock_release_recursive>:
 800b4f2:	4770      	bx	lr

0800b4f4 <malloc>:
 800b4f4:	4b02      	ldr	r3, [pc, #8]	; (800b500 <malloc+0xc>)
 800b4f6:	4601      	mov	r1, r0
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	f000 b88d 	b.w	800b618 <_malloc_r>
 800b4fe:	bf00      	nop
 800b500:	2000002c 	.word	0x2000002c

0800b504 <free>:
 800b504:	4b02      	ldr	r3, [pc, #8]	; (800b510 <free+0xc>)
 800b506:	4601      	mov	r1, r0
 800b508:	6818      	ldr	r0, [r3, #0]
 800b50a:	f000 b819 	b.w	800b540 <_free_r>
 800b50e:	bf00      	nop
 800b510:	2000002c 	.word	0x2000002c

0800b514 <memcpy>:
 800b514:	440a      	add	r2, r1
 800b516:	4291      	cmp	r1, r2
 800b518:	f100 33ff 	add.w	r3, r0, #4294967295
 800b51c:	d100      	bne.n	800b520 <memcpy+0xc>
 800b51e:	4770      	bx	lr
 800b520:	b510      	push	{r4, lr}
 800b522:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b52a:	4291      	cmp	r1, r2
 800b52c:	d1f9      	bne.n	800b522 <memcpy+0xe>
 800b52e:	bd10      	pop	{r4, pc}

0800b530 <memset>:
 800b530:	4402      	add	r2, r0
 800b532:	4603      	mov	r3, r0
 800b534:	4293      	cmp	r3, r2
 800b536:	d100      	bne.n	800b53a <memset+0xa>
 800b538:	4770      	bx	lr
 800b53a:	f803 1b01 	strb.w	r1, [r3], #1
 800b53e:	e7f9      	b.n	800b534 <memset+0x4>

0800b540 <_free_r>:
 800b540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b542:	2900      	cmp	r1, #0
 800b544:	d044      	beq.n	800b5d0 <_free_r+0x90>
 800b546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b54a:	9001      	str	r0, [sp, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f1a1 0404 	sub.w	r4, r1, #4
 800b552:	bfb8      	it	lt
 800b554:	18e4      	addlt	r4, r4, r3
 800b556:	f000 f9a3 	bl	800b8a0 <__malloc_lock>
 800b55a:	4a1e      	ldr	r2, [pc, #120]	; (800b5d4 <_free_r+0x94>)
 800b55c:	9801      	ldr	r0, [sp, #4]
 800b55e:	6813      	ldr	r3, [r2, #0]
 800b560:	b933      	cbnz	r3, 800b570 <_free_r+0x30>
 800b562:	6063      	str	r3, [r4, #4]
 800b564:	6014      	str	r4, [r2, #0]
 800b566:	b003      	add	sp, #12
 800b568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b56c:	f000 b99e 	b.w	800b8ac <__malloc_unlock>
 800b570:	42a3      	cmp	r3, r4
 800b572:	d908      	bls.n	800b586 <_free_r+0x46>
 800b574:	6825      	ldr	r5, [r4, #0]
 800b576:	1961      	adds	r1, r4, r5
 800b578:	428b      	cmp	r3, r1
 800b57a:	bf01      	itttt	eq
 800b57c:	6819      	ldreq	r1, [r3, #0]
 800b57e:	685b      	ldreq	r3, [r3, #4]
 800b580:	1949      	addeq	r1, r1, r5
 800b582:	6021      	streq	r1, [r4, #0]
 800b584:	e7ed      	b.n	800b562 <_free_r+0x22>
 800b586:	461a      	mov	r2, r3
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	b10b      	cbz	r3, 800b590 <_free_r+0x50>
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	d9fa      	bls.n	800b586 <_free_r+0x46>
 800b590:	6811      	ldr	r1, [r2, #0]
 800b592:	1855      	adds	r5, r2, r1
 800b594:	42a5      	cmp	r5, r4
 800b596:	d10b      	bne.n	800b5b0 <_free_r+0x70>
 800b598:	6824      	ldr	r4, [r4, #0]
 800b59a:	4421      	add	r1, r4
 800b59c:	1854      	adds	r4, r2, r1
 800b59e:	42a3      	cmp	r3, r4
 800b5a0:	6011      	str	r1, [r2, #0]
 800b5a2:	d1e0      	bne.n	800b566 <_free_r+0x26>
 800b5a4:	681c      	ldr	r4, [r3, #0]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	6053      	str	r3, [r2, #4]
 800b5aa:	4421      	add	r1, r4
 800b5ac:	6011      	str	r1, [r2, #0]
 800b5ae:	e7da      	b.n	800b566 <_free_r+0x26>
 800b5b0:	d902      	bls.n	800b5b8 <_free_r+0x78>
 800b5b2:	230c      	movs	r3, #12
 800b5b4:	6003      	str	r3, [r0, #0]
 800b5b6:	e7d6      	b.n	800b566 <_free_r+0x26>
 800b5b8:	6825      	ldr	r5, [r4, #0]
 800b5ba:	1961      	adds	r1, r4, r5
 800b5bc:	428b      	cmp	r3, r1
 800b5be:	bf04      	itt	eq
 800b5c0:	6819      	ldreq	r1, [r3, #0]
 800b5c2:	685b      	ldreq	r3, [r3, #4]
 800b5c4:	6063      	str	r3, [r4, #4]
 800b5c6:	bf04      	itt	eq
 800b5c8:	1949      	addeq	r1, r1, r5
 800b5ca:	6021      	streq	r1, [r4, #0]
 800b5cc:	6054      	str	r4, [r2, #4]
 800b5ce:	e7ca      	b.n	800b566 <_free_r+0x26>
 800b5d0:	b003      	add	sp, #12
 800b5d2:	bd30      	pop	{r4, r5, pc}
 800b5d4:	20001558 	.word	0x20001558

0800b5d8 <sbrk_aligned>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	4e0e      	ldr	r6, [pc, #56]	; (800b614 <sbrk_aligned+0x3c>)
 800b5dc:	460c      	mov	r4, r1
 800b5de:	6831      	ldr	r1, [r6, #0]
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	b911      	cbnz	r1, 800b5ea <sbrk_aligned+0x12>
 800b5e4:	f000 f8fe 	bl	800b7e4 <_sbrk_r>
 800b5e8:	6030      	str	r0, [r6, #0]
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f000 f8f9 	bl	800b7e4 <_sbrk_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	d00a      	beq.n	800b60c <sbrk_aligned+0x34>
 800b5f6:	1cc4      	adds	r4, r0, #3
 800b5f8:	f024 0403 	bic.w	r4, r4, #3
 800b5fc:	42a0      	cmp	r0, r4
 800b5fe:	d007      	beq.n	800b610 <sbrk_aligned+0x38>
 800b600:	1a21      	subs	r1, r4, r0
 800b602:	4628      	mov	r0, r5
 800b604:	f000 f8ee 	bl	800b7e4 <_sbrk_r>
 800b608:	3001      	adds	r0, #1
 800b60a:	d101      	bne.n	800b610 <sbrk_aligned+0x38>
 800b60c:	f04f 34ff 	mov.w	r4, #4294967295
 800b610:	4620      	mov	r0, r4
 800b612:	bd70      	pop	{r4, r5, r6, pc}
 800b614:	2000155c 	.word	0x2000155c

0800b618 <_malloc_r>:
 800b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b61c:	1ccd      	adds	r5, r1, #3
 800b61e:	f025 0503 	bic.w	r5, r5, #3
 800b622:	3508      	adds	r5, #8
 800b624:	2d0c      	cmp	r5, #12
 800b626:	bf38      	it	cc
 800b628:	250c      	movcc	r5, #12
 800b62a:	2d00      	cmp	r5, #0
 800b62c:	4607      	mov	r7, r0
 800b62e:	db01      	blt.n	800b634 <_malloc_r+0x1c>
 800b630:	42a9      	cmp	r1, r5
 800b632:	d905      	bls.n	800b640 <_malloc_r+0x28>
 800b634:	230c      	movs	r3, #12
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	2600      	movs	r6, #0
 800b63a:	4630      	mov	r0, r6
 800b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b640:	4e2e      	ldr	r6, [pc, #184]	; (800b6fc <_malloc_r+0xe4>)
 800b642:	f000 f92d 	bl	800b8a0 <__malloc_lock>
 800b646:	6833      	ldr	r3, [r6, #0]
 800b648:	461c      	mov	r4, r3
 800b64a:	bb34      	cbnz	r4, 800b69a <_malloc_r+0x82>
 800b64c:	4629      	mov	r1, r5
 800b64e:	4638      	mov	r0, r7
 800b650:	f7ff ffc2 	bl	800b5d8 <sbrk_aligned>
 800b654:	1c43      	adds	r3, r0, #1
 800b656:	4604      	mov	r4, r0
 800b658:	d14d      	bne.n	800b6f6 <_malloc_r+0xde>
 800b65a:	6834      	ldr	r4, [r6, #0]
 800b65c:	4626      	mov	r6, r4
 800b65e:	2e00      	cmp	r6, #0
 800b660:	d140      	bne.n	800b6e4 <_malloc_r+0xcc>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	4631      	mov	r1, r6
 800b666:	4638      	mov	r0, r7
 800b668:	eb04 0803 	add.w	r8, r4, r3
 800b66c:	f000 f8ba 	bl	800b7e4 <_sbrk_r>
 800b670:	4580      	cmp	r8, r0
 800b672:	d13a      	bne.n	800b6ea <_malloc_r+0xd2>
 800b674:	6821      	ldr	r1, [r4, #0]
 800b676:	3503      	adds	r5, #3
 800b678:	1a6d      	subs	r5, r5, r1
 800b67a:	f025 0503 	bic.w	r5, r5, #3
 800b67e:	3508      	adds	r5, #8
 800b680:	2d0c      	cmp	r5, #12
 800b682:	bf38      	it	cc
 800b684:	250c      	movcc	r5, #12
 800b686:	4629      	mov	r1, r5
 800b688:	4638      	mov	r0, r7
 800b68a:	f7ff ffa5 	bl	800b5d8 <sbrk_aligned>
 800b68e:	3001      	adds	r0, #1
 800b690:	d02b      	beq.n	800b6ea <_malloc_r+0xd2>
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	442b      	add	r3, r5
 800b696:	6023      	str	r3, [r4, #0]
 800b698:	e00e      	b.n	800b6b8 <_malloc_r+0xa0>
 800b69a:	6822      	ldr	r2, [r4, #0]
 800b69c:	1b52      	subs	r2, r2, r5
 800b69e:	d41e      	bmi.n	800b6de <_malloc_r+0xc6>
 800b6a0:	2a0b      	cmp	r2, #11
 800b6a2:	d916      	bls.n	800b6d2 <_malloc_r+0xba>
 800b6a4:	1961      	adds	r1, r4, r5
 800b6a6:	42a3      	cmp	r3, r4
 800b6a8:	6025      	str	r5, [r4, #0]
 800b6aa:	bf18      	it	ne
 800b6ac:	6059      	strne	r1, [r3, #4]
 800b6ae:	6863      	ldr	r3, [r4, #4]
 800b6b0:	bf08      	it	eq
 800b6b2:	6031      	streq	r1, [r6, #0]
 800b6b4:	5162      	str	r2, [r4, r5]
 800b6b6:	604b      	str	r3, [r1, #4]
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	f104 060b 	add.w	r6, r4, #11
 800b6be:	f000 f8f5 	bl	800b8ac <__malloc_unlock>
 800b6c2:	f026 0607 	bic.w	r6, r6, #7
 800b6c6:	1d23      	adds	r3, r4, #4
 800b6c8:	1af2      	subs	r2, r6, r3
 800b6ca:	d0b6      	beq.n	800b63a <_malloc_r+0x22>
 800b6cc:	1b9b      	subs	r3, r3, r6
 800b6ce:	50a3      	str	r3, [r4, r2]
 800b6d0:	e7b3      	b.n	800b63a <_malloc_r+0x22>
 800b6d2:	6862      	ldr	r2, [r4, #4]
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	bf0c      	ite	eq
 800b6d8:	6032      	streq	r2, [r6, #0]
 800b6da:	605a      	strne	r2, [r3, #4]
 800b6dc:	e7ec      	b.n	800b6b8 <_malloc_r+0xa0>
 800b6de:	4623      	mov	r3, r4
 800b6e0:	6864      	ldr	r4, [r4, #4]
 800b6e2:	e7b2      	b.n	800b64a <_malloc_r+0x32>
 800b6e4:	4634      	mov	r4, r6
 800b6e6:	6876      	ldr	r6, [r6, #4]
 800b6e8:	e7b9      	b.n	800b65e <_malloc_r+0x46>
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	603b      	str	r3, [r7, #0]
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	f000 f8dc 	bl	800b8ac <__malloc_unlock>
 800b6f4:	e7a1      	b.n	800b63a <_malloc_r+0x22>
 800b6f6:	6025      	str	r5, [r4, #0]
 800b6f8:	e7de      	b.n	800b6b8 <_malloc_r+0xa0>
 800b6fa:	bf00      	nop
 800b6fc:	20001558 	.word	0x20001558

0800b700 <realloc>:
 800b700:	4b02      	ldr	r3, [pc, #8]	; (800b70c <realloc+0xc>)
 800b702:	460a      	mov	r2, r1
 800b704:	4601      	mov	r1, r0
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	f000 b8d6 	b.w	800b8b8 <_realloc_r>
 800b70c:	2000002c 	.word	0x2000002c

0800b710 <cleanup_glue>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	460c      	mov	r4, r1
 800b714:	6809      	ldr	r1, [r1, #0]
 800b716:	4605      	mov	r5, r0
 800b718:	b109      	cbz	r1, 800b71e <cleanup_glue+0xe>
 800b71a:	f7ff fff9 	bl	800b710 <cleanup_glue>
 800b71e:	4621      	mov	r1, r4
 800b720:	4628      	mov	r0, r5
 800b722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b726:	f7ff bf0b 	b.w	800b540 <_free_r>
	...

0800b72c <_reclaim_reent>:
 800b72c:	4b2c      	ldr	r3, [pc, #176]	; (800b7e0 <_reclaim_reent+0xb4>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4283      	cmp	r3, r0
 800b732:	b570      	push	{r4, r5, r6, lr}
 800b734:	4604      	mov	r4, r0
 800b736:	d051      	beq.n	800b7dc <_reclaim_reent+0xb0>
 800b738:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b73a:	b143      	cbz	r3, 800b74e <_reclaim_reent+0x22>
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d14a      	bne.n	800b7d8 <_reclaim_reent+0xac>
 800b742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b744:	6819      	ldr	r1, [r3, #0]
 800b746:	b111      	cbz	r1, 800b74e <_reclaim_reent+0x22>
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff fef9 	bl	800b540 <_free_r>
 800b74e:	6961      	ldr	r1, [r4, #20]
 800b750:	b111      	cbz	r1, 800b758 <_reclaim_reent+0x2c>
 800b752:	4620      	mov	r0, r4
 800b754:	f7ff fef4 	bl	800b540 <_free_r>
 800b758:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b75a:	b111      	cbz	r1, 800b762 <_reclaim_reent+0x36>
 800b75c:	4620      	mov	r0, r4
 800b75e:	f7ff feef 	bl	800b540 <_free_r>
 800b762:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b764:	b111      	cbz	r1, 800b76c <_reclaim_reent+0x40>
 800b766:	4620      	mov	r0, r4
 800b768:	f7ff feea 	bl	800b540 <_free_r>
 800b76c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b76e:	b111      	cbz	r1, 800b776 <_reclaim_reent+0x4a>
 800b770:	4620      	mov	r0, r4
 800b772:	f7ff fee5 	bl	800b540 <_free_r>
 800b776:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b778:	b111      	cbz	r1, 800b780 <_reclaim_reent+0x54>
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff fee0 	bl	800b540 <_free_r>
 800b780:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b782:	b111      	cbz	r1, 800b78a <_reclaim_reent+0x5e>
 800b784:	4620      	mov	r0, r4
 800b786:	f7ff fedb 	bl	800b540 <_free_r>
 800b78a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b78c:	b111      	cbz	r1, 800b794 <_reclaim_reent+0x68>
 800b78e:	4620      	mov	r0, r4
 800b790:	f7ff fed6 	bl	800b540 <_free_r>
 800b794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b796:	b111      	cbz	r1, 800b79e <_reclaim_reent+0x72>
 800b798:	4620      	mov	r0, r4
 800b79a:	f7ff fed1 	bl	800b540 <_free_r>
 800b79e:	69a3      	ldr	r3, [r4, #24]
 800b7a0:	b1e3      	cbz	r3, 800b7dc <_reclaim_reent+0xb0>
 800b7a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4798      	blx	r3
 800b7a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7aa:	b1b9      	cbz	r1, 800b7dc <_reclaim_reent+0xb0>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7b2:	f7ff bfad 	b.w	800b710 <cleanup_glue>
 800b7b6:	5949      	ldr	r1, [r1, r5]
 800b7b8:	b941      	cbnz	r1, 800b7cc <_reclaim_reent+0xa0>
 800b7ba:	3504      	adds	r5, #4
 800b7bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7be:	2d80      	cmp	r5, #128	; 0x80
 800b7c0:	68d9      	ldr	r1, [r3, #12]
 800b7c2:	d1f8      	bne.n	800b7b6 <_reclaim_reent+0x8a>
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f7ff febb 	bl	800b540 <_free_r>
 800b7ca:	e7ba      	b.n	800b742 <_reclaim_reent+0x16>
 800b7cc:	680e      	ldr	r6, [r1, #0]
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f7ff feb6 	bl	800b540 <_free_r>
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	e7ef      	b.n	800b7b8 <_reclaim_reent+0x8c>
 800b7d8:	2500      	movs	r5, #0
 800b7da:	e7ef      	b.n	800b7bc <_reclaim_reent+0x90>
 800b7dc:	bd70      	pop	{r4, r5, r6, pc}
 800b7de:	bf00      	nop
 800b7e0:	2000002c 	.word	0x2000002c

0800b7e4 <_sbrk_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	; (800b800 <_sbrk_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f6 f806 	bl	8001800 <_sbrk>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_sbrk_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_sbrk_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	20001560 	.word	0x20001560

0800b804 <strchr>:
 800b804:	b2c9      	uxtb	r1, r1
 800b806:	4603      	mov	r3, r0
 800b808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b80c:	b11a      	cbz	r2, 800b816 <strchr+0x12>
 800b80e:	428a      	cmp	r2, r1
 800b810:	d1f9      	bne.n	800b806 <strchr+0x2>
 800b812:	4618      	mov	r0, r3
 800b814:	4770      	bx	lr
 800b816:	2900      	cmp	r1, #0
 800b818:	bf18      	it	ne
 800b81a:	2300      	movne	r3, #0
 800b81c:	e7f9      	b.n	800b812 <strchr+0xe>

0800b81e <strcpy>:
 800b81e:	4603      	mov	r3, r0
 800b820:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b824:	f803 2b01 	strb.w	r2, [r3], #1
 800b828:	2a00      	cmp	r2, #0
 800b82a:	d1f9      	bne.n	800b820 <strcpy+0x2>
 800b82c:	4770      	bx	lr

0800b82e <_vsniprintf_r>:
 800b82e:	b530      	push	{r4, r5, lr}
 800b830:	4614      	mov	r4, r2
 800b832:	2c00      	cmp	r4, #0
 800b834:	b09b      	sub	sp, #108	; 0x6c
 800b836:	4605      	mov	r5, r0
 800b838:	461a      	mov	r2, r3
 800b83a:	da05      	bge.n	800b848 <_vsniprintf_r+0x1a>
 800b83c:	238b      	movs	r3, #139	; 0x8b
 800b83e:	6003      	str	r3, [r0, #0]
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	b01b      	add	sp, #108	; 0x6c
 800b846:	bd30      	pop	{r4, r5, pc}
 800b848:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b84c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b850:	bf14      	ite	ne
 800b852:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b856:	4623      	moveq	r3, r4
 800b858:	9302      	str	r3, [sp, #8]
 800b85a:	9305      	str	r3, [sp, #20]
 800b85c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b860:	9100      	str	r1, [sp, #0]
 800b862:	9104      	str	r1, [sp, #16]
 800b864:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b868:	4669      	mov	r1, sp
 800b86a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b86c:	f000 f8ae 	bl	800b9cc <_svfiprintf_r>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	bfbc      	itt	lt
 800b874:	238b      	movlt	r3, #139	; 0x8b
 800b876:	602b      	strlt	r3, [r5, #0]
 800b878:	2c00      	cmp	r4, #0
 800b87a:	d0e3      	beq.n	800b844 <_vsniprintf_r+0x16>
 800b87c:	9b00      	ldr	r3, [sp, #0]
 800b87e:	2200      	movs	r2, #0
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	e7df      	b.n	800b844 <_vsniprintf_r+0x16>

0800b884 <vsniprintf>:
 800b884:	b507      	push	{r0, r1, r2, lr}
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	4613      	mov	r3, r2
 800b88a:	460a      	mov	r2, r1
 800b88c:	4601      	mov	r1, r0
 800b88e:	4803      	ldr	r0, [pc, #12]	; (800b89c <vsniprintf+0x18>)
 800b890:	6800      	ldr	r0, [r0, #0]
 800b892:	f7ff ffcc 	bl	800b82e <_vsniprintf_r>
 800b896:	b003      	add	sp, #12
 800b898:	f85d fb04 	ldr.w	pc, [sp], #4
 800b89c:	2000002c 	.word	0x2000002c

0800b8a0 <__malloc_lock>:
 800b8a0:	4801      	ldr	r0, [pc, #4]	; (800b8a8 <__malloc_lock+0x8>)
 800b8a2:	f7ff be25 	b.w	800b4f0 <__retarget_lock_acquire_recursive>
 800b8a6:	bf00      	nop
 800b8a8:	20001554 	.word	0x20001554

0800b8ac <__malloc_unlock>:
 800b8ac:	4801      	ldr	r0, [pc, #4]	; (800b8b4 <__malloc_unlock+0x8>)
 800b8ae:	f7ff be20 	b.w	800b4f2 <__retarget_lock_release_recursive>
 800b8b2:	bf00      	nop
 800b8b4:	20001554 	.word	0x20001554

0800b8b8 <_realloc_r>:
 800b8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	4680      	mov	r8, r0
 800b8be:	4614      	mov	r4, r2
 800b8c0:	460e      	mov	r6, r1
 800b8c2:	b921      	cbnz	r1, 800b8ce <_realloc_r+0x16>
 800b8c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	f7ff bea5 	b.w	800b618 <_malloc_r>
 800b8ce:	b92a      	cbnz	r2, 800b8dc <_realloc_r+0x24>
 800b8d0:	f7ff fe36 	bl	800b540 <_free_r>
 800b8d4:	4625      	mov	r5, r4
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8dc:	f000 fb24 	bl	800bf28 <_malloc_usable_size_r>
 800b8e0:	4284      	cmp	r4, r0
 800b8e2:	4607      	mov	r7, r0
 800b8e4:	d802      	bhi.n	800b8ec <_realloc_r+0x34>
 800b8e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8ea:	d812      	bhi.n	800b912 <_realloc_r+0x5a>
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	4640      	mov	r0, r8
 800b8f0:	f7ff fe92 	bl	800b618 <_malloc_r>
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d0ed      	beq.n	800b8d6 <_realloc_r+0x1e>
 800b8fa:	42bc      	cmp	r4, r7
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	4631      	mov	r1, r6
 800b900:	bf28      	it	cs
 800b902:	463a      	movcs	r2, r7
 800b904:	f7ff fe06 	bl	800b514 <memcpy>
 800b908:	4631      	mov	r1, r6
 800b90a:	4640      	mov	r0, r8
 800b90c:	f7ff fe18 	bl	800b540 <_free_r>
 800b910:	e7e1      	b.n	800b8d6 <_realloc_r+0x1e>
 800b912:	4635      	mov	r5, r6
 800b914:	e7df      	b.n	800b8d6 <_realloc_r+0x1e>

0800b916 <__ssputs_r>:
 800b916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b91a:	688e      	ldr	r6, [r1, #8]
 800b91c:	429e      	cmp	r6, r3
 800b91e:	4682      	mov	sl, r0
 800b920:	460c      	mov	r4, r1
 800b922:	4690      	mov	r8, r2
 800b924:	461f      	mov	r7, r3
 800b926:	d838      	bhi.n	800b99a <__ssputs_r+0x84>
 800b928:	898a      	ldrh	r2, [r1, #12]
 800b92a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b92e:	d032      	beq.n	800b996 <__ssputs_r+0x80>
 800b930:	6825      	ldr	r5, [r4, #0]
 800b932:	6909      	ldr	r1, [r1, #16]
 800b934:	eba5 0901 	sub.w	r9, r5, r1
 800b938:	6965      	ldr	r5, [r4, #20]
 800b93a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b93e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b942:	3301      	adds	r3, #1
 800b944:	444b      	add	r3, r9
 800b946:	106d      	asrs	r5, r5, #1
 800b948:	429d      	cmp	r5, r3
 800b94a:	bf38      	it	cc
 800b94c:	461d      	movcc	r5, r3
 800b94e:	0553      	lsls	r3, r2, #21
 800b950:	d531      	bpl.n	800b9b6 <__ssputs_r+0xa0>
 800b952:	4629      	mov	r1, r5
 800b954:	f7ff fe60 	bl	800b618 <_malloc_r>
 800b958:	4606      	mov	r6, r0
 800b95a:	b950      	cbnz	r0, 800b972 <__ssputs_r+0x5c>
 800b95c:	230c      	movs	r3, #12
 800b95e:	f8ca 3000 	str.w	r3, [sl]
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	f04f 30ff 	mov.w	r0, #4294967295
 800b96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b972:	6921      	ldr	r1, [r4, #16]
 800b974:	464a      	mov	r2, r9
 800b976:	f7ff fdcd 	bl	800b514 <memcpy>
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b984:	81a3      	strh	r3, [r4, #12]
 800b986:	6126      	str	r6, [r4, #16]
 800b988:	6165      	str	r5, [r4, #20]
 800b98a:	444e      	add	r6, r9
 800b98c:	eba5 0509 	sub.w	r5, r5, r9
 800b990:	6026      	str	r6, [r4, #0]
 800b992:	60a5      	str	r5, [r4, #8]
 800b994:	463e      	mov	r6, r7
 800b996:	42be      	cmp	r6, r7
 800b998:	d900      	bls.n	800b99c <__ssputs_r+0x86>
 800b99a:	463e      	mov	r6, r7
 800b99c:	6820      	ldr	r0, [r4, #0]
 800b99e:	4632      	mov	r2, r6
 800b9a0:	4641      	mov	r1, r8
 800b9a2:	f000 faa7 	bl	800bef4 <memmove>
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	1b9b      	subs	r3, r3, r6
 800b9aa:	60a3      	str	r3, [r4, #8]
 800b9ac:	6823      	ldr	r3, [r4, #0]
 800b9ae:	4433      	add	r3, r6
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	e7db      	b.n	800b96e <__ssputs_r+0x58>
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	f7ff ff7e 	bl	800b8b8 <_realloc_r>
 800b9bc:	4606      	mov	r6, r0
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d1e1      	bne.n	800b986 <__ssputs_r+0x70>
 800b9c2:	6921      	ldr	r1, [r4, #16]
 800b9c4:	4650      	mov	r0, sl
 800b9c6:	f7ff fdbb 	bl	800b540 <_free_r>
 800b9ca:	e7c7      	b.n	800b95c <__ssputs_r+0x46>

0800b9cc <_svfiprintf_r>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	4698      	mov	r8, r3
 800b9d2:	898b      	ldrh	r3, [r1, #12]
 800b9d4:	061b      	lsls	r3, r3, #24
 800b9d6:	b09d      	sub	sp, #116	; 0x74
 800b9d8:	4607      	mov	r7, r0
 800b9da:	460d      	mov	r5, r1
 800b9dc:	4614      	mov	r4, r2
 800b9de:	d50e      	bpl.n	800b9fe <_svfiprintf_r+0x32>
 800b9e0:	690b      	ldr	r3, [r1, #16]
 800b9e2:	b963      	cbnz	r3, 800b9fe <_svfiprintf_r+0x32>
 800b9e4:	2140      	movs	r1, #64	; 0x40
 800b9e6:	f7ff fe17 	bl	800b618 <_malloc_r>
 800b9ea:	6028      	str	r0, [r5, #0]
 800b9ec:	6128      	str	r0, [r5, #16]
 800b9ee:	b920      	cbnz	r0, 800b9fa <_svfiprintf_r+0x2e>
 800b9f0:	230c      	movs	r3, #12
 800b9f2:	603b      	str	r3, [r7, #0]
 800b9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f8:	e0d1      	b.n	800bb9e <_svfiprintf_r+0x1d2>
 800b9fa:	2340      	movs	r3, #64	; 0x40
 800b9fc:	616b      	str	r3, [r5, #20]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	9309      	str	r3, [sp, #36]	; 0x24
 800ba02:	2320      	movs	r3, #32
 800ba04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba08:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba0c:	2330      	movs	r3, #48	; 0x30
 800ba0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbb8 <_svfiprintf_r+0x1ec>
 800ba12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba16:	f04f 0901 	mov.w	r9, #1
 800ba1a:	4623      	mov	r3, r4
 800ba1c:	469a      	mov	sl, r3
 800ba1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba22:	b10a      	cbz	r2, 800ba28 <_svfiprintf_r+0x5c>
 800ba24:	2a25      	cmp	r2, #37	; 0x25
 800ba26:	d1f9      	bne.n	800ba1c <_svfiprintf_r+0x50>
 800ba28:	ebba 0b04 	subs.w	fp, sl, r4
 800ba2c:	d00b      	beq.n	800ba46 <_svfiprintf_r+0x7a>
 800ba2e:	465b      	mov	r3, fp
 800ba30:	4622      	mov	r2, r4
 800ba32:	4629      	mov	r1, r5
 800ba34:	4638      	mov	r0, r7
 800ba36:	f7ff ff6e 	bl	800b916 <__ssputs_r>
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	f000 80aa 	beq.w	800bb94 <_svfiprintf_r+0x1c8>
 800ba40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba42:	445a      	add	r2, fp
 800ba44:	9209      	str	r2, [sp, #36]	; 0x24
 800ba46:	f89a 3000 	ldrb.w	r3, [sl]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f000 80a2 	beq.w	800bb94 <_svfiprintf_r+0x1c8>
 800ba50:	2300      	movs	r3, #0
 800ba52:	f04f 32ff 	mov.w	r2, #4294967295
 800ba56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba5a:	f10a 0a01 	add.w	sl, sl, #1
 800ba5e:	9304      	str	r3, [sp, #16]
 800ba60:	9307      	str	r3, [sp, #28]
 800ba62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba66:	931a      	str	r3, [sp, #104]	; 0x68
 800ba68:	4654      	mov	r4, sl
 800ba6a:	2205      	movs	r2, #5
 800ba6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba70:	4851      	ldr	r0, [pc, #324]	; (800bbb8 <_svfiprintf_r+0x1ec>)
 800ba72:	f7f4 fbbd 	bl	80001f0 <memchr>
 800ba76:	9a04      	ldr	r2, [sp, #16]
 800ba78:	b9d8      	cbnz	r0, 800bab2 <_svfiprintf_r+0xe6>
 800ba7a:	06d0      	lsls	r0, r2, #27
 800ba7c:	bf44      	itt	mi
 800ba7e:	2320      	movmi	r3, #32
 800ba80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba84:	0711      	lsls	r1, r2, #28
 800ba86:	bf44      	itt	mi
 800ba88:	232b      	movmi	r3, #43	; 0x2b
 800ba8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba8e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba92:	2b2a      	cmp	r3, #42	; 0x2a
 800ba94:	d015      	beq.n	800bac2 <_svfiprintf_r+0xf6>
 800ba96:	9a07      	ldr	r2, [sp, #28]
 800ba98:	4654      	mov	r4, sl
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	f04f 0c0a 	mov.w	ip, #10
 800baa0:	4621      	mov	r1, r4
 800baa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baa6:	3b30      	subs	r3, #48	; 0x30
 800baa8:	2b09      	cmp	r3, #9
 800baaa:	d94e      	bls.n	800bb4a <_svfiprintf_r+0x17e>
 800baac:	b1b0      	cbz	r0, 800badc <_svfiprintf_r+0x110>
 800baae:	9207      	str	r2, [sp, #28]
 800bab0:	e014      	b.n	800badc <_svfiprintf_r+0x110>
 800bab2:	eba0 0308 	sub.w	r3, r0, r8
 800bab6:	fa09 f303 	lsl.w	r3, r9, r3
 800baba:	4313      	orrs	r3, r2
 800babc:	9304      	str	r3, [sp, #16]
 800babe:	46a2      	mov	sl, r4
 800bac0:	e7d2      	b.n	800ba68 <_svfiprintf_r+0x9c>
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	1d19      	adds	r1, r3, #4
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	9103      	str	r1, [sp, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	bfbb      	ittet	lt
 800bace:	425b      	neglt	r3, r3
 800bad0:	f042 0202 	orrlt.w	r2, r2, #2
 800bad4:	9307      	strge	r3, [sp, #28]
 800bad6:	9307      	strlt	r3, [sp, #28]
 800bad8:	bfb8      	it	lt
 800bada:	9204      	strlt	r2, [sp, #16]
 800badc:	7823      	ldrb	r3, [r4, #0]
 800bade:	2b2e      	cmp	r3, #46	; 0x2e
 800bae0:	d10c      	bne.n	800bafc <_svfiprintf_r+0x130>
 800bae2:	7863      	ldrb	r3, [r4, #1]
 800bae4:	2b2a      	cmp	r3, #42	; 0x2a
 800bae6:	d135      	bne.n	800bb54 <_svfiprintf_r+0x188>
 800bae8:	9b03      	ldr	r3, [sp, #12]
 800baea:	1d1a      	adds	r2, r3, #4
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	9203      	str	r2, [sp, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bfb8      	it	lt
 800baf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800baf8:	3402      	adds	r4, #2
 800bafa:	9305      	str	r3, [sp, #20]
 800bafc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bbc8 <_svfiprintf_r+0x1fc>
 800bb00:	7821      	ldrb	r1, [r4, #0]
 800bb02:	2203      	movs	r2, #3
 800bb04:	4650      	mov	r0, sl
 800bb06:	f7f4 fb73 	bl	80001f0 <memchr>
 800bb0a:	b140      	cbz	r0, 800bb1e <_svfiprintf_r+0x152>
 800bb0c:	2340      	movs	r3, #64	; 0x40
 800bb0e:	eba0 000a 	sub.w	r0, r0, sl
 800bb12:	fa03 f000 	lsl.w	r0, r3, r0
 800bb16:	9b04      	ldr	r3, [sp, #16]
 800bb18:	4303      	orrs	r3, r0
 800bb1a:	3401      	adds	r4, #1
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb22:	4826      	ldr	r0, [pc, #152]	; (800bbbc <_svfiprintf_r+0x1f0>)
 800bb24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb28:	2206      	movs	r2, #6
 800bb2a:	f7f4 fb61 	bl	80001f0 <memchr>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d038      	beq.n	800bba4 <_svfiprintf_r+0x1d8>
 800bb32:	4b23      	ldr	r3, [pc, #140]	; (800bbc0 <_svfiprintf_r+0x1f4>)
 800bb34:	bb1b      	cbnz	r3, 800bb7e <_svfiprintf_r+0x1b2>
 800bb36:	9b03      	ldr	r3, [sp, #12]
 800bb38:	3307      	adds	r3, #7
 800bb3a:	f023 0307 	bic.w	r3, r3, #7
 800bb3e:	3308      	adds	r3, #8
 800bb40:	9303      	str	r3, [sp, #12]
 800bb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb44:	4433      	add	r3, r6
 800bb46:	9309      	str	r3, [sp, #36]	; 0x24
 800bb48:	e767      	b.n	800ba1a <_svfiprintf_r+0x4e>
 800bb4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb4e:	460c      	mov	r4, r1
 800bb50:	2001      	movs	r0, #1
 800bb52:	e7a5      	b.n	800baa0 <_svfiprintf_r+0xd4>
 800bb54:	2300      	movs	r3, #0
 800bb56:	3401      	adds	r4, #1
 800bb58:	9305      	str	r3, [sp, #20]
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	f04f 0c0a 	mov.w	ip, #10
 800bb60:	4620      	mov	r0, r4
 800bb62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb66:	3a30      	subs	r2, #48	; 0x30
 800bb68:	2a09      	cmp	r2, #9
 800bb6a:	d903      	bls.n	800bb74 <_svfiprintf_r+0x1a8>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0c5      	beq.n	800bafc <_svfiprintf_r+0x130>
 800bb70:	9105      	str	r1, [sp, #20]
 800bb72:	e7c3      	b.n	800bafc <_svfiprintf_r+0x130>
 800bb74:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb78:	4604      	mov	r4, r0
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e7f0      	b.n	800bb60 <_svfiprintf_r+0x194>
 800bb7e:	ab03      	add	r3, sp, #12
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	462a      	mov	r2, r5
 800bb84:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <_svfiprintf_r+0x1f8>)
 800bb86:	a904      	add	r1, sp, #16
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f3af 8000 	nop.w
 800bb8e:	1c42      	adds	r2, r0, #1
 800bb90:	4606      	mov	r6, r0
 800bb92:	d1d6      	bne.n	800bb42 <_svfiprintf_r+0x176>
 800bb94:	89ab      	ldrh	r3, [r5, #12]
 800bb96:	065b      	lsls	r3, r3, #25
 800bb98:	f53f af2c 	bmi.w	800b9f4 <_svfiprintf_r+0x28>
 800bb9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb9e:	b01d      	add	sp, #116	; 0x74
 800bba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba4:	ab03      	add	r3, sp, #12
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	462a      	mov	r2, r5
 800bbaa:	4b06      	ldr	r3, [pc, #24]	; (800bbc4 <_svfiprintf_r+0x1f8>)
 800bbac:	a904      	add	r1, sp, #16
 800bbae:	4638      	mov	r0, r7
 800bbb0:	f000 f87a 	bl	800bca8 <_printf_i>
 800bbb4:	e7eb      	b.n	800bb8e <_svfiprintf_r+0x1c2>
 800bbb6:	bf00      	nop
 800bbb8:	0800c4a0 	.word	0x0800c4a0
 800bbbc:	0800c4aa 	.word	0x0800c4aa
 800bbc0:	00000000 	.word	0x00000000
 800bbc4:	0800b917 	.word	0x0800b917
 800bbc8:	0800c4a6 	.word	0x0800c4a6

0800bbcc <_printf_common>:
 800bbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd0:	4616      	mov	r6, r2
 800bbd2:	4699      	mov	r9, r3
 800bbd4:	688a      	ldr	r2, [r1, #8]
 800bbd6:	690b      	ldr	r3, [r1, #16]
 800bbd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	bfb8      	it	lt
 800bbe0:	4613      	movlt	r3, r2
 800bbe2:	6033      	str	r3, [r6, #0]
 800bbe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bbe8:	4607      	mov	r7, r0
 800bbea:	460c      	mov	r4, r1
 800bbec:	b10a      	cbz	r2, 800bbf2 <_printf_common+0x26>
 800bbee:	3301      	adds	r3, #1
 800bbf0:	6033      	str	r3, [r6, #0]
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	0699      	lsls	r1, r3, #26
 800bbf6:	bf42      	ittt	mi
 800bbf8:	6833      	ldrmi	r3, [r6, #0]
 800bbfa:	3302      	addmi	r3, #2
 800bbfc:	6033      	strmi	r3, [r6, #0]
 800bbfe:	6825      	ldr	r5, [r4, #0]
 800bc00:	f015 0506 	ands.w	r5, r5, #6
 800bc04:	d106      	bne.n	800bc14 <_printf_common+0x48>
 800bc06:	f104 0a19 	add.w	sl, r4, #25
 800bc0a:	68e3      	ldr	r3, [r4, #12]
 800bc0c:	6832      	ldr	r2, [r6, #0]
 800bc0e:	1a9b      	subs	r3, r3, r2
 800bc10:	42ab      	cmp	r3, r5
 800bc12:	dc26      	bgt.n	800bc62 <_printf_common+0x96>
 800bc14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc18:	1e13      	subs	r3, r2, #0
 800bc1a:	6822      	ldr	r2, [r4, #0]
 800bc1c:	bf18      	it	ne
 800bc1e:	2301      	movne	r3, #1
 800bc20:	0692      	lsls	r2, r2, #26
 800bc22:	d42b      	bmi.n	800bc7c <_printf_common+0xb0>
 800bc24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc28:	4649      	mov	r1, r9
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	47c0      	blx	r8
 800bc2e:	3001      	adds	r0, #1
 800bc30:	d01e      	beq.n	800bc70 <_printf_common+0xa4>
 800bc32:	6823      	ldr	r3, [r4, #0]
 800bc34:	68e5      	ldr	r5, [r4, #12]
 800bc36:	6832      	ldr	r2, [r6, #0]
 800bc38:	f003 0306 	and.w	r3, r3, #6
 800bc3c:	2b04      	cmp	r3, #4
 800bc3e:	bf08      	it	eq
 800bc40:	1aad      	subeq	r5, r5, r2
 800bc42:	68a3      	ldr	r3, [r4, #8]
 800bc44:	6922      	ldr	r2, [r4, #16]
 800bc46:	bf0c      	ite	eq
 800bc48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc4c:	2500      	movne	r5, #0
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	bfc4      	itt	gt
 800bc52:	1a9b      	subgt	r3, r3, r2
 800bc54:	18ed      	addgt	r5, r5, r3
 800bc56:	2600      	movs	r6, #0
 800bc58:	341a      	adds	r4, #26
 800bc5a:	42b5      	cmp	r5, r6
 800bc5c:	d11a      	bne.n	800bc94 <_printf_common+0xc8>
 800bc5e:	2000      	movs	r0, #0
 800bc60:	e008      	b.n	800bc74 <_printf_common+0xa8>
 800bc62:	2301      	movs	r3, #1
 800bc64:	4652      	mov	r2, sl
 800bc66:	4649      	mov	r1, r9
 800bc68:	4638      	mov	r0, r7
 800bc6a:	47c0      	blx	r8
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	d103      	bne.n	800bc78 <_printf_common+0xac>
 800bc70:	f04f 30ff 	mov.w	r0, #4294967295
 800bc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc78:	3501      	adds	r5, #1
 800bc7a:	e7c6      	b.n	800bc0a <_printf_common+0x3e>
 800bc7c:	18e1      	adds	r1, r4, r3
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	2030      	movs	r0, #48	; 0x30
 800bc82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc86:	4422      	add	r2, r4
 800bc88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc90:	3302      	adds	r3, #2
 800bc92:	e7c7      	b.n	800bc24 <_printf_common+0x58>
 800bc94:	2301      	movs	r3, #1
 800bc96:	4622      	mov	r2, r4
 800bc98:	4649      	mov	r1, r9
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	47c0      	blx	r8
 800bc9e:	3001      	adds	r0, #1
 800bca0:	d0e6      	beq.n	800bc70 <_printf_common+0xa4>
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7d9      	b.n	800bc5a <_printf_common+0x8e>
	...

0800bca8 <_printf_i>:
 800bca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcac:	7e0f      	ldrb	r7, [r1, #24]
 800bcae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcb0:	2f78      	cmp	r7, #120	; 0x78
 800bcb2:	4691      	mov	r9, r2
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	469a      	mov	sl, r3
 800bcba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bcbe:	d807      	bhi.n	800bcd0 <_printf_i+0x28>
 800bcc0:	2f62      	cmp	r7, #98	; 0x62
 800bcc2:	d80a      	bhi.n	800bcda <_printf_i+0x32>
 800bcc4:	2f00      	cmp	r7, #0
 800bcc6:	f000 80d8 	beq.w	800be7a <_printf_i+0x1d2>
 800bcca:	2f58      	cmp	r7, #88	; 0x58
 800bccc:	f000 80a3 	beq.w	800be16 <_printf_i+0x16e>
 800bcd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcd8:	e03a      	b.n	800bd50 <_printf_i+0xa8>
 800bcda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bcde:	2b15      	cmp	r3, #21
 800bce0:	d8f6      	bhi.n	800bcd0 <_printf_i+0x28>
 800bce2:	a101      	add	r1, pc, #4	; (adr r1, 800bce8 <_printf_i+0x40>)
 800bce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bce8:	0800bd41 	.word	0x0800bd41
 800bcec:	0800bd55 	.word	0x0800bd55
 800bcf0:	0800bcd1 	.word	0x0800bcd1
 800bcf4:	0800bcd1 	.word	0x0800bcd1
 800bcf8:	0800bcd1 	.word	0x0800bcd1
 800bcfc:	0800bcd1 	.word	0x0800bcd1
 800bd00:	0800bd55 	.word	0x0800bd55
 800bd04:	0800bcd1 	.word	0x0800bcd1
 800bd08:	0800bcd1 	.word	0x0800bcd1
 800bd0c:	0800bcd1 	.word	0x0800bcd1
 800bd10:	0800bcd1 	.word	0x0800bcd1
 800bd14:	0800be61 	.word	0x0800be61
 800bd18:	0800bd85 	.word	0x0800bd85
 800bd1c:	0800be43 	.word	0x0800be43
 800bd20:	0800bcd1 	.word	0x0800bcd1
 800bd24:	0800bcd1 	.word	0x0800bcd1
 800bd28:	0800be83 	.word	0x0800be83
 800bd2c:	0800bcd1 	.word	0x0800bcd1
 800bd30:	0800bd85 	.word	0x0800bd85
 800bd34:	0800bcd1 	.word	0x0800bcd1
 800bd38:	0800bcd1 	.word	0x0800bcd1
 800bd3c:	0800be4b 	.word	0x0800be4b
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	1d1a      	adds	r2, r3, #4
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	602a      	str	r2, [r5, #0]
 800bd48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd50:	2301      	movs	r3, #1
 800bd52:	e0a3      	b.n	800be9c <_printf_i+0x1f4>
 800bd54:	6820      	ldr	r0, [r4, #0]
 800bd56:	6829      	ldr	r1, [r5, #0]
 800bd58:	0606      	lsls	r6, r0, #24
 800bd5a:	f101 0304 	add.w	r3, r1, #4
 800bd5e:	d50a      	bpl.n	800bd76 <_printf_i+0xce>
 800bd60:	680e      	ldr	r6, [r1, #0]
 800bd62:	602b      	str	r3, [r5, #0]
 800bd64:	2e00      	cmp	r6, #0
 800bd66:	da03      	bge.n	800bd70 <_printf_i+0xc8>
 800bd68:	232d      	movs	r3, #45	; 0x2d
 800bd6a:	4276      	negs	r6, r6
 800bd6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd70:	485e      	ldr	r0, [pc, #376]	; (800beec <_printf_i+0x244>)
 800bd72:	230a      	movs	r3, #10
 800bd74:	e019      	b.n	800bdaa <_printf_i+0x102>
 800bd76:	680e      	ldr	r6, [r1, #0]
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd7e:	bf18      	it	ne
 800bd80:	b236      	sxthne	r6, r6
 800bd82:	e7ef      	b.n	800bd64 <_printf_i+0xbc>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	6820      	ldr	r0, [r4, #0]
 800bd88:	1d19      	adds	r1, r3, #4
 800bd8a:	6029      	str	r1, [r5, #0]
 800bd8c:	0601      	lsls	r1, r0, #24
 800bd8e:	d501      	bpl.n	800bd94 <_printf_i+0xec>
 800bd90:	681e      	ldr	r6, [r3, #0]
 800bd92:	e002      	b.n	800bd9a <_printf_i+0xf2>
 800bd94:	0646      	lsls	r6, r0, #25
 800bd96:	d5fb      	bpl.n	800bd90 <_printf_i+0xe8>
 800bd98:	881e      	ldrh	r6, [r3, #0]
 800bd9a:	4854      	ldr	r0, [pc, #336]	; (800beec <_printf_i+0x244>)
 800bd9c:	2f6f      	cmp	r7, #111	; 0x6f
 800bd9e:	bf0c      	ite	eq
 800bda0:	2308      	moveq	r3, #8
 800bda2:	230a      	movne	r3, #10
 800bda4:	2100      	movs	r1, #0
 800bda6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdaa:	6865      	ldr	r5, [r4, #4]
 800bdac:	60a5      	str	r5, [r4, #8]
 800bdae:	2d00      	cmp	r5, #0
 800bdb0:	bfa2      	ittt	ge
 800bdb2:	6821      	ldrge	r1, [r4, #0]
 800bdb4:	f021 0104 	bicge.w	r1, r1, #4
 800bdb8:	6021      	strge	r1, [r4, #0]
 800bdba:	b90e      	cbnz	r6, 800bdc0 <_printf_i+0x118>
 800bdbc:	2d00      	cmp	r5, #0
 800bdbe:	d04d      	beq.n	800be5c <_printf_i+0x1b4>
 800bdc0:	4615      	mov	r5, r2
 800bdc2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bdc6:	fb03 6711 	mls	r7, r3, r1, r6
 800bdca:	5dc7      	ldrb	r7, [r0, r7]
 800bdcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bdd0:	4637      	mov	r7, r6
 800bdd2:	42bb      	cmp	r3, r7
 800bdd4:	460e      	mov	r6, r1
 800bdd6:	d9f4      	bls.n	800bdc2 <_printf_i+0x11a>
 800bdd8:	2b08      	cmp	r3, #8
 800bdda:	d10b      	bne.n	800bdf4 <_printf_i+0x14c>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	07de      	lsls	r6, r3, #31
 800bde0:	d508      	bpl.n	800bdf4 <_printf_i+0x14c>
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	6861      	ldr	r1, [r4, #4]
 800bde6:	4299      	cmp	r1, r3
 800bde8:	bfde      	ittt	le
 800bdea:	2330      	movle	r3, #48	; 0x30
 800bdec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bdf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bdf4:	1b52      	subs	r2, r2, r5
 800bdf6:	6122      	str	r2, [r4, #16]
 800bdf8:	f8cd a000 	str.w	sl, [sp]
 800bdfc:	464b      	mov	r3, r9
 800bdfe:	aa03      	add	r2, sp, #12
 800be00:	4621      	mov	r1, r4
 800be02:	4640      	mov	r0, r8
 800be04:	f7ff fee2 	bl	800bbcc <_printf_common>
 800be08:	3001      	adds	r0, #1
 800be0a:	d14c      	bne.n	800bea6 <_printf_i+0x1fe>
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295
 800be10:	b004      	add	sp, #16
 800be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be16:	4835      	ldr	r0, [pc, #212]	; (800beec <_printf_i+0x244>)
 800be18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be1c:	6829      	ldr	r1, [r5, #0]
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	f851 6b04 	ldr.w	r6, [r1], #4
 800be24:	6029      	str	r1, [r5, #0]
 800be26:	061d      	lsls	r5, r3, #24
 800be28:	d514      	bpl.n	800be54 <_printf_i+0x1ac>
 800be2a:	07df      	lsls	r7, r3, #31
 800be2c:	bf44      	itt	mi
 800be2e:	f043 0320 	orrmi.w	r3, r3, #32
 800be32:	6023      	strmi	r3, [r4, #0]
 800be34:	b91e      	cbnz	r6, 800be3e <_printf_i+0x196>
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	f023 0320 	bic.w	r3, r3, #32
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	2310      	movs	r3, #16
 800be40:	e7b0      	b.n	800bda4 <_printf_i+0xfc>
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	f043 0320 	orr.w	r3, r3, #32
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	2378      	movs	r3, #120	; 0x78
 800be4c:	4828      	ldr	r0, [pc, #160]	; (800bef0 <_printf_i+0x248>)
 800be4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be52:	e7e3      	b.n	800be1c <_printf_i+0x174>
 800be54:	0659      	lsls	r1, r3, #25
 800be56:	bf48      	it	mi
 800be58:	b2b6      	uxthmi	r6, r6
 800be5a:	e7e6      	b.n	800be2a <_printf_i+0x182>
 800be5c:	4615      	mov	r5, r2
 800be5e:	e7bb      	b.n	800bdd8 <_printf_i+0x130>
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	6826      	ldr	r6, [r4, #0]
 800be64:	6961      	ldr	r1, [r4, #20]
 800be66:	1d18      	adds	r0, r3, #4
 800be68:	6028      	str	r0, [r5, #0]
 800be6a:	0635      	lsls	r5, r6, #24
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	d501      	bpl.n	800be74 <_printf_i+0x1cc>
 800be70:	6019      	str	r1, [r3, #0]
 800be72:	e002      	b.n	800be7a <_printf_i+0x1d2>
 800be74:	0670      	lsls	r0, r6, #25
 800be76:	d5fb      	bpl.n	800be70 <_printf_i+0x1c8>
 800be78:	8019      	strh	r1, [r3, #0]
 800be7a:	2300      	movs	r3, #0
 800be7c:	6123      	str	r3, [r4, #16]
 800be7e:	4615      	mov	r5, r2
 800be80:	e7ba      	b.n	800bdf8 <_printf_i+0x150>
 800be82:	682b      	ldr	r3, [r5, #0]
 800be84:	1d1a      	adds	r2, r3, #4
 800be86:	602a      	str	r2, [r5, #0]
 800be88:	681d      	ldr	r5, [r3, #0]
 800be8a:	6862      	ldr	r2, [r4, #4]
 800be8c:	2100      	movs	r1, #0
 800be8e:	4628      	mov	r0, r5
 800be90:	f7f4 f9ae 	bl	80001f0 <memchr>
 800be94:	b108      	cbz	r0, 800be9a <_printf_i+0x1f2>
 800be96:	1b40      	subs	r0, r0, r5
 800be98:	6060      	str	r0, [r4, #4]
 800be9a:	6863      	ldr	r3, [r4, #4]
 800be9c:	6123      	str	r3, [r4, #16]
 800be9e:	2300      	movs	r3, #0
 800bea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bea4:	e7a8      	b.n	800bdf8 <_printf_i+0x150>
 800bea6:	6923      	ldr	r3, [r4, #16]
 800bea8:	462a      	mov	r2, r5
 800beaa:	4649      	mov	r1, r9
 800beac:	4640      	mov	r0, r8
 800beae:	47d0      	blx	sl
 800beb0:	3001      	adds	r0, #1
 800beb2:	d0ab      	beq.n	800be0c <_printf_i+0x164>
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	079b      	lsls	r3, r3, #30
 800beb8:	d413      	bmi.n	800bee2 <_printf_i+0x23a>
 800beba:	68e0      	ldr	r0, [r4, #12]
 800bebc:	9b03      	ldr	r3, [sp, #12]
 800bebe:	4298      	cmp	r0, r3
 800bec0:	bfb8      	it	lt
 800bec2:	4618      	movlt	r0, r3
 800bec4:	e7a4      	b.n	800be10 <_printf_i+0x168>
 800bec6:	2301      	movs	r3, #1
 800bec8:	4632      	mov	r2, r6
 800beca:	4649      	mov	r1, r9
 800becc:	4640      	mov	r0, r8
 800bece:	47d0      	blx	sl
 800bed0:	3001      	adds	r0, #1
 800bed2:	d09b      	beq.n	800be0c <_printf_i+0x164>
 800bed4:	3501      	adds	r5, #1
 800bed6:	68e3      	ldr	r3, [r4, #12]
 800bed8:	9903      	ldr	r1, [sp, #12]
 800beda:	1a5b      	subs	r3, r3, r1
 800bedc:	42ab      	cmp	r3, r5
 800bede:	dcf2      	bgt.n	800bec6 <_printf_i+0x21e>
 800bee0:	e7eb      	b.n	800beba <_printf_i+0x212>
 800bee2:	2500      	movs	r5, #0
 800bee4:	f104 0619 	add.w	r6, r4, #25
 800bee8:	e7f5      	b.n	800bed6 <_printf_i+0x22e>
 800beea:	bf00      	nop
 800beec:	0800c4b1 	.word	0x0800c4b1
 800bef0:	0800c4c2 	.word	0x0800c4c2

0800bef4 <memmove>:
 800bef4:	4288      	cmp	r0, r1
 800bef6:	b510      	push	{r4, lr}
 800bef8:	eb01 0402 	add.w	r4, r1, r2
 800befc:	d902      	bls.n	800bf04 <memmove+0x10>
 800befe:	4284      	cmp	r4, r0
 800bf00:	4623      	mov	r3, r4
 800bf02:	d807      	bhi.n	800bf14 <memmove+0x20>
 800bf04:	1e43      	subs	r3, r0, #1
 800bf06:	42a1      	cmp	r1, r4
 800bf08:	d008      	beq.n	800bf1c <memmove+0x28>
 800bf0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf12:	e7f8      	b.n	800bf06 <memmove+0x12>
 800bf14:	4402      	add	r2, r0
 800bf16:	4601      	mov	r1, r0
 800bf18:	428a      	cmp	r2, r1
 800bf1a:	d100      	bne.n	800bf1e <memmove+0x2a>
 800bf1c:	bd10      	pop	{r4, pc}
 800bf1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf26:	e7f7      	b.n	800bf18 <memmove+0x24>

0800bf28 <_malloc_usable_size_r>:
 800bf28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf2c:	1f18      	subs	r0, r3, #4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bfbc      	itt	lt
 800bf32:	580b      	ldrlt	r3, [r1, r0]
 800bf34:	18c0      	addlt	r0, r0, r3
 800bf36:	4770      	bx	lr

0800bf38 <_init>:
 800bf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3a:	bf00      	nop
 800bf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf3e:	bc08      	pop	{r3}
 800bf40:	469e      	mov	lr, r3
 800bf42:	4770      	bx	lr

0800bf44 <_fini>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	bf00      	nop
 800bf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf4a:	bc08      	pop	{r3}
 800bf4c:	469e      	mov	lr, r3
 800bf4e:	4770      	bx	lr
