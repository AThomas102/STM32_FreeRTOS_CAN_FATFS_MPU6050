
CAN_Network_Captain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d758  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800d8f8  0800d8f8  0001d8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de98  0800de98  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800de98  0800de98  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de98  0800de98  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de98  0800de98  0001de98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de9c  0800de9c  0001de9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800dea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00004428  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200044bc  200044bc  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e1ca  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042fb  00000000  00000000  0003e28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  00042590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001808  00000000  00000000  00043f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e03  00000000  00000000  00045758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d34  00000000  00000000  0006b55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d943d  00000000  00000000  0008d28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001666cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007230  00000000  00000000  0016671c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d8e0 	.word	0x0800d8e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	0800d8e0 	.word	0x0800d8e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <add_char>:
 * Returns:
 * 0: success
 * 1: realloc failure
 */
static int add_char(char **string, int *c, char ch)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	4613      	mov	r3, r2
 800029c:	71fb      	strb	r3, [r7, #7]
    char *tmp = NULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]
    (*c)++;
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	1c5a      	adds	r2, r3, #1
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	601a      	str	r2, [r3, #0]
    tmp = realloc(*string, (*c)+1);
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	4619      	mov	r1, r3
 80002b8:	4610      	mov	r0, r2
 80002ba:	f00c fec1 	bl	800d040 <realloc>
 80002be:	6178      	str	r0, [r7, #20]
    if (tmp == NULL)
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <add_char+0x3a>
        return 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e012      	b.n	80002f0 <add_char+0x60>
    *string = tmp;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	601a      	str	r2, [r3, #0]
    (*string)[(*c)-1] = ch;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3b01      	subs	r3, #1
 80002da:	4413      	add	r3, r2
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	701a      	strb	r2, [r3, #0]
    (*string)[*c] = '\0';
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	6812      	ldr	r2, [r2, #0]
 80002e8:	4413      	add	r3, r2
 80002ea:	2200      	movs	r2, #0
 80002ec:	701a      	strb	r2, [r3, #0]

    return 0;
 80002ee:	2300      	movs	r3, #0
}
 80002f0:	4618      	mov	r0, r3
 80002f2:	3718      	adds	r7, #24
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <create_field>:
 * memory for the field. Length is set to 0 and text to NULL
 *
 * Returns NULL on error via malloc.
 */
static CSV_FIELD *create_field()
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
    CSV_FIELD *field = malloc(sizeof(CSV_FIELD));
 80002fe:	2008      	movs	r0, #8
 8000300:	f00c fd98 	bl	800ce34 <malloc>
 8000304:	4603      	mov	r3, r0
 8000306:	607b      	str	r3, [r7, #4]
    field->length = 0;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
    field->text = NULL;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
    set_field(field, "\0");
 8000314:	4904      	ldr	r1, [pc, #16]	; (8000328 <create_field+0x30>)
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f821 	bl	800035e <set_field>
    return field;
 800031c:	687b      	ldr	r3, [r7, #4]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	0800d8f8 	.word	0x0800d8f8

0800032c <destroy_field>:
 * Returns:
 * 0: success
 * 1: error realloc'ing field's char array
 */
static void destroy_field(CSV_FIELD *field)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    if (field->text != NULL)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d007      	beq.n	800034c <destroy_field+0x20>
	{
		free(field->text);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f00c fd7f 	bl	800ce44 <free>
		field->text = NULL;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
    }
    free(field);
 800034c:	6878      	ldr	r0, [r7, #4]
 800034e:	f00c fd79 	bl	800ce44 <free>
    field = NULL;
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <set_field>:
 * Returns:
 *  0: success
 *  1: error allocating space to the string
 */
static int set_field(CSV_FIELD *field, char *text)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b084      	sub	sp, #16
 8000362:	af00      	add	r7, sp, #0
 8000364:	6078      	str	r0, [r7, #4]
 8000366:	6039      	str	r1, [r7, #0]
    char *tmp;

    field->length = strlen(text) + 1;
 8000368:	6838      	ldr	r0, [r7, #0]
 800036a:	f7ff ff39 	bl	80001e0 <strlen>
 800036e:	4603      	mov	r3, r0
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	605a      	str	r2, [r3, #4]
    tmp = realloc(field->text, field->length);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4619      	mov	r1, r3
 8000380:	4610      	mov	r0, r2
 8000382:	f00c fe5d 	bl	800d040 <realloc>
 8000386:	60f8      	str	r0, [r7, #12]
    if (tmp == NULL)
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <set_field+0x34>
        return 1;
 800038e:	2301      	movs	r3, #1
 8000390:	e009      	b.n	80003a6 <set_field+0x48>
    field->text = tmp;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	601a      	str	r2, [r3, #0]
    strcpy(field->text, text);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	6839      	ldr	r1, [r7, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f00c ff11 	bl	800d1c6 <strcpy>

    return 0;
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <read_next_field>:
 *  0: Moved successfully to the next entry in this row
 *  1: The next entry is on a new row
 *  2: There is no next entry (EOF)
 */
static int read_next_field(FIL *csv_fp, char field_delim, char text_delim, CSV_FIELD *field)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b08c      	sub	sp, #48	; 0x30
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	72fb      	strb	r3, [r7, #11]
 80003bc:	4613      	mov	r3, r2
 80003be:	72bb      	strb	r3, [r7, #10]
	char ch = 'a';
 80003c0:	2361      	movs	r3, #97	; 0x61
 80003c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    bool done = false;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    bool in_text = false;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool esc = false;
 80003d2:	2300      	movs	r3, #0
 80003d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	UINT n;
    int c = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
    char *tmp = malloc(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f00c fd29 	bl	800ce34 <malloc>
 80003e2:	4603      	mov	r3, r0
 80003e4:	617b      	str	r3, [r7, #20]
    tmp[0] = '\0';
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]

	while (!done)
 80003ec:	e086      	b.n	80004fc <read_next_field+0x14e>
	{
		f_read(csv_fp, &ch, 1, &n);
 80003ee:	f107 031c 	add.w	r3, r7, #28
 80003f2:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80003f6:	2201      	movs	r2, #1
 80003f8:	68f8      	ldr	r0, [r7, #12]
 80003fa:	f008 fd12 	bl	8008e22 <f_read>

		if (f_eof(csv_fp))
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000404:	689a      	ldr	r2, [r3, #8]
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	429a      	cmp	r2, r3
 8000410:	d105      	bne.n	800041e <read_next_field+0x70>
		{
			c = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
			done = true;
 8000416:	2301      	movs	r3, #1
 8000418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800041c:	e06e      	b.n	80004fc <read_next_field+0x14e>
		}
		else if (!in_text)
 800041e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000422:	f083 0301 	eor.w	r3, r3, #1
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	d029      	beq.n	8000480 <read_next_field+0xd2>
		{
			if (ch == text_delim)
 800042c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000430:	7aba      	ldrb	r2, [r7, #10]
 8000432:	429a      	cmp	r2, r3
 8000434:	d105      	bne.n	8000442 <read_next_field+0x94>
			{
				in_text = true;
 8000436:	2301      	movs	r3, #1
 8000438:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				c = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
 8000440:	e05c      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch == field_delim)
 8000442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000446:	7afa      	ldrb	r2, [r7, #11]
 8000448:	429a      	cmp	r2, r3
 800044a:	d103      	bne.n	8000454 <read_next_field+0xa6>
			{
				done = true;
 800044c:	2301      	movs	r3, #1
 800044e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000452:	e053      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch == '\n')
 8000454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000458:	2b0a      	cmp	r3, #10
 800045a:	d103      	bne.n	8000464 <read_next_field+0xb6>
			{
				done = true;
 800045c:	2301      	movs	r3, #1
 800045e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000462:	e04b      	b.n	80004fc <read_next_field+0x14e>
			}
			else if (ch != '\r')
 8000464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000468:	2b0d      	cmp	r3, #13
 800046a:	d047      	beq.n	80004fc <read_next_field+0x14e>
			{
				add_char(&tmp, &c, ch);
 800046c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000470:	f107 0118 	add.w	r1, r7, #24
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff09 	bl	8000290 <add_char>
 800047e:	e03d      	b.n	80004fc <read_next_field+0x14e>
			}
		}
		else
		{ /* in_text == true */
			if (esc)
 8000480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000484:	2b00      	cmp	r3, #0
 8000486:	d018      	beq.n	80004ba <read_next_field+0x10c>
			{
				if (ch == text_delim)
 8000488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800048c:	7aba      	ldrb	r2, [r7, #10]
 800048e:	429a      	cmp	r2, r3
 8000490:	d10c      	bne.n	80004ac <read_next_field+0xfe>
				{
					add_char(&tmp, &c, ch);
 8000492:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000496:	f107 0118 	add.w	r1, r7, #24
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fef6 	bl	8000290 <add_char>
					esc = false;
 80004a4:	2300      	movs	r3, #0
 80004a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80004aa:	e027      	b.n	80004fc <read_next_field+0x14e>
				}
				else
				{
					esc = false;
 80004ac:	2300      	movs	r3, #0
 80004ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					done = true;
 80004b2:	2301      	movs	r3, #1
 80004b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80004b8:	e020      	b.n	80004fc <read_next_field+0x14e>
				}
			}
			else
			{ /* !esc */
				if (ch == text_delim)
 80004ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004be:	7aba      	ldrb	r2, [r7, #10]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d103      	bne.n	80004cc <read_next_field+0x11e>
				{
					esc = true;
 80004c4:	2301      	movs	r3, #1
 80004c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80004ca:	e017      	b.n	80004fc <read_next_field+0x14e>
				} else if (ch == field_delim)
 80004cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80004d0:	7afa      	ldrb	r2, [r7, #11]
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d109      	bne.n	80004ea <read_next_field+0x13c>
				{
					add_char(&tmp, &c, ch);
 80004d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80004da:	f107 0118 	add.w	r1, r7, #24
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff fed4 	bl	8000290 <add_char>
 80004e8:	e008      	b.n	80004fc <read_next_field+0x14e>
				}
				else
				{
					add_char(&tmp, &c, ch);
 80004ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80004ee:	f107 0118 	add.w	r1, r7, #24
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff feca 	bl	8000290 <add_char>
	while (!done)
 80004fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	f47f af71 	bne.w	80003ee <read_next_field+0x40>
				}
			}
		}
    }

    if (field != NULL)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d004      	beq.n	800051c <read_next_field+0x16e>
	{
        set_field(field, tmp);
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff ff21 	bl	800035e <set_field>
    }

    if (tmp != NULL)
 800051c:	697b      	ldr	r3, [r7, #20]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d003      	beq.n	800052a <read_next_field+0x17c>
        free(tmp);
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	4618      	mov	r0, r3
 8000526:	f00c fc8d 	bl	800ce44 <free>
    tmp = NULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
    /* Moving the fp to the beginning of the next field and peeking
        * to see if it is a new line or if there is in fact no next field.
        */
    int pos;
    int retval;
    done = false;
 800052e:	2300      	movs	r3, #0
 8000530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    while (!done)
 8000534:	e04b      	b.n	80005ce <read_next_field+0x220>
	{
		if (ch == field_delim)
 8000536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800053a:	7afa      	ldrb	r2, [r7, #11]
 800053c:	429a      	cmp	r2, r3
 800053e:	d105      	bne.n	800054c <read_next_field+0x19e>
		{
			retval = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 8000544:	2301      	movs	r3, #1
 8000546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800054a:	e040      	b.n	80005ce <read_next_field+0x220>
		}
		else if (ch == '\n')
 800054c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000550:	2b0a      	cmp	r3, #10
 8000552:	d124      	bne.n	800059e <read_next_field+0x1f0>
		{
			/* Checking to see if this \n is the one that UNIX
				* sometimes includes before the EOF */
			pos = csv_fp->fptr;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
			f_read(csv_fp, &ch, 1, &n);
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8000566:	2201      	movs	r2, #1
 8000568:	68f8      	ldr	r0, [r7, #12]
 800056a:	f008 fc5a 	bl	8008e22 <f_read>

			if (f_eof(csv_fp))
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000574:	689a      	ldr	r2, [r3, #8]
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	429a      	cmp	r2, r3
 8000580:	d102      	bne.n	8000588 <read_next_field+0x1da>
				retval = 2;
 8000582:	2302      	movs	r3, #2
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
 8000586:	e001      	b.n	800058c <read_next_field+0x1de>
			else
				retval = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28

			f_lseek(csv_fp, pos);
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	4619      	mov	r1, r3
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f009 fa24 	bl	80099de <f_lseek>
			done = true;
 8000596:	2301      	movs	r3, #1
 8000598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800059c:	e017      	b.n	80005ce <read_next_field+0x220>
		}
		else if (f_eof(csv_fp))
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005a4:	689a      	ldr	r2, [r3, #8]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d105      	bne.n	80005be <read_next_field+0x210>
		{
			retval = 2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
			done = true;
 80005b6:	2301      	movs	r3, #1
 80005b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80005bc:	e007      	b.n	80005ce <read_next_field+0x220>
		}
		else
		{
			f_read(csv_fp, &ch, 1, &n);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	f107 0123 	add.w	r1, r7, #35	; 0x23
 80005c6:	2201      	movs	r2, #1
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f008 fc2a 	bl	8008e22 <f_read>
    while (!done)
 80005ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1ac      	bne.n	8000536 <read_next_field+0x188>
		}
    }

    return retval;
 80005dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3730      	adds	r7, #48	; 0x30
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <append_field>:
 * 0: success
 * 1: the given row does not exist
 * 2: memory allocation error
 */
static int append_field(CSV_BUFFER *buffer, size_t row)
{
 80005e6:	b590      	push	{r4, r7, lr}
 80005e8:	b085      	sub	sp, #20
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]

	CSV_FIELD **temp_field;

	if (buffer->rows < row + 1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d201      	bcs.n	8000600 <append_field+0x1a>
		return 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e036      	b.n	800066e <append_field+0x88>

	/* Set col equal to the index of the new field */
	int col = buffer->width[row];
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	60fb      	str	r3, [r7, #12]

	temp_field = realloc(buffer->field[row], (col + 1) * sizeof(CSV_FIELD*));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4619      	mov	r1, r3
 8000622:	4610      	mov	r0, r2
 8000624:	f00c fd0c 	bl	800d040 <realloc>
 8000628:	60b8      	str	r0, [r7, #8]
	if (temp_field == NULL)
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <append_field+0x4e>
	{
		return 2;
 8000630:	2302      	movs	r3, #2
 8000632:	e01c      	b.n	800066e <append_field+0x88>
	}
	else
	{
		buffer->field[row] = temp_field;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4413      	add	r3, r2
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	601a      	str	r2, [r3, #0]
		buffer->field[row][col] = create_field();
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	18d4      	adds	r4, r2, r3
 8000654:	f7ff fe50 	bl	80002f8 <create_field>
 8000658:	4603      	mov	r3, r0
 800065a:	6023      	str	r3, [r4, #0]
		buffer->width[row]++;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	3201      	adds	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bd90      	pop	{r4, r7, pc}

08000676 <append_row>:
 * 0: success
 * 1: error allocating width memory
 * 2: error allocating field memory
 */
static int append_row(CSV_BUFFER *buffer)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b086      	sub	sp, #24
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
    size_t *temp_width;
    CSV_FIELD ***temp_field;

    size_t row  = buffer->rows;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	617b      	str	r3, [r7, #20]

    temp_width = realloc(buffer->width, (buffer->rows + 1) * sizeof(size_t));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689a      	ldr	r2, [r3, #8]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	3301      	adds	r3, #1
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4619      	mov	r1, r3
 8000692:	4610      	mov	r0, r2
 8000694:	f00c fcd4 	bl	800d040 <realloc>
 8000698:	6138      	str	r0, [r7, #16]
    if (temp_width != NULL)
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d018      	beq.n	80006d2 <append_row+0x5c>
	{
        buffer->width = temp_width;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	609a      	str	r2, [r3, #8]
        buffer->width[row] = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	689a      	ldr	r2, [r3, #8]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
	else
	{
        return 1;
    }

    temp_field = realloc(buffer->field, (buffer->rows + 1) * sizeof(CSV_FIELD**));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	3301      	adds	r3, #1
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4619      	mov	r1, r3
 80006c2:	4610      	mov	r0, r2
 80006c4:	f00c fcbc 	bl	800d040 <realloc>
 80006c8:	60f8      	str	r0, [r7, #12]
    if (temp_field != NULL)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d017      	beq.n	8000700 <append_row+0x8a>
 80006d0:	e001      	b.n	80006d6 <append_row+0x60>
        return 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	e018      	b.n	8000708 <append_row+0x92>
	{
        buffer->field = temp_field;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	601a      	str	r2, [r3, #0]
        buffer->field[row] = NULL;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	4413      	add	r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
	{
        free(temp_width);
        return 2;
    }

    buffer->rows++;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	605a      	str	r2, [r3, #4]
    append_field(buffer, row);
 80006f4:	6979      	ldr	r1, [r7, #20]
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff75 	bl	80005e6 <append_field>
    return 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e003      	b.n	8000708 <append_row+0x92>
        free(temp_width);
 8000700:	6938      	ldr	r0, [r7, #16]
 8000702:	f00c fb9f 	bl	800ce44 <free>
        return 2;
 8000706:	2302      	movs	r3, #2
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <csv_create_buffer>:

    return 0;
}

CSV_BUFFER *csv_create_buffer()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
    CSV_BUFFER *buffer = malloc(sizeof(CSV_BUFFER));
 8000716:	2010      	movs	r0, #16
 8000718:	f00c fb8c 	bl	800ce34 <malloc>
 800071c:	4603      	mov	r3, r0
 800071e:	607b      	str	r3, [r7, #4]

    if (buffer != NULL)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d00e      	beq.n	8000744 <csv_create_buffer+0x34>
	{
	    buffer->field = NULL;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
	    buffer->rows = 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
	    buffer->width = NULL;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	    buffer->field_delim = ',';
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	222c      	movs	r2, #44	; 0x2c
 800073c:	731a      	strb	r2, [r3, #12]
	    buffer->text_delim = '"';
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2222      	movs	r2, #34	; 0x22
 8000742:	735a      	strb	r2, [r3, #13]
    }

    return buffer;
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <csv_destroy_buffer>:

void csv_destroy_buffer(CSV_BUFFER *buffer)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
    int i, j;

    for (i = 0; i < buffer->rows; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e02e      	b.n	80007ba <csv_destroy_buffer+0x6c>
	{
        for (j = 0; j < buffer->width[i]; j++)
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	e00f      	b.n	8000782 <csv_destroy_buffer+0x34>
		{
            destroy_field(buffer->field[i][j]);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	4413      	add	r3, r2
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fdd8 	bl	800032c <destroy_field>
        for (j = 0; j < buffer->width[i]; j++)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	3301      	adds	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689a      	ldr	r2, [r3, #8]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	429a      	cmp	r2, r3
 8000792:	d8e6      	bhi.n	8000762 <csv_destroy_buffer+0x14>
        }
        free(buffer->field[i]);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f00c fb4f 	bl	800ce44 <free>
        buffer->field[i] = NULL;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
    for (i = 0; i < buffer->rows; i++)
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3301      	adds	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d8cb      	bhi.n	800075c <csv_destroy_buffer+0xe>
    }

    if (buffer->field != NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d004      	beq.n	80007d6 <csv_destroy_buffer+0x88>
        free(buffer->field);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f00c fb37 	bl	800ce44 <free>

    if (buffer->width != NULL)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d004      	beq.n	80007e8 <csv_destroy_buffer+0x9a>
        free(buffer->width);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00c fb2e 	bl	800ce44 <free>

    free(buffer);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f00c fb2b 	bl	800ce44 <free>
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <csv_load>:

int csv_load(CSV_BUFFER *buffer, FIL *csv_fp)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b088      	sub	sp, #32
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 8000800:	2100      	movs	r1, #0
 8000802:	6838      	ldr	r0, [r7, #0]
 8000804:	f009 f8eb 	bl	80099de <f_lseek>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <csv_load+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 8000812:	2301      	movs	r3, #1
 8000814:	e059      	b.n	80008ca <csv_load+0xd4>
	}

	int next = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
	bool end = false;
 800081a:	2300      	movs	r3, #0
 800081c:	76fb      	strb	r3, [r7, #27]
	bool first = true;
 800081e:	2301      	movs	r3, #1
 8000820:	76bb      	strb	r3, [r7, #26]
	int i = -1, j = -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	613b      	str	r3, [r7, #16]

	while (!end)
 800082e:	e045      	b.n	80008bc <csv_load+0xc6>
	{
		if (!first)
 8000830:	7ebb      	ldrb	r3, [r7, #26]
 8000832:	f083 0301 	eor.w	r3, r3, #1
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b00      	cmp	r3, #0
 800083a:	d015      	beq.n	8000868 <csv_load+0x72>
		{
			next = read_next_field(csv_fp, buffer->field_delim, buffer->text_delim, buffer->field[i][j-1]);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7b19      	ldrb	r1, [r3, #12]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7b58      	ldrb	r0, [r3, #13]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4413      	add	r3, r2
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000856:	3b01      	subs	r3, #1
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4413      	add	r3, r2
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4602      	mov	r2, r0
 8000860:	6838      	ldr	r0, [r7, #0]
 8000862:	f7ff fda4 	bl	80003ae <read_next_field>
 8000866:	61f8      	str	r0, [r7, #28]
		}

		if (next == 2)
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d101      	bne.n	8000872 <csv_load+0x7c>
			end = true;
 800086e:	2301      	movs	r3, #1
 8000870:	76fb      	strb	r3, [r7, #27]

		if (next == 1)
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d10c      	bne.n	8000892 <csv_load+0x9c>
		{
			if (append_row(buffer) != 0)
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fefc 	bl	8000676 <append_row>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <csv_load+0x92>
				return 2;
 8000884:	2302      	movs	r3, #2
 8000886:	e020      	b.n	80008ca <csv_load+0xd4>
			j = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
			i++;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
		}

		if (next == 0)
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10c      	bne.n	80008b2 <csv_load+0xbc>
		{
			if (append_field(buffer, i) != 0)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	4619      	mov	r1, r3
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fea2 	bl	80005e6 <append_field>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <csv_load+0xb6>
				return 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	e00e      	b.n	80008ca <csv_load+0xd4>
			j++;
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	3301      	adds	r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
		}

		if (first) first = false;
 80008b2:	7ebb      	ldrb	r3, [r7, #26]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <csv_load+0xc6>
 80008b8:	2300      	movs	r3, #0
 80008ba:	76bb      	strb	r3, [r7, #26]
	while (!end)
 80008bc:	7efb      	ldrb	r3, [r7, #27]
 80008be:	f083 0301 	eor.w	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1b3      	bne.n	8000830 <csv_load+0x3a>
	}

	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <csv_save>:

int csv_save(FIL *csv_fp, CSV_BUFFER *buffer)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b088      	sub	sp, #32
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]

	UINT n;
	FRESULT res;

	// Rewind just in case
	res = f_rewind(csv_fp);
 80008dc:	2100      	movs	r1, #0
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f009 f87d 	bl	80099de <f_lseek>
 80008e4:	4603      	mov	r3, r0
 80008e6:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 80008e8:	7cfb      	ldrb	r3, [r7, #19]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <csv_save+0x20>
	{
		//log_error("f_rewind pb: %d", res);
		return 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e0d8      	b.n	8000aa4 <csv_save+0x1d2>
	}

    char text_delim = buffer->text_delim;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	7b5b      	ldrb	r3, [r3, #13]
 80008f6:	72fb      	strb	r3, [r7, #11]
    char field_delim = buffer->field_delim;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	7b1b      	ldrb	r3, [r3, #12]
 80008fc:	72bb      	strb	r3, [r7, #10]
	char new_line = '\n';
 80008fe:	230a      	movs	r3, #10
 8000900:	727b      	strb	r3, [r7, #9]
    for(i = 0; i < buffer->rows; i++)
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	e0b9      	b.n	8000a7c <csv_save+0x1aa>
	{
        for(j = 0; j < buffer->width[i]; j++)
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	e0a9      	b.n	8000a62 <csv_save+0x190>
		{
            chloc = strchr(buffer->field[i][j]->text, text_delim);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	7afa      	ldrb	r2, [r7, #11]
 8000926:	4611      	mov	r1, r2
 8000928:	4618      	mov	r0, r3
 800092a:	f00c fc3f 	bl	800d1ac <strchr>
 800092e:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d110      	bne.n	8000958 <csv_save+0x86>
                chloc = strchr(buffer->field[i][j]->text, field_delim);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	7aba      	ldrb	r2, [r7, #10]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f00c fc2b 	bl	800d1ac <strchr>
 8000956:	6178      	str	r0, [r7, #20]
            if(chloc == NULL)
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10f      	bne.n	800097e <csv_save+0xac>
                chloc = strchr(buffer->field[i][j]->text, '\n');
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	210a      	movs	r1, #10
 8000976:	4618      	mov	r0, r3
 8000978:	f00c fc18 	bl	800d1ac <strchr>
 800097c:	6178      	str	r0, [r7, #20]
            // if any of the above characters are found, chloc will be set
            // and we must use text delimiters.
            if(chloc != NULL)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d02e      	beq.n	80009e2 <csv_save+0x110>
			{
				f_write(csv_fp, &text_delim, 1, &n);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	f107 010b 	add.w	r1, r7, #11
 800098c:	2201      	movs	r2, #1
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f008 fc84 	bl	800929c <f_write>
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6819      	ldr	r1, [r3, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f008 fc68 	bl	800929c <f_write>
				f_write(csv_fp, &text_delim, 1, &n);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	f107 010b 	add.w	r1, r7, #11
 80009d4:	2201      	movs	r2, #1
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f008 fc60 	bl	800929c <f_write>
                chloc = NULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	e01b      	b.n	8000a1a <csv_save+0x148>
            }
			else
			{
				f_write(csv_fp, buffer->field[i][j]->text, buffer->field[i][j]->length - 1, &n);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6819      	ldr	r1, [r3, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	4413      	add	r3, r2
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f008 fc41 	bl	800929c <f_write>
            }
            if(j < buffer->width[i] - 1)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1e5a      	subs	r2, r3, #1
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d908      	bls.n	8000a40 <csv_save+0x16e>
				f_write(csv_fp, &field_delim, 1, &n);
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	f107 010a 	add.w	r1, r7, #10
 8000a36:	2201      	movs	r2, #1
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f008 fc2f 	bl	800929c <f_write>
 8000a3e:	e00d      	b.n	8000a5c <csv_save+0x18a>
            else if (i < buffer->rows - 1)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	1e5a      	subs	r2, r3, #1
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d907      	bls.n	8000a5c <csv_save+0x18a>
				f_write(csv_fp, &new_line, 1, &n);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	f107 0109 	add.w	r1, r7, #9
 8000a54:	2201      	movs	r2, #1
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f008 fc20 	bl	800929c <f_write>
        for(j = 0; j < buffer->width[i]; j++)
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f63f af4c 	bhi.w	800090e <csv_save+0x3c>
    for(i = 0; i < buffer->rows; i++)
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	f63f af40 	bhi.w	8000908 <csv_save+0x36>
        }
    }
	f_truncate(csv_fp);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f009 fb19 	bl	800a0c0 <f_truncate>

	// Sync (just in case)
	res = f_sync(csv_fp);
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f008 fe92 	bl	80097b8 <f_sync>
 8000a94:	4603      	mov	r3, r0
 8000a96:	74fb      	strb	r3, [r7, #19]
	if (res != FR_OK)
 8000a98:	7cfb      	ldrb	r3, [r7, #19]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <csv_save+0x1d0>
	{
		//log_error("f_sync pb: %d", res);
		return 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <csv_save+0x1d2>
	}

    return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <csv_set_field>:
    else
        return buffer->field[row][entry]->length - 1;
}

int csv_set_field(CSV_BUFFER *buffer, size_t row, size_t entry, char *field)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
    while (row >= buffer->rows)
 8000aba:	e002      	b.n	8000ac2 <csv_set_field+0x16>
	{
        append_row(buffer);
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fdda 	bl	8000676 <append_row>
    while (row >= buffer->rows)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d2f7      	bcs.n	8000abc <csv_set_field+0x10>
    }
    while (entry >= buffer->width[row])
 8000acc:	e003      	b.n	8000ad6 <csv_set_field+0x2a>
        append_field(buffer, row);
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f7ff fd88 	bl	80005e6 <append_field>
    while (entry >= buffer->width[row])
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d2f2      	bcs.n	8000ace <csv_set_field+0x22>

    if (set_field(buffer->field[row][entry], field) == 0)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6839      	ldr	r1, [r7, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fc2d 	bl	800035e <set_field>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <csv_set_field+0x62>
        return 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <csv_set_field+0x64>
    else
        return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <SELECT+0x14>)
 8000b22:	f002 fad1 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	48000400 	.word	0x48000400

08000b30 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DESELECT+0x14>)
 8000b3a:	f002 fac5 	bl	80030c8 <HAL_GPIO_WritePin>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	48000400 	.word	0x48000400

08000b48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b52:	bf00      	nop
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <SPI_TxByte+0x30>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d1f8      	bne.n	8000b54 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	2364      	movs	r3, #100	; 0x64
 8000b66:	2201      	movs	r2, #1
 8000b68:	4803      	ldr	r0, [pc, #12]	; (8000b78 <SPI_TxByte+0x30>)
 8000b6a:	f004 f882 	bl	8004c72 <HAL_SPI_Transmit>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000e0 	.word	0x200000e0

08000b7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000b88:	bf00      	nop
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <SPI_TxBuffer+0x30>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d1f8      	bne.n	8000b8a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000b98:	887a      	ldrh	r2, [r7, #2]
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <SPI_TxBuffer+0x30>)
 8000ba0:	f004 f867 	bl	8004c72 <HAL_SPI_Transmit>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000e0 	.word	0x200000e0

08000bb0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000bb6:	23ff      	movs	r3, #255	; 0xff
 8000bb8:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bba:	bf00      	nop
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <SPI_RxByte+0x34>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d1f8      	bne.n	8000bbc <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000bca:	1dba      	adds	r2, r7, #6
 8000bcc:	1df9      	adds	r1, r7, #7
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <SPI_RxByte+0x34>)
 8000bd6:	f004 f9ba 	bl	8004f4e <HAL_SPI_TransmitReceive>

  return data;
 8000bda:	79bb      	ldrb	r3, [r7, #6]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000e0 	.word	0x200000e0

08000be8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000bf0:	f7ff ffde 	bl	8000bb0 <SPI_RxByte>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	701a      	strb	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <SD_ReadyWait+0x30>)
 8000c0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c10:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000c12:	f7ff ffcd 	bl	8000bb0 <SPI_RxByte>
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2bff      	cmp	r3, #255	; 0xff
 8000c1e:	d003      	beq.n	8000c28 <SD_ReadyWait+0x24>
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SD_ReadyWait+0x30>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d1f4      	bne.n	8000c12 <SD_ReadyWait+0xe>

  return res;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000b2 	.word	0x200000b2

08000c38 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000c3e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c42:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000c44:	f7ff ff74 	bl	8000b30 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	e005      	b.n	8000c5a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c4e:	20ff      	movs	r0, #255	; 0xff
 8000c50:	f7ff ff7a 	bl	8000b48 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	3301      	adds	r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	2b09      	cmp	r3, #9
 8000c5e:	ddf6      	ble.n	8000c4e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000c60:	f7ff ff5a 	bl	8000b18 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000c64:	2340      	movs	r3, #64	; 0x40
 8000c66:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000c78:	2395      	movs	r3, #149	; 0x95
 8000c7a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2106      	movs	r1, #6
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff7b 	bl	8000b7c <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000c86:	e002      	b.n	8000c8e <SD_PowerOn+0x56>
  {
    cnt--;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000c8e:	f7ff ff8f 	bl	8000bb0 <SPI_RxByte>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d002      	beq.n	8000c9e <SD_PowerOn+0x66>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f4      	bne.n	8000c88 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000c9e:	f7ff ff47 	bl	8000b30 <DESELECT>
  SPI_TxByte(0XFF);
 8000ca2:	20ff      	movs	r0, #255	; 0xff
 8000ca4:	f7ff ff50 	bl	8000b48 <SPI_TxByte>

  PowerFlag = 1;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <SD_PowerOn+0x80>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200000b5 	.word	0x200000b5

08000cbc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <SD_PowerOff+0x14>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	200000b5 	.word	0x200000b5

08000cd4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <SD_CheckPower+0x14>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200000b5 	.word	0x200000b5

08000cec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <SD_RxDataBlock+0x58>)
 8000cf8:	22c8      	movs	r2, #200	; 0xc8
 8000cfa:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000cfc:	f7ff ff58 	bl	8000bb0 <SPI_RxByte>
 8000d00:	4603      	mov	r3, r0
 8000d02:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	2bff      	cmp	r3, #255	; 0xff
 8000d08:	d103      	bne.n	8000d12 <SD_RxDataBlock+0x26>
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <SD_RxDataBlock+0x58>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f4      	bne.n	8000cfc <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	2bfe      	cmp	r3, #254	; 0xfe
 8000d16:	d001      	beq.n	8000d1c <SD_RxDataBlock+0x30>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e00f      	b.n	8000d3c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff60 	bl	8000be8 <SPI_RxBytePtr>
  } while(len--);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	603a      	str	r2, [r7, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f4      	bne.n	8000d1c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000d32:	f7ff ff3d 	bl	8000bb0 <SPI_RxByte>
  SPI_RxByte();
 8000d36:	f7ff ff3b 	bl	8000bb0 <SPI_RxByte>

  return TRUE;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000b0 	.word	0x200000b0

08000d48 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000d58:	f7ff ff54 	bl	8000c04 <SD_ReadyWait>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2bff      	cmp	r3, #255	; 0xff
 8000d60:	d001      	beq.n	8000d66 <SD_TxDataBlock+0x1e>
 8000d62:	2300      	movs	r3, #0
 8000d64:	e02f      	b.n	8000dc6 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff feed 	bl	8000b48 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2bfd      	cmp	r3, #253	; 0xfd
 8000d72:	d020      	beq.n	8000db6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff feff 	bl	8000b7c <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000d7e:	f7ff ff17 	bl	8000bb0 <SPI_RxByte>
    SPI_RxByte();
 8000d82:	f7ff ff15 	bl	8000bb0 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000d86:	e00b      	b.n	8000da0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000d88:	f7ff ff12 	bl	8000bb0 <SPI_RxByte>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	f003 031f 	and.w	r3, r3, #31
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d006      	beq.n	8000da8 <SD_TxDataBlock+0x60>
      i++;
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	2b40      	cmp	r3, #64	; 0x40
 8000da4:	d9f0      	bls.n	8000d88 <SD_TxDataBlock+0x40>
 8000da6:	e000      	b.n	8000daa <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000da8:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000daa:	bf00      	nop
 8000dac:	f7ff ff00 	bl	8000bb0 <SPI_RxByte>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0fa      	beq.n	8000dac <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	f003 031f 	and.w	r3, r3, #31
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d101      	bne.n	8000dc4 <SD_TxDataBlock+0x7c>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	6039      	str	r1, [r7, #0]
 8000dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000dda:	f7ff ff13 	bl	8000c04 <SD_ReadyWait>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2bff      	cmp	r3, #255	; 0xff
 8000de2:	d001      	beq.n	8000de8 <SD_SendCmd+0x1a>
 8000de4:	23ff      	movs	r3, #255	; 0xff
 8000de6:	e042      	b.n	8000e6e <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff feac 	bl	8000b48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	0e1b      	lsrs	r3, r3, #24
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fea6 	bl	8000b48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	0c1b      	lsrs	r3, r3, #16
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fea0 	bl	8000b48 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fe9a 	bl	8000b48 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe95 	bl	8000b48 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b40      	cmp	r3, #64	; 0x40
 8000e22:	d102      	bne.n	8000e2a <SD_SendCmd+0x5c>
 8000e24:	2395      	movs	r3, #149	; 0x95
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e007      	b.n	8000e3a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b48      	cmp	r3, #72	; 0x48
 8000e2e:	d102      	bne.n	8000e36 <SD_SendCmd+0x68>
 8000e30:	2387      	movs	r3, #135	; 0x87
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e001      	b.n	8000e3a <SD_SendCmd+0x6c>
  else crc = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe83 	bl	8000b48 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b4c      	cmp	r3, #76	; 0x4c
 8000e46:	d101      	bne.n	8000e4c <SD_SendCmd+0x7e>
 8000e48:	f7ff feb2 	bl	8000bb0 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000e50:	f7ff feae 	bl	8000bb0 <SPI_RxByte>
 8000e54:	4603      	mov	r3, r0
 8000e56:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000e58:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	da05      	bge.n	8000e6c <SD_SendCmd+0x9e>
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	73bb      	strb	r3, [r7, #14]
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1f1      	bne.n	8000e50 <SD_SendCmd+0x82>

  return res;
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SD_disk_initialize+0x14>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e0d1      	b.n	8001030 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000e8c:	4b6a      	ldr	r3, [pc, #424]	; (8001038 <SD_disk_initialize+0x1c0>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <SD_disk_initialize+0x2a>
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <SD_disk_initialize+0x1c0>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	e0c6      	b.n	8001030 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000ea2:	f7ff fec9 	bl	8000c38 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000ea6:	f7ff fe37 	bl	8000b18 <SELECT>

  /* check disk type */
  type = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2040      	movs	r0, #64	; 0x40
 8000eb2:	f7ff ff8c 	bl	8000dce <SD_SendCmd>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	f040 80a1 	bne.w	8001000 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	; (800103c <SD_disk_initialize+0x1c4>)
 8000ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec4:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000ec6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000eca:	2048      	movs	r0, #72	; 0x48
 8000ecc:	f7ff ff7f 	bl	8000dce <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d155      	bne.n	8000f82 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e00c      	b.n	8000ef6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000edc:	7bfc      	ldrb	r4, [r7, #15]
 8000ede:	f7ff fe67 	bl	8000bb0 <SPI_RxByte>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f104 0310 	add.w	r3, r4, #16
 8000eea:	443b      	add	r3, r7
 8000eec:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d9ef      	bls.n	8000edc <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000efc:	7abb      	ldrb	r3, [r7, #10]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d17e      	bne.n	8001000 <SD_disk_initialize+0x188>
 8000f02:	7afb      	ldrb	r3, [r7, #11]
 8000f04:	2baa      	cmp	r3, #170	; 0xaa
 8000f06:	d17b      	bne.n	8001000 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2077      	movs	r0, #119	; 0x77
 8000f0c:	f7ff ff5f 	bl	8000dce <SD_SendCmd>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d807      	bhi.n	8000f26 <SD_disk_initialize+0xae>
 8000f16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f1a:	2069      	movs	r0, #105	; 0x69
 8000f1c:	f7ff ff57 	bl	8000dce <SD_SendCmd>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d004      	beq.n	8000f30 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <SD_disk_initialize+0x1c4>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1ec      	bne.n	8000f08 <SD_disk_initialize+0x90>
 8000f2e:	e000      	b.n	8000f32 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f30:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000f32:	4b42      	ldr	r3, [pc, #264]	; (800103c <SD_disk_initialize+0x1c4>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d062      	beq.n	8001000 <SD_disk_initialize+0x188>
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	207a      	movs	r0, #122	; 0x7a
 8000f3e:	f7ff ff46 	bl	8000dce <SD_SendCmd>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d15b      	bne.n	8001000 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e00c      	b.n	8000f68 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000f4e:	7bfc      	ldrb	r4, [r7, #15]
 8000f50:	f7ff fe2e 	bl	8000bb0 <SPI_RxByte>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	f104 0310 	add.w	r3, r4, #16
 8000f5c:	443b      	add	r3, r7
 8000f5e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	3301      	adds	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d9ef      	bls.n	8000f4e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000f6e:	7a3b      	ldrb	r3, [r7, #8]
 8000f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SD_disk_initialize+0x104>
 8000f78:	230c      	movs	r3, #12
 8000f7a:	e000      	b.n	8000f7e <SD_disk_initialize+0x106>
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	73bb      	strb	r3, [r7, #14]
 8000f80:	e03e      	b.n	8001000 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000f82:	2100      	movs	r1, #0
 8000f84:	2077      	movs	r0, #119	; 0x77
 8000f86:	f7ff ff22 	bl	8000dce <SD_SendCmd>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d808      	bhi.n	8000fa2 <SD_disk_initialize+0x12a>
 8000f90:	2100      	movs	r1, #0
 8000f92:	2069      	movs	r0, #105	; 0x69
 8000f94:	f7ff ff1b 	bl	8000dce <SD_SendCmd>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d801      	bhi.n	8000fa2 <SD_disk_initialize+0x12a>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e000      	b.n	8000fa4 <SD_disk_initialize+0x12c>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d10e      	bne.n	8000fca <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000fac:	2100      	movs	r1, #0
 8000fae:	2077      	movs	r0, #119	; 0x77
 8000fb0:	f7ff ff0d 	bl	8000dce <SD_SendCmd>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d80e      	bhi.n	8000fd8 <SD_disk_initialize+0x160>
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2069      	movs	r0, #105	; 0x69
 8000fbe:	f7ff ff06 	bl	8000dce <SD_SendCmd>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d107      	bne.n	8000fd8 <SD_disk_initialize+0x160>
 8000fc8:	e00c      	b.n	8000fe4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2041      	movs	r0, #65	; 0x41
 8000fce:	f7ff fefe 	bl	8000dce <SD_SendCmd>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d004      	beq.n	8000fe2 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <SD_disk_initialize+0x1c4>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e2      	bne.n	8000fa6 <SD_disk_initialize+0x12e>
 8000fe0:	e000      	b.n	8000fe4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000fe2:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <SD_disk_initialize+0x1c4>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <SD_disk_initialize+0x184>
 8000fec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff0:	2050      	movs	r0, #80	; 0x50
 8000ff2:	f7ff feec 	bl	8000dce <SD_SendCmd>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SD_disk_initialize+0x188>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <SD_disk_initialize+0x1c8>)
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8001006:	f7ff fd93 	bl	8000b30 <DESELECT>
  SPI_RxByte();
 800100a:	f7ff fdd1 	bl	8000bb0 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d008      	beq.n	8001026 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <SD_disk_initialize+0x1c0>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SD_disk_initialize+0x1c0>)
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	e001      	b.n	800102a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001026:	f7ff fe49 	bl	8000cbc <SD_PowerOff>
  }

  return Stat;
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <SD_disk_initialize+0x1c0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	200000b0 	.word	0x200000b0
 8001040:	200000b4 	.word	0x200000b4

08001044 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SD_disk_status+0x14>
 8001054:	2301      	movs	r3, #1
 8001056:	e002      	b.n	800105e <SD_disk_status+0x1a>
  return Stat;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <SD_disk_status+0x28>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000000 	.word	0x20000000

08001070 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <SD_disk_read+0x1c>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <SD_disk_read+0x20>
 800108c:	2304      	movs	r3, #4
 800108e:	e051      	b.n	8001134 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <SD_disk_read+0xcc>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SD_disk_read+0x32>
 800109e:	2303      	movs	r3, #3
 80010a0:	e048      	b.n	8001134 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <SD_disk_read+0xd0>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <SD_disk_read+0x44>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	025b      	lsls	r3, r3, #9
 80010b2:	607b      	str	r3, [r7, #4]

  SELECT();
 80010b4:	f7ff fd30 	bl	8000b18 <SELECT>

  if (count == 1)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d111      	bne.n	80010e2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	2051      	movs	r0, #81	; 0x51
 80010c2:	f7ff fe84 	bl	8000dce <SD_SendCmd>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d129      	bne.n	8001120 <SD_disk_read+0xb0>
 80010cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d0:	68b8      	ldr	r0, [r7, #8]
 80010d2:	f7ff fe0b 	bl	8000cec <SD_RxDataBlock>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d021      	beq.n	8001120 <SD_disk_read+0xb0>
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	e01e      	b.n	8001120 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	2052      	movs	r0, #82	; 0x52
 80010e6:	f7ff fe72 	bl	8000dce <SD_SendCmd>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d117      	bne.n	8001120 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80010f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f7ff fdf9 	bl	8000cec <SD_RxDataBlock>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00a      	beq.n	8001116 <SD_disk_read+0xa6>
        buff += 512;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001106:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	3b01      	subs	r3, #1
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ed      	bne.n	80010f0 <SD_disk_read+0x80>
 8001114:	e000      	b.n	8001118 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8001116:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8001118:	2100      	movs	r1, #0
 800111a:	204c      	movs	r0, #76	; 0x4c
 800111c:	f7ff fe57 	bl	8000dce <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8001120:	f7ff fd06 	bl	8000b30 <DESELECT>
  SPI_RxByte();
 8001124:	f7ff fd44 	bl	8000bb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	bf14      	ite	ne
 800112e:	2301      	movne	r3, #1
 8001130:	2300      	moveq	r3, #0
 8001132:	b2db      	uxtb	r3, r3
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000000 	.word	0x20000000
 8001140:	200000b4 	.word	0x200000b4

08001144 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <SD_disk_write+0x1c>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <SD_disk_write+0x20>
 8001160:	2304      	movs	r3, #4
 8001162:	e06b      	b.n	800123c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001164:	4b37      	ldr	r3, [pc, #220]	; (8001244 <SD_disk_write+0x100>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SD_disk_write+0x32>
 8001172:	2303      	movs	r3, #3
 8001174:	e062      	b.n	800123c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001176:	4b33      	ldr	r3, [pc, #204]	; (8001244 <SD_disk_write+0x100>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SD_disk_write+0x44>
 8001184:	2302      	movs	r3, #2
 8001186:	e059      	b.n	800123c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <SD_disk_write+0x104>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <SD_disk_write+0x56>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	025b      	lsls	r3, r3, #9
 8001198:	607b      	str	r3, [r7, #4]

  SELECT();
 800119a:	f7ff fcbd 	bl	8000b18 <SELECT>

  if (count == 1)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d110      	bne.n	80011c6 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	2058      	movs	r0, #88	; 0x58
 80011a8:	f7ff fe11 	bl	8000dce <SD_SendCmd>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d13a      	bne.n	8001228 <SD_disk_write+0xe4>
 80011b2:	21fe      	movs	r1, #254	; 0xfe
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f7ff fdc7 	bl	8000d48 <SD_TxDataBlock>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d033      	beq.n	8001228 <SD_disk_write+0xe4>
      count = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	e030      	b.n	8001228 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <SD_disk_write+0x104>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80011d2:	2100      	movs	r1, #0
 80011d4:	2077      	movs	r0, #119	; 0x77
 80011d6:	f7ff fdfa 	bl	8000dce <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	2057      	movs	r0, #87	; 0x57
 80011de:	f7ff fdf6 	bl	8000dce <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	2059      	movs	r0, #89	; 0x59
 80011e6:	f7ff fdf2 	bl	8000dce <SD_SendCmd>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11b      	bne.n	8001228 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80011f0:	21fc      	movs	r1, #252	; 0xfc
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f7ff fda8 	bl	8000d48 <SD_TxDataBlock>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00a      	beq.n	8001214 <SD_disk_write+0xd0>
        buff += 512;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001204:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3b01      	subs	r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1ee      	bne.n	80011f0 <SD_disk_write+0xac>
 8001212:	e000      	b.n	8001216 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001214:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8001216:	21fd      	movs	r1, #253	; 0xfd
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff fd95 	bl	8000d48 <SD_TxDataBlock>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <SD_disk_write+0xe4>
      {
        count = 1;
 8001224:	2301      	movs	r3, #1
 8001226:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8001228:	f7ff fc82 	bl	8000b30 <DESELECT>
  SPI_RxByte();
 800122c:	f7ff fcc0 	bl	8000bb0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	200000b4 	.word	0x200000b4

0800124c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b08b      	sub	sp, #44	; 0x2c
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	603a      	str	r2, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	460b      	mov	r3, r1
 800125a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SD_disk_ioctl+0x1e>
 8001266:	2304      	movs	r3, #4
 8001268:	e115      	b.n	8001496 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d124      	bne.n	80012c0 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d012      	beq.n	80012a4 <SD_disk_ioctl+0x58>
 800127e:	2b02      	cmp	r3, #2
 8001280:	dc1a      	bgt.n	80012b8 <SD_disk_ioctl+0x6c>
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <SD_disk_ioctl+0x40>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d006      	beq.n	8001298 <SD_disk_ioctl+0x4c>
 800128a:	e015      	b.n	80012b8 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800128c:	f7ff fd16 	bl	8000cbc <SD_PowerOff>
      res = RES_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001296:	e0fc      	b.n	8001492 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8001298:	f7ff fcce 	bl	8000c38 <SD_PowerOn>
      res = RES_OK;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012a2:	e0f6      	b.n	8001492 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	1c5c      	adds	r4, r3, #1
 80012a8:	f7ff fd14 	bl	8000cd4 <SD_CheckPower>
 80012ac:	4603      	mov	r3, r0
 80012ae:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012b6:	e0ec      	b.n	8001492 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 80012b8:	2304      	movs	r3, #4
 80012ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012be:	e0e8      	b.n	8001492 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012c0:	4b77      	ldr	r3, [pc, #476]	; (80014a0 <SD_disk_ioctl+0x254>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SD_disk_ioctl+0x86>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e0e1      	b.n	8001496 <SD_disk_ioctl+0x24a>

    SELECT();
 80012d2:	f7ff fc21 	bl	8000b18 <SELECT>

    switch (ctrl)
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	2b0d      	cmp	r3, #13
 80012da:	f200 80cb 	bhi.w	8001474 <SD_disk_ioctl+0x228>
 80012de:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <SD_disk_ioctl+0x98>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	080013df 	.word	0x080013df
 80012e8:	0800131d 	.word	0x0800131d
 80012ec:	080013cf 	.word	0x080013cf
 80012f0:	08001475 	.word	0x08001475
 80012f4:	08001475 	.word	0x08001475
 80012f8:	08001475 	.word	0x08001475
 80012fc:	08001475 	.word	0x08001475
 8001300:	08001475 	.word	0x08001475
 8001304:	08001475 	.word	0x08001475
 8001308:	08001475 	.word	0x08001475
 800130c:	08001475 	.word	0x08001475
 8001310:	080013f1 	.word	0x080013f1
 8001314:	08001415 	.word	0x08001415
 8001318:	08001439 	.word	0x08001439
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800131c:	2100      	movs	r1, #0
 800131e:	2049      	movs	r0, #73	; 0x49
 8001320:	f7ff fd55 	bl	8000dce <SD_SendCmd>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 80a8 	bne.w	800147c <SD_disk_ioctl+0x230>
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2110      	movs	r1, #16
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fcda 	bl	8000cec <SD_RxDataBlock>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 809e 	beq.w	800147c <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8001340:	7b3b      	ldrb	r3, [r7, #12]
 8001342:	099b      	lsrs	r3, r3, #6
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10e      	bne.n	8001368 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800134a:	7d7b      	ldrb	r3, [r7, #21]
 800134c:	b29a      	uxth	r2, r3
 800134e:	7d3b      	ldrb	r3, [r7, #20]
 8001350:	b29b      	uxth	r3, r3
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	b29b      	uxth	r3, r3
 8001356:	4413      	add	r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	3301      	adds	r3, #1
 800135c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800135e:	8bfb      	ldrh	r3, [r7, #30]
 8001360:	029a      	lsls	r2, r3, #10
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e02e      	b.n	80013c6 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001368:	7c7b      	ldrb	r3, [r7, #17]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	b2da      	uxtb	r2, r3
 8001370:	7dbb      	ldrb	r3, [r7, #22]
 8001372:	09db      	lsrs	r3, r3, #7
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b2da      	uxtb	r2, r3
 800137a:	7d7b      	ldrb	r3, [r7, #21]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f003 0306 	and.w	r3, r3, #6
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b2db      	uxtb	r3, r3
 800138a:	3302      	adds	r3, #2
 800138c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001390:	7d3b      	ldrb	r3, [r7, #20]
 8001392:	099b      	lsrs	r3, r3, #6
 8001394:	b2db      	uxtb	r3, r3
 8001396:	b29a      	uxth	r2, r3
 8001398:	7cfb      	ldrb	r3, [r7, #19]
 800139a:	b29b      	uxth	r3, r3
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	7cbb      	ldrb	r3, [r7, #18]
 80013a6:	029b      	lsls	r3, r3, #10
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3301      	adds	r3, #1
 80013b6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80013b8:	8bfa      	ldrh	r2, [r7, #30]
 80013ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013be:	3b09      	subs	r3, #9
 80013c0:	409a      	lsls	r2, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80013cc:	e056      	b.n	800147c <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013dc:	e055      	b.n	800148a <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80013de:	f7ff fc11 	bl	8000c04 <SD_ReadyWait>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2bff      	cmp	r3, #255	; 0xff
 80013e6:	d14b      	bne.n	8001480 <SD_disk_ioctl+0x234>
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80013ee:	e047      	b.n	8001480 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80013f0:	2100      	movs	r1, #0
 80013f2:	2049      	movs	r0, #73	; 0x49
 80013f4:	f7ff fceb 	bl	8000dce <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d142      	bne.n	8001484 <SD_disk_ioctl+0x238>
 80013fe:	2110      	movs	r1, #16
 8001400:	6a38      	ldr	r0, [r7, #32]
 8001402:	f7ff fc73 	bl	8000cec <SD_RxDataBlock>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d03b      	beq.n	8001484 <SD_disk_ioctl+0x238>
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001412:	e037      	b.n	8001484 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001414:	2100      	movs	r1, #0
 8001416:	204a      	movs	r0, #74	; 0x4a
 8001418:	f7ff fcd9 	bl	8000dce <SD_SendCmd>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d132      	bne.n	8001488 <SD_disk_ioctl+0x23c>
 8001422:	2110      	movs	r1, #16
 8001424:	6a38      	ldr	r0, [r7, #32]
 8001426:	f7ff fc61 	bl	8000cec <SD_RxDataBlock>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d02b      	beq.n	8001488 <SD_disk_ioctl+0x23c>
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001436:	e027      	b.n	8001488 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001438:	2100      	movs	r1, #0
 800143a:	207a      	movs	r0, #122	; 0x7a
 800143c:	f7ff fcc7 	bl	8000dce <SD_SendCmd>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d116      	bne.n	8001474 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8001446:	2300      	movs	r3, #0
 8001448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800144c:	e00b      	b.n	8001466 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 800144e:	6a3c      	ldr	r4, [r7, #32]
 8001450:	1c63      	adds	r3, r4, #1
 8001452:	623b      	str	r3, [r7, #32]
 8001454:	f7ff fbac 	bl	8000bb0 <SPI_RxByte>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800145c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001460:	3301      	adds	r3, #1
 8001462:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001466:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800146a:	2b03      	cmp	r3, #3
 800146c:	d9ef      	bls.n	800144e <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8001474:	2304      	movs	r3, #4
 8001476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800147a:	e006      	b.n	800148a <SD_disk_ioctl+0x23e>
      break;
 800147c:	bf00      	nop
 800147e:	e004      	b.n	800148a <SD_disk_ioctl+0x23e>
      break;
 8001480:	bf00      	nop
 8001482:	e002      	b.n	800148a <SD_disk_ioctl+0x23e>
      break;
 8001484:	bf00      	nop
 8001486:	e000      	b.n	800148a <SD_disk_ioctl+0x23e>
      break;
 8001488:	bf00      	nop
    }

    DESELECT();
 800148a:	f7ff fb51 	bl	8000b30 <DESELECT>
    SPI_RxByte();
 800148e:	f7ff fb8f 	bl	8000bb0 <SPI_RxByte>
  }

  return res;
 8001492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001496:	4618      	mov	r0, r3
 8001498:	372c      	adds	r7, #44	; 0x2c
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000000 	.word	0x20000000

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b09c      	sub	sp, #112	; 0x70
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014aa:	f000 fef1 	bl	8002290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ae:	f000 f901 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b2:	f000 fa05 	bl	80018c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014b6:	f000 f9d3 	bl	8001860 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80014ba:	f000 f95b 	bl	8001774 <MX_CAN_Init>
  MX_FATFS_Init();
 80014be:	f004 fffb 	bl	80064b8 <MX_FATFS_Init>
  MX_SPI1_Init();
 80014c2:	f000 f98f 	bl	80017e4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  myprintf("------- CAN Captain Controller ----------\r\n");
 80014c6:	4865      	ldr	r0, [pc, #404]	; (800165c <main+0x1b8>)
 80014c8:	f000 fa44 	bl	8001954 <myprintf>

  canfil.FilterBank = 0;
 80014cc:	4b64      	ldr	r3, [pc, #400]	; (8001660 <main+0x1bc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <main+0x1bc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 80014d8:	4b61      	ldr	r3, [pc, #388]	; (8001660 <main+0x1bc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 80014de:	4b60      	ldr	r3, [pc, #384]	; (8001660 <main+0x1bc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 80014e4:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <main+0x1bc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 80014ea:	4b5d      	ldr	r3, [pc, #372]	; (8001660 <main+0x1bc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 80014f0:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <main+0x1bc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 80014f6:	4b5a      	ldr	r3, [pc, #360]	; (8001660 <main+0x1bc>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 80014fc:	4b58      	ldr	r3, [pc, #352]	; (8001660 <main+0x1bc>)
 80014fe:	2201      	movs	r2, #1
 8001500:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 8001502:	4b57      	ldr	r3, [pc, #348]	; (8001660 <main+0x1bc>)
 8001504:	220e      	movs	r2, #14
 8001506:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan,&canfil) != HAL_OK){
 8001508:	4955      	ldr	r1, [pc, #340]	; (8001660 <main+0x1bc>)
 800150a:	4856      	ldr	r0, [pc, #344]	; (8001664 <main+0x1c0>)
 800150c:	f000 fff1 	bl	80024f2 <HAL_CAN_ConfigFilter>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <main+0x76>
	Error_Handler();
 8001516:	f000 fcb3 	bl	8001e80 <Error_Handler>
  }
  if (HAL_CAN_Start(&hcan) != HAL_OK){
 800151a:	4852      	ldr	r0, [pc, #328]	; (8001664 <main+0x1c0>)
 800151c:	f001 f8b3 	bl	8002686 <HAL_CAN_Start>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <main+0x86>
	Error_Handler();
 8001526:	f000 fcab 	bl	8001e80 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800152a:	2102      	movs	r1, #2
 800152c:	484d      	ldr	r0, [pc, #308]	; (8001664 <main+0x1c0>)
 800152e:	f001 fb38 	bl	8002ba2 <HAL_CAN_ActivateNotification>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <main+0x98>
	Error_Handler();
 8001538:	f000 fca2 	bl	8001e80 <Error_Handler>
  }


  myprintf("SD Card Connecting\r\n");
 800153c:	484a      	ldr	r0, [pc, #296]	; (8001668 <main+0x1c4>)
 800153e:	f000 fa09 	bl	8001954 <myprintf>
  fres = f_mount(&FatFs, "0", 1);    //1=mount now
 8001542:	2201      	movs	r2, #1
 8001544:	4949      	ldr	r1, [pc, #292]	; (800166c <main+0x1c8>)
 8001546:	484a      	ldr	r0, [pc, #296]	; (8001670 <main+0x1cc>)
 8001548:	f007 f8ec 	bl	8008724 <f_mount>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <main+0x1d0>)
 8001552:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK)
 8001554:	4b47      	ldr	r3, [pc, #284]	; (8001674 <main+0x1d0>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <main+0xc6>
  {
  myprintf("No SD Card found : (%i)\r\n", fres);
 800155c:	4b45      	ldr	r3, [pc, #276]	; (8001674 <main+0x1d0>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	4845      	ldr	r0, [pc, #276]	; (8001678 <main+0x1d4>)
 8001564:	f000 f9f6 	bl	8001954 <myprintf>
 8001568:	e002      	b.n	8001570 <main+0xcc>
  }
  else {
  myprintf("SD Card Mounted Successfully!!!\r\n");
 800156a:	4844      	ldr	r0, [pc, #272]	; (800167c <main+0x1d8>)
 800156c:	f000 f9f2 	bl	8001954 <myprintf>
  }
  f_mount(NULL, "0", 0);
 8001570:	2200      	movs	r2, #0
 8001572:	493e      	ldr	r1, [pc, #248]	; (800166c <main+0x1c8>)
 8001574:	2000      	movs	r0, #0
 8001576:	f007 f8d5 	bl	8008724 <f_mount>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of canTelemetryMutex */
  osMutexDef(canTelemetryMutex);
 800157a:	2300      	movs	r3, #0
 800157c:	66fb      	str	r3, [r7, #108]	; 0x6c
  canTelemetryMutexHandle = osMutexCreate(osMutex(canTelemetryMutex));
 800157e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001582:	4618      	mov	r0, r3
 8001584:	f008 ff91 	bl	800a4aa <osMutexCreate>
 8001588:	4603      	mov	r3, r0
 800158a:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <main+0x1dc>)
 800158c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of TelemetryQueue */
  osMessageQDef(TelemetryQueue, 16, uint16_t);
 800158e:	4a3d      	ldr	r2, [pc, #244]	; (8001684 <main+0x1e0>)
 8001590:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001598:	e883 0003 	stmia.w	r3, {r0, r1}
  TelemetryQueueHandle = osMessageCreate(osMessageQ(TelemetryQueue), NULL);
 800159c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f009 f843 	bl	800a62e <osMessageCreate>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a37      	ldr	r2, [pc, #220]	; (8001688 <main+0x1e4>)
 80015ac:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <main+0x1e8>)
 80015b0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80015b4:	461d      	mov	r5, r3
 80015b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f008 ff35 	bl	800a434 <osThreadCreate>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a30      	ldr	r2, [pc, #192]	; (8001690 <main+0x1ec>)
 80015ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of SDCardSaveTask */
  osThreadDef(SDCardSaveTask, StartSDCardSaveTask, osPriorityHigh, 0, 128);
 80015d0:	4b30      	ldr	r3, [pc, #192]	; (8001694 <main+0x1f0>)
 80015d2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015d6:	461d      	mov	r5, r3
 80015d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	6023      	str	r3, [r4, #0]
  SDCardSaveTaskHandle = osThreadCreate(osThread(SDCardSaveTask), NULL);
 80015e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f008 ff24 	bl	800a434 <osThreadCreate>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a2a      	ldr	r2, [pc, #168]	; (8001698 <main+0x1f4>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData1 */
  osThreadDef(GetData1, StartGetData1, osPriorityBelowNormal, 0, 128);
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <main+0x1f8>)
 80015f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015f8:	461d      	mov	r5, r3
 80015fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fe:	682b      	ldr	r3, [r5, #0]
 8001600:	6023      	str	r3, [r4, #0]
  GetData1Handle = osThreadCreate(osThread(GetData1), NULL);
 8001602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f008 ff13 	bl	800a434 <osThreadCreate>
 800160e:	4603      	mov	r3, r0
 8001610:	4a23      	ldr	r2, [pc, #140]	; (80016a0 <main+0x1fc>)
 8001612:	6013      	str	r3, [r2, #0]

  /* definition and creation of GetData2 */
  osThreadDef(GetData2, StartGetData2, osPriorityBelowNormal, 0, 128);
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <main+0x200>)
 8001616:	f107 0414 	add.w	r4, r7, #20
 800161a:	461d      	mov	r5, r3
 800161c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	6023      	str	r3, [r4, #0]
  GetData2Handle = osThreadCreate(osThread(GetData2), NULL);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f008 ff02 	bl	800a434 <osThreadCreate>
 8001630:	4603      	mov	r3, r0
 8001632:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <main+0x204>)
 8001634:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReadCAN */
  osThreadDef(ReadCAN, StartReadCAN, osPriorityNormal, 0, 128);
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <main+0x208>)
 8001638:	463c      	mov	r4, r7
 800163a:	461d      	mov	r5, r3
 800163c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001640:	682b      	ldr	r3, [r5, #0]
 8001642:	6023      	str	r3, [r4, #0]
  ReadCANHandle = osThreadCreate(osThread(ReadCAN), NULL);
 8001644:	463b      	mov	r3, r7
 8001646:	2100      	movs	r1, #0
 8001648:	4618      	mov	r0, r3
 800164a:	f008 fef3 	bl	800a434 <osThreadCreate>
 800164e:	4603      	mov	r3, r0
 8001650:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <main+0x20c>)
 8001652:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001654:	f008 fee7 	bl	800a426 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001658:	e7fe      	b.n	8001658 <main+0x1b4>
 800165a:	bf00      	nop
 800165c:	0800d938 	.word	0x0800d938
 8001660:	2000226c 	.word	0x2000226c
 8001664:	200000b8 	.word	0x200000b8
 8001668:	0800d964 	.word	0x0800d964
 800166c:	0800d97c 	.word	0x0800d97c
 8001670:	200001e4 	.word	0x200001e4
 8001674:	20002244 	.word	0x20002244
 8001678:	0800d980 	.word	0x0800d980
 800167c:	0800d99c 	.word	0x0800d99c
 8001680:	200001e0 	.word	0x200001e0
 8001684:	0800d9c0 	.word	0x0800d9c0
 8001688:	200001dc 	.word	0x200001dc
 800168c:	0800d9c8 	.word	0x0800d9c8
 8001690:	200001c8 	.word	0x200001c8
 8001694:	0800d9dc 	.word	0x0800d9dc
 8001698:	200001cc 	.word	0x200001cc
 800169c:	0800d9f0 	.word	0x0800d9f0
 80016a0:	200001d0 	.word	0x200001d0
 80016a4:	0800da04 	.word	0x0800da04
 80016a8:	200001d4 	.word	0x200001d4
 80016ac:	0800da18 	.word	0x0800da18
 80016b0:	200001d8 	.word	0x200001d8

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0a6      	sub	sp, #152	; 0x98
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016be:	2228      	movs	r2, #40	; 0x28
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00b fbd4 	bl	800ce70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2258      	movs	r2, #88	; 0x58
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f00b fbc6 	bl	800ce70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e4:	2301      	movs	r3, #1
 80016e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ec:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ee:	2301      	movs	r3, #1
 80016f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001700:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fcf0 	bl	80030f8 <HAL_RCC_OscConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800171e:	f000 fbaf 	bl	8001e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001726:	2302      	movs	r3, #2
 8001728:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001738:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800173c:	2102      	movs	r1, #2
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fd2e 	bl	80041a0 <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800174a:	f000 fb99 	bl	8001e80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800174e:	2302      	movs	r3, #2
 8001750:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f002 ffc1 	bl	80046e0 <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001764:	f000 fb8c 	bl	8001e80 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001768:	f002 fe96 	bl	8004498 <HAL_RCC_EnableCSS>
}
 800176c:	bf00      	nop
 800176e:	3798      	adds	r7, #152	; 0x98
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <MX_CAN_Init+0x68>)
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <MX_CAN_Init+0x6c>)
 800177c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <MX_CAN_Init+0x68>)
 8001780:	2208      	movs	r2, #8
 8001782:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MX_CAN_Init+0x68>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <MX_CAN_Init+0x68>)
 800178c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001790:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <MX_CAN_Init+0x68>)
 8001794:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001798:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MX_CAN_Init+0x68>)
 800179c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017a0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_CAN_Init+0x68>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_CAN_Init+0x68>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_CAN_Init+0x68>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_CAN_Init+0x68>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_CAN_Init+0x68>)
 80017bc:	2200      	movs	r2, #0
 80017be:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_CAN_Init+0x68>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_CAN_Init+0x68>)
 80017c8:	f000 fd98 	bl	80022fc <HAL_CAN_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80017d2:	f000 fb55 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200000b8 	.word	0x200000b8
 80017e0:	40006400 	.word	0x40006400

080017e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <MX_SPI1_Init+0x74>)
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <MX_SPI1_Init+0x78>)
 80017ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_SPI1_Init+0x74>)
 80017f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_SPI1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_SPI1_Init+0x74>)
 80017fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001802:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_SPI1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_SPI1_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_SPI1_Init+0x74>)
 8001812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001816:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_SPI1_Init+0x74>)
 800181a:	2210      	movs	r2, #16
 800181c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_SPI1_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_SPI1_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_SPI1_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_SPI1_Init+0x74>)
 8001832:	2207      	movs	r2, #7
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_SPI1_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_SPI1_Init+0x74>)
 800183e:	2208      	movs	r2, #8
 8001840:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_SPI1_Init+0x74>)
 8001844:	f003 f96a 	bl	8004b1c <HAL_SPI_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800184e:	f000 fb17 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200000e0 	.word	0x200000e0
 800185c:	40013000 	.word	0x40013000

08001860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001866:	4a15      	ldr	r2, [pc, #84]	; (80018bc <MX_USART2_UART_Init+0x5c>)
 8001868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 800186c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001886:	220c      	movs	r2, #12
 8001888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_USART2_UART_Init+0x58>)
 80018a4:	f004 f9a0 	bl	8005be8 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018ae:	f000 fae7 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000144 	.word	0x20000144
 80018bc:	40004400 	.word	0x40004400

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <MX_GPIO_Init+0x8c>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4a1c      	ldr	r2, [pc, #112]	; (800194c <MX_GPIO_Init+0x8c>)
 80018dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e0:	6153      	str	r3, [r2, #20]
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_GPIO_Init+0x8c>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_GPIO_Init+0x8c>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	4a16      	ldr	r2, [pc, #88]	; (800194c <MX_GPIO_Init+0x8c>)
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	6153      	str	r3, [r2, #20]
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_GPIO_Init+0x8c>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_GPIO_Init+0x8c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <MX_GPIO_Init+0x8c>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6153      	str	r3, [r2, #20]
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_GPIO_Init+0x8c>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2140      	movs	r1, #64	; 0x40
 8001922:	480b      	ldr	r0, [pc, #44]	; (8001950 <MX_GPIO_Init+0x90>)
 8001924:	f001 fbd0 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SP1_CS_Pin */
  GPIO_InitStruct.Pin = SP1_CS_Pin;
 8001928:	2340      	movs	r3, #64	; 0x40
 800192a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SP1_CS_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4619      	mov	r1, r3
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_GPIO_Init+0x90>)
 8001940:	f001 fa38 	bl	8002db4 <HAL_GPIO_Init>

}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	48000400 	.word	0x48000400

08001954 <myprintf>:
/* USER CODE BEGIN 4 */

int dataShift = 10;
int dataPacket = 1;

void myprintf(const char *fmt, ...) {
 8001954:	b40f      	push	{r0, r1, r2, r3}
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0

	char *buffer = malloc(100);
 800195c:	2064      	movs	r0, #100	; 0x64
 800195e:	f00b fa69 	bl	800ce34 <malloc>
 8001962:	4603      	mov	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]

	va_list args;
	va_start(args, fmt);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, 100, fmt, args);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	2164      	movs	r1, #100	; 0x64
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f00b fc5a 	bl	800d22c <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f7fe fc31 	bl	80001e0 <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	b29a      	uxth	r2, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	68f9      	ldr	r1, [r7, #12]
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <myprintf+0x54>)
 800198e:	f004 f979 	bl	8005c84 <HAL_UART_Transmit>
	free(buffer);
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f00b fa56 	bl	800ce44 <free>
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a2:	b004      	add	sp, #16
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000144 	.word	0x20000144

080019ac <printCANMessage>:
    char* str = malloc(len + 1);
    snprintf(str, len + 1, "%.10d", num);
    return str;
}

void printCANMessage(CAN_RxHeaderTypeDef Header, uint8_t data[]){
 80019ac:	b084      	sub	sp, #16
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	f107 0c20 	add.w	ip, r7, #32
 80019b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char dataStr[20];
	myprintf("canMsg = 0x%lx %li", Header.StdId, Header.DLC);
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c0:	4619      	mov	r1, r3
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <printCANMessage+0x58>)
 80019c4:	f7ff ffc6 	bl	8001954 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00c      	b.n	80019e8 <printCANMessage+0x3c>
		myprintf(dataStr, " %x", data[i]);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	463b      	mov	r3, r7
 80019da:	490b      	ldr	r1, [pc, #44]	; (8001a08 <printCANMessage+0x5c>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ffb9 	bl	8001954 <myprintf>
	for (int i = 0; i<Header.DLC; i++)  {  // print the data
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3301      	adds	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8ee      	bhi.n	80019ce <printCANMessage+0x22>
	}
	myprintf("\r\n");
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <printCANMessage+0x60>)
 80019f2:	f7ff ffaf 	bl	8001954 <myprintf>
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a00:	b004      	add	sp, #16
 8001a02:	4770      	bx	lr
 8001a04:	0800da34 	.word	0x0800da34
 8001a08:	0800da48 	.word	0x0800da48
 8001a0c:	0800da4c 	.word	0x0800da4c

08001a10 <print_buffer>:

void print_buffer(CSV_BUFFER *buffer){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	6078      	str	r0, [r7, #4]
	int i, j;
	myprintf("\n");
 8001a18:	481f      	ldr	r0, [pc, #124]	; (8001a98 <print_buffer+0x88>)
 8001a1a:	f7ff ff9b 	bl	8001954 <myprintf>
	for (i = 0; i < buffer->rows; i++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	e02c      	b.n	8001a7e <print_buffer+0x6e>
		for (j = 0; j < buffer->width[i]; j++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	e01a      	b.n	8001a60 <print_buffer+0x50>
			myprintf("%c%s%c%c", buffer->text_delim, buffer->field[i][j]->text, buffer->text_delim, buffer->field_delim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7b5b      	ldrb	r3, [r3, #13]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7b5b      	ldrb	r3, [r3, #13]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7b1b      	ldrb	r3, [r3, #12]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4603      	mov	r3, r0
 8001a54:	4811      	ldr	r0, [pc, #68]	; (8001a9c <print_buffer+0x8c>)
 8001a56:	f7ff ff7d 	bl	8001954 <myprintf>
		for (j = 0; j < buffer->width[i]; j++) {
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d8db      	bhi.n	8001a2a <print_buffer+0x1a>
		}
		myprintf("\r\n");
 8001a72:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <print_buffer+0x90>)
 8001a74:	f7ff ff6e 	bl	8001954 <myprintf>
	for (i = 0; i < buffer->rows; i++) {
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8cd      	bhi.n	8001a24 <print_buffer+0x14>
	}
	myprintf("\n\n");
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <print_buffer+0x94>)
 8001a8a:	f7ff ff63 	bl	8001954 <myprintf>
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800da50 	.word	0x0800da50
 8001a9c:	0800da54 	.word	0x0800da54
 8001aa0:	0800da4c 	.word	0x0800da4c
 8001aa4:	0800da60 	.word	0x0800da60

08001aa8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	CAN_TxHeaderTypeDef   TxHeader;

	// CAN default data
	TxHeader.StdId = 0x222;
 8001ab0:	f240 2322 	movw	r3, #546	; 0x222
 8001ab4:	61bb      	str	r3, [r7, #24]
	TxHeader.ExtId = 0x00;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.IDE = CAN_ID_STD;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
	TxHeader.DLC = 4;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t freeMailboxs;
	uint8_t data[10] = "bcad";
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <StartDefaultTask+0x64>)
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad6:	6018      	str	r0, [r3, #0]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	7019      	strb	r1, [r3, #0]
 8001adc:	f107 0311 	add.w	r3, r7, #17
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	711a      	strb	r2, [r3, #4]

	/* Infinite loop */
	for(;;)
	{
		myprintf(" -- STARTING thread DefaultTask -- \r\n");
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <StartDefaultTask+0x68>)
 8001ae8:	f7ff ff34 	bl	8001954 <myprintf>
		DefaultProfiler++;
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <StartDefaultTask+0x6c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3301      	adds	r3, #1
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <StartDefaultTask+0x6c>)
 8001af4:	6013      	str	r3, [r2, #0]
//		freeMailboxs = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
//		myprintf("packet sent: %s\r\n", data);
//		myprintf("num free mailboxs: %i\r\n", freeMailboxs);
//		myprintf("text mailbox used: %ld\r\n", TxMailbox);

		myprintf(" -- ENDING thread DefaultTask -- \r\n");
 8001af6:	4808      	ldr	r0, [pc, #32]	; (8001b18 <StartDefaultTask+0x70>)
 8001af8:	f7ff ff2c 	bl	8001954 <myprintf>
		osDelay(DefaultTask_delay);	// Task is put to sleep for 500ms
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <StartDefaultTask+0x74>)
 8001afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f008 fcbd 	bl	800a482 <osDelay>
		myprintf(" -- STARTING thread DefaultTask -- \r\n");
 8001b08:	e7ed      	b.n	8001ae6 <StartDefaultTask+0x3e>
 8001b0a:	bf00      	nop
 8001b0c:	0800dab0 	.word	0x0800dab0
 8001b10:	0800da64 	.word	0x0800da64
 8001b14:	20002294 	.word	0x20002294
 8001b18:	0800da8c 	.word	0x0800da8c
 8001b1c:	20000002 	.word	0x20000002

08001b20 <StartSDCardSaveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDCardSaveTask */
void StartSDCardSaveTask(void const * argument)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDCardSaveTask */
  uint8_t sens_reading = 23;
 8001b28:	2317      	movs	r3, #23
 8001b2a:	77fb      	strb	r3, [r7, #31]
  uint8_t current_row = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	77bb      	strb	r3, [r7, #30]
  const TCHAR *file_path = "0:/csv/test.csv";
 8001b30:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <StartSDCardSaveTask+0x140>)
 8001b32:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 8001b34:	484b      	ldr	r0, [pc, #300]	; (8001c64 <StartSDCardSaveTask+0x144>)
 8001b36:	f7ff ff0d 	bl	8001954 <myprintf>

	myprintf("Mounting SD card\r\n");
 8001b3a:	484b      	ldr	r0, [pc, #300]	; (8001c68 <StartSDCardSaveTask+0x148>)
 8001b3c:	f7ff ff0a 	bl	8001954 <myprintf>
		fres = f_mount(&FatFs, "0", 1);
 8001b40:	2201      	movs	r2, #1
 8001b42:	494a      	ldr	r1, [pc, #296]	; (8001c6c <StartSDCardSaveTask+0x14c>)
 8001b44:	484a      	ldr	r0, [pc, #296]	; (8001c70 <StartSDCardSaveTask+0x150>)
 8001b46:	f006 fded 	bl	8008724 <f_mount>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b49      	ldr	r3, [pc, #292]	; (8001c74 <StartSDCardSaveTask+0x154>)
 8001b50:	701a      	strb	r2, [r3, #0]
		if (fres != FR_OK && current_row < 5){
 8001b52:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <StartSDCardSaveTask+0x154>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <StartSDCardSaveTask+0x4e>
 8001b5a:	7fbb      	ldrb	r3, [r7, #30]
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d806      	bhi.n	8001b6e <StartSDCardSaveTask+0x4e>
			myprintf("f_mount pb: %d\r\n", fres);
 8001b60:	4b44      	ldr	r3, [pc, #272]	; (8001c74 <StartSDCardSaveTask+0x154>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4844      	ldr	r0, [pc, #272]	; (8001c78 <StartSDCardSaveTask+0x158>)
 8001b68:	f7ff fef4 	bl	8001954 <myprintf>
 8001b6c:	e05d      	b.n	8001c2a <StartSDCardSaveTask+0x10a>
		}
		else{
			myprintf("SD Card Mounted!\r\n");
 8001b6e:	4843      	ldr	r0, [pc, #268]	; (8001c7c <StartSDCardSaveTask+0x15c>)
 8001b70:	f7ff fef0 	bl	8001954 <myprintf>
			fres = f_open(&rwfile, file_path, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8001b74:	2203      	movs	r2, #3
 8001b76:	6979      	ldr	r1, [r7, #20]
 8001b78:	4841      	ldr	r0, [pc, #260]	; (8001c80 <StartSDCardSaveTask+0x160>)
 8001b7a:	f006 fe3f 	bl	80087fc <f_open>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <StartSDCardSaveTask+0x154>)
 8001b84:	701a      	strb	r2, [r3, #0]
			if (fres != FR_OK)
 8001b86:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <StartSDCardSaveTask+0x154>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <StartSDCardSaveTask+0x7c>
			{
				myprintf("f_open pb: %d\r\n", fres);
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <StartSDCardSaveTask+0x154>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	483b      	ldr	r0, [pc, #236]	; (8001c84 <StartSDCardSaveTask+0x164>)
 8001b96:	f7ff fedd 	bl	8001954 <myprintf>
 8001b9a:	e046      	b.n	8001c2a <StartSDCardSaveTask+0x10a>
			}
			else{
				myprintf("Creating buffer\r\n");
 8001b9c:	483a      	ldr	r0, [pc, #232]	; (8001c88 <StartSDCardSaveTask+0x168>)
 8001b9e:	f7ff fed9 	bl	8001954 <myprintf>
				CSV_BUFFER *buffer = csv_create_buffer();
 8001ba2:	f7fe fdb5 	bl	8000710 <csv_create_buffer>
 8001ba6:	6138      	str	r0, [r7, #16]

				myprintf("Loading csv\r\n");
 8001ba8:	4838      	ldr	r0, [pc, #224]	; (8001c8c <StartSDCardSaveTask+0x16c>)
 8001baa:	f7ff fed3 	bl	8001954 <myprintf>
				csv_load(buffer, &rwfile);
 8001bae:	4934      	ldr	r1, [pc, #208]	; (8001c80 <StartSDCardSaveTask+0x160>)
 8001bb0:	6938      	ldr	r0, [r7, #16]
 8001bb2:	f7fe fe20 	bl	80007f6 <csv_load>

				print_buffer(buffer);
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f7ff ff2a 	bl	8001a10 <print_buffer>

				// add a row and input values

				myprintf("editing csv\r\n");
 8001bbc:	4834      	ldr	r0, [pc, #208]	; (8001c90 <StartSDCardSaveTask+0x170>)
 8001bbe:	f7ff fec9 	bl	8001954 <myprintf>
				char *string_value = malloc(11);
 8001bc2:	200b      	movs	r0, #11
 8001bc4:	f00b f936 	bl	800ce34 <malloc>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]
				for (int i = 0; i < 3; i++){
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	e011      	b.n	8001bf6 <StartSDCardSaveTask+0xd6>
					snprintf(string_value, 11, "%.10i", sens_reading);
 8001bd2:	7ffb      	ldrb	r3, [r7, #31]
 8001bd4:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <StartSDCardSaveTask+0x174>)
 8001bd6:	210b      	movs	r1, #11
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f00b fab3 	bl	800d144 <sniprintf>
					csv_set_field(buffer, current_row, i, string_value);
 8001bde:	7fb9      	ldrb	r1, [r7, #30]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6938      	ldr	r0, [r7, #16]
 8001be6:	f7fe ff61 	bl	8000aac <csv_set_field>
					sens_reading++;
 8001bea:	7ffb      	ldrb	r3, [r7, #31]
 8001bec:	3301      	adds	r3, #1
 8001bee:	77fb      	strb	r3, [r7, #31]
				for (int i = 0; i < 3; i++){
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	ddea      	ble.n	8001bd2 <StartSDCardSaveTask+0xb2>
				}
				free(string_value);
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f00b f921 	bl	800ce44 <free>
				string_value = NULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
				current_row++;
 8001c06:	7fbb      	ldrb	r3, [r7, #30]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	77bb      	strb	r3, [r7, #30]

				csv_save(&rwfile, buffer);
 8001c0c:	6939      	ldr	r1, [r7, #16]
 8001c0e:	481c      	ldr	r0, [pc, #112]	; (8001c80 <StartSDCardSaveTask+0x160>)
 8001c10:	f7fe fe5f 	bl	80008d2 <csv_save>

				f_mount(NULL, "0", 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	4915      	ldr	r1, [pc, #84]	; (8001c6c <StartSDCardSaveTask+0x14c>)
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f006 fd83 	bl	8008724 <f_mount>

				f_close(&rwfile);
 8001c1e:	4818      	ldr	r0, [pc, #96]	; (8001c80 <StartSDCardSaveTask+0x160>)
 8001c20:	f007 fea9 	bl	8009976 <f_close>
				csv_destroy_buffer(buffer);
 8001c24:	6938      	ldr	r0, [r7, #16]
 8001c26:	f7fe fd92 	bl	800074e <csv_destroy_buffer>
			}
		}

	// restart CAN telemetry threads
	myprintf(" -- RESUMING thread GetData1 -- \r\n");
 8001c2a:	481b      	ldr	r0, [pc, #108]	; (8001c98 <StartSDCardSaveTask+0x178>)
 8001c2c:	f7ff fe92 	bl	8001954 <myprintf>
	osThreadResume(GetData1Handle);
 8001c30:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <StartSDCardSaveTask+0x17c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f008 fd19 	bl	800a66c <osThreadResume>
	myprintf(" -- RESUMING thread GetData2 -- \r\n");
 8001c3a:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <StartSDCardSaveTask+0x180>)
 8001c3c:	f7ff fe8a 	bl	8001954 <myprintf>
	osThreadResume(GetData2Handle);
 8001c40:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <StartSDCardSaveTask+0x184>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f008 fd11 	bl	800a66c <osThreadResume>

	myprintf(" -- ENDING thread SDCardSave -- \r\n");
 8001c4a:	4817      	ldr	r0, [pc, #92]	; (8001ca8 <StartSDCardSaveTask+0x188>)
 8001c4c:	f7ff fe82 	bl	8001954 <myprintf>
	osDelay(SDCardSave_delay);
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <StartSDCardSaveTask+0x18c>)
 8001c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f008 fc13 	bl	800a482 <osDelay>
	myprintf(" -- STARTING thread SDCardSave -- \r\n");
 8001c5c:	e76a      	b.n	8001b34 <StartSDCardSaveTask+0x14>
 8001c5e:	bf00      	nop
 8001c60:	0800dabc 	.word	0x0800dabc
 8001c64:	0800dacc 	.word	0x0800dacc
 8001c68:	0800daf4 	.word	0x0800daf4
 8001c6c:	0800d97c 	.word	0x0800d97c
 8001c70:	200001e4 	.word	0x200001e4
 8001c74:	20002244 	.word	0x20002244
 8001c78:	0800db08 	.word	0x0800db08
 8001c7c:	0800db1c 	.word	0x0800db1c
 8001c80:	20001218 	.word	0x20001218
 8001c84:	0800db30 	.word	0x0800db30
 8001c88:	0800db40 	.word	0x0800db40
 8001c8c:	0800db54 	.word	0x0800db54
 8001c90:	0800db64 	.word	0x0800db64
 8001c94:	0800db74 	.word	0x0800db74
 8001c98:	0800db7c 	.word	0x0800db7c
 8001c9c:	200001d0 	.word	0x200001d0
 8001ca0:	0800dba0 	.word	0x0800dba0
 8001ca4:	200001d4 	.word	0x200001d4
 8001ca8:	0800dbc4 	.word	0x0800dbc4
 8001cac:	20000004 	.word	0x20000004

08001cb0 <StartGetData1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData1 */
void StartGetData1(void const * argument)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData1 */
	CAN_TxHeaderTypeDef   TxHeader1;

	// can transmission 1
	TxHeader1.StdId = 0x201;
 8001cb8:	f240 2301 	movw	r3, #513	; 0x201
 8001cbc:	617b      	str	r3, [r7, #20]
	TxHeader1.ExtId = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
	TxHeader1.RTR = CAN_RTR_DATA;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
	TxHeader1.IDE = CAN_ID_STD;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
	TxHeader1.DLC = 4;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader1.TransmitGlobalTime = DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint8_t TransmissionData1[8] = "dat1";
 8001cd4:	4a34      	ldr	r2, [pc, #208]	; (8001da8 <StartGetData1+0xf8>)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cde:	6018      	str	r0, [r3, #0]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	7019      	strb	r1, [r3, #0]
 8001ce4:	f107 0311 	add.w	r3, r7, #17
 8001ce8:	2200      	movs	r2, #0
 8001cea:	801a      	strh	r2, [r3, #0]
 8001cec:	709a      	strb	r2, [r3, #2]
	uint8_t node1req[4] = {0x77, 0x6f, 0x6f, 0x66};
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <StartGetData1+0xfc>)
 8001cf0:	60bb      	str	r3, [r7, #8]
	uint32_t current_time;
	/* Infinite loop */
  for(;;)
  {
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 8001cf2:	482f      	ldr	r0, [pc, #188]	; (8001db0 <StartGetData1+0x100>)
 8001cf4:	f7ff fe2e 	bl	8001954 <myprintf>
	  if(HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8001cf8:	482e      	ldr	r0, [pc, #184]	; (8001db4 <StartGetData1+0x104>)
 8001cfa:	f000 fde3 	bl	80028c4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <StartGetData1+0x76>
		  if(HAL_CAN_AddTxMessage(&hcan, &TxHeader1, TransmissionData1, &TxMailbox) == HAL_OK){
 8001d04:	f107 020c 	add.w	r2, r7, #12
 8001d08:	f107 0114 	add.w	r1, r7, #20
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <StartGetData1+0x108>)
 8001d0e:	4829      	ldr	r0, [pc, #164]	; (8001db4 <StartGetData1+0x104>)
 8001d10:	f000 fcfd 	bl	800270e <HAL_CAN_AddTxMessage>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <StartGetData1+0x72>
			  myprintf("CAN message sent to data1\r\n");}
 8001d1a:	4828      	ldr	r0, [pc, #160]	; (8001dbc <StartGetData1+0x10c>)
 8001d1c:	f7ff fe1a 	bl	8001954 <myprintf>
 8001d20:	e001      	b.n	8001d26 <StartGetData1+0x76>
		  else{
			  Error_Handler();
 8001d22:	f000 f8ad 	bl	8001e80 <Error_Handler>
		  }
	  }
	  osDelay(10);	// response delay
 8001d26:	200a      	movs	r0, #10
 8001d28:	f008 fbab 	bl	800a482 <osDelay>
	  // continue retransmission until data1 is collected
	  // change this to wait for a flag change from ReadCAN
	  if (RxHeader.StdId == 0x206 &&
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <StartGetData1+0x110>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f240 2206 	movw	r2, #518	; 0x206
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d122      	bne.n	8001d7e <StartGetData1+0xce>
		  RxData[0] == node1req[0] &&
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <StartGetData1+0x114>)
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	7a3b      	ldrb	r3, [r7, #8]
	  if (RxHeader.StdId == 0x206 &&
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d11d      	bne.n	8001d7e <StartGetData1+0xce>
		  RxData[1] == node1req[1] &&
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <StartGetData1+0x114>)
 8001d44:	785a      	ldrb	r2, [r3, #1]
 8001d46:	7a7b      	ldrb	r3, [r7, #9]
		  RxData[0] == node1req[0] &&
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d118      	bne.n	8001d7e <StartGetData1+0xce>
	      RxData[2] == node1req[2] &&
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <StartGetData1+0x114>)
 8001d4e:	789a      	ldrb	r2, [r3, #2]
 8001d50:	7abb      	ldrb	r3, [r7, #10]
		  RxData[1] == node1req[1] &&
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d113      	bne.n	8001d7e <StartGetData1+0xce>
		  RxData[3] == node1req[3]){
 8001d56:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <StartGetData1+0x114>)
 8001d58:	78da      	ldrb	r2, [r3, #3]
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
	      RxData[2] == node1req[2] &&
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d10e      	bne.n	8001d7e <StartGetData1+0xce>
		  // process data1...
		  myprintf("CAN response from node1\r\n");
 8001d60:	4819      	ldr	r0, [pc, #100]	; (8001dc8 <StartGetData1+0x118>)
 8001d62:	f7ff fdf7 	bl	8001954 <myprintf>
		  myprintf("processing...\r\n");
 8001d66:	4819      	ldr	r0, [pc, #100]	; (8001dcc <StartGetData1+0x11c>)
 8001d68:	f7ff fdf4 	bl	8001954 <myprintf>
		  myprintf(" -- SUSPENDING thread GetData1 -- \r\n");
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <StartGetData1+0x120>)
 8001d6e:	f7ff fdf1 	bl	8001954 <myprintf>
		  osThreadSuspend(GetData1Handle);
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <StartGetData1+0x124>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f008 fc6b 	bl	800a652 <osThreadSuspend>
 8001d7c:	e012      	b.n	8001da4 <StartGetData1+0xf4>
	  }
	  else{
		  myprintf("no CAN response, delaying thread GetData1\r\n");
 8001d7e:	4816      	ldr	r0, [pc, #88]	; (8001dd8 <StartGetData1+0x128>)
 8001d80:	f7ff fde8 	bl	8001954 <myprintf>
		  current_time = HAL_GetTick();
 8001d84:	f000 faae 	bl	80022e4 <HAL_GetTick>
 8001d88:	62f8      	str	r0, [r7, #44]	; 0x2c
		  myprintf("current time: %lu\r\n", current_time);
 8001d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d8c:	4813      	ldr	r0, [pc, #76]	; (8001ddc <StartGetData1+0x12c>)
 8001d8e:	f7ff fde1 	bl	8001954 <myprintf>
		  myprintf(" -- ENDING thread GetData1 -- \r\n");
 8001d92:	4813      	ldr	r0, [pc, #76]	; (8001de0 <StartGetData1+0x130>)
 8001d94:	f7ff fdde 	bl	8001954 <myprintf>
		  osDelay(retransmit_delay);
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <StartGetData1+0x134>)
 8001d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f008 fb6f 	bl	800a482 <osDelay>
	  myprintf(" -- STARTING thread GetData1 -- \r\n");
 8001da4:	e7a5      	b.n	8001cf2 <StartGetData1+0x42>
 8001da6:	bf00      	nop
 8001da8:	0800dce0 	.word	0x0800dce0
 8001dac:	666f6f77 	.word	0x666f6f77
 8001db0:	0800dbe8 	.word	0x0800dbe8
 8001db4:	200000b8 	.word	0x200000b8
 8001db8:	20002268 	.word	0x20002268
 8001dbc:	0800dc0c 	.word	0x0800dc0c
 8001dc0:	20002248 	.word	0x20002248
 8001dc4:	20002264 	.word	0x20002264
 8001dc8:	0800dc28 	.word	0x0800dc28
 8001dcc:	0800dc44 	.word	0x0800dc44
 8001dd0:	0800dc54 	.word	0x0800dc54
 8001dd4:	200001d0 	.word	0x200001d0
 8001dd8:	0800dc7c 	.word	0x0800dc7c
 8001ddc:	0800dca8 	.word	0x0800dca8
 8001de0:	0800dcbc 	.word	0x0800dcbc
 8001de4:	20000008 	.word	0x20000008

08001de8 <StartGetData2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetData2 */
void StartGetData2(void const * argument)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetData2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(retransmit_delay);
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <StartGetData2+0x18>)
 8001df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f008 fb43 	bl	800a482 <osDelay>
 8001dfc:	e7f8      	b.n	8001df0 <StartGetData2+0x8>
 8001dfe:	bf00      	nop
 8001e00:	20000008 	.word	0x20000008

08001e04 <StartReadCAN>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadCAN */
void StartReadCAN(void const * argument)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af04      	add	r7, sp, #16
 8001e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadCAN */
	/* Infinite loop */
	for(;;)
	{
		//myprintf(" -- STARTING thread ReadCAN -- \r\n");
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	480f      	ldr	r0, [pc, #60]	; (8001e4c <StartReadCAN+0x48>)
 8001e10:	f000 fe9f 	bl	8002b52 <HAL_CAN_GetRxFifoFillLevel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d011      	beq.n	8001e3e <StartReadCAN+0x3a>
			HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <StartReadCAN+0x4c>)
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <StartReadCAN+0x50>)
 8001e1e:	2100      	movs	r1, #0
 8001e20:	480a      	ldr	r0, [pc, #40]	; (8001e4c <StartReadCAN+0x48>)
 8001e22:	f000 fd84 	bl	800292e <HAL_CAN_GetRxMessage>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	//LED shows a CAN message read
			printCANMessage(RxHeader, RxData);
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <StartReadCAN+0x50>)
 8001e28:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <StartReadCAN+0x4c>)
 8001e2a:	9203      	str	r2, [sp, #12]
 8001e2c:	466c      	mov	r4, sp
 8001e2e:	f103 0210 	add.w	r2, r3, #16
 8001e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e3a:	f7ff fdb7 	bl	80019ac <printCANMessage>
//				myprintf("data request response from node1 of id 0x206\r\n");
//				data1collected = 1;	// can be changed into thread signal/flag
//			}
		}
		//myprintf(" -- ENDING thread ReadCAN -- \r\n");
		osDelay(read_delay);
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <StartReadCAN+0x54>)
 8001e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f008 fb1c 	bl	800a482 <osDelay>
		if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0)){
 8001e4a:	e7df      	b.n	8001e0c <StartReadCAN+0x8>
 8001e4c:	200000b8 	.word	0x200000b8
 8001e50:	20002264 	.word	0x20002264
 8001e54:	20002248 	.word	0x20002248
 8001e58:	20000006 	.word	0x20000006

08001e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e6e:	f000 fa25 	bl	80022bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40001000 	.word	0x40001000

08001e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e84:	b672      	cpsid	i
}
 8001e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  myprintf("HAL error occurred!\r\n"); // print
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <Error_Handler+0x10>)
 8001e8a:	f7ff fd63 	bl	8001954 <myprintf>
 8001e8e:	e7fb      	b.n	8001e88 <Error_Handler+0x8>
 8001e90:	0800dce8 	.word	0x0800dce8

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6193      	str	r3, [r2, #24]
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	210f      	movs	r1, #15
 8001ece:	f06f 0001 	mvn.w	r0, #1
 8001ed2:	f000 ff45 	bl	8002d60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_CAN_MspInit+0x80>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d129      	bne.n	8001f5a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f06:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <HAL_CAN_MspInit+0x84>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_CAN_MspInit+0x84>)
 8001f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f10:	61d3      	str	r3, [r2, #28]
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <HAL_CAN_MspInit+0x84>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_CAN_MspInit+0x84>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_CAN_MspInit+0x84>)
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f28:	6153      	str	r3, [r2, #20]
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	; (8001f68 <HAL_CAN_MspInit+0x84>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001f48:	2309      	movs	r3, #9
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f56:	f000 ff2d 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40006400 	.word	0x40006400
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_SPI_MspInit+0x7c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d128      	bne.n	8001fe0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_SPI_MspInit+0x80>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	4a16      	ldr	r2, [pc, #88]	; (8001fec <HAL_SPI_MspInit+0x80>)
 8001f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f98:	6193      	str	r3, [r2, #24]
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_SPI_MspInit+0x80>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_SPI_MspInit+0x80>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_SPI_MspInit+0x80>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	6153      	str	r3, [r2, #20]
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_SPI_MspInit+0x80>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fbe:	23e0      	movs	r3, #224	; 0xe0
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fce:	2305      	movs	r3, #5
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fdc:	f000 feea 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40013000 	.word	0x40013000
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_UART_MspInit+0x7c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d128      	bne.n	8002064 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_UART_MspInit+0x80>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_UART_MspInit+0x80>)
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	61d3      	str	r3, [r2, #28]
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_UART_MspInit+0x80>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_UART_MspInit+0x80>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4a10      	ldr	r2, [pc, #64]	; (8002070 <HAL_UART_MspInit+0x80>)
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	6153      	str	r3, [r2, #20]
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_UART_MspInit+0x80>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002042:	230c      	movs	r3, #12
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002046:	2302      	movs	r3, #2
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002052:	2307      	movs	r3, #7
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f000 fea8 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40004400 	.word	0x40004400
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_InitTick+0xe0>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	4a32      	ldr	r2, [pc, #200]	; (8002154 <HAL_InitTick+0xe0>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	61d3      	str	r3, [r2, #28]
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_InitTick+0xe0>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800209c:	f107 0210 	add.w	r2, r7, #16
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 facc 	bl	8004644 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020b6:	f002 fa81 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80020ba:	6378      	str	r0, [r7, #52]	; 0x34
 80020bc:	e004      	b.n	80020c8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020be:	f002 fa7d 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80020c2:	4603      	mov	r3, r0
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	4a23      	ldr	r2, [pc, #140]	; (8002158 <HAL_InitTick+0xe4>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	0c9b      	lsrs	r3, r3, #18
 80020d2:	3b01      	subs	r3, #1
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_InitTick+0xe8>)
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <HAL_InitTick+0xec>)
 80020da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	; (800215c <HAL_InitTick+0xe8>)
 80020de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_InitTick+0xe8>)
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_InitTick+0xe8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	; (800215c <HAL_InitTick+0xe8>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_InitTick+0xe8>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020fc:	4817      	ldr	r0, [pc, #92]	; (800215c <HAL_InitTick+0xe8>)
 80020fe:	f003 fa9d 	bl	800563c <HAL_TIM_Base_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002108:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800210c:	2b00      	cmp	r3, #0
 800210e:	d11b      	bne.n	8002148 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002110:	4812      	ldr	r0, [pc, #72]	; (800215c <HAL_InitTick+0xe8>)
 8002112:	f003 faf5 	bl	8005700 <HAL_TIM_Base_Start_IT>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800211c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002124:	2036      	movs	r0, #54	; 0x36
 8002126:	f000 fe37 	bl	8002d98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b0f      	cmp	r3, #15
 800212e:	d808      	bhi.n	8002142 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002130:	2200      	movs	r2, #0
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	2036      	movs	r0, #54	; 0x36
 8002136:	f000 fe13 	bl	8002d60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_InitTick+0xf0>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	e002      	b.n	8002148 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002148:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800214c:	4618      	mov	r0, r3
 800214e:	3738      	adds	r7, #56	; 0x38
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	431bde83 	.word	0x431bde83
 800215c:	20002298 	.word	0x20002298
 8002160:	40001000 	.word	0x40001000
 8002164:	20000010 	.word	0x20000010

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800216c:	f002 fa9c 	bl	80046a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x8>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <MemManage_Handler+0x4>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler+0x4>

0800218a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <TIM6_DAC_IRQHandler+0x10>)
 800219e:	f003 fb1f 	bl	80057e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20002298 	.word	0x20002298

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	; (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f00a fdfe 	bl	800cddc <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20010000 	.word	0x20010000
 800220c:	00000400 	.word	0x00000400
 8002210:	200022e4 	.word	0x200022e4
 8002214:	200044c0 	.word	0x200044c0

08002218 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SystemInit+0x20>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	4a05      	ldr	r2, [pc, #20]	; (8002238 <SystemInit+0x20>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <LoopForever+0x6>)
  ldr r1, =_edata
 8002242:	490e      	ldr	r1, [pc, #56]	; (800227c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002244:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <LoopForever+0xe>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002248:	e002      	b.n	8002250 <LoopCopyDataInit>

0800224a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800224c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224e:	3304      	adds	r3, #4

08002250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002254:	d3f9      	bcc.n	800224a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002258:	4c0b      	ldr	r4, [pc, #44]	; (8002288 <LoopForever+0x16>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800225c:	e001      	b.n	8002262 <LoopFillZerobss>

0800225e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002260:	3204      	adds	r2, #4

08002262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002264:	d3fb      	bcc.n	800225e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002266:	f7ff ffd7 	bl	8002218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226a:	f00a fdbd 	bl	800cde8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800226e:	f7ff f919 	bl	80014a4 <main>

08002272 <LoopForever>:

LoopForever:
    b LoopForever
 8002272:	e7fe      	b.n	8002272 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002274:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002280:	0800dea0 	.word	0x0800dea0
  ldr r2, =_sbss
 8002284:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002288:	200044bc 	.word	0x200044bc

0800228c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC1_2_IRQHandler>
	...

08002290 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <HAL_Init+0x28>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_Init+0x28>)
 800229a:	f043 0310 	orr.w	r3, r3, #16
 800229e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a0:	2003      	movs	r0, #3
 80022a2:	f000 fd52 	bl	8002d4a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a6:	200f      	movs	r0, #15
 80022a8:	f7ff fee4 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022ac:	f7ff fdf2 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40022000 	.word	0x40022000

080022bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000014 	.word	0x20000014
 80022e0:	200022e8 	.word	0x200022e8

080022e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	200022e8 	.word	0x200022e8

080022fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0ed      	b.n	80024ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d102      	bne.n	8002320 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fde2 	bl	8001ee4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002330:	f7ff ffd8 	bl	80022e4 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002336:	e012      	b.n	800235e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002338:	f7ff ffd4 	bl	80022e4 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b0a      	cmp	r3, #10
 8002344:	d90b      	bls.n	800235e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2205      	movs	r2, #5
 8002356:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0c5      	b.n	80024ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0e5      	beq.n	8002338 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0202 	bic.w	r2, r2, #2
 800237a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237c:	f7ff ffb2 	bl	80022e4 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002382:	e012      	b.n	80023aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002384:	f7ff ffae 	bl	80022e4 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d90b      	bls.n	80023aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2205      	movs	r2, #5
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e09f      	b.n	80024ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e5      	bne.n	8002384 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7e1b      	ldrb	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d108      	bne.n	80023d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	e007      	b.n	80023e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7e5b      	ldrb	r3, [r3, #25]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d108      	bne.n	80023fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e007      	b.n	800240c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7e9b      	ldrb	r3, [r3, #26]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d108      	bne.n	8002426 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e007      	b.n	8002436 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0220 	bic.w	r2, r2, #32
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7edb      	ldrb	r3, [r3, #27]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d108      	bne.n	8002450 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0210 	bic.w	r2, r2, #16
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e007      	b.n	8002460 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0210 	orr.w	r2, r2, #16
 800245e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7f1b      	ldrb	r3, [r3, #28]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0208 	orr.w	r2, r2, #8
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	e007      	b.n	800248a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0208 	bic.w	r2, r2, #8
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7f5b      	ldrb	r3, [r3, #29]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0204 	orr.w	r2, r2, #4
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e007      	b.n	80024b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0204 	bic.w	r2, r2, #4
 80024b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	ea42 0103 	orr.w	r1, r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	1e5a      	subs	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b087      	sub	sp, #28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d003      	beq.n	8002518 <HAL_CAN_ConfigFilter+0x26>
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b02      	cmp	r3, #2
 8002514:	f040 80aa 	bne.w	800266c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2201      	movs	r2, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d123      	bne.n	800259a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002574:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3248      	adds	r2, #72	; 0x48
 800257a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800258e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002590:	6979      	ldr	r1, [r7, #20]
 8002592:	3348      	adds	r3, #72	; 0x48
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	440b      	add	r3, r1
 8002598:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d122      	bne.n	80025e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	431a      	orrs	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3248      	adds	r2, #72	; 0x48
 80025c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025de:	6979      	ldr	r1, [r7, #20]
 80025e0:	3348      	adds	r3, #72	; 0x48
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	440b      	add	r3, r1
 80025e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	401a      	ands	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002602:	e007      	b.n	8002614 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800262e:	e007      	b.n	8002640 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	431a      	orrs	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	431a      	orrs	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800265e:	f023 0201 	bic.w	r2, r3, #1
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e006      	b.n	800267a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d12e      	bne.n	80026f8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2202      	movs	r2, #2
 800269e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026b2:	f7ff fe17 	bl	80022e4 <HAL_GetTick>
 80026b6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026b8:	e012      	b.n	80026e0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ba:	f7ff fe13 	bl	80022e4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b0a      	cmp	r3, #10
 80026c6:	d90b      	bls.n	80026e0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2205      	movs	r2, #5
 80026d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e012      	b.n	8002706 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e5      	bne.n	80026ba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e006      	b.n	8002706 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800270e:	b480      	push	{r7}
 8002710:	b089      	sub	sp, #36	; 0x24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002722:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800272c:	7ffb      	ldrb	r3, [r7, #31]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d003      	beq.n	800273a <HAL_CAN_AddTxMessage+0x2c>
 8002732:	7ffb      	ldrb	r3, [r7, #31]
 8002734:	2b02      	cmp	r3, #2
 8002736:	f040 80b8 	bne.w	80028aa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d105      	bne.n	800275a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a0 	beq.w	800289a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	0e1b      	lsrs	r3, r3, #24
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d907      	bls.n	800277a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e09e      	b.n	80028b8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800277a:	2201      	movs	r2, #1
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10d      	bne.n	80027a8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	6809      	ldr	r1, [r1, #0]
 800279a:	431a      	orrs	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3318      	adds	r3, #24
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	440b      	add	r3, r1
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00f      	b.n	80027c8 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b8:	68f9      	ldr	r1, [r7, #12]
 80027ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3318      	adds	r3, #24
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	440b      	add	r3, r1
 80027c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6819      	ldr	r1, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3318      	adds	r3, #24
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	440b      	add	r3, r1
 80027d8:	3304      	adds	r3, #4
 80027da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	7d1b      	ldrb	r3, [r3, #20]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d111      	bne.n	8002808 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3318      	adds	r3, #24
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6811      	ldr	r1, [r2, #0]
 80027f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3318      	adds	r3, #24
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	440b      	add	r3, r1
 8002804:	3304      	adds	r3, #4
 8002806:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3307      	adds	r3, #7
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	061a      	lsls	r2, r3, #24
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3306      	adds	r3, #6
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3305      	adds	r3, #5
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	4313      	orrs	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	3204      	adds	r2, #4
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	4610      	mov	r0, r2
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	6811      	ldr	r1, [r2, #0]
 8002830:	ea43 0200 	orr.w	r2, r3, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	440b      	add	r3, r1
 800283a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800283e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3303      	adds	r3, #3
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	061a      	lsls	r2, r3, #24
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3302      	adds	r3, #2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3301      	adds	r3, #1
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	4313      	orrs	r3, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	4610      	mov	r0, r2
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	6811      	ldr	r1, [r2, #0]
 8002866:	ea43 0200 	orr.w	r2, r3, r0
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	440b      	add	r3, r1
 8002870:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002874:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3318      	adds	r3, #24
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	6811      	ldr	r1, [r2, #0]
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3318      	adds	r3, #24
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	440b      	add	r3, r1
 8002894:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e00e      	b.n	80028b8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e006      	b.n	80028b8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3724      	adds	r7, #36	; 0x24
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028d6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d002      	beq.n	80028e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80028de:	7afb      	ldrb	r3, [r7, #11]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11d      	bne.n	8002920 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3301      	adds	r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3301      	adds	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002920:	68fb      	ldr	r3, [r7, #12]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800292e:	b480      	push	{r7}
 8002930:	b087      	sub	sp, #28
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002942:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d003      	beq.n	8002952 <HAL_CAN_GetRxMessage+0x24>
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b02      	cmp	r3, #2
 800294e:	f040 80f3 	bne.w	8002b38 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10e      	bne.n	8002976 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e0e7      	b.n	8002b46 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0d8      	b.n	8002b46 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	331b      	adds	r3, #27
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	4413      	add	r3, r2
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0204 	and.w	r2, r3, #4
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	331b      	adds	r3, #27
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0d5b      	lsrs	r3, r3, #21
 80029c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	331b      	adds	r3, #27
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	4413      	add	r3, r2
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	08db      	lsrs	r3, r3, #3
 80029dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	331b      	adds	r3, #27
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	4413      	add	r3, r2
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0202 	and.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	331b      	adds	r3, #27
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	4413      	add	r3, r2
 8002a06:	3304      	adds	r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 020f 	and.w	r2, r3, #15
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	331b      	adds	r3, #27
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3304      	adds	r3, #4
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	331b      	adds	r3, #27
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	3304      	adds	r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	0c1b      	lsrs	r3, r3, #16
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0a1a      	lsrs	r2, r3, #8
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	0c1a      	lsrs	r2, r3, #16
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	3302      	adds	r3, #2
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e1a      	lsrs	r2, r3, #24
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	3303      	adds	r3, #3
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	0a1a      	lsrs	r2, r3, #8
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	3305      	adds	r3, #5
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	0c1a      	lsrs	r2, r3, #16
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	3306      	adds	r3, #6
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	011b      	lsls	r3, r3, #4
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	0e1a      	lsrs	r2, r3, #24
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	3307      	adds	r3, #7
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0220 	orr.w	r2, r2, #32
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	e007      	b.n	8002b34 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0220 	orr.w	r2, r2, #32
 8002b32:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e006      	b.n	8002b46 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b66:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b68:	7afb      	ldrb	r3, [r7, #11]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d002      	beq.n	8002b74 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002b6e:	7afb      	ldrb	r3, [r7, #11]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d10f      	bne.n	8002b94 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e005      	b.n	8002b94 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002b94:	68fb      	ldr	r3, [r7, #12]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d002      	beq.n	8002bc0 <HAL_CAN_ActivateNotification+0x1e>
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d109      	bne.n	8002bd4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6959      	ldr	r1, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e006      	b.n	8002be2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
  }
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c22:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db0b      	blt.n	8002c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4907      	ldr	r1, [pc, #28]	; (8002c8c <__NVIC_EnableIRQ+0x38>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2001      	movs	r0, #1
 8002c76:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ff4c 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d72:	f7ff ff61 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002d76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	6978      	ldr	r0, [r7, #20]
 8002d7e:	f7ff ffb1 	bl	8002ce4 <NVIC_EncodePriority>
 8002d82:	4602      	mov	r2, r0
 8002d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff80 	bl	8002c90 <__NVIC_SetPriority>
}
 8002d90:	bf00      	nop
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff54 	bl	8002c54 <__NVIC_EnableIRQ>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc2:	e160      	b.n	8003086 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8152 	beq.w	8003080 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d005      	beq.n	8002df4 <HAL_GPIO_Init+0x40>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d130      	bne.n	8002e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 0201 	and.w	r2, r3, #1
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d017      	beq.n	8002e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d123      	bne.n	8002ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	6939      	ldr	r1, [r7, #16]
 8002ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0203 	and.w	r2, r3, #3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80ac 	beq.w	8003080 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f28:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a5d      	ldr	r2, [pc, #372]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f40:	4a59      	ldr	r2, [pc, #356]	; (80030a8 <HAL_GPIO_Init+0x2f4>)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f6a:	d025      	beq.n	8002fb8 <HAL_GPIO_Init+0x204>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <HAL_GPIO_Init+0x2f8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d01f      	beq.n	8002fb4 <HAL_GPIO_Init+0x200>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a4e      	ldr	r2, [pc, #312]	; (80030b0 <HAL_GPIO_Init+0x2fc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d019      	beq.n	8002fb0 <HAL_GPIO_Init+0x1fc>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a4d      	ldr	r2, [pc, #308]	; (80030b4 <HAL_GPIO_Init+0x300>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d013      	beq.n	8002fac <HAL_GPIO_Init+0x1f8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a4c      	ldr	r2, [pc, #304]	; (80030b8 <HAL_GPIO_Init+0x304>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00d      	beq.n	8002fa8 <HAL_GPIO_Init+0x1f4>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a4b      	ldr	r2, [pc, #300]	; (80030bc <HAL_GPIO_Init+0x308>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d007      	beq.n	8002fa4 <HAL_GPIO_Init+0x1f0>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a4a      	ldr	r2, [pc, #296]	; (80030c0 <HAL_GPIO_Init+0x30c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d101      	bne.n	8002fa0 <HAL_GPIO_Init+0x1ec>
 8002f9c:	2306      	movs	r3, #6
 8002f9e:	e00c      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fa0:	2307      	movs	r3, #7
 8002fa2:	e00a      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fa4:	2305      	movs	r3, #5
 8002fa6:	e008      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	e006      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fac:	2303      	movs	r3, #3
 8002fae:	e004      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e002      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_GPIO_Init+0x206>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	f002 0203 	and.w	r2, r2, #3
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	4093      	lsls	r3, r2
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fca:	4937      	ldr	r1, [pc, #220]	; (80030a8 <HAL_GPIO_Init+0x2f4>)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd8:	4b3a      	ldr	r3, [pc, #232]	; (80030c4 <HAL_GPIO_Init+0x310>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ffc:	4a31      	ldr	r2, [pc, #196]	; (80030c4 <HAL_GPIO_Init+0x310>)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003002:	4b30      	ldr	r3, [pc, #192]	; (80030c4 <HAL_GPIO_Init+0x310>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003026:	4a27      	ldr	r2, [pc, #156]	; (80030c4 <HAL_GPIO_Init+0x310>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_GPIO_Init+0x310>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_GPIO_Init+0x310>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <HAL_GPIO_Init+0x310>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <HAL_GPIO_Init+0x310>)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	f47f ae97 	bne.w	8002dc4 <HAL_GPIO_Init+0x10>
  }
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40010000 	.word	0x40010000
 80030ac:	48000400 	.word	0x48000400
 80030b0:	48000800 	.word	0x48000800
 80030b4:	48000c00 	.word	0x48000c00
 80030b8:	48001000 	.word	0x48001000
 80030bc:	48001400 	.word	0x48001400
 80030c0:	48001800 	.word	0x48001800
 80030c4:	40010400 	.word	0x40010400

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80030fe:	af00      	add	r7, sp, #0
 8003100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003104:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003108:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800310a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800310e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f001 b83a 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003122:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 816f 	beq.w	8003412 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003134:	4bb5      	ldr	r3, [pc, #724]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 030c 	and.w	r3, r3, #12
 800313c:	2b04      	cmp	r3, #4
 800313e:	d00c      	beq.n	800315a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003140:	4bb2      	ldr	r3, [pc, #712]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d15c      	bne.n	8003206 <HAL_RCC_OscConfig+0x10e>
 800314c:	4baf      	ldr	r3, [pc, #700]	; (800340c <HAL_RCC_OscConfig+0x314>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d155      	bne.n	8003206 <HAL_RCC_OscConfig+0x10e>
 800315a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800316e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d102      	bne.n	800318c <HAL_RCC_OscConfig+0x94>
 8003186:	4ba1      	ldr	r3, [pc, #644]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e015      	b.n	80031b8 <HAL_RCC_OscConfig+0xc0>
 800318c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003190:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80031a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80031a8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80031b4:	4b95      	ldr	r3, [pc, #596]	; (800340c <HAL_RCC_OscConfig+0x314>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031bc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80031c0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80031c4:	fa92 f2a2 	rbit	r2, r2
 80031c8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80031cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031d0:	fab2 f282 	clz	r2, r2
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f002 021f 	and.w	r2, r2, #31
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f202 	lsl.w	r2, r1, r2
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8111 	beq.w	8003410 <HAL_RCC_OscConfig+0x318>
 80031ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 8108 	bne.w	8003410 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f000 bfc6 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x12e>
 8003218:	4b7c      	ldr	r3, [pc, #496]	; (800340c <HAL_RCC_OscConfig+0x314>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7b      	ldr	r2, [pc, #492]	; (800340c <HAL_RCC_OscConfig+0x314>)
 800321e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e036      	b.n	8003294 <HAL_RCC_OscConfig+0x19c>
 8003226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x158>
 8003236:	4b75      	ldr	r3, [pc, #468]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a74      	ldr	r2, [pc, #464]	; (800340c <HAL_RCC_OscConfig+0x314>)
 800323c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b72      	ldr	r3, [pc, #456]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a71      	ldr	r2, [pc, #452]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e021      	b.n	8003294 <HAL_RCC_OscConfig+0x19c>
 8003250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003254:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003260:	d10c      	bne.n	800327c <HAL_RCC_OscConfig+0x184>
 8003262:	4b6a      	ldr	r3, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a69      	ldr	r2, [pc, #420]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b67      	ldr	r3, [pc, #412]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a66      	ldr	r2, [pc, #408]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e00b      	b.n	8003294 <HAL_RCC_OscConfig+0x19c>
 800327c:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_OscConfig+0x314>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a62      	ldr	r2, [pc, #392]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	4b60      	ldr	r3, [pc, #384]	; (800340c <HAL_RCC_OscConfig+0x314>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5f      	ldr	r2, [pc, #380]	; (800340c <HAL_RCC_OscConfig+0x314>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003294:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003298:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d059      	beq.n	8003358 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7ff f81e 	bl	80022e4 <HAL_GetTick>
 80032a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ae:	f7ff f819 	bl	80022e4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d902      	bls.n	80032c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	f000 bf67 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>
 80032c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80032d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HAL_RCC_OscConfig+0x1fe>
 80032f0:	4b46      	ldr	r3, [pc, #280]	; (800340c <HAL_RCC_OscConfig+0x314>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x22a>
 80032f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800330a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003312:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_OscConfig+0x314>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003326:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800332a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800332e:	fa92 f2a2 	rbit	r2, r2
 8003332:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003336:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0ab      	beq.n	80032ae <HAL_RCC_OscConfig+0x1b6>
 8003356:	e05c      	b.n	8003412 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe ffc4 	bl	80022e4 <HAL_GetTick>
 800335c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003362:	f7fe ffbf 	bl	80022e4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b64      	cmp	r3, #100	; 0x64
 8003370:	d902      	bls.n	8003378 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	f000 bf0d 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>
 8003378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800337c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800338c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003390:	fab3 f383 	clz	r3, r3
 8003394:	b2db      	uxtb	r3, r3
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d102      	bne.n	80033aa <HAL_RCC_OscConfig+0x2b2>
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_OscConfig+0x314>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	e015      	b.n	80033d6 <HAL_RCC_OscConfig+0x2de>
 80033aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ae:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80033be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_RCC_OscConfig+0x314>)
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033da:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80033de:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80033e2:	fa92 f2a2 	rbit	r2, r2
 80033e6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80033ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033ee:	fab2 f282 	clz	r2, r2
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	f042 0220 	orr.w	r2, r2, #32
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	f002 021f 	and.w	r2, r2, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f202 	lsl.w	r2, r1, r2
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ab      	bne.n	8003362 <HAL_RCC_OscConfig+0x26a>
 800340a:	e002      	b.n	8003412 <HAL_RCC_OscConfig+0x31a>
 800340c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003416:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 817f 	beq.w	8003726 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003428:	4ba7      	ldr	r3, [pc, #668]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00c      	beq.n	800344e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003434:	4ba4      	ldr	r3, [pc, #656]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d173      	bne.n	8003528 <HAL_RCC_OscConfig+0x430>
 8003440:	4ba1      	ldr	r3, [pc, #644]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800344c:	d16c      	bne.n	8003528 <HAL_RCC_OscConfig+0x430>
 800344e:	2302      	movs	r3, #2
 8003450:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003458:	fa93 f3a3 	rbit	r3, r3
 800345c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003460:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d102      	bne.n	800347e <HAL_RCC_OscConfig+0x386>
 8003478:	4b93      	ldr	r3, [pc, #588]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	e013      	b.n	80034a6 <HAL_RCC_OscConfig+0x3ae>
 800347e:	2302      	movs	r3, #2
 8003480:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003490:	2302      	movs	r3, #2
 8003492:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003496:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80034a2:	4b89      	ldr	r3, [pc, #548]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2202      	movs	r2, #2
 80034a8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80034ac:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80034b0:	fa92 f2a2 	rbit	r2, r2
 80034b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80034b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034bc:	fab2 f282 	clz	r2, r2
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	f042 0220 	orr.w	r2, r2, #32
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f002 021f 	and.w	r2, r2, #31
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f202 	lsl.w	r2, r1, r2
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <HAL_RCC_OscConfig+0x3f6>
 80034d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d002      	beq.n	80034ee <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f000 be52 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ee:	4b76      	ldr	r3, [pc, #472]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	21f8      	movs	r1, #248	; 0xf8
 8003504:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800350c:	fa91 f1a1 	rbit	r1, r1
 8003510:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003514:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003518:	fab1 f181 	clz	r1, r1
 800351c:	b2c9      	uxtb	r1, r1
 800351e:	408b      	lsls	r3, r1
 8003520:	4969      	ldr	r1, [pc, #420]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003526:	e0fe      	b.n	8003726 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800352c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8088 	beq.w	800364a <HAL_RCC_OscConfig+0x552>
 800353a:	2301      	movs	r3, #1
 800353c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800354c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800355a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	461a      	mov	r2, r3
 8003562:	2301      	movs	r3, #1
 8003564:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003566:	f7fe febd 	bl	80022e4 <HAL_GetTick>
 800356a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	e00a      	b.n	8003586 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003570:	f7fe feb8 	bl	80022e4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d902      	bls.n	8003586 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	f000 be06 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>
 8003586:	2302      	movs	r3, #2
 8003588:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003590:	fa93 f3a3 	rbit	r3, r3
 8003594:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003598:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_OscConfig+0x4be>
 80035b0:	4b45      	ldr	r3, [pc, #276]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	e013      	b.n	80035de <HAL_RCC_OscConfig+0x4e6>
 80035b6:	2302      	movs	r3, #2
 80035b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035c8:	2302      	movs	r3, #2
 80035ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80035d2:	fa93 f3a3 	rbit	r3, r3
 80035d6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	2202      	movs	r2, #2
 80035e0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80035e4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80035e8:	fa92 f2a2 	rbit	r2, r2
 80035ec:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80035f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f042 0220 	orr.w	r2, r2, #32
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f002 021f 	and.w	r2, r2, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0af      	beq.n	8003570 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003610:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800361c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	21f8      	movs	r1, #248	; 0xf8
 8003626:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800362e:	fa91 f1a1 	rbit	r1, r1
 8003632:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003636:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800363a:	fab1 f181 	clz	r1, r1
 800363e:	b2c9      	uxtb	r1, r1
 8003640:	408b      	lsls	r3, r1
 8003642:	4921      	ldr	r1, [pc, #132]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e06d      	b.n	8003726 <HAL_RCC_OscConfig+0x62e>
 800364a:	2301      	movs	r3, #1
 800364c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003654:	fa93 f3a3 	rbit	r3, r3
 8003658:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800365c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800366a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	461a      	mov	r2, r3
 8003672:	2300      	movs	r3, #0
 8003674:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fe fe35 	bl	80022e4 <HAL_GetTick>
 800367a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe fe30 	bl	80022e4 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d902      	bls.n	8003696 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	f000 bd7e 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>
 8003696:	2302      	movs	r3, #2
 8003698:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80036a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x5d4>
 80036c0:	4b01      	ldr	r3, [pc, #4]	; (80036c8 <HAL_RCC_OscConfig+0x5d0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	e016      	b.n	80036f4 <HAL_RCC_OscConfig+0x5fc>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	2302      	movs	r3, #2
 80036ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036de:	2302      	movs	r3, #2
 80036e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036f0:	4bbf      	ldr	r3, [pc, #764]	; (80039f0 <HAL_RCC_OscConfig+0x8f8>)
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2202      	movs	r2, #2
 80036f6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80036fa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80036fe:	fa92 f2a2 	rbit	r2, r2
 8003702:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003706:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800370a:	fab2 f282 	clz	r2, r2
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	f042 0220 	orr.w	r2, r2, #32
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f002 021f 	and.w	r2, r2, #31
 800371a:	2101      	movs	r1, #1
 800371c:	fa01 f202 	lsl.w	r2, r1, r2
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1ac      	bne.n	8003680 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8113 	beq.w	8003962 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003740:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d07c      	beq.n	8003846 <HAL_RCC_OscConfig+0x74e>
 800374c:	2301      	movs	r3, #1
 800374e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800375e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	4ba2      	ldr	r3, [pc, #648]	; (80039f4 <HAL_RCC_OscConfig+0x8fc>)
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	461a      	mov	r2, r3
 8003772:	2301      	movs	r3, #1
 8003774:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fe fdb5 	bl	80022e4 <HAL_GetTick>
 800377a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003780:	f7fe fdb0 	bl	80022e4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d902      	bls.n	8003796 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	f000 bcfe 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037b6:	2202      	movs	r2, #2
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037da:	2202      	movs	r2, #2
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	4b7e      	ldr	r3, [pc, #504]	; (80039f0 <HAL_RCC_OscConfig+0x8f8>)
 80037f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003802:	2102      	movs	r1, #2
 8003804:	6019      	str	r1, [r3, #0]
 8003806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	fa93 f1a3 	rbit	r1, r3
 8003814:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003818:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800381c:	6019      	str	r1, [r3, #0]
  return result;
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003832:	b2db      	uxtb	r3, r3
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d09d      	beq.n	8003780 <HAL_RCC_OscConfig+0x688>
 8003844:	e08d      	b.n	8003962 <HAL_RCC_OscConfig+0x86a>
 8003846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800384a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003856:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	fa93 f2a3 	rbit	r2, r3
 8003860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003864:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003868:	601a      	str	r2, [r3, #0]
  return result;
 800386a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003872:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	4b5d      	ldr	r3, [pc, #372]	; (80039f4 <HAL_RCC_OscConfig+0x8fc>)
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	461a      	mov	r2, r3
 8003884:	2300      	movs	r3, #0
 8003886:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003888:	f7fe fd2c 	bl	80022e4 <HAL_GetTick>
 800388c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003892:	f7fe fd27 	bl	80022e4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d902      	bls.n	80038a8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	f000 bc75 	b.w	8004192 <HAL_RCC_OscConfig+0x109a>
 80038a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038b0:	2202      	movs	r2, #2
 80038b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	fa93 f2a3 	rbit	r2, r3
 80038c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038d4:	2202      	movs	r2, #2
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f2a3 	rbit	r2, r3
 80038e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038f8:	2202      	movs	r2, #2
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003900:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f2a3 	rbit	r2, r3
 800390a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003912:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_RCC_OscConfig+0x8f8>)
 8003916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003920:	2102      	movs	r1, #2
 8003922:	6019      	str	r1, [r3, #0]
 8003924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003928:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	fa93 f1a3 	rbit	r1, r3
 8003932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003936:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800393a:	6019      	str	r1, [r3, #0]
  return result;
 800393c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003940:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d197      	bne.n	8003892 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003966:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 81a5 	beq.w	8003cc2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397e:	4b1c      	ldr	r3, [pc, #112]	; (80039f0 <HAL_RCC_OscConfig+0x8f8>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d116      	bne.n	80039b8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_OscConfig+0x8f8>)
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <HAL_RCC_OscConfig+0x8f8>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003994:	61d3      	str	r3, [r2, #28]
 8003996:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <HAL_RCC_OscConfig+0x8f8>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800399e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_OscConfig+0x900>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d121      	bne.n	8003a08 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCC_OscConfig+0x900>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <HAL_RCC_OscConfig+0x900>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d0:	f7fe fc88 	bl	80022e4 <HAL_GetTick>
 80039d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d8:	e010      	b.n	80039fc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039da:	f7fe fc83 	bl	80022e4 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d908      	bls.n	80039fc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e3d1      	b.n	8004192 <HAL_RCC_OscConfig+0x109a>
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	10908120 	.word	0x10908120
 80039f8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	4b8d      	ldr	r3, [pc, #564]	; (8003c34 <HAL_RCC_OscConfig+0xb3c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0e8      	beq.n	80039da <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x92e>
 8003a18:	4b87      	ldr	r3, [pc, #540]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4a86      	ldr	r2, [pc, #536]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6213      	str	r3, [r2, #32]
 8003a24:	e035      	b.n	8003a92 <HAL_RCC_OscConfig+0x99a>
 8003a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x958>
 8003a36:	4b80      	ldr	r3, [pc, #512]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a7f      	ldr	r2, [pc, #508]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	6213      	str	r3, [r2, #32]
 8003a42:	4b7d      	ldr	r3, [pc, #500]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a7c      	ldr	r2, [pc, #496]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	6213      	str	r3, [r2, #32]
 8003a4e:	e020      	b.n	8003a92 <HAL_RCC_OscConfig+0x99a>
 8003a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x982>
 8003a60:	4b75      	ldr	r3, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4a74      	ldr	r2, [pc, #464]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a66:	f043 0304 	orr.w	r3, r3, #4
 8003a6a:	6213      	str	r3, [r2, #32]
 8003a6c:	4b72      	ldr	r3, [pc, #456]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4a71      	ldr	r2, [pc, #452]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6213      	str	r3, [r2, #32]
 8003a78:	e00b      	b.n	8003a92 <HAL_RCC_OscConfig+0x99a>
 8003a7a:	4b6f      	ldr	r3, [pc, #444]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4a6e      	ldr	r2, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6213      	str	r3, [r2, #32]
 8003a86:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4a6b      	ldr	r2, [pc, #428]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003a8c:	f023 0304 	bic.w	r3, r3, #4
 8003a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8081 	beq.w	8003ba6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa4:	f7fe fc1e 	bl	80022e4 <HAL_GetTick>
 8003aa8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f7fe fc19 	bl	80022e4 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e365      	b.n	8004192 <HAL_RCC_OscConfig+0x109a>
 8003ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ace:	2202      	movs	r2, #2
 8003ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	fa93 f2a3 	rbit	r2, r3
 8003ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003af2:	2202      	movs	r2, #2
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	fa93 f2a3 	rbit	r2, r3
 8003b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b0c:	601a      	str	r2, [r3, #0]
  return result;
 8003b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b12:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d102      	bne.n	8003b32 <HAL_RCC_OscConfig+0xa3a>
 8003b2c:	4b42      	ldr	r3, [pc, #264]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	e013      	b.n	8003b5a <HAL_RCC_OscConfig+0xa62>
 8003b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b36:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	fa93 f2a3 	rbit	r2, r3
 8003b4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b50:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b5e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b62:	2102      	movs	r1, #2
 8003b64:	6011      	str	r1, [r2, #0]
 8003b66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	fa92 f1a2 	rbit	r1, r2
 8003b74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b78:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b7c:	6011      	str	r1, [r2, #0]
  return result;
 8003b7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b82:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	fab2 f282 	clz	r2, r2
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	f002 021f 	and.w	r2, r2, #31
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d084      	beq.n	8003aae <HAL_RCC_OscConfig+0x9b6>
 8003ba4:	e083      	b.n	8003cae <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fb9d 	bl	80022e4 <HAL_GetTick>
 8003baa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f7fe fb98 	bl	80022e4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e2e4      	b.n	8004192 <HAL_RCC_OscConfig+0x109a>
 8003bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bcc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	fa93 f2a3 	rbit	r2, r3
 8003be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	fa93 f2a3 	rbit	r2, r3
 8003c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c0e:	601a      	str	r2, [r3, #0]
  return result;
 8003c10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c14:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0xb44>
 8003c2e:	4b02      	ldr	r3, [pc, #8]	; (8003c38 <HAL_RCC_OscConfig+0xb40>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	e017      	b.n	8003c64 <HAL_RCC_OscConfig+0xb6c>
 8003c34:	40007000 	.word	0x40007000
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c40:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c44:	2202      	movs	r2, #2
 8003c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fa93 f2a3 	rbit	r2, r3
 8003c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c5a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	4bb3      	ldr	r3, [pc, #716]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c68:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c6c:	2102      	movs	r1, #2
 8003c6e:	6011      	str	r1, [r2, #0]
 8003c70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	fa92 f1a2 	rbit	r1, r2
 8003c7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c82:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c86:	6011      	str	r1, [r2, #0]
  return result;
 8003c88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c8c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	fab2 f282 	clz	r2, r2
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f002 021f 	and.w	r2, r2, #31
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d180      	bne.n	8003bb0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cae:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d105      	bne.n	8003cc2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb6:	4b9e      	ldr	r3, [pc, #632]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	4a9d      	ldr	r2, [pc, #628]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 825e 	beq.w	8004190 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd4:	4b96      	ldr	r3, [pc, #600]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	f000 821f 	beq.w	8004120 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	f040 8170 	bne.w	8003fd4 <HAL_RCC_OscConfig+0xedc>
 8003cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	fa93 f2a3 	rbit	r2, r3
 8003d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d14:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d18:	601a      	str	r2, [r3, #0]
  return result;
 8003d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d22:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	461a      	mov	r2, r3
 8003d36:	2300      	movs	r3, #0
 8003d38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fad3 	bl	80022e4 <HAL_GetTick>
 8003d3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d42:	e009      	b.n	8003d58 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fe face 	bl	80022e4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e21c      	b.n	8004192 <HAL_RCC_OscConfig+0x109a>
 8003d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	fa93 f2a3 	rbit	r2, r3
 8003d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d78:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d7c:	601a      	str	r2, [r3, #0]
  return result;
 8003d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d88:	fab3 f383 	clz	r3, r3
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d102      	bne.n	8003da2 <HAL_RCC_OscConfig+0xcaa>
 8003d9c:	4b64      	ldr	r3, [pc, #400]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	e027      	b.n	8003df2 <HAL_RCC_OscConfig+0xcfa>
 8003da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	fa93 f2a3 	rbit	r2, r3
 8003dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dcc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dda:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	fa93 f2a3 	rbit	r2, r3
 8003de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	4b50      	ldr	r3, [pc, #320]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003df6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dfa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dfe:	6011      	str	r1, [r2, #0]
 8003e00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e04:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	fa92 f1a2 	rbit	r1, r2
 8003e0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e12:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e16:	6011      	str	r1, [r2, #0]
  return result;
 8003e18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e1c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	fab2 f282 	clz	r2, r2
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	f042 0220 	orr.w	r2, r2, #32
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	f002 021f 	and.w	r2, r2, #31
 8003e32:	2101      	movs	r1, #1
 8003e34:	fa01 f202 	lsl.w	r2, r1, r2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d182      	bne.n	8003d44 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e3e:	4b3c      	ldr	r3, [pc, #240]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	f023 020f 	bic.w	r2, r3, #15
 8003e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	4937      	ldr	r1, [pc, #220]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e58:	4b35      	ldr	r3, [pc, #212]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a19      	ldr	r1, [r3, #32]
 8003e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	492d      	ldr	r1, [pc, #180]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e84:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e92:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	fa93 f2a3 	rbit	r2, r3
 8003e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ea4:	601a      	str	r2, [r3, #0]
  return result;
 8003ea6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eaa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eae:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb0:	fab3 f383 	clz	r3, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fe fa0d 	bl	80022e4 <HAL_GetTick>
 8003eca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ece:	e009      	b.n	8003ee4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fe fa08 	bl	80022e4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e156      	b.n	8004192 <HAL_RCC_OscConfig+0x109a>
 8003ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f04:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f08:	601a      	str	r2, [r3, #0]
  return result;
 8003f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_RCC_OscConfig+0xe3c>
 8003f28:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <HAL_RCC_OscConfig+0xe38>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	e02a      	b.n	8003f84 <HAL_RCC_OscConfig+0xe8c>
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f38:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f46:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	fa93 f2a3 	rbit	r2, r3
 8003f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f54:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f5e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f6c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	fa93 f2a3 	rbit	r2, r3
 8003f76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	4b86      	ldr	r3, [pc, #536]	; (800419c <HAL_RCC_OscConfig+0x10a4>)
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f88:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f96:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	fa92 f1a2 	rbit	r1, r2
 8003fa0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fa4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003fa8:	6011      	str	r1, [r2, #0]
  return result;
 8003faa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fae:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	fab2 f282 	clz	r2, r2
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	f042 0220 	orr.w	r2, r2, #32
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	f002 021f 	and.w	r2, r2, #31
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f43f af7f 	beq.w	8003ed0 <HAL_RCC_OscConfig+0xdd8>
 8003fd2:	e0dd      	b.n	8004190 <HAL_RCC_OscConfig+0x1098>
 8003fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	fa93 f2a3 	rbit	r2, r3
 8003ff0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ff4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ff8:	601a      	str	r2, [r3, #0]
  return result;
 8003ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004002:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004004:	fab3 f383 	clz	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800400e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	461a      	mov	r2, r3
 8004016:	2300      	movs	r3, #0
 8004018:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fe f963 	bl	80022e4 <HAL_GetTick>
 800401e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004022:	e009      	b.n	8004038 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004024:	f7fe f95e 	bl	80022e4 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e0ac      	b.n	8004192 <HAL_RCC_OscConfig+0x109a>
 8004038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	fa93 f2a3 	rbit	r2, r3
 8004054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004058:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800405c:	601a      	str	r2, [r3, #0]
  return result;
 800405e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004062:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004066:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	b2db      	uxtb	r3, r3
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f043 0301 	orr.w	r3, r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d102      	bne.n	8004082 <HAL_RCC_OscConfig+0xf8a>
 800407c:	4b47      	ldr	r3, [pc, #284]	; (800419c <HAL_RCC_OscConfig+0x10a4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	e027      	b.n	80040d2 <HAL_RCC_OscConfig+0xfda>
 8004082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004086:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800408a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800408e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004094:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	fa93 f2a3 	rbit	r2, r3
 800409e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ac:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fa93 f2a3 	rbit	r2, r3
 80040c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_RCC_OscConfig+0x10a4>)
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040de:	6011      	str	r1, [r2, #0]
 80040e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040e4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	fa92 f1a2 	rbit	r1, r2
 80040ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040f2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040f6:	6011      	str	r1, [r2, #0]
  return result;
 80040f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040fc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	fab2 f282 	clz	r2, r2
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	f042 0220 	orr.w	r2, r2, #32
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	f002 021f 	and.w	r2, r2, #31
 8004112:	2101      	movs	r1, #1
 8004114:	fa01 f202 	lsl.w	r2, r1, r2
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d182      	bne.n	8004024 <HAL_RCC_OscConfig+0xf2c>
 800411e:	e037      	b.n	8004190 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004124:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e02e      	b.n	8004192 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_RCC_OscConfig+0x10a4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800413c:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_RCC_OscConfig+0x10a4>)
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004144:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004148:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800414c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004150:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	429a      	cmp	r2, r3
 800415a:	d117      	bne.n	800418c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800415c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004160:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004168:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004170:	429a      	cmp	r2, r3
 8004172:	d10b      	bne.n	800418c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004178:	f003 020f 	and.w	r2, r3, #15
 800417c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004180:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40021000 	.word	0x40021000

080041a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b09e      	sub	sp, #120	; 0x78
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e162      	b.n	800447e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b8:	4b90      	ldr	r3, [pc, #576]	; (80043fc <HAL_RCC_ClockConfig+0x25c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d910      	bls.n	80041e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b8d      	ldr	r3, [pc, #564]	; (80043fc <HAL_RCC_ClockConfig+0x25c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f023 0207 	bic.w	r2, r3, #7
 80041ce:	498b      	ldr	r1, [pc, #556]	; (80043fc <HAL_RCC_ClockConfig+0x25c>)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d6:	4b89      	ldr	r3, [pc, #548]	; (80043fc <HAL_RCC_ClockConfig+0x25c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e14a      	b.n	800447e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f4:	4b82      	ldr	r3, [pc, #520]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	497f      	ldr	r1, [pc, #508]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80dc 	beq.w	80043cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d13c      	bne.n	8004296 <HAL_RCC_ClockConfig+0xf6>
 800421c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004220:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800422a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422c:	fab3 f383 	clz	r3, r3
 8004230:	b2db      	uxtb	r3, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	d102      	bne.n	8004246 <HAL_RCC_ClockConfig+0xa6>
 8004240:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	e00f      	b.n	8004266 <HAL_RCC_ClockConfig+0xc6>
 8004246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800424a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	667b      	str	r3, [r7, #100]	; 0x64
 8004254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004258:	663b      	str	r3, [r7, #96]	; 0x60
 800425a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004262:	4b67      	ldr	r3, [pc, #412]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800426a:	65ba      	str	r2, [r7, #88]	; 0x58
 800426c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800426e:	fa92 f2a2 	rbit	r2, r2
 8004272:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004274:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004276:	fab2 f282 	clz	r2, r2
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	f042 0220 	orr.w	r2, r2, #32
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	f002 021f 	and.w	r2, r2, #31
 8004286:	2101      	movs	r1, #1
 8004288:	fa01 f202 	lsl.w	r2, r1, r2
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d17b      	bne.n	800438a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e0f3      	b.n	800447e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d13c      	bne.n	8004318 <HAL_RCC_ClockConfig+0x178>
 800429e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d102      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x128>
 80042c2:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	e00f      	b.n	80042e8 <HAL_RCC_ClockConfig+0x148>
 80042c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	647b      	str	r3, [r7, #68]	; 0x44
 80042d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042da:	643b      	str	r3, [r7, #64]	; 0x40
 80042dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e4:	4b46      	ldr	r3, [pc, #280]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80042ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042f0:	fa92 f2a2 	rbit	r2, r2
 80042f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042f8:	fab2 f282 	clz	r2, r2
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	f042 0220 	orr.w	r2, r2, #32
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	f002 021f 	and.w	r2, r2, #31
 8004308:	2101      	movs	r1, #1
 800430a:	fa01 f202 	lsl.w	r2, r1, r2
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d13a      	bne.n	800438a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0b2      	b.n	800447e <HAL_RCC_ClockConfig+0x2de>
 8004318:	2302      	movs	r3, #2
 800431a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <HAL_RCC_ClockConfig+0x1a0>
 800433a:	4b31      	ldr	r3, [pc, #196]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	e00d      	b.n	800435c <HAL_RCC_ClockConfig+0x1bc>
 8004340:	2302      	movs	r3, #2
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
 800434c:	2302      	movs	r3, #2
 800434e:	623b      	str	r3, [r7, #32]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	2202      	movs	r2, #2
 800435e:	61ba      	str	r2, [r7, #24]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	fa92 f2a2 	rbit	r2, r2
 8004366:	617a      	str	r2, [r7, #20]
  return result;
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	fab2 f282 	clz	r2, r2
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	f042 0220 	orr.w	r2, r2, #32
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	f002 021f 	and.w	r2, r2, #31
 800437a:	2101      	movs	r1, #1
 800437c:	fa01 f202 	lsl.w	r2, r1, r2
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e079      	b.n	800447e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f023 0203 	bic.w	r2, r3, #3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	491a      	ldr	r1, [pc, #104]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800439c:	f7fd ffa2 	bl	80022e4 <HAL_GetTick>
 80043a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a4:	f7fd ff9e 	bl	80022e4 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e061      	b.n	800447e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ba:	4b11      	ldr	r3, [pc, #68]	; (8004400 <HAL_RCC_ClockConfig+0x260>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 020c 	and.w	r2, r3, #12
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d1eb      	bne.n	80043a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_ClockConfig+0x25c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d214      	bcs.n	8004404 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <HAL_RCC_ClockConfig+0x25c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 0207 	bic.w	r2, r3, #7
 80043e2:	4906      	ldr	r1, [pc, #24]	; (80043fc <HAL_RCC_ClockConfig+0x25c>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b04      	ldr	r3, [pc, #16]	; (80043fc <HAL_RCC_ClockConfig+0x25c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d005      	beq.n	8004404 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e040      	b.n	800447e <HAL_RCC_ClockConfig+0x2de>
 80043fc:	40022000 	.word	0x40022000
 8004400:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004410:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_RCC_ClockConfig+0x2e8>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	491a      	ldr	r1, [pc, #104]	; (8004488 <HAL_RCC_ClockConfig+0x2e8>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800442e:	4b16      	ldr	r3, [pc, #88]	; (8004488 <HAL_RCC_ClockConfig+0x2e8>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4912      	ldr	r1, [pc, #72]	; (8004488 <HAL_RCC_ClockConfig+0x2e8>)
 800443e:	4313      	orrs	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004442:	f000 f845 	bl	80044d0 <HAL_RCC_GetSysClockFreq>
 8004446:	4601      	mov	r1, r0
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_RCC_ClockConfig+0x2e8>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004450:	22f0      	movs	r2, #240	; 0xf0
 8004452:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	fa92 f2a2 	rbit	r2, r2
 800445a:	60fa      	str	r2, [r7, #12]
  return result;
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	fab2 f282 	clz	r2, r2
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	40d3      	lsrs	r3, r2
 8004466:	4a09      	ldr	r2, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x2ec>)
 8004468:	5cd3      	ldrb	r3, [r2, r3]
 800446a:	fa21 f303 	lsr.w	r3, r1, r3
 800446e:	4a08      	ldr	r2, [pc, #32]	; (8004490 <HAL_RCC_ClockConfig+0x2f0>)
 8004470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_RCC_ClockConfig+0x2f4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fdfc 	bl	8002074 <HAL_InitTick>
  
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3778      	adds	r7, #120	; 0x78
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	0800dd4c 	.word	0x0800dd4c
 8004490:	2000000c 	.word	0x2000000c
 8004494:	20000010 	.word	0x20000010

08004498 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80044a2:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	603b      	str	r3, [r7, #0]
  return result;
 80044ac:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	461a      	mov	r2, r3
 80044c0:	2301      	movs	r3, #1
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b08b      	sub	sp, #44	; 0x2c
 80044d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80044ea:	4b2a      	ldr	r3, [pc, #168]	; (8004594 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f003 030c 	and.w	r3, r3, #12
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d002      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0x30>
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d003      	beq.n	8004506 <HAL_RCC_GetSysClockFreq+0x36>
 80044fe:	e03f      	b.n	8004580 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004502:	623b      	str	r3, [r7, #32]
      break;
 8004504:	e03f      	b.n	8004586 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800450c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004510:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	fa92 f2a2 	rbit	r2, r2
 8004518:	607a      	str	r2, [r7, #4]
  return result;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	fab2 f282 	clz	r2, r2
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	40d3      	lsrs	r3, r2
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800452a:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <HAL_RCC_GetSysClockFreq+0xc4>)
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	220f      	movs	r2, #15
 8004534:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	fa92 f2a2 	rbit	r2, r2
 800453c:	60fa      	str	r2, [r7, #12]
  return result;
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	fab2 f282 	clz	r2, r2
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	40d3      	lsrs	r3, r2
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800454a:	5cd3      	ldrb	r3, [r2, r3]
 800454c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004558:	4a0f      	ldr	r2, [pc, #60]	; (8004598 <HAL_RCC_GetSysClockFreq+0xc8>)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
 8004568:	e007      	b.n	800457a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800456a:	4a0b      	ldr	r2, [pc, #44]	; (8004598 <HAL_RCC_GetSysClockFreq+0xc8>)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	fb02 f303 	mul.w	r3, r2, r3
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	623b      	str	r3, [r7, #32]
      break;
 800457e:	e002      	b.n	8004586 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004582:	623b      	str	r3, [r7, #32]
      break;
 8004584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004586:	6a3b      	ldr	r3, [r7, #32]
}
 8004588:	4618      	mov	r0, r3
 800458a:	372c      	adds	r7, #44	; 0x2c
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40021000 	.word	0x40021000
 8004598:	007a1200 	.word	0x007a1200
 800459c:	0800dd64 	.word	0x0800dd64
 80045a0:	0800dd74 	.word	0x0800dd74

080045a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	2000000c 	.word	0x2000000c

080045bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045c2:	f7ff ffef 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c6:	4601      	mov	r1, r0
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	fa92 f2a2 	rbit	r2, r2
 80045dc:	603a      	str	r2, [r7, #0]
  return result;
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	fab2 f282 	clz	r2, r2
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	40d3      	lsrs	r3, r2
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80045ea:	5cd3      	ldrb	r3, [r2, r3]
 80045ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000
 80045fc:	0800dd5c 	.word	0x0800dd5c

08004600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004606:	f7ff ffcd 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 800460a:	4601      	mov	r1, r0
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004614:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004618:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	fa92 f2a2 	rbit	r2, r2
 8004620:	603a      	str	r2, [r7, #0]
  return result;
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	fab2 f282 	clz	r2, r2
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	40d3      	lsrs	r3, r2
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_RCC_GetPCLK2Freq+0x40>)
 800462e:	5cd3      	ldrb	r3, [r2, r3]
 8004630:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	0800dd5c 	.word	0x0800dd5c

08004644 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	220f      	movs	r2, #15
 8004652:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0203 	and.w	r2, r3, #3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <HAL_RCC_GetClockConfig+0x5c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCC_GetClockConfig+0x5c>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	08db      	lsrs	r3, r3, #3
 800467e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_RCC_GetClockConfig+0x60>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0207 	and.w	r2, r3, #7
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	601a      	str	r2, [r3, #0]
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40022000 	.word	0x40022000

080046a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b80      	cmp	r3, #128	; 0x80
 80046b6:	d104      	bne.n	80046c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80046b8:	f000 f80a 	bl	80046d0 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80046bc:	4b03      	ldr	r3, [pc, #12]	; (80046cc <HAL_RCC_NMI_IRQHandler+0x24>)
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	701a      	strb	r2, [r3, #0]
  }
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000
 80046cc:	4002100a 	.word	0x4002100a

080046d0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b092      	sub	sp, #72	; 0x48
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80d4 	beq.w	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004704:	4b4e      	ldr	r3, [pc, #312]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10e      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004710:	4b4b      	ldr	r3, [pc, #300]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4a4a      	ldr	r2, [pc, #296]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471a:	61d3      	str	r3, [r2, #28]
 800471c:	4b48      	ldr	r3, [pc, #288]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	4b45      	ldr	r3, [pc, #276]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d118      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800473a:	4b42      	ldr	r3, [pc, #264]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a41      	ldr	r2, [pc, #260]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004744:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004746:	f7fd fdcd 	bl	80022e4 <HAL_GetTick>
 800474a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	e008      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474e:	f7fd fdc9 	bl	80022e4 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b64      	cmp	r3, #100	; 0x64
 800475a:	d901      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e1d6      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004760:	4b38      	ldr	r3, [pc, #224]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800476c:	4b34      	ldr	r3, [pc, #208]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004774:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8084 	beq.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004788:	429a      	cmp	r2, r3
 800478a:	d07c      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800478c:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800479a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047a6:	fab3 f383 	clz	r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b26      	ldr	r3, [pc, #152]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	2301      	movs	r3, #1
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047de:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d04b      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ee:	f7fd fd79 	bl	80022e4 <HAL_GetTick>
 80047f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fd fd75 	bl	80022e4 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e180      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800480c:	2302      	movs	r3, #2
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
 8004818:	2302      	movs	r3, #2
 800481a:	623b      	str	r3, [r7, #32]
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	fa93 f3a3 	rbit	r3, r3
 8004822:	61fb      	str	r3, [r7, #28]
  return result;
 8004824:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	fab3 f383 	clz	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f043 0302 	orr.w	r3, r3, #2
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d108      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800483a:	4b01      	ldr	r3, [pc, #4]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	e00d      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004840:	40021000 	.word	0x40021000
 8004844:	40007000 	.word	0x40007000
 8004848:	10908100 	.word	0x10908100
 800484c:	2302      	movs	r3, #2
 800484e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	fa93 f3a3 	rbit	r3, r3
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	4b9a      	ldr	r3, [pc, #616]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2202      	movs	r2, #2
 800485e:	613a      	str	r2, [r7, #16]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	fa92 f2a2 	rbit	r2, r2
 8004866:	60fa      	str	r2, [r7, #12]
  return result;
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	fab2 f282 	clz	r2, r2
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	f002 021f 	and.w	r2, r2, #31
 800487a:	2101      	movs	r1, #1
 800487c:	fa01 f202 	lsl.w	r2, r1, r2
 8004880:	4013      	ands	r3, r2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0b7      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004886:	4b8f      	ldr	r3, [pc, #572]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	498c      	ldr	r1, [pc, #560]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004898:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800489c:	2b01      	cmp	r3, #1
 800489e:	d105      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a0:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4a87      	ldr	r2, [pc, #540]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048b8:	4b82      	ldr	r3, [pc, #520]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f023 0203 	bic.w	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	497f      	ldr	r1, [pc, #508]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048d6:	4b7b      	ldr	r3, [pc, #492]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	4978      	ldr	r1, [pc, #480]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048f4:	4b73      	ldr	r3, [pc, #460]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	4970      	ldr	r1, [pc, #448]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004912:	4b6c      	ldr	r3, [pc, #432]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	f023 0210 	bic.w	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	4969      	ldr	r1, [pc, #420]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004920:	4313      	orrs	r3, r2
 8004922:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004930:	4b64      	ldr	r3, [pc, #400]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	4961      	ldr	r1, [pc, #388]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800494e:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	f023 0220 	bic.w	r2, r3, #32
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	495a      	ldr	r1, [pc, #360]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495c:	4313      	orrs	r3, r2
 800495e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800496c:	4b55      	ldr	r3, [pc, #340]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	4952      	ldr	r1, [pc, #328]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800497a:	4313      	orrs	r3, r2
 800497c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800498a:	4b4e      	ldr	r3, [pc, #312]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	494b      	ldr	r1, [pc, #300]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004998:	4313      	orrs	r3, r2
 800499a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049a8:	4b46      	ldr	r3, [pc, #280]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	4943      	ldr	r1, [pc, #268]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049c6:	4b3f      	ldr	r3, [pc, #252]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	493c      	ldr	r1, [pc, #240]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049e4:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	4934      	ldr	r1, [pc, #208]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004a02:	4b30      	ldr	r3, [pc, #192]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	492d      	ldr	r1, [pc, #180]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a20:	4b28      	ldr	r3, [pc, #160]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2c:	4925      	ldr	r1, [pc, #148]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a3e:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	491e      	ldr	r1, [pc, #120]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	4916      	ldr	r1, [pc, #88]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	490f      	ldr	r1, [pc, #60]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	4907      	ldr	r1, [pc, #28]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00c      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004ab6:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	e002      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aca:	4913      	ldr	r1, [pc, #76]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004adc:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	490b      	ldr	r1, [pc, #44]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d008      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004afa:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b06:	4904      	ldr	r1, [pc, #16]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3748      	adds	r7, #72	; 0x48
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e09d      	b.n	8004c6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3e:	d009      	beq.n	8004b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
 8004b46:	e005      	b.n	8004b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd f9fc 	bl	8001f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b94:	d902      	bls.n	8004b9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e002      	b.n	8004ba2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004baa:	d007      	beq.n	8004bbc <HAL_SPI_Init+0xa0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb4:	d002      	beq.n	8004bbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	ea42 0103 	orr.w	r1, r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	f003 0204 	and.w	r2, r3, #4
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c38:	ea42 0103 	orr.w	r1, r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b088      	sub	sp, #32
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_SPI_Transmit+0x22>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e158      	b.n	8004f46 <HAL_SPI_Transmit+0x2d4>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c9c:	f7fd fb22 	bl	80022e4 <HAL_GetTick>
 8004ca0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cb6:	e13d      	b.n	8004f34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SPI_Transmit+0x52>
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d102      	bne.n	8004cca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cc8:	e134      	b.n	8004f34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2203      	movs	r2, #3
 8004cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	88fa      	ldrh	r2, [r7, #6]
 8004ce2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d14:	d10f      	bne.n	8004d36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d007      	beq.n	8004d54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d5c:	d94b      	bls.n	8004df6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Transmit+0xfa>
 8004d66:	8afb      	ldrh	r3, [r7, #22]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d13e      	bne.n	8004dea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	881a      	ldrh	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	1c9a      	adds	r2, r3, #2
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d90:	e02b      	b.n	8004dea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d112      	bne.n	8004dc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	881a      	ldrh	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	1c9a      	adds	r2, r3, #2
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc4:	e011      	b.n	8004dea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dc6:	f7fd fa8d 	bl	80022e4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d803      	bhi.n	8004dde <HAL_SPI_Transmit+0x16c>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d102      	bne.n	8004de4 <HAL_SPI_Transmit+0x172>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004de8:	e0a4      	b.n	8004f34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ce      	bne.n	8004d92 <HAL_SPI_Transmit+0x120>
 8004df4:	e07c      	b.n	8004ef0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_SPI_Transmit+0x192>
 8004dfe:	8afb      	ldrh	r3, [r7, #22]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d170      	bne.n	8004ee6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d912      	bls.n	8004e34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	881a      	ldrh	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	1c9a      	adds	r2, r3, #2
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3b02      	subs	r3, #2
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e32:	e058      	b.n	8004ee6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	330c      	adds	r3, #12
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e5a:	e044      	b.n	8004ee6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d12b      	bne.n	8004ec2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d912      	bls.n	8004e9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b02      	subs	r3, #2
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e98:	e025      	b.n	8004ee6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	330c      	adds	r3, #12
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ec0:	e011      	b.n	8004ee6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec2:	f7fd fa0f 	bl	80022e4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d803      	bhi.n	8004eda <HAL_SPI_Transmit+0x268>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d102      	bne.n	8004ee0 <HAL_SPI_Transmit+0x26e>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ee4:	e026      	b.n	8004f34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1b5      	bne.n	8004e5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 fb5b 	bl	80055b0 <SPI_EndRxTxTransaction>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	77fb      	strb	r3, [r7, #31]
 8004f30:	e000      	b.n	8004f34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004f32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f44:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08a      	sub	sp, #40	; 0x28
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
 8004f5a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x26>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e1fb      	b.n	800536c <HAL_SPI_TransmitReceive+0x41e>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f7c:	f7fd f9b2 	bl	80022e4 <HAL_GetTick>
 8004f80:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f88:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f90:	887b      	ldrh	r3, [r7, #2]
 8004f92:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f94:	887b      	ldrh	r3, [r7, #2]
 8004f96:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f98:	7efb      	ldrb	r3, [r7, #27]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d00e      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0x6e>
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa4:	d106      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x66>
 8004fae:	7efb      	ldrb	r3, [r7, #27]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d003      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fba:	e1cd      	b.n	8005358 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_SPI_TransmitReceive+0x80>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <HAL_SPI_TransmitReceive+0x80>
 8004fc8:	887b      	ldrh	r3, [r7, #2]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d103      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fd4:	e1c0      	b.n	8005358 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d003      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	887a      	ldrh	r2, [r7, #2]
 8004ffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	887a      	ldrh	r2, [r7, #2]
 8005002:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	887a      	ldrh	r2, [r7, #2]
 8005010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	887a      	ldrh	r2, [r7, #2]
 8005016:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800502c:	d802      	bhi.n	8005034 <HAL_SPI_TransmitReceive+0xe6>
 800502e:	8a3b      	ldrh	r3, [r7, #16]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d908      	bls.n	8005046 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	e007      	b.n	8005056 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005054:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d007      	beq.n	8005074 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005072:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800507c:	d97c      	bls.n	8005178 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_SPI_TransmitReceive+0x13e>
 8005086:	8a7b      	ldrh	r3, [r7, #18]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d169      	bne.n	8005160 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	881a      	ldrh	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b0:	e056      	b.n	8005160 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d11b      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x1aa>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_SPI_TransmitReceive+0x1aa>
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d113      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b01      	cmp	r3, #1
 8005104:	d11c      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x1f2>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	b292      	uxth	r2, r2
 800511e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	1c9a      	adds	r2, r3, #2
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800513c:	2301      	movs	r3, #1
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005140:	f7fd f8d0 	bl	80022e4 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800514c:	429a      	cmp	r2, r3
 800514e:	d807      	bhi.n	8005160 <HAL_SPI_TransmitReceive+0x212>
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d003      	beq.n	8005160 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800515e:	e0fb      	b.n	8005358 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1a3      	bne.n	80050b2 <HAL_SPI_TransmitReceive+0x164>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d19d      	bne.n	80050b2 <HAL_SPI_TransmitReceive+0x164>
 8005176:	e0df      	b.n	8005338 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x23a>
 8005180:	8a7b      	ldrh	r3, [r7, #18]
 8005182:	2b01      	cmp	r3, #1
 8005184:	f040 80cb 	bne.w	800531e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b01      	cmp	r3, #1
 8005190:	d912      	bls.n	80051b8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	881a      	ldrh	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b02      	subs	r3, #2
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051b6:	e0b2      	b.n	800531e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	7812      	ldrb	r2, [r2, #0]
 80051c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051de:	e09e      	b.n	800531e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d134      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x30a>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d02f      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x30a>
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d12c      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d912      	bls.n	800522e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	881a      	ldrh	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	1c9a      	adds	r2, r3, #2
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b02      	subs	r3, #2
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800522c:	e012      	b.n	8005254 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	330c      	adds	r3, #12
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b01      	cmp	r3, #1
 8005264:	d148      	bne.n	80052f8 <HAL_SPI_TransmitReceive+0x3aa>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d042      	beq.n	80052f8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d923      	bls.n	80052c6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	b292      	uxth	r2, r2
 800528a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	1c9a      	adds	r2, r3, #2
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b02      	subs	r3, #2
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d81f      	bhi.n	80052f4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	e016      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f103 020c 	add.w	r2, r3, #12
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052f4:	2301      	movs	r3, #1
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052f8:	f7fc fff4 	bl	80022e4 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005304:	429a      	cmp	r2, r3
 8005306:	d803      	bhi.n	8005310 <HAL_SPI_TransmitReceive+0x3c2>
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d102      	bne.n	8005316 <HAL_SPI_TransmitReceive+0x3c8>
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800531c:	e01c      	b.n	8005358 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	f47f af5b 	bne.w	80051e0 <HAL_SPI_TransmitReceive+0x292>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	f47f af54 	bne.w	80051e0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f937 	bl	80055b0 <SPI_EndRxTxTransaction>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d006      	beq.n	8005356 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	661a      	str	r2, [r3, #96]	; 0x60
 8005354:	e000      	b.n	8005358 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005356:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800536c:	4618      	mov	r0, r3
 800536e:	3728      	adds	r7, #40	; 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	4613      	mov	r3, r2
 8005382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005384:	f7fc ffae 	bl	80022e4 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	4413      	add	r3, r2
 8005392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005394:	f7fc ffa6 	bl	80022e4 <HAL_GetTick>
 8005398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800539a:	4b39      	ldr	r3, [pc, #228]	; (8005480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	015b      	lsls	r3, r3, #5
 80053a0:	0d1b      	lsrs	r3, r3, #20
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053aa:	e054      	b.n	8005456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b2:	d050      	beq.n	8005456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053b4:	f7fc ff96 	bl	80022e4 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d902      	bls.n	80053ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d13d      	bne.n	8005446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e2:	d111      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ec:	d004      	beq.n	80053f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d107      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d10f      	bne.n	8005432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e017      	b.n	8005476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3b01      	subs	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4013      	ands	r3, r2
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	bf0c      	ite	eq
 8005466:	2301      	moveq	r3, #1
 8005468:	2300      	movne	r3, #0
 800546a:	b2db      	uxtb	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	429a      	cmp	r2, r3
 8005472:	d19b      	bne.n	80053ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	2000000c 	.word	0x2000000c

08005484 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005492:	2300      	movs	r3, #0
 8005494:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005496:	f7fc ff25 	bl	80022e4 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	4413      	add	r3, r2
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80054a6:	f7fc ff1d 	bl	80022e4 <HAL_GetTick>
 80054aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054b4:	4b3d      	ldr	r3, [pc, #244]	; (80055ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	00da      	lsls	r2, r3, #3
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	0d1b      	lsrs	r3, r3, #20
 80054c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054cc:	e060      	b.n	8005590 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054d4:	d107      	bne.n	80054e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d104      	bne.n	80054e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d050      	beq.n	8005590 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054ee:	f7fc fef9 	bl	80022e4 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d902      	bls.n	8005504 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d13d      	bne.n	8005580 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005512:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551c:	d111      	bne.n	8005542 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005526:	d004      	beq.n	8005532 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005530:	d107      	bne.n	8005542 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005540:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554a:	d10f      	bne.n	800556c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800556a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e010      	b.n	80055a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	3b01      	subs	r3, #1
 800558e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4013      	ands	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d196      	bne.n	80054ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3728      	adds	r7, #40	; 0x28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	2000000c 	.word	0x2000000c

080055b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f7ff ff5b 	bl	8005484 <SPI_WaitFifoStateUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d8:	f043 0220 	orr.w	r2, r3, #32
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e027      	b.n	8005634 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2200      	movs	r2, #0
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff fec0 	bl	8005374 <SPI_WaitFlagStateUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e014      	b.n	8005634 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff ff34 	bl	8005484 <SPI_WaitFifoStateUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005626:	f043 0220 	orr.w	r2, r3, #32
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e000      	b.n	8005634 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e049      	b.n	80056e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f841 	bl	80056ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 f9f8 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	d001      	beq.n	8005718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e04f      	b.n	80057b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a23      	ldr	r2, [pc, #140]	; (80057c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01d      	beq.n	8005776 <HAL_TIM_Base_Start_IT+0x76>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005742:	d018      	beq.n	8005776 <HAL_TIM_Base_Start_IT+0x76>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_TIM_Base_Start_IT+0x76>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00e      	beq.n	8005776 <HAL_TIM_Base_Start_IT+0x76>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_TIM_Base_Start_IT+0x76>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1b      	ldr	r2, [pc, #108]	; (80057d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_TIM_Base_Start_IT+0x76>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d115      	bne.n	80057a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	4b17      	ldr	r3, [pc, #92]	; (80057dc <HAL_TIM_Base_Start_IT+0xdc>)
 800577e:	4013      	ands	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b06      	cmp	r3, #6
 8005786:	d015      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0xb4>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578e:	d011      	beq.n	80057b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a0:	e008      	b.n	80057b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e000      	b.n	80057b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40013400 	.word	0x40013400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40015000 	.word	0x40015000
 80057dc:	00010007 	.word	0x00010007

080057e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d122      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d11b      	bne.n	800583c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0202 	mvn.w	r2, #2
 800580c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f905 	bl	8005a32 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8f7 	bl	8005a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f908 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b04      	cmp	r3, #4
 8005848:	d122      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b04      	cmp	r3, #4
 8005856:	d11b      	bne.n	8005890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f06f 0204 	mvn.w	r2, #4
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f8db 	bl	8005a32 <HAL_TIM_IC_CaptureCallback>
 800587c:	e005      	b.n	800588a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8cd 	bl	8005a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8de 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b08      	cmp	r3, #8
 800589c:	d122      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f003 0308 	and.w	r3, r3, #8
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d11b      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f06f 0208 	mvn.w	r2, #8
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f8b1 	bl	8005a32 <HAL_TIM_IC_CaptureCallback>
 80058d0:	e005      	b.n	80058de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8a3 	bl	8005a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8b4 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d122      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d11b      	bne.n	8005938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0210 	mvn.w	r2, #16
 8005908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2208      	movs	r2, #8
 800590e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f887 	bl	8005a32 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f879 	bl	8005a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f88a 	bl	8005a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b01      	cmp	r3, #1
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0201 	mvn.w	r2, #1
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fc fa7c 	bl	8001e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b80      	cmp	r3, #128	; 0x80
 8005970:	d10e      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b80      	cmp	r3, #128	; 0x80
 800597e:	d107      	bne.n	8005990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f918 	bl	8005bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599e:	d10e      	bne.n	80059be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d107      	bne.n	80059be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f90b 	bl	8005bd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d10e      	bne.n	80059ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d107      	bne.n	80059ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f838 	bl	8005a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b20      	cmp	r3, #32
 80059f6:	d10e      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d107      	bne.n	8005a16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f06f 0220 	mvn.w	r2, #32
 8005a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8cb 	bl	8005bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a42      	ldr	r2, [pc, #264]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d013      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3f      	ldr	r2, [pc, #252]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3e      	ldr	r2, [pc, #248]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3d      	ldr	r2, [pc, #244]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_Base_SetConfig+0x40>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a3c      	ldr	r2, [pc, #240]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d108      	bne.n	8005ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a31      	ldr	r2, [pc, #196]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01f      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d01b      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2e      	ldr	r2, [pc, #184]	; (8005b90 <TIM_Base_SetConfig+0x120>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d017      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2d      	ldr	r2, [pc, #180]	; (8005b94 <TIM_Base_SetConfig+0x124>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2c      	ldr	r2, [pc, #176]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2b      	ldr	r2, [pc, #172]	; (8005ba4 <TIM_Base_SetConfig+0x134>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2a      	ldr	r2, [pc, #168]	; (8005ba8 <TIM_Base_SetConfig+0x138>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0x9a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <TIM_Base_SetConfig+0x11c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <TIM_Base_SetConfig+0x100>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a13      	ldr	r2, [pc, #76]	; (8005b98 <TIM_Base_SetConfig+0x128>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00f      	beq.n	8005b70 <TIM_Base_SetConfig+0x100>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00b      	beq.n	8005b70 <TIM_Base_SetConfig+0x100>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <TIM_Base_SetConfig+0x134>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d007      	beq.n	8005b70 <TIM_Base_SetConfig+0x100>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a11      	ldr	r2, [pc, #68]	; (8005ba8 <TIM_Base_SetConfig+0x138>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_Base_SetConfig+0x100>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a0c      	ldr	r2, [pc, #48]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d103      	bne.n	8005b78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	615a      	str	r2, [r3, #20]
}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40013400 	.word	0x40013400
 8005b9c:	40015000 	.word	0x40015000
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	40014400 	.word	0x40014400
 8005ba8:	40014800 	.word	0x40014800

08005bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e040      	b.n	8005c7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fc f9f0 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f8c0 	bl	8005dac <UART_SetConfig>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e022      	b.n	8005c7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fa8a 	bl	8006158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb11 	bl	800629c <UART_CheckIdleState>
 8005c7a:	4603      	mov	r3, r0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	f040 8082 	bne.w	8005da2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_UART_Transmit+0x26>
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e07a      	b.n	8005da4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_UART_Transmit+0x38>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e073      	b.n	8005da4 <HAL_UART_Transmit+0x120>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2221      	movs	r2, #33	; 0x21
 8005cd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cd2:	f7fc fb07 	bl	80022e4 <HAL_GetTick>
 8005cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	88fa      	ldrh	r2, [r7, #6]
 8005cdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf0:	d108      	bne.n	8005d04 <HAL_UART_Transmit+0x80>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e003      	b.n	8005d0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005d14:	e02d      	b.n	8005d72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fb04 	bl	800632e <UART_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e039      	b.n	8005da4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d42:	b292      	uxth	r2, r2
 8005d44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	3302      	adds	r3, #2
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e008      	b.n	8005d60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	b292      	uxth	r2, r2
 8005d58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1cb      	bne.n	8005d16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2140      	movs	r1, #64	; 0x40
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fad0 	bl	800632e <UART_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e005      	b.n	8005da4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b92      	ldr	r3, [pc, #584]	; (8006020 <UART_SetConfig+0x274>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	6979      	ldr	r1, [r7, #20]
 8005de0:	430b      	orrs	r3, r1
 8005de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a80      	ldr	r2, [pc, #512]	; (8006024 <UART_SetConfig+0x278>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d120      	bne.n	8005e6a <UART_SetConfig+0xbe>
 8005e28:	4b7f      	ldr	r3, [pc, #508]	; (8006028 <UART_SetConfig+0x27c>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d817      	bhi.n	8005e64 <UART_SetConfig+0xb8>
 8005e34:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <UART_SetConfig+0x90>)
 8005e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3a:	bf00      	nop
 8005e3c:	08005e4d 	.word	0x08005e4d
 8005e40:	08005e59 	.word	0x08005e59
 8005e44:	08005e5f 	.word	0x08005e5f
 8005e48:	08005e53 	.word	0x08005e53
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e0b5      	b.n	8005fbe <UART_SetConfig+0x212>
 8005e52:	2302      	movs	r3, #2
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e0b2      	b.n	8005fbe <UART_SetConfig+0x212>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e0af      	b.n	8005fbe <UART_SetConfig+0x212>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e0ac      	b.n	8005fbe <UART_SetConfig+0x212>
 8005e64:	2310      	movs	r3, #16
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e0a9      	b.n	8005fbe <UART_SetConfig+0x212>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a6f      	ldr	r2, [pc, #444]	; (800602c <UART_SetConfig+0x280>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d124      	bne.n	8005ebe <UART_SetConfig+0x112>
 8005e74:	4b6c      	ldr	r3, [pc, #432]	; (8006028 <UART_SetConfig+0x27c>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e80:	d011      	beq.n	8005ea6 <UART_SetConfig+0xfa>
 8005e82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e86:	d817      	bhi.n	8005eb8 <UART_SetConfig+0x10c>
 8005e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e8c:	d011      	beq.n	8005eb2 <UART_SetConfig+0x106>
 8005e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e92:	d811      	bhi.n	8005eb8 <UART_SetConfig+0x10c>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <UART_SetConfig+0xf4>
 8005e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9c:	d006      	beq.n	8005eac <UART_SetConfig+0x100>
 8005e9e:	e00b      	b.n	8005eb8 <UART_SetConfig+0x10c>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	77fb      	strb	r3, [r7, #31]
 8005ea4:	e08b      	b.n	8005fbe <UART_SetConfig+0x212>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	77fb      	strb	r3, [r7, #31]
 8005eaa:	e088      	b.n	8005fbe <UART_SetConfig+0x212>
 8005eac:	2304      	movs	r3, #4
 8005eae:	77fb      	strb	r3, [r7, #31]
 8005eb0:	e085      	b.n	8005fbe <UART_SetConfig+0x212>
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	77fb      	strb	r3, [r7, #31]
 8005eb6:	e082      	b.n	8005fbe <UART_SetConfig+0x212>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e07f      	b.n	8005fbe <UART_SetConfig+0x212>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a5b      	ldr	r2, [pc, #364]	; (8006030 <UART_SetConfig+0x284>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d124      	bne.n	8005f12 <UART_SetConfig+0x166>
 8005ec8:	4b57      	ldr	r3, [pc, #348]	; (8006028 <UART_SetConfig+0x27c>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005ed0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ed4:	d011      	beq.n	8005efa <UART_SetConfig+0x14e>
 8005ed6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005eda:	d817      	bhi.n	8005f0c <UART_SetConfig+0x160>
 8005edc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ee0:	d011      	beq.n	8005f06 <UART_SetConfig+0x15a>
 8005ee2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ee6:	d811      	bhi.n	8005f0c <UART_SetConfig+0x160>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <UART_SetConfig+0x148>
 8005eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ef0:	d006      	beq.n	8005f00 <UART_SetConfig+0x154>
 8005ef2:	e00b      	b.n	8005f0c <UART_SetConfig+0x160>
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e061      	b.n	8005fbe <UART_SetConfig+0x212>
 8005efa:	2302      	movs	r3, #2
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e05e      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f00:	2304      	movs	r3, #4
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e05b      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f06:	2308      	movs	r3, #8
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e058      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e055      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a47      	ldr	r2, [pc, #284]	; (8006034 <UART_SetConfig+0x288>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d124      	bne.n	8005f66 <UART_SetConfig+0x1ba>
 8005f1c:	4b42      	ldr	r3, [pc, #264]	; (8006028 <UART_SetConfig+0x27c>)
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f28:	d011      	beq.n	8005f4e <UART_SetConfig+0x1a2>
 8005f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f2e:	d817      	bhi.n	8005f60 <UART_SetConfig+0x1b4>
 8005f30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f34:	d011      	beq.n	8005f5a <UART_SetConfig+0x1ae>
 8005f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f3a:	d811      	bhi.n	8005f60 <UART_SetConfig+0x1b4>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <UART_SetConfig+0x19c>
 8005f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f44:	d006      	beq.n	8005f54 <UART_SetConfig+0x1a8>
 8005f46:	e00b      	b.n	8005f60 <UART_SetConfig+0x1b4>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	77fb      	strb	r3, [r7, #31]
 8005f4c:	e037      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	77fb      	strb	r3, [r7, #31]
 8005f52:	e034      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f54:	2304      	movs	r3, #4
 8005f56:	77fb      	strb	r3, [r7, #31]
 8005f58:	e031      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e02e      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f60:	2310      	movs	r3, #16
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e02b      	b.n	8005fbe <UART_SetConfig+0x212>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a33      	ldr	r2, [pc, #204]	; (8006038 <UART_SetConfig+0x28c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d124      	bne.n	8005fba <UART_SetConfig+0x20e>
 8005f70:	4b2d      	ldr	r3, [pc, #180]	; (8006028 <UART_SetConfig+0x27c>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f7c:	d011      	beq.n	8005fa2 <UART_SetConfig+0x1f6>
 8005f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f82:	d817      	bhi.n	8005fb4 <UART_SetConfig+0x208>
 8005f84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f88:	d011      	beq.n	8005fae <UART_SetConfig+0x202>
 8005f8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f8e:	d811      	bhi.n	8005fb4 <UART_SetConfig+0x208>
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <UART_SetConfig+0x1f0>
 8005f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f98:	d006      	beq.n	8005fa8 <UART_SetConfig+0x1fc>
 8005f9a:	e00b      	b.n	8005fb4 <UART_SetConfig+0x208>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	77fb      	strb	r3, [r7, #31]
 8005fa0:	e00d      	b.n	8005fbe <UART_SetConfig+0x212>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	77fb      	strb	r3, [r7, #31]
 8005fa6:	e00a      	b.n	8005fbe <UART_SetConfig+0x212>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	77fb      	strb	r3, [r7, #31]
 8005fac:	e007      	b.n	8005fbe <UART_SetConfig+0x212>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	77fb      	strb	r3, [r7, #31]
 8005fb2:	e004      	b.n	8005fbe <UART_SetConfig+0x212>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	77fb      	strb	r3, [r7, #31]
 8005fb8:	e001      	b.n	8005fbe <UART_SetConfig+0x212>
 8005fba:	2310      	movs	r3, #16
 8005fbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc6:	d16c      	bne.n	80060a2 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8005fc8:	7ffb      	ldrb	r3, [r7, #31]
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d838      	bhi.n	8006040 <UART_SetConfig+0x294>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <UART_SetConfig+0x228>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005ff9 	.word	0x08005ff9
 8005fd8:	08006001 	.word	0x08006001
 8005fdc:	08006009 	.word	0x08006009
 8005fe0:	08006041 	.word	0x08006041
 8005fe4:	0800600f 	.word	0x0800600f
 8005fe8:	08006041 	.word	0x08006041
 8005fec:	08006041 	.word	0x08006041
 8005ff0:	08006041 	.word	0x08006041
 8005ff4:	08006017 	.word	0x08006017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff8:	f7fe fae0 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 8005ffc:	61b8      	str	r0, [r7, #24]
        break;
 8005ffe:	e024      	b.n	800604a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006000:	f7fe fafe 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 8006004:	61b8      	str	r0, [r7, #24]
        break;
 8006006:	e020      	b.n	800604a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <UART_SetConfig+0x290>)
 800600a:	61bb      	str	r3, [r7, #24]
        break;
 800600c:	e01d      	b.n	800604a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800600e:	f7fe fa5f 	bl	80044d0 <HAL_RCC_GetSysClockFreq>
 8006012:	61b8      	str	r0, [r7, #24]
        break;
 8006014:	e019      	b.n	800604a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601a:	61bb      	str	r3, [r7, #24]
        break;
 800601c:	e015      	b.n	800604a <UART_SetConfig+0x29e>
 800601e:	bf00      	nop
 8006020:	efff69f3 	.word	0xefff69f3
 8006024:	40013800 	.word	0x40013800
 8006028:	40021000 	.word	0x40021000
 800602c:	40004400 	.word	0x40004400
 8006030:	40004800 	.word	0x40004800
 8006034:	40004c00 	.word	0x40004c00
 8006038:	40005000 	.word	0x40005000
 800603c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	77bb      	strb	r3, [r7, #30]
        break;
 8006048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d075      	beq.n	800613c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	005a      	lsls	r2, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	441a      	add	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	b29b      	uxth	r3, r3
 8006066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b0f      	cmp	r3, #15
 800606c:	d916      	bls.n	800609c <UART_SetConfig+0x2f0>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006074:	d212      	bcs.n	800609c <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f023 030f 	bic.w	r3, r3, #15
 800607e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	b29b      	uxth	r3, r3
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	b29a      	uxth	r2, r3
 800608c:	89fb      	ldrh	r3, [r7, #14]
 800608e:	4313      	orrs	r3, r2
 8006090:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	89fa      	ldrh	r2, [r7, #14]
 8006098:	60da      	str	r2, [r3, #12]
 800609a:	e04f      	b.n	800613c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	77bb      	strb	r3, [r7, #30]
 80060a0:	e04c      	b.n	800613c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060a2:	7ffb      	ldrb	r3, [r7, #31]
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d828      	bhi.n	80060fa <UART_SetConfig+0x34e>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x304>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060fb 	.word	0x080060fb
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fe fa72 	bl	80045bc <HAL_RCC_GetPCLK1Freq>
 80060d8:	61b8      	str	r0, [r7, #24]
        break;
 80060da:	e013      	b.n	8006104 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fe fa90 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 80060e0:	61b8      	str	r0, [r7, #24]
        break;
 80060e2:	e00f      	b.n	8006104 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <UART_SetConfig+0x3a8>)
 80060e6:	61bb      	str	r3, [r7, #24]
        break;
 80060e8:	e00c      	b.n	8006104 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fe f9f1 	bl	80044d0 <HAL_RCC_GetSysClockFreq>
 80060ee:	61b8      	str	r0, [r7, #24]
        break;
 80060f0:	e008      	b.n	8006104 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	61bb      	str	r3, [r7, #24]
        break;
 80060f8:	e004      	b.n	8006104 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	77bb      	strb	r3, [r7, #30]
        break;
 8006102:	bf00      	nop
    }

    if (pclk != 0U)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d018      	beq.n	800613c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	085a      	lsrs	r2, r3, #1
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	441a      	add	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	b29b      	uxth	r3, r3
 800611e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b0f      	cmp	r3, #15
 8006124:	d908      	bls.n	8006138 <UART_SetConfig+0x38c>
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612c:	d204      	bcs.n	8006138 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	e001      	b.n	800613c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006148:	7fbb      	ldrb	r3, [r7, #30]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3720      	adds	r7, #32
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	007a1200 	.word	0x007a1200

08006158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00a      	beq.n	8006182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00a      	beq.n	80061a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00a      	beq.n	80061e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01a      	beq.n	800626e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006256:	d10a      	bne.n	800626e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
  }
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062ac:	f7fc f81a 	bl	80022e4 <HAL_GetTick>
 80062b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b08      	cmp	r3, #8
 80062be:	d10e      	bne.n	80062de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f82d 	bl	800632e <UART_WaitOnFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e023      	b.n	8006326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d10e      	bne.n	800630a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f817 	bl	800632e <UART_WaitOnFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e00d      	b.n	8006326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b09c      	sub	sp, #112	; 0x70
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	4613      	mov	r3, r2
 800633c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633e:	e0a5      	b.n	800648c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006346:	f000 80a1 	beq.w	800648c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fb ffcb 	bl	80022e4 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <UART_WaitOnFlagUntilTimeout+0x32>
 800635a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635c:	2b00      	cmp	r3, #0
 800635e:	d13e      	bne.n	80063de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800636e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006374:	667b      	str	r3, [r7, #100]	; 0x64
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800637e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006380:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800638c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e6      	bne.n	8006360 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	f023 0301 	bic.w	r3, r3, #1
 80063a8:	663b      	str	r3, [r7, #96]	; 0x60
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3308      	adds	r3, #8
 80063b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80063b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e5      	bne.n	8006392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2220      	movs	r2, #32
 80063ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e067      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d04f      	beq.n	800648c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fa:	d147      	bne.n	800648c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006404:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800641a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
 8006426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800642a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	613b      	str	r3, [r7, #16]
   return(result);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006458:	623a      	str	r2, [r7, #32]
 800645a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	6a3a      	ldr	r2, [r7, #32]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	61bb      	str	r3, [r7, #24]
   return(result);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e010      	b.n	80064ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69da      	ldr	r2, [r3, #28]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	f43f af4a 	beq.w	8006340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3770      	adds	r7, #112	; 0x70
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80064bc:	4904      	ldr	r1, [pc, #16]	; (80064d0 <MX_FATFS_Init+0x18>)
 80064be:	4805      	ldr	r0, [pc, #20]	; (80064d4 <MX_FATFS_Init+0x1c>)
 80064c0:	f003 ff2e 	bl	800a320 <FATFS_LinkDriver>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	4b03      	ldr	r3, [pc, #12]	; (80064d8 <MX_FATFS_Init+0x20>)
 80064ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80064cc:	bf00      	nop
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	200022f0 	.word	0x200022f0
 80064d4:	20000018 	.word	0x20000018
 80064d8:	200022ec 	.word	0x200022ec

080064dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80064e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fa fcbd 	bl	8000e78 <SD_disk_initialize>
 80064fe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	4603      	mov	r3, r0
 8006510:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	4618      	mov	r0, r3
 8006516:	f7fa fd95 	bl	8001044 <SD_disk_status>
 800651a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006534:	7bf8      	ldrb	r0, [r7, #15]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	f7fa fd98 	bl	8001070 <SD_disk_read>
 8006540:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	4603      	mov	r3, r0
 8006558:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800655a:	7bf8      	ldrb	r0, [r7, #15]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	f7fa fdef 	bl	8001144 <SD_disk_write>
 8006566:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	603a      	str	r2, [r7, #0]
 800657a:	71fb      	strb	r3, [r7, #7]
 800657c:	460b      	mov	r3, r1
 800657e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006580:	79b9      	ldrb	r1, [r7, #6]
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7fa fe60 	bl	800124c <SD_disk_ioctl>
 800658c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	4a08      	ldr	r2, [pc, #32]	; (80065c8 <disk_status+0x30>)
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	79fa      	ldrb	r2, [r7, #7]
 80065b0:	4905      	ldr	r1, [pc, #20]	; (80065c8 <disk_status+0x30>)
 80065b2:	440a      	add	r2, r1
 80065b4:	7a12      	ldrb	r2, [r2, #8]
 80065b6:	4610      	mov	r0, r2
 80065b8:	4798      	blx	r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20002314 	.word	0x20002314

080065cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	4a0d      	ldr	r2, [pc, #52]	; (8006614 <disk_initialize+0x48>)
 80065de:	5cd3      	ldrb	r3, [r2, r3]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d111      	bne.n	8006608 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80065e4:	79fb      	ldrb	r3, [r7, #7]
 80065e6:	4a0b      	ldr	r2, [pc, #44]	; (8006614 <disk_initialize+0x48>)
 80065e8:	2101      	movs	r1, #1
 80065ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	4a09      	ldr	r2, [pc, #36]	; (8006614 <disk_initialize+0x48>)
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	79fa      	ldrb	r2, [r7, #7]
 80065fa:	4906      	ldr	r1, [pc, #24]	; (8006614 <disk_initialize+0x48>)
 80065fc:	440a      	add	r2, r1
 80065fe:	7a12      	ldrb	r2, [r2, #8]
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20002314 	.word	0x20002314

08006618 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006618:	b590      	push	{r4, r7, lr}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	4603      	mov	r3, r0
 8006626:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	4a0a      	ldr	r2, [pc, #40]	; (8006654 <disk_read+0x3c>)
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	689c      	ldr	r4, [r3, #8]
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	4a07      	ldr	r2, [pc, #28]	; (8006654 <disk_read+0x3c>)
 8006638:	4413      	add	r3, r2
 800663a:	7a18      	ldrb	r0, [r3, #8]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	47a0      	blx	r4
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]
  return res;
 8006648:	7dfb      	ldrb	r3, [r7, #23]
}
 800664a:	4618      	mov	r0, r3
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	bf00      	nop
 8006654:	20002314 	.word	0x20002314

08006658 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	4603      	mov	r3, r0
 8006666:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006668:	7bfb      	ldrb	r3, [r7, #15]
 800666a:	4a0a      	ldr	r2, [pc, #40]	; (8006694 <disk_write+0x3c>)
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68dc      	ldr	r4, [r3, #12]
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	4a07      	ldr	r2, [pc, #28]	; (8006694 <disk_write+0x3c>)
 8006678:	4413      	add	r3, r2
 800667a:	7a18      	ldrb	r0, [r3, #8]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	47a0      	blx	r4
 8006684:	4603      	mov	r3, r0
 8006686:	75fb      	strb	r3, [r7, #23]
  return res;
 8006688:	7dfb      	ldrb	r3, [r7, #23]
}
 800668a:	4618      	mov	r0, r3
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	bd90      	pop	{r4, r7, pc}
 8006692:	bf00      	nop
 8006694:	20002314 	.word	0x20002314

08006698 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	603a      	str	r2, [r7, #0]
 80066a2:	71fb      	strb	r3, [r7, #7]
 80066a4:	460b      	mov	r3, r1
 80066a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <disk_ioctl+0x38>)
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	79fa      	ldrb	r2, [r7, #7]
 80066b6:	4906      	ldr	r1, [pc, #24]	; (80066d0 <disk_ioctl+0x38>)
 80066b8:	440a      	add	r2, r1
 80066ba:	7a10      	ldrb	r0, [r2, #8]
 80066bc:	79b9      	ldrb	r1, [r7, #6]
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	4798      	blx	r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20002314 	.word	0x20002314

080066d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80066e8:	e007      	b.n	80066fa <mem_cpy+0x26>
		*d++ = *s++;
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	1c53      	adds	r3, r2, #1
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	1c59      	adds	r1, r3, #1
 80066f4:	6179      	str	r1, [r7, #20]
 80066f6:	7812      	ldrb	r2, [r2, #0]
 80066f8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	1e5a      	subs	r2, r3, #1
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1f2      	bne.n	80066ea <mem_cpy+0x16>
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	371c      	adds	r7, #28
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006722:	e005      	b.n	8006730 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	617a      	str	r2, [r7, #20]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f4      	bne.n	8006724 <mem_set+0x12>
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006748:	b480      	push	{r7}
 800674a:	b089      	sub	sp, #36	; 0x24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006760:	bf00      	nop
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	1e5a      	subs	r2, r3, #1
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00d      	beq.n	8006788 <mem_cmp+0x40>
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	61fa      	str	r2, [r7, #28]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	4619      	mov	r1, r3
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	61ba      	str	r2, [r7, #24]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	1acb      	subs	r3, r1, r3
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0ec      	beq.n	8006762 <mem_cmp+0x1a>
	return r;
 8006788:	697b      	ldr	r3, [r7, #20]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3724      	adds	r7, #36	; 0x24
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006796:	b480      	push	{r7}
 8006798:	b083      	sub	sp, #12
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80067a0:	e002      	b.n	80067a8 <chk_chr+0x12>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3301      	adds	r3, #1
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <chk_chr+0x26>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d1f2      	bne.n	80067a2 <chk_chr+0xc>
	return *str;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	781b      	ldrb	r3, [r3, #0]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	4618      	mov	r0, r3
 80067de:	f003 fdd8 	bl	800a392 <ff_req_grant>
 80067e2:	4603      	mov	r3, r0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d012      	beq.n	8006824 <unlock_fs+0x38>
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	2b0c      	cmp	r3, #12
 8006802:	d00f      	beq.n	8006824 <unlock_fs+0x38>
		res != FR_NOT_ENABLED &&
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	2b0b      	cmp	r3, #11
 8006808:	d00c      	beq.n	8006824 <unlock_fs+0x38>
		res != FR_INVALID_DRIVE &&
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	2b09      	cmp	r3, #9
 800680e:	d009      	beq.n	8006824 <unlock_fs+0x38>
		res != FR_INVALID_OBJECT &&
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	2b0f      	cmp	r3, #15
 8006814:	d006      	beq.n	8006824 <unlock_fs+0x38>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	4618      	mov	r0, r3
 8006820:	f003 fdcc 	bl	800a3bc <ff_rel_grant>
	}
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006836:	2300      	movs	r3, #0
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	e03b      	b.n	80068b8 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8006840:	4931      	ldr	r1, [pc, #196]	; (8006908 <chk_lock+0xdc>)
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4613      	mov	r3, r2
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d02c      	beq.n	80068ae <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006854:	492c      	ldr	r1, [pc, #176]	; (8006908 <chk_lock+0xdc>)
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4613      	mov	r3, r2
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d120      	bne.n	80068b2 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8006870:	4925      	ldr	r1, [pc, #148]	; (8006908 <chk_lock+0xdc>)
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4613      	mov	r3, r2
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	3304      	adds	r3, #4
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006888:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800688a:	429a      	cmp	r2, r3
 800688c:	d111      	bne.n	80068b2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800688e:	491e      	ldr	r1, [pc, #120]	; (8006908 <chk_lock+0xdc>)
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3308      	adds	r3, #8
 800689e:	881a      	ldrh	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a6:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d102      	bne.n	80068b2 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 80068ac:	e007      	b.n	80068be <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 80068ae:	2301      	movs	r3, #1
 80068b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3301      	adds	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d9c0      	bls.n	8006840 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d109      	bne.n	80068d8 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <chk_lock+0xa4>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d101      	bne.n	80068d4 <chk_lock+0xa8>
 80068d0:	2300      	movs	r3, #0
 80068d2:	e013      	b.n	80068fc <chk_lock+0xd0>
 80068d4:	2312      	movs	r3, #18
 80068d6:	e011      	b.n	80068fc <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10b      	bne.n	80068f6 <chk_lock+0xca>
 80068de:	490a      	ldr	r1, [pc, #40]	; (8006908 <chk_lock+0xdc>)
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4613      	mov	r3, r2
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	440b      	add	r3, r1
 80068ec:	330a      	adds	r3, #10
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f4:	d101      	bne.n	80068fa <chk_lock+0xce>
 80068f6:	2310      	movs	r3, #16
 80068f8:	e000      	b.n	80068fc <chk_lock+0xd0>
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	200022fc 	.word	0x200022fc

0800690c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	e002      	b.n	800691e <enq_lock+0x12>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3301      	adds	r3, #1
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d809      	bhi.n	8006938 <enq_lock+0x2c>
 8006924:	490a      	ldr	r1, [pc, #40]	; (8006950 <enq_lock+0x44>)
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	4613      	mov	r3, r2
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	440b      	add	r3, r1
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1ef      	bne.n	8006918 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b02      	cmp	r3, #2
 800693c:	bf14      	ite	ne
 800693e:	2301      	movne	r3, #1
 8006940:	2300      	moveq	r3, #0
 8006942:	b2db      	uxtb	r3, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	200022fc 	.word	0x200022fc

08006954 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e02e      	b.n	80069c2 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8006964:	4959      	ldr	r1, [pc, #356]	; (8006acc <inc_lock+0x178>)
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4613      	mov	r3, r2
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	440b      	add	r3, r1
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d11d      	bne.n	80069bc <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006980:	4952      	ldr	r1, [pc, #328]	; (8006acc <inc_lock+0x178>)
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4613      	mov	r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	3304      	adds	r3, #4
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006998:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800699a:	429a      	cmp	r2, r3
 800699c:	d10e      	bne.n	80069bc <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800699e:	494b      	ldr	r1, [pc, #300]	; (8006acc <inc_lock+0x178>)
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4613      	mov	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	3308      	adds	r3, #8
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b6:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d006      	beq.n	80069ca <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d9cd      	bls.n	8006964 <inc_lock+0x10>
 80069c8:	e000      	b.n	80069cc <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 80069ca:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d148      	bne.n	8006a64 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e002      	b.n	80069de <inc_lock+0x8a>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3301      	adds	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d809      	bhi.n	80069f8 <inc_lock+0xa4>
 80069e4:	4939      	ldr	r1, [pc, #228]	; (8006acc <inc_lock+0x178>)
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4613      	mov	r3, r2
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1ef      	bne.n	80069d8 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d101      	bne.n	8006a02 <inc_lock+0xae>
 80069fe:	2300      	movs	r3, #0
 8006a00:	e05d      	b.n	8006abe <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a08:	6819      	ldr	r1, [r3, #0]
 8006a0a:	4830      	ldr	r0, [pc, #192]	; (8006acc <inc_lock+0x178>)
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4403      	add	r3, r0
 8006a18:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a20:	6899      	ldr	r1, [r3, #8]
 8006a22:	482a      	ldr	r0, [pc, #168]	; (8006acc <inc_lock+0x178>)
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4613      	mov	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4403      	add	r3, r0
 8006a30:	3304      	adds	r3, #4
 8006a32:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3a:	88d8      	ldrh	r0, [r3, #6]
 8006a3c:	4923      	ldr	r1, [pc, #140]	; (8006acc <inc_lock+0x178>)
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4613      	mov	r3, r2
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006a50:	491e      	ldr	r1, [pc, #120]	; (8006acc <inc_lock+0x178>)
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4613      	mov	r3, r2
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	330a      	adds	r3, #10
 8006a60:	2200      	movs	r2, #0
 8006a62:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <inc_lock+0x130>
 8006a6a:	4918      	ldr	r1, [pc, #96]	; (8006acc <inc_lock+0x178>)
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	330a      	adds	r3, #10
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <inc_lock+0x130>
 8006a80:	2300      	movs	r3, #0
 8006a82:	e01c      	b.n	8006abe <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <inc_lock+0x14e>
 8006a8a:	4910      	ldr	r1, [pc, #64]	; (8006acc <inc_lock+0x178>)
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	330a      	adds	r3, #10
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	b299      	uxth	r1, r3
 8006aa0:	e001      	b.n	8006aa6 <inc_lock+0x152>
 8006aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aa6:	4809      	ldr	r0, [pc, #36]	; (8006acc <inc_lock+0x178>)
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4403      	add	r3, r0
 8006ab4:	330a      	adds	r3, #10
 8006ab6:	460a      	mov	r2, r1
 8006ab8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	200022fc 	.word	0x200022fc

08006ad0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	607b      	str	r3, [r7, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d82e      	bhi.n	8006b42 <dec_lock+0x72>
		n = Files[i].ctr;
 8006ae4:	491b      	ldr	r1, [pc, #108]	; (8006b54 <dec_lock+0x84>)
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	330a      	adds	r3, #10
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006af8:	89fb      	ldrh	r3, [r7, #14]
 8006afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afe:	d101      	bne.n	8006b04 <dec_lock+0x34>
 8006b00:	2300      	movs	r3, #0
 8006b02:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <dec_lock+0x40>
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006b10:	4910      	ldr	r1, [pc, #64]	; (8006b54 <dec_lock+0x84>)
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	4613      	mov	r3, r2
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	440b      	add	r3, r1
 8006b1e:	330a      	adds	r3, #10
 8006b20:	89fa      	ldrh	r2, [r7, #14]
 8006b22:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006b24:	89fb      	ldrh	r3, [r7, #14]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d108      	bne.n	8006b3c <dec_lock+0x6c>
 8006b2a:	490a      	ldr	r1, [pc, #40]	; (8006b54 <dec_lock+0x84>)
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	737b      	strb	r3, [r7, #13]
 8006b40:	e001      	b.n	8006b46 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006b42:	2302      	movs	r3, #2
 8006b44:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006b46:	7b7b      	ldrb	r3, [r7, #13]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	200022fc 	.word	0x200022fc

08006b58 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e016      	b.n	8006b94 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006b66:	4910      	ldr	r1, [pc, #64]	; (8006ba8 <clear_lock+0x50>)
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d108      	bne.n	8006b8e <clear_lock+0x36>
 8006b7c:	490a      	ldr	r1, [pc, #40]	; (8006ba8 <clear_lock+0x50>)
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4613      	mov	r3, r2
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d9e5      	bls.n	8006b66 <clear_lock+0xe>
	}
}
 8006b9a:	bf00      	nop
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	200022fc 	.word	0x200022fc

08006bac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bbe:	791b      	ldrb	r3, [r3, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d040      	beq.n	8006c46 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd4:	7858      	ldrb	r0, [r3, #1]
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	2301      	movs	r3, #1
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	f7ff fd3c 	bl	8006658 <disk_write>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <sync_window+0x40>
			res = FR_DISK_ERR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]
 8006bea:	e02c      	b.n	8006c46 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d21b      	bcs.n	8006c46 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c14:	78db      	ldrb	r3, [r3, #3]
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	e012      	b.n	8006c40 <sync_window+0x94>
					wsect += fs->fsize;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4413      	add	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2e:	7858      	ldrb	r0, [r3, #1]
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	2301      	movs	r3, #1
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	f7ff fd0f 	bl	8006658 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d8e9      	bhi.n	8006c1a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d01e      	beq.n	8006caa <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff ff9d 	bl	8006bac <sync_window>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d116      	bne.n	8006caa <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c82:	7858      	ldrb	r0, [r3, #1]
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	2301      	movs	r3, #1
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	f7ff fcc5 	bl	8006618 <disk_read>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006c94:	f04f 33ff 	mov.w	r3, #4294967295
 8006c98:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}
	return res;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff ff75 	bl	8006bac <sync_window>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 80ad 	bne.w	8006e28 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	f040 8098 	bne.w	8006e0c <sync_fs+0x158>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce2:	795b      	ldrb	r3, [r3, #5]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	f040 8091 	bne.w	8006e0c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf2:	895b      	ldrh	r3, [r3, #10]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	f7ff fd0b 	bl	8006712 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2255      	movs	r2, #85	; 0x55
 8006d00:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	22aa      	movs	r2, #170	; 0xaa
 8006d08:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2252      	movs	r2, #82	; 0x52
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2252      	movs	r2, #82	; 0x52
 8006d16:	705a      	strb	r2, [r3, #1]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2261      	movs	r2, #97	; 0x61
 8006d1c:	709a      	strb	r2, [r3, #2]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2241      	movs	r2, #65	; 0x41
 8006d22:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2272      	movs	r2, #114	; 0x72
 8006d28:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2272      	movs	r2, #114	; 0x72
 8006d30:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2241      	movs	r2, #65	; 0x41
 8006d38:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2261      	movs	r2, #97	; 0x61
 8006d40:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	0a1b      	lsrs	r3, r3, #8
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	0c1b      	lsrs	r3, r3, #16
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	0c1b      	lsrs	r3, r3, #16
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	0e1b      	lsrs	r3, r3, #24
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	3301      	adds	r3, #1
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006de8:	6313      	str	r3, [r2, #48]	; 0x30
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df0:	7858      	ldrb	r0, [r3, #1]
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f7ff fc2b 	bl	8006658 <disk_write>
			fs->fsi_flag = 0;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e08:	2200      	movs	r2, #0
 8006e0a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2200      	movs	r2, #0
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff fc3d 	bl	8006698 <disk_ioctl>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	3b02      	subs	r3, #2
 8006e40:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	3b02      	subs	r3, #2
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d301      	bcc.n	8006e56 <clust2sect+0x24>
 8006e52:	2300      	movs	r3, #0
 8006e54:	e00c      	b.n	8006e70 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5c:	789b      	ldrb	r3, [r3, #2]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	fb03 f202 	mul.w	r2, r3, r2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6e:	4413      	add	r3, r2
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d906      	bls.n	8006e9a <get_fat+0x1e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <get_fat+0x24>
		val = 1;	/* Internal error */
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e0e4      	b.n	800706a <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	f000 8098 	beq.w	8006fe4 <get_fat+0x168>
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	f300 80ce 	bgt.w	8007056 <get_fat+0x1da>
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d002      	beq.n	8006ec4 <get_fat+0x48>
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d05f      	beq.n	8006f82 <get_fat+0x106>
 8006ec2:	e0c8      	b.n	8007056 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee0:	895b      	ldrh	r3, [r3, #10]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eea:	4413      	add	r3, r2
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff feae 	bl	8006c50 <move_window>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f040 80b0 	bne.w	800705c <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	60fa      	str	r2, [r7, #12]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f08:	8952      	ldrh	r2, [r2, #10]
 8006f0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f0e:	fb01 f202 	mul.w	r2, r1, r2
 8006f12:	1a9b      	subs	r3, r3, r2
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	5cd3      	ldrb	r3, [r2, r3]
 8006f18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f28:	895b      	ldrh	r3, [r3, #10]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f32:	4413      	add	r3, r2
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff fe8a 	bl	8006c50 <move_window>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f040 808e 	bne.w	8007060 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4a:	895b      	ldrh	r3, [r3, #10]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f54:	fb01 f202 	mul.w	r2, r1, r2
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	5cd3      	ldrb	r3, [r2, r3]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	461a      	mov	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <get_fat+0xfc>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	e002      	b.n	8006f7e <get_fat+0x102>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f7e:	617b      	str	r3, [r7, #20]
			break;
 8006f80:	e073      	b.n	800706a <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f90:	895b      	ldrh	r3, [r3, #10]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	4619      	mov	r1, r3
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f9e:	4413      	add	r3, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f7ff fe54 	bl	8006c50 <move_window>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d15a      	bne.n	8007064 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fb8:	8952      	ldrh	r2, [r2, #10]
 8006fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fbe:	fb01 f202 	mul.w	r2, r1, r2
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	b21a      	sxth	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	b21b      	sxth	r3, r3
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	b21b      	sxth	r3, r3
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	617b      	str	r3, [r7, #20]
			break;
 8006fe2:	e042      	b.n	800706a <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff2:	895b      	ldrh	r3, [r3, #10]
 8006ff4:	089b      	lsrs	r3, r3, #2
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8007000:	4413      	add	r3, r2
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fe23 	bl	8006c50 <move_window>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d12b      	bne.n	8007068 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800701a:	8952      	ldrh	r2, [r2, #10]
 800701c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007020:	fb01 f202 	mul.w	r2, r1, r2
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	4413      	add	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3303      	adds	r3, #3
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	061a      	lsls	r2, r3, #24
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	3302      	adds	r3, #2
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	4313      	orrs	r3, r2
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	3201      	adds	r2, #1
 8007042:	7812      	ldrb	r2, [r2, #0]
 8007044:	0212      	lsls	r2, r2, #8
 8007046:	4313      	orrs	r3, r2
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	4313      	orrs	r3, r2
 800704e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007052:	617b      	str	r3, [r7, #20]
			break;
 8007054:	e009      	b.n	800706a <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8007056:	2301      	movs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	e006      	b.n	800706a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800705c:	bf00      	nop
 800705e:	e004      	b.n	800706a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007060:	bf00      	nop
 8007062:	e002      	b.n	800706a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007064:	bf00      	nop
 8007066:	e000      	b.n	800706a <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007068:	bf00      	nop
		}
	}

	return val;
 800706a:	697b      	ldr	r3, [r7, #20]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3718      	adds	r7, #24
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d906      	bls.n	8007094 <put_fat+0x20>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	429a      	cmp	r2, r3
 8007092:	d302      	bcc.n	800709a <put_fat+0x26>
		res = FR_INT_ERR;
 8007094:	2302      	movs	r3, #2
 8007096:	77fb      	strb	r3, [r7, #31]
 8007098:	e13a      	b.n	8007310 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	f000 80d0 	beq.w	8007248 <put_fat+0x1d4>
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	f300 8127 	bgt.w	80072fc <put_fat+0x288>
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d003      	beq.n	80070ba <put_fat+0x46>
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	f000 808f 	beq.w	80071d6 <put_fat+0x162>
 80070b8:	e120      	b.n	80072fc <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	085b      	lsrs	r3, r3, #1
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4413      	add	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d6:	895b      	ldrh	r3, [r3, #10]
 80070d8:	4619      	mov	r1, r3
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80070e0:	4413      	add	r3, r2
 80070e2:	4619      	mov	r1, r3
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff fdb3 	bl	8006c50 <move_window>
 80070ea:	4603      	mov	r3, r0
 80070ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070ee:	7ffb      	ldrb	r3, [r7, #31]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f040 8106 	bne.w	8007302 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	617a      	str	r2, [r7, #20]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007102:	8952      	ldrh	r2, [r2, #10]
 8007104:	fbb3 f1f2 	udiv	r1, r3, r2
 8007108:	fb01 f202 	mul.w	r2, r1, r2
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00d      	beq.n	800713a <put_fat+0xc6>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	b25b      	sxtb	r3, r3
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	b25a      	sxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	b25b      	sxtb	r3, r3
 8007132:	4313      	orrs	r3, r2
 8007134:	b25b      	sxtb	r3, r3
 8007136:	b2db      	uxtb	r3, r3
 8007138:	e001      	b.n	800713e <put_fat+0xca>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007148:	2201      	movs	r2, #1
 800714a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800715a:	895b      	ldrh	r3, [r3, #10]
 800715c:	4619      	mov	r1, r3
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	fbb3 f3f1 	udiv	r3, r3, r1
 8007164:	4413      	add	r3, r2
 8007166:	4619      	mov	r1, r3
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7ff fd71 	bl	8006c50 <move_window>
 800716e:	4603      	mov	r3, r0
 8007170:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007172:	7ffb      	ldrb	r3, [r7, #31]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f040 80c6 	bne.w	8007306 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007180:	895b      	ldrh	r3, [r3, #10]
 8007182:	461a      	mov	r2, r3
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	fbb3 f1f2 	udiv	r1, r3, r2
 800718a:	fb01 f202 	mul.w	r2, r1, r2
 800718e:	1a9b      	subs	r3, r3, r2
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <put_fat+0x134>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	091b      	lsrs	r3, r3, #4
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e00e      	b.n	80071c6 <put_fat+0x152>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b25b      	sxtb	r3, r3
 80071ae:	f023 030f 	bic.w	r3, r3, #15
 80071b2:	b25a      	sxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	0a1b      	lsrs	r3, r3, #8
 80071b8:	b25b      	sxtb	r3, r3
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	b25b      	sxtb	r3, r3
 80071c0:	4313      	orrs	r3, r2
 80071c2:	b25b      	sxtb	r3, r3
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d0:	2201      	movs	r2, #1
 80071d2:	711a      	strb	r2, [r3, #4]
			break;
 80071d4:	e09c      	b.n	8007310 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e4:	895b      	ldrh	r3, [r3, #10]
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4619      	mov	r1, r3
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80071f2:	4413      	add	r3, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff fd2a 	bl	8006c50 <move_window>
 80071fc:	4603      	mov	r3, r0
 80071fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007200:	7ffb      	ldrb	r3, [r7, #31]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f040 8081 	bne.w	800730a <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007212:	8952      	ldrh	r2, [r2, #10]
 8007214:	fbb3 f1f2 	udiv	r1, r3, r2
 8007218:	fb01 f202 	mul.w	r2, r1, r2
 800721c:	1a9b      	subs	r3, r3, r2
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4413      	add	r3, r2
 8007222:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	b2da      	uxtb	r2, r3
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	b29b      	uxth	r3, r3
 8007230:	0a1b      	lsrs	r3, r3, #8
 8007232:	b29a      	uxth	r2, r3
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	3301      	adds	r3, #1
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007242:	2201      	movs	r2, #1
 8007244:	711a      	strb	r2, [r3, #4]
			break;
 8007246:	e063      	b.n	8007310 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007256:	895b      	ldrh	r3, [r3, #10]
 8007258:	089b      	lsrs	r3, r3, #2
 800725a:	b29b      	uxth	r3, r3
 800725c:	4619      	mov	r1, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	fbb3 f3f1 	udiv	r3, r3, r1
 8007264:	4413      	add	r3, r2
 8007266:	4619      	mov	r1, r3
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f7ff fcf1 	bl	8006c50 <move_window>
 800726e:	4603      	mov	r3, r0
 8007270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007272:	7ffb      	ldrb	r3, [r7, #31]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d14a      	bne.n	800730e <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007282:	8952      	ldrh	r2, [r2, #10]
 8007284:	fbb3 f1f2 	udiv	r1, r3, r2
 8007288:	fb01 f202 	mul.w	r2, r1, r2
 800728c:	1a9b      	subs	r3, r3, r2
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	3303      	adds	r3, #3
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	061a      	lsls	r2, r3, #24
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	3302      	adds	r3, #2
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	4313      	orrs	r3, r2
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	3201      	adds	r2, #1
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	0212      	lsls	r2, r2, #8
 80072ae:	4313      	orrs	r3, r2
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	7812      	ldrb	r2, [r2, #0]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	4313      	orrs	r3, r2
 80072be:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	0a1b      	lsrs	r3, r3, #8
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	3301      	adds	r3, #1
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	0c1a      	lsrs	r2, r3, #16
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	3302      	adds	r3, #2
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	0e1a      	lsrs	r2, r3, #24
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	3303      	adds	r3, #3
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f6:	2201      	movs	r2, #1
 80072f8:	711a      	strb	r2, [r3, #4]
			break;
 80072fa:	e009      	b.n	8007310 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80072fc:	2302      	movs	r3, #2
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e006      	b.n	8007310 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007302:	bf00      	nop
 8007304:	e004      	b.n	8007310 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007306:	bf00      	nop
 8007308:	e002      	b.n	8007310 <put_fat+0x29c>
			if (res != FR_OK) break;
 800730a:	bf00      	nop
 800730c:	e000      	b.n	8007310 <put_fat+0x29c>
			if (res != FR_OK) break;
 800730e:	bf00      	nop
		}
	}

	return res;
 8007310:	7ffb      	ldrb	r3, [r7, #31]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d906      	bls.n	8007338 <remove_chain+0x1e>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d302      	bcc.n	800733e <remove_chain+0x24>
		res = FR_INT_ERR;
 8007338:	2302      	movs	r3, #2
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	e049      	b.n	80073d2 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007342:	e03b      	b.n	80073bc <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff fd98 	bl	8006e7c <get_fat>
 800734c:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d03b      	beq.n	80073cc <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d102      	bne.n	8007360 <remove_chain+0x46>
 800735a:	2302      	movs	r3, #2
 800735c:	73fb      	strb	r3, [r7, #15]
 800735e:	e038      	b.n	80073d2 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007366:	d102      	bne.n	800736e <remove_chain+0x54>
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
 800736c:	e031      	b.n	80073d2 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800736e:	2200      	movs	r2, #0
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fe7e 	bl	8007074 <put_fat>
 8007378:	4603      	mov	r3, r0
 800737a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d126      	bne.n	80073d0 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738e:	d013      	beq.n	80073b8 <remove_chain+0x9e>
				fs->free_clust++;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	3301      	adds	r3, #1
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073a0:	6153      	str	r3, [r2, #20]
				fs->fsi_flag |= 1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a8:	795b      	ldrb	r3, [r3, #5]
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b6:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d3bc      	bcc.n	8007344 <remove_chain+0x2a>
 80073ca:	e002      	b.n	80073d2 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80073cc:	bf00      	nop
 80073ce:	e000      	b.n	80073d2 <remove_chain+0xb8>
			if (res != FR_OK) break;
 80073d0:	bf00      	nop
		}
	}

	return res;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d111      	bne.n	8007410 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d006      	beq.n	800740a <create_chain+0x2e>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	429a      	cmp	r2, r3
 8007408:	d31d      	bcc.n	8007446 <create_chain+0x6a>
 800740a:	2301      	movs	r3, #1
 800740c:	613b      	str	r3, [r7, #16]
 800740e:	e01a      	b.n	8007446 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fd32 	bl	8006e7c <get_fat>
 8007418:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d801      	bhi.n	8007424 <create_chain+0x48>
 8007420:	2301      	movs	r3, #1
 8007422:	e07f      	b.n	8007524 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d101      	bne.n	8007430 <create_chain+0x54>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	e079      	b.n	8007524 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	d201      	bcs.n	8007442 <create_chain+0x66>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	e070      	b.n	8007524 <create_chain+0x148>
		scl = clst;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	3301      	adds	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	429a      	cmp	r2, r3
 800745c:	d307      	bcc.n	800746e <create_chain+0x92>
			ncl = 2;
 800745e:	2302      	movs	r3, #2
 8007460:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	429a      	cmp	r2, r3
 8007468:	d901      	bls.n	800746e <create_chain+0x92>
 800746a:	2300      	movs	r3, #0
 800746c:	e05a      	b.n	8007524 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800746e:	6979      	ldr	r1, [r7, #20]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff fd03 	bl	8006e7c <get_fat>
 8007476:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00e      	beq.n	800749c <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007484:	d002      	beq.n	800748c <create_chain+0xb0>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <create_chain+0xb4>
			return cs;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	e049      	b.n	8007524 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	429a      	cmp	r2, r3
 8007496:	d1d8      	bne.n	800744a <create_chain+0x6e>
 8007498:	2300      	movs	r3, #0
 800749a:	e043      	b.n	8007524 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800749c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800749e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fde5 	bl	8007074 <put_fat>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <create_chain+0xec>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d006      	beq.n	80074c8 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff fdd8 	bl	8007074 <put_fat>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d121      	bne.n	8007512 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d4:	461a      	mov	r2, r3
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	6113      	str	r3, [r2, #16]
		if (fs->free_clust != 0xFFFFFFFF) {
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d01c      	beq.n	8007522 <create_chain+0x146>
			fs->free_clust--;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074f8:	6153      	str	r3, [r2, #20]
			fs->fsi_flag |= 1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007500:	795b      	ldrb	r3, [r3, #5]
 8007502:	f043 0301 	orr.w	r3, r3, #1
 8007506:	b2da      	uxtb	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750e:	715a      	strb	r2, [r3, #5]
 8007510:	e007      	b.n	8007522 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d102      	bne.n	800751e <create_chain+0x142>
 8007518:	f04f 33ff 	mov.w	r3, #4294967295
 800751c:	e000      	b.n	8007520 <create_chain+0x144>
 800751e:	2301      	movs	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007522:	697b      	ldr	r3, [r7, #20]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800752c:	b480      	push	{r7}
 800752e:	b087      	sub	sp, #28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	3304      	adds	r3, #4
 8007540:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800754e:	895b      	ldrh	r3, [r3, #10]
 8007550:	461a      	mov	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	fbb3 f3f2 	udiv	r3, r3, r2
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007564:	7892      	ldrb	r2, [r2, #2]
 8007566:	fbb3 f3f2 	udiv	r3, r3, r2
 800756a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	613a      	str	r2, [r7, #16]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <clmt_clust+0x54>
 800757c:	2300      	movs	r3, #0
 800757e:	e010      	b.n	80075a2 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	429a      	cmp	r2, r3
 8007586:	d307      	bcc.n	8007598 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	3304      	adds	r3, #4
 8007594:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007596:	e7e9      	b.n	800756c <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8007598:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	4413      	add	r3, r2
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b086      	sub	sp, #24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075c2:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d009      	beq.n	80075e8 <dir_sdi+0x3a>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d301      	bcc.n	80075ec <dir_sdi+0x3e>
		return FR_INT_ERR;
 80075e8:	2302      	movs	r3, #2
 80075ea:	e0aa      	b.n	8007742 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d110      	bne.n	8007614 <dir_sdi+0x66>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b03      	cmp	r3, #3
 8007602:	d107      	bne.n	8007614 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007612:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d115      	bne.n	8007646 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007626:	891b      	ldrh	r3, [r3, #8]
 8007628:	461a      	mov	r2, r3
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	4293      	cmp	r3, r2
 800762e:	d301      	bcc.n	8007634 <dir_sdi+0x86>
			return FR_INT_ERR;
 8007630:	2302      	movs	r3, #2
 8007632:	e086      	b.n	8007742 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	e043      	b.n	80076ce <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007652:	895b      	ldrh	r3, [r3, #10]
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	b29b      	uxth	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007666:	789b      	ldrb	r3, [r3, #2]
 8007668:	fb02 f303 	mul.w	r3, r2, r3
 800766c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800766e:	e021      	b.n	80076b4 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6979      	ldr	r1, [r7, #20]
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fbfe 	bl	8006e7c <get_fat>
 8007680:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007688:	d101      	bne.n	800768e <dir_sdi+0xe0>
 800768a:	2301      	movs	r3, #1
 800768c:	e059      	b.n	8007742 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d909      	bls.n	80076a8 <dir_sdi+0xfa>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d301      	bcc.n	80076ac <dir_sdi+0xfe>
				return FR_INT_ERR;
 80076a8:	2302      	movs	r3, #2
 80076aa:	e04a      	b.n	8007742 <dir_sdi+0x194>
			idx -= ic;
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d2d9      	bcs.n	8007670 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6979      	ldr	r1, [r7, #20]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff fbb3 	bl	8006e32 <clust2sect>
 80076cc:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d4:	461a      	mov	r2, r3
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <dir_sdi+0x136>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e02e      	b.n	8007742 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f0:	895b      	ldrh	r3, [r3, #10]
 80076f2:	095b      	lsrs	r3, r3, #5
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	461a      	mov	r2, r3
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4413      	add	r3, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007708:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007720:	895b      	ldrh	r3, [r3, #10]
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	b29b      	uxth	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	fbb3 f1f2 	udiv	r1, r3, r2
 800772e:	fb01 f202 	mul.w	r2, r1, r2
 8007732:	1a9b      	subs	r3, r3, r2
 8007734:	015b      	lsls	r3, r3, #5
 8007736:	4403      	add	r3, r0
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800773e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800774a:	b590      	push	{r4, r7, lr}
 800774c:	b087      	sub	sp, #28
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800775a:	88db      	ldrh	r3, [r3, #6]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <dir_next+0x2a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <dir_next+0x2e>
		return FR_NO_FILE;
 8007774:	2304      	movs	r3, #4
 8007776:	e12e      	b.n	80079d6 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007784:	895b      	ldrh	r3, [r3, #10]
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	b29b      	uxth	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007792:	fb01 f202 	mul.w	r2, r1, r2
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	2b00      	cmp	r3, #0
 800779a:	f040 80fa 	bne.w	8007992 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	3301      	adds	r3, #1
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077ae:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10d      	bne.n	80077d8 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c8:	891b      	ldrh	r3, [r3, #8]
 80077ca:	461a      	mov	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4293      	cmp	r3, r2
 80077d0:	f0c0 80df 	bcc.w	8007992 <dir_next+0x248>
				return FR_NO_FILE;
 80077d4:	2304      	movs	r3, #4
 80077d6:	e0fe      	b.n	80079d6 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e4:	895b      	ldrh	r3, [r3, #10]
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	461a      	mov	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80077fe:	7892      	ldrb	r2, [r2, #2]
 8007800:	3a01      	subs	r2, #1
 8007802:	4013      	ands	r3, r2
 8007804:	2b00      	cmp	r3, #0
 8007806:	f040 80c4 	bne.w	8007992 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	4619      	mov	r1, r3
 800781c:	4610      	mov	r0, r2
 800781e:	f7ff fb2d 	bl	8006e7c <get_fat>
 8007822:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d801      	bhi.n	800782e <dir_next+0xe4>
 800782a:	2302      	movs	r3, #2
 800782c:	e0d3      	b.n	80079d6 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007834:	d101      	bne.n	800783a <dir_next+0xf0>
 8007836:	2301      	movs	r3, #1
 8007838:	e0cd      	b.n	80079d6 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	429a      	cmp	r2, r3
 800784c:	f0c0 808e 	bcc.w	800796c <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <dir_next+0x110>
 8007856:	2304      	movs	r3, #4
 8007858:	e0bd      	b.n	80079d6 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	4619      	mov	r1, r3
 800786c:	4610      	mov	r0, r2
 800786e:	f7ff fdb5 	bl	80073dc <create_chain>
 8007872:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <dir_next+0x134>
 800787a:	2307      	movs	r3, #7
 800787c:	e0ab      	b.n	80079d6 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <dir_next+0x13e>
 8007884:	2302      	movs	r3, #2
 8007886:	e0a6      	b.n	80079d6 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d101      	bne.n	8007894 <dir_next+0x14a>
 8007890:	2301      	movs	r3, #1
 8007892:	e0a0      	b.n	80079d6 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff f985 	bl	8006bac <sync_window>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <dir_next+0x162>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e094      	b.n	80079d6 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4618      	mov	r0, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c2:	895b      	ldrh	r3, [r3, #10]
 80078c4:	461a      	mov	r2, r3
 80078c6:	2100      	movs	r1, #0
 80078c8:	f7fe ff23 	bl	8006712 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078da:	681c      	ldr	r4, [r3, #0]
 80078dc:	6979      	ldr	r1, [r7, #20]
 80078de:	4610      	mov	r0, r2
 80078e0:	f7ff faa7 	bl	8006e32 <clust2sect>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 80078ea:	6313      	str	r3, [r2, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80078ec:	2300      	movs	r3, #0
 80078ee:	613b      	str	r3, [r7, #16]
 80078f0:	e021      	b.n	8007936 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fe:	2201      	movs	r2, #1
 8007900:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f7ff f94e 	bl	8006bac <sync_window>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <dir_next+0x1d0>
 8007916:	2301      	movs	r3, #1
 8007918:	e05d      	b.n	80079d6 <dir_next+0x28c>
						dp->fs->winsect++;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8007926:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007928:	3201      	adds	r2, #1
 800792a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792e:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3301      	adds	r3, #1
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007942:	789b      	ldrb	r3, [r3, #2]
 8007944:	461a      	mov	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	4293      	cmp	r3, r2
 800794a:	d3d2      	bcc.n	80078f2 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1acb      	subs	r3, r1, r3
 8007966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800796a:	6313      	str	r3, [r2, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007972:	461a      	mov	r2, r3
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6979      	ldr	r1, [r7, #20]
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff fa55 	bl	8006e32 <clust2sect>
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007990:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	b29a      	uxth	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799c:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b4:	895b      	ldrh	r3, [r3, #10]
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	fbb3 f1f2 	udiv	r1, r3, r2
 80079c2:	fb01 f202 	mul.w	r2, r1, r2
 80079c6:	1a9b      	subs	r3, r3, r2
 80079c8:	015b      	lsls	r3, r3, #5
 80079ca:	4403      	add	r3, r0
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079d2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd90      	pop	{r4, r7, pc}

080079de <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff fddf 	bl	80075ae <dir_sdi>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d135      	bne.n	8007a66 <dir_alloc+0x88>
		n = 0;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7ff f91d 	bl	8006c50 <move_window>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d121      	bne.n	8007a64 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2be5      	cmp	r3, #229	; 0xe5
 8007a2c:	d006      	beq.n	8007a3c <dir_alloc+0x5e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d107      	bne.n	8007a4c <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d102      	bne.n	8007a50 <dir_alloc+0x72>
 8007a4a:	e00c      	b.n	8007a66 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007a50:	2101      	movs	r1, #1
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff fe79 	bl	800774a <dir_next>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0cd      	beq.n	80079fe <dir_alloc+0x20>
 8007a62:	e000      	b.n	8007a66 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8007a64:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d101      	bne.n	8007a70 <dir_alloc+0x92>
 8007a6c:	2307      	movs	r3, #7
 8007a6e:	73fb      	strb	r3, [r7, #15]
	return res;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	331b      	adds	r3, #27
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	b21a      	sxth	r2, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	331a      	adds	r3, #26
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	b21b      	sxth	r3, r3
 8007a96:	4313      	orrs	r3, r2
 8007a98:	b21b      	sxth	r3, r3
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d10f      	bne.n	8007aca <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	3315      	adds	r3, #21
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	021b      	lsls	r3, r3, #8
 8007ab2:	b21a      	sxth	r2, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	3314      	adds	r3, #20
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	b21b      	sxth	r3, r3
 8007abc:	4313      	orrs	r3, r2
 8007abe:	b21b      	sxth	r3, r3
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]

	return cl;
 8007aca:	68fb      	ldr	r3, [r7, #12]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	331a      	adds	r3, #26
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	0a1b      	lsrs	r3, r3, #8
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	331b      	adds	r3, #27
 8007af8:	b2d2      	uxtb	r2, r2
 8007afa:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	0c1a      	lsrs	r2, r3, #16
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3314      	adds	r3, #20
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	0a1b      	lsrs	r3, r3, #8
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3315      	adds	r3, #21
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007b2e:	2100      	movs	r1, #0
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff fd3c 	bl	80075ae <dir_sdi>
 8007b36:	4603      	mov	r3, r0
 8007b38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007b3a:	7dfb      	ldrb	r3, [r7, #23]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <dir_find+0x1e>
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	e03f      	b.n	8007bc4 <dir_find+0x9e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7ff f87a 	bl	8006c50 <move_window>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d12a      	bne.n	8007bbc <dir_find+0x96>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d102      	bne.n	8007b82 <dir_find+0x5c>
 8007b7c:	2304      	movs	r3, #4
 8007b7e:	75fb      	strb	r3, [r7, #23]
 8007b80:	e01f      	b.n	8007bc2 <dir_find+0x9c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	330b      	adds	r3, #11
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10b      	bne.n	8007ba8 <dir_find+0x82>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	220b      	movs	r2, #11
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	6938      	ldr	r0, [r7, #16]
 8007b9e:	f7fe fdd3 	bl	8006748 <mem_cmp>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <dir_find+0x9a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007ba8:	2100      	movs	r1, #0
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff fdcd 	bl	800774a <dir_next>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0c4      	beq.n	8007b44 <dir_find+0x1e>
 8007bba:	e002      	b.n	8007bc2 <dir_find+0x9c>
		if (res != FR_OK) break;
 8007bbc:	bf00      	nop
 8007bbe:	e000      	b.n	8007bc2 <dir_find+0x9c>
			break;
 8007bc0:	bf00      	nop

	return res;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7ff ff01 	bl	80079de <dir_alloc>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d12d      	bne.n	8007c42 <dir_register+0x76>
		res = move_window(dp->fs, dp->sect);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f7ff f829 	bl	8006c50 <move_window>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d11c      	bne.n	8007c42 <dir_register+0x76>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	2220      	movs	r2, #32
 8007c12:	2100      	movs	r1, #0
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe fd7c 	bl	8006712 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c20:	6958      	ldr	r0, [r3, #20]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	220b      	movs	r2, #11
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	f7fe fd51 	bl	80066d4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3e:	2201      	movs	r2, #1
 8007c40:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	e002      	b.n	8007c64 <create_name+0x18>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2b2f      	cmp	r3, #47	; 0x2f
 8007c6a:	d0f8      	beq.n	8007c5e <create_name+0x12>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b5c      	cmp	r3, #92	; 0x5c
 8007c72:	d0f4      	beq.n	8007c5e <create_name+0x12>
	sfn = dp->fn;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007c7e:	220b      	movs	r2, #11
 8007c80:	2120      	movs	r1, #32
 8007c82:	68b8      	ldr	r0, [r7, #8]
 8007c84:	f7fe fd45 	bl	8006712 <mem_set>
	si = i = b = 0; ni = 8;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	77fb      	strb	r3, [r7, #31]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	613b      	str	r3, [r7, #16]
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	2308      	movs	r3, #8
 8007c96:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	617a      	str	r2, [r7, #20]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8007ca6:	7fbb      	ldrb	r3, [r7, #30]
 8007ca8:	2b20      	cmp	r3, #32
 8007caa:	d953      	bls.n	8007d54 <create_name+0x108>
 8007cac:	7fbb      	ldrb	r3, [r7, #30]
 8007cae:	2b2f      	cmp	r3, #47	; 0x2f
 8007cb0:	d050      	beq.n	8007d54 <create_name+0x108>
 8007cb2:	7fbb      	ldrb	r3, [r7, #30]
 8007cb4:	2b5c      	cmp	r3, #92	; 0x5c
 8007cb6:	d04d      	beq.n	8007d54 <create_name+0x108>
		if (c == '.' || i >= ni) {
 8007cb8:	7fbb      	ldrb	r3, [r7, #30]
 8007cba:	2b2e      	cmp	r3, #46	; 0x2e
 8007cbc:	d003      	beq.n	8007cc6 <create_name+0x7a>
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d30f      	bcc.n	8007ce6 <create_name+0x9a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d102      	bne.n	8007cd2 <create_name+0x86>
 8007ccc:	7fbb      	ldrb	r3, [r7, #30]
 8007cce:	2b2e      	cmp	r3, #46	; 0x2e
 8007cd0:	d001      	beq.n	8007cd6 <create_name+0x8a>
 8007cd2:	2306      	movs	r3, #6
 8007cd4:	e073      	b.n	8007dbe <create_name+0x172>
			i = 8; ni = 11;
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	230b      	movs	r3, #11
 8007cdc:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8007cde:	7ffb      	ldrb	r3, [r7, #31]
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	77fb      	strb	r3, [r7, #31]
 8007ce4:	e035      	b.n	8007d52 <create_name+0x106>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007ce6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da08      	bge.n	8007d00 <create_name+0xb4>
			b |= 3;						/* Eliminate NT flag */
 8007cee:	7ffb      	ldrb	r3, [r7, #31]
 8007cf0:	f043 0303 	orr.w	r3, r3, #3
 8007cf4:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007cf6:	7fbb      	ldrb	r3, [r7, #30]
 8007cf8:	3b80      	subs	r3, #128	; 0x80
 8007cfa:	4a33      	ldr	r2, [pc, #204]	; (8007dc8 <create_name+0x17c>)
 8007cfc:	5cd3      	ldrb	r3, [r2, r3]
 8007cfe:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8007d00:	7fbb      	ldrb	r3, [r7, #30]
 8007d02:	4619      	mov	r1, r3
 8007d04:	4831      	ldr	r0, [pc, #196]	; (8007dcc <create_name+0x180>)
 8007d06:	f7fe fd46 	bl	8006796 <chk_chr>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <create_name+0xc8>
				return FR_INVALID_NAME;
 8007d10:	2306      	movs	r3, #6
 8007d12:	e054      	b.n	8007dbe <create_name+0x172>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8007d14:	7fbb      	ldrb	r3, [r7, #30]
 8007d16:	2b40      	cmp	r3, #64	; 0x40
 8007d18:	d907      	bls.n	8007d2a <create_name+0xde>
 8007d1a:	7fbb      	ldrb	r3, [r7, #30]
 8007d1c:	2b5a      	cmp	r3, #90	; 0x5a
 8007d1e:	d804      	bhi.n	8007d2a <create_name+0xde>
				b |= 2;
 8007d20:	7ffb      	ldrb	r3, [r7, #31]
 8007d22:	f043 0302 	orr.w	r3, r3, #2
 8007d26:	77fb      	strb	r3, [r7, #31]
 8007d28:	e00c      	b.n	8007d44 <create_name+0xf8>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8007d2a:	7fbb      	ldrb	r3, [r7, #30]
 8007d2c:	2b60      	cmp	r3, #96	; 0x60
 8007d2e:	d909      	bls.n	8007d44 <create_name+0xf8>
 8007d30:	7fbb      	ldrb	r3, [r7, #30]
 8007d32:	2b7a      	cmp	r3, #122	; 0x7a
 8007d34:	d806      	bhi.n	8007d44 <create_name+0xf8>
					b |= 1; c -= 0x20;
 8007d36:	7ffb      	ldrb	r3, [r7, #31]
 8007d38:	f043 0301 	orr.w	r3, r3, #1
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	7fbb      	ldrb	r3, [r7, #30]
 8007d40:	3b20      	subs	r3, #32
 8007d42:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	613a      	str	r2, [r7, #16]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	7fba      	ldrb	r2, [r7, #30]
 8007d50:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007d52:	e7a1      	b.n	8007c98 <create_name+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	441a      	add	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007d5e:	7fbb      	ldrb	r3, [r7, #30]
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d801      	bhi.n	8007d68 <create_name+0x11c>
 8007d64:	2304      	movs	r3, #4
 8007d66:	e000      	b.n	8007d6a <create_name+0x11e>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <create_name+0x12a>
 8007d72:	2306      	movs	r3, #6
 8007d74:	e023      	b.n	8007dbe <create_name+0x172>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2be5      	cmp	r3, #229	; 0xe5
 8007d7c:	d102      	bne.n	8007d84 <create_name+0x138>
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2205      	movs	r2, #5
 8007d82:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d102      	bne.n	8007d90 <create_name+0x144>
 8007d8a:	7ffb      	ldrb	r3, [r7, #31]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8007d90:	7ffb      	ldrb	r3, [r7, #31]
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d103      	bne.n	8007da2 <create_name+0x156>
 8007d9a:	7fbb      	ldrb	r3, [r7, #30]
 8007d9c:	f043 0310 	orr.w	r3, r3, #16
 8007da0:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8007da2:	7ffb      	ldrb	r3, [r7, #31]
 8007da4:	f003 030c 	and.w	r3, r3, #12
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d103      	bne.n	8007db4 <create_name+0x168>
 8007dac:	7fbb      	ldrb	r3, [r7, #30]
 8007dae:	f043 0308 	orr.w	r3, r3, #8
 8007db2:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	330b      	adds	r3, #11
 8007db8:	7fba      	ldrb	r2, [r7, #30]
 8007dba:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007dbc:	2300      	movs	r3, #0
#endif
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	0800dd84 	.word	0x0800dd84
 8007dcc:	0800dd00 	.word	0x0800dd00

08007dd0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b2f      	cmp	r3, #47	; 0x2f
 8007de0:	d003      	beq.n	8007dea <follow_path+0x1a>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b5c      	cmp	r3, #92	; 0x5c
 8007de8:	d102      	bne.n	8007df0 <follow_path+0x20>
		path++;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	3301      	adds	r3, #1
 8007dee:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df6:	461a      	mov	r2, r3
 8007df8:	2300      	movs	r3, #0
 8007dfa:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b1f      	cmp	r3, #31
 8007e02:	d80c      	bhi.n	8007e1e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff fbd1 	bl	80075ae <dir_sdi>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e16:	461a      	mov	r2, r3
 8007e18:	2300      	movs	r3, #0
 8007e1a:	6153      	str	r3, [r2, #20]
 8007e1c:	e049      	b.n	8007eb2 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e1e:	463b      	mov	r3, r7
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ff12 	bl	8007c4c <create_name>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d13a      	bne.n	8007ea8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff fe77 	bl	8007b26 <dir_find>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	7adb      	ldrb	r3, [r3, #11]
 8007e46:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d12b      	bne.n	8007eac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d126      	bne.n	8007eac <follow_path+0xdc>
 8007e5e:	2305      	movs	r3, #5
 8007e60:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007e62:	e023      	b.n	8007eac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	f003 0304 	and.w	r3, r3, #4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d120      	bne.n	8007eb0 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	330b      	adds	r3, #11
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	f003 0310 	and.w	r3, r3, #16
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8007e86:	2305      	movs	r3, #5
 8007e88:	73fb      	strb	r3, [r7, #15]
 8007e8a:	e012      	b.n	8007eb2 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fdef 	bl	8007a7a <ld_clust>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ea4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ea6:	e7ba      	b.n	8007e1e <follow_path+0x4e>
			if (res != FR_OK) break;
 8007ea8:	bf00      	nop
 8007eaa:	e002      	b.n	8007eb2 <follow_path+0xe2>
				break;
 8007eac:	bf00      	nop
 8007eae:	e000      	b.n	8007eb2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007eb0:	bf00      	nop
		}
	}

	return res;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d031      	beq.n	8007f36 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e002      	b.n	8007ee0 <get_ldnumber+0x24>
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	3301      	adds	r3, #1
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d903      	bls.n	8007ef0 <get_ldnumber+0x34>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b3a      	cmp	r3, #58	; 0x3a
 8007eee:	d1f4      	bne.n	8007eda <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b3a      	cmp	r3, #58	; 0x3a
 8007ef6:	d11c      	bne.n	8007f32 <get_ldnumber+0x76>
			tp = *path;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	60fa      	str	r2, [r7, #12]
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	3b30      	subs	r3, #48	; 0x30
 8007f08:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b09      	cmp	r3, #9
 8007f0e:	d80e      	bhi.n	8007f2e <get_ldnumber+0x72>
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d10a      	bne.n	8007f2e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d107      	bne.n	8007f2e <get_ldnumber+0x72>
					vol = (int)i;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	3301      	adds	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	e002      	b.n	8007f38 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007f32:	2300      	movs	r3, #0
 8007f34:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007f36:	693b      	ldr	r3, [r7, #16]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f54:	2200      	movs	r2, #0
 8007f56:	711a      	strb	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295
 8007f64:	6313      	str	r3, [r2, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7fe fe71 	bl	8006c50 <move_window>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <check_fs+0x34>
		return 3;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e04a      	b.n	800800e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007f7e:	3301      	adds	r3, #1
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	b21a      	sxth	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007f8c:	b21b      	sxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b21b      	sxth	r3, r3
 8007f92:	4a21      	ldr	r2, [pc, #132]	; (8008018 <check_fs+0xd4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d001      	beq.n	8007f9c <check_fs+0x58>
		return 2;
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e038      	b.n	800800e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3336      	adds	r3, #54	; 0x36
 8007fa0:	3303      	adds	r3, #3
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	061a      	lsls	r2, r3, #24
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3336      	adds	r3, #54	; 0x36
 8007faa:	3302      	adds	r3, #2
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	041b      	lsls	r3, r3, #16
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	3236      	adds	r2, #54	; 0x36
 8007fb6:	3201      	adds	r2, #1
 8007fb8:	7812      	ldrb	r2, [r2, #0]
 8007fba:	0212      	lsls	r2, r2, #8
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007fca:	4a14      	ldr	r2, [pc, #80]	; (800801c <check_fs+0xd8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d101      	bne.n	8007fd4 <check_fs+0x90>
		return 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e01c      	b.n	800800e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3352      	adds	r3, #82	; 0x52
 8007fd8:	3303      	adds	r3, #3
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	061a      	lsls	r2, r3, #24
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3352      	adds	r3, #82	; 0x52
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	041b      	lsls	r3, r3, #16
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	3252      	adds	r2, #82	; 0x52
 8007fee:	3201      	adds	r2, #1
 8007ff0:	7812      	ldrb	r2, [r2, #0]
 8007ff2:	0212      	lsls	r2, r2, #8
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008002:	4a06      	ldr	r2, [pc, #24]	; (800801c <check_fs+0xd8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d101      	bne.n	800800c <check_fs+0xc8>
		return 0;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <check_fs+0xca>

	return 1;
 800800c:	2301      	movs	r3, #1
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	ffffaa55 	.word	0xffffaa55
 800801c:	00544146 	.word	0x00544146

08008020 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b096      	sub	sp, #88	; 0x58
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	4613      	mov	r3, r2
 800802c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008034:	68b8      	ldr	r0, [r7, #8]
 8008036:	f7ff ff41 	bl	8007ebc <get_ldnumber>
 800803a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800803c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803e:	2b00      	cmp	r3, #0
 8008040:	da01      	bge.n	8008046 <find_volume+0x26>
 8008042:	230b      	movs	r3, #11
 8008044:	e319      	b.n	800867a <find_volume+0x65a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008046:	4a9c      	ldr	r2, [pc, #624]	; (80082b8 <find_volume+0x298>)
 8008048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800804e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <find_volume+0x3a>
 8008056:	230c      	movs	r3, #12
 8008058:	e30f      	b.n	800867a <find_volume+0x65a>

	ENTER_FF(fs);						/* Lock the volume */
 800805a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800805c:	f7fe fbb6 	bl	80067cc <lock_fs>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <find_volume+0x4a>
 8008066:	230f      	movs	r3, #15
 8008068:	e307      	b.n	800867a <find_volume+0x65a>
	*rfs = fs;							/* Return pointer to the file system object */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800806e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01c      	beq.n	80080b6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008082:	785b      	ldrb	r3, [r3, #1]
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fa87 	bl	8006598 <disk_status>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10c      	bne.n	80080b6 <find_volume+0x96>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <find_volume+0x92>
 80080a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80080ae:	230a      	movs	r3, #10
 80080b0:	e2e3      	b.n	800867a <find_volume+0x65a>
			return FR_OK;				/* The file system object is valid */
 80080b2:	2300      	movs	r3, #0
 80080b4:	e2e1      	b.n	800867a <find_volume+0x65a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080bc:	2200      	movs	r2, #0
 80080be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80080c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fa79 	bl	80065cc <disk_initialize>
 80080da:	4603      	mov	r3, r0
 80080dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80080e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <find_volume+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80080ec:	2303      	movs	r3, #3
 80080ee:	e2c4      	b.n	800867a <find_volume+0x65a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <find_volume+0xe6>
 80080f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80080fa:	f003 0304 	and.w	r3, r3, #4
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 8008102:	230a      	movs	r3, #10
 8008104:	e2b9      	b.n	800867a <find_volume+0x65a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810c:	7858      	ldrb	r0, [r3, #1]
 800810e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008114:	330a      	adds	r3, #10
 8008116:	461a      	mov	r2, r3
 8008118:	2102      	movs	r1, #2
 800811a:	f7fe fabd 	bl	8006698 <disk_ioctl>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10d      	bne.n	8008140 <find_volume+0x120>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812a:	895b      	ldrh	r3, [r3, #10]
 800812c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008130:	d306      	bcc.n	8008140 <find_volume+0x120>
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008138:	895b      	ldrh	r3, [r3, #10]
 800813a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813e:	d901      	bls.n	8008144 <find_volume+0x124>
 8008140:	2301      	movs	r3, #1
 8008142:	e29a      	b.n	800867a <find_volume+0x65a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008148:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800814a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800814c:	f7ff fefa 	bl	8007f44 <check_fs>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800815a:	2b01      	cmp	r3, #1
 800815c:	d153      	bne.n	8008206 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800815e:	2300      	movs	r3, #0
 8008160:	643b      	str	r3, [r7, #64]	; 0x40
 8008162:	e028      	b.n	80081b6 <find_volume+0x196>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008168:	011b      	lsls	r3, r3, #4
 800816a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800816e:	4413      	add	r3, r2
 8008170:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	3304      	adds	r3, #4
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d012      	beq.n	80081a2 <find_volume+0x182>
 800817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817e:	330b      	adds	r3, #11
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	061a      	lsls	r2, r3, #24
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	330a      	adds	r3, #10
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	041b      	lsls	r3, r3, #16
 800818c:	4313      	orrs	r3, r2
 800818e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008190:	3209      	adds	r2, #9
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	0212      	lsls	r2, r2, #8
 8008196:	4313      	orrs	r3, r2
 8008198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819a:	3208      	adds	r2, #8
 800819c:	7812      	ldrb	r2, [r2, #0]
 800819e:	431a      	orrs	r2, r3
 80081a0:	e000      	b.n	80081a4 <find_volume+0x184>
 80081a2:	2200      	movs	r2, #0
 80081a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	3358      	adds	r3, #88	; 0x58
 80081aa:	443b      	add	r3, r7
 80081ac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80081b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b2:	3301      	adds	r3, #1
 80081b4:	643b      	str	r3, [r7, #64]	; 0x40
 80081b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d9d3      	bls.n	8008164 <find_volume+0x144>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80081bc:	2300      	movs	r3, #0
 80081be:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80081c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <find_volume+0x1ac>
 80081c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c8:	3b01      	subs	r3, #1
 80081ca:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80081cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	3358      	adds	r3, #88	; 0x58
 80081d2:	443b      	add	r3, r7
 80081d4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80081d8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80081da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <find_volume+0x1cc>
 80081e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081e4:	f7ff feae 	bl	8007f44 <check_fs>
 80081e8:	4603      	mov	r3, r0
 80081ea:	e000      	b.n	80081ee <find_volume+0x1ce>
 80081ec:	2302      	movs	r3, #2
 80081ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80081f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <find_volume+0x1e6>
 80081fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081fc:	3301      	adds	r3, #1
 80081fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008202:	2b03      	cmp	r3, #3
 8008204:	d9e2      	bls.n	80081cc <find_volume+0x1ac>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008206:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800820a:	2b03      	cmp	r3, #3
 800820c:	d101      	bne.n	8008212 <find_volume+0x1f2>
 800820e:	2301      	movs	r3, #1
 8008210:	e233      	b.n	800867a <find_volume+0x65a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <find_volume+0x1fe>
 800821a:	230d      	movs	r3, #13
 800821c:	e22d      	b.n	800867a <find_volume+0x65a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	7b1b      	ldrb	r3, [r3, #12]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	b21a      	sxth	r2, r3
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	7adb      	ldrb	r3, [r3, #11]
 800822a:	b21b      	sxth	r3, r3
 800822c:	4313      	orrs	r3, r2
 800822e:	b21a      	sxth	r2, r3
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008236:	895b      	ldrh	r3, [r3, #10]
 8008238:	b21b      	sxth	r3, r3
 800823a:	429a      	cmp	r2, r3
 800823c:	d001      	beq.n	8008242 <find_volume+0x222>
		return FR_NO_FILESYSTEM;
 800823e:	230d      	movs	r3, #13
 8008240:	e21b      	b.n	800867a <find_volume+0x65a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	7ddb      	ldrb	r3, [r3, #23]
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	b21a      	sxth	r2, r3
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	7d9b      	ldrb	r3, [r3, #22]
 800824e:	b21b      	sxth	r3, r3
 8008250:	4313      	orrs	r3, r2
 8008252:	b21b      	sxth	r3, r3
 8008254:	b29b      	uxth	r3, r3
 8008256:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825a:	2b00      	cmp	r3, #0
 800825c:	d112      	bne.n	8008284 <find_volume+0x264>
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008264:	061a      	lsls	r2, r3, #24
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800826c:	041b      	lsls	r3, r3, #16
 800826e:	4313      	orrs	r3, r2
 8008270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008272:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008276:	0212      	lsls	r2, r2, #8
 8008278:	4313      	orrs	r3, r2
 800827a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800827c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008280:	4313      	orrs	r3, r2
 8008282:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800828a:	461a      	mov	r2, r3
 800828c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828e:	61d3      	str	r3, [r2, #28]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	7c1a      	ldrb	r2, [r3, #16]
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800829c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a2:	78db      	ldrb	r3, [r3, #3]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d009      	beq.n	80082bc <find_volume+0x29c>
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ae:	78db      	ldrb	r3, [r3, #3]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d003      	beq.n	80082bc <find_volume+0x29c>
		return FR_NO_FILESYSTEM;
 80082b4:	230d      	movs	r3, #13
 80082b6:	e1e0      	b.n	800867a <find_volume+0x65a>
 80082b8:	200022f4 	.word	0x200022f4
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c2:	78db      	ldrb	r3, [r3, #3]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082c8:	fb02 f303 	mul.w	r3, r2, r3
 80082cc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	7b5a      	ldrb	r2, [r3, #13]
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d8:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082e0:	789b      	ldrb	r3, [r3, #2]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00c      	beq.n	8008300 <find_volume+0x2e0>
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ec:	789b      	ldrb	r3, [r3, #2]
 80082ee:	461a      	mov	r2, r3
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f6:	789b      	ldrb	r3, [r3, #2]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <find_volume+0x2e4>
		return FR_NO_FILESYSTEM;
 8008300:	230d      	movs	r3, #13
 8008302:	e1ba      	b.n	800867a <find_volume+0x65a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	7c9b      	ldrb	r3, [r3, #18]
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	b21a      	sxth	r2, r3
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	7c5b      	ldrb	r3, [r3, #17]
 8008310:	b21b      	sxth	r3, r3
 8008312:	4313      	orrs	r3, r2
 8008314:	b21b      	sxth	r3, r3
 8008316:	b29a      	uxth	r2, r3
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008326:	891b      	ldrh	r3, [r3, #8]
 8008328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800832a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800832e:	8952      	ldrh	r2, [r2, #10]
 8008330:	0952      	lsrs	r2, r2, #5
 8008332:	b292      	uxth	r2, r2
 8008334:	fbb3 f1f2 	udiv	r1, r3, r2
 8008338:	fb01 f202 	mul.w	r2, r1, r2
 800833c:	1a9b      	subs	r3, r3, r2
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <find_volume+0x328>
		return FR_NO_FILESYSTEM;
 8008344:	230d      	movs	r3, #13
 8008346:	e198      	b.n	800867a <find_volume+0x65a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	7d1b      	ldrb	r3, [r3, #20]
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	b21a      	sxth	r2, r3
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	7cdb      	ldrb	r3, [r3, #19]
 8008354:	b21b      	sxth	r3, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	b21b      	sxth	r3, r3
 800835a:	b29b      	uxth	r3, r3
 800835c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800835e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008360:	2b00      	cmp	r3, #0
 8008362:	d112      	bne.n	800838a <find_volume+0x36a>
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800836a:	061a      	lsls	r2, r3, #24
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008372:	041b      	lsls	r3, r3, #16
 8008374:	4313      	orrs	r3, r2
 8008376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008378:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800837c:	0212      	lsls	r2, r2, #8
 800837e:	4313      	orrs	r3, r2
 8008380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008382:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008386:	4313      	orrs	r3, r2
 8008388:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	7bdb      	ldrb	r3, [r3, #15]
 800838e:	021b      	lsls	r3, r3, #8
 8008390:	b21a      	sxth	r2, r3
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	7b9b      	ldrb	r3, [r3, #14]
 8008396:	b21b      	sxth	r3, r3
 8008398:	4313      	orrs	r3, r2
 800839a:	b21b      	sxth	r3, r3
 800839c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800839e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <find_volume+0x388>
 80083a4:	230d      	movs	r3, #13
 80083a6:	e168      	b.n	800867a <find_volume+0x65a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80083a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ac:	4413      	add	r3, r2
 80083ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083b4:	8911      	ldrh	r1, [r2, #8]
 80083b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083bc:	8952      	ldrh	r2, [r2, #10]
 80083be:	0952      	lsrs	r2, r2, #5
 80083c0:	b292      	uxth	r2, r2
 80083c2:	fbb1 f2f2 	udiv	r2, r1, r2
 80083c6:	b292      	uxth	r2, r2
 80083c8:	4413      	add	r3, r2
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80083cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d201      	bcs.n	80083d8 <find_volume+0x3b8>
 80083d4:	230d      	movs	r3, #13
 80083d6:	e150      	b.n	800867a <find_volume+0x65a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80083d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083e4:	7892      	ldrb	r2, [r2, #2]
 80083e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <find_volume+0x3d6>
 80083f2:	230d      	movs	r3, #13
 80083f4:	e141      	b.n	800867a <find_volume+0x65a>
	fmt = FS_FAT12;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008402:	4293      	cmp	r3, r2
 8008404:	d902      	bls.n	800840c <find_volume+0x3ec>
 8008406:	2302      	movs	r3, #2
 8008408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008412:	4293      	cmp	r3, r2
 8008414:	d902      	bls.n	800841c <find_volume+0x3fc>
 8008416:	2303      	movs	r3, #3
 8008418:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	3302      	adds	r3, #2
 8008420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008426:	6193      	str	r3, [r2, #24]
	fs->volbase = bsect;								/* Volume start sector */
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800842e:	461a      	mov	r2, r3
 8008430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008432:	6213      	str	r3, [r2, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008434:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008438:	4413      	add	r3, r2
 800843a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800843c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008440:	6253      	str	r3, [r2, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 8008442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008446:	4413      	add	r3, r2
 8008448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800844a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800844e:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 8008450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008454:	2b03      	cmp	r3, #3
 8008456:	d124      	bne.n	80084a2 <find_volume+0x482>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845e:	891b      	ldrh	r3, [r3, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <find_volume+0x448>
 8008464:	230d      	movs	r3, #13
 8008466:	e108      	b.n	800867a <find_volume+0x65a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800846e:	061a      	lsls	r2, r3, #24
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008476:	041b      	lsls	r3, r3, #16
 8008478:	4313      	orrs	r3, r2
 800847a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800847c:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008480:	0212      	lsls	r2, r2, #8
 8008482:	4313      	orrs	r3, r2
 8008484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008486:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800848a:	4313      	orrs	r3, r2
 800848c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800848e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008492:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	647b      	str	r3, [r7, #68]	; 0x44
 80084a0:	e02b      	b.n	80084fa <find_volume+0x4da>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a8:	891b      	ldrh	r3, [r3, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <find_volume+0x492>
 80084ae:	230d      	movs	r3, #13
 80084b0:	e0e3      	b.n	800867a <find_volume+0x65a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084bc:	4413      	add	r3, r2
 80084be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80084c4:	6293      	str	r3, [r2, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80084c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d105      	bne.n	80084da <find_volume+0x4ba>
 80084ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	e00e      	b.n	80084f8 <find_volume+0x4d8>
 80084da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e0:	699a      	ldr	r2, [r3, #24]
 80084e2:	4613      	mov	r3, r2
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	4413      	add	r3, r2
 80084e8:	085a      	lsrs	r2, r3, #1
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80084f8:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008500:	69da      	ldr	r2, [r3, #28]
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008508:	895b      	ldrh	r3, [r3, #10]
 800850a:	4619      	mov	r1, r3
 800850c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850e:	440b      	add	r3, r1
 8008510:	3b01      	subs	r3, #1
 8008512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008514:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8008518:	8949      	ldrh	r1, [r1, #10]
 800851a:	fbb3 f3f1 	udiv	r3, r3, r1
 800851e:	429a      	cmp	r2, r3
 8008520:	d201      	bcs.n	8008526 <find_volume+0x506>
		return FR_NO_FILESYSTEM;
 8008522:	230d      	movs	r3, #13
 8008524:	e0a9      	b.n	800867a <find_volume+0x65a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852c:	461a      	mov	r2, r3
 800852e:	f04f 33ff 	mov.w	r3, #4294967295
 8008532:	6153      	str	r3, [r2, #20]
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800853e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008542:	6113      	str	r3, [r2, #16]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800854a:	2280      	movs	r2, #128	; 0x80
 800854c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800854e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008552:	2b03      	cmp	r3, #3
 8008554:	d17a      	bne.n	800864c <find_volume+0x62c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	b21a      	sxth	r2, r3
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008566:	b21b      	sxth	r3, r3
 8008568:	4313      	orrs	r3, r2
 800856a:	b21b      	sxth	r3, r3
 800856c:	2b01      	cmp	r3, #1
 800856e:	d16d      	bne.n	800864c <find_volume+0x62c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008572:	3301      	adds	r3, #1
 8008574:	4619      	mov	r1, r3
 8008576:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008578:	f7fe fb6a 	bl	8006c50 <move_window>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d164      	bne.n	800864c <find_volume+0x62c>
	{
		fs->fsi_flag = 0;
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008588:	2200      	movs	r2, #0
 800858a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008592:	021b      	lsls	r3, r3, #8
 8008594:	b21a      	sxth	r2, r3
 8008596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008598:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800859c:	b21b      	sxth	r3, r3
 800859e:	4313      	orrs	r3, r2
 80085a0:	b21b      	sxth	r3, r3
 80085a2:	4a38      	ldr	r2, [pc, #224]	; (8008684 <find_volume+0x664>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d151      	bne.n	800864c <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	061a      	lsls	r2, r3, #24
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	789b      	ldrb	r3, [r3, #2]
 80085b2:	041b      	lsls	r3, r3, #16
 80085b4:	4313      	orrs	r3, r2
 80085b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085b8:	7852      	ldrb	r2, [r2, #1]
 80085ba:	0212      	lsls	r2, r2, #8
 80085bc:	4313      	orrs	r3, r2
 80085be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085c0:	7812      	ldrb	r2, [r2, #0]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	4a30      	ldr	r2, [pc, #192]	; (8008688 <find_volume+0x668>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d140      	bne.n	800864c <find_volume+0x62c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80085d0:	061a      	lsls	r2, r3, #24
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80085d8:	041b      	lsls	r3, r3, #16
 80085da:	4313      	orrs	r3, r2
 80085dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085de:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80085e2:	0212      	lsls	r2, r2, #8
 80085e4:	4313      	orrs	r3, r2
 80085e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085e8:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80085ec:	4313      	orrs	r3, r2
 80085ee:	4a27      	ldr	r2, [pc, #156]	; (800868c <find_volume+0x66c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d12b      	bne.n	800864c <find_volume+0x62c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80085fa:	061a      	lsls	r2, r3, #24
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008602:	041b      	lsls	r3, r3, #16
 8008604:	4313      	orrs	r3, r2
 8008606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008608:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800860c:	0212      	lsls	r2, r2, #8
 800860e:	4313      	orrs	r3, r2
 8008610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008612:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008616:	4313      	orrs	r3, r2
 8008618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800861a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800861e:	6153      	str	r3, [r2, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008626:	061a      	lsls	r2, r3, #24
 8008628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800862e:	041b      	lsls	r3, r3, #16
 8008630:	4313      	orrs	r3, r2
 8008632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008634:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008638:	0212      	lsls	r2, r2, #8
 800863a:	4313      	orrs	r3, r2
 800863c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800863e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008642:	4313      	orrs	r3, r2
 8008644:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800864a:	6113      	str	r3, [r2, #16]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008652:	461a      	mov	r2, r3
 8008654:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008658:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800865a:	4b0d      	ldr	r3, [pc, #52]	; (8008690 <find_volume+0x670>)
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	3301      	adds	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	4b0b      	ldr	r3, [pc, #44]	; (8008690 <find_volume+0x670>)
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <find_volume+0x670>)
 8008668:	881a      	ldrh	r2, [r3, #0]
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008670:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008672:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008674:	f7fe fa70 	bl	8006b58 <clear_lock>
#endif

	return FR_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3758      	adds	r7, #88	; 0x58
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	ffffaa55 	.word	0xffffaa55
 8008688:	41615252 	.word	0x41615252
 800868c:	61417272 	.word	0x61417272
 8008690:	200022f8 	.word	0x200022f8

08008694 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d02a      	beq.n	80086fc <validate+0x68>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d024      	beq.n	80086fc <validate+0x68>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01b      	beq.n	80086fc <validate+0x68>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d0:	88da      	ldrh	r2, [r3, #6]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086d8:	889b      	ldrh	r3, [r3, #4]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d10e      	bne.n	80086fc <validate+0x68>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ea:	785b      	ldrb	r3, [r3, #1]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fd ff53 	bl	8006598 <disk_status>
 80086f2:	4603      	mov	r3, r0
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <validate+0x6c>
		return FR_INVALID_OBJECT;
 80086fc:	2309      	movs	r3, #9
 80086fe:	e00c      	b.n	800871a <validate+0x86>

	ENTER_FF(fil->fs);		/* Lock file system */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe f85f 	bl	80067cc <lock_fs>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <validate+0x84>
 8008714:	230f      	movs	r3, #15
 8008716:	e000      	b.n	800871a <validate+0x86>

	return FR_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4613      	mov	r3, r2
 8008730:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008736:	f107 0310 	add.w	r3, r7, #16
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fbbe 	bl	8007ebc <get_ldnumber>
 8008740:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	2b00      	cmp	r3, #0
 8008746:	da01      	bge.n	800874c <f_mount+0x28>
 8008748:	230b      	movs	r3, #11
 800874a:	e050      	b.n	80087ee <f_mount+0xca>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800874c:	4a2a      	ldr	r2, [pc, #168]	; (80087f8 <f_mount+0xd4>)
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008754:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d013      	beq.n	8008784 <f_mount+0x60>
#if _FS_LOCK
		clear_lock(cfs);
 800875c:	69b8      	ldr	r0, [r7, #24]
 800875e:	f7fe f9fb 	bl	8006b58 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4618      	mov	r0, r3
 800876c:	f001 fe05 	bl	800a37a <ff_del_syncobj>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <f_mount+0x56>
 8008776:	2302      	movs	r3, #2
 8008778:	e039      	b.n	80087ee <f_mount+0xca>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008780:	2200      	movs	r2, #0
 8008782:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d013      	beq.n	80087b2 <f_mount+0x8e>
		fs->fs_type = 0;				/* Clear new fs object */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008790:	2200      	movs	r2, #0
 8008792:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	b2da      	uxtb	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879e:	330c      	adds	r3, #12
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f001 fdcb 	bl	800a33e <ff_cre_syncobj>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <f_mount+0x8e>
 80087ae:	2302      	movs	r3, #2
 80087b0:	e01d      	b.n	80087ee <f_mount+0xca>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	4910      	ldr	r1, [pc, #64]	; (80087f8 <f_mount+0xd4>)
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d002      	beq.n	80087c8 <f_mount+0xa4>
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d001      	beq.n	80087cc <f_mount+0xa8>
 80087c8:	2300      	movs	r3, #0
 80087ca:	e010      	b.n	80087ee <f_mount+0xca>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80087cc:	f107 0108 	add.w	r1, r7, #8
 80087d0:	f107 030c 	add.w	r3, r7, #12
 80087d4:	2200      	movs	r2, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fc22 	bl	8008020 <find_volume>
 80087dc:	4603      	mov	r3, r0
 80087de:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	7dfa      	ldrb	r2, [r7, #23]
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe f800 	bl	80067ec <unlock_fs>
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3720      	adds	r7, #32
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200022f4 	.word	0x200022f4

080087fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800880a:	f843 0c44 	str.w	r0, [r3, #-68]
 800880e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008812:	f843 1c48 	str.w	r1, [r3, #-72]
 8008816:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800881a:	f803 2c49 	strb.w	r2, [r3, #-73]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800881e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008822:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <f_open+0x32>
 800882a:	2309      	movs	r3, #9
 800882c:	e2f3      	b.n	8008e16 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 800882e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008832:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883a:	461a      	mov	r2, r3
 800883c:	2300      	movs	r3, #0
 800883e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008840:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008844:	461a      	mov	r2, r3
 8008846:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800884a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800884e:	f003 031f 	and.w	r3, r3, #31
 8008852:	f802 3c49 	strb.w	r3, [r2, #-73]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008856:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800885a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800885e:	f023 0301 	bic.w	r3, r3, #1
 8008862:	b2da      	uxtb	r2, r3
 8008864:	f107 0110 	add.w	r1, r7, #16
 8008868:	3908      	subs	r1, #8
 800886a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800886e:	3b10      	subs	r3, #16
 8008870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fbd3 	bl	8008020 <find_volume>
 800887a:	4603      	mov	r3, r0
 800887c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008880:	f102 020f 	add.w	r2, r2, #15
 8008884:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008886:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800888a:	f103 030f 	add.w	r3, r3, #15
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f040 82ae 	bne.w	8008df2 <f_open+0x5f6>
		INIT_BUF(dj);
 8008896:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800889a:	461a      	mov	r2, r3
 800889c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088a0:	3b1c      	subs	r3, #28
 80088a2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80088a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80088aa:	f853 2c48 	ldr.w	r2, [r3, #-72]
 80088ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088b2:	3b10      	subs	r3, #16
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff fa8a 	bl	8007dd0 <follow_path>
 80088bc:	4603      	mov	r3, r0
 80088be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80088c2:	f102 020f 	add.w	r2, r2, #15
 80088c6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80088c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80088cc:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 80088d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80088d4:	f102 0208 	add.w	r2, r2, #8
 80088d8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80088da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80088de:	f103 030f 	add.w	r3, r3, #15
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d126      	bne.n	8008936 <f_open+0x13a>
			if (!dir)	/* Default directory itself */
 80088e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80088ec:	f103 0308 	add.w	r3, r3, #8
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <f_open+0x108>
				res = FR_INVALID_NAME;
 80088f6:	2306      	movs	r3, #6
 80088f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80088fc:	f102 020f 	add.w	r2, r2, #15
 8008900:	7013      	strb	r3, [r2, #0]
 8008902:	e018      	b.n	8008936 <f_open+0x13a>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008904:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008908:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	bf14      	ite	ne
 8008914:	2301      	movne	r3, #1
 8008916:	2300      	moveq	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	461a      	mov	r2, r3
 800891c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008920:	3b10      	subs	r3, #16
 8008922:	4611      	mov	r1, r2
 8008924:	4618      	mov	r0, r3
 8008926:	f7fd ff81 	bl	800682c <chk_lock>
 800892a:	4603      	mov	r3, r0
 800892c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008930:	f102 020f 	add.w	r2, r2, #15
 8008934:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008936:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800893a:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 800893e:	f003 031c 	and.w	r3, r3, #28
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 8134 	beq.w	8008bb0 <f_open+0x3b4>
			if (res != FR_OK) {					/* No file, create new */
 8008948:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800894c:	f103 030f 	add.w	r3, r3, #15
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d02e      	beq.n	80089b4 <f_open+0x1b8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008956:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800895a:	f103 030f 	add.w	r3, r3, #15
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b04      	cmp	r3, #4
 8008962:	d112      	bne.n	800898a <f_open+0x18e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008964:	f7fd ffd2 	bl	800690c <enq_lock>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <f_open+0x182>
 800896e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008972:	3b10      	subs	r3, #16
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff f929 	bl	8007bcc <dir_register>
 800897a:	4603      	mov	r3, r0
 800897c:	e000      	b.n	8008980 <f_open+0x184>
 800897e:	2312      	movs	r3, #18
 8008980:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008984:	f102 020f 	add.w	r2, r2, #15
 8008988:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800898a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800898e:	461a      	mov	r2, r3
 8008990:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008994:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008998:	f043 0308 	orr.w	r3, r3, #8
 800899c:	f802 3c49 	strb.w	r3, [r2, #-73]
				dir = dj.dir;					/* New entry */
 80089a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089a4:	f8d3 3fe4 	ldr.w	r3, [r3, #4068]	; 0xfe4
 80089a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80089ac:	f102 0208 	add.w	r2, r2, #8
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	e01f      	b.n	80089f4 <f_open+0x1f8>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80089b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089b8:	f103 0308 	add.w	r3, r3, #8
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330b      	adds	r3, #11
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 0311 	and.w	r3, r3, #17
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d006      	beq.n	80089d8 <f_open+0x1dc>
					res = FR_DENIED;
 80089ca:	2307      	movs	r3, #7
 80089cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80089d0:	f102 020f 	add.w	r2, r2, #15
 80089d4:	7013      	strb	r3, [r2, #0]
 80089d6:	e00d      	b.n	80089f4 <f_open+0x1f8>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80089d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089dc:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <f_open+0x1f8>
						res = FR_EXIST;
 80089e8:	2308      	movs	r3, #8
 80089ea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80089ee:	f102 020f 	add.w	r2, r2, #15
 80089f2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80089f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089f8:	f103 030f 	add.w	r3, r3, #15
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f040 8108 	bne.w	8008c14 <f_open+0x418>
 8008a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a08:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008a0c:	f003 0308 	and.w	r3, r3, #8
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 80ff 	beq.w	8008c14 <f_open+0x418>
				dw = GET_FATTIME();				/* Created time */
 8008a16:	f7fd fd61 	bl	80064dc <get_fattime>
 8008a1a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a1e:	f103 0304 	add.w	r3, r3, #4
 8008a22:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008a24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a28:	f103 0308 	add.w	r3, r3, #8
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330e      	adds	r3, #14
 8008a30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a34:	f102 0204 	add.w	r2, r2, #4
 8008a38:	6812      	ldr	r2, [r2, #0]
 8008a3a:	b2d2      	uxtb	r2, r2
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a42:	f103 0304 	add.w	r3, r3, #4
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	0a1b      	lsrs	r3, r3, #8
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a52:	f103 0308 	add.w	r3, r3, #8
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	330f      	adds	r3, #15
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a62:	f103 0304 	add.w	r3, r3, #4
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	0c1a      	lsrs	r2, r3, #16
 8008a6a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a6e:	f103 0308 	add.w	r3, r3, #8
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3310      	adds	r3, #16
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a7e:	f103 0304 	add.w	r3, r3, #4
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	0e1a      	lsrs	r2, r3, #24
 8008a86:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a8a:	f103 0308 	add.w	r3, r3, #8
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3311      	adds	r3, #17
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008a96:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a9a:	f103 0308 	add.w	r3, r3, #8
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	330b      	adds	r3, #11
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008aa6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008aaa:	f103 0308 	add.w	r3, r3, #8
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	331c      	adds	r3, #28
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
 8008ab6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008aba:	f103 0308 	add.w	r3, r3, #8
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	331d      	adds	r3, #29
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	701a      	strb	r2, [r3, #0]
 8008ac6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008aca:	f103 0308 	add.w	r3, r3, #8
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	331e      	adds	r3, #30
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ada:	f103 0308 	add.w	r3, r3, #8
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	331f      	adds	r3, #31
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008ae6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008aea:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008aee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008af2:	f102 0208 	add.w	r2, r2, #8
 8008af6:	6811      	ldr	r1, [r2, #0]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fe ffbe 	bl	8007a7a <ld_clust>
 8008afe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b02:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008b04:	2100      	movs	r1, #0
 8008b06:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b0a:	f103 0308 	add.w	r3, r3, #8
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	f7fe ffe2 	bl	8007ad8 <st_clust>
				dj.fs->wflag = 1;
 8008b14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b18:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b20:	2201      	movs	r2, #1
 8008b22:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8008b24:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d072      	beq.n	8008c14 <f_open+0x418>
					dw = dj.fs->winsect;
 8008b2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b32:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b40:	f102 0204 	add.w	r2, r2, #4
 8008b44:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008b46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b4a:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008b4e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b52:	6811      	ldr	r1, [r2, #0]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe fbe0 	bl	800731a <remove_chain>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b60:	f102 020f 	add.w	r2, r2, #15
 8008b64:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8008b66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b6a:	f103 030f 	add.w	r3, r3, #15
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d14f      	bne.n	8008c14 <f_open+0x418>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b78:	f8d3 2fd0 	ldr.w	r2, [r3, #4048]	; 0xfd0
 8008b7c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008b88:	6113      	str	r3, [r2, #16]
						res = move_window(dj.fs, dw);
 8008b8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008b8e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008b92:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b96:	f102 0204 	add.w	r2, r2, #4
 8008b9a:	6811      	ldr	r1, [r2, #0]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe f857 	bl	8006c50 <move_window>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ba8:	f102 020f 	add.w	r2, r2, #15
 8008bac:	7013      	strb	r3, [r2, #0]
 8008bae:	e031      	b.n	8008c14 <f_open+0x418>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008bb0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bb4:	f103 030f 	add.w	r3, r3, #15
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d12a      	bne.n	8008c14 <f_open+0x418>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008bbe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bc2:	f103 0308 	add.w	r3, r3, #8
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	330b      	adds	r3, #11
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d006      	beq.n	8008be2 <f_open+0x3e6>
					res = FR_NO_FILE;
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008bda:	f102 020f 	add.w	r2, r2, #15
 8008bde:	7013      	strb	r3, [r2, #0]
 8008be0:	e018      	b.n	8008c14 <f_open+0x418>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008be2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008be6:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008bea:	f003 0302 	and.w	r3, r3, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d010      	beq.n	8008c14 <f_open+0x418>
 8008bf2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bf6:	f103 0308 	add.w	r3, r3, #8
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	330b      	adds	r3, #11
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <f_open+0x418>
						res = FR_DENIED;
 8008c08:	2307      	movs	r3, #7
 8008c0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c0e:	f102 020f 	add.w	r2, r2, #15
 8008c12:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008c14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c18:	f103 030f 	add.w	r3, r3, #15
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d157      	bne.n	8008cd2 <f_open+0x4d6>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008c22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c26:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008c2a:	f003 0308 	and.w	r3, r3, #8
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <f_open+0x44c>
				mode |= FA__WRITTEN;
 8008c32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c36:	461a      	mov	r2, r3
 8008c38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c3c:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008c40:	f043 0320 	orr.w	r3, r3, #32
 8008c44:	f802 3c49 	strb.w	r3, [r2, #-73]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008c48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c4c:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008c5a:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008c5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c62:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008c64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c68:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c70:	461a      	mov	r2, r3
 8008c72:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c76:	f103 0308 	add.w	r3, r3, #8
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c82:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008c86:	f023 0301 	bic.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	bf14      	ite	ne
 8008c8e:	2301      	movne	r3, #1
 8008c90:	2300      	moveq	r3, #0
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	461a      	mov	r2, r3
 8008c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c9a:	3b10      	subs	r3, #16
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fd fe58 	bl	8006954 <inc_lock>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008caa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cb2:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008cb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008cb8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d105      	bne.n	8008cd2 <f_open+0x4d6>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ccc:	f102 020f 	add.w	r2, r2, #15
 8008cd0:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008cd2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008cd6:	f103 030f 	add.w	r3, r3, #15
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f040 8088 	bne.w	8008df2 <f_open+0x5f6>
			fp->flag = mode;					/* File access mode */
 8008ce2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ce6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008cf4:	f813 3c49 	ldrb.w	r3, [r3, #-73]
 8008cf8:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8008cfa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008cfe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d06:	2200      	movs	r2, #0
 8008d08:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008d0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d0e:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008d12:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d16:	f102 0208 	add.w	r2, r2, #8
 8008d1a:	6811      	ldr	r1, [r2, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe feac 	bl	8007a7a <ld_clust>
 8008d22:	4602      	mov	r2, r0
 8008d24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d28:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d30:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008d32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d36:	f103 0308 	add.w	r3, r3, #8
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	331f      	adds	r3, #31
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	061a      	lsls	r2, r3, #24
 8008d42:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d46:	f103 0308 	add.w	r3, r3, #8
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	331e      	adds	r3, #30
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	041b      	lsls	r3, r3, #16
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d58:	f102 0208 	add.w	r2, r2, #8
 8008d5c:	6812      	ldr	r2, [r2, #0]
 8008d5e:	321d      	adds	r2, #29
 8008d60:	7812      	ldrb	r2, [r2, #0]
 8008d62:	0212      	lsls	r2, r2, #8
 8008d64:	4313      	orrs	r3, r2
 8008d66:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d6a:	f102 0208 	add.w	r2, r2, #8
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	321c      	adds	r2, #28
 8008d72:	7812      	ldrb	r2, [r2, #0]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008d7a:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008d7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d82:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8008d84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d88:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d90:	461a      	mov	r2, r3
 8008d92:	2300      	movs	r3, #0
 8008d94:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8008d96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da2:	461a      	mov	r2, r3
 8008da4:	2300      	movs	r3, #0
 8008da6:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008da8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dac:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db4:	461a      	mov	r2, r3
 8008db6:	2300      	movs	r3, #0
 8008db8:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008dba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dbe:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008dc2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008dc6:	f852 2c44 	ldr.w	r2, [r2, #-68]
 8008dca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008dce:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8008dd0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008dd4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de2:	88da      	ldrh	r2, [r3, #6]
 8008de4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008de8:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df0:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008df2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008df6:	f8d3 3fd0 	ldr.w	r3, [r3, #4048]	; 0xfd0
 8008dfa:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008dfe:	f102 020f 	add.w	r2, r2, #15
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fd fcf0 	bl	80067ec <unlock_fs>
 8008e0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e10:	f103 030f 	add.w	r3, r3, #15
 8008e14:	781b      	ldrb	r3, [r3, #0]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b08c      	sub	sp, #48	; 0x30
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	60f8      	str	r0, [r7, #12]
 8008e2a:	60b9      	str	r1, [r7, #8]
 8008e2c:	607a      	str	r2, [r7, #4]
 8008e2e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff fc2a 	bl	8008694 <validate>
 8008e40:	4603      	mov	r3, r0
 8008e42:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008e44:	7ffb      	ldrb	r3, [r7, #31]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00a      	beq.n	8008e60 <f_read+0x3e>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	7ffa      	ldrb	r2, [r7, #31]
 8008e54:	4611      	mov	r1, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fd fcc8 	bl	80067ec <unlock_fs>
 8008e5c:	7ffb      	ldrb	r3, [r7, #31]
 8008e5e:	e219      	b.n	8009294 <f_read+0x472>
	if (fp->err)								/* Check error */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e66:	79db      	ldrb	r3, [r3, #7]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d010      	beq.n	8008e8e <f_read+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e7a:	79db      	ldrb	r3, [r3, #7]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	f7fd fcb4 	bl	80067ec <unlock_fs>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e8a:	79db      	ldrb	r3, [r3, #7]
 8008e8c:	e202      	b.n	8009294 <f_read+0x472>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e94:	799b      	ldrb	r3, [r3, #6]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d109      	bne.n	8008eb2 <f_read+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2107      	movs	r1, #7
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fd fc9f 	bl	80067ec <unlock_fs>
 8008eae:	2307      	movs	r3, #7
 8008eb0:	e1f0      	b.n	8009294 <f_read+0x472>
	remain = fp->fsize - fp->fptr;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	f240 81d5 	bls.w	800927a <f_read+0x458>
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008ed4:	e1d1      	b.n	800927a <f_read+0x458>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008eea:	8952      	ldrh	r2, [r2, #10]
 8008eec:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ef0:	fb01 f202 	mul.w	r2, r1, r2
 8008ef4:	1a9b      	subs	r3, r3, r2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f040 8170 	bne.w	80091dc <f_read+0x3ba>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f10:	8952      	ldrh	r2, [r2, #10]
 8008f12:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f16:	b2da      	uxtb	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f24:	789b      	ldrb	r3, [r3, #2]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d153      	bne.n	8008fdc <f_read+0x1ba>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d105      	bne.n	8008f4c <f_read+0x12a>
					clst = fp->sclust;			/* Follow from the origin */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f4a:	e01c      	b.n	8008f86 <f_read+0x164>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <f_read+0x14a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	4619      	mov	r1, r3
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f7fe fae2 	bl	800752c <clmt_clust>
 8008f68:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008f6a:	e00c      	b.n	8008f86 <f_read+0x164>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	4610      	mov	r0, r2
 8008f80:	f7fd ff7c 	bl	8006e7c <get_fat>
 8008f84:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8008f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d80e      	bhi.n	8008faa <f_read+0x188>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f92:	2202      	movs	r2, #2
 8008f94:	71da      	strb	r2, [r3, #7]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2102      	movs	r1, #2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fd fc23 	bl	80067ec <unlock_fs>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e174      	b.n	8009294 <f_read+0x472>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb0:	d10e      	bne.n	8008fd0 <f_read+0x1ae>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fb8:	2201      	movs	r2, #1
 8008fba:	71da      	strb	r2, [r3, #7]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fd fc10 	bl	80067ec <unlock_fs>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e161      	b.n	8009294 <f_read+0x472>
				fp->clust = clst;				/* Update current cluster */
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	4619      	mov	r1, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	f7fd ff1f 	bl	8006e32 <clust2sect>
 8008ff4:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10e      	bne.n	800901a <f_read+0x1f8>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009002:	2202      	movs	r2, #2
 8009004:	71da      	strb	r2, [r3, #7]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f7fd fbeb 	bl	80067ec <unlock_fs>
 8009016:	2302      	movs	r3, #2
 8009018:	e13c      	b.n	8009294 <f_read+0x472>
			sect += csect;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	4413      	add	r3, r2
 8009020:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800902e:	895b      	ldrh	r3, [r3, #10]
 8009030:	461a      	mov	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	fbb3 f3f2 	udiv	r3, r3, r2
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	d06e      	beq.n	800911e <f_read+0x2fc>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009040:	7dfa      	ldrb	r2, [r7, #23]
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	4413      	add	r3, r2
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800904c:	6812      	ldr	r2, [r2, #0]
 800904e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009052:	7892      	ldrb	r2, [r2, #2]
 8009054:	4293      	cmp	r3, r2
 8009056:	d90a      	bls.n	800906e <f_read+0x24c>
					cc = fp->fs->csize - csect;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009064:	789b      	ldrb	r3, [r3, #2]
 8009066:	461a      	mov	r2, r3
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800907a:	7858      	ldrb	r0, [r3, #1]
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	6a39      	ldr	r1, [r7, #32]
 8009082:	f7fd fac9 	bl	8006618 <disk_read>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00e      	beq.n	80090aa <f_read+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009092:	2201      	movs	r2, #1
 8009094:	71da      	strb	r2, [r3, #7]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2101      	movs	r1, #1
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fd fba3 	bl	80067ec <unlock_fs>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e0f4      	b.n	8009294 <f_read+0x472>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b0:	799b      	ldrb	r3, [r3, #6]
 80090b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d024      	beq.n	8009104 <f_read+0x2e2>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	1ad3      	subs	r3, r2, r3
 80090c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d91b      	bls.n	8009104 <f_read+0x2e2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80090de:	6812      	ldr	r2, [r2, #0]
 80090e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80090e4:	8952      	ldrh	r2, [r2, #10]
 80090e6:	fb02 f303 	mul.w	r3, r2, r3
 80090ea:	6a3a      	ldr	r2, [r7, #32]
 80090ec:	18d0      	adds	r0, r2, r3
 80090ee:	68f9      	ldr	r1, [r7, #12]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fc:	895b      	ldrh	r3, [r3, #10]
 80090fe:	461a      	mov	r2, r3
 8009100:	f7fd fae8 	bl	80066d4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009110:	895b      	ldrh	r3, [r3, #10]
 8009112:	461a      	mov	r2, r3
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	fb02 f303 	mul.w	r3, r2, r3
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800911c:	e095      	b.n	800924a <f_read+0x428>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	429a      	cmp	r2, r3
 800912a:	d051      	beq.n	80091d0 <f_read+0x3ae>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009132:	799b      	ldrb	r3, [r3, #6]
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d02b      	beq.n	8009194 <f_read+0x372>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009148:	7858      	ldrb	r0, [r3, #1]
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009152:	699a      	ldr	r2, [r3, #24]
 8009154:	2301      	movs	r3, #1
 8009156:	f7fd fa7f 	bl	8006658 <disk_write>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00e      	beq.n	800917e <f_read+0x35c>
						ABORT(fp->fs, FR_DISK_ERR);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009166:	2201      	movs	r2, #1
 8009168:	71da      	strb	r2, [r3, #7]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2101      	movs	r1, #1
 8009174:	4618      	mov	r0, r3
 8009176:	f7fd fb39 	bl	80067ec <unlock_fs>
 800917a:	2301      	movs	r3, #1
 800917c:	e08a      	b.n	8009294 <f_read+0x472>
					fp->flag &= ~FA__DIRTY;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009184:	799b      	ldrb	r3, [r3, #6]
 8009186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918a:	b2da      	uxtb	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009192:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a0:	7858      	ldrb	r0, [r3, #1]
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	2301      	movs	r3, #1
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	f7fd fa36 	bl	8006618 <disk_read>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00e      	beq.n	80091d0 <f_read+0x3ae>
					ABORT(fp->fs, FR_DISK_ERR);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b8:	2201      	movs	r2, #1
 80091ba:	71da      	strb	r2, [r3, #7]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2101      	movs	r1, #1
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fd fb10 	bl	80067ec <unlock_fs>
 80091cc:	2301      	movs	r3, #1
 80091ce:	e061      	b.n	8009294 <f_read+0x472>
			}
#endif
			fp->dsect = sect;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d6:	461a      	mov	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e8:	895b      	ldrh	r3, [r3, #10]
 80091ea:	4618      	mov	r0, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009200:	8952      	ldrh	r2, [r2, #10]
 8009202:	fbb3 f1f2 	udiv	r1, r3, r2
 8009206:	fb01 f202 	mul.w	r2, r1, r2
 800920a:	1a9b      	subs	r3, r3, r2
 800920c:	1ac3      	subs	r3, r0, r3
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8009210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d901      	bls.n	800921c <f_read+0x3fa>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800922a:	6812      	ldr	r2, [r2, #0]
 800922c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009230:	8952      	ldrh	r2, [r2, #10]
 8009232:	fbb3 f1f2 	udiv	r1, r3, r2
 8009236:	fb01 f202 	mul.w	r2, r1, r2
 800923a:	1a9b      	subs	r3, r3, r2
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009242:	4619      	mov	r1, r3
 8009244:	6a38      	ldr	r0, [r7, #32]
 8009246:	f7fd fa45 	bl	80066d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800924a:	6a3a      	ldr	r2, [r7, #32]
 800924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924e:	4413      	add	r3, r2
 8009250:	623b      	str	r3, [r7, #32]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009258:	689a      	ldr	r2, [r3, #8]
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	4413      	add	r3, r2
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009264:	6093      	str	r3, [r2, #8]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	441a      	add	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f47f ae2a 	bne.w	8008ed6 <f_read+0xb4>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2100      	movs	r1, #0
 800928c:	4618      	mov	r0, r3
 800928e:	f7fd faad 	bl	80067ec <unlock_fs>
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3730      	adds	r7, #48	; 0x30
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08a      	sub	sp, #40	; 0x28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff f9ed 	bl	8008694 <validate>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80092be:	7dfb      	ldrb	r3, [r7, #23]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00a      	beq.n	80092da <f_write+0x3e>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	7dfa      	ldrb	r2, [r7, #23]
 80092ce:	4611      	mov	r1, r2
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fd fa8b 	bl	80067ec <unlock_fs>
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	e26a      	b.n	80097b0 <f_write+0x514>
	if (fp->err)							/* Check error */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092e0:	79db      	ldrb	r3, [r3, #7]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d010      	beq.n	8009308 <f_write+0x6c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f4:	79db      	ldrb	r3, [r3, #7]
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f7fd fa77 	bl	80067ec <unlock_fs>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009304:	79db      	ldrb	r3, [r3, #7]
 8009306:	e253      	b.n	80097b0 <f_write+0x514>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930e:	799b      	ldrb	r3, [r3, #6]
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d109      	bne.n	800932c <f_write+0x90>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2107      	movs	r1, #7
 8009322:	4618      	mov	r0, r3
 8009324:	f7fd fa62 	bl	80067ec <unlock_fs>
 8009328:	2307      	movs	r3, #7
 800932a:	e241      	b.n	80097b0 <f_write+0x514>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	441a      	add	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	429a      	cmp	r2, r3
 8009342:	f080 8209 	bcs.w	8009758 <f_write+0x4bc>
 8009346:	2300      	movs	r3, #0
 8009348:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800934a:	e205      	b.n	8009758 <f_write+0x4bc>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800935a:	6812      	ldr	r2, [r2, #0]
 800935c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009360:	8952      	ldrh	r2, [r2, #10]
 8009362:	fbb3 f1f2 	udiv	r1, r3, r2
 8009366:	fb01 f202 	mul.w	r2, r1, r2
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	2b00      	cmp	r3, #0
 800936e:	f040 8199 	bne.w	80096a4 <f_write+0x408>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009380:	6812      	ldr	r2, [r2, #0]
 8009382:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009386:	8952      	ldrh	r2, [r2, #10]
 8009388:	fbb3 f3f2 	udiv	r3, r3, r2
 800938c:	b2da      	uxtb	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800939a:	789b      	ldrb	r3, [r3, #2]
 800939c:	3b01      	subs	r3, #1
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	4013      	ands	r3, r2
 80093a2:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80093a4:	7dbb      	ldrb	r3, [r7, #22]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d16f      	bne.n	800948a <f_write+0x1ee>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d111      	bne.n	80093da <f_write+0x13e>
					clst = fp->sclust;		/* Follow from the origin */
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d126      	bne.n	8009414 <f_write+0x178>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2100      	movs	r1, #0
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe f803 	bl	80073dc <create_chain>
 80093d6:	6278      	str	r0, [r7, #36]	; 0x24
 80093d8:	e01c      	b.n	8009414 <f_write+0x178>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d009      	beq.n	80093fa <f_write+0x15e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	4619      	mov	r1, r3
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7fe f89b 	bl	800752c <clmt_clust>
 80093f6:	6278      	str	r0, [r7, #36]	; 0x24
 80093f8:	e00c      	b.n	8009414 <f_write+0x178>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f7fd ffe5 	bl	80073dc <create_chain>
 8009412:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 81a3 	beq.w	8009762 <f_write+0x4c6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	2b01      	cmp	r3, #1
 8009420:	d10e      	bne.n	8009440 <f_write+0x1a4>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009428:	2202      	movs	r2, #2
 800942a:	71da      	strb	r2, [r3, #7]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2102      	movs	r1, #2
 8009436:	4618      	mov	r0, r3
 8009438:	f7fd f9d8 	bl	80067ec <unlock_fs>
 800943c:	2302      	movs	r3, #2
 800943e:	e1b7      	b.n	80097b0 <f_write+0x514>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009446:	d10e      	bne.n	8009466 <f_write+0x1ca>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800944e:	2201      	movs	r2, #1
 8009450:	71da      	strb	r2, [r3, #7]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	2101      	movs	r1, #1
 800945c:	4618      	mov	r0, r3
 800945e:	f7fd f9c5 	bl	80067ec <unlock_fs>
 8009462:	2301      	movs	r3, #1
 8009464:	e1a4      	b.n	80097b0 <f_write+0x514>
				fp->clust = clst;			/* Update current cluster */
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800946c:	461a      	mov	r2, r3
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d105      	bne.n	800948a <f_write+0x1ee>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009484:	461a      	mov	r2, r3
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009490:	799b      	ldrb	r3, [r3, #6]
 8009492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d02b      	beq.n	80094f2 <f_write+0x256>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a6:	7858      	ldrb	r0, [r3, #1]
 80094a8:	68f9      	ldr	r1, [r7, #12]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	2301      	movs	r3, #1
 80094b4:	f7fd f8d0 	bl	8006658 <disk_write>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00e      	beq.n	80094dc <f_write+0x240>
					ABORT(fp->fs, FR_DISK_ERR);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c4:	2201      	movs	r2, #1
 80094c6:	71da      	strb	r2, [r3, #7]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2101      	movs	r1, #1
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fd f98a 	bl	80067ec <unlock_fs>
 80094d8:	2301      	movs	r3, #1
 80094da:	e169      	b.n	80097b0 <f_write+0x514>
				fp->flag &= ~FA__DIRTY;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094e2:	799b      	ldrb	r3, [r3, #6]
 80094e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f0:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	4619      	mov	r1, r3
 8009504:	4610      	mov	r0, r2
 8009506:	f7fd fc94 	bl	8006e32 <clust2sect>
 800950a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10e      	bne.n	8009530 <f_write+0x294>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009518:	2202      	movs	r2, #2
 800951a:	71da      	strb	r2, [r3, #7]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2102      	movs	r1, #2
 8009526:	4618      	mov	r0, r3
 8009528:	f7fd f960 	bl	80067ec <unlock_fs>
 800952c:	2302      	movs	r3, #2
 800952e:	e13f      	b.n	80097b0 <f_write+0x514>
			sect += csect;
 8009530:	7dbb      	ldrb	r3, [r7, #22]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	4413      	add	r3, r2
 8009536:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009544:	895b      	ldrh	r3, [r3, #10]
 8009546:	461a      	mov	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	fbb3 f3f2 	udiv	r3, r3, r2
 800954e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d071      	beq.n	800963a <f_write+0x39e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009556:	7dba      	ldrb	r2, [r7, #22]
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	4413      	add	r3, r2
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009562:	6812      	ldr	r2, [r2, #0]
 8009564:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009568:	7892      	ldrb	r2, [r2, #2]
 800956a:	4293      	cmp	r3, r2
 800956c:	d90a      	bls.n	8009584 <f_write+0x2e8>
					cc = fp->fs->csize - csect;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957a:	789b      	ldrb	r3, [r3, #2]
 800957c:	461a      	mov	r2, r3
 800957e:	7dbb      	ldrb	r3, [r7, #22]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009590:	7858      	ldrb	r0, [r3, #1]
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	69b9      	ldr	r1, [r7, #24]
 8009598:	f7fd f85e 	bl	8006658 <disk_write>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00e      	beq.n	80095c0 <f_write+0x324>
					ABORT(fp->fs, FR_DISK_ERR);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095a8:	2201      	movs	r2, #1
 80095aa:	71da      	strb	r2, [r3, #7]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2101      	movs	r1, #1
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fd f918 	bl	80067ec <unlock_fs>
 80095bc:	2301      	movs	r3, #1
 80095be:	e0f7      	b.n	80097b0 <f_write+0x514>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c6:	699a      	ldr	r2, [r3, #24]
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d926      	bls.n	8009620 <f_write+0x384>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095da:	699a      	ldr	r2, [r3, #24]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	1ad3      	subs	r3, r2, r3
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095e6:	6812      	ldr	r2, [r2, #0]
 80095e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80095ec:	8952      	ldrh	r2, [r2, #10]
 80095ee:	fb02 f303 	mul.w	r3, r2, r3
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	18d1      	adds	r1, r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009602:	895b      	ldrh	r3, [r3, #10]
 8009604:	461a      	mov	r2, r3
 8009606:	f7fd f865 	bl	80066d4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009610:	799b      	ldrb	r3, [r3, #6]
 8009612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009616:	b2da      	uxtb	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800961e:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800962c:	895b      	ldrh	r3, [r3, #10]
 800962e:	461a      	mov	r2, r3
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	fb02 f303 	mul.w	r3, r2, r3
 8009636:	623b      	str	r3, [r7, #32]
				continue;
 8009638:	e076      	b.n	8009728 <f_write+0x48c>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009640:	699b      	ldr	r3, [r3, #24]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	429a      	cmp	r2, r3
 8009646:	d027      	beq.n	8009698 <f_write+0x3fc>
				if (fp->fptr < fp->fsize &&
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	429a      	cmp	r2, r3
 800965a:	d21d      	bcs.n	8009698 <f_write+0x3fc>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009668:	7858      	ldrb	r0, [r3, #1]
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	2301      	movs	r3, #1
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	f7fc ffd2 	bl	8006618 <disk_read>
 8009674:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00e      	beq.n	8009698 <f_write+0x3fc>
						ABORT(fp->fs, FR_DISK_ERR);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009680:	2201      	movs	r2, #1
 8009682:	71da      	strb	r2, [r3, #7]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2101      	movs	r1, #1
 800968e:	4618      	mov	r0, r3
 8009690:	f7fd f8ac 	bl	80067ec <unlock_fs>
 8009694:	2301      	movs	r3, #1
 8009696:	e08b      	b.n	80097b0 <f_write+0x514>
			}
#endif
			fp->dsect = sect;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800969e:	461a      	mov	r2, r3
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b0:	895b      	ldrh	r3, [r3, #10]
 80096b2:	4618      	mov	r0, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096c2:	6812      	ldr	r2, [r2, #0]
 80096c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096c8:	8952      	ldrh	r2, [r2, #10]
 80096ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80096ce:	fb01 f202 	mul.w	r2, r1, r2
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	1ac3      	subs	r3, r0, r3
 80096d6:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80096d8:	6a3a      	ldr	r2, [r7, #32]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d901      	bls.n	80096e4 <f_write+0x448>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096f2:	6812      	ldr	r2, [r2, #0]
 80096f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80096f8:	8952      	ldrh	r2, [r2, #10]
 80096fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80096fe:	fb01 f202 	mul.w	r2, r1, r2
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	4413      	add	r3, r2
 8009708:	6a3a      	ldr	r2, [r7, #32]
 800970a:	69b9      	ldr	r1, [r7, #24]
 800970c:	4618      	mov	r0, r3
 800970e:	f7fc ffe1 	bl	80066d4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009718:	799b      	ldrb	r3, [r3, #6]
 800971a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800971e:	b2da      	uxtb	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009726:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	4413      	add	r3, r2
 800972e:	61bb      	str	r3, [r7, #24]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	4413      	add	r3, r2
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009742:	6093      	str	r3, [r2, #8]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	441a      	add	r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f47f adf6 	bne.w	800934c <f_write+0xb0>
 8009760:	e000      	b.n	8009764 <f_write+0x4c8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009762:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	429a      	cmp	r2, r3
 8009776:	d907      	bls.n	8009788 <f_write+0x4ec>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009786:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800978e:	799b      	ldrb	r3, [r3, #6]
 8009790:	f043 0320 	orr.w	r3, r3, #32
 8009794:	b2da      	uxtb	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800979c:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fd f81f 	bl	80067ec <unlock_fs>
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3728      	adds	r7, #40	; 0x28
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7fe ff67 	bl	8008694 <validate>
 80097c6:	4603      	mov	r3, r0
 80097c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 80c4 	bne.w	800995a <f_sync+0x1a2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d8:	799b      	ldrb	r3, [r3, #6]
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 80bb 	beq.w	800995a <f_sync+0x1a2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ea:	799b      	ldrb	r3, [r3, #6]
 80097ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d026      	beq.n	8009842 <f_sync+0x8a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009800:	7858      	ldrb	r0, [r3, #1]
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800980a:	699a      	ldr	r2, [r3, #24]
 800980c:	2301      	movs	r3, #1
 800980e:	f7fc ff23 	bl	8006658 <disk_write>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d009      	beq.n	800982c <f_sync+0x74>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2101      	movs	r1, #1
 8009822:	4618      	mov	r0, r3
 8009824:	f7fc ffe2 	bl	80067ec <unlock_fs>
 8009828:	2301      	movs	r3, #1
 800982a:	e0a0      	b.n	800996e <f_sync+0x1b6>
				fp->flag &= ~FA__DIRTY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009832:	799b      	ldrb	r3, [r3, #6]
 8009834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009838:	b2da      	uxtb	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009840:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f7fd f9fb 	bl	8006c50 <move_window>
 800985a:	4603      	mov	r3, r0
 800985c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800985e:	7dfb      	ldrb	r3, [r7, #23]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d17a      	bne.n	800995a <f_sync+0x1a2>
				dir = fp->dir_ptr;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	330b      	adds	r3, #11
 8009872:	781a      	ldrb	r2, [r3, #0]
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	330b      	adds	r3, #11
 8009878:	f042 0220 	orr.w	r2, r2, #32
 800987c:	b2d2      	uxtb	r2, r2
 800987e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	331c      	adds	r3, #28
 800988c:	b2d2      	uxtb	r2, r2
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	b29b      	uxth	r3, r3
 800989a:	0a1b      	lsrs	r3, r3, #8
 800989c:	b29a      	uxth	r2, r3
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	331d      	adds	r3, #29
 80098a2:	b2d2      	uxtb	r2, r2
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	0c1a      	lsrs	r2, r3, #16
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	331e      	adds	r3, #30
 80098b4:	b2d2      	uxtb	r2, r2
 80098b6:	701a      	strb	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	0e1a      	lsrs	r2, r3, #24
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	331f      	adds	r3, #31
 80098c6:	b2d2      	uxtb	r2, r2
 80098c8:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6938      	ldr	r0, [r7, #16]
 80098d6:	f7fe f8ff 	bl	8007ad8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80098da:	f7fc fdff 	bl	80064dc <get_fattime>
 80098de:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	3316      	adds	r3, #22
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	701a      	strb	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	0a1b      	lsrs	r3, r3, #8
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	3317      	adds	r3, #23
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	0c1a      	lsrs	r2, r3, #16
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	3318      	adds	r3, #24
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	0e1a      	lsrs	r2, r3, #24
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	3319      	adds	r3, #25
 800990e:	b2d2      	uxtb	r2, r2
 8009910:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	3312      	adds	r3, #18
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	3313      	adds	r3, #19
 800991e:	2200      	movs	r2, #0
 8009920:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009928:	799b      	ldrb	r3, [r3, #6]
 800992a:	f023 0320 	bic.w	r3, r3, #32
 800992e:	b2da      	uxtb	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009936:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009944:	2201      	movs	r2, #1
 8009946:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4618      	mov	r0, r3
 8009952:	f7fd f9af 	bl	8006cb4 <sync_fs>
 8009956:	4603      	mov	r3, r0
 8009958:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	7dfa      	ldrb	r2, [r7, #23]
 8009964:	4611      	mov	r1, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f7fc ff40 	bl	80067ec <unlock_fs>
 800996c:	7dfb      	ldrb	r3, [r7, #23]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f7ff ff1a 	bl	80097b8 <f_sync>
 8009984:	4603      	mov	r3, r0
 8009986:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d122      	bne.n	80099d4 <f_close+0x5e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7fe fe80 	bl	8008694 <validate>
 8009994:	4603      	mov	r3, r0
 8009996:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d11a      	bne.n	80099d4 <f_close+0x5e>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7fd f88d 	bl	8006ad0 <dec_lock>
 80099b6:	4603      	mov	r3, r0
 80099b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d105      	bne.n	80099cc <f_close+0x56>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c6:	461a      	mov	r2, r3
 80099c8:	2300      	movs	r3, #0
 80099ca:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80099cc:	2100      	movs	r1, #0
 80099ce:	68b8      	ldr	r0, [r7, #8]
 80099d0:	f7fc ff0c 	bl	80067ec <unlock_fs>
#endif
		}
	}
	return res;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b090      	sub	sp, #64	; 0x40
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7fe fe53 	bl	8008694 <validate>
 80099ee:	4603      	mov	r3, r0
 80099f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80099f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00c      	beq.n	8009a16 <f_lseek+0x38>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009a08:	4611      	mov	r1, r2
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fc feee 	bl	80067ec <unlock_fs>
 8009a10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a14:	e350      	b.n	800a0b8 <f_lseek+0x6da>
	if (fp->err)						/* Check error */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a1c:	79db      	ldrb	r3, [r3, #7]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d010      	beq.n	8009a44 <f_lseek+0x66>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a30:	79db      	ldrb	r3, [r3, #7]
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f7fc fed9 	bl	80067ec <unlock_fs>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a40:	79db      	ldrb	r3, [r3, #7]
 8009a42:	e339      	b.n	800a0b8 <f_lseek+0x6da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 814c 	beq.w	8009cea <f_lseek+0x30c>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a58:	d17c      	bne.n	8009b54 <f_lseek+0x176>
			tbl = fp->cltbl;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	1d1a      	adds	r2, r3, #4
 8009a68:	627a      	str	r2, [r7, #36]	; 0x24
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	2302      	movs	r3, #2
 8009a70:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d056      	beq.n	8009b30 <f_lseek+0x152>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a84:	613b      	str	r3, [r7, #16]
 8009a86:	2300      	movs	r3, #0
 8009a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8c:	3302      	adds	r3, #2
 8009a8e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	3301      	adds	r3, #1
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fd f9e9 	bl	8006e7c <get_fat>
 8009aaa:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d80e      	bhi.n	8009ad0 <f_lseek+0xf2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab8:	2202      	movs	r2, #2
 8009aba:	71da      	strb	r2, [r3, #7]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2102      	movs	r1, #2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7fc fe90 	bl	80067ec <unlock_fs>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e2f3      	b.n	800a0b8 <f_lseek+0x6da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad6:	d10e      	bne.n	8009af6 <f_lseek+0x118>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ade:	2201      	movs	r2, #1
 8009ae0:	71da      	strb	r2, [r3, #7]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2101      	movs	r1, #1
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fc fe7d 	bl	80067ec <unlock_fs>
 8009af2:	2301      	movs	r3, #1
 8009af4:	e2e0      	b.n	800a0b8 <f_lseek+0x6da>
					} while (cl == pcl + 1);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d0c7      	beq.n	8009a90 <f_lseek+0xb2>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d809      	bhi.n	8009b1c <f_lseek+0x13e>
						*tbl++ = ncl; *tbl++ = tcl;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	1d1a      	adds	r2, r3, #4
 8009b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8009b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b10:	601a      	str	r2, [r3, #0]
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	1d1a      	adds	r2, r3, #4
 8009b16:	627a      	str	r2, [r7, #36]	; 0x24
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d3a8      	bcc.n	8009a82 <f_lseek+0xa4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b3a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8009b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d803      	bhi.n	8009b4c <f_lseek+0x16e>
				*tbl = 0;		/* Terminate table */
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	e2a9      	b.n	800a0a0 <f_lseek+0x6c2>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009b4c:	2311      	movs	r3, #17
 8009b4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009b52:	e2a5      	b.n	800a0a0 <f_lseek+0x6c2>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d904      	bls.n	8009b6c <f_lseek+0x18e>
				ofs = fp->fsize;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b72:	461a      	mov	r2, r3
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 8290 	beq.w	800a0a0 <f_lseek+0x6c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	3b01      	subs	r3, #1
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7fd fcd0 	bl	800752c <clmt_clust>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b94:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f7fd f942 	bl	8006e32 <clust2sect>
 8009bae:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10e      	bne.n	8009bd4 <f_lseek+0x1f6>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	71da      	strb	r2, [r3, #7]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2102      	movs	r1, #2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fc fe0e 	bl	80067ec <unlock_fs>
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e271      	b.n	800a0b8 <f_lseek+0x6da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bde:	6812      	ldr	r2, [r2, #0]
 8009be0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009be4:	8952      	ldrh	r2, [r2, #10]
 8009be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bf0:	6812      	ldr	r2, [r2, #0]
 8009bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009bf6:	7892      	ldrb	r2, [r2, #2]
 8009bf8:	3a01      	subs	r2, #1
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	4413      	add	r3, r2
 8009c00:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c10:	6812      	ldr	r2, [r2, #0]
 8009c12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c16:	8952      	ldrh	r2, [r2, #10]
 8009c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c1c:	fb01 f202 	mul.w	r2, r1, r2
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	f000 823c 	beq.w	800a0a0 <f_lseek+0x6c2>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	69ba      	ldr	r2, [r7, #24]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	f000 8234 	beq.w	800a0a0 <f_lseek+0x6c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c3e:	799b      	ldrb	r3, [r3, #6]
 8009c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d02b      	beq.n	8009ca0 <f_lseek+0x2c2>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c54:	7858      	ldrb	r0, [r3, #1]
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c5e:	699a      	ldr	r2, [r3, #24]
 8009c60:	2301      	movs	r3, #1
 8009c62:	f7fc fcf9 	bl	8006658 <disk_write>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00e      	beq.n	8009c8a <f_lseek+0x2ac>
							ABORT(fp->fs, FR_DISK_ERR);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c72:	2201      	movs	r2, #1
 8009c74:	71da      	strb	r2, [r3, #7]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2101      	movs	r1, #1
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fc fdb3 	bl	80067ec <unlock_fs>
 8009c86:	2301      	movs	r3, #1
 8009c88:	e216      	b.n	800a0b8 <f_lseek+0x6da>
						fp->flag &= ~FA__DIRTY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c90:	799b      	ldrb	r3, [r3, #6]
 8009c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c9e:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cac:	7858      	ldrb	r0, [r3, #1]
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	69ba      	ldr	r2, [r7, #24]
 8009cb4:	f7fc fcb0 	bl	8006618 <disk_read>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00e      	beq.n	8009cdc <f_lseek+0x2fe>
						ABORT(fp->fs, FR_DISK_ERR);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	71da      	strb	r2, [r3, #7]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fc fd8a 	bl	80067ec <unlock_fs>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e1ed      	b.n	800a0b8 <f_lseek+0x6da>
#endif
					fp->dsect = dsc;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	6193      	str	r3, [r2, #24]
 8009ce8:	e1da      	b.n	800a0a0 <f_lseek+0x6c2>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d90c      	bls.n	8009d12 <f_lseek+0x334>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cfe:	799b      	ldrb	r3, [r3, #6]
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d104      	bne.n	8009d12 <f_lseek+0x334>
#endif
			) ofs = fp->fsize;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d26:	461a      	mov	r2, r3
 8009d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2a:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 8128 	beq.w	8009f84 <f_lseek+0x5a6>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d40:	789b      	ldrb	r3, [r3, #2]
 8009d42:	461a      	mov	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d50:	895b      	ldrh	r3, [r3, #10]
 8009d52:	fb02 f303 	mul.w	r3, r2, r3
 8009d56:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d021      	beq.n	8009da2 <f_lseek+0x3c4>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	1e5a      	subs	r2, r3, #1
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	1e59      	subs	r1, r3, #1
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d315      	bcc.n	8009da2 <f_lseek+0x3c4>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	1e5a      	subs	r2, r3, #1
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	425b      	negs	r3, r3
 8009d7e:	4013      	ands	r3, r2
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d86:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009da0:	e041      	b.n	8009e26 <f_lseek+0x448>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d133      	bne.n	8009e1a <f_lseek+0x43c>
					clst = create_chain(fp->fs, 0);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fd fb0d 	bl	80073dc <create_chain>
 8009dc2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d10e      	bne.n	8009de8 <f_lseek+0x40a>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	71da      	strb	r2, [r3, #7]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2102      	movs	r1, #2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fc fd04 	bl	80067ec <unlock_fs>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e167      	b.n	800a0b8 <f_lseek+0x6da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dee:	d10e      	bne.n	8009e0e <f_lseek+0x430>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009df6:	2201      	movs	r2, #1
 8009df8:	71da      	strb	r2, [r3, #7]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2101      	movs	r1, #1
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fc fcf1 	bl	80067ec <unlock_fs>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	e154      	b.n	800a0b8 <f_lseek+0x6da>
					fp->sclust = clst;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e14:	461a      	mov	r2, r3
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e20:	461a      	mov	r2, r3
 8009e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e24:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8009e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 80ab 	beq.w	8009f84 <f_lseek+0x5a6>
				while (ofs > bcs) {						/* Cluster following loop */
 8009e2e:	e062      	b.n	8009ef6 <f_lseek+0x518>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e36:	799b      	ldrb	r3, [r3, #6]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00e      	beq.n	8009e5e <f_lseek+0x480>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7fd fac6 	bl	80073dc <create_chain>
 8009e50:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10b      	bne.n	8009e70 <f_lseek+0x492>
							ofs = bcs; break;
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	603b      	str	r3, [r7, #0]
 8009e5c:	e04f      	b.n	8009efe <f_lseek+0x520>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fd f807 	bl	8006e7c <get_fat>
 8009e6e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e76:	d10e      	bne.n	8009e96 <f_lseek+0x4b8>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7e:	2201      	movs	r2, #1
 8009e80:	71da      	strb	r2, [r3, #7]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fc fcad 	bl	80067ec <unlock_fs>
 8009e92:	2301      	movs	r3, #1
 8009e94:	e110      	b.n	800a0b8 <f_lseek+0x6da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d909      	bls.n	8009eb0 <f_lseek+0x4d2>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea8:	699b      	ldr	r3, [r3, #24]
 8009eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d30e      	bcc.n	8009ece <f_lseek+0x4f0>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	71da      	strb	r2, [r3, #7]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2102      	movs	r1, #2
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fc fc91 	bl	80067ec <unlock_fs>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e0f4      	b.n	800a0b8 <f_lseek+0x6da>
					fp->clust = clst;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee0:	689a      	ldr	r2, [r3, #8]
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009eec:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d898      	bhi.n	8009e30 <f_lseek+0x452>
				}
				fp->fptr += ofs;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f04:	689a      	ldr	r2, [r3, #8]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	4413      	add	r3, r2
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f10:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f1e:	895b      	ldrh	r3, [r3, #10]
 8009f20:	461a      	mov	r2, r3
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f28:	fb01 f202 	mul.w	r2, r1, r2
 8009f2c:	1a9b      	subs	r3, r3, r2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d028      	beq.n	8009f84 <f_lseek+0x5a6>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fc ff78 	bl	8006e32 <clust2sect>
 8009f42:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10e      	bne.n	8009f68 <f_lseek+0x58a>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f50:	2202      	movs	r2, #2
 8009f52:	71da      	strb	r2, [r3, #7]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2102      	movs	r1, #2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fc fc44 	bl	80067ec <unlock_fs>
 8009f64:	2302      	movs	r3, #2
 8009f66:	e0a7      	b.n	800a0b8 <f_lseek+0x6da>
					nsect += ofs / SS(fp->fs);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f74:	895b      	ldrh	r3, [r3, #10]
 8009f76:	461a      	mov	r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f80:	4413      	add	r3, r2
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f98:	8952      	ldrh	r2, [r2, #10]
 8009f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f9e:	fb01 f202 	mul.w	r2, r1, r2
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d05e      	beq.n	800a066 <f_lseek+0x688>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d057      	beq.n	800a066 <f_lseek+0x688>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fbc:	799b      	ldrb	r3, [r3, #6]
 8009fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d02b      	beq.n	800a01e <f_lseek+0x640>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fd2:	7858      	ldrb	r0, [r3, #1]
 8009fd4:	6879      	ldr	r1, [r7, #4]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fdc:	699a      	ldr	r2, [r3, #24]
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f7fc fb3a 	bl	8006658 <disk_write>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00e      	beq.n	800a008 <f_lseek+0x62a>
					ABORT(fp->fs, FR_DISK_ERR);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	71da      	strb	r2, [r3, #7]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fc fbf4 	bl	80067ec <unlock_fs>
 800a004:	2301      	movs	r3, #1
 800a006:	e057      	b.n	800a0b8 <f_lseek+0x6da>
				fp->flag &= ~FA__DIRTY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a00e:	799b      	ldrb	r3, [r3, #6]
 800a010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a014:	b2da      	uxtb	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a01c:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a02a:	7858      	ldrb	r0, [r3, #1]
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	2301      	movs	r3, #1
 800a030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a032:	f7fc faf1 	bl	8006618 <disk_read>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00e      	beq.n	800a05a <f_lseek+0x67c>
				ABORT(fp->fs, FR_DISK_ERR);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a042:	2201      	movs	r2, #1
 800a044:	71da      	strb	r2, [r3, #7]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2101      	movs	r1, #1
 800a050:	4618      	mov	r0, r3
 800a052:	f7fc fbcb 	bl	80067ec <unlock_fs>
 800a056:	2301      	movs	r3, #1
 800a058:	e02e      	b.n	800a0b8 <f_lseek+0x6da>
#endif
			fp->dsect = nsect;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a060:	461a      	mov	r2, r3
 800a062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a064:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	429a      	cmp	r2, r3
 800a078:	d912      	bls.n	800a0a0 <f_lseek+0x6c2>
			fp->fsize = fp->fptr;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a088:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a090:	799b      	ldrb	r3, [r3, #6]
 800a092:	f043 0320 	orr.w	r3, r3, #32
 800a096:	b2da      	uxtb	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09e:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fc fb9c 	bl	80067ec <unlock_fs>
 800a0b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3740      	adds	r7, #64	; 0x40
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7fe fae3 	bl	8008694 <validate>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d115      	bne.n	800a104 <f_truncate+0x44>
		if (fp->err) {						/* Check error */
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0de:	79db      	ldrb	r3, [r3, #7]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <f_truncate+0x30>
			res = (FRESULT)fp->err;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ea:	79db      	ldrb	r3, [r3, #7]
 800a0ec:	73fb      	strb	r3, [r7, #15]
 800a0ee:	e009      	b.n	800a104 <f_truncate+0x44>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0f6:	799b      	ldrb	r3, [r3, #6]
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <f_truncate+0x44>
				res = FR_DENIED;
 800a100:	2307      	movs	r3, #7
 800a102:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f040 80b0 	bne.w	800a26c <f_truncate+0x1ac>
		if (fp->fsize > fp->fptr) {
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	f240 809c 	bls.w	800a25a <f_truncate+0x19a>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a130:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a138:	799b      	ldrb	r3, [r3, #6]
 800a13a:	f043 0320 	orr.w	r3, r3, #32
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a146:	719a      	strb	r2, [r3, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d114      	bne.n	800a17e <f_truncate+0xbe>
				res = remove_chain(fp->fs, fp->sclust);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f7fd f8d7 	bl	800731a <remove_chain>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a176:	461a      	mov	r2, r3
 800a178:	2300      	movs	r3, #0
 800a17a:	6113      	str	r3, [r2, #16]
 800a17c:	e042      	b.n	800a204 <f_truncate+0x144>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	4619      	mov	r1, r3
 800a190:	4610      	mov	r0, r2
 800a192:	f7fc fe73 	bl	8006e7c <get_fat>
 800a196:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d101      	bne.n	800a1a8 <f_truncate+0xe8>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d101      	bne.n	800a1b2 <f_truncate+0xf2>
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d125      	bne.n	800a204 <f_truncate+0x144>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d21b      	bcs.n	800a204 <f_truncate+0x144>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d2:	6818      	ldr	r0, [r3, #0]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	f7fc ff47 	bl	8007074 <put_fat>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d109      	bne.n	800a204 <f_truncate+0x144>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68b9      	ldr	r1, [r7, #8]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fd f88d 	bl	800731a <remove_chain>
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d127      	bne.n	800a25a <f_truncate+0x19a>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a210:	799b      	ldrb	r3, [r3, #6]
 800a212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a216:	2b00      	cmp	r3, #0
 800a218:	d01f      	beq.n	800a25a <f_truncate+0x19a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a226:	7858      	ldrb	r0, [r3, #1]
 800a228:	6879      	ldr	r1, [r7, #4]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a230:	699a      	ldr	r2, [r3, #24]
 800a232:	2301      	movs	r3, #1
 800a234:	f7fc fa10 	bl	8006658 <disk_write>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d002      	beq.n	800a244 <f_truncate+0x184>
					res = FR_DISK_ERR;
 800a23e:	2301      	movs	r3, #1
 800a240:	73fb      	strb	r3, [r7, #15]
 800a242:	e00a      	b.n	800a25a <f_truncate+0x19a>
				else
					fp->flag &= ~FA__DIRTY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a24a:	799b      	ldrb	r3, [r3, #6]
 800a24c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a250:	b2da      	uxtb	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a258:	719a      	strb	r2, [r3, #6]
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d005      	beq.n	800a26c <f_truncate+0x1ac>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a266:	461a      	mov	r2, r3
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	71d3      	strb	r3, [r2, #7]
	}

	LEAVE_FF(fp->fs, res);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	7bfa      	ldrb	r2, [r7, #15]
 800a276:	4611      	mov	r1, r2
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fc fab7 	bl	80067ec <unlock_fs>
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3710      	adds	r7, #16
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	4613      	mov	r3, r2
 800a294:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a296:	2301      	movs	r3, #1
 800a298:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a29e:	4b1f      	ldr	r3, [pc, #124]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2a0:	7a5b      	ldrb	r3, [r3, #9]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d831      	bhi.n	800a30c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a2a8:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2aa:	7a5b      	ldrb	r3, [r3, #9]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	4b1a      	ldr	r3, [pc, #104]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a2b6:	4b19      	ldr	r3, [pc, #100]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2b8:	7a5b      	ldrb	r3, [r3, #9]
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	4a17      	ldr	r2, [pc, #92]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4413      	add	r3, r2
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a2c6:	4b15      	ldr	r3, [pc, #84]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2c8:	7a5b      	ldrb	r3, [r3, #9]
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4b13      	ldr	r3, [pc, #76]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2d0:	4413      	add	r3, r2
 800a2d2:	79fa      	ldrb	r2, [r7, #7]
 800a2d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a2d6:	4b11      	ldr	r3, [pc, #68]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2d8:	7a5b      	ldrb	r3, [r3, #9]
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	b2d1      	uxtb	r1, r2
 800a2e0:	4a0e      	ldr	r2, [pc, #56]	; (800a31c <FATFS_LinkDriverEx+0x94>)
 800a2e2:	7251      	strb	r1, [r2, #9]
 800a2e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a2e6:	7dbb      	ldrb	r3, [r7, #22]
 800a2e8:	3330      	adds	r3, #48	; 0x30
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	223a      	movs	r2, #58	; 0x3a
 800a2f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3302      	adds	r3, #2
 800a2fc:	222f      	movs	r2, #47	; 0x2f
 800a2fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	3303      	adds	r3, #3
 800a304:	2200      	movs	r2, #0
 800a306:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a30c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	371c      	adds	r7, #28
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	20002314 	.word	0x20002314

0800a320 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a32a:	2200      	movs	r2, #0
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff ffaa 	bl	800a288 <FATFS_LinkDriverEx>
 800a334:	4603      	mov	r3, r0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	4603      	mov	r3, r0
 800a346:	6039      	str	r1, [r7, #0]
 800a348:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800a34a:	2300      	movs	r3, #0
 800a34c:	60bb      	str	r3, [r7, #8]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800a34e:	f107 0308 	add.w	r3, r7, #8
 800a352:	2101      	movs	r1, #1
 800a354:	4618      	mov	r0, r3
 800a356:	f000 f8b4 	bl	800a4c2 <osSemaphoreCreate>
 800a35a:	4602      	mov	r2, r0
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 800a370:	68fb      	ldr	r3, [r7, #12]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f940 	bl	800a608 <osSemaphoreDelete>
  return 1;
 800a388:	2301      	movs	r3, #1
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800a39e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f8ac 	bl	800a500 <osSemaphoreWait>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <ff_req_grant+0x20>
  {
    ret = 1;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f8e9 	bl	800a59c <osSemaphoreRelease>
}
 800a3ca:	bf00      	nop
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	4603      	mov	r3, r0
 800a3da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a3e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3e4:	2b84      	cmp	r3, #132	; 0x84
 800a3e6:	d005      	beq.n	800a3f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a3e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	3303      	adds	r3, #3
 800a3f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a408:	f3ef 8305 	mrs	r3, IPSR
 800a40c:	607b      	str	r3, [r7, #4]
  return(result);
 800a40e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a410:	2b00      	cmp	r3, #0
 800a412:	bf14      	ite	ne
 800a414:	2301      	movne	r3, #1
 800a416:	2300      	moveq	r3, #0
 800a418:	b2db      	uxtb	r3, r3
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a42a:	f001 fa85 	bl	800b938 <vTaskStartScheduler>
  
  return osOK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	bd80      	pop	{r7, pc}

0800a434 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a436:	b087      	sub	sp, #28
 800a438:	af02      	add	r7, sp, #8
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685c      	ldr	r4, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a44a:	b29e      	uxth	r6, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a452:	4618      	mov	r0, r3
 800a454:	f7ff ffbd 	bl	800a3d2 <makeFreeRtosPriority>
 800a458:	4602      	mov	r2, r0
 800a45a:	f107 030c 	add.w	r3, r7, #12
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	9200      	str	r2, [sp, #0]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	4632      	mov	r2, r6
 800a466:	4629      	mov	r1, r5
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 ff51 	bl	800b310 <xTaskCreate>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b01      	cmp	r3, #1
 800a472:	d001      	beq.n	800a478 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800a474:	2300      	movs	r3, #0
 800a476:	e000      	b.n	800a47a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800a478:	68fb      	ldr	r3, [r7, #12]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a482 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <osDelay+0x16>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	e000      	b.n	800a49a <osDelay+0x18>
 800a498:	2301      	movs	r3, #1
 800a49a:	4618      	mov	r0, r3
 800a49c:	f001 f87a 	bl	800b594 <vTaskDelay>
  
  return osOK;
 800a4a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	f000 fa8b 	bl	800a9ce <xQueueCreateMutex>
 800a4b8:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d110      	bne.n	800a4f4 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	2001      	movs	r0, #1
 800a4d8:	f000 fa06 	bl	800a8e8 <xQueueGenericCreate>
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d005      	beq.n	800a4f0 <osSemaphoreCreate+0x2e>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fa88 	bl	800aa00 <xQueueGenericSend>
    return sema;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	e000      	b.n	800a4f6 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800a4f4:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a50a:	2300      	movs	r3, #0
 800a50c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a514:	2380      	movs	r3, #128	; 0x80
 800a516:	e03a      	b.n	800a58e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a522:	d103      	bne.n	800a52c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a524:	f04f 33ff 	mov.w	r3, #4294967295
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	e009      	b.n	800a540 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d006      	beq.n	800a540 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <osSemaphoreWait+0x40>
      ticks = 1;
 800a53c:	2301      	movs	r3, #1
 800a53e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a540:	f7ff ff5f 	bl	800a402 <inHandlerMode>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d017      	beq.n	800a57a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a54a:	f107 0308 	add.w	r3, r7, #8
 800a54e:	461a      	mov	r2, r3
 800a550:	2100      	movs	r1, #0
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fcec 	bl	800af30 <xQueueReceiveFromISR>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d001      	beq.n	800a562 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a55e:	23ff      	movs	r3, #255	; 0xff
 800a560:	e015      	b.n	800a58e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d011      	beq.n	800a58c <osSemaphoreWait+0x8c>
 800a568:	4b0b      	ldr	r3, [pc, #44]	; (800a598 <osSemaphoreWait+0x98>)
 800a56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	e008      	b.n	800a58c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a57a:	68f9      	ldr	r1, [r7, #12]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fbcb 	bl	800ad18 <xQueueSemaphoreTake>
 800a582:	4603      	mov	r3, r0
 800a584:	2b01      	cmp	r3, #1
 800a586:	d001      	beq.n	800a58c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a588:	23ff      	movs	r3, #255	; 0xff
 800a58a:	e000      	b.n	800a58e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a5ac:	f7ff ff29 	bl	800a402 <inHandlerMode>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d016      	beq.n	800a5e4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a5b6:	f107 0308 	add.w	r3, r7, #8
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fb1d 	bl	800abfc <xQueueGiveFromISR>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d001      	beq.n	800a5cc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a5c8:	23ff      	movs	r3, #255	; 0xff
 800a5ca:	e017      	b.n	800a5fc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d013      	beq.n	800a5fa <osSemaphoreRelease+0x5e>
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <osSemaphoreRelease+0x68>)
 800a5d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	e00a      	b.n	800a5fa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa08 	bl	800aa00 <xQueueGenericSend>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d001      	beq.n	800a5fa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a5f6:	23ff      	movs	r3, #255	; 0xff
 800a5f8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	e000ed04 	.word	0xe000ed04

0800a608 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a610:	f7ff fef7 	bl	800a402 <inHandlerMode>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d001      	beq.n	800a61e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a61a:	2382      	movs	r3, #130	; 0x82
 800a61c:	e003      	b.n	800a626 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fd06 	bl	800b030 <vQueueDelete>

  return osOK; 
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	4619      	mov	r1, r3
 800a644:	f000 f950 	bl	800a8e8 <xQueueGenericCreate>
 800a648:	4603      	mov	r3, r0
#endif
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 ffce 	bl	800b5fc <vTaskSuspend>
  
  return osOK;
 800a660:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a662:	4618      	mov	r0, r3
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800a674:	f7ff fec5 	bl	800a402 <inHandlerMode>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d00e      	beq.n	800a69c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f001 f8e8 	bl	800b854 <xTaskResumeFromISR>
 800a684:	4603      	mov	r3, r0
 800a686:	2b01      	cmp	r3, #1
 800a688:	d10b      	bne.n	800a6a2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800a68a:	4b08      	ldr	r3, [pc, #32]	; (800a6ac <osThreadResume+0x40>)
 800a68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	e002      	b.n	800a6a2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 f87b 	bl	800b798 <vTaskResume>
  }
  return osOK;
 800a6a2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f103 0208 	add.w	r2, r3, #8
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f103 0208 	add.w	r2, r3, #8
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f103 0208 	add.w	r2, r3, #8
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a70a:	b480      	push	{r7}
 800a70c:	b085      	sub	sp, #20
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	689a      	ldr	r2, [r3, #8]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	601a      	str	r2, [r3, #0]
}
 800a746:	bf00      	nop
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a768:	d103      	bne.n	800a772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	e00c      	b.n	800a78c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3308      	adds	r3, #8
 800a776:	60fb      	str	r3, [r7, #12]
 800a778:	e002      	b.n	800a780 <vListInsert+0x2e>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d2f6      	bcs.n	800a77a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	601a      	str	r2, [r3, #0]
}
 800a7b8:	bf00      	nop
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	6892      	ldr	r2, [r2, #8]
 800a7da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	6852      	ldr	r2, [r2, #4]
 800a7e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d103      	bne.n	800a7f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689a      	ldr	r2, [r3, #8]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	1e5a      	subs	r2, r3, #1
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10a      	bne.n	800a842 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a83e:	bf00      	nop
 800a840:	e7fe      	b.n	800a840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a842:	f001 ffcf 	bl	800c7e4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84e:	68f9      	ldr	r1, [r7, #12]
 800a850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a852:	fb01 f303 	mul.w	r3, r1, r3
 800a856:	441a      	add	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a872:	3b01      	subs	r3, #1
 800a874:	68f9      	ldr	r1, [r7, #12]
 800a876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a878:	fb01 f303 	mul.w	r3, r1, r3
 800a87c:	441a      	add	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	22ff      	movs	r2, #255	; 0xff
 800a886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	22ff      	movs	r2, #255	; 0xff
 800a88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d114      	bne.n	800a8c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01a      	beq.n	800a8d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	3310      	adds	r3, #16
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f001 fa85 	bl	800bdb4 <xTaskRemoveFromEventList>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d012      	beq.n	800a8d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <xQueueGenericReset+0xcc>)
 800a8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	e009      	b.n	800a8d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3310      	adds	r3, #16
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7ff fef2 	bl	800a6b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	3324      	adds	r3, #36	; 0x24
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff feed 	bl	800a6b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8d6:	f001 ffb5 	bl	800c844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8da:	2301      	movs	r3, #1
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	e000ed04 	.word	0xe000ed04

0800a8e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b08a      	sub	sp, #40	; 0x28
 800a8ec:	af02      	add	r7, sp, #8
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10a      	bne.n	800a912 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	f383 8811 	msr	BASEPRI, r3
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	f3bf 8f4f 	dsb	sy
 800a90c:	613b      	str	r3, [r7, #16]
}
 800a90e:	bf00      	nop
 800a910:	e7fe      	b.n	800a910 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d102      	bne.n	800a91e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	61fb      	str	r3, [r7, #28]
 800a91c:	e004      	b.n	800a928 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	fb02 f303 	mul.w	r3, r2, r3
 800a926:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	3348      	adds	r3, #72	; 0x48
 800a92c:	4618      	mov	r0, r3
 800a92e:	f002 f87b 	bl	800ca28 <pvPortMalloc>
 800a932:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00b      	beq.n	800a952 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	3348      	adds	r3, #72	; 0x48
 800a93e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a940:	79fa      	ldrb	r2, [r7, #7]
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	4613      	mov	r3, r2
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f805 	bl	800a95c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a952:	69bb      	ldr	r3, [r7, #24]
	}
 800a954:	4618      	mov	r0, r3
 800a956:	3720      	adds	r7, #32
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d103      	bne.n	800a978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	e002      	b.n	800a97e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a98a:	2101      	movs	r1, #1
 800a98c:	69b8      	ldr	r0, [r7, #24]
 800a98e:	f7ff ff43 	bl	800a818 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a992:	bf00      	nop
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b082      	sub	sp, #8
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00e      	beq.n	800a9c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	2200      	movs	r2, #0
 800a9be:	2100      	movs	r1, #0
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f81d 	bl	800aa00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a9c6:	bf00      	nop
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	617b      	str	r3, [r7, #20]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a9e0:	79fb      	ldrb	r3, [r7, #7]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	6939      	ldr	r1, [r7, #16]
 800a9e6:	6978      	ldr	r0, [r7, #20]
 800a9e8:	f7ff ff7e 	bl	800a8e8 <xQueueGenericCreate>
 800a9ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7ff ffd3 	bl	800a99a <prvInitialiseMutex>

		return pxNewQueue;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
	}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
	...

0800aa00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08e      	sub	sp, #56	; 0x38
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10a      	bne.n	800aa32 <xQueueGenericSend+0x32>
	__asm volatile
 800aa1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa2e:	bf00      	nop
 800aa30:	e7fe      	b.n	800aa30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <xQueueGenericSend+0x40>
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <xQueueGenericSend+0x44>
 800aa40:	2301      	movs	r3, #1
 800aa42:	e000      	b.n	800aa46 <xQueueGenericSend+0x46>
 800aa44:	2300      	movs	r3, #0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <xQueueGenericSend+0x60>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa5c:	bf00      	nop
 800aa5e:	e7fe      	b.n	800aa5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d103      	bne.n	800aa6e <xQueueGenericSend+0x6e>
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d101      	bne.n	800aa72 <xQueueGenericSend+0x72>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e000      	b.n	800aa74 <xQueueGenericSend+0x74>
 800aa72:	2300      	movs	r3, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <xQueueGenericSend+0x8e>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	623b      	str	r3, [r7, #32]
}
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa8e:	f001 fb39 	bl	800c104 <xTaskGetSchedulerState>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d102      	bne.n	800aa9e <xQueueGenericSend+0x9e>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d101      	bne.n	800aaa2 <xQueueGenericSend+0xa2>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e000      	b.n	800aaa4 <xQueueGenericSend+0xa4>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10a      	bne.n	800aabe <xQueueGenericSend+0xbe>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	61fb      	str	r3, [r7, #28]
}
 800aaba:	bf00      	nop
 800aabc:	e7fe      	b.n	800aabc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aabe:	f001 fe91 	bl	800c7e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d302      	bcc.n	800aad4 <xQueueGenericSend+0xd4>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b02      	cmp	r3, #2
 800aad2:	d129      	bne.n	800ab28 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aad4:	683a      	ldr	r2, [r7, #0]
 800aad6:	68b9      	ldr	r1, [r7, #8]
 800aad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aada:	f000 fadf 	bl	800b09c <prvCopyDataToQueue>
 800aade:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d010      	beq.n	800ab0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	3324      	adds	r3, #36	; 0x24
 800aaec:	4618      	mov	r0, r3
 800aaee:	f001 f961 	bl	800bdb4 <xTaskRemoveFromEventList>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d013      	beq.n	800ab20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aaf8:	4b3f      	ldr	r3, [pc, #252]	; (800abf8 <xQueueGenericSend+0x1f8>)
 800aafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	e00a      	b.n	800ab20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d007      	beq.n	800ab20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab10:	4b39      	ldr	r3, [pc, #228]	; (800abf8 <xQueueGenericSend+0x1f8>)
 800ab12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab20:	f001 fe90 	bl	800c844 <vPortExitCritical>
				return pdPASS;
 800ab24:	2301      	movs	r3, #1
 800ab26:	e063      	b.n	800abf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d103      	bne.n	800ab36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab2e:	f001 fe89 	bl	800c844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	e05c      	b.n	800abf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d106      	bne.n	800ab4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab3c:	f107 0314 	add.w	r3, r7, #20
 800ab40:	4618      	mov	r0, r3
 800ab42:	f001 f999 	bl	800be78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab46:	2301      	movs	r3, #1
 800ab48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab4a:	f001 fe7b 	bl	800c844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab4e:	f000 ff43 	bl	800b9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab52:	f001 fe47 	bl	800c7e4 <vPortEnterCritical>
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab5c:	b25b      	sxtb	r3, r3
 800ab5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab62:	d103      	bne.n	800ab6c <xQueueGenericSend+0x16c>
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab72:	b25b      	sxtb	r3, r3
 800ab74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab78:	d103      	bne.n	800ab82 <xQueueGenericSend+0x182>
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab82:	f001 fe5f 	bl	800c844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab86:	1d3a      	adds	r2, r7, #4
 800ab88:	f107 0314 	add.w	r3, r7, #20
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 f988 	bl	800bea4 <xTaskCheckForTimeOut>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d124      	bne.n	800abe4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab9c:	f000 fb76 	bl	800b28c <prvIsQueueFull>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d018      	beq.n	800abd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	3310      	adds	r3, #16
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	4611      	mov	r1, r2
 800abae:	4618      	mov	r0, r3
 800abb0:	f001 f8dc 	bl	800bd6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800abb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abb6:	f000 fb01 	bl	800b1bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abba:	f000 ff1b 	bl	800b9f4 <xTaskResumeAll>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f47f af7c 	bne.w	800aabe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800abc6:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <xQueueGenericSend+0x1f8>)
 800abc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	e772      	b.n	800aabe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800abd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abda:	f000 faef 	bl	800b1bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abde:	f000 ff09 	bl	800b9f4 <xTaskResumeAll>
 800abe2:	e76c      	b.n	800aabe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800abe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abe6:	f000 fae9 	bl	800b1bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abea:	f000 ff03 	bl	800b9f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800abee:	2300      	movs	r3, #0
		}
	}
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3738      	adds	r7, #56	; 0x38
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	e000ed04 	.word	0xe000ed04

0800abfc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08e      	sub	sp, #56	; 0x38
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10a      	bne.n	800ac26 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	623b      	str	r3, [r7, #32]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00a      	beq.n	800ac44 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	61fb      	str	r3, [r7, #28]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d103      	bne.n	800ac54 <xQueueGiveFromISR+0x58>
 800ac4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <xQueueGiveFromISR+0x5c>
 800ac54:	2301      	movs	r3, #1
 800ac56:	e000      	b.n	800ac5a <xQueueGiveFromISR+0x5e>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10a      	bne.n	800ac74 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	61bb      	str	r3, [r7, #24]
}
 800ac70:	bf00      	nop
 800ac72:	e7fe      	b.n	800ac72 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac74:	f001 fe98 	bl	800c9a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac78:	f3ef 8211 	mrs	r2, BASEPRI
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	617a      	str	r2, [r7, #20]
 800ac8e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac90:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac98:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d22b      	bcs.n	800acfc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbe:	d112      	bne.n	800ace6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d016      	beq.n	800acf6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	3324      	adds	r3, #36	; 0x24
 800accc:	4618      	mov	r0, r3
 800acce:	f001 f871 	bl	800bdb4 <xTaskRemoveFromEventList>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00e      	beq.n	800acf6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00b      	beq.n	800acf6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	2201      	movs	r2, #1
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	e007      	b.n	800acf6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ace6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acea:	3301      	adds	r3, #1
 800acec:	b2db      	uxtb	r3, r3
 800acee:	b25a      	sxtb	r2, r3
 800acf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800acf6:	2301      	movs	r3, #1
 800acf8:	637b      	str	r3, [r7, #52]	; 0x34
 800acfa:	e001      	b.n	800ad00 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800acfc:	2300      	movs	r3, #0
 800acfe:	637b      	str	r3, [r7, #52]	; 0x34
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3738      	adds	r7, #56	; 0x38
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}
	...

0800ad18 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08e      	sub	sp, #56	; 0x38
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad22:	2300      	movs	r3, #0
 800ad24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10a      	bne.n	800ad4a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	623b      	str	r3, [r7, #32]
}
 800ad46:	bf00      	nop
 800ad48:	e7fe      	b.n	800ad48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00a      	beq.n	800ad68 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ad52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad56:	f383 8811 	msr	BASEPRI, r3
 800ad5a:	f3bf 8f6f 	isb	sy
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	61fb      	str	r3, [r7, #28]
}
 800ad64:	bf00      	nop
 800ad66:	e7fe      	b.n	800ad66 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad68:	f001 f9cc 	bl	800c104 <xTaskGetSchedulerState>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d102      	bne.n	800ad78 <xQueueSemaphoreTake+0x60>
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <xQueueSemaphoreTake+0x64>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e000      	b.n	800ad7e <xQueueSemaphoreTake+0x66>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10a      	bne.n	800ad98 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
 800ad92:	61bb      	str	r3, [r7, #24]
}
 800ad94:	bf00      	nop
 800ad96:	e7fe      	b.n	800ad96 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad98:	f001 fd24 	bl	800c7e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d024      	beq.n	800adf2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	1e5a      	subs	r2, r3, #1
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d104      	bne.n	800adc2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800adb8:	f001 fb6e 	bl	800c498 <pvTaskIncrementMutexHeldCount>
 800adbc:	4602      	mov	r2, r0
 800adbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00f      	beq.n	800adea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adcc:	3310      	adds	r3, #16
 800adce:	4618      	mov	r0, r3
 800add0:	f000 fff0 	bl	800bdb4 <xTaskRemoveFromEventList>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d007      	beq.n	800adea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adda:	4b54      	ldr	r3, [pc, #336]	; (800af2c <xQueueSemaphoreTake+0x214>)
 800addc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	f3bf 8f4f 	dsb	sy
 800ade6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adea:	f001 fd2b 	bl	800c844 <vPortExitCritical>
				return pdPASS;
 800adee:	2301      	movs	r3, #1
 800adf0:	e097      	b.n	800af22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d111      	bne.n	800ae1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800adf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	617b      	str	r3, [r7, #20]
}
 800ae10:	bf00      	nop
 800ae12:	e7fe      	b.n	800ae12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae14:	f001 fd16 	bl	800c844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	e082      	b.n	800af22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d106      	bne.n	800ae30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae22:	f107 030c 	add.w	r3, r7, #12
 800ae26:	4618      	mov	r0, r3
 800ae28:	f001 f826 	bl	800be78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae30:	f001 fd08 	bl	800c844 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae34:	f000 fdd0 	bl	800b9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae38:	f001 fcd4 	bl	800c7e4 <vPortEnterCritical>
 800ae3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae42:	b25b      	sxtb	r3, r3
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d103      	bne.n	800ae52 <xQueueSemaphoreTake+0x13a>
 800ae4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae58:	b25b      	sxtb	r3, r3
 800ae5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5e:	d103      	bne.n	800ae68 <xQueueSemaphoreTake+0x150>
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	2200      	movs	r2, #0
 800ae64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae68:	f001 fcec 	bl	800c844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae6c:	463a      	mov	r2, r7
 800ae6e:	f107 030c 	add.w	r3, r7, #12
 800ae72:	4611      	mov	r1, r2
 800ae74:	4618      	mov	r0, r3
 800ae76:	f001 f815 	bl	800bea4 <xTaskCheckForTimeOut>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d132      	bne.n	800aee6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae82:	f000 f9ed 	bl	800b260 <prvIsQueueEmpty>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d026      	beq.n	800aeda <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d109      	bne.n	800aea8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ae94:	f001 fca6 	bl	800c7e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f001 f94f 	bl	800c140 <xTaskPriorityInherit>
 800aea2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aea4:	f001 fcce 	bl	800c844 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	3324      	adds	r3, #36	; 0x24
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	4611      	mov	r1, r2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 ff5b 	bl	800bd6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aeb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeb8:	f000 f980 	bl	800b1bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aebc:	f000 fd9a 	bl	800b9f4 <xTaskResumeAll>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f47f af68 	bne.w	800ad98 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aec8:	4b18      	ldr	r3, [pc, #96]	; (800af2c <xQueueSemaphoreTake+0x214>)
 800aeca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aece:	601a      	str	r2, [r3, #0]
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	e75e      	b.n	800ad98 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aeda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aedc:	f000 f96e 	bl	800b1bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aee0:	f000 fd88 	bl	800b9f4 <xTaskResumeAll>
 800aee4:	e758      	b.n	800ad98 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aee8:	f000 f968 	bl	800b1bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aeec:	f000 fd82 	bl	800b9f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aef2:	f000 f9b5 	bl	800b260 <prvIsQueueEmpty>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f43f af4d 	beq.w	800ad98 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00d      	beq.n	800af20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800af04:	f001 fc6e 	bl	800c7e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af0a:	f000 f8af 	bl	800b06c <prvGetDisinheritPriorityAfterTimeout>
 800af0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af16:	4618      	mov	r0, r3
 800af18:	f001 fa1e 	bl	800c358 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af1c:	f001 fc92 	bl	800c844 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800af22:	4618      	mov	r0, r3
 800af24:	3738      	adds	r7, #56	; 0x38
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	e000ed04 	.word	0xe000ed04

0800af30 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08e      	sub	sp, #56	; 0x38
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10a      	bne.n	800af5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	623b      	str	r3, [r7, #32]
}
 800af58:	bf00      	nop
 800af5a:	e7fe      	b.n	800af5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d103      	bne.n	800af6a <xQueueReceiveFromISR+0x3a>
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <xQueueReceiveFromISR+0x3e>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e000      	b.n	800af70 <xQueueReceiveFromISR+0x40>
 800af6e:	2300      	movs	r3, #0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10a      	bne.n	800af8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	61fb      	str	r3, [r7, #28]
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af8a:	f001 fd0d 	bl	800c9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800af8e:	f3ef 8211 	mrs	r2, BASEPRI
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	61ba      	str	r2, [r7, #24]
 800afa4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800afa6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d02f      	beq.n	800b016 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afc0:	68b9      	ldr	r1, [r7, #8]
 800afc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afc4:	f000 f8d4 	bl	800b170 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	1e5a      	subs	r2, r3, #1
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800afd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd8:	d112      	bne.n	800b000 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d016      	beq.n	800b010 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	3310      	adds	r3, #16
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fee4 	bl	800bdb4 <xTaskRemoveFromEventList>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00e      	beq.n	800b010 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00b      	beq.n	800b010 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	e007      	b.n	800b010 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b004:	3301      	adds	r3, #1
 800b006:	b2db      	uxtb	r3, r3
 800b008:	b25a      	sxtb	r2, r3
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b010:	2301      	movs	r3, #1
 800b012:	637b      	str	r3, [r7, #52]	; 0x34
 800b014:	e001      	b.n	800b01a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b016:	2300      	movs	r3, #0
 800b018:	637b      	str	r3, [r7, #52]	; 0x34
 800b01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f383 8811 	msr	BASEPRI, r3
}
 800b024:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3738      	adds	r7, #56	; 0x38
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10a      	bne.n	800b058 <vQueueDelete+0x28>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	60bb      	str	r3, [r7, #8]
}
 800b054:	bf00      	nop
 800b056:	e7fe      	b.n	800b056 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f000 f92f 	bl	800b2bc <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f001 fda6 	bl	800cbb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d006      	beq.n	800b08a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f1c3 0307 	rsb	r3, r3, #7
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	e001      	b.n	800b08e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b08e:	68fb      	ldr	r3, [r7, #12]
	}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10d      	bne.n	800b0d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d14d      	bne.n	800b15e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 f8c0 	bl	800c24c <xTaskPriorityDisinherit>
 800b0cc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	605a      	str	r2, [r3, #4]
 800b0d4:	e043      	b.n	800b15e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d119      	bne.n	800b110 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6898      	ldr	r0, [r3, #8]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	68b9      	ldr	r1, [r7, #8]
 800b0e8:	f001 feb4 	bl	800ce54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	689a      	ldr	r2, [r3, #8]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f4:	441a      	add	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	689a      	ldr	r2, [r3, #8]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	429a      	cmp	r2, r3
 800b104:	d32b      	bcc.n	800b15e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	609a      	str	r2, [r3, #8]
 800b10e:	e026      	b.n	800b15e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	68d8      	ldr	r0, [r3, #12]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b118:	461a      	mov	r2, r3
 800b11a:	68b9      	ldr	r1, [r7, #8]
 800b11c:	f001 fe9a 	bl	800ce54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	68da      	ldr	r2, [r3, #12]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	425b      	negs	r3, r3
 800b12a:	441a      	add	r2, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	68da      	ldr	r2, [r3, #12]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	429a      	cmp	r2, r3
 800b13a:	d207      	bcs.n	800b14c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	685a      	ldr	r2, [r3, #4]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b144:	425b      	negs	r3, r3
 800b146:	441a      	add	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d105      	bne.n	800b15e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b166:	697b      	ldr	r3, [r7, #20]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d018      	beq.n	800b1b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68da      	ldr	r2, [r3, #12]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	441a      	add	r2, r3
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	68da      	ldr	r2, [r3, #12]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d303      	bcc.n	800b1a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68d9      	ldr	r1, [r3, #12]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	6838      	ldr	r0, [r7, #0]
 800b1b0:	f001 fe50 	bl	800ce54 <memcpy>
	}
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b1c4:	f001 fb0e 	bl	800c7e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1d0:	e011      	b.n	800b1f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d012      	beq.n	800b200 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3324      	adds	r3, #36	; 0x24
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 fde8 	bl	800bdb4 <xTaskRemoveFromEventList>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b1ea:	f000 febd 	bl	800bf68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	dce9      	bgt.n	800b1d2 <prvUnlockQueue+0x16>
 800b1fe:	e000      	b.n	800b202 <prvUnlockQueue+0x46>
					break;
 800b200:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	22ff      	movs	r2, #255	; 0xff
 800b206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b20a:	f001 fb1b 	bl	800c844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b20e:	f001 fae9 	bl	800c7e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b218:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b21a:	e011      	b.n	800b240 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d012      	beq.n	800b24a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3310      	adds	r3, #16
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 fdc3 	bl	800bdb4 <xTaskRemoveFromEventList>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b234:	f000 fe98 	bl	800bf68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b238:	7bbb      	ldrb	r3, [r7, #14]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b244:	2b00      	cmp	r3, #0
 800b246:	dce9      	bgt.n	800b21c <prvUnlockQueue+0x60>
 800b248:	e000      	b.n	800b24c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b24a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	22ff      	movs	r2, #255	; 0xff
 800b250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b254:	f001 faf6 	bl	800c844 <vPortExitCritical>
}
 800b258:	bf00      	nop
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b268:	f001 fabc 	bl	800c7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b270:	2b00      	cmp	r3, #0
 800b272:	d102      	bne.n	800b27a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b274:	2301      	movs	r3, #1
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	e001      	b.n	800b27e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b27a:	2300      	movs	r3, #0
 800b27c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b27e:	f001 fae1 	bl	800c844 <vPortExitCritical>

	return xReturn;
 800b282:	68fb      	ldr	r3, [r7, #12]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b294:	f001 faa6 	bl	800c7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d102      	bne.n	800b2aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	e001      	b.n	800b2ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2ae:	f001 fac9 	bl	800c844 <vPortExitCritical>

	return xReturn;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	60fb      	str	r3, [r7, #12]
 800b2c8:	e016      	b.n	800b2f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b2ca:	4a10      	ldr	r2, [pc, #64]	; (800b30c <vQueueUnregisterQueue+0x50>)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	4413      	add	r3, r2
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d10b      	bne.n	800b2f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b2da:	4a0c      	ldr	r2, [pc, #48]	; (800b30c <vQueueUnregisterQueue+0x50>)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2100      	movs	r1, #0
 800b2e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b2e4:	4a09      	ldr	r2, [pc, #36]	; (800b30c <vQueueUnregisterQueue+0x50>)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	00db      	lsls	r3, r3, #3
 800b2ea:	4413      	add	r3, r2
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	605a      	str	r2, [r3, #4]
				break;
 800b2f0:	e006      	b.n	800b300 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b07      	cmp	r3, #7
 800b2fc:	d9e5      	bls.n	800b2ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	20002320 	.word	0x20002320

0800b310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08c      	sub	sp, #48	; 0x30
 800b314:	af04      	add	r7, sp, #16
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	603b      	str	r3, [r7, #0]
 800b31c:	4613      	mov	r3, r2
 800b31e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4618      	mov	r0, r3
 800b326:	f001 fb7f 	bl	800ca28 <pvPortMalloc>
 800b32a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00e      	beq.n	800b350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b332:	20b4      	movs	r0, #180	; 0xb4
 800b334:	f001 fb78 	bl	800ca28 <pvPortMalloc>
 800b338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	631a      	str	r2, [r3, #48]	; 0x30
 800b346:	e005      	b.n	800b354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b348:	6978      	ldr	r0, [r7, #20]
 800b34a:	f001 fc31 	bl	800cbb0 <vPortFree>
 800b34e:	e001      	b.n	800b354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b350:	2300      	movs	r3, #0
 800b352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d013      	beq.n	800b382 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b35a:	88fa      	ldrh	r2, [r7, #6]
 800b35c:	2300      	movs	r3, #0
 800b35e:	9303      	str	r3, [sp, #12]
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	9302      	str	r3, [sp, #8]
 800b364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 f80f 	bl	800b394 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b376:	69f8      	ldr	r0, [r7, #28]
 800b378:	f000 f8a2 	bl	800b4c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b37c:	2301      	movs	r3, #1
 800b37e:	61bb      	str	r3, [r7, #24]
 800b380:	e002      	b.n	800b388 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b382:	f04f 33ff 	mov.w	r3, #4294967295
 800b386:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b388:	69bb      	ldr	r3, [r7, #24]
	}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3720      	adds	r7, #32
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b088      	sub	sp, #32
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	f023 0307 	bic.w	r3, r3, #7
 800b3ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	f003 0307 	and.w	r3, r3, #7
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00a      	beq.n	800b3dc <prvInitialiseNewTask+0x48>
	__asm volatile
 800b3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	617b      	str	r3, [r7, #20]
}
 800b3d8:	bf00      	nop
 800b3da:	e7fe      	b.n	800b3da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	e012      	b.n	800b408 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	7819      	ldrb	r1, [r3, #0]
 800b3ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	3334      	adds	r3, #52	; 0x34
 800b3f2:	460a      	mov	r2, r1
 800b3f4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d006      	beq.n	800b410 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	3301      	adds	r3, #1
 800b406:	61fb      	str	r3, [r7, #28]
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	2b0f      	cmp	r3, #15
 800b40c:	d9e9      	bls.n	800b3e2 <prvInitialiseNewTask+0x4e>
 800b40e:	e000      	b.n	800b412 <prvInitialiseNewTask+0x7e>
		{
			break;
 800b410:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	2b06      	cmp	r3, #6
 800b41e:	d901      	bls.n	800b424 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b420:	2306      	movs	r3, #6
 800b422:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b428:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b42e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b432:	2200      	movs	r2, #0
 800b434:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b438:	3304      	adds	r3, #4
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff f958 	bl	800a6f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b442:	3318      	adds	r3, #24
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff f953 	bl	800a6f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b44e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b452:	f1c3 0207 	rsb	r2, r3, #7
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	2200      	movs	r2, #0
 800b464:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	334c      	adds	r3, #76	; 0x4c
 800b474:	2260      	movs	r2, #96	; 0x60
 800b476:	2100      	movs	r1, #0
 800b478:	4618      	mov	r0, r3
 800b47a:	f001 fcf9 	bl	800ce70 <memset>
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	4a0c      	ldr	r2, [pc, #48]	; (800b4b4 <prvInitialiseNewTask+0x120>)
 800b482:	651a      	str	r2, [r3, #80]	; 0x50
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	4a0c      	ldr	r2, [pc, #48]	; (800b4b8 <prvInitialiseNewTask+0x124>)
 800b488:	655a      	str	r2, [r3, #84]	; 0x54
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	4a0b      	ldr	r2, [pc, #44]	; (800b4bc <prvInitialiseNewTask+0x128>)
 800b48e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	68f9      	ldr	r1, [r7, #12]
 800b494:	69b8      	ldr	r0, [r7, #24]
 800b496:	f001 f879 	bl	800c58c <pxPortInitialiseStack>
 800b49a:	4602      	mov	r2, r0
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4ac:	bf00      	nop
 800b4ae:	3720      	adds	r7, #32
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	0800de24 	.word	0x0800de24
 800b4b8:	0800de44 	.word	0x0800de44
 800b4bc:	0800de04 	.word	0x0800de04

0800b4c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4c8:	f001 f98c 	bl	800c7e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4cc:	4b2a      	ldr	r3, [pc, #168]	; (800b578 <prvAddNewTaskToReadyList+0xb8>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	4a29      	ldr	r2, [pc, #164]	; (800b578 <prvAddNewTaskToReadyList+0xb8>)
 800b4d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4d6:	4b29      	ldr	r3, [pc, #164]	; (800b57c <prvAddNewTaskToReadyList+0xbc>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d109      	bne.n	800b4f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4de:	4a27      	ldr	r2, [pc, #156]	; (800b57c <prvAddNewTaskToReadyList+0xbc>)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4e4:	4b24      	ldr	r3, [pc, #144]	; (800b578 <prvAddNewTaskToReadyList+0xb8>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d110      	bne.n	800b50e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4ec:	f000 fd60 	bl	800bfb0 <prvInitialiseTaskLists>
 800b4f0:	e00d      	b.n	800b50e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4f2:	4b23      	ldr	r3, [pc, #140]	; (800b580 <prvAddNewTaskToReadyList+0xc0>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d109      	bne.n	800b50e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b4fa:	4b20      	ldr	r3, [pc, #128]	; (800b57c <prvAddNewTaskToReadyList+0xbc>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b504:	429a      	cmp	r2, r3
 800b506:	d802      	bhi.n	800b50e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b508:	4a1c      	ldr	r2, [pc, #112]	; (800b57c <prvAddNewTaskToReadyList+0xbc>)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b50e:	4b1d      	ldr	r3, [pc, #116]	; (800b584 <prvAddNewTaskToReadyList+0xc4>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3301      	adds	r3, #1
 800b514:	4a1b      	ldr	r2, [pc, #108]	; (800b584 <prvAddNewTaskToReadyList+0xc4>)
 800b516:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51c:	2201      	movs	r2, #1
 800b51e:	409a      	lsls	r2, r3
 800b520:	4b19      	ldr	r3, [pc, #100]	; (800b588 <prvAddNewTaskToReadyList+0xc8>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4313      	orrs	r3, r2
 800b526:	4a18      	ldr	r2, [pc, #96]	; (800b588 <prvAddNewTaskToReadyList+0xc8>)
 800b528:	6013      	str	r3, [r2, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4a15      	ldr	r2, [pc, #84]	; (800b58c <prvAddNewTaskToReadyList+0xcc>)
 800b538:	441a      	add	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3304      	adds	r3, #4
 800b53e:	4619      	mov	r1, r3
 800b540:	4610      	mov	r0, r2
 800b542:	f7ff f8e2 	bl	800a70a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b546:	f001 f97d 	bl	800c844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b54a:	4b0d      	ldr	r3, [pc, #52]	; (800b580 <prvAddNewTaskToReadyList+0xc0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00e      	beq.n	800b570 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b552:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <prvAddNewTaskToReadyList+0xbc>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d207      	bcs.n	800b570 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b560:	4b0b      	ldr	r3, [pc, #44]	; (800b590 <prvAddNewTaskToReadyList+0xd0>)
 800b562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	20002460 	.word	0x20002460
 800b57c:	20002360 	.word	0x20002360
 800b580:	2000246c 	.word	0x2000246c
 800b584:	2000247c 	.word	0x2000247c
 800b588:	20002468 	.word	0x20002468
 800b58c:	20002364 	.word	0x20002364
 800b590:	e000ed04 	.word	0xe000ed04

0800b594 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d017      	beq.n	800b5d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5a6:	4b13      	ldr	r3, [pc, #76]	; (800b5f4 <vTaskDelay+0x60>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00a      	beq.n	800b5c4 <vTaskDelay+0x30>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	60bb      	str	r3, [r7, #8]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5c4:	f000 fa08 	bl	800b9d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 ff78 	bl	800c4c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5d0:	f000 fa10 	bl	800b9f4 <xTaskResumeAll>
 800b5d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d107      	bne.n	800b5ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b5dc:	4b06      	ldr	r3, [pc, #24]	; (800b5f8 <vTaskDelay+0x64>)
 800b5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5ec:	bf00      	nop
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	20002488 	.word	0x20002488
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b604:	f001 f8ee 	bl	800c7e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d102      	bne.n	800b614 <vTaskSuspend+0x18>
 800b60e:	4b3c      	ldr	r3, [pc, #240]	; (800b700 <vTaskSuspend+0x104>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	e000      	b.n	800b616 <vTaskSuspend+0x1a>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7ff f8d1 	bl	800a7c4 <uxListRemove>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d115      	bne.n	800b654 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62c:	4935      	ldr	r1, [pc, #212]	; (800b704 <vTaskSuspend+0x108>)
 800b62e:	4613      	mov	r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	4413      	add	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	440b      	add	r3, r1
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10a      	bne.n	800b654 <vTaskSuspend+0x58>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b642:	2201      	movs	r2, #1
 800b644:	fa02 f303 	lsl.w	r3, r2, r3
 800b648:	43da      	mvns	r2, r3
 800b64a:	4b2f      	ldr	r3, [pc, #188]	; (800b708 <vTaskSuspend+0x10c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4013      	ands	r3, r2
 800b650:	4a2d      	ldr	r2, [pc, #180]	; (800b708 <vTaskSuspend+0x10c>)
 800b652:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d004      	beq.n	800b666 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3318      	adds	r3, #24
 800b660:	4618      	mov	r0, r3
 800b662:	f7ff f8af 	bl	800a7c4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	3304      	adds	r3, #4
 800b66a:	4619      	mov	r1, r3
 800b66c:	4827      	ldr	r0, [pc, #156]	; (800b70c <vTaskSuspend+0x110>)
 800b66e:	f7ff f84c 	bl	800a70a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d103      	bne.n	800b686 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b686:	f001 f8dd 	bl	800c844 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b68a:	4b21      	ldr	r3, [pc, #132]	; (800b710 <vTaskSuspend+0x114>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d005      	beq.n	800b69e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b692:	f001 f8a7 	bl	800c7e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b696:	f000 fd0f 	bl	800c0b8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b69a:	f001 f8d3 	bl	800c844 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b69e:	4b18      	ldr	r3, [pc, #96]	; (800b700 <vTaskSuspend+0x104>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d127      	bne.n	800b6f8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800b6a8:	4b19      	ldr	r3, [pc, #100]	; (800b710 <vTaskSuspend+0x114>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d017      	beq.n	800b6e0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b6b0:	4b18      	ldr	r3, [pc, #96]	; (800b714 <vTaskSuspend+0x118>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00a      	beq.n	800b6ce <vTaskSuspend+0xd2>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60bb      	str	r3, [r7, #8]
}
 800b6ca:	bf00      	nop
 800b6cc:	e7fe      	b.n	800b6cc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800b6ce:	4b12      	ldr	r3, [pc, #72]	; (800b718 <vTaskSuspend+0x11c>)
 800b6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d4:	601a      	str	r2, [r3, #0]
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6de:	e00b      	b.n	800b6f8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	; (800b70c <vTaskSuspend+0x110>)
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <vTaskSuspend+0x120>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d103      	bne.n	800b6f4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800b6ec:	4b04      	ldr	r3, [pc, #16]	; (800b700 <vTaskSuspend+0x104>)
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	601a      	str	r2, [r3, #0]
	}
 800b6f2:	e001      	b.n	800b6f8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800b6f4:	f000 fad8 	bl	800bca8 <vTaskSwitchContext>
	}
 800b6f8:	bf00      	nop
 800b6fa:	3710      	adds	r7, #16
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	20002360 	.word	0x20002360
 800b704:	20002364 	.word	0x20002364
 800b708:	20002468 	.word	0x20002468
 800b70c:	2000244c 	.word	0x2000244c
 800b710:	2000246c 	.word	0x2000246c
 800b714:	20002488 	.word	0x20002488
 800b718:	e000ed04 	.word	0xe000ed04
 800b71c:	20002460 	.word	0x20002460

0800b720 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b728:	2300      	movs	r3, #0
 800b72a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	60fb      	str	r3, [r7, #12]
}
 800b748:	bf00      	nop
 800b74a:	e7fe      	b.n	800b74a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	4a0f      	ldr	r2, [pc, #60]	; (800b790 <prvTaskIsTaskSuspended+0x70>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d101      	bne.n	800b75a <prvTaskIsTaskSuspended+0x3a>
 800b756:	2301      	movs	r3, #1
 800b758:	e000      	b.n	800b75c <prvTaskIsTaskSuspended+0x3c>
 800b75a:	2300      	movs	r3, #0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00f      	beq.n	800b780 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b764:	4a0b      	ldr	r2, [pc, #44]	; (800b794 <prvTaskIsTaskSuspended+0x74>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d00a      	beq.n	800b780 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <prvTaskIsTaskSuspended+0x56>
 800b772:	2301      	movs	r3, #1
 800b774:	e000      	b.n	800b778 <prvTaskIsTaskSuspended+0x58>
 800b776:	2300      	movs	r3, #0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800b77c:	2301      	movs	r3, #1
 800b77e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b780:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b782:	4618      	mov	r0, r3
 800b784:	371c      	adds	r7, #28
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	2000244c 	.word	0x2000244c
 800b794:	20002420 	.word	0x20002420

0800b798 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10a      	bne.n	800b7c0 <vTaskResume+0x28>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	60bb      	str	r3, [r7, #8]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d039      	beq.n	800b83a <vTaskResume+0xa2>
 800b7c6:	4b1f      	ldr	r3, [pc, #124]	; (800b844 <vTaskResume+0xac>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d034      	beq.n	800b83a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800b7d0:	f001 f808 	bl	800c7e4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f7ff ffa3 	bl	800b720 <prvTaskIsTaskSuspended>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d02a      	beq.n	800b836 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fe ffed 	bl	800a7c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	409a      	lsls	r2, r3
 800b7f2:	4b15      	ldr	r3, [pc, #84]	; (800b848 <vTaskResume+0xb0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	4a13      	ldr	r2, [pc, #76]	; (800b848 <vTaskResume+0xb0>)
 800b7fa:	6013      	str	r3, [r2, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b800:	4613      	mov	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4413      	add	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	4a10      	ldr	r2, [pc, #64]	; (800b84c <vTaskResume+0xb4>)
 800b80a:	441a      	add	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3304      	adds	r3, #4
 800b810:	4619      	mov	r1, r3
 800b812:	4610      	mov	r0, r2
 800b814:	f7fe ff79 	bl	800a70a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81c:	4b09      	ldr	r3, [pc, #36]	; (800b844 <vTaskResume+0xac>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	429a      	cmp	r2, r3
 800b824:	d307      	bcc.n	800b836 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800b826:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <vTaskResume+0xb8>)
 800b828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800b836:	f001 f805 	bl	800c844 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20002360 	.word	0x20002360
 800b848:	20002468 	.word	0x20002468
 800b84c:	20002364 	.word	0x20002364
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	; 0x28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800b85c:	2300      	movs	r3, #0
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10a      	bne.n	800b880 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	61bb      	str	r3, [r7, #24]
}
 800b87c:	bf00      	nop
 800b87e:	e7fe      	b.n	800b87e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b880:	f001 f892 	bl	800c9a8 <vPortValidateInterruptPriority>
	__asm volatile
 800b884:	f3ef 8211 	mrs	r2, BASEPRI
 800b888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	617a      	str	r2, [r7, #20]
 800b89a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b89c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b89e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800b8a0:	6a38      	ldr	r0, [r7, #32]
 800b8a2:	f7ff ff3d 	bl	800b720 <prvTaskIsTaskSuspended>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d02f      	beq.n	800b90c <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8ac:	4b1d      	ldr	r3, [pc, #116]	; (800b924 <xTaskResumeFromISR+0xd0>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d125      	bne.n	800b900 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b8:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <xTaskResumeFromISR+0xd4>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d301      	bcc.n	800b8c6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fe ff7a 	bl	800a7c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	409a      	lsls	r2, r3
 800b8d8:	4b14      	ldr	r3, [pc, #80]	; (800b92c <xTaskResumeFromISR+0xd8>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	4a13      	ldr	r2, [pc, #76]	; (800b92c <xTaskResumeFromISR+0xd8>)
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4a10      	ldr	r2, [pc, #64]	; (800b930 <xTaskResumeFromISR+0xdc>)
 800b8f0:	441a      	add	r2, r3
 800b8f2:	6a3b      	ldr	r3, [r7, #32]
 800b8f4:	3304      	adds	r3, #4
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	f7fe ff06 	bl	800a70a <vListInsertEnd>
 800b8fe:	e005      	b.n	800b90c <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	3318      	adds	r3, #24
 800b904:	4619      	mov	r1, r3
 800b906:	480b      	ldr	r0, [pc, #44]	; (800b934 <xTaskResumeFromISR+0xe0>)
 800b908:	f7fe feff 	bl	800a70a <vListInsertEnd>
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f383 8811 	msr	BASEPRI, r3
}
 800b916:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800b918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3728      	adds	r7, #40	; 0x28
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20002488 	.word	0x20002488
 800b928:	20002360 	.word	0x20002360
 800b92c:	20002468 	.word	0x20002468
 800b930:	20002364 	.word	0x20002364
 800b934:	20002420 	.word	0x20002420

0800b938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b93e:	4b1e      	ldr	r3, [pc, #120]	; (800b9b8 <vTaskStartScheduler+0x80>)
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	2300      	movs	r3, #0
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	2300      	movs	r3, #0
 800b948:	2280      	movs	r2, #128	; 0x80
 800b94a:	491c      	ldr	r1, [pc, #112]	; (800b9bc <vTaskStartScheduler+0x84>)
 800b94c:	481c      	ldr	r0, [pc, #112]	; (800b9c0 <vTaskStartScheduler+0x88>)
 800b94e:	f7ff fcdf 	bl	800b310 <xTaskCreate>
 800b952:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d11b      	bne.n	800b992 <vTaskStartScheduler+0x5a>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	60bb      	str	r3, [r7, #8]
}
 800b96c:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b96e:	4b15      	ldr	r3, [pc, #84]	; (800b9c4 <vTaskStartScheduler+0x8c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	334c      	adds	r3, #76	; 0x4c
 800b974:	4a14      	ldr	r2, [pc, #80]	; (800b9c8 <vTaskStartScheduler+0x90>)
 800b976:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b978:	4b14      	ldr	r3, [pc, #80]	; (800b9cc <vTaskStartScheduler+0x94>)
 800b97a:	f04f 32ff 	mov.w	r2, #4294967295
 800b97e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b980:	4b13      	ldr	r3, [pc, #76]	; (800b9d0 <vTaskStartScheduler+0x98>)
 800b982:	2201      	movs	r2, #1
 800b984:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b986:	4b13      	ldr	r3, [pc, #76]	; (800b9d4 <vTaskStartScheduler+0x9c>)
 800b988:	2200      	movs	r2, #0
 800b98a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b98c:	f000 fe88 	bl	800c6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b990:	e00e      	b.n	800b9b0 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b998:	d10a      	bne.n	800b9b0 <vTaskStartScheduler+0x78>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	607b      	str	r3, [r7, #4]
}
 800b9ac:	bf00      	nop
 800b9ae:	e7fe      	b.n	800b9ae <vTaskStartScheduler+0x76>
}
 800b9b0:	bf00      	nop
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	20002484 	.word	0x20002484
 800b9bc:	0800dd44 	.word	0x0800dd44
 800b9c0:	0800bf81 	.word	0x0800bf81
 800b9c4:	20002360 	.word	0x20002360
 800b9c8:	20000030 	.word	0x20000030
 800b9cc:	20002480 	.word	0x20002480
 800b9d0:	2000246c 	.word	0x2000246c
 800b9d4:	20002464 	.word	0x20002464

0800b9d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b9dc:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <vTaskSuspendAll+0x18>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	4a03      	ldr	r2, [pc, #12]	; (800b9f0 <vTaskSuspendAll+0x18>)
 800b9e4:	6013      	str	r3, [r2, #0]
}
 800b9e6:	bf00      	nop
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	20002488 	.word	0x20002488

0800b9f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba02:	4b41      	ldr	r3, [pc, #260]	; (800bb08 <xTaskResumeAll+0x114>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <xTaskResumeAll+0x2c>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	603b      	str	r3, [r7, #0]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba20:	f000 fee0 	bl	800c7e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba24:	4b38      	ldr	r3, [pc, #224]	; (800bb08 <xTaskResumeAll+0x114>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	4a37      	ldr	r2, [pc, #220]	; (800bb08 <xTaskResumeAll+0x114>)
 800ba2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba2e:	4b36      	ldr	r3, [pc, #216]	; (800bb08 <xTaskResumeAll+0x114>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d161      	bne.n	800bafa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba36:	4b35      	ldr	r3, [pc, #212]	; (800bb0c <xTaskResumeAll+0x118>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d05d      	beq.n	800bafa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba3e:	e02e      	b.n	800ba9e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ba40:	4b33      	ldr	r3, [pc, #204]	; (800bb10 <xTaskResumeAll+0x11c>)
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3318      	adds	r3, #24
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe feb9 	bl	800a7c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe feb4 	bl	800a7c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba60:	2201      	movs	r2, #1
 800ba62:	409a      	lsls	r2, r3
 800ba64:	4b2b      	ldr	r3, [pc, #172]	; (800bb14 <xTaskResumeAll+0x120>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	4a2a      	ldr	r2, [pc, #168]	; (800bb14 <xTaskResumeAll+0x120>)
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba72:	4613      	mov	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	009b      	lsls	r3, r3, #2
 800ba7a:	4a27      	ldr	r2, [pc, #156]	; (800bb18 <xTaskResumeAll+0x124>)
 800ba7c:	441a      	add	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3304      	adds	r3, #4
 800ba82:	4619      	mov	r1, r3
 800ba84:	4610      	mov	r0, r2
 800ba86:	f7fe fe40 	bl	800a70a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8e:	4b23      	ldr	r3, [pc, #140]	; (800bb1c <xTaskResumeAll+0x128>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d302      	bcc.n	800ba9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ba98:	4b21      	ldr	r3, [pc, #132]	; (800bb20 <xTaskResumeAll+0x12c>)
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba9e:	4b1c      	ldr	r3, [pc, #112]	; (800bb10 <xTaskResumeAll+0x11c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1cc      	bne.n	800ba40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baac:	f000 fb04 	bl	800c0b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bab0:	4b1c      	ldr	r3, [pc, #112]	; (800bb24 <xTaskResumeAll+0x130>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d010      	beq.n	800bade <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800babc:	f000 f836 	bl	800bb2c <xTaskIncrementTick>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d002      	beq.n	800bacc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bac6:	4b16      	ldr	r3, [pc, #88]	; (800bb20 <xTaskResumeAll+0x12c>)
 800bac8:	2201      	movs	r2, #1
 800baca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3b01      	subs	r3, #1
 800bad0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1f1      	bne.n	800babc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bad8:	4b12      	ldr	r3, [pc, #72]	; (800bb24 <xTaskResumeAll+0x130>)
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bade:	4b10      	ldr	r3, [pc, #64]	; (800bb20 <xTaskResumeAll+0x12c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d009      	beq.n	800bafa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bae6:	2301      	movs	r3, #1
 800bae8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800baea:	4b0f      	ldr	r3, [pc, #60]	; (800bb28 <xTaskResumeAll+0x134>)
 800baec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bafa:	f000 fea3 	bl	800c844 <vPortExitCritical>

	return xAlreadyYielded;
 800bafe:	68bb      	ldr	r3, [r7, #8]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	20002488 	.word	0x20002488
 800bb0c:	20002460 	.word	0x20002460
 800bb10:	20002420 	.word	0x20002420
 800bb14:	20002468 	.word	0x20002468
 800bb18:	20002364 	.word	0x20002364
 800bb1c:	20002360 	.word	0x20002360
 800bb20:	20002474 	.word	0x20002474
 800bb24:	20002470 	.word	0x20002470
 800bb28:	e000ed04 	.word	0xe000ed04

0800bb2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb36:	4b51      	ldr	r3, [pc, #324]	; (800bc7c <xTaskIncrementTick+0x150>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f040 808d 	bne.w	800bc5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb40:	4b4f      	ldr	r3, [pc, #316]	; (800bc80 <xTaskIncrementTick+0x154>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3301      	adds	r3, #1
 800bb46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb48:	4a4d      	ldr	r2, [pc, #308]	; (800bc80 <xTaskIncrementTick+0x154>)
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d120      	bne.n	800bb96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb54:	4b4b      	ldr	r3, [pc, #300]	; (800bc84 <xTaskIncrementTick+0x158>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	603b      	str	r3, [r7, #0]
}
 800bb70:	bf00      	nop
 800bb72:	e7fe      	b.n	800bb72 <xTaskIncrementTick+0x46>
 800bb74:	4b43      	ldr	r3, [pc, #268]	; (800bc84 <xTaskIncrementTick+0x158>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	60fb      	str	r3, [r7, #12]
 800bb7a:	4b43      	ldr	r3, [pc, #268]	; (800bc88 <xTaskIncrementTick+0x15c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a41      	ldr	r2, [pc, #260]	; (800bc84 <xTaskIncrementTick+0x158>)
 800bb80:	6013      	str	r3, [r2, #0]
 800bb82:	4a41      	ldr	r2, [pc, #260]	; (800bc88 <xTaskIncrementTick+0x15c>)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6013      	str	r3, [r2, #0]
 800bb88:	4b40      	ldr	r3, [pc, #256]	; (800bc8c <xTaskIncrementTick+0x160>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	4a3f      	ldr	r2, [pc, #252]	; (800bc8c <xTaskIncrementTick+0x160>)
 800bb90:	6013      	str	r3, [r2, #0]
 800bb92:	f000 fa91 	bl	800c0b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb96:	4b3e      	ldr	r3, [pc, #248]	; (800bc90 <xTaskIncrementTick+0x164>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	693a      	ldr	r2, [r7, #16]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d34d      	bcc.n	800bc3c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bba0:	4b38      	ldr	r3, [pc, #224]	; (800bc84 <xTaskIncrementTick+0x158>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <xTaskIncrementTick+0x82>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e000      	b.n	800bbb0 <xTaskIncrementTick+0x84>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbb4:	4b36      	ldr	r3, [pc, #216]	; (800bc90 <xTaskIncrementTick+0x164>)
 800bbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbba:	601a      	str	r2, [r3, #0]
					break;
 800bbbc:	e03e      	b.n	800bc3c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bbbe:	4b31      	ldr	r3, [pc, #196]	; (800bc84 <xTaskIncrementTick+0x158>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d203      	bcs.n	800bbde <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbd6:	4a2e      	ldr	r2, [pc, #184]	; (800bc90 <xTaskIncrementTick+0x164>)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6013      	str	r3, [r2, #0]
						break;
 800bbdc:	e02e      	b.n	800bc3c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fdee 	bl	800a7c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d004      	beq.n	800bbfa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	3318      	adds	r3, #24
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fe fde5 	bl	800a7c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfe:	2201      	movs	r2, #1
 800bc00:	409a      	lsls	r2, r3
 800bc02:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <xTaskIncrementTick+0x168>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	4a22      	ldr	r2, [pc, #136]	; (800bc94 <xTaskIncrementTick+0x168>)
 800bc0a:	6013      	str	r3, [r2, #0]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	4613      	mov	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4a1f      	ldr	r2, [pc, #124]	; (800bc98 <xTaskIncrementTick+0x16c>)
 800bc1a:	441a      	add	r2, r3
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4619      	mov	r1, r3
 800bc22:	4610      	mov	r0, r2
 800bc24:	f7fe fd71 	bl	800a70a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2c:	4b1b      	ldr	r3, [pc, #108]	; (800bc9c <xTaskIncrementTick+0x170>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d3b4      	bcc.n	800bba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc3a:	e7b1      	b.n	800bba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc3c:	4b17      	ldr	r3, [pc, #92]	; (800bc9c <xTaskIncrementTick+0x170>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc42:	4915      	ldr	r1, [pc, #84]	; (800bc98 <xTaskIncrementTick+0x16c>)
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d907      	bls.n	800bc64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800bc54:	2301      	movs	r3, #1
 800bc56:	617b      	str	r3, [r7, #20]
 800bc58:	e004      	b.n	800bc64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bc5a:	4b11      	ldr	r3, [pc, #68]	; (800bca0 <xTaskIncrementTick+0x174>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	4a0f      	ldr	r2, [pc, #60]	; (800bca0 <xTaskIncrementTick+0x174>)
 800bc62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bc64:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <xTaskIncrementTick+0x178>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bc70:	697b      	ldr	r3, [r7, #20]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20002488 	.word	0x20002488
 800bc80:	20002464 	.word	0x20002464
 800bc84:	20002418 	.word	0x20002418
 800bc88:	2000241c 	.word	0x2000241c
 800bc8c:	20002478 	.word	0x20002478
 800bc90:	20002480 	.word	0x20002480
 800bc94:	20002468 	.word	0x20002468
 800bc98:	20002364 	.word	0x20002364
 800bc9c:	20002360 	.word	0x20002360
 800bca0:	20002470 	.word	0x20002470
 800bca4:	20002474 	.word	0x20002474

0800bca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b087      	sub	sp, #28
 800bcac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcae:	4b29      	ldr	r3, [pc, #164]	; (800bd54 <vTaskSwitchContext+0xac>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d003      	beq.n	800bcbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcb6:	4b28      	ldr	r3, [pc, #160]	; (800bd58 <vTaskSwitchContext+0xb0>)
 800bcb8:	2201      	movs	r2, #1
 800bcba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bcbc:	e044      	b.n	800bd48 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bcbe:	4b26      	ldr	r3, [pc, #152]	; (800bd58 <vTaskSwitchContext+0xb0>)
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bcc4:	4b25      	ldr	r3, [pc, #148]	; (800bd5c <vTaskSwitchContext+0xb4>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	fab3 f383 	clz	r3, r3
 800bcd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bcd2:	7afb      	ldrb	r3, [r7, #11]
 800bcd4:	f1c3 031f 	rsb	r3, r3, #31
 800bcd8:	617b      	str	r3, [r7, #20]
 800bcda:	4921      	ldr	r1, [pc, #132]	; (800bd60 <vTaskSwitchContext+0xb8>)
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	4613      	mov	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	440b      	add	r3, r1
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10a      	bne.n	800bd04 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	607b      	str	r3, [r7, #4]
}
 800bd00:	bf00      	nop
 800bd02:	e7fe      	b.n	800bd02 <vTaskSwitchContext+0x5a>
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4613      	mov	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	4413      	add	r3, r2
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4a14      	ldr	r2, [pc, #80]	; (800bd60 <vTaskSwitchContext+0xb8>)
 800bd10:	4413      	add	r3, r2
 800bd12:	613b      	str	r3, [r7, #16]
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	685a      	ldr	r2, [r3, #4]
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	605a      	str	r2, [r3, #4]
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	685a      	ldr	r2, [r3, #4]
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	3308      	adds	r3, #8
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d104      	bne.n	800bd34 <vTaskSwitchContext+0x8c>
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	685a      	ldr	r2, [r3, #4]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	605a      	str	r2, [r3, #4]
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	4a0a      	ldr	r2, [pc, #40]	; (800bd64 <vTaskSwitchContext+0xbc>)
 800bd3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd3e:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <vTaskSwitchContext+0xbc>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	334c      	adds	r3, #76	; 0x4c
 800bd44:	4a08      	ldr	r2, [pc, #32]	; (800bd68 <vTaskSwitchContext+0xc0>)
 800bd46:	6013      	str	r3, [r2, #0]
}
 800bd48:	bf00      	nop
 800bd4a:	371c      	adds	r7, #28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	20002488 	.word	0x20002488
 800bd58:	20002474 	.word	0x20002474
 800bd5c:	20002468 	.word	0x20002468
 800bd60:	20002364 	.word	0x20002364
 800bd64:	20002360 	.word	0x20002360
 800bd68:	20000030 	.word	0x20000030

0800bd6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10a      	bne.n	800bd92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd80:	f383 8811 	msr	BASEPRI, r3
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	60fb      	str	r3, [r7, #12]
}
 800bd8e:	bf00      	nop
 800bd90:	e7fe      	b.n	800bd90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd92:	4b07      	ldr	r3, [pc, #28]	; (800bdb0 <vTaskPlaceOnEventList+0x44>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3318      	adds	r3, #24
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7fe fcd9 	bl	800a752 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bda0:	2101      	movs	r1, #1
 800bda2:	6838      	ldr	r0, [r7, #0]
 800bda4:	f000 fb8c 	bl	800c4c0 <prvAddCurrentTaskToDelayedList>
}
 800bda8:	bf00      	nop
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	20002360 	.word	0x20002360

0800bdb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10a      	bne.n	800bde0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	60fb      	str	r3, [r7, #12]
}
 800bddc:	bf00      	nop
 800bdde:	e7fe      	b.n	800bdde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	3318      	adds	r3, #24
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe fced 	bl	800a7c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdea:	4b1d      	ldr	r3, [pc, #116]	; (800be60 <xTaskRemoveFromEventList+0xac>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d11c      	bne.n	800be2c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fe fce4 	bl	800a7c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be00:	2201      	movs	r2, #1
 800be02:	409a      	lsls	r2, r3
 800be04:	4b17      	ldr	r3, [pc, #92]	; (800be64 <xTaskRemoveFromEventList+0xb0>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4313      	orrs	r3, r2
 800be0a:	4a16      	ldr	r2, [pc, #88]	; (800be64 <xTaskRemoveFromEventList+0xb0>)
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4a13      	ldr	r2, [pc, #76]	; (800be68 <xTaskRemoveFromEventList+0xb4>)
 800be1c:	441a      	add	r2, r3
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	3304      	adds	r3, #4
 800be22:	4619      	mov	r1, r3
 800be24:	4610      	mov	r0, r2
 800be26:	f7fe fc70 	bl	800a70a <vListInsertEnd>
 800be2a:	e005      	b.n	800be38 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	3318      	adds	r3, #24
 800be30:	4619      	mov	r1, r3
 800be32:	480e      	ldr	r0, [pc, #56]	; (800be6c <xTaskRemoveFromEventList+0xb8>)
 800be34:	f7fe fc69 	bl	800a70a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <xTaskRemoveFromEventList+0xbc>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be42:	429a      	cmp	r2, r3
 800be44:	d905      	bls.n	800be52 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be46:	2301      	movs	r3, #1
 800be48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be4a:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <xTaskRemoveFromEventList+0xc0>)
 800be4c:	2201      	movs	r2, #1
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	e001      	b.n	800be56 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800be56:	697b      	ldr	r3, [r7, #20]
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	20002488 	.word	0x20002488
 800be64:	20002468 	.word	0x20002468
 800be68:	20002364 	.word	0x20002364
 800be6c:	20002420 	.word	0x20002420
 800be70:	20002360 	.word	0x20002360
 800be74:	20002474 	.word	0x20002474

0800be78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be80:	4b06      	ldr	r3, [pc, #24]	; (800be9c <vTaskInternalSetTimeOutState+0x24>)
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be88:	4b05      	ldr	r3, [pc, #20]	; (800bea0 <vTaskInternalSetTimeOutState+0x28>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	605a      	str	r2, [r3, #4]
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	20002478 	.word	0x20002478
 800bea0:	20002464 	.word	0x20002464

0800bea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10a      	bne.n	800beca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	613b      	str	r3, [r7, #16]
}
 800bec6:	bf00      	nop
 800bec8:	e7fe      	b.n	800bec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10a      	bne.n	800bee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	60fb      	str	r3, [r7, #12]
}
 800bee2:	bf00      	nop
 800bee4:	e7fe      	b.n	800bee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bee6:	f000 fc7d 	bl	800c7e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800beea:	4b1d      	ldr	r3, [pc, #116]	; (800bf60 <xTaskCheckForTimeOut+0xbc>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf02:	d102      	bne.n	800bf0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf04:	2300      	movs	r3, #0
 800bf06:	61fb      	str	r3, [r7, #28]
 800bf08:	e023      	b.n	800bf52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	4b15      	ldr	r3, [pc, #84]	; (800bf64 <xTaskCheckForTimeOut+0xc0>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d007      	beq.n	800bf26 <xTaskCheckForTimeOut+0x82>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d302      	bcc.n	800bf26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf20:	2301      	movs	r3, #1
 800bf22:	61fb      	str	r3, [r7, #28]
 800bf24:	e015      	b.n	800bf52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d20b      	bcs.n	800bf48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7ff ff9b 	bl	800be78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf42:	2300      	movs	r3, #0
 800bf44:	61fb      	str	r3, [r7, #28]
 800bf46:	e004      	b.n	800bf52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf52:	f000 fc77 	bl	800c844 <vPortExitCritical>

	return xReturn;
 800bf56:	69fb      	ldr	r3, [r7, #28]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3720      	adds	r7, #32
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20002464 	.word	0x20002464
 800bf64:	20002478 	.word	0x20002478

0800bf68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf6c:	4b03      	ldr	r3, [pc, #12]	; (800bf7c <vTaskMissedYield+0x14>)
 800bf6e:	2201      	movs	r2, #1
 800bf70:	601a      	str	r2, [r3, #0]
}
 800bf72:	bf00      	nop
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	20002474 	.word	0x20002474

0800bf80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf88:	f000 f852 	bl	800c030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf8c:	4b06      	ldr	r3, [pc, #24]	; (800bfa8 <prvIdleTask+0x28>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d9f9      	bls.n	800bf88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf94:	4b05      	ldr	r3, [pc, #20]	; (800bfac <prvIdleTask+0x2c>)
 800bf96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf9a:	601a      	str	r2, [r3, #0]
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfa4:	e7f0      	b.n	800bf88 <prvIdleTask+0x8>
 800bfa6:	bf00      	nop
 800bfa8:	20002364 	.word	0x20002364
 800bfac:	e000ed04 	.word	0xe000ed04

0800bfb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	607b      	str	r3, [r7, #4]
 800bfba:	e00c      	b.n	800bfd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4a12      	ldr	r2, [pc, #72]	; (800c010 <prvInitialiseTaskLists+0x60>)
 800bfc8:	4413      	add	r3, r2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fb70 	bl	800a6b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	607b      	str	r3, [r7, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b06      	cmp	r3, #6
 800bfda:	d9ef      	bls.n	800bfbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfdc:	480d      	ldr	r0, [pc, #52]	; (800c014 <prvInitialiseTaskLists+0x64>)
 800bfde:	f7fe fb67 	bl	800a6b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfe2:	480d      	ldr	r0, [pc, #52]	; (800c018 <prvInitialiseTaskLists+0x68>)
 800bfe4:	f7fe fb64 	bl	800a6b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfe8:	480c      	ldr	r0, [pc, #48]	; (800c01c <prvInitialiseTaskLists+0x6c>)
 800bfea:	f7fe fb61 	bl	800a6b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfee:	480c      	ldr	r0, [pc, #48]	; (800c020 <prvInitialiseTaskLists+0x70>)
 800bff0:	f7fe fb5e 	bl	800a6b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bff4:	480b      	ldr	r0, [pc, #44]	; (800c024 <prvInitialiseTaskLists+0x74>)
 800bff6:	f7fe fb5b 	bl	800a6b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bffa:	4b0b      	ldr	r3, [pc, #44]	; (800c028 <prvInitialiseTaskLists+0x78>)
 800bffc:	4a05      	ldr	r2, [pc, #20]	; (800c014 <prvInitialiseTaskLists+0x64>)
 800bffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c000:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <prvInitialiseTaskLists+0x7c>)
 800c002:	4a05      	ldr	r2, [pc, #20]	; (800c018 <prvInitialiseTaskLists+0x68>)
 800c004:	601a      	str	r2, [r3, #0]
}
 800c006:	bf00      	nop
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	20002364 	.word	0x20002364
 800c014:	200023f0 	.word	0x200023f0
 800c018:	20002404 	.word	0x20002404
 800c01c:	20002420 	.word	0x20002420
 800c020:	20002434 	.word	0x20002434
 800c024:	2000244c 	.word	0x2000244c
 800c028:	20002418 	.word	0x20002418
 800c02c:	2000241c 	.word	0x2000241c

0800c030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c036:	e019      	b.n	800c06c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c038:	f000 fbd4 	bl	800c7e4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c03c:	4b10      	ldr	r3, [pc, #64]	; (800c080 <prvCheckTasksWaitingTermination+0x50>)
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3304      	adds	r3, #4
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe fbbb 	bl	800a7c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c04e:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <prvCheckTasksWaitingTermination+0x54>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3b01      	subs	r3, #1
 800c054:	4a0b      	ldr	r2, [pc, #44]	; (800c084 <prvCheckTasksWaitingTermination+0x54>)
 800c056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c058:	4b0b      	ldr	r3, [pc, #44]	; (800c088 <prvCheckTasksWaitingTermination+0x58>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	3b01      	subs	r3, #1
 800c05e:	4a0a      	ldr	r2, [pc, #40]	; (800c088 <prvCheckTasksWaitingTermination+0x58>)
 800c060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c062:	f000 fbef 	bl	800c844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f810 	bl	800c08c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c06c:	4b06      	ldr	r3, [pc, #24]	; (800c088 <prvCheckTasksWaitingTermination+0x58>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1e1      	bne.n	800c038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20002434 	.word	0x20002434
 800c084:	20002460 	.word	0x20002460
 800c088:	20002448 	.word	0x20002448

0800c08c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	334c      	adds	r3, #76	; 0x4c
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 ffe7 	bl	800d06c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f000 fd84 	bl	800cbb0 <vPortFree>
			vPortFree( pxTCB );
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fd81 	bl	800cbb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0ae:	bf00      	nop
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0be:	4b0f      	ldr	r3, [pc, #60]	; (800c0fc <prvResetNextTaskUnblockTime+0x44>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <prvResetNextTaskUnblockTime+0x14>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e000      	b.n	800c0ce <prvResetNextTaskUnblockTime+0x16>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0d2:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <prvResetNextTaskUnblockTime+0x48>)
 800c0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0da:	e008      	b.n	800c0ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c0dc:	4b07      	ldr	r3, [pc, #28]	; (800c0fc <prvResetNextTaskUnblockTime+0x44>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	4a05      	ldr	r2, [pc, #20]	; (800c100 <prvResetNextTaskUnblockTime+0x48>)
 800c0ec:	6013      	str	r3, [r2, #0]
}
 800c0ee:	bf00      	nop
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	20002418 	.word	0x20002418
 800c100:	20002480 	.word	0x20002480

0800c104 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c10a:	4b0b      	ldr	r3, [pc, #44]	; (800c138 <xTaskGetSchedulerState+0x34>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d102      	bne.n	800c118 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c112:	2301      	movs	r3, #1
 800c114:	607b      	str	r3, [r7, #4]
 800c116:	e008      	b.n	800c12a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c118:	4b08      	ldr	r3, [pc, #32]	; (800c13c <xTaskGetSchedulerState+0x38>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c120:	2302      	movs	r3, #2
 800c122:	607b      	str	r3, [r7, #4]
 800c124:	e001      	b.n	800c12a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c126:	2300      	movs	r3, #0
 800c128:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c12a:	687b      	ldr	r3, [r7, #4]
	}
 800c12c:	4618      	mov	r0, r3
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	2000246c 	.word	0x2000246c
 800c13c:	20002488 	.word	0x20002488

0800c140 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c14c:	2300      	movs	r3, #0
 800c14e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d06e      	beq.n	800c234 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c15a:	4b39      	ldr	r3, [pc, #228]	; (800c240 <xTaskPriorityInherit+0x100>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c160:	429a      	cmp	r2, r3
 800c162:	d25e      	bcs.n	800c222 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	699b      	ldr	r3, [r3, #24]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	db06      	blt.n	800c17a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c16c:	4b34      	ldr	r3, [pc, #208]	; (800c240 <xTaskPriorityInherit+0x100>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c172:	f1c3 0207 	rsb	r2, r3, #7
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	6959      	ldr	r1, [r3, #20]
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4a2e      	ldr	r2, [pc, #184]	; (800c244 <xTaskPriorityInherit+0x104>)
 800c18c:	4413      	add	r3, r2
 800c18e:	4299      	cmp	r1, r3
 800c190:	d101      	bne.n	800c196 <xTaskPriorityInherit+0x56>
 800c192:	2301      	movs	r3, #1
 800c194:	e000      	b.n	800c198 <xTaskPriorityInherit+0x58>
 800c196:	2300      	movs	r3, #0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d03a      	beq.n	800c212 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	3304      	adds	r3, #4
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fe fb0f 	bl	800a7c4 <uxListRemove>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d115      	bne.n	800c1d8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b0:	4924      	ldr	r1, [pc, #144]	; (800c244 <xTaskPriorityInherit+0x104>)
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	4413      	add	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	440b      	add	r3, r1
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10a      	bne.n	800c1d8 <xTaskPriorityInherit+0x98>
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1cc:	43da      	mvns	r2, r3
 800c1ce:	4b1e      	ldr	r3, [pc, #120]	; (800c248 <xTaskPriorityInherit+0x108>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	4a1c      	ldr	r2, [pc, #112]	; (800c248 <xTaskPriorityInherit+0x108>)
 800c1d6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1d8:	4b19      	ldr	r3, [pc, #100]	; (800c240 <xTaskPriorityInherit+0x100>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	409a      	lsls	r2, r3
 800c1ea:	4b17      	ldr	r3, [pc, #92]	; (800c248 <xTaskPriorityInherit+0x108>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	4a15      	ldr	r2, [pc, #84]	; (800c248 <xTaskPriorityInherit+0x108>)
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4a10      	ldr	r2, [pc, #64]	; (800c244 <xTaskPriorityInherit+0x104>)
 800c202:	441a      	add	r2, r3
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	3304      	adds	r3, #4
 800c208:	4619      	mov	r1, r3
 800c20a:	4610      	mov	r0, r2
 800c20c:	f7fe fa7d 	bl	800a70a <vListInsertEnd>
 800c210:	e004      	b.n	800c21c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c212:	4b0b      	ldr	r3, [pc, #44]	; (800c240 <xTaskPriorityInherit+0x100>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c21c:	2301      	movs	r3, #1
 800c21e:	60fb      	str	r3, [r7, #12]
 800c220:	e008      	b.n	800c234 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c226:	4b06      	ldr	r3, [pc, #24]	; (800c240 <xTaskPriorityInherit+0x100>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d201      	bcs.n	800c234 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c230:	2301      	movs	r3, #1
 800c232:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c234:	68fb      	ldr	r3, [r7, #12]
	}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20002360 	.word	0x20002360
 800c244:	20002364 	.word	0x20002364
 800c248:	20002468 	.word	0x20002468

0800c24c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c258:	2300      	movs	r3, #0
 800c25a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d06e      	beq.n	800c340 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c262:	4b3a      	ldr	r3, [pc, #232]	; (800c34c <xTaskPriorityDisinherit+0x100>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d00a      	beq.n	800c282 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c270:	f383 8811 	msr	BASEPRI, r3
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	f3bf 8f4f 	dsb	sy
 800c27c:	60fb      	str	r3, [r7, #12]
}
 800c27e:	bf00      	nop
 800c280:	e7fe      	b.n	800c280 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c286:	2b00      	cmp	r3, #0
 800c288:	d10a      	bne.n	800c2a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	60bb      	str	r3, [r7, #8]
}
 800c29c:	bf00      	nop
 800c29e:	e7fe      	b.n	800c29e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2a4:	1e5a      	subs	r2, r3, #1
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d044      	beq.n	800c340 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d140      	bne.n	800c340 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	3304      	adds	r3, #4
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fe fa7e 	bl	800a7c4 <uxListRemove>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d115      	bne.n	800c2fa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d2:	491f      	ldr	r1, [pc, #124]	; (800c350 <xTaskPriorityDisinherit+0x104>)
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	440b      	add	r3, r1
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10a      	bne.n	800c2fa <xTaskPriorityDisinherit+0xae>
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ee:	43da      	mvns	r2, r3
 800c2f0:	4b18      	ldr	r3, [pc, #96]	; (800c354 <xTaskPriorityDisinherit+0x108>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	4a17      	ldr	r2, [pc, #92]	; (800c354 <xTaskPriorityDisinherit+0x108>)
 800c2f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c306:	f1c3 0207 	rsb	r2, r3, #7
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c312:	2201      	movs	r2, #1
 800c314:	409a      	lsls	r2, r3
 800c316:	4b0f      	ldr	r3, [pc, #60]	; (800c354 <xTaskPriorityDisinherit+0x108>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	4a0d      	ldr	r2, [pc, #52]	; (800c354 <xTaskPriorityDisinherit+0x108>)
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4a08      	ldr	r2, [pc, #32]	; (800c350 <xTaskPriorityDisinherit+0x104>)
 800c32e:	441a      	add	r2, r3
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	3304      	adds	r3, #4
 800c334:	4619      	mov	r1, r3
 800c336:	4610      	mov	r0, r2
 800c338:	f7fe f9e7 	bl	800a70a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c33c:	2301      	movs	r3, #1
 800c33e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c340:	697b      	ldr	r3, [r7, #20]
	}
 800c342:	4618      	mov	r0, r3
 800c344:	3718      	adds	r7, #24
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	20002360 	.word	0x20002360
 800c350:	20002364 	.word	0x20002364
 800c354:	20002468 	.word	0x20002468

0800c358 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b088      	sub	sp, #32
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c366:	2301      	movs	r3, #1
 800c368:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 8088 	beq.w	800c482 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10a      	bne.n	800c390 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	60fb      	str	r3, [r7, #12]
}
 800c38c:	bf00      	nop
 800c38e:	e7fe      	b.n	800c38e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	429a      	cmp	r2, r3
 800c398:	d902      	bls.n	800c3a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	61fb      	str	r3, [r7, #28]
 800c39e:	e002      	b.n	800c3a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d068      	beq.n	800c482 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d163      	bne.n	800c482 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c3ba:	4b34      	ldr	r3, [pc, #208]	; (800c48c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69ba      	ldr	r2, [r7, #24]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d10a      	bne.n	800c3da <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	60bb      	str	r3, [r7, #8]
}
 800c3d6:	bf00      	nop
 800c3d8:	e7fe      	b.n	800c3d8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	69fa      	ldr	r2, [r7, #28]
 800c3e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	db04      	blt.n	800c3f8 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	f1c3 0207 	rsb	r2, r3, #7
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	6959      	ldr	r1, [r3, #20]
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	4613      	mov	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4a22      	ldr	r2, [pc, #136]	; (800c490 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c408:	4413      	add	r3, r2
 800c40a:	4299      	cmp	r1, r3
 800c40c:	d101      	bne.n	800c412 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800c40e:	2301      	movs	r3, #1
 800c410:	e000      	b.n	800c414 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800c412:	2300      	movs	r3, #0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d034      	beq.n	800c482 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	3304      	adds	r3, #4
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fe f9d1 	bl	800a7c4 <uxListRemove>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d115      	bne.n	800c454 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42c:	4918      	ldr	r1, [pc, #96]	; (800c490 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c42e:	4613      	mov	r3, r2
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	4413      	add	r3, r2
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	440b      	add	r3, r1
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c442:	2201      	movs	r2, #1
 800c444:	fa02 f303 	lsl.w	r3, r2, r3
 800c448:	43da      	mvns	r2, r3
 800c44a:	4b12      	ldr	r3, [pc, #72]	; (800c494 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4013      	ands	r3, r2
 800c450:	4a10      	ldr	r2, [pc, #64]	; (800c494 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c452:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c458:	2201      	movs	r2, #1
 800c45a:	409a      	lsls	r2, r3
 800c45c:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4313      	orrs	r3, r2
 800c462:	4a0c      	ldr	r2, [pc, #48]	; (800c494 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c46a:	4613      	mov	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4a07      	ldr	r2, [pc, #28]	; (800c490 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c474:	441a      	add	r2, r3
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	3304      	adds	r3, #4
 800c47a:	4619      	mov	r1, r3
 800c47c:	4610      	mov	r0, r2
 800c47e:	f7fe f944 	bl	800a70a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c482:	bf00      	nop
 800c484:	3720      	adds	r7, #32
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	20002360 	.word	0x20002360
 800c490:	20002364 	.word	0x20002364
 800c494:	20002468 	.word	0x20002468

0800c498 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c498:	b480      	push	{r7}
 800c49a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c49c:	4b07      	ldr	r3, [pc, #28]	; (800c4bc <pvTaskIncrementMutexHeldCount+0x24>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d004      	beq.n	800c4ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c4a4:	4b05      	ldr	r3, [pc, #20]	; (800c4bc <pvTaskIncrementMutexHeldCount+0x24>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4aa:	3201      	adds	r2, #1
 800c4ac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c4ae:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <pvTaskIncrementMutexHeldCount+0x24>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
	}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	20002360 	.word	0x20002360

0800c4c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4ca:	4b29      	ldr	r3, [pc, #164]	; (800c570 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4d0:	4b28      	ldr	r3, [pc, #160]	; (800c574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7fe f974 	bl	800a7c4 <uxListRemove>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10b      	bne.n	800c4fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c4e2:	4b24      	ldr	r3, [pc, #144]	; (800c574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ee:	43da      	mvns	r2, r3
 800c4f0:	4b21      	ldr	r3, [pc, #132]	; (800c578 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4013      	ands	r3, r2
 800c4f6:	4a20      	ldr	r2, [pc, #128]	; (800c578 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c500:	d10a      	bne.n	800c518 <prvAddCurrentTaskToDelayedList+0x58>
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d007      	beq.n	800c518 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c508:	4b1a      	ldr	r3, [pc, #104]	; (800c574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3304      	adds	r3, #4
 800c50e:	4619      	mov	r1, r3
 800c510:	481a      	ldr	r0, [pc, #104]	; (800c57c <prvAddCurrentTaskToDelayedList+0xbc>)
 800c512:	f7fe f8fa 	bl	800a70a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c516:	e026      	b.n	800c566 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4413      	add	r3, r2
 800c51e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c520:	4b14      	ldr	r3, [pc, #80]	; (800c574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d209      	bcs.n	800c544 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c530:	4b13      	ldr	r3, [pc, #76]	; (800c580 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	4b0f      	ldr	r3, [pc, #60]	; (800c574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3304      	adds	r3, #4
 800c53a:	4619      	mov	r1, r3
 800c53c:	4610      	mov	r0, r2
 800c53e:	f7fe f908 	bl	800a752 <vListInsert>
}
 800c542:	e010      	b.n	800c566 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c544:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	4b0a      	ldr	r3, [pc, #40]	; (800c574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	3304      	adds	r3, #4
 800c54e:	4619      	mov	r1, r3
 800c550:	4610      	mov	r0, r2
 800c552:	f7fe f8fe 	bl	800a752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c556:	4b0c      	ldr	r3, [pc, #48]	; (800c588 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d202      	bcs.n	800c566 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c560:	4a09      	ldr	r2, [pc, #36]	; (800c588 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	6013      	str	r3, [r2, #0]
}
 800c566:	bf00      	nop
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20002464 	.word	0x20002464
 800c574:	20002360 	.word	0x20002360
 800c578:	20002468 	.word	0x20002468
 800c57c:	2000244c 	.word	0x2000244c
 800c580:	2000241c 	.word	0x2000241c
 800c584:	20002418 	.word	0x20002418
 800c588:	20002480 	.word	0x20002480

0800c58c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	3b04      	subs	r3, #4
 800c59c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c5a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3b04      	subs	r3, #4
 800c5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f023 0201 	bic.w	r2, r3, #1
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	3b04      	subs	r3, #4
 800c5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c5bc:	4a0c      	ldr	r2, [pc, #48]	; (800c5f0 <pxPortInitialiseStack+0x64>)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	3b14      	subs	r3, #20
 800c5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3b04      	subs	r3, #4
 800c5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f06f 0202 	mvn.w	r2, #2
 800c5da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	3b20      	subs	r3, #32
 800c5e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	0800c5f5 	.word	0x0800c5f5

0800c5f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5fe:	4b12      	ldr	r3, [pc, #72]	; (800c648 <prvTaskExitError+0x54>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c606:	d00a      	beq.n	800c61e <prvTaskExitError+0x2a>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	60fb      	str	r3, [r7, #12]
}
 800c61a:	bf00      	nop
 800c61c:	e7fe      	b.n	800c61c <prvTaskExitError+0x28>
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	60bb      	str	r3, [r7, #8]
}
 800c630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c632:	bf00      	nop
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d0fc      	beq.n	800c634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c63a:	bf00      	nop
 800c63c:	bf00      	nop
 800c63e:	3714      	adds	r7, #20
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	2000002c 	.word	0x2000002c
 800c64c:	00000000 	.word	0x00000000

0800c650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c650:	4b07      	ldr	r3, [pc, #28]	; (800c670 <pxCurrentTCBConst2>)
 800c652:	6819      	ldr	r1, [r3, #0]
 800c654:	6808      	ldr	r0, [r1, #0]
 800c656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65a:	f380 8809 	msr	PSP, r0
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f04f 0000 	mov.w	r0, #0
 800c666:	f380 8811 	msr	BASEPRI, r0
 800c66a:	4770      	bx	lr
 800c66c:	f3af 8000 	nop.w

0800c670 <pxCurrentTCBConst2>:
 800c670:	20002360 	.word	0x20002360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop

0800c678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c678:	4808      	ldr	r0, [pc, #32]	; (800c69c <prvPortStartFirstTask+0x24>)
 800c67a:	6800      	ldr	r0, [r0, #0]
 800c67c:	6800      	ldr	r0, [r0, #0]
 800c67e:	f380 8808 	msr	MSP, r0
 800c682:	f04f 0000 	mov.w	r0, #0
 800c686:	f380 8814 	msr	CONTROL, r0
 800c68a:	b662      	cpsie	i
 800c68c:	b661      	cpsie	f
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	df00      	svc	0
 800c698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c69a:	bf00      	nop
 800c69c:	e000ed08 	.word	0xe000ed08

0800c6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c6a6:	4b46      	ldr	r3, [pc, #280]	; (800c7c0 <xPortStartScheduler+0x120>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a46      	ldr	r2, [pc, #280]	; (800c7c4 <xPortStartScheduler+0x124>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d10a      	bne.n	800c6c6 <xPortStartScheduler+0x26>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	613b      	str	r3, [r7, #16]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c6c6:	4b3e      	ldr	r3, [pc, #248]	; (800c7c0 <xPortStartScheduler+0x120>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a3f      	ldr	r2, [pc, #252]	; (800c7c8 <xPortStartScheduler+0x128>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d10a      	bne.n	800c6e6 <xPortStartScheduler+0x46>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	60fb      	str	r3, [r7, #12]
}
 800c6e2:	bf00      	nop
 800c6e4:	e7fe      	b.n	800c6e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c6e6:	4b39      	ldr	r3, [pc, #228]	; (800c7cc <xPortStartScheduler+0x12c>)
 800c6e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	22ff      	movs	r2, #255	; 0xff
 800c6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c700:	78fb      	ldrb	r3, [r7, #3]
 800c702:	b2db      	uxtb	r3, r3
 800c704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	4b31      	ldr	r3, [pc, #196]	; (800c7d0 <xPortStartScheduler+0x130>)
 800c70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c70e:	4b31      	ldr	r3, [pc, #196]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c710:	2207      	movs	r2, #7
 800c712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c714:	e009      	b.n	800c72a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c716:	4b2f      	ldr	r3, [pc, #188]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	4a2d      	ldr	r2, [pc, #180]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c720:	78fb      	ldrb	r3, [r7, #3]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	b2db      	uxtb	r3, r3
 800c728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c72a:	78fb      	ldrb	r3, [r7, #3]
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c732:	2b80      	cmp	r3, #128	; 0x80
 800c734:	d0ef      	beq.n	800c716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c736:	4b27      	ldr	r3, [pc, #156]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f1c3 0307 	rsb	r3, r3, #7
 800c73e:	2b04      	cmp	r3, #4
 800c740:	d00a      	beq.n	800c758 <xPortStartScheduler+0xb8>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	60bb      	str	r3, [r7, #8]
}
 800c754:	bf00      	nop
 800c756:	e7fe      	b.n	800c756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c758:	4b1e      	ldr	r3, [pc, #120]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	021b      	lsls	r3, r3, #8
 800c75e:	4a1d      	ldr	r2, [pc, #116]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c762:	4b1c      	ldr	r3, [pc, #112]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c76a:	4a1a      	ldr	r2, [pc, #104]	; (800c7d4 <xPortStartScheduler+0x134>)
 800c76c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	b2da      	uxtb	r2, r3
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c776:	4b18      	ldr	r3, [pc, #96]	; (800c7d8 <xPortStartScheduler+0x138>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a17      	ldr	r2, [pc, #92]	; (800c7d8 <xPortStartScheduler+0x138>)
 800c77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c782:	4b15      	ldr	r3, [pc, #84]	; (800c7d8 <xPortStartScheduler+0x138>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a14      	ldr	r2, [pc, #80]	; (800c7d8 <xPortStartScheduler+0x138>)
 800c788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c78c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c78e:	f000 f8dd 	bl	800c94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c792:	4b12      	ldr	r3, [pc, #72]	; (800c7dc <xPortStartScheduler+0x13c>)
 800c794:	2200      	movs	r2, #0
 800c796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c798:	f000 f8fc 	bl	800c994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c79c:	4b10      	ldr	r3, [pc, #64]	; (800c7e0 <xPortStartScheduler+0x140>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a0f      	ldr	r2, [pc, #60]	; (800c7e0 <xPortStartScheduler+0x140>)
 800c7a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c7a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c7a8:	f7ff ff66 	bl	800c678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c7ac:	f7ff fa7c 	bl	800bca8 <vTaskSwitchContext>
	prvTaskExitError();
 800c7b0:	f7ff ff20 	bl	800c5f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	e000ed00 	.word	0xe000ed00
 800c7c4:	410fc271 	.word	0x410fc271
 800c7c8:	410fc270 	.word	0x410fc270
 800c7cc:	e000e400 	.word	0xe000e400
 800c7d0:	2000248c 	.word	0x2000248c
 800c7d4:	20002490 	.word	0x20002490
 800c7d8:	e000ed20 	.word	0xe000ed20
 800c7dc:	2000002c 	.word	0x2000002c
 800c7e0:	e000ef34 	.word	0xe000ef34

0800c7e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	607b      	str	r3, [r7, #4]
}
 800c7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7fe:	4b0f      	ldr	r3, [pc, #60]	; (800c83c <vPortEnterCritical+0x58>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	3301      	adds	r3, #1
 800c804:	4a0d      	ldr	r2, [pc, #52]	; (800c83c <vPortEnterCritical+0x58>)
 800c806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c808:	4b0c      	ldr	r3, [pc, #48]	; (800c83c <vPortEnterCritical+0x58>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d10f      	bne.n	800c830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c810:	4b0b      	ldr	r3, [pc, #44]	; (800c840 <vPortEnterCritical+0x5c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00a      	beq.n	800c830 <vPortEnterCritical+0x4c>
	__asm volatile
 800c81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81e:	f383 8811 	msr	BASEPRI, r3
 800c822:	f3bf 8f6f 	isb	sy
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	603b      	str	r3, [r7, #0]
}
 800c82c:	bf00      	nop
 800c82e:	e7fe      	b.n	800c82e <vPortEnterCritical+0x4a>
	}
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr
 800c83c:	2000002c 	.word	0x2000002c
 800c840:	e000ed04 	.word	0xe000ed04

0800c844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c84a:	4b12      	ldr	r3, [pc, #72]	; (800c894 <vPortExitCritical+0x50>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10a      	bne.n	800c868 <vPortExitCritical+0x24>
	__asm volatile
 800c852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	607b      	str	r3, [r7, #4]
}
 800c864:	bf00      	nop
 800c866:	e7fe      	b.n	800c866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c868:	4b0a      	ldr	r3, [pc, #40]	; (800c894 <vPortExitCritical+0x50>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	4a09      	ldr	r2, [pc, #36]	; (800c894 <vPortExitCritical+0x50>)
 800c870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c872:	4b08      	ldr	r3, [pc, #32]	; (800c894 <vPortExitCritical+0x50>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d105      	bne.n	800c886 <vPortExitCritical+0x42>
 800c87a:	2300      	movs	r3, #0
 800c87c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	f383 8811 	msr	BASEPRI, r3
}
 800c884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c886:	bf00      	nop
 800c888:	370c      	adds	r7, #12
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	2000002c 	.word	0x2000002c
	...

0800c8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c8a0:	f3ef 8009 	mrs	r0, PSP
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	4b15      	ldr	r3, [pc, #84]	; (800c900 <pxCurrentTCBConst>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	f01e 0f10 	tst.w	lr, #16
 800c8b0:	bf08      	it	eq
 800c8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ba:	6010      	str	r0, [r2, #0]
 800c8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c8c4:	f380 8811 	msr	BASEPRI, r0
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f7ff f9ea 	bl	800bca8 <vTaskSwitchContext>
 800c8d4:	f04f 0000 	mov.w	r0, #0
 800c8d8:	f380 8811 	msr	BASEPRI, r0
 800c8dc:	bc09      	pop	{r0, r3}
 800c8de:	6819      	ldr	r1, [r3, #0]
 800c8e0:	6808      	ldr	r0, [r1, #0]
 800c8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e6:	f01e 0f10 	tst.w	lr, #16
 800c8ea:	bf08      	it	eq
 800c8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8f0:	f380 8809 	msr	PSP, r0
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	4770      	bx	lr
 800c8fa:	bf00      	nop
 800c8fc:	f3af 8000 	nop.w

0800c900 <pxCurrentTCBConst>:
 800c900:	20002360 	.word	0x20002360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop

0800c908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	607b      	str	r3, [r7, #4]
}
 800c920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c922:	f7ff f903 	bl	800bb2c <xTaskIncrementTick>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d003      	beq.n	800c934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c92c:	4b06      	ldr	r3, [pc, #24]	; (800c948 <SysTick_Handler+0x40>)
 800c92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	2300      	movs	r3, #0
 800c936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	f383 8811 	msr	BASEPRI, r3
}
 800c93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c940:	bf00      	nop
 800c942:	3708      	adds	r7, #8
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c94c:	b480      	push	{r7}
 800c94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c950:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <vPortSetupTimerInterrupt+0x34>)
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c956:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <vPortSetupTimerInterrupt+0x38>)
 800c958:	2200      	movs	r2, #0
 800c95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c95c:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <vPortSetupTimerInterrupt+0x3c>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a0a      	ldr	r2, [pc, #40]	; (800c98c <vPortSetupTimerInterrupt+0x40>)
 800c962:	fba2 2303 	umull	r2, r3, r2, r3
 800c966:	099b      	lsrs	r3, r3, #6
 800c968:	4a09      	ldr	r2, [pc, #36]	; (800c990 <vPortSetupTimerInterrupt+0x44>)
 800c96a:	3b01      	subs	r3, #1
 800c96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c96e:	4b04      	ldr	r3, [pc, #16]	; (800c980 <vPortSetupTimerInterrupt+0x34>)
 800c970:	2207      	movs	r2, #7
 800c972:	601a      	str	r2, [r3, #0]
}
 800c974:	bf00      	nop
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	e000e010 	.word	0xe000e010
 800c984:	e000e018 	.word	0xe000e018
 800c988:	2000000c 	.word	0x2000000c
 800c98c:	10624dd3 	.word	0x10624dd3
 800c990:	e000e014 	.word	0xe000e014

0800c994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c9a4 <vPortEnableVFP+0x10>
 800c998:	6801      	ldr	r1, [r0, #0]
 800c99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c99e:	6001      	str	r1, [r0, #0]
 800c9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c9a2:	bf00      	nop
 800c9a4:	e000ed88 	.word	0xe000ed88

0800c9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c9ae:	f3ef 8305 	mrs	r3, IPSR
 800c9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b0f      	cmp	r3, #15
 800c9b8:	d914      	bls.n	800c9e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c9ba:	4a17      	ldr	r2, [pc, #92]	; (800ca18 <vPortValidateInterruptPriority+0x70>)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	4413      	add	r3, r2
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c9c4:	4b15      	ldr	r3, [pc, #84]	; (800ca1c <vPortValidateInterruptPriority+0x74>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	7afa      	ldrb	r2, [r7, #11]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d20a      	bcs.n	800c9e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d2:	f383 8811 	msr	BASEPRI, r3
 800c9d6:	f3bf 8f6f 	isb	sy
 800c9da:	f3bf 8f4f 	dsb	sy
 800c9de:	607b      	str	r3, [r7, #4]
}
 800c9e0:	bf00      	nop
 800c9e2:	e7fe      	b.n	800c9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ca20 <vPortValidateInterruptPriority+0x78>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ca24 <vPortValidateInterruptPriority+0x7c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d90a      	bls.n	800ca0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	603b      	str	r3, [r7, #0]
}
 800ca06:	bf00      	nop
 800ca08:	e7fe      	b.n	800ca08 <vPortValidateInterruptPriority+0x60>
	}
 800ca0a:	bf00      	nop
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	e000e3f0 	.word	0xe000e3f0
 800ca1c:	2000248c 	.word	0x2000248c
 800ca20:	e000ed0c 	.word	0xe000ed0c
 800ca24:	20002490 	.word	0x20002490

0800ca28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08a      	sub	sp, #40	; 0x28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca30:	2300      	movs	r3, #0
 800ca32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca34:	f7fe ffd0 	bl	800b9d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca38:	4b58      	ldr	r3, [pc, #352]	; (800cb9c <pvPortMalloc+0x174>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca40:	f000 f910 	bl	800cc64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca44:	4b56      	ldr	r3, [pc, #344]	; (800cba0 <pvPortMalloc+0x178>)
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f040 808e 	bne.w	800cb6e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01d      	beq.n	800ca94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca58:	2208      	movs	r2, #8
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f003 0307 	and.w	r3, r3, #7
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d014      	beq.n	800ca94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f023 0307 	bic.w	r3, r3, #7
 800ca70:	3308      	adds	r3, #8
 800ca72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f003 0307 	and.w	r3, r3, #7
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00a      	beq.n	800ca94 <pvPortMalloc+0x6c>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	617b      	str	r3, [r7, #20]
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d069      	beq.n	800cb6e <pvPortMalloc+0x146>
 800ca9a:	4b42      	ldr	r3, [pc, #264]	; (800cba4 <pvPortMalloc+0x17c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d864      	bhi.n	800cb6e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800caa4:	4b40      	ldr	r3, [pc, #256]	; (800cba8 <pvPortMalloc+0x180>)
 800caa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800caa8:	4b3f      	ldr	r3, [pc, #252]	; (800cba8 <pvPortMalloc+0x180>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caae:	e004      	b.n	800caba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d903      	bls.n	800cacc <pvPortMalloc+0xa4>
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1f1      	bne.n	800cab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cacc:	4b33      	ldr	r3, [pc, #204]	; (800cb9c <pvPortMalloc+0x174>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d04b      	beq.n	800cb6e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2208      	movs	r2, #8
 800cadc:	4413      	add	r3, r2
 800cade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	6a3b      	ldr	r3, [r7, #32]
 800cae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	1ad2      	subs	r2, r2, r3
 800caf0:	2308      	movs	r3, #8
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d91f      	bls.n	800cb38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800caf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4413      	add	r3, r2
 800cafe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb00:	69bb      	ldr	r3, [r7, #24]
 800cb02:	f003 0307 	and.w	r3, r3, #7
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00a      	beq.n	800cb20 <pvPortMalloc+0xf8>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	613b      	str	r3, [r7, #16]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	1ad2      	subs	r2, r2, r3
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb32:	69b8      	ldr	r0, [r7, #24]
 800cb34:	f000 f8f8 	bl	800cd28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb38:	4b1a      	ldr	r3, [pc, #104]	; (800cba4 <pvPortMalloc+0x17c>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	4a18      	ldr	r2, [pc, #96]	; (800cba4 <pvPortMalloc+0x17c>)
 800cb44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb46:	4b17      	ldr	r3, [pc, #92]	; (800cba4 <pvPortMalloc+0x17c>)
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	4b18      	ldr	r3, [pc, #96]	; (800cbac <pvPortMalloc+0x184>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d203      	bcs.n	800cb5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb52:	4b14      	ldr	r3, [pc, #80]	; (800cba4 <pvPortMalloc+0x17c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a15      	ldr	r2, [pc, #84]	; (800cbac <pvPortMalloc+0x184>)
 800cb58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	685a      	ldr	r2, [r3, #4]
 800cb5e:	4b10      	ldr	r3, [pc, #64]	; (800cba0 <pvPortMalloc+0x178>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	431a      	orrs	r2, r3
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb6e:	f7fe ff41 	bl	800b9f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	f003 0307 	and.w	r3, r3, #7
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00a      	beq.n	800cb92 <pvPortMalloc+0x16a>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60fb      	str	r3, [r7, #12]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <pvPortMalloc+0x168>
	return pvReturn;
 800cb92:	69fb      	ldr	r3, [r7, #28]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3728      	adds	r7, #40	; 0x28
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	2000449c 	.word	0x2000449c
 800cba0:	200044a8 	.word	0x200044a8
 800cba4:	200044a0 	.word	0x200044a0
 800cba8:	20004494 	.word	0x20004494
 800cbac:	200044a4 	.word	0x200044a4

0800cbb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d048      	beq.n	800cc54 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbc2:	2308      	movs	r3, #8
 800cbc4:	425b      	negs	r3, r3
 800cbc6:	697a      	ldr	r2, [r7, #20]
 800cbc8:	4413      	add	r3, r2
 800cbca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	4b21      	ldr	r3, [pc, #132]	; (800cc5c <vPortFree+0xac>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4013      	ands	r3, r2
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d10a      	bne.n	800cbf4 <vPortFree+0x44>
	__asm volatile
 800cbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe2:	f383 8811 	msr	BASEPRI, r3
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	f3bf 8f4f 	dsb	sy
 800cbee:	60fb      	str	r3, [r7, #12]
}
 800cbf0:	bf00      	nop
 800cbf2:	e7fe      	b.n	800cbf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00a      	beq.n	800cc12 <vPortFree+0x62>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	60bb      	str	r3, [r7, #8]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	4b11      	ldr	r3, [pc, #68]	; (800cc5c <vPortFree+0xac>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d019      	beq.n	800cc54 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d115      	bne.n	800cc54 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	685a      	ldr	r2, [r3, #4]
 800cc2c:	4b0b      	ldr	r3, [pc, #44]	; (800cc5c <vPortFree+0xac>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	43db      	mvns	r3, r3
 800cc32:	401a      	ands	r2, r3
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc38:	f7fe fece 	bl	800b9d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	685a      	ldr	r2, [r3, #4]
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <vPortFree+0xb0>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4413      	add	r3, r2
 800cc46:	4a06      	ldr	r2, [pc, #24]	; (800cc60 <vPortFree+0xb0>)
 800cc48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc4a:	6938      	ldr	r0, [r7, #16]
 800cc4c:	f000 f86c 	bl	800cd28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cc50:	f7fe fed0 	bl	800b9f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc54:	bf00      	nop
 800cc56:	3718      	adds	r7, #24
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	200044a8 	.word	0x200044a8
 800cc60:	200044a0 	.word	0x200044a0

0800cc64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc64:	b480      	push	{r7}
 800cc66:	b085      	sub	sp, #20
 800cc68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cc6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc70:	4b27      	ldr	r3, [pc, #156]	; (800cd10 <prvHeapInit+0xac>)
 800cc72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f003 0307 	and.w	r3, r3, #7
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00c      	beq.n	800cc98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3307      	adds	r3, #7
 800cc82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f023 0307 	bic.w	r3, r3, #7
 800cc8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	4a1f      	ldr	r2, [pc, #124]	; (800cd10 <prvHeapInit+0xac>)
 800cc94:	4413      	add	r3, r2
 800cc96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc9c:	4a1d      	ldr	r2, [pc, #116]	; (800cd14 <prvHeapInit+0xb0>)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cca2:	4b1c      	ldr	r3, [pc, #112]	; (800cd14 <prvHeapInit+0xb0>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	4413      	add	r3, r2
 800ccae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ccb0:	2208      	movs	r2, #8
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	1a9b      	subs	r3, r3, r2
 800ccb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f023 0307 	bic.w	r3, r3, #7
 800ccbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	4a15      	ldr	r2, [pc, #84]	; (800cd18 <prvHeapInit+0xb4>)
 800ccc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccc6:	4b14      	ldr	r3, [pc, #80]	; (800cd18 <prvHeapInit+0xb4>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2200      	movs	r2, #0
 800cccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccce:	4b12      	ldr	r3, [pc, #72]	; (800cd18 <prvHeapInit+0xb4>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	1ad2      	subs	r2, r2, r3
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cce4:	4b0c      	ldr	r3, [pc, #48]	; (800cd18 <prvHeapInit+0xb4>)
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	4a0a      	ldr	r2, [pc, #40]	; (800cd1c <prvHeapInit+0xb8>)
 800ccf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	4a09      	ldr	r2, [pc, #36]	; (800cd20 <prvHeapInit+0xbc>)
 800ccfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccfc:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <prvHeapInit+0xc0>)
 800ccfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd02:	601a      	str	r2, [r3, #0]
}
 800cd04:	bf00      	nop
 800cd06:	3714      	adds	r7, #20
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	20002494 	.word	0x20002494
 800cd14:	20004494 	.word	0x20004494
 800cd18:	2000449c 	.word	0x2000449c
 800cd1c:	200044a4 	.word	0x200044a4
 800cd20:	200044a0 	.word	0x200044a0
 800cd24:	200044a8 	.word	0x200044a8

0800cd28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd30:	4b28      	ldr	r3, [pc, #160]	; (800cdd4 <prvInsertBlockIntoFreeList+0xac>)
 800cd32:	60fb      	str	r3, [r7, #12]
 800cd34:	e002      	b.n	800cd3c <prvInsertBlockIntoFreeList+0x14>
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d8f7      	bhi.n	800cd36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	4413      	add	r3, r2
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d108      	bne.n	800cd6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	441a      	add	r2, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	441a      	add	r2, r3
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d118      	bne.n	800cdb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	4b15      	ldr	r3, [pc, #84]	; (800cdd8 <prvInsertBlockIntoFreeList+0xb0>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d00d      	beq.n	800cda6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	441a      	add	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	e008      	b.n	800cdb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cda6:	4b0c      	ldr	r3, [pc, #48]	; (800cdd8 <prvInsertBlockIntoFreeList+0xb0>)
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	601a      	str	r2, [r3, #0]
 800cdae:	e003      	b.n	800cdb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d002      	beq.n	800cdc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdc6:	bf00      	nop
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	20004494 	.word	0x20004494
 800cdd8:	2000449c 	.word	0x2000449c

0800cddc <__errno>:
 800cddc:	4b01      	ldr	r3, [pc, #4]	; (800cde4 <__errno+0x8>)
 800cdde:	6818      	ldr	r0, [r3, #0]
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	20000030 	.word	0x20000030

0800cde8 <__libc_init_array>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	4d0d      	ldr	r5, [pc, #52]	; (800ce20 <__libc_init_array+0x38>)
 800cdec:	4c0d      	ldr	r4, [pc, #52]	; (800ce24 <__libc_init_array+0x3c>)
 800cdee:	1b64      	subs	r4, r4, r5
 800cdf0:	10a4      	asrs	r4, r4, #2
 800cdf2:	2600      	movs	r6, #0
 800cdf4:	42a6      	cmp	r6, r4
 800cdf6:	d109      	bne.n	800ce0c <__libc_init_array+0x24>
 800cdf8:	4d0b      	ldr	r5, [pc, #44]	; (800ce28 <__libc_init_array+0x40>)
 800cdfa:	4c0c      	ldr	r4, [pc, #48]	; (800ce2c <__libc_init_array+0x44>)
 800cdfc:	f000 fd70 	bl	800d8e0 <_init>
 800ce00:	1b64      	subs	r4, r4, r5
 800ce02:	10a4      	asrs	r4, r4, #2
 800ce04:	2600      	movs	r6, #0
 800ce06:	42a6      	cmp	r6, r4
 800ce08:	d105      	bne.n	800ce16 <__libc_init_array+0x2e>
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce10:	4798      	blx	r3
 800ce12:	3601      	adds	r6, #1
 800ce14:	e7ee      	b.n	800cdf4 <__libc_init_array+0xc>
 800ce16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce1a:	4798      	blx	r3
 800ce1c:	3601      	adds	r6, #1
 800ce1e:	e7f2      	b.n	800ce06 <__libc_init_array+0x1e>
 800ce20:	0800de98 	.word	0x0800de98
 800ce24:	0800de98 	.word	0x0800de98
 800ce28:	0800de98 	.word	0x0800de98
 800ce2c:	0800de9c 	.word	0x0800de9c

0800ce30 <__retarget_lock_acquire_recursive>:
 800ce30:	4770      	bx	lr

0800ce32 <__retarget_lock_release_recursive>:
 800ce32:	4770      	bx	lr

0800ce34 <malloc>:
 800ce34:	4b02      	ldr	r3, [pc, #8]	; (800ce40 <malloc+0xc>)
 800ce36:	4601      	mov	r1, r0
 800ce38:	6818      	ldr	r0, [r3, #0]
 800ce3a:	f000 b88d 	b.w	800cf58 <_malloc_r>
 800ce3e:	bf00      	nop
 800ce40:	20000030 	.word	0x20000030

0800ce44 <free>:
 800ce44:	4b02      	ldr	r3, [pc, #8]	; (800ce50 <free+0xc>)
 800ce46:	4601      	mov	r1, r0
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	f000 b819 	b.w	800ce80 <_free_r>
 800ce4e:	bf00      	nop
 800ce50:	20000030 	.word	0x20000030

0800ce54 <memcpy>:
 800ce54:	440a      	add	r2, r1
 800ce56:	4291      	cmp	r1, r2
 800ce58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce5c:	d100      	bne.n	800ce60 <memcpy+0xc>
 800ce5e:	4770      	bx	lr
 800ce60:	b510      	push	{r4, lr}
 800ce62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce6a:	4291      	cmp	r1, r2
 800ce6c:	d1f9      	bne.n	800ce62 <memcpy+0xe>
 800ce6e:	bd10      	pop	{r4, pc}

0800ce70 <memset>:
 800ce70:	4402      	add	r2, r0
 800ce72:	4603      	mov	r3, r0
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d100      	bne.n	800ce7a <memset+0xa>
 800ce78:	4770      	bx	lr
 800ce7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ce7e:	e7f9      	b.n	800ce74 <memset+0x4>

0800ce80 <_free_r>:
 800ce80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce82:	2900      	cmp	r1, #0
 800ce84:	d044      	beq.n	800cf10 <_free_r+0x90>
 800ce86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce8a:	9001      	str	r0, [sp, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f1a1 0404 	sub.w	r4, r1, #4
 800ce92:	bfb8      	it	lt
 800ce94:	18e4      	addlt	r4, r4, r3
 800ce96:	f000 f9d7 	bl	800d248 <__malloc_lock>
 800ce9a:	4a1e      	ldr	r2, [pc, #120]	; (800cf14 <_free_r+0x94>)
 800ce9c:	9801      	ldr	r0, [sp, #4]
 800ce9e:	6813      	ldr	r3, [r2, #0]
 800cea0:	b933      	cbnz	r3, 800ceb0 <_free_r+0x30>
 800cea2:	6063      	str	r3, [r4, #4]
 800cea4:	6014      	str	r4, [r2, #0]
 800cea6:	b003      	add	sp, #12
 800cea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ceac:	f000 b9d2 	b.w	800d254 <__malloc_unlock>
 800ceb0:	42a3      	cmp	r3, r4
 800ceb2:	d908      	bls.n	800cec6 <_free_r+0x46>
 800ceb4:	6825      	ldr	r5, [r4, #0]
 800ceb6:	1961      	adds	r1, r4, r5
 800ceb8:	428b      	cmp	r3, r1
 800ceba:	bf01      	itttt	eq
 800cebc:	6819      	ldreq	r1, [r3, #0]
 800cebe:	685b      	ldreq	r3, [r3, #4]
 800cec0:	1949      	addeq	r1, r1, r5
 800cec2:	6021      	streq	r1, [r4, #0]
 800cec4:	e7ed      	b.n	800cea2 <_free_r+0x22>
 800cec6:	461a      	mov	r2, r3
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	b10b      	cbz	r3, 800ced0 <_free_r+0x50>
 800cecc:	42a3      	cmp	r3, r4
 800cece:	d9fa      	bls.n	800cec6 <_free_r+0x46>
 800ced0:	6811      	ldr	r1, [r2, #0]
 800ced2:	1855      	adds	r5, r2, r1
 800ced4:	42a5      	cmp	r5, r4
 800ced6:	d10b      	bne.n	800cef0 <_free_r+0x70>
 800ced8:	6824      	ldr	r4, [r4, #0]
 800ceda:	4421      	add	r1, r4
 800cedc:	1854      	adds	r4, r2, r1
 800cede:	42a3      	cmp	r3, r4
 800cee0:	6011      	str	r1, [r2, #0]
 800cee2:	d1e0      	bne.n	800cea6 <_free_r+0x26>
 800cee4:	681c      	ldr	r4, [r3, #0]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	6053      	str	r3, [r2, #4]
 800ceea:	4421      	add	r1, r4
 800ceec:	6011      	str	r1, [r2, #0]
 800ceee:	e7da      	b.n	800cea6 <_free_r+0x26>
 800cef0:	d902      	bls.n	800cef8 <_free_r+0x78>
 800cef2:	230c      	movs	r3, #12
 800cef4:	6003      	str	r3, [r0, #0]
 800cef6:	e7d6      	b.n	800cea6 <_free_r+0x26>
 800cef8:	6825      	ldr	r5, [r4, #0]
 800cefa:	1961      	adds	r1, r4, r5
 800cefc:	428b      	cmp	r3, r1
 800cefe:	bf04      	itt	eq
 800cf00:	6819      	ldreq	r1, [r3, #0]
 800cf02:	685b      	ldreq	r3, [r3, #4]
 800cf04:	6063      	str	r3, [r4, #4]
 800cf06:	bf04      	itt	eq
 800cf08:	1949      	addeq	r1, r1, r5
 800cf0a:	6021      	streq	r1, [r4, #0]
 800cf0c:	6054      	str	r4, [r2, #4]
 800cf0e:	e7ca      	b.n	800cea6 <_free_r+0x26>
 800cf10:	b003      	add	sp, #12
 800cf12:	bd30      	pop	{r4, r5, pc}
 800cf14:	200044b0 	.word	0x200044b0

0800cf18 <sbrk_aligned>:
 800cf18:	b570      	push	{r4, r5, r6, lr}
 800cf1a:	4e0e      	ldr	r6, [pc, #56]	; (800cf54 <sbrk_aligned+0x3c>)
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	6831      	ldr	r1, [r6, #0]
 800cf20:	4605      	mov	r5, r0
 800cf22:	b911      	cbnz	r1, 800cf2a <sbrk_aligned+0x12>
 800cf24:	f000 f8fe 	bl	800d124 <_sbrk_r>
 800cf28:	6030      	str	r0, [r6, #0]
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	f000 f8f9 	bl	800d124 <_sbrk_r>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d00a      	beq.n	800cf4c <sbrk_aligned+0x34>
 800cf36:	1cc4      	adds	r4, r0, #3
 800cf38:	f024 0403 	bic.w	r4, r4, #3
 800cf3c:	42a0      	cmp	r0, r4
 800cf3e:	d007      	beq.n	800cf50 <sbrk_aligned+0x38>
 800cf40:	1a21      	subs	r1, r4, r0
 800cf42:	4628      	mov	r0, r5
 800cf44:	f000 f8ee 	bl	800d124 <_sbrk_r>
 800cf48:	3001      	adds	r0, #1
 800cf4a:	d101      	bne.n	800cf50 <sbrk_aligned+0x38>
 800cf4c:	f04f 34ff 	mov.w	r4, #4294967295
 800cf50:	4620      	mov	r0, r4
 800cf52:	bd70      	pop	{r4, r5, r6, pc}
 800cf54:	200044b4 	.word	0x200044b4

0800cf58 <_malloc_r>:
 800cf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5c:	1ccd      	adds	r5, r1, #3
 800cf5e:	f025 0503 	bic.w	r5, r5, #3
 800cf62:	3508      	adds	r5, #8
 800cf64:	2d0c      	cmp	r5, #12
 800cf66:	bf38      	it	cc
 800cf68:	250c      	movcc	r5, #12
 800cf6a:	2d00      	cmp	r5, #0
 800cf6c:	4607      	mov	r7, r0
 800cf6e:	db01      	blt.n	800cf74 <_malloc_r+0x1c>
 800cf70:	42a9      	cmp	r1, r5
 800cf72:	d905      	bls.n	800cf80 <_malloc_r+0x28>
 800cf74:	230c      	movs	r3, #12
 800cf76:	603b      	str	r3, [r7, #0]
 800cf78:	2600      	movs	r6, #0
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf80:	4e2e      	ldr	r6, [pc, #184]	; (800d03c <_malloc_r+0xe4>)
 800cf82:	f000 f961 	bl	800d248 <__malloc_lock>
 800cf86:	6833      	ldr	r3, [r6, #0]
 800cf88:	461c      	mov	r4, r3
 800cf8a:	bb34      	cbnz	r4, 800cfda <_malloc_r+0x82>
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	4638      	mov	r0, r7
 800cf90:	f7ff ffc2 	bl	800cf18 <sbrk_aligned>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	4604      	mov	r4, r0
 800cf98:	d14d      	bne.n	800d036 <_malloc_r+0xde>
 800cf9a:	6834      	ldr	r4, [r6, #0]
 800cf9c:	4626      	mov	r6, r4
 800cf9e:	2e00      	cmp	r6, #0
 800cfa0:	d140      	bne.n	800d024 <_malloc_r+0xcc>
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	eb04 0803 	add.w	r8, r4, r3
 800cfac:	f000 f8ba 	bl	800d124 <_sbrk_r>
 800cfb0:	4580      	cmp	r8, r0
 800cfb2:	d13a      	bne.n	800d02a <_malloc_r+0xd2>
 800cfb4:	6821      	ldr	r1, [r4, #0]
 800cfb6:	3503      	adds	r5, #3
 800cfb8:	1a6d      	subs	r5, r5, r1
 800cfba:	f025 0503 	bic.w	r5, r5, #3
 800cfbe:	3508      	adds	r5, #8
 800cfc0:	2d0c      	cmp	r5, #12
 800cfc2:	bf38      	it	cc
 800cfc4:	250c      	movcc	r5, #12
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	4638      	mov	r0, r7
 800cfca:	f7ff ffa5 	bl	800cf18 <sbrk_aligned>
 800cfce:	3001      	adds	r0, #1
 800cfd0:	d02b      	beq.n	800d02a <_malloc_r+0xd2>
 800cfd2:	6823      	ldr	r3, [r4, #0]
 800cfd4:	442b      	add	r3, r5
 800cfd6:	6023      	str	r3, [r4, #0]
 800cfd8:	e00e      	b.n	800cff8 <_malloc_r+0xa0>
 800cfda:	6822      	ldr	r2, [r4, #0]
 800cfdc:	1b52      	subs	r2, r2, r5
 800cfde:	d41e      	bmi.n	800d01e <_malloc_r+0xc6>
 800cfe0:	2a0b      	cmp	r2, #11
 800cfe2:	d916      	bls.n	800d012 <_malloc_r+0xba>
 800cfe4:	1961      	adds	r1, r4, r5
 800cfe6:	42a3      	cmp	r3, r4
 800cfe8:	6025      	str	r5, [r4, #0]
 800cfea:	bf18      	it	ne
 800cfec:	6059      	strne	r1, [r3, #4]
 800cfee:	6863      	ldr	r3, [r4, #4]
 800cff0:	bf08      	it	eq
 800cff2:	6031      	streq	r1, [r6, #0]
 800cff4:	5162      	str	r2, [r4, r5]
 800cff6:	604b      	str	r3, [r1, #4]
 800cff8:	4638      	mov	r0, r7
 800cffa:	f104 060b 	add.w	r6, r4, #11
 800cffe:	f000 f929 	bl	800d254 <__malloc_unlock>
 800d002:	f026 0607 	bic.w	r6, r6, #7
 800d006:	1d23      	adds	r3, r4, #4
 800d008:	1af2      	subs	r2, r6, r3
 800d00a:	d0b6      	beq.n	800cf7a <_malloc_r+0x22>
 800d00c:	1b9b      	subs	r3, r3, r6
 800d00e:	50a3      	str	r3, [r4, r2]
 800d010:	e7b3      	b.n	800cf7a <_malloc_r+0x22>
 800d012:	6862      	ldr	r2, [r4, #4]
 800d014:	42a3      	cmp	r3, r4
 800d016:	bf0c      	ite	eq
 800d018:	6032      	streq	r2, [r6, #0]
 800d01a:	605a      	strne	r2, [r3, #4]
 800d01c:	e7ec      	b.n	800cff8 <_malloc_r+0xa0>
 800d01e:	4623      	mov	r3, r4
 800d020:	6864      	ldr	r4, [r4, #4]
 800d022:	e7b2      	b.n	800cf8a <_malloc_r+0x32>
 800d024:	4634      	mov	r4, r6
 800d026:	6876      	ldr	r6, [r6, #4]
 800d028:	e7b9      	b.n	800cf9e <_malloc_r+0x46>
 800d02a:	230c      	movs	r3, #12
 800d02c:	603b      	str	r3, [r7, #0]
 800d02e:	4638      	mov	r0, r7
 800d030:	f000 f910 	bl	800d254 <__malloc_unlock>
 800d034:	e7a1      	b.n	800cf7a <_malloc_r+0x22>
 800d036:	6025      	str	r5, [r4, #0]
 800d038:	e7de      	b.n	800cff8 <_malloc_r+0xa0>
 800d03a:	bf00      	nop
 800d03c:	200044b0 	.word	0x200044b0

0800d040 <realloc>:
 800d040:	4b02      	ldr	r3, [pc, #8]	; (800d04c <realloc+0xc>)
 800d042:	460a      	mov	r2, r1
 800d044:	4601      	mov	r1, r0
 800d046:	6818      	ldr	r0, [r3, #0]
 800d048:	f000 b90a 	b.w	800d260 <_realloc_r>
 800d04c:	20000030 	.word	0x20000030

0800d050 <cleanup_glue>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	460c      	mov	r4, r1
 800d054:	6809      	ldr	r1, [r1, #0]
 800d056:	4605      	mov	r5, r0
 800d058:	b109      	cbz	r1, 800d05e <cleanup_glue+0xe>
 800d05a:	f7ff fff9 	bl	800d050 <cleanup_glue>
 800d05e:	4621      	mov	r1, r4
 800d060:	4628      	mov	r0, r5
 800d062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d066:	f7ff bf0b 	b.w	800ce80 <_free_r>
	...

0800d06c <_reclaim_reent>:
 800d06c:	4b2c      	ldr	r3, [pc, #176]	; (800d120 <_reclaim_reent+0xb4>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4283      	cmp	r3, r0
 800d072:	b570      	push	{r4, r5, r6, lr}
 800d074:	4604      	mov	r4, r0
 800d076:	d051      	beq.n	800d11c <_reclaim_reent+0xb0>
 800d078:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d07a:	b143      	cbz	r3, 800d08e <_reclaim_reent+0x22>
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d14a      	bne.n	800d118 <_reclaim_reent+0xac>
 800d082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d084:	6819      	ldr	r1, [r3, #0]
 800d086:	b111      	cbz	r1, 800d08e <_reclaim_reent+0x22>
 800d088:	4620      	mov	r0, r4
 800d08a:	f7ff fef9 	bl	800ce80 <_free_r>
 800d08e:	6961      	ldr	r1, [r4, #20]
 800d090:	b111      	cbz	r1, 800d098 <_reclaim_reent+0x2c>
 800d092:	4620      	mov	r0, r4
 800d094:	f7ff fef4 	bl	800ce80 <_free_r>
 800d098:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d09a:	b111      	cbz	r1, 800d0a2 <_reclaim_reent+0x36>
 800d09c:	4620      	mov	r0, r4
 800d09e:	f7ff feef 	bl	800ce80 <_free_r>
 800d0a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d0a4:	b111      	cbz	r1, 800d0ac <_reclaim_reent+0x40>
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff feea 	bl	800ce80 <_free_r>
 800d0ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d0ae:	b111      	cbz	r1, 800d0b6 <_reclaim_reent+0x4a>
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f7ff fee5 	bl	800ce80 <_free_r>
 800d0b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d0b8:	b111      	cbz	r1, 800d0c0 <_reclaim_reent+0x54>
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff fee0 	bl	800ce80 <_free_r>
 800d0c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d0c2:	b111      	cbz	r1, 800d0ca <_reclaim_reent+0x5e>
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f7ff fedb 	bl	800ce80 <_free_r>
 800d0ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d0cc:	b111      	cbz	r1, 800d0d4 <_reclaim_reent+0x68>
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f7ff fed6 	bl	800ce80 <_free_r>
 800d0d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0d6:	b111      	cbz	r1, 800d0de <_reclaim_reent+0x72>
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f7ff fed1 	bl	800ce80 <_free_r>
 800d0de:	69a3      	ldr	r3, [r4, #24]
 800d0e0:	b1e3      	cbz	r3, 800d11c <_reclaim_reent+0xb0>
 800d0e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	4798      	blx	r3
 800d0e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d0ea:	b1b9      	cbz	r1, 800d11c <_reclaim_reent+0xb0>
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0f2:	f7ff bfad 	b.w	800d050 <cleanup_glue>
 800d0f6:	5949      	ldr	r1, [r1, r5]
 800d0f8:	b941      	cbnz	r1, 800d10c <_reclaim_reent+0xa0>
 800d0fa:	3504      	adds	r5, #4
 800d0fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0fe:	2d80      	cmp	r5, #128	; 0x80
 800d100:	68d9      	ldr	r1, [r3, #12]
 800d102:	d1f8      	bne.n	800d0f6 <_reclaim_reent+0x8a>
 800d104:	4620      	mov	r0, r4
 800d106:	f7ff febb 	bl	800ce80 <_free_r>
 800d10a:	e7ba      	b.n	800d082 <_reclaim_reent+0x16>
 800d10c:	680e      	ldr	r6, [r1, #0]
 800d10e:	4620      	mov	r0, r4
 800d110:	f7ff feb6 	bl	800ce80 <_free_r>
 800d114:	4631      	mov	r1, r6
 800d116:	e7ef      	b.n	800d0f8 <_reclaim_reent+0x8c>
 800d118:	2500      	movs	r5, #0
 800d11a:	e7ef      	b.n	800d0fc <_reclaim_reent+0x90>
 800d11c:	bd70      	pop	{r4, r5, r6, pc}
 800d11e:	bf00      	nop
 800d120:	20000030 	.word	0x20000030

0800d124 <_sbrk_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d06      	ldr	r5, [pc, #24]	; (800d140 <_sbrk_r+0x1c>)
 800d128:	2300      	movs	r3, #0
 800d12a:	4604      	mov	r4, r0
 800d12c:	4608      	mov	r0, r1
 800d12e:	602b      	str	r3, [r5, #0]
 800d130:	f7f5 f83c 	bl	80021ac <_sbrk>
 800d134:	1c43      	adds	r3, r0, #1
 800d136:	d102      	bne.n	800d13e <_sbrk_r+0x1a>
 800d138:	682b      	ldr	r3, [r5, #0]
 800d13a:	b103      	cbz	r3, 800d13e <_sbrk_r+0x1a>
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	bd38      	pop	{r3, r4, r5, pc}
 800d140:	200044b8 	.word	0x200044b8

0800d144 <sniprintf>:
 800d144:	b40c      	push	{r2, r3}
 800d146:	b530      	push	{r4, r5, lr}
 800d148:	4b17      	ldr	r3, [pc, #92]	; (800d1a8 <sniprintf+0x64>)
 800d14a:	1e0c      	subs	r4, r1, #0
 800d14c:	681d      	ldr	r5, [r3, #0]
 800d14e:	b09d      	sub	sp, #116	; 0x74
 800d150:	da08      	bge.n	800d164 <sniprintf+0x20>
 800d152:	238b      	movs	r3, #139	; 0x8b
 800d154:	602b      	str	r3, [r5, #0]
 800d156:	f04f 30ff 	mov.w	r0, #4294967295
 800d15a:	b01d      	add	sp, #116	; 0x74
 800d15c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d160:	b002      	add	sp, #8
 800d162:	4770      	bx	lr
 800d164:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d168:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d16c:	bf14      	ite	ne
 800d16e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d172:	4623      	moveq	r3, r4
 800d174:	9304      	str	r3, [sp, #16]
 800d176:	9307      	str	r3, [sp, #28]
 800d178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d17c:	9002      	str	r0, [sp, #8]
 800d17e:	9006      	str	r0, [sp, #24]
 800d180:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d184:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d186:	ab21      	add	r3, sp, #132	; 0x84
 800d188:	a902      	add	r1, sp, #8
 800d18a:	4628      	mov	r0, r5
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	f000 f8f1 	bl	800d374 <_svfiprintf_r>
 800d192:	1c43      	adds	r3, r0, #1
 800d194:	bfbc      	itt	lt
 800d196:	238b      	movlt	r3, #139	; 0x8b
 800d198:	602b      	strlt	r3, [r5, #0]
 800d19a:	2c00      	cmp	r4, #0
 800d19c:	d0dd      	beq.n	800d15a <sniprintf+0x16>
 800d19e:	9b02      	ldr	r3, [sp, #8]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	e7d9      	b.n	800d15a <sniprintf+0x16>
 800d1a6:	bf00      	nop
 800d1a8:	20000030 	.word	0x20000030

0800d1ac <strchr>:
 800d1ac:	b2c9      	uxtb	r1, r1
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1b4:	b11a      	cbz	r2, 800d1be <strchr+0x12>
 800d1b6:	428a      	cmp	r2, r1
 800d1b8:	d1f9      	bne.n	800d1ae <strchr+0x2>
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	4770      	bx	lr
 800d1be:	2900      	cmp	r1, #0
 800d1c0:	bf18      	it	ne
 800d1c2:	2300      	movne	r3, #0
 800d1c4:	e7f9      	b.n	800d1ba <strchr+0xe>

0800d1c6 <strcpy>:
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1cc:	f803 2b01 	strb.w	r2, [r3], #1
 800d1d0:	2a00      	cmp	r2, #0
 800d1d2:	d1f9      	bne.n	800d1c8 <strcpy+0x2>
 800d1d4:	4770      	bx	lr

0800d1d6 <_vsniprintf_r>:
 800d1d6:	b530      	push	{r4, r5, lr}
 800d1d8:	4614      	mov	r4, r2
 800d1da:	2c00      	cmp	r4, #0
 800d1dc:	b09b      	sub	sp, #108	; 0x6c
 800d1de:	4605      	mov	r5, r0
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	da05      	bge.n	800d1f0 <_vsniprintf_r+0x1a>
 800d1e4:	238b      	movs	r3, #139	; 0x8b
 800d1e6:	6003      	str	r3, [r0, #0]
 800d1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ec:	b01b      	add	sp, #108	; 0x6c
 800d1ee:	bd30      	pop	{r4, r5, pc}
 800d1f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d1f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d1f8:	bf14      	ite	ne
 800d1fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d1fe:	4623      	moveq	r3, r4
 800d200:	9302      	str	r3, [sp, #8]
 800d202:	9305      	str	r3, [sp, #20]
 800d204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d208:	9100      	str	r1, [sp, #0]
 800d20a:	9104      	str	r1, [sp, #16]
 800d20c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d210:	4669      	mov	r1, sp
 800d212:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d214:	f000 f8ae 	bl	800d374 <_svfiprintf_r>
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	bfbc      	itt	lt
 800d21c:	238b      	movlt	r3, #139	; 0x8b
 800d21e:	602b      	strlt	r3, [r5, #0]
 800d220:	2c00      	cmp	r4, #0
 800d222:	d0e3      	beq.n	800d1ec <_vsniprintf_r+0x16>
 800d224:	9b00      	ldr	r3, [sp, #0]
 800d226:	2200      	movs	r2, #0
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	e7df      	b.n	800d1ec <_vsniprintf_r+0x16>

0800d22c <vsniprintf>:
 800d22c:	b507      	push	{r0, r1, r2, lr}
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4613      	mov	r3, r2
 800d232:	460a      	mov	r2, r1
 800d234:	4601      	mov	r1, r0
 800d236:	4803      	ldr	r0, [pc, #12]	; (800d244 <vsniprintf+0x18>)
 800d238:	6800      	ldr	r0, [r0, #0]
 800d23a:	f7ff ffcc 	bl	800d1d6 <_vsniprintf_r>
 800d23e:	b003      	add	sp, #12
 800d240:	f85d fb04 	ldr.w	pc, [sp], #4
 800d244:	20000030 	.word	0x20000030

0800d248 <__malloc_lock>:
 800d248:	4801      	ldr	r0, [pc, #4]	; (800d250 <__malloc_lock+0x8>)
 800d24a:	f7ff bdf1 	b.w	800ce30 <__retarget_lock_acquire_recursive>
 800d24e:	bf00      	nop
 800d250:	200044ac 	.word	0x200044ac

0800d254 <__malloc_unlock>:
 800d254:	4801      	ldr	r0, [pc, #4]	; (800d25c <__malloc_unlock+0x8>)
 800d256:	f7ff bdec 	b.w	800ce32 <__retarget_lock_release_recursive>
 800d25a:	bf00      	nop
 800d25c:	200044ac 	.word	0x200044ac

0800d260 <_realloc_r>:
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	4680      	mov	r8, r0
 800d266:	4614      	mov	r4, r2
 800d268:	460e      	mov	r6, r1
 800d26a:	b921      	cbnz	r1, 800d276 <_realloc_r+0x16>
 800d26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	4611      	mov	r1, r2
 800d272:	f7ff be71 	b.w	800cf58 <_malloc_r>
 800d276:	b92a      	cbnz	r2, 800d284 <_realloc_r+0x24>
 800d278:	f7ff fe02 	bl	800ce80 <_free_r>
 800d27c:	4625      	mov	r5, r4
 800d27e:	4628      	mov	r0, r5
 800d280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d284:	f000 fb24 	bl	800d8d0 <_malloc_usable_size_r>
 800d288:	4284      	cmp	r4, r0
 800d28a:	4607      	mov	r7, r0
 800d28c:	d802      	bhi.n	800d294 <_realloc_r+0x34>
 800d28e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d292:	d812      	bhi.n	800d2ba <_realloc_r+0x5a>
 800d294:	4621      	mov	r1, r4
 800d296:	4640      	mov	r0, r8
 800d298:	f7ff fe5e 	bl	800cf58 <_malloc_r>
 800d29c:	4605      	mov	r5, r0
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	d0ed      	beq.n	800d27e <_realloc_r+0x1e>
 800d2a2:	42bc      	cmp	r4, r7
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	bf28      	it	cs
 800d2aa:	463a      	movcs	r2, r7
 800d2ac:	f7ff fdd2 	bl	800ce54 <memcpy>
 800d2b0:	4631      	mov	r1, r6
 800d2b2:	4640      	mov	r0, r8
 800d2b4:	f7ff fde4 	bl	800ce80 <_free_r>
 800d2b8:	e7e1      	b.n	800d27e <_realloc_r+0x1e>
 800d2ba:	4635      	mov	r5, r6
 800d2bc:	e7df      	b.n	800d27e <_realloc_r+0x1e>

0800d2be <__ssputs_r>:
 800d2be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c2:	688e      	ldr	r6, [r1, #8]
 800d2c4:	429e      	cmp	r6, r3
 800d2c6:	4682      	mov	sl, r0
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	4690      	mov	r8, r2
 800d2cc:	461f      	mov	r7, r3
 800d2ce:	d838      	bhi.n	800d342 <__ssputs_r+0x84>
 800d2d0:	898a      	ldrh	r2, [r1, #12]
 800d2d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2d6:	d032      	beq.n	800d33e <__ssputs_r+0x80>
 800d2d8:	6825      	ldr	r5, [r4, #0]
 800d2da:	6909      	ldr	r1, [r1, #16]
 800d2dc:	eba5 0901 	sub.w	r9, r5, r1
 800d2e0:	6965      	ldr	r5, [r4, #20]
 800d2e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	444b      	add	r3, r9
 800d2ee:	106d      	asrs	r5, r5, #1
 800d2f0:	429d      	cmp	r5, r3
 800d2f2:	bf38      	it	cc
 800d2f4:	461d      	movcc	r5, r3
 800d2f6:	0553      	lsls	r3, r2, #21
 800d2f8:	d531      	bpl.n	800d35e <__ssputs_r+0xa0>
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	f7ff fe2c 	bl	800cf58 <_malloc_r>
 800d300:	4606      	mov	r6, r0
 800d302:	b950      	cbnz	r0, 800d31a <__ssputs_r+0x5c>
 800d304:	230c      	movs	r3, #12
 800d306:	f8ca 3000 	str.w	r3, [sl]
 800d30a:	89a3      	ldrh	r3, [r4, #12]
 800d30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d310:	81a3      	strh	r3, [r4, #12]
 800d312:	f04f 30ff 	mov.w	r0, #4294967295
 800d316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31a:	6921      	ldr	r1, [r4, #16]
 800d31c:	464a      	mov	r2, r9
 800d31e:	f7ff fd99 	bl	800ce54 <memcpy>
 800d322:	89a3      	ldrh	r3, [r4, #12]
 800d324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d32c:	81a3      	strh	r3, [r4, #12]
 800d32e:	6126      	str	r6, [r4, #16]
 800d330:	6165      	str	r5, [r4, #20]
 800d332:	444e      	add	r6, r9
 800d334:	eba5 0509 	sub.w	r5, r5, r9
 800d338:	6026      	str	r6, [r4, #0]
 800d33a:	60a5      	str	r5, [r4, #8]
 800d33c:	463e      	mov	r6, r7
 800d33e:	42be      	cmp	r6, r7
 800d340:	d900      	bls.n	800d344 <__ssputs_r+0x86>
 800d342:	463e      	mov	r6, r7
 800d344:	6820      	ldr	r0, [r4, #0]
 800d346:	4632      	mov	r2, r6
 800d348:	4641      	mov	r1, r8
 800d34a:	f000 faa7 	bl	800d89c <memmove>
 800d34e:	68a3      	ldr	r3, [r4, #8]
 800d350:	1b9b      	subs	r3, r3, r6
 800d352:	60a3      	str	r3, [r4, #8]
 800d354:	6823      	ldr	r3, [r4, #0]
 800d356:	4433      	add	r3, r6
 800d358:	6023      	str	r3, [r4, #0]
 800d35a:	2000      	movs	r0, #0
 800d35c:	e7db      	b.n	800d316 <__ssputs_r+0x58>
 800d35e:	462a      	mov	r2, r5
 800d360:	f7ff ff7e 	bl	800d260 <_realloc_r>
 800d364:	4606      	mov	r6, r0
 800d366:	2800      	cmp	r0, #0
 800d368:	d1e1      	bne.n	800d32e <__ssputs_r+0x70>
 800d36a:	6921      	ldr	r1, [r4, #16]
 800d36c:	4650      	mov	r0, sl
 800d36e:	f7ff fd87 	bl	800ce80 <_free_r>
 800d372:	e7c7      	b.n	800d304 <__ssputs_r+0x46>

0800d374 <_svfiprintf_r>:
 800d374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	4698      	mov	r8, r3
 800d37a:	898b      	ldrh	r3, [r1, #12]
 800d37c:	061b      	lsls	r3, r3, #24
 800d37e:	b09d      	sub	sp, #116	; 0x74
 800d380:	4607      	mov	r7, r0
 800d382:	460d      	mov	r5, r1
 800d384:	4614      	mov	r4, r2
 800d386:	d50e      	bpl.n	800d3a6 <_svfiprintf_r+0x32>
 800d388:	690b      	ldr	r3, [r1, #16]
 800d38a:	b963      	cbnz	r3, 800d3a6 <_svfiprintf_r+0x32>
 800d38c:	2140      	movs	r1, #64	; 0x40
 800d38e:	f7ff fde3 	bl	800cf58 <_malloc_r>
 800d392:	6028      	str	r0, [r5, #0]
 800d394:	6128      	str	r0, [r5, #16]
 800d396:	b920      	cbnz	r0, 800d3a2 <_svfiprintf_r+0x2e>
 800d398:	230c      	movs	r3, #12
 800d39a:	603b      	str	r3, [r7, #0]
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e0d1      	b.n	800d546 <_svfiprintf_r+0x1d2>
 800d3a2:	2340      	movs	r3, #64	; 0x40
 800d3a4:	616b      	str	r3, [r5, #20]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3aa:	2320      	movs	r3, #32
 800d3ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3b4:	2330      	movs	r3, #48	; 0x30
 800d3b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d560 <_svfiprintf_r+0x1ec>
 800d3ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3be:	f04f 0901 	mov.w	r9, #1
 800d3c2:	4623      	mov	r3, r4
 800d3c4:	469a      	mov	sl, r3
 800d3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ca:	b10a      	cbz	r2, 800d3d0 <_svfiprintf_r+0x5c>
 800d3cc:	2a25      	cmp	r2, #37	; 0x25
 800d3ce:	d1f9      	bne.n	800d3c4 <_svfiprintf_r+0x50>
 800d3d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3d4:	d00b      	beq.n	800d3ee <_svfiprintf_r+0x7a>
 800d3d6:	465b      	mov	r3, fp
 800d3d8:	4622      	mov	r2, r4
 800d3da:	4629      	mov	r1, r5
 800d3dc:	4638      	mov	r0, r7
 800d3de:	f7ff ff6e 	bl	800d2be <__ssputs_r>
 800d3e2:	3001      	adds	r0, #1
 800d3e4:	f000 80aa 	beq.w	800d53c <_svfiprintf_r+0x1c8>
 800d3e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3ea:	445a      	add	r2, fp
 800d3ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 80a2 	beq.w	800d53c <_svfiprintf_r+0x1c8>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d3fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d402:	f10a 0a01 	add.w	sl, sl, #1
 800d406:	9304      	str	r3, [sp, #16]
 800d408:	9307      	str	r3, [sp, #28]
 800d40a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d40e:	931a      	str	r3, [sp, #104]	; 0x68
 800d410:	4654      	mov	r4, sl
 800d412:	2205      	movs	r2, #5
 800d414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d418:	4851      	ldr	r0, [pc, #324]	; (800d560 <_svfiprintf_r+0x1ec>)
 800d41a:	f7f2 fee9 	bl	80001f0 <memchr>
 800d41e:	9a04      	ldr	r2, [sp, #16]
 800d420:	b9d8      	cbnz	r0, 800d45a <_svfiprintf_r+0xe6>
 800d422:	06d0      	lsls	r0, r2, #27
 800d424:	bf44      	itt	mi
 800d426:	2320      	movmi	r3, #32
 800d428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d42c:	0711      	lsls	r1, r2, #28
 800d42e:	bf44      	itt	mi
 800d430:	232b      	movmi	r3, #43	; 0x2b
 800d432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d436:	f89a 3000 	ldrb.w	r3, [sl]
 800d43a:	2b2a      	cmp	r3, #42	; 0x2a
 800d43c:	d015      	beq.n	800d46a <_svfiprintf_r+0xf6>
 800d43e:	9a07      	ldr	r2, [sp, #28]
 800d440:	4654      	mov	r4, sl
 800d442:	2000      	movs	r0, #0
 800d444:	f04f 0c0a 	mov.w	ip, #10
 800d448:	4621      	mov	r1, r4
 800d44a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d44e:	3b30      	subs	r3, #48	; 0x30
 800d450:	2b09      	cmp	r3, #9
 800d452:	d94e      	bls.n	800d4f2 <_svfiprintf_r+0x17e>
 800d454:	b1b0      	cbz	r0, 800d484 <_svfiprintf_r+0x110>
 800d456:	9207      	str	r2, [sp, #28]
 800d458:	e014      	b.n	800d484 <_svfiprintf_r+0x110>
 800d45a:	eba0 0308 	sub.w	r3, r0, r8
 800d45e:	fa09 f303 	lsl.w	r3, r9, r3
 800d462:	4313      	orrs	r3, r2
 800d464:	9304      	str	r3, [sp, #16]
 800d466:	46a2      	mov	sl, r4
 800d468:	e7d2      	b.n	800d410 <_svfiprintf_r+0x9c>
 800d46a:	9b03      	ldr	r3, [sp, #12]
 800d46c:	1d19      	adds	r1, r3, #4
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	9103      	str	r1, [sp, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	bfbb      	ittet	lt
 800d476:	425b      	neglt	r3, r3
 800d478:	f042 0202 	orrlt.w	r2, r2, #2
 800d47c:	9307      	strge	r3, [sp, #28]
 800d47e:	9307      	strlt	r3, [sp, #28]
 800d480:	bfb8      	it	lt
 800d482:	9204      	strlt	r2, [sp, #16]
 800d484:	7823      	ldrb	r3, [r4, #0]
 800d486:	2b2e      	cmp	r3, #46	; 0x2e
 800d488:	d10c      	bne.n	800d4a4 <_svfiprintf_r+0x130>
 800d48a:	7863      	ldrb	r3, [r4, #1]
 800d48c:	2b2a      	cmp	r3, #42	; 0x2a
 800d48e:	d135      	bne.n	800d4fc <_svfiprintf_r+0x188>
 800d490:	9b03      	ldr	r3, [sp, #12]
 800d492:	1d1a      	adds	r2, r3, #4
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	9203      	str	r2, [sp, #12]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	bfb8      	it	lt
 800d49c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4a0:	3402      	adds	r4, #2
 800d4a2:	9305      	str	r3, [sp, #20]
 800d4a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d570 <_svfiprintf_r+0x1fc>
 800d4a8:	7821      	ldrb	r1, [r4, #0]
 800d4aa:	2203      	movs	r2, #3
 800d4ac:	4650      	mov	r0, sl
 800d4ae:	f7f2 fe9f 	bl	80001f0 <memchr>
 800d4b2:	b140      	cbz	r0, 800d4c6 <_svfiprintf_r+0x152>
 800d4b4:	2340      	movs	r3, #64	; 0x40
 800d4b6:	eba0 000a 	sub.w	r0, r0, sl
 800d4ba:	fa03 f000 	lsl.w	r0, r3, r0
 800d4be:	9b04      	ldr	r3, [sp, #16]
 800d4c0:	4303      	orrs	r3, r0
 800d4c2:	3401      	adds	r4, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ca:	4826      	ldr	r0, [pc, #152]	; (800d564 <_svfiprintf_r+0x1f0>)
 800d4cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4d0:	2206      	movs	r2, #6
 800d4d2:	f7f2 fe8d 	bl	80001f0 <memchr>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d038      	beq.n	800d54c <_svfiprintf_r+0x1d8>
 800d4da:	4b23      	ldr	r3, [pc, #140]	; (800d568 <_svfiprintf_r+0x1f4>)
 800d4dc:	bb1b      	cbnz	r3, 800d526 <_svfiprintf_r+0x1b2>
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	3307      	adds	r3, #7
 800d4e2:	f023 0307 	bic.w	r3, r3, #7
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	9303      	str	r3, [sp, #12]
 800d4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ec:	4433      	add	r3, r6
 800d4ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f0:	e767      	b.n	800d3c2 <_svfiprintf_r+0x4e>
 800d4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4f6:	460c      	mov	r4, r1
 800d4f8:	2001      	movs	r0, #1
 800d4fa:	e7a5      	b.n	800d448 <_svfiprintf_r+0xd4>
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	3401      	adds	r4, #1
 800d500:	9305      	str	r3, [sp, #20]
 800d502:	4619      	mov	r1, r3
 800d504:	f04f 0c0a 	mov.w	ip, #10
 800d508:	4620      	mov	r0, r4
 800d50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d50e:	3a30      	subs	r2, #48	; 0x30
 800d510:	2a09      	cmp	r2, #9
 800d512:	d903      	bls.n	800d51c <_svfiprintf_r+0x1a8>
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0c5      	beq.n	800d4a4 <_svfiprintf_r+0x130>
 800d518:	9105      	str	r1, [sp, #20]
 800d51a:	e7c3      	b.n	800d4a4 <_svfiprintf_r+0x130>
 800d51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d520:	4604      	mov	r4, r0
 800d522:	2301      	movs	r3, #1
 800d524:	e7f0      	b.n	800d508 <_svfiprintf_r+0x194>
 800d526:	ab03      	add	r3, sp, #12
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	462a      	mov	r2, r5
 800d52c:	4b0f      	ldr	r3, [pc, #60]	; (800d56c <_svfiprintf_r+0x1f8>)
 800d52e:	a904      	add	r1, sp, #16
 800d530:	4638      	mov	r0, r7
 800d532:	f3af 8000 	nop.w
 800d536:	1c42      	adds	r2, r0, #1
 800d538:	4606      	mov	r6, r0
 800d53a:	d1d6      	bne.n	800d4ea <_svfiprintf_r+0x176>
 800d53c:	89ab      	ldrh	r3, [r5, #12]
 800d53e:	065b      	lsls	r3, r3, #25
 800d540:	f53f af2c 	bmi.w	800d39c <_svfiprintf_r+0x28>
 800d544:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d546:	b01d      	add	sp, #116	; 0x74
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d54c:	ab03      	add	r3, sp, #12
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	462a      	mov	r2, r5
 800d552:	4b06      	ldr	r3, [pc, #24]	; (800d56c <_svfiprintf_r+0x1f8>)
 800d554:	a904      	add	r1, sp, #16
 800d556:	4638      	mov	r0, r7
 800d558:	f000 f87a 	bl	800d650 <_printf_i>
 800d55c:	e7eb      	b.n	800d536 <_svfiprintf_r+0x1c2>
 800d55e:	bf00      	nop
 800d560:	0800de64 	.word	0x0800de64
 800d564:	0800de6e 	.word	0x0800de6e
 800d568:	00000000 	.word	0x00000000
 800d56c:	0800d2bf 	.word	0x0800d2bf
 800d570:	0800de6a 	.word	0x0800de6a

0800d574 <_printf_common>:
 800d574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d578:	4616      	mov	r6, r2
 800d57a:	4699      	mov	r9, r3
 800d57c:	688a      	ldr	r2, [r1, #8]
 800d57e:	690b      	ldr	r3, [r1, #16]
 800d580:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d584:	4293      	cmp	r3, r2
 800d586:	bfb8      	it	lt
 800d588:	4613      	movlt	r3, r2
 800d58a:	6033      	str	r3, [r6, #0]
 800d58c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d590:	4607      	mov	r7, r0
 800d592:	460c      	mov	r4, r1
 800d594:	b10a      	cbz	r2, 800d59a <_printf_common+0x26>
 800d596:	3301      	adds	r3, #1
 800d598:	6033      	str	r3, [r6, #0]
 800d59a:	6823      	ldr	r3, [r4, #0]
 800d59c:	0699      	lsls	r1, r3, #26
 800d59e:	bf42      	ittt	mi
 800d5a0:	6833      	ldrmi	r3, [r6, #0]
 800d5a2:	3302      	addmi	r3, #2
 800d5a4:	6033      	strmi	r3, [r6, #0]
 800d5a6:	6825      	ldr	r5, [r4, #0]
 800d5a8:	f015 0506 	ands.w	r5, r5, #6
 800d5ac:	d106      	bne.n	800d5bc <_printf_common+0x48>
 800d5ae:	f104 0a19 	add.w	sl, r4, #25
 800d5b2:	68e3      	ldr	r3, [r4, #12]
 800d5b4:	6832      	ldr	r2, [r6, #0]
 800d5b6:	1a9b      	subs	r3, r3, r2
 800d5b8:	42ab      	cmp	r3, r5
 800d5ba:	dc26      	bgt.n	800d60a <_printf_common+0x96>
 800d5bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5c0:	1e13      	subs	r3, r2, #0
 800d5c2:	6822      	ldr	r2, [r4, #0]
 800d5c4:	bf18      	it	ne
 800d5c6:	2301      	movne	r3, #1
 800d5c8:	0692      	lsls	r2, r2, #26
 800d5ca:	d42b      	bmi.n	800d624 <_printf_common+0xb0>
 800d5cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	4638      	mov	r0, r7
 800d5d4:	47c0      	blx	r8
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	d01e      	beq.n	800d618 <_printf_common+0xa4>
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	68e5      	ldr	r5, [r4, #12]
 800d5de:	6832      	ldr	r2, [r6, #0]
 800d5e0:	f003 0306 	and.w	r3, r3, #6
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	bf08      	it	eq
 800d5e8:	1aad      	subeq	r5, r5, r2
 800d5ea:	68a3      	ldr	r3, [r4, #8]
 800d5ec:	6922      	ldr	r2, [r4, #16]
 800d5ee:	bf0c      	ite	eq
 800d5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5f4:	2500      	movne	r5, #0
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	bfc4      	itt	gt
 800d5fa:	1a9b      	subgt	r3, r3, r2
 800d5fc:	18ed      	addgt	r5, r5, r3
 800d5fe:	2600      	movs	r6, #0
 800d600:	341a      	adds	r4, #26
 800d602:	42b5      	cmp	r5, r6
 800d604:	d11a      	bne.n	800d63c <_printf_common+0xc8>
 800d606:	2000      	movs	r0, #0
 800d608:	e008      	b.n	800d61c <_printf_common+0xa8>
 800d60a:	2301      	movs	r3, #1
 800d60c:	4652      	mov	r2, sl
 800d60e:	4649      	mov	r1, r9
 800d610:	4638      	mov	r0, r7
 800d612:	47c0      	blx	r8
 800d614:	3001      	adds	r0, #1
 800d616:	d103      	bne.n	800d620 <_printf_common+0xac>
 800d618:	f04f 30ff 	mov.w	r0, #4294967295
 800d61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d620:	3501      	adds	r5, #1
 800d622:	e7c6      	b.n	800d5b2 <_printf_common+0x3e>
 800d624:	18e1      	adds	r1, r4, r3
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	2030      	movs	r0, #48	; 0x30
 800d62a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d62e:	4422      	add	r2, r4
 800d630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d634:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d638:	3302      	adds	r3, #2
 800d63a:	e7c7      	b.n	800d5cc <_printf_common+0x58>
 800d63c:	2301      	movs	r3, #1
 800d63e:	4622      	mov	r2, r4
 800d640:	4649      	mov	r1, r9
 800d642:	4638      	mov	r0, r7
 800d644:	47c0      	blx	r8
 800d646:	3001      	adds	r0, #1
 800d648:	d0e6      	beq.n	800d618 <_printf_common+0xa4>
 800d64a:	3601      	adds	r6, #1
 800d64c:	e7d9      	b.n	800d602 <_printf_common+0x8e>
	...

0800d650 <_printf_i>:
 800d650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d654:	7e0f      	ldrb	r7, [r1, #24]
 800d656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d658:	2f78      	cmp	r7, #120	; 0x78
 800d65a:	4691      	mov	r9, r2
 800d65c:	4680      	mov	r8, r0
 800d65e:	460c      	mov	r4, r1
 800d660:	469a      	mov	sl, r3
 800d662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d666:	d807      	bhi.n	800d678 <_printf_i+0x28>
 800d668:	2f62      	cmp	r7, #98	; 0x62
 800d66a:	d80a      	bhi.n	800d682 <_printf_i+0x32>
 800d66c:	2f00      	cmp	r7, #0
 800d66e:	f000 80d8 	beq.w	800d822 <_printf_i+0x1d2>
 800d672:	2f58      	cmp	r7, #88	; 0x58
 800d674:	f000 80a3 	beq.w	800d7be <_printf_i+0x16e>
 800d678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d67c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d680:	e03a      	b.n	800d6f8 <_printf_i+0xa8>
 800d682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d686:	2b15      	cmp	r3, #21
 800d688:	d8f6      	bhi.n	800d678 <_printf_i+0x28>
 800d68a:	a101      	add	r1, pc, #4	; (adr r1, 800d690 <_printf_i+0x40>)
 800d68c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d690:	0800d6e9 	.word	0x0800d6e9
 800d694:	0800d6fd 	.word	0x0800d6fd
 800d698:	0800d679 	.word	0x0800d679
 800d69c:	0800d679 	.word	0x0800d679
 800d6a0:	0800d679 	.word	0x0800d679
 800d6a4:	0800d679 	.word	0x0800d679
 800d6a8:	0800d6fd 	.word	0x0800d6fd
 800d6ac:	0800d679 	.word	0x0800d679
 800d6b0:	0800d679 	.word	0x0800d679
 800d6b4:	0800d679 	.word	0x0800d679
 800d6b8:	0800d679 	.word	0x0800d679
 800d6bc:	0800d809 	.word	0x0800d809
 800d6c0:	0800d72d 	.word	0x0800d72d
 800d6c4:	0800d7eb 	.word	0x0800d7eb
 800d6c8:	0800d679 	.word	0x0800d679
 800d6cc:	0800d679 	.word	0x0800d679
 800d6d0:	0800d82b 	.word	0x0800d82b
 800d6d4:	0800d679 	.word	0x0800d679
 800d6d8:	0800d72d 	.word	0x0800d72d
 800d6dc:	0800d679 	.word	0x0800d679
 800d6e0:	0800d679 	.word	0x0800d679
 800d6e4:	0800d7f3 	.word	0x0800d7f3
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	1d1a      	adds	r2, r3, #4
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	602a      	str	r2, [r5, #0]
 800d6f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e0a3      	b.n	800d844 <_printf_i+0x1f4>
 800d6fc:	6820      	ldr	r0, [r4, #0]
 800d6fe:	6829      	ldr	r1, [r5, #0]
 800d700:	0606      	lsls	r6, r0, #24
 800d702:	f101 0304 	add.w	r3, r1, #4
 800d706:	d50a      	bpl.n	800d71e <_printf_i+0xce>
 800d708:	680e      	ldr	r6, [r1, #0]
 800d70a:	602b      	str	r3, [r5, #0]
 800d70c:	2e00      	cmp	r6, #0
 800d70e:	da03      	bge.n	800d718 <_printf_i+0xc8>
 800d710:	232d      	movs	r3, #45	; 0x2d
 800d712:	4276      	negs	r6, r6
 800d714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d718:	485e      	ldr	r0, [pc, #376]	; (800d894 <_printf_i+0x244>)
 800d71a:	230a      	movs	r3, #10
 800d71c:	e019      	b.n	800d752 <_printf_i+0x102>
 800d71e:	680e      	ldr	r6, [r1, #0]
 800d720:	602b      	str	r3, [r5, #0]
 800d722:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d726:	bf18      	it	ne
 800d728:	b236      	sxthne	r6, r6
 800d72a:	e7ef      	b.n	800d70c <_printf_i+0xbc>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	6820      	ldr	r0, [r4, #0]
 800d730:	1d19      	adds	r1, r3, #4
 800d732:	6029      	str	r1, [r5, #0]
 800d734:	0601      	lsls	r1, r0, #24
 800d736:	d501      	bpl.n	800d73c <_printf_i+0xec>
 800d738:	681e      	ldr	r6, [r3, #0]
 800d73a:	e002      	b.n	800d742 <_printf_i+0xf2>
 800d73c:	0646      	lsls	r6, r0, #25
 800d73e:	d5fb      	bpl.n	800d738 <_printf_i+0xe8>
 800d740:	881e      	ldrh	r6, [r3, #0]
 800d742:	4854      	ldr	r0, [pc, #336]	; (800d894 <_printf_i+0x244>)
 800d744:	2f6f      	cmp	r7, #111	; 0x6f
 800d746:	bf0c      	ite	eq
 800d748:	2308      	moveq	r3, #8
 800d74a:	230a      	movne	r3, #10
 800d74c:	2100      	movs	r1, #0
 800d74e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d752:	6865      	ldr	r5, [r4, #4]
 800d754:	60a5      	str	r5, [r4, #8]
 800d756:	2d00      	cmp	r5, #0
 800d758:	bfa2      	ittt	ge
 800d75a:	6821      	ldrge	r1, [r4, #0]
 800d75c:	f021 0104 	bicge.w	r1, r1, #4
 800d760:	6021      	strge	r1, [r4, #0]
 800d762:	b90e      	cbnz	r6, 800d768 <_printf_i+0x118>
 800d764:	2d00      	cmp	r5, #0
 800d766:	d04d      	beq.n	800d804 <_printf_i+0x1b4>
 800d768:	4615      	mov	r5, r2
 800d76a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d76e:	fb03 6711 	mls	r7, r3, r1, r6
 800d772:	5dc7      	ldrb	r7, [r0, r7]
 800d774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d778:	4637      	mov	r7, r6
 800d77a:	42bb      	cmp	r3, r7
 800d77c:	460e      	mov	r6, r1
 800d77e:	d9f4      	bls.n	800d76a <_printf_i+0x11a>
 800d780:	2b08      	cmp	r3, #8
 800d782:	d10b      	bne.n	800d79c <_printf_i+0x14c>
 800d784:	6823      	ldr	r3, [r4, #0]
 800d786:	07de      	lsls	r6, r3, #31
 800d788:	d508      	bpl.n	800d79c <_printf_i+0x14c>
 800d78a:	6923      	ldr	r3, [r4, #16]
 800d78c:	6861      	ldr	r1, [r4, #4]
 800d78e:	4299      	cmp	r1, r3
 800d790:	bfde      	ittt	le
 800d792:	2330      	movle	r3, #48	; 0x30
 800d794:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d79c:	1b52      	subs	r2, r2, r5
 800d79e:	6122      	str	r2, [r4, #16]
 800d7a0:	f8cd a000 	str.w	sl, [sp]
 800d7a4:	464b      	mov	r3, r9
 800d7a6:	aa03      	add	r2, sp, #12
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f7ff fee2 	bl	800d574 <_printf_common>
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	d14c      	bne.n	800d84e <_printf_i+0x1fe>
 800d7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b8:	b004      	add	sp, #16
 800d7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7be:	4835      	ldr	r0, [pc, #212]	; (800d894 <_printf_i+0x244>)
 800d7c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d7c4:	6829      	ldr	r1, [r5, #0]
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7cc:	6029      	str	r1, [r5, #0]
 800d7ce:	061d      	lsls	r5, r3, #24
 800d7d0:	d514      	bpl.n	800d7fc <_printf_i+0x1ac>
 800d7d2:	07df      	lsls	r7, r3, #31
 800d7d4:	bf44      	itt	mi
 800d7d6:	f043 0320 	orrmi.w	r3, r3, #32
 800d7da:	6023      	strmi	r3, [r4, #0]
 800d7dc:	b91e      	cbnz	r6, 800d7e6 <_printf_i+0x196>
 800d7de:	6823      	ldr	r3, [r4, #0]
 800d7e0:	f023 0320 	bic.w	r3, r3, #32
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	2310      	movs	r3, #16
 800d7e8:	e7b0      	b.n	800d74c <_printf_i+0xfc>
 800d7ea:	6823      	ldr	r3, [r4, #0]
 800d7ec:	f043 0320 	orr.w	r3, r3, #32
 800d7f0:	6023      	str	r3, [r4, #0]
 800d7f2:	2378      	movs	r3, #120	; 0x78
 800d7f4:	4828      	ldr	r0, [pc, #160]	; (800d898 <_printf_i+0x248>)
 800d7f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d7fa:	e7e3      	b.n	800d7c4 <_printf_i+0x174>
 800d7fc:	0659      	lsls	r1, r3, #25
 800d7fe:	bf48      	it	mi
 800d800:	b2b6      	uxthmi	r6, r6
 800d802:	e7e6      	b.n	800d7d2 <_printf_i+0x182>
 800d804:	4615      	mov	r5, r2
 800d806:	e7bb      	b.n	800d780 <_printf_i+0x130>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	6826      	ldr	r6, [r4, #0]
 800d80c:	6961      	ldr	r1, [r4, #20]
 800d80e:	1d18      	adds	r0, r3, #4
 800d810:	6028      	str	r0, [r5, #0]
 800d812:	0635      	lsls	r5, r6, #24
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	d501      	bpl.n	800d81c <_printf_i+0x1cc>
 800d818:	6019      	str	r1, [r3, #0]
 800d81a:	e002      	b.n	800d822 <_printf_i+0x1d2>
 800d81c:	0670      	lsls	r0, r6, #25
 800d81e:	d5fb      	bpl.n	800d818 <_printf_i+0x1c8>
 800d820:	8019      	strh	r1, [r3, #0]
 800d822:	2300      	movs	r3, #0
 800d824:	6123      	str	r3, [r4, #16]
 800d826:	4615      	mov	r5, r2
 800d828:	e7ba      	b.n	800d7a0 <_printf_i+0x150>
 800d82a:	682b      	ldr	r3, [r5, #0]
 800d82c:	1d1a      	adds	r2, r3, #4
 800d82e:	602a      	str	r2, [r5, #0]
 800d830:	681d      	ldr	r5, [r3, #0]
 800d832:	6862      	ldr	r2, [r4, #4]
 800d834:	2100      	movs	r1, #0
 800d836:	4628      	mov	r0, r5
 800d838:	f7f2 fcda 	bl	80001f0 <memchr>
 800d83c:	b108      	cbz	r0, 800d842 <_printf_i+0x1f2>
 800d83e:	1b40      	subs	r0, r0, r5
 800d840:	6060      	str	r0, [r4, #4]
 800d842:	6863      	ldr	r3, [r4, #4]
 800d844:	6123      	str	r3, [r4, #16]
 800d846:	2300      	movs	r3, #0
 800d848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d84c:	e7a8      	b.n	800d7a0 <_printf_i+0x150>
 800d84e:	6923      	ldr	r3, [r4, #16]
 800d850:	462a      	mov	r2, r5
 800d852:	4649      	mov	r1, r9
 800d854:	4640      	mov	r0, r8
 800d856:	47d0      	blx	sl
 800d858:	3001      	adds	r0, #1
 800d85a:	d0ab      	beq.n	800d7b4 <_printf_i+0x164>
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	079b      	lsls	r3, r3, #30
 800d860:	d413      	bmi.n	800d88a <_printf_i+0x23a>
 800d862:	68e0      	ldr	r0, [r4, #12]
 800d864:	9b03      	ldr	r3, [sp, #12]
 800d866:	4298      	cmp	r0, r3
 800d868:	bfb8      	it	lt
 800d86a:	4618      	movlt	r0, r3
 800d86c:	e7a4      	b.n	800d7b8 <_printf_i+0x168>
 800d86e:	2301      	movs	r3, #1
 800d870:	4632      	mov	r2, r6
 800d872:	4649      	mov	r1, r9
 800d874:	4640      	mov	r0, r8
 800d876:	47d0      	blx	sl
 800d878:	3001      	adds	r0, #1
 800d87a:	d09b      	beq.n	800d7b4 <_printf_i+0x164>
 800d87c:	3501      	adds	r5, #1
 800d87e:	68e3      	ldr	r3, [r4, #12]
 800d880:	9903      	ldr	r1, [sp, #12]
 800d882:	1a5b      	subs	r3, r3, r1
 800d884:	42ab      	cmp	r3, r5
 800d886:	dcf2      	bgt.n	800d86e <_printf_i+0x21e>
 800d888:	e7eb      	b.n	800d862 <_printf_i+0x212>
 800d88a:	2500      	movs	r5, #0
 800d88c:	f104 0619 	add.w	r6, r4, #25
 800d890:	e7f5      	b.n	800d87e <_printf_i+0x22e>
 800d892:	bf00      	nop
 800d894:	0800de75 	.word	0x0800de75
 800d898:	0800de86 	.word	0x0800de86

0800d89c <memmove>:
 800d89c:	4288      	cmp	r0, r1
 800d89e:	b510      	push	{r4, lr}
 800d8a0:	eb01 0402 	add.w	r4, r1, r2
 800d8a4:	d902      	bls.n	800d8ac <memmove+0x10>
 800d8a6:	4284      	cmp	r4, r0
 800d8a8:	4623      	mov	r3, r4
 800d8aa:	d807      	bhi.n	800d8bc <memmove+0x20>
 800d8ac:	1e43      	subs	r3, r0, #1
 800d8ae:	42a1      	cmp	r1, r4
 800d8b0:	d008      	beq.n	800d8c4 <memmove+0x28>
 800d8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8ba:	e7f8      	b.n	800d8ae <memmove+0x12>
 800d8bc:	4402      	add	r2, r0
 800d8be:	4601      	mov	r1, r0
 800d8c0:	428a      	cmp	r2, r1
 800d8c2:	d100      	bne.n	800d8c6 <memmove+0x2a>
 800d8c4:	bd10      	pop	{r4, pc}
 800d8c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8ce:	e7f7      	b.n	800d8c0 <memmove+0x24>

0800d8d0 <_malloc_usable_size_r>:
 800d8d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8d4:	1f18      	subs	r0, r3, #4
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	bfbc      	itt	lt
 800d8da:	580b      	ldrlt	r3, [r1, r0]
 800d8dc:	18c0      	addlt	r0, r0, r3
 800d8de:	4770      	bx	lr

0800d8e0 <_init>:
 800d8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e2:	bf00      	nop
 800d8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8e6:	bc08      	pop	{r3}
 800d8e8:	469e      	mov	lr, r3
 800d8ea:	4770      	bx	lr

0800d8ec <_fini>:
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	bf00      	nop
 800d8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8f2:	bc08      	pop	{r3}
 800d8f4:	469e      	mov	lr, r3
 800d8f6:	4770      	bx	lr
